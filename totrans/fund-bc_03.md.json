["```\nclass Block(object): \n    \"\"\"A class representing the block for the blockchain\"\"\" \n\n    def __init__(self, index, previous_hash, timestamp, data, hash): \n        self.index = index \n        self.previous_hash = previous_hash \n        self.timestamp = timestamp \n        self.data = data \n        self.hash = hash \n```", "```\nclass Blockchain(object): \n    \"\"\"A class representing list of blocks\"\"\" \n\n    def __init__(self): \n\n        self._chain = [self.get_genesis_block()] \n        self.timestamp = int(datetime.now().timestamp()\n```", "```\ndef get_genesis_block(self): \n    \"\"\"creates first block of the chain\"\"\" \n\n    return Block(0, \"0\", 1465154705, \"my genesis block!!\", \"816534932c2b7154836da6afc367695e6337db8a921823784c14378abed4f7d7\"\n ) \n```", "```\nSHA256.new(data=(str(0) + \"0\"+ str(1465154705) +\"my genesis \n block!!\").encode()).hexdigest() \n\ndef calculate_hash(self, index, previous_hash, timestamp, data): \n    \"\"\"calculates SHA256 hash value\"\"\" \n\n    hash_object = SHA256.new(data=(str(index) + previous_hash + \n str(timestamp) + data).encode()) \n    return hash_object.hexdigest()\n```", "```\ndef get_latest_block(self): \n    \"\"\"gets the last block from the blockchain\"\"\" \n\n    try: \n        return self._chain[-1] \n    except IndexError as e: \n        return None \n```", "```\ndef create_block(self, block_data): \n    \"\"\"creates a new block with the given block data\"\"\" \n\n    previous_block = self.get_latest_block() \n    next_index = previous_block.index + 1 \n    next_timestamp = self.timestamp \n    next_hash = self.calculate_hash(next_index, \n previous_block.hash, next_timestamp, block_data) \n    return Block(next_index, previous_block.hash, next_timestamp, \n block_data, next_hash)\n```", "```\ndef add_block(self, data): \n    \"\"\"appends a new block to the blockchain\"\"\" \n\n    self._chain.append(self.create_block(data)) \n\n@property \ndef chain(self): \n    \"\"\"created a dict containing list of block objects to view\"\"\" \n\n    return self.dict(self._chain) \n\ndef dict(self, chain): \n    \"\"\"converts list of block objects to dictionary\"\"\" \n\n    return json.loads(json.dumps(chain, default=lambda o: \n o.__dict__)) \n\ndef reset(self): \n    \"\"\"resets the blockchain blocks except genesis block\"\"\" \n\n    self._chain = [self._chain[0]] \n```", "```\nnew_chain = Blockchain() \nnew_chain.add_block(data=\"first block data\") \nnew_chain.add_block(data=\"second block data\") \nnew_chain.add_block(data=\"third block data\") \n\nprint(json.dumps(new_chain.chain))\n\nnew_chain.reset() \n\nnew_chain.add_block(data=\"first block data\") \nnew_chain.add_block(data=\"second block data\") \nnew_chain.add_block(data=\"third block data\") \n\nprint(json.dumps(new_chain.chain))\n```", "```\n[ \n  { \n    \"index\": 0, \n    \"data\": \"my genesis block!!\", \n    \"hash\": \"816534932c2b7154836da6afc367695e6337db8a921823784c14378abed4f7d7\", \n    \"previous_hash\": \"0\", \n    \"timestamp\": 1465154705 \n  }, \n  { \n    \"index\": 1, \n    \"data\": \"first block data\", \n    \"hash\": \"c8028a8a867a639fec693243f88a4e04f0ab5872f6913da53210316bd97d6ebb\", \n    \"previous_hash\": \"816534932c2b7154836da6afc367695e6337db8a921823784c14378abed4f7d7\", \n    \"timestamp\": \"1521059029\" \n  }, \n  { \n    \"index\": 2, \n    \"data\": \"second block data\", \n    \"hash\": \"aba71ef94fdc7d70bd39e5aa3eeef6fd53ac8e7fc102c2f638126c8a74d5cefe\", \n    \"previous_hash\": \"c8028a8a867a639fec693243f88a4e04f0ab5872f6913da53210316bd97d6ebb\", \n    \"timestamp\": \"1521059029\" \n  }, \n  { \n    \"index\": 3, \n    \"data\": \"third block data\", \n    \"hash\": \"f208c8375036ad785c9226d09585bd50a2b3993300f75e041dc3f2f0b6cfdd2b\", \n    \"previous_hash\": \"aba71ef94fdc7d70bd39e5aa3eeef6fd53ac8e7fc102c2f638126c8a74d5cefe\", \n    \"timestamp\": \"1521059029\" \n  } \n] \n```", "```\nnew_chain.reset() \nnew_chain.add_block(data=\"modified first block data\") \nnew_chain.add_block(data=\"second block data\") \nnew_chain.add_block(data=\"third block data\") \n\nprint(json.dumps(new_chain.chain)) \n```", "```\n[ \n  { \n    \"hash\": \"816534932c2b7154836da6afc367695e6337db8a921823784c14378abed4f7d7\", \n    \"data\": \"my genesis block!!\", \n    \"index\": 0, \n    \"timestamp\": 1465154705, \n    \"previous_hash\": \"0\" \n  }, \n  { \n    \"hash\": \"06045fb547175c5cd32b3ba326ce9768c22771c3e128f801bbec19ea1eb20052\", \n    \"data\": \"modified first block data\", \n    \"index\": 1, \n    \"timestamp\": \"1521086845\", \n    \"previous_hash\": \"816534932c2b7154836da6afc367695e6337db8a921823784c14378abed4f7d7\" \n  }, \n  { \n    \"hash\": \"40c54c31afda040d037dae637ab1ec6e5eb9b132c761b9eadda21e68c0897a65\", \n    \"data\": \"second block data\", \n    \"index\": 2, \n    \"timestamp\": \"1521086845\", \n    \"previous_hash\": \"06045fb547175c5cd32b3ba326ce9768c22771c3e128f801bbec19ea1eb20052\" \n  }, \n  { \n    \"hash\": \"466083f34143e7f99196de01cd7777c52b0763624acd2895f0d28047c670eb41\", \n    \"data\": \"third block data\", \n    \"index\": 3, \n    \"timestamp\": \"1521086845\", \n    \"previous_hash\": \"40c54c31afda040d037dae637ab1ec6e5eb9b132c761b9eadda21e68c0897a65\" \n  } \n] \n```", "```\nfrom Crypto.Hash import SHA256 \n\ntext = \"I am Satoshi Nakamoto\" \n\nfor nonce in range(20): \n\n    input_data = text + str(nonce) \n\n    hash_data = SHA256.new(input_data.encode()).hexdigest() \n\n    print(input_data, '=>', hash_data) \n```", "```\nI am Satoshi \n Nakamoto0=>a80a81401765c8eddee25df36728d732acb6d135... \nI am Satoshi \n Nakamoto1=>f7bc9a6304a4647bb41241a677b5345fe3cd30db... \nI am Satoshi \n Nakamoto2=>ea758a8134b115298a1583ffb80ae62939a2d086... \nI am Satoshi \n Nakamoto3=>bfa9779618ff072c903d773de30c99bd6e2fd70b... \nI am Satoshi \n Nakamoto4=>bce8564de9a83c18c31944a66bde992ff1a77513... \nI am Satoshi \n Nakamoto5=>eb362c3cf3479be0a97a20163589038e4dbead49... \nI am Satoshi \n Nakamoto6=>4a2fd48e3be420d0d28e202360cfbaba410bedde... \nI am Satoshi \n Nakamoto7=>790b5a1349a5f2b909bf74d0d166b17a333c7fd8... \nI am Satoshi \n Nakamoto8=>702c45e5b15aa54b625d68dd947f1597b1fa571d... \nI am Satoshi \n Nakamoto9=>7007cf7dd40f5e933cd89fff5b791ff0614d9c60... \nI am Satoshi \n Nakamoto10=>c2f38c81992f4614206a21537bd634af7178964... \nI am Satoshi \n Nakamoto11=>7045da6ed8a914690f087690e1e8d662cf9e56f... \nI am Satoshi \n Nakamoto12=>60f01db30c1a0d4cbce2b4b22e88b9b93f58f10... \nI am Satoshi \n Nakamoto13=>0ebc56d59a34f5082aaef3d66b37a661696c2b6... \nI am Satoshi \n Nakamoto14=>27ead1ca85da66981fd9da01a8c6816f54cfa0d... \nI am Satoshi \n Nakamoto15=>394809fb809c5f83ce97ab554a2812cd901d3b1... \nI am Satoshi \n Nakamoto16=>8fa4992219df33f50834465d30474298a7d5ec7... \nI am Satoshi \n Nakamoto17=>dca9b8b4f8d8e1521fa4eaa46f4f0cdf9ae0e69... \nI am Satoshi \n Nakamoto18=>9989a401b2a3a318b01e9ca9a22b0f39d82e48b... \nI am Satoshi \n Nakamoto19=>cda56022ecb5b67b2bc93a2d764e75fc6ec6e6e... \n```", "```\nfrom Crypto.Hash import SHA256 \nfrom datetime import datetime \n\nclass Block(object): \n    \"\"\"A class representing the block for the blockchain\"\"\" \n\n    def __init__(self, index, previous_hash, timestamp, data, \n difficulty_bits, nonce, hash): \n        self.index = index \n        self.previous_hash = previous_hash \n        self.timestamp = timestamp \n        self.data = data \n        self.difficulty_bits = difficulty_bits \n        self.nonce = nonce \n        self.hash = hash \n```", "```\nclass Blockchain(object): \n    \"\"\"A class representing list of blocks\"\"\" \n\n    def __init__(self): \n\n        self._chain = [self.get_genesis_block()] \n        self.timestamp = int(datetime.now().timestamp())\n        self.difficulty_bits = 0 \n```", "```\ndef create_block(self, block_data): \n    \"\"\"creates a new block with the given block data\"\"\" \n\n    previous_block = self.get_latest_block() \n    next_index = previous_block.index + 1 \n    next_timestamp = self.timestamp \n    next_hash, next_nonce = self.calculate_hash(next_index, \n previous_block.hash, next_timestamp, block_data) \n    return Block(next_index, previous_block.hash, next_timestamp, \n block_data, self.difficulty_bits, next_nonce, next_hash) \n```", "```\ndef calculate_hash(self, index, previous_hash, timestamp, data): \n    \"\"\"calculates SHA256 hash value by solving hash puzzle\"\"\" \n\n    header = str(index) + previous_hash + str(timestamp) + data + \n str(self.difficulty_bits) \n\n    hash_value, nonce = self.proof_of_work(header) \n    return hash_value, nonce \n```", "```\ndef proof_of_work(self, header): \n\n    target = 2 ** (256 - difficulty_bits) \n\n    for nonce in range(max_nonce): \n        hash_result = SHA256.new(data=(str(header) + \n str(nonce)).encode()).hexdigest() \n\n        if int(hash_result, 16) < target: \n            print(\"Success with nonce %d\" % nonce) \n            print(\"Hash is %s\" % hash_result) \n            return (hash_result, nonce) \n\n    print(\"Failed after %d (max_nonce) tries\" % nonce) \n    return nonce \n```", "```\nmax_nonce = 2 ** 32  # 4 billion \n\nif __name__ == '__main__': \n\n    new_chain = Blockchain() \n\n    for difficulty_bits in range(32): \n        difficulty = 2 ** difficulty_bits \n        new_chain.difficulty_bits = difficulty_bits \n        print(\"Difficulty: %ld (%d bits)\" % (difficulty, \n difficulty_bits)) \n        print(\"Starting search...\") \n\n        start_time = datetime.now() \n\n        new_block_data = 'test block with transactions' \n        new_chain.add_block(data=new_block_data) \n\n        end_time = datetime.now() \n\n        elapsed_time = (end_time - start_time).total_seconds() \n        print(\"Elapsed Time: %.4f seconds\" % elapsed_time) \n\n        if elapsed_time > 0: \n\n            hash_power = float(int(new_chain.chain[-\n 1].get(\"nonce\")) / elapsed_time) \n            print(\"Hashing Power: %ld hashes per second\" % \n hash_power) \n```", "```\nDifficulty: 1 (0 bits) \nStarting search... \nSuccess with nonce 0 \nHash is \n 365190b63a9ae8443e9dfb7463bcac6c207c29cdd0e8a5f251285d4d5ddbacb3 \nElapsed Time: 0.0029 seconds \nHashing Power: 0 hashes per second \nDifficulty: 2 (1 bits) \nStarting search... \nSuccess with nonce 0 \nHash is \n 67aad7ed255c1f7f3b6427cb75c60b6a9520c1ed19747d4f62b701691958f3b7 \nElapsed Time: 0.0001 seconds \nHashing Power: 0 hashes per second \n\n[...] \n\nDifficulty: 64 (6 bits) \nStarting search... \nSuccess with nonce 4 \nHash is \n 0061db8a0100345e7a1675d39f8c5dae34c89712365d9761e30546c0dbb17e6d \nElapsed Time: 0.0002 seconds \nHashing Power: 17316 hashes per second \nDifficulty: 128 (7 bits) \nStarting search... \nSuccess with nonce 22 \nHash is \n 0129f5f8dfae6063b09da9b6655848e4797c0ac22e1dba97dca6d9e6bfdbf6cb \nElapsed Time: 0.0009 seconds \nHashing Power: 23732 hashes per second \n\n[...] \n\nDifficulty: 33554432 (25 bits) \nStarting search... \nSuccess with nonce 3819559 \nHash is \n 0000001085152816d24bf7f32625295a0617a719b72f4f868e06003329975a9d \nElapsed Time: 122.2431 seconds \nHashing Power: 31245 hashes per second \nDifficulty: 67108864 (26 bits) \nStarting search... \nSuccess with nonce 12980169 \nHash is \n 0000003435ba522e2c2d52fc7ad31b144103a99694299621a2a0573fb6f6be9c \nElapsed Time: 410.8903 seconds \nHashing Power: 31590 hashes per second \nDifficulty: 134217728 (27 bits) \nStarting search... \n```", "```\nimport binascii \nfrom ecdsa import SigningKey, VerifyingKey, SECP256k1, keys \n\nclass Wallet: \n    def __init__(self): \n\n        self.private_key = None \n        self.public_key = None \n\n    def generate_key_pair(self): \n\n        sk = SigningKey.generate(curve=SECP256k1) \n        self.private_key = binascii.b2a_hex(sk.to_string()).decode() \n        self.public_key = \n binascii.b2a_hex(sk.get_verifying_key().to_string()).decode() \n```", "```\naccount = Wallet() \naccount.generate_key_pair() \nprint(\"Generated public key: %s\" % account.public_key)\nprint(\"Generated private key: %s\" % account.private_key)\n```", "```\nGenerated public key: \n b7f5edffe6d3532ed743e07c4de5551c2d7476a4053221999ce40edec2607bb4ef\n 7ecb9fc6ecf735fd3802fada56c42e18474f8bad269a965f95863f9fc38158 \nGenerated private key: \n 6eb9035be1dabd01fadcb6a9f92946decc868046184c7810a43806eb6cc46237 \n```", "```\nclass Transaction: \n\n    def __init__(self, public_key): \n        self.id = randint(1, 10**5) \n        self.signature = None \n        self.public_key = public_key \n```", "```\ndef sign(self, private_key): \n\n        data_to_sign = SHA256.new(str(self.id).encode()).digest() \n\n        sk = SigningKey.from_string(bytes.fromhex(private_key),  \n curve=SECP256k1) \n        self.signature =  \n binascii.b2a_hex(sk.sign(data_to_sign)).decode() \n```", "```\ndef verify(self): \n\n        vk = VerifyingKey.from_string(bytes.fromhex(self.public_key), \n curve=SECP256k1) \n\n        try: \n            vk.verify(bytes.fromhex(self.signature), \n SHA256.new(str(self.id).encode()).digest()) \n\n        except keys.BadSignatureError: \n            print('invalid transaction signature') \n            return False \n\n        return True\n```", "```\ntx = Transaction(account.public_key) \ntx.sign(account.private_key) \nprint(\"Generated signature: %s\" % tx.signature) \ntx.verify() \n\nGenerated signature: \n 943ed91d7ceb2a57d4e972845acda7ea818b994a840d3101d192ebe33a7c1f4d68\n 55e50ed7b882cd4d372d540187f52f2d5b3a6144a58fc20098095f1726849f \n```", "```\ntx.id = '1234' \ntx.verify() \n```"]