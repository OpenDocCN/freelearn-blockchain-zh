- en: Ethereum Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊开发
- en: For the past few chapters, we have been learning about Ethereum blockchain,
    its uses, and how it has shaped the decentralized technology, not for just currency
    based uses but also for other industry verticals. Further, we learned about development
    on top of the Ethereum blockchain, using smart contracts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几章中，我们一直在学习以太坊区块链及其用途以及它如何塑造了分散式技术，不仅仅是基于货币的用途，也适用于其他行业垂直领域。此外，我们还了解了在以太坊区块链上开发的内容，使用智能合约。
- en: In the previous chapter, we discussed Solidity—the programming language introduced
    by the Ethereum foundation. Solidity is the language that makes it possible to
    create decentralized applications on top of Ethereum blockchain, either to be
    used for creating another cryptocurrency token or for any other use case in which
    blockchain can have an essential role.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了 Solidity —— 以太坊基金会推出的编程语言。Solidity 是一种使在以太坊区块链上创建去中心化应用成为可能的语言，无论是用于创建另一种加密货币代币还是区块链可以发挥重要作用的任何其他用例。
- en: In this chapter, we will be specifically working on Ethereum development, which
    constitutes creating a token that represents a smart contract. We will be creating
    a coin or a token that will run on the Ethereum blockchain platform. We will be
    learning about the development, testing, and deployment of the token using Solidity
    and, along with this, we will be discussing important aspects of the smart contract
    development phase, which will help in using smart contracts for other applications
    and industries.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将专门讨论以太坊开发，其中包括创建代表智能合约的代币。我们将创建一个在以太坊区块链平台上运行的硬币或代币。我们将学习使用 Solidity
    进行代币的开发、测试和部署，并讨论智能合约开发阶段的重要方面，这将有助于将智能合约应用于其他应用和行业。
- en: 'In brief, we will be covering the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 简言之，我们将涵盖以下主题：
- en: Preparing for smart contract development
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备智能合约开发
- en: Working on smart contracts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约开发
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'In this chapter, we will go ahead and create a token on top of Ethereum blockchain.
    We will also briefly look into the development of DApp, which will use the smart
    contract to its full potential. Here is a list of tools required for the development
    process:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将前进并在以太坊区块链上创建一个代币。我们还将简要介绍 DApp 的开发，它将充分利用智能合约。以下是开发流程所需的工具列表：
- en: '**Code Editor or IDE**: Just as in the previous chapter, pick a code editor
    you are comfortable using; in this chapter, we are choosing Sublime text. Although,
    the official online IDE remix can also be used.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码编辑器或 IDE**：与上一章一样，选择一个您喜欢使用的代码编辑器；在本章中，我们选择 Sublime 文本。虽然，也可使用官方在线 IDE
    Remix。'
- en: '**Ethereum Wallet**: This is required for the deploying and testing of a smart
    contract on the TestnNet.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以太坊钱包**：这对在 TestnNet 上部署和测试智能合约是必需的。'
- en: '**Solc compiler**: This is for the compiling of a smart contract that is converting
    Solidity language code into bytecode for EVM to read.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Solc 编译器**：这用于编译智能合约，将 Solidity 语言代码转换为字节码以供 EVM 读取。'
- en: '**Truffle framework**: This makes it easier to test and deploy the smart contracts.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Truffle 框架**：这使得测试和部署智能合约变得更容易。'
- en: '**Web3**: This is a JavaScript library and is used to communicate with the
    Ethereum node; for example, we have a frontend interface in our application for
    users to interact with the blockchain, then `Web3` allows the user interface to
    interact with the contracts deployed over the blockchain.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web3**：这是一个 JavaScript 库，用于与以太坊节点通信；例如，如果我们的应用程序有一个前端界面供用户与区块链交互，那么 `Web3`
    允许用户界面与部署在区块链上的合同进行交互。'
- en: Preparing for smart contract development
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备智能合约开发
- en: Before we dive into development of smart contracts and further testing and deployment
    procedures, it is important to be ready with the tools and other modules, along
    with the preparation of the development process that will help create the desired
    results.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入智能合约的开发以及后续测试和部署流程之前，重要的是准备好工具和其他模块，以及准备开发过程，这将有助于创建期望的结果。
- en: Remix
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Remix
- en: '**Remix** is currently the official IDE available online; if you are more comfortable
    in another IDE, you can check whether Solidity is a supported language and start
    working on the same. The following is a screenshot of what Remix looks like:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**Remix** 是目前可在网上使用的官方 IDE；如果您更喜欢使用其他 IDE，可以检查 Solidity 是否是受支持的语言，并开始使用。以下是
    Remix 的样式截图：'
- en: '![](img/f7bc3adc-a0e3-445e-bd33-b8436c6c8fca.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7bc3adc-a0e3-445e-bd33-b8436c6c8fca.png)'
- en: Remix is a fully functional online IDE, with the required features such as the
    compiling of code, running, connecting with localhost, publishing code on GitHub,
    and so on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Remix 是一个功能齐全的在线 IDE，具有诸如代码编译、运行、连接本地主机、在 GitHub 上发布代码等必要功能。
- en: When Remix is opened for the first time, the `Ballot` contract is loaded.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Remix 第一次打开时，会加载 `Ballot` 合约。
- en: Geth and Mist
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Geth 和 Mist
- en: We can run test nodes using Geth, although the task of connecting and mining
    of Ether in `TestNet` or `private net` can also be done using the official Ethereum
    client, which is a Mist browser working on top of a Geth node.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Geth 运行测试节点，尽管连接和挖掘以太在 `TestNet` 或 `private net` 中的任务也可以使用官方以太坊客户端完成，该客户端是在
    Geth 节点上运行的 Mist 浏览器。
- en: 'The Mist client has various features such as being able to create Ethereum
    accounts and connecting with `MainNet` or `TestNet`. We can deploy or watch an
    already-deployed contract on blockchain using Mist. The following screenshot illustrates
    what Mist looks like:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Mist 客户端具有各种功能，例如能够创建以太坊帐户并连接到 `MainNet` 或 `TestNet`。我们可以使用 Mist 在区块链上部署或监视已部署的合约。以下截图说明了
    Mist 的外观：
- en: '![](img/ae9e1efc-a6eb-467e-8761-3599cc9d21af.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae9e1efc-a6eb-467e-8761-3599cc9d21af.png)'
- en: MetaMask
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MetaMask
- en: '**MetaMask** is an Ethereum Wallet and an Ethereum browser. MetaMask enables
    us to interact with DApps and smart contracts via our web browser without downloading
    the complete Ethereum blockchain. It is available as a browser extension for Chrome,
    Firefox, and other browsers.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**MetaMask** 是以太坊钱包和以太坊浏览器。MetaMask 使我们能够通过网络浏览器与 DApps 和智能合约进行交互，而无需下载完整的以太坊区块链。它作为
    Chrome、Firefox 和其他浏览器的浏览器扩展程序提供。'
- en: 'It lets websites fetch data from blockchain and also allows users to send transactions
    from the extension itself. With MetaMask, it becomes easier to interact with Ethereum
    DApp within the browser. The following screenshot is an example of an Ethereum
    Wallet:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许网站从区块链获取数据，还允许用户从扩展本身发送交易。有了 MetaMask，通过浏览器与以太坊 DApp 进行交互变得更加容易。以下是以太坊钱包的示例截图：
- en: '![](img/61185807-ca4b-4600-aaf1-a3a680e20149.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61185807-ca4b-4600-aaf1-a3a680e20149.png)'
- en: Token standard
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代币标准
- en: With Ethereum, decentralized applications can be created, and we can also issue
    tokens on the Ethereum blockchain. Just such as **Bitcoin Improvement Proposals **(**BIPs**),
    there is an online list of **Ethereum Improvement Proposals **(**EIPs**) hosted
    on GitHub, and this can be found here: [https://github.com/ethereum/EIPs](https://github.com/ethereum/EIPs)
    . In EIP-20, a new token standard was introduced around the end of 2015\. This
    token standard is known as **ERC20**. *ERC* stands for **Ethereum Request for
    Comments.** ERC is authored by a community developer; post the community and core
    team approval, the proposal becomes a standard. There are various other standards
    such as ERC223 and ERC721 that are also being used in addition to ERC20.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以太坊，可以创建去中心化应用程序，并且我们还可以在以太坊区块链上发行代币。就像**比特币改进提案**（**BIPs**）一样，在 GitHub 上托管了一份**以太坊改进提案**（**EIPs**）的在线列表，可以在此处找到：[https://github.com/ethereum/EIPs](https://github.com/ethereum/EIPs)。在
    EIP-20 中，于 2015 年底左右引入了一个新的代币标准。这个代币标准被称为 **ERC20**。*ERC* 代表 **以太坊请求评论。**ERC 是由社区开发者编写的；在社区和核心团队的批准后，该提案成为标准。除了
    ERC20 外，还有其他各种标准，例如 ERC223 和 ERC721 也在使用中。
- en: There are methods defined in the EIP that must be followed so that the token
    can be a part of the ERC20 token contract.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 EIP 中定义了必须遵循的方法，以便代币可以成为 ERC20 代币合约的一部分。
- en: Methods in ERC20
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ERC20 中的方法
- en: 'Here are the methods specified in the ERC20 contract type; it is important
    to follow the given methods/events so that the contract can be in the family of
    ERC20\. Although some of these specifications are options and not required to
    be there. Take a look at this list:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 ERC20 合约类型中指定的方法；重要的是要遵循给定的方法/事件，以便合约可以属于 ERC20 家族。尽管其中一些规范是可选的，不一定要存在。看一下这个列表：
- en: '`name`: It should return the name of the contract, for example: `BaToken`.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 它应该返回合约的名称，例如：`BaToken`。'
- en: '`symbol`: Returns the symbol of the token, for example: `BATN`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`symbol`: 返回代币的符号，例如：`BATN`。'
- en: '`decimals`: Returns the number of decimals that the token uses, for example:
    18.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimals`: 返回代币使用的小数位数，例如：18。'
- en: '`totalSupply`: Returns the total supply of the tokens. It is a compulsory method.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`totalSupply`: 返回代币的总供应量。这是一个必需的方法。'
- en: '`balanceOf(address _owner)`: Returns the account balance of another balance
    with an address `_owner`. It is a compulsory method.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`balanceOf(address _owner)`: 返回另一个地址`_owner`的帐户余额。这是一个强制性方法。'
- en: '`transfer(address _to, unit256 _value)`: It sends the token of `_value` amount
    to address `_to` . It is a compulsory method.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transfer(address _to, unit256 _value)`: 将`_value`数量的令牌发送到地址`_to`。这是一个强制性方法。'
- en: '`transferFrom(address _from, address _to, uint256 _value)`: This method transfers
    the `_value` amount of tokens from address `_from` to address `_to`. It is compulsory
    to have this method in the smart contract for it to be a valid ERC20 contract.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transferFrom(address _from, address _to, uint256 _value)`: 此方法将`_value`数量的令牌从地址`_from`转移到地址`_to`。智能合约中必须有此方法才能成为有效的ERC20合约。'
- en: '`approve(address _spender, uint256 _value)`: This method allows the address
    `_spender` to withdraw from the given account multiple times; the maximum amount
    it can withdraw is `_value`. It is also a compulsory method; allowance is suggested
    to first be set to 0 so that any vulnerability is not there.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`approve(address _spender, uint256 _value)`: 此方法允许地址`_spender`多次从给定账户提取；它可以提取的最大金额为`_value`。这也是一个强制性方法；建议首先将allowance设置为0，以防止任何漏洞。'
- en: '`allowance(address _owner, address _spender)`: It returns the amount that `_spender`
    is still allowed to withdraw from `_owner`. It is compulsory to have this method
    in the smart contract.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allowance(address _owner, address _spender)`: 返回`_spender`仍然可以从`_owner`提取的金额。智能合约中必须有此方法。'
- en: '`event Transfer(address indexed _from, address indexed _to, uint256 _value)`:
    This event must be triggered when tokens are transferred, even if the value of
    tokens being transferred is zero.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event Transfer(address indexed _from, address indexed _to, uint256 _value)`:
    当令牌转移时，即使转移的令牌价值为零，也必须触发此事件。'
- en: '`event Approval(address indexed _owner, address indexed _spender, uint256 _value)`:
    This event is also compulsory and is called whenever the `approve` method is called.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event Approval(address indexed _owner, address indexed _spender, uint256 _value)`:
    每当调用`approve`方法时，也会调用此事件。'
- en: Web3
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web3
- en: '`Web3.js` is a JavaScript Library; it can communicate with the Ethereum node
    through JSON RPC calls, by connecting to the HTTP or IPC connection. `Web3.js`
    works by exposing methods that have been enabled over the RPC.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`Web3.js`是一个JavaScript库；它可以通过JSON RPC调用与以太坊节点通信，通过连接到HTTP或IPC连接。`Web3.js`通过暴露已在RPC上启用的方法来工作。'
- en: '`Web3` can be installed via `npm` using the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令通过`npm`安装`Web3`：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Truffle framework
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Truffle框架
- en: '**Truffle** is a development framework that makes it simple to test and deploy
    Ethereum smart contracts. Truffle can be installed via `npm` using the following
    command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**Truffle**是一个开发框架，可以简化测试和部署以太坊智能合约。可以使用以下命令通过`npm`安装Truffle：'
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Truffle helps in contract compilation and linking along with automated testing
    framework using Mocha and Chai. With Truffle, we can easily deploy contracts to
    any `estNet`, MainNet, or private Network ID. Truffle does everything in a DApp,
    such as the compiling of contracts, injecting them into the user interface and
    testing to check for vulnerabilities.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Truffle通过Mocha和Chai提供的自动化测试框架来帮助合约编译和链接。使用Truffle，我们可以轻松地将合约部署到任何`TestNet`、MainNet或私有Network
    ID。Truffle在DApp中完成所有工作，如编译合约、将其注入用户界面并进行测试以检查漏洞。
- en: Ganache
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ganache
- en: '**Ganache** is a tool introduced by the Truffle Foundation to run tests on
    the Ethereum blockchain created. It has a command-line interface, but a graphical
    interface is also available when required. The following screenshot depicts the
    **Ganache** tool:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ganache**是由Truffle基金会引入的工具，用于在创建的以太坊区块链上运行测试。它具有命令行界面，但在需要时也可以使用图形界面。以下屏幕截图显示了**Ganache**工具：'
- en: '![](img/b92978da-d252-4359-9460-505d135dee45.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b92978da-d252-4359-9460-505d135dee45.png)'
- en: Working on a smart contract
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在智能合约上工作
- en: 'Let''s dive into the task of creating a smart contract, along with the process
    of testing the smart contract on `TestNet`. The easiest way to run the code discussed
    in the following is on Remix. Just follow these steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解创建智能合约的任务，以及在`TestNet`上测试智能合约的过程。运行以下讨论的代码的最简单方法是使用Remix。只需按照以下步骤进行操作：
- en: 'When you open Remix in the browser, by default, it opens the `ballot.sol` file;
    you can create a new file and start editing your first smart contract. Take a
    look at this:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您在浏览器中打开Remix时，默认情况下会打开`ballot.sol`文件；您可以创建一个新文件并开始编辑您的第一个智能合约。看一下这个：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the previous code snippet, we have created a contract with Solidity Version
    0.4.24 and with the name of `Gotham`. Now let''s create a constructor that will
    initialize the variables we have defined. This is how our `contract` code should
    look now:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们创建了一个使用 Solidity 版本 0.4.24 并命名为`Gotham`的合约。现在让我们创建一个构造函数，它将初始化我们定义的变量。现在我们的`contract`代码应该如下所示：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, let''s add the standard ERC20 methods to a separate contract; these are
    required to be present in an Ethereum smart contract. Take a look at this code:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将标准的 ERC20 方法添加到一个单独的合约中；这些方法必须存在于以太坊智能合约中。看看这段代码：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Furthermore, to avoid any overflow or similar issues, it is important to implement
    some basic mathematics functions that have checks in place to avoid any function
    overflow. Here is the contract that can be created:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，为了避免任何溢出或类似问题，重要的是实现一些具有检查机制的基本数学函数，以避免任何函数溢出。以下是可以创建的合约：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Our contract has to have address of the owner; this will help with transferring
    the coins when the contract is deployed. For this, we create a contract in the
    Solidity file by the name `Im_owner`. Take a look at the following:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的合约必须有所有者的地址；当合约部署时，这将有助于转移代币。为此，我们在 Solidity 文件中创建了一个名为`Im_owner`的合约。看看下面的内容：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now it is time to work on the `contract Gotham` to add various functions that
    will return total supply, get the balance of the tokens available in the account,
    transfer tokens, and other important functions required. Also, since this `contract
    Gotham` is the main contract, the other contracts in our solidity file should
    be inherited in this contract. The `contract Gotham` will now look as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候在`contract Gotham`上工作，以添加各种将返回总供应量、获取账户中可用代币余额、转移代币和其他重要功能所需的函数。此外，由于此`contract
    Gotham`是主要合约，因此我们 Solidity 文件中的其他合约应该在此合约中继承。现在，`contract Gotham`应如下所示：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The previous code has the minimum required functions for a Solidity file to
    be a valid ERC20 standard token. Once the code is complete, you can run it by
    pressing the Start to compile button on the right-hand-side panel in Remix. There
    is another tab next to the compile tab by the name Run, which helps in deploying
    the smart contract on the `TestNet` as shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码具有成为有效 ERC20 标准代币的 Solidity 文件所需的最小功能。一旦代码完成，您可以通过按 Remix 右侧面板上的“开始编译”按钮来运行它。编译选项卡旁边还有一个名为“运行”的选项卡，它可以帮助在`TestNet`上部署智能合约，如下图所示：
- en: '![](img/83e868f8-558d-4cd6-8463-2cbe9095e6c0.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83e868f8-558d-4cd6-8463-2cbe9095e6c0.png)'
- en: BrowserHello_World.sol file running on your browser using Remix
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器上使用 Remix 运行的 BrowserHello_World.sol 文件
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the tools required in smart contract development,
    testing, and deployment. We learned about Remix, the online official IDE by the
    Ethereum Foundation; Mist, the official Ethereum Wallet and browser; and MetaMask,
    the tool to help in Ethereum smart contract development. We learned about the
    ERC20 token standard, `Web3`, and the Truffle framework. Furthermore, we worked
    on smart contract creation, along with various details of deployment of a smart
    contract on Ropsten.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了智能合约开发、测试和部署所需的工具。我们了解了 Remix，以太坊基金会的官方在线集成开发环境；Mist，官方以太坊钱包和浏览器；以及
    MetaMask，这是一款帮助以太坊智能合约开发的工具。我们学习了 ERC20 代币标准、`Web3` 和 Truffle 框架。此外，我们还介绍了智能合约的创建，以及在
    Ropsten 上部署智能合约的各种细节。
- en: In the coming chapters, we will learn more about decentralized applications
    and Ethereum Accounts. We will also study in depth about mining, ICO, creating
    our own currency by forking the Bitcoin repository, and we will discuss the challenges
    facing blockchain technology.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将更深入地学习去中心化应用程序和以太坊账户。我们还将深入研究挖掘、ICO、通过分叉比特币存储库创建我们自己的货币，以及我们将讨论区块链技术面临的挑战。
