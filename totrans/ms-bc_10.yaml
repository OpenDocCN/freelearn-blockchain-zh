- en: Chapter 10. Alternative Blockchains
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十章 替代区块链
- en: This chapter is intended to provide an introduction to alternative blockchain
    solutions. With the success of bitcoin and subsequent realization of the potential
    of blockchain technology, a Cambrian explosion started that resulted in the development
    of various blockchain protocols, applications, and platforms. Some projects did
    not gain much traction, but many have succeeded in creating a solid place in this
    space.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在介绍替代区块链解决方案。随着比特币的成功和对区块链技术潜力的后续认识，一个寒武纪爆发开始了，导致了各种区块链协议、应用和平台的发展。一些项目没有获得太多的关注，但许多项目成功地在这个领域站稳了脚跟。
- en: In this chapter, readers will be introduced to alternative blockchains and platforms
    that either are new blockchains on their own or complement other existing blockchains.
    These new platforms are based on the idea of providing SDKs and tools to make
    development and deployment of blockchain solutions easier. The success of Ethereum
    and bitcoin has resulted in various projects that spawned into existence by leveraging
    the underlying technologies and concepts introduced by them. These new projects
    add value by addressing the limitations in the current blockchains or enhancing
    the existing solutions by providing an additional layer of user-friendly tools
    on top of them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，读者将介绍替代区块链和平台，它们要么是全新的区块链，要么是补充其他现有区块链的平台。这些新平台的基本理念是提供 SDK 和工具，以使区块链解决方案的开发和部署更加容易。以太坊和比特币的成功导致了各种项目的产生，这些项目通过利用它们引入的基础技术和概念而存在。这些新项目通过解决当前区块链的限制或提供在其上提供一层用户友好工具来增加价值。
- en: In the first section of this chapter, an introduction to new blockchain solutions
    will be given, and later sections will cover various platforms and development
    kits that complement existing blockchains. For example, BlockApps STRATO is an
    Ethereum-compliant platform for the development of blockchain applications, and
    Kadena is a new private blockchain with novel ideas such as Scalable BFT. Various
    concepts such as sidechains, drivechains, and pegging have also been introduced
    for the first time with this growth of blockchain technologies. This chapter will
    cover all these technologies and related concepts in detail. Of course, it's not
    possible to cover all alternative chains (altchains) and platforms, but all those
    platforms have been included in this chapter that are related to blockchains,
    covered in the previous chapters, or are expected to gain traction in the near
    future.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第一节将介绍新的区块链解决方案，后续章节将涵盖各种补充现有区块链的平台和开发工具。例如，BlockApps STRATO 是一个符合以太坊标准的平台，用于区块链应用的开发，而
    Kadena 是一个具有 Scalable BFT 等新理念的新型私有区块链。随着区块链技术的发展，诸如侧链、驱动链和锚定等概念也首次被引入。本章将详细介绍所有这些技术和相关概念。当然，不可能涵盖所有替代链和平台，但本章包括了所有与区块链相关的平台，这些平台在前几章中已经涵盖，或者预计在不久的将来将获得重视。
- en: Blockchains
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块链
- en: This section will give an introduction to new blockchain solutions. First, a
    new blockchain named Kadena is discussed in the following section.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍新的区块链解决方案。首先，在接下来的章节中将讨论一种名为 Kadena 的新区块链。
- en: Kadena
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kadena
- en: Kadena is a recently-introduced private blockchain that has successfully addressed
    scalability and privacy issues in blockchain systems. A new Turing incomplete
    language called Pact has also been introduced with Kadena that allows the development
    of smart contracts. A key innovation in Kadena is its Scalable BFT consensus algorithm,
    which has the potential to scale to thousands of nodes without performance degradation.
    Scalable BFT is based on the original Raft algorithm and is a successor of Tangaroa
    and Juno. Tangaroa, which is a name given to an implementation of Raft with fault
    tolerance (a BFT Raft), was developed to address the availability and safety issues
    that arose from the behavior of byzantine nodes in the Raft algorithm, and Juno
    was a fork of Tangaroa that was developed by *JPMorgan*. Consensus algorithms
    are discussed in [Chapter 1](ch01.html "Chapter 1. Blockchain 101"), *Blockchain
    101* in more detail. Both of these proposals have a fundamental limitation - they
    cannot scale while maintaining a high level of high performance. As such, Juno
    could not gain much traction. Private blockchains have the more desirable property
    of maintaining high performance as the number of nodes increase, but the aforementioned
    proposals lack this feature. Kadena solves this issue with its proprietary Scalable
    BFT algorithm, which is expected to scale up to thousands of nodes without any
    performance degradation.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kadena 是最近推出的一个私有区块链，成功解决了区块链系统中的可伸缩性和隐私问题。Kadena 还引入了一种名为 Pact 的新的图灵不完备语言，可以用来开发智能合约。Kadena
    的一个关键创新是其可扩展的 BFT 共识算法，具有潜力在不降低性能的情况下扩展到数千个节点。可扩展的 BFT 基于最初的 Raft 算法，并继承了 Tangaroa
    和 Juno。Tangaroa 是 Raft 的一种容错实现（BFT Raft），旨在解决 Raft 算法中拜占庭节点行为所引起的可用性和安全性问题，而 Juno
    则是由*摩根大通*开发的 Tangaroa 的一个分支。 共识算法在[第1章](ch01.html "第1章 区块链 101")的*区块链 101*中有更详细的讨论。这两个方案都存在一个基本限制
    - 无法在保持高水平性能的同时进行扩展。因此，Juno 很难获得很好的反响。私有区块链具有更理想的性能维护性能属性，随着节点数量增多，性能可以保持恒定，但前述的方案缺乏这一特性。Kadena
    通过其专有的可扩展 BFT 算法解决了这个问题，预计可在不降低性能的情况下扩展到数千个节点。
- en: Moreover, confidentiality is another important aspect of Kadena that enables
    privacy of transactions on the blockchain. This is achieved by using a combination
    of key rotation, symmetric on-chain encryption, incremental hashing, and Double
    Ratchet protocol.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，保密性是 Kadena 的另一个重要方面，可确保区块链上交易的隐私。通过使用密钥轮换、对称链上加密、增量哈希和双摇杆协议的组合来实现。
- en: Key rotation is used as a standard mechanism to ensure security of the private
    blockchain. It is used as a best practice to thwart any attacks if the keys have
    been compromised, by periodically changing the encryption keys. There is a native
    support for key rotation in Pact smart contract language.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥轮换被用作保护私有区块链安全的标准机制。被定期更改加密密钥的最佳做法可防止密钥被破坏，从而防止任何攻击。 Pact 智能合约语言原生支持密钥轮换。
- en: Symmetric on chain encryption allows encryption of transaction data on the blockchain.
    These transactions can be automatically decrypted by the participants of a particular
    private transaction. Double Ratchet protocol is used to provide key management
    and encryption functions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对称链上加密允许在区块链上对交易数据进行加密。这些交易可被特定私有交易的参与者自动解密。双摇杆协议用于提供密钥管理和加密功能。
- en: 'Scalable BFT consensus protocol ensures that adequate replication and consensus
    has been achieved before smart contract execution. Consensus is achieved by following
    the process described below:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展的 BFT 共识协议确保在智能合约执行之前已经实现了足够的复制和共识。实现共识的过程如下所述：
- en: First, a new transaction is signed by the user and broadcasted over the blockchain
    network, which is picked up by a leader node that adds it to its immutable log.
    At this point, an incremental hash is also calculated for the log. Incremental
    hash is a type of hash function that basically allows computation of hash messages
    in the scenario where, if a previous original message which is already hashed
    is slightly changed, then the new hash message is computed from the already existing
    hash. This scheme is quicker and less resource intensive compared to a conventional
    hash function where an altogether new hash message is required to be generated
    even if the original message has only changed very slightly.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，用户签署并广播新的交易到区块链网络，这被领导节点接收并添加到其不可变日志中。在此时，也计算了不可变日志的增量哈希。增量哈希是一种哈希函数，基本上允许在原始消息稍微改变的情况下计算哈希消息，如果已经哈希的先前原始消息稍微改变，那么新的哈希消息将从已经存在的哈希计算。这种方案比传统的哈希函数更快，资源消耗更少，在原始消息只有轻微改变时也需要生成全新的哈希消息。
- en: Once the transaction is written to the log by the leader node, it signs the
    replication and incremental hash and broadcasts it to other nodes.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦领导节点将交易写入日志，它会签署复制和增量哈希，并将其广播到其他节点。
- en: Other nodes, after receiving the transaction, verify the signature of the leader
    node, add the transaction into their own logs, and broadcast their own calculated
    incremental hashes (quorum proofs) to other nodes. Finally, the transaction is
    committed into the ledger permanently after an adequate number of proofs are received
    from other nodes.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他节点在接收到交易后，验证领导节点的签名，将交易添加到自己的日志中，并向其他节点广播自己计算得到的增量哈希（法定证明）。最终，在从其他节点收到足够数量的证明后，交易被永久地提交到账本中。
- en: 'A simplified version of this process is shown in the following diagram, where
    the **leader** node is recording the new transactions and then replicating them
    to the **follower** nodes:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中显示了这个过程的简化版本，其中 **leader** 节点记录新的交易，然后将其复制到 **follower** 节点：
- en: '![Kadena](img/B05795_10_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Kadena](img/B05795_10_01.jpg)'
- en: Consensus mechanism in Kadena
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Kadena 中的共识机制
- en: 'Once the consensus is achieved, smart contract execution can start and takes
    a number of steps, as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦达成共识，智能合约执行就可以开始，并采取以下步骤：
- en: First, the signature of the message is verified.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，验证消息的签名。
- en: Pact smart contract layer takes over.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pact 智能合约层接管。
- en: Pact code is compiled.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pact 代码被编译。
- en: The transaction is initiated and executes any business logic embedded within
    smart contract. In case of any failures, an immediate rollback is initiated that
    reverts that state back to what it was before the execution started.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交易被发起并执行嵌入在智能合约中的任何业务逻辑。在发生任何失败时，会立即启动回滚，将状态恢复到执行开始之前的状态。
- en: Finally, the transaction completes and relevant logs are updated.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，交易完成并更新相关日志。
- en: 'Pact has been open sourced by Kadena and is available for download at [http://kadena.io/pact/downloads.html](http://kadena.io/pact/downloads.html).
    This can be downloaded as a standalone binary that provides a REPL for Pact language.
    An example is shown below where Pact is run by issuing the command `./pact` in
    Linux console:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Pact 已被 Kadena 开源，并可在 [http://kadena.io/pact/downloads.html](http://kadena.io/pact/downloads.html)
    下载。这可以作为一个独立的二进制文件进行下载，提供 Pact 语言的 REPL。在 Linux 控制台中输入命令 `./pact` 即可运行 Pact，示例如下：
- en: '![Kadena](img/image_10_002.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Kadena](img/image_10_002.jpg)'
- en: Pact REPL, showing sample commands and error output
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Pact REPL，显示示例命令和错误输出
- en: 'Smart contract in Pact is generally composed of three sections: keysets, modules,
    and tables. First, **keyset** defines relevant authorization schemes for tables
    and modules. Second, **module** defines which is the smart contract code encompassing
    the business logic in the form of **functions** and **Pacts**. Pacts within modules
    are composed of multiple steps and are executed sequentially.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Pact 中的智能合约通常由三个部分组成：keysets、modules 和 tables。首先，**keyset** 定义了表和模块的相关授权方案。其次，**module**
    定义了智能合约代码，以 **functions** 和 **Pacts** 的形式包含业务逻辑。模块内的 Pacts 由多个步骤组成，并按顺序执行。
- en: Pact can be used in several execution modes. These modes include **contract
    definition**, **transaction execution,** and **querying**. Contract definition
    mode allows a contract to be created on the blockchain via a single transaction
    message. Transaction execution mode entails the execution of modules of smart
    contract code that represent business logic. Querying is concerned with simply
    probing the contract for data and is executed locally on the nodes for performance
    reasons.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Pact可以在多种执行模式下使用。这些模式包括**合同定义**，**交易执行**和**查询**。合同定义模式允许通过单个交易消息在区块链上创建一个合同。交易执行模式涉及执行代表业务逻辑的智能合同代码模块。查询仅与简单地探测合同数据有关，并且出于性能原因在节点上执行。
- en: Pact uses LISP-like syntax and represents in the code exactly what will be executed
    on the blockchain as it is stored on the blockchain in human-readable format.
    This is in contrast to Ethereum's EVM, which compiles into byte code for execution,
    which makes it difficult to verify what code is in execution on the blockchain.
    Moreover, it is Turing incomplete, supports immutable variables, and does not
    allow null values, which improves overall safety of the transaction code execution.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Pact使用类似LISP的语法，并在代码中准确表示将在区块链上执行的内容，因为它以人类可读格式存储在区块链上。这与以太坊的EVM相反，后者编译为字节码以执行，这使得难以验证在区块链上执行的代码。此外，它不完整支持图灵不完备，支持不可变变量，并且不允许空值，从而提高了事务代码执行的整体安全性。
- en: It is not possible to cover the complete syntax and functions of Pact in this
    chapter, however, a small example is shown below that shows the general structure
    of a smart contract written in Pact. This example shows a simple addition module
    that defines a function named `addition` that takes three parameters. When the
    code is executed it adds all three values and displays the result.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中无法涵盖 Pact 的完整语法和功能，但下面显示了一个小示例，显示了在 Pact 中编写的智能合同的一般结构。该示例展示了一个简单的加法模块，定义了一个名为`addition`的函数，它接受三个参数。执行代码时，将所有三个值相加并显示结果。
- en: 'The following example has been developed using the online Pact compiler available
    at [http://kadena.io/try-pact/](http://kadena.io/try-pact/):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例是使用位于[http://kadena.io/try-pact/](http://kadena.io/try-pact/)的在线 Pact 编译器开发的：
- en: '![Kadena](img/image_10_003.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![Kadena](img/image_10_003.jpg)'
- en: Sample Pact code
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Pact示例代码
- en: 'When the code is run, it produces the output shown as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码时，将产生以下输出：
- en: '![Kadena](img/image_10_004.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Kadena](img/image_10_004.jpg)'
- en: Output of the code
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的输出
- en: As shown in the preceding example, the execution output matches exactly with
    the code layout and structure, which allows for greater transparency and limits
    the possibility of malicious code execution.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，执行输出与代码布局和结构完全匹配，这有利于增加透明度，限制恶意代码执行的可能性。
- en: Kadena is a new class of private blockchains introducing the novel concept of
    **pervasive determinism** where, in addition to standard public/private key-based
    data origin security, an additional layer of fully deterministic consensus is
    also provided. It provides cryptographic security at all layers of the blockchain
    including transactions and consensus layer.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Kadena是一种引入**普遍确定性**新概念的私人区块链，除了标准的基于公钥/私钥的数据来源安全性之外，还提供了一个完全确定性共识的附加层。它在区块链的所有层面提供了加密安全性，包括交易和共识层。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Relevant documentation and source code for Pact can be found here: [https://github.com/kadena-io/pact](https://github.com/kadena-io/pact).'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Pact的相关文档和源代码可以在这里找到：[https://github.com/kadena-io/pact](https://github.com/kadena-io/pact)。
- en: Ripple
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 瑞波
- en: Introduced in 2012, Ripple is a currency exchange and real-time gross settlement
    system. In Ripple, the payments are settled without any waiting as opposed to
    traditional settlement networks, where it can take days for settlement. It has
    a native currency called **Ripples** (**XRP**). It also supports non-XRP payments.
    This system is considered similar to an old traditional money transfer mechanism
    known as *Hawala*. This system works by making use of agents who take the money
    and a password from the sender, then contact the payee's agent and instruct them
    to release funds to the person who can provide the password. The payee then contacts
    the local agent, tells them the password and collects the funds. An analogy to
    the agent is Gateway in Ripple. This is just a very simple analogy, the actual
    protocol is rather complex but principally it is the same.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Ripple 于2012年推出，是一种货币兑换和实时毛额结算系统。在 Ripple 中，支付无需等待，与传统的结算网络相比，后者可能需要数天才能结算。它有一种本地货币称为**瑞波币**（**XRP**）。它还支持非
    XRP 支付。此系统被认为类似于一种称为*哈瓦拉*的旧传统货币转移机制。该系统通过利用代理接收来自发送者的钱和密码，然后联系受款人的代理并指示他们向能够提供密码的人释放资金来运作。受款人然后联系当地代理，告诉他们密码并收取资金。与代理类似的类比在
    Ripple 中称为网关。这只是一个非常简单的类比，实际协议相当复杂，但原则上是相同的。
- en: 'The Ripple network is composed of various nodes that can perform different
    functions based on their type. First, **user nodes**: these use in payment transactions
    and can pay or receive payments. Second, **validator nodes**: these participate
    in the consensus mechanism. Each server maintains a set of unique nodes, which
    it needs to query while achieving consensus. Nodes in the **unique node List**
    (**UNL**) are trusted by the server involved in the consensus mechanism and will
    accept votes only from this list of unique nodes. Ripple is sometimes not considered
    truly decentralized as there are network operators and regulators involved. However
    it can be considered decentralized due to the fact that anyone can become part
    of the network by running a validator node. Moreover, the consensus process is
    also decentralized because any changes proposed to made on the ledger have to
    be decided by following a scheme of super majority voting. However this is a hot
    topic amongst researchers and enthusiasts and there are arguments against and
    in favor of each school of thought.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Ripple 网络由各种节点组成，这些节点根据其类型可以执行不同的功能。首先是**用户节点**：这些节点用于支付交易，并可以进行支付或接收支付。其次是**验证节点**：这些节点参与共识机制。每个服务器维护一组唯一节点，它需要在实现共识时查询这些节点。**唯一节点列表**（**UNL**）中的节点是由参与共识机制的服务器信任的，它们只会接受来自此唯一节点列表的投票。有时
    Ripple 被认为不是真正的去中心化，因为涉及到网络运营商和监管机构。然而，由于任何人都可以通过运行验证节点成为网络的一部分，因此它可以被认为是去中心化的。此外，共识过程也是分散的，因为对账本提出的任何更改都必须通过超过半数的多数投票来决定。然而，这是研究人员和爱好者之间的热门话题，对于每种思想流派都有支持和反对的论点。
- en: Ripple maintains a global distributed ledger of all transactions that is governed
    by a novel low-latency consensus algorithm called **Ripple Protocol Consensus
    Algorithm** (**RPCA**). The consensus process works by achieving an agreement
    on the state of an open ledger containing transactions by seeking verification
    and acceptance from validating servers in an iterative manner until an adequate
    number of votes are achieved. Once enough votes are received (super majority,
    initially 50% and gradually increasing with each iteration up to at least 80%)
    the changes are validated and the ledger is closed. At this point, an alert is
    sent to the whole network indicating that the ledger is closed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Ripple 维护着一个由新颖的低延迟共识算法**Ripple Protocol Consensus Algorithm**（**RPCA**）管辖的全球分布式交易分类账。共识过程通过迭代地从验证服务器中寻求验证和接受来实现对包含交易的开放账本状态的一致意见，直到获得足够数量的投票为止。一旦收到足够的投票（超过半数的多数，最初为50%，随着每次迭代逐渐增加至至少80%），则验证更改并关闭账本。此时，向整个网络发送警报，指示账本已关闭。
- en: In summary, the consensus protocol is a three-phase process. First, the **collection
    phase**, where validating nodes gather all transactions broadcasted on the network
    by account owners and validate them. Transactions, once accepted, are called candidate
    transactions and can be accepted or rejected based on the validation criteria.
    Then the **consensus** process starts, and after achieving it the ledger is **closed**.
    This process runs asynchronously every few seconds in rounds and, as result, the
    ledger is opened and closed (updated) accordingly.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，共识协议是一个三阶段的过程。首先是**收集阶段**，在此阶段，验证节点收集由账户所有者在网络上广播的所有交易并对其进行验证。一旦被接受，交易就被称为候选交易，并且可以根据验证标准被接受或拒绝。然后开始**共识**过程，完成后账本被**关闭**。这个过程每隔几秒钟异步运行一次，以轮次形式进行，因此账本相应地被打开和关闭（更新）。
- en: '![Ripple](img/image_10_005.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![Ripple](img/image_10_005.jpg)'
- en: Ripple consensus protocol phases
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Ripple 共识协议阶段
- en: 'In a Ripple network there are a number of components that work together in
    order to achieve consensus and form a payment network. These components are discussed
    individually below:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Ripple 网络中有多个组件共同工作，以实现共识并形成支付网络。下面逐个讨论这些组件：
- en: '**Server**: This component serves as a participant in the consensus protocol.
    Ripple server software is required in order to be able to participate in consensus
    protocol.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器**：这个组件作为共识协议中的参与者。为了能够参与共识协议，需要使用 Ripple 服务器软件。'
- en: '**Ledger**: This is a main record of balances of all accounts on the network.
    A ledger contains various elements such as ledger number, account settings, transactions,
    timestamp, and a flag that indicates validity of the ledger.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**账本**：这是网络上所有账户余额的主要记录。账本包含各种元素，例如账本编号、账户设置、交易、时间戳以及指示账本有效性的标志。'
- en: '**Last closed ledger**: A ledger is closed once consensus is achieved by validating
    nodes.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最后关闭的账本**：一旦由验证节点达成共识，账本就会关闭。'
- en: '**Open ledger**: This is a ledger that has not been validated yet and no consensus
    has been reached about its state. Each node has its own open ledger, which contains
    proposed transactions.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开放账本**：这是尚未验证且尚未就其状态达成共识的账本。每个节点都有自己的开放账本，其中包含提议的交易。'
- en: '**Unique node list:** This is a list of unique trusted nodes that a validating
    server uses in order to seek votes and subsequent consensus.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**唯一节点列表**：这是验证服务器使用的一组唯一可信节点列表，用于寻求投票和随后的共识。'
- en: '**Proposer**: As the name suggests, this component proposes new transactions
    to be included in the consensus process. It is usually a subset of nodes (UNL
    defined above) that can propose transactions to the validating server.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提议者**：顾名思义，这个组件提议将新的交易纳入共识过程中。通常是一组节点（上述定义的 UNL），可以向验证服务器提出交易提案。'
- en: Transactions
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交易
- en: Transactions are created by network users in order to update the ledger. A transaction
    is expected to be digitally signed and valid in order for it to be considered
    as a candidate in the consensus process. Each transaction costs a small amount
    of XRP, which serves as a protection mechanism against denial of service attacks
    caused by spamming. There are different types of transaction in the Ripple network.
    A single field within the Ripple transaction data structure called `TransactionType`
    is used to represent the type of the transaction. Transactions are executed by
    using a four step process. First, transactions are prepared whereby an unsigned
    transaction is created by following the standards. Second step is signing, where
    the transaction is digitally signed to authorize it. After this, the actual submission
    to the network occurs via the connected server. Finally, the verification is performed
    to ensure that the transaction is validated successfully.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 交易由网络用户创建，以更新账本。交易必须经过数字签名并有效，才能被视为共识过程中的候选事务。每笔交易都需要支付少量的 XRP，这是一种防止由于垃圾邮件攻击而导致的服务拒绝攻击的保护机制。Ripple
    网络中有不同类型的交易。Ripple 交易数据结构中的一个字段称为`TransactionType`，用于表示交易的类型。交易通过四个步骤执行。首先，准备交易，按照标准创建一个未签名的交易。第二步是签名，对交易进行数字签名以授权。然后，通过连接的服务器将实际提交到网络。最后，执行验证以确保交易已成功验证。
- en: Roughly, the transactions can be categorized into three types, namely Payments
    related, Order related, and Account and security related. All these types are
    described in the following section.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 大致上，交易可以分为三种类型，即与支付相关、与订单相关和与账户和安全相关。所有这些类型都在下一节中描述。
- en: Payments related
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 与支付相关的
- en: 'There are several fields in this category that result in certain actions. All
    these fields are described as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此类别中有几个字段会导致某些操作。所有这些字段都描述如下：
- en: '`Payment`: This transaction is most commonly used and allows one user to send
    funds to another.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Payment`: 这种交易最常用，允许一个用户向另一个用户发送资金。'
- en: '`PaymentChannelClaim`: This is used to claim **Ripples** (**XRP**) from a payment
    channel. A payment channel is a mechanism that allows recurring and unidirectional
    payments between parties. This can also be used to set the expiration time of
    the payment channel.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PaymentChannelClaim`: 用于从支付通道中索取**Ripples**（**XRP**）。支付通道是一种允许双方进行定期和单向支付的机制。这也可以用于设置支付通道的到期时间。'
- en: '`PaymentChannelCreate`: This transaction creates a new payment channel and
    adds XRP to it in *drops*. A single drop is equivalent to 0.000001 of an XRP.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PaymentChannelCreate`: 这个交易创建一个新的支付通道，并以*滴*为单位添加XRP。一个滴等于0.000001个XRP。'
- en: '`PaymentChannelFund`: This transaction is used to add more funds to an existing
    channel. Similar to `PaymentChannelClaim`  transaction, this can also be used
    to modify the expiration time of the payment channel.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PaymentChannelFund`: 用于向现有通道添加更多资金的交易。类似于`PaymentChannelClaim`交易，这也可以用于修改支付通道的到期时间。'
- en: Order related
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 与订单相关
- en: 'This type of transaction includes following two fields:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的交易包括以下两个字段：
- en: '`OfferCreate`: This transaction represents a limit order, which represents
    an intent for exchange of currency. It results in creating an Offer node in the
    consensus ledger if it cannot be completely fulfilled.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`OfferCreate`: 这种交易代表一个限价订单，它代表了一种货币交换的意图。如果无法完全满足，它将在共识账本中创建一个挂单节点。'
- en: '`OfferCancel`: This is used to remove a previously created offer node from
    the consensus ledger, indicating withdrawal of the order.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`OfferCancel`: 用于从共识账本中删除先前创建的挂单节点，表示撤回订单。'
- en: Account and security related
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 与账户和安全相关
- en: This type of transaction include the fields listed as follows. Each field is
    responsible for performing a certain function.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的交易包括以下列出的字段。每个字段负责执行特定功能。
- en: '`AccountSet`: This transaction is used to modify the attributes of an account
    in the Ripple consensus ledger.'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`AccountSet`: 用于修改Ripple共识账本中账户的属性。'
- en: '`SetRegularKey`: This is used to change or set the transaction signing key
    for an account. An account is identified using a base-58 Ripple address derived
    from the account''s master public key.'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SetRegularKey`: 用于更改或设置账户的交易签名密钥。账户使用从账户的主公钥派生的base-58 Ripple地址来标识。'
- en: '`SignerListSet`: This can be used to create a set of signers for use in multi-signature
    transactions.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SignerListSet`: 可用于创建一组签名者，以用于多重签名交易。'
- en: '`TrustSet`: This is used to create or modify a trust line between accounts.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TrustSet`: 用于在账户之间创建或修改信任线。'
- en: 'A transaction in Ripple is composed of various fields that are common to all
    transaction types. These fields are listed as follows with description:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Ripple中的交易由各种字段组成，这些字段对所有交易类型都是通用的。以下列出了这些字段以及它们的描述：
- en: '`Account` , address of the initiator of the transaction.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Account` , 交易发起者的地址。'
- en: '`AccountTxnID` , this is an optional field which contains the hash of another
    transaction.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`AccountTxnID`，这是一个可选字段，包含另一个交易的哈希值。'
- en: '`Fee`, Amount of XRP.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Fee`，XRP数量。'
- en: '`Flags`, optional flags for the transaction.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Flags`，交易的可选标志。'
- en: '`LastLedgerSequence`, highest sequence number of the ledger in which the transaction
    can appear.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LastLedgerSequence`，交易可能出现的账本中的最高序列号。'
- en: '`Memos`, optional arbitrary information.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Memos`，可选的任意信息。'
- en: '`Sequence`, a number incremented by 1 with each transaction.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Sequence`，每个交易递增1的数字。'
- en: '`SigningPubKey`, public key.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SigningPubKey`，公钥。'
- en: '`Signers`, represent signers in a multisig transaction.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Signers`，表示多重签名交易中的签名者。'
- en: '`SourceTag`, represents either sender or reason of the transaction.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SourceTag`，代表交易发送者或交易原因。'
- en: '`TransactionType`, type of the transaction.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TransactionType`，交易类型。'
- en: '`TxnSignature`, verification signature for the transaction.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TxnSignature`，交易的验证签名。'
- en: Various developer's APIs are available with Ripple in order to enable external
    entities to connect to the Ripple network. Two key components, **Interledger**
    protocol and **Ripple connect**, work in harmony in order to enable distributed,
    secure, scalable, and interoperable payments network.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 各种开发者API可以通过Ripple使外部实体连接到Ripple网络。两个关键组件**Interledger**协议和**Ripple connect**协同工作，以实现分布式、安全、可扩展和互操作的支付网络。
- en: Interledger protocol has been specifically developed to enable interoperability
    between two different ledgers. It can be used to connect ledgers and blockchains
    from various different organizations including, but not limited to, payment networks,
    financial institutions, clearing houses, and exchanges.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Interledger协议已特别开发，以实现两个不同账本之间的互操作性。它可以用于连接来自各种不同组织的账本和区块链，包括但不限于支付网络、金融机构、清算机构和交易所。
- en: 'Interledger is a simple protocol that is composed of four layers: Application,
    Transport, Interledger, and Ledger. Each layer is responsible for performing various
    functions under certain protocols. These functions and protocols are described
    in the following section.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Interledger是一个由四个层组成的简单协议：应用、传输、Interledger和分账。每个层负责在特定协议下执行各种功能。这些功能和协议在下面的部分描述。
- en: Application layer
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 应用层
- en: Protocols running on this layer govern the key attributes of a payment transaction.
    Examples of application layer protocols include **Simple Payment Setup protocol**
    (**SPSP**) and **Open Web payment scheme** (**OWPS**). SPSP is an Interledger
    protocol that allows secure payment across different ledgers by creating *Connectors*
    between them. OWPS is another scheme that allows consumer payments across different
    networks. Once the protocols on this layer have run successfully, protocols from
    the transport layer will be invoked in order to start the payment process.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 运行在此层的协议统辖支付交易的关键属性。应用层协议的例子包括**Simple Payment Setup protocol**（**SPSP**）和**Open
    Web payment scheme**（**OWPS**）。 SPSP是一个Interledger协议，通过在不同账本之间创建*连接器*，实现跨不同账本的安全支付。OWPS是另一种方案，允许在不同网络之间进行消费者支付。一旦这一层的协议成功运行，传输层的协议将被调用，以开始支付流程。
- en: Transport layer
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 传输层
- en: This layer is responsible for managing payment transactions. Protocols such
    as **Optimistic Transport protocol** (**OTP**), **Universal Transport protocol**
    (**UTP**) and **Atomic Transport protocol** (**ATP**) are available currently
    for this layer. OTP is the simplest protocol, which manages payment transfers
    without any escrow protection, whereas UTP provides escrow protection. ATP is
    the most advanced protocol, which not only provides an escrowed transfer mechanism
    but in addition makes use of trusted notaries to further secure the payment transactions.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 该层负责管理支付交易。目前，该层提供的协议包括**Optimistic Transport protocol**（**OTP**）、**Universal
    Transport protocol**（**UTP**）和**Atomic Transport protocol**（**ATP**）。 OTP是最简单的协议，可以在没有任何赔偿保护的情况下管理支付转账，而UTP提供赔偿保护。
    ATP是最先进的协议，不仅提供赔偿转账机制，还利用受信任的公证人进一步确保支付交易的安全性。
- en: Interledger layer
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Interledger层
- en: This layer provides interoperability and routing services. This layer contains
    protocols such as **Interledger protocol** (**ILP**), **Interledger quoting protocol**
    (**ILQP**), and **Interledger control protocol** (**ILCP**). ILP packet provides
    the final target of the transaction in a transfer. ILQP is used in making quote
    requests by the senders before the actual transfer. ILCP is used to exchange data
    related to routing information and payment errors between connectors on the payment
    network.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这一层提供了互操作性和路由服务。这一层包含诸如**Interledger protocol**（**ILP**）、**Interledger quoting
    protocol**（**ILQP**）和**Interledger control protocol**（**ILCP**）等协议。 ILP数据包提供了转账中交易的最终目标。发送方在实际传输之前使用ILQP进行报价请求。
    ILCP用于在支付网络的连接器之间交换与路由信息和支付错误相关的数据。
- en: Ledger layer
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分账层
- en: This layer contains protocols that enable communication and execution of payment
    transactions between connectors. *Connectors* are basically objects that implement
    the protocol for forwarding payments between different ledgers. It can support
    various protocols such as Simple Ledger protocol, various blockchain protocols,
    legacy protocols, and different proprietary protocols.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此层包含促进支付交易在连接器之间进行通信和执行的协议。*连接器*基本上是实现在不同账本之间转发支付的协议的对象。它可以支持各种协议，如简单账本协议、各种区块链协议、传统协议和不同的专有协议。
- en: Ripple connect consists of various Plug and Play modules that allow connectivity
    between ledgers by using the ILP. It enables the exchange of required data between
    parties before the transaction, visibility, fee management, delivery confirmation,
    and secure communication using Transport layer security. A third-party application
    can connect to the Ripple network via various connectors.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Ripple 连接由各种即插即用的模块组成，通过使用 ILP 实现账本之间的连接。它使各方在交易之前能够交换所需的数据，包括可见性、费用管理、交付确认和使用传输层安全性进行安全通信。第三方应用程序可以通过各种连接器连接到
    Ripple 网络。
- en: Overall, Ripple is a solution that is targeted for financial industry and makes
    real-time payments possible without any settlement risk. As this is a very feature-rich
    platform, covering all aspects of it are not possible in this chapter. Ripple
    and very rich documentation for the platform are available at [https://ripple.com/](https://ripple.com/).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，Ripple 是针对金融行业的解决方案，使实时支付成为可能，没有任何结算风险。由于这是一个非常功能丰富的平台，在本章中无法涵盖其所有方面。Ripple
    平台有非常丰富的文档，可在 [https://ripple.com/](https://ripple.com/) 上找到。
- en: Stellar
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Stellar
- en: Stellar is a payment network based on blockchain technology and a novel consensus
    model called **Federated Byzantine Agreement** (**FBA**). FBA works by creating
    quorums of trusted parties. **Stellar Consensus Protocol** (**SCP**) is an implementation
    of FBA.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Stellar 是基于区块链技术的支付网络，采用一种新颖的共识模型称为**联邦拜占庭协议**（**FBA**）。FBA 通过创建受信任方的法定人数来工作。**Stellar
    共识协议**（**SCP**）是 FBA 的一种实现。
- en: Key issues identified in the Stellar whitepaper are the cost and complexity
    of current financial infrastructure. This limitation warrants the need for a global
    financial network that addresses these issues without compromising the integrity
    and security of the financial transaction. This requirement has resulted in the
    invention of **Stellar Consensus Protocol** (**SCP**) which is a provably safe
    consensus mechanism.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Stellar 白皮书中确定的关键问题是当前金融基础设施的成本和复杂性。这一限制需要一个能够解决这些问题而又不损害金融交易的完整性和安全性的全球金融网络。这一要求导致了**Stellar
    共识协议**（**SCP**）的发明，这是一种可证明安全的共识机制。
- en: 'It has four main properties: *decentralized control*, which allows participation
    by anyone without any central party; *low latency*, which addresses the much desired
    requirement of fast transaction processing; *flexible trust*,which allows users
    to choose which parties they trust for a specific purpose, and finally, *asymptotic
    security*, which makes use of digital signatures and hash functions for providing
    the required level of security on the network.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有四个主要属性：*分散控制*，允许任何人参与而没有中央方；*低延迟*，满足了快速处理交易的需求；*灵活的信任*，允许用户选择他们信任的特定目的的方；最后，*渐进安全性*，利用数字签名和哈希函数为网络提供所需级别的安全性。
- en: The Stellar network allows transfer and representation of the value of an asset
    by its native digital currency, called Lumens, abbreviated as XLM. Lumens are
    consumed when a transaction is broadcasted on the network, which also serves as
    a deterrent against **Denial of Service** (**DOS**) attacks.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Stellar 网络允许通过其本机数字货币 Lumens（简称 XLM）转移和表示资产的价值。当交易在网络上广播时，Lumens 会被消耗，这也可以防止**拒绝服务**（**DOS**）攻击。
- en: At its core, the Stellar network maintains a distributed ledger that records
    every transaction and is replicated on each Stellar server. The consensus is achieved
    by verifying transactions between servers and updating the ledger with updates.
    The Stellar ledger can also act as a distributed exchange order book by allowing
    users to store their offers to buy or sell currencies.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Stellar 网络的核心是维护一个分布式账本，记录每一笔交易，并在每个 Stellar 服务器上复制。通过在服务器之间验证交易并更新账本来实现共识。Stellar
    账本还可以作为一个分布式交易所订单簿，允许用户存储他们的买卖货币的报价。
- en: There are various tools, SDKs, and software that make up the Stellar network.
    The core software is available at [https://github.com/stellar/stellar-core](https://github.com/stellar/stellar-core).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Stellar 网络由各种工具、SDK 和软件组成。核心软件可在 [https://github.com/stellar/stellar-core](https://github.com/stellar/stellar-core)
    上找到。
- en: Rootstock
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Rootstock
- en: Before discussing Rootstock in detail, it's important to define and introduce
    some concepts that are fundamental to the design of Rootstock. These concepts
    include sidechains, drivechains, and two-way pegging. The concept of the sidechain
    was originally developed by Blockstream.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入讨论Rootstock之前，定义和介绍一些对Rootstock设计基础至关重要的概念是很重要的。这些概念包括侧链、驱动链和双向锚定。侧链概念最初是由Blockstream公司开发的。
- en: Two way pegging is a mechanism by which value (coins) can transfer between one
    blockchain to another and vice versa. There is no real transfer of coin between
    chains. The idea revolves around the concept of locking the same amount and value
    of coins in a bitcoin blockchain (main chain) and unlocking the equivalent amount
    of tokens in the secondary chain.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 双向锚定是一种机制，通过它价值（硬币）可以在一个区块链之间以及反之互相转移。没有真正的硬币在链之间转移。这个概念围绕在比特币区块链（主链）中锁定相同数量和价值的硬币，然后在次级链中解锁相同金额的代币周转。
- en: Bearing this definition in mind, sidechains can be defined as described in the
    following section. Bearing this definition in mind, sidechains can be defined
    as described in the following section.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这个定义，侧链可以如下所述被定义在以下章节。牢记这个定义，侧链可以如下所述被定义在以下章节。
- en: '**Sidechain**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**侧链**'
- en: This is a blockchain that runs in parallel with a main blockchain and allows
    transfer of value between them. This means that tokens from one blockchain can
    be used in the sidechain and vice versa. This is also called a pegged sidechain
    because it supports two-way pegged assets.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个与主区块链并行运行的区块链，允许在它们之间转移价值。这意味着一条区块链的代币可以在侧链中使用，反之亦然。这也被称为锚定侧链，因为它支持双向锚定的资产。
- en: Drivechain
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 驱动链
- en: This is a relatively new concept, where control on unlocking the locked bitcoins
    (in mainchain) is given to the miners who can vote when to unlock them. This is
    in contrast to sidechains, where consensus is validated though Simple payment
    verification mechanism in order to transfer the coins back to the mainchain.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相对较新的概念，在这个概念中，解锁比特币（在主链上）的控制权交给了矿工，他们可以投票决定何时解锁它们。这与侧链形成对比，侧链通过简单支付验证机制验证共识，以便将硬币转回主链。
- en: Rootstock is a smart contract platform which has a two-way peg into bitcoin
    blockchain. The core idea is to increase the scalability and performance of the
    bitcoin system and enable it to work with smart contracts. Rootstock runs a Turing
    complete deterministic virtual machine called **Rootstock Virtual Machine** (**RVM**).
    It is also compatible with the Ethereum virtual machine and allows solidity-compiled
    contracts to run on Rootstock. Smart contracts can also run under the time-a tested
    security of bitcoin blockchain. The Rootstock blockchain works by merge mining
    with bitcoins. This allows RSK blockchain to achieve the same security level as
    bitcoin. This is especially true for preventing double spends and achieving settlement
    finality. It allows scalability, up to 100 transactions per second.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Rootstock是一个智能合约平台，它与比特币区块链具有双向锚定。其核心理念是提高比特币系统的可扩展性和性能，并使其能够与智能合约一起运行。Rootstock运行一个图灵完备的确定性虚拟机，称为**Rootstock虚拟机**（**RVM**）。它还兼容以太坊虚拟机，允许用Solidity编译的合约在Rootstock上运行。智能合约还可以在比特币区块链的时间测试安全下运行。Rootstock区块链通过与比特币进行合并挖矿来工作。这使得RSK区块链能够达到与比特币相同的安全水平。这对于防止双重支付和实现结算最终性尤为重要。它允许可扩展性，每秒最多处理100笔交易。
- en: RSK has recently released a test network called Turmeric. It is available at
    [http://www.rsk.co/](http://www.rsk.co/).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: RSK最近发布了一个名为Turmeric的测试网络。它可以在[http://www.rsk.co/](http://www.rsk.co/) 找到。
- en: Quorum
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 股份比
- en: This is a blockchain solution built by enhancing the existing Ethereum blockchain.
    There are several enhancements such as transaction privacy and a new consensus
    mechanism that has been introduced in Quorum. Quorum has introduced a new consensus
    model known as QuorumChain, which is based on a majority voting and time based
    mechanism. Another feature called Constellation is also introduced which is a
    general purpose mechanism for submitting information and allows encrypted communication
    between peers. Furthermore, permissioning at node level is governed by smart contracts.
    It also provides a higher level of performance compared to public Ethereum blockchains.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过增强现有的以太坊区块链构建的区块链解决方案。在 Quorum 中引入了几个增强功能，如交易隐私和一个新的共识机制。Quorum 引入了一种称为
    QuorumChain 的新共识模型，它基于大多数投票和基于时间的机制。另一个称为 Constellation 的功能也被引入，它是一个用于提交信息并允许对等方之间进行加密通信的通用机制。此外，节点级别的权限控制由智能合约管理。与公共以太坊区块链相比，它还提供了更高水平的性能。
- en: Several components make up the Quorum blockchain ecosystem. These are listed
    in the following section.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 区块链生态系统由几个组件组成。这些在以下部分列出。
- en: Transaction manager
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 事务管理器
- en: This component enables access to encrypted transaction data. It also manages
    local storage and communication with other Transaction managers on the network.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件使得访问加密交易数据成为可能。它还管理本地存储并与网络上的其他事务管理器进行通信。
- en: Crypto Enclave
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 加密保险库
- en: As the name suggests, this component is responsible for providing cryptographic
    services to ensure transaction privacy. It is also responsible for performing
    key management functions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，该组件负责提供加密服务以确保交易隐私。它还负责执行密钥管理功能。
- en: QuorumChain
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: QuorumChain
- en: This is the key innovation in Quorum. It is a Byzantine Fault-tolerant consensus
    mechanism which allows verification and circulation of votes via transactions
    on the blockchain network. In this scheme, a smart contract is used to manage
    the consensus process and nodes can be given voting rights to vote on which new
    block should be accepted. Once an appropriate number of votes is received by the
    voters, the block is considered valid. Nodes can have two roles, namely *Voter*
    or *Maker*. The *Voter* node is allowed to vote, whereas the *Maker* node is the
    one that creates a new block. A node can have either rights, none or only one.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Quorum 中的关键创新。它是一种拜占庭容错共识机制，允许通过区块链网络上的交易进行投票的验证和流通。在此方案中，智能合约用于管理共识过程，并且节点可以被赋予投票权以投票应接受哪个新块。一旦选民收到足够数量的选票，该块就被视为有效。节点可以扮演两种角色，即
    *投票者* 或 *制造者*。*投票者* 节点被允许投票，而 *制造者* 节点则是创建新块的节点。一个节点可以具有权利、无权或只有一种权利。
- en: Network manager
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络管理器
- en: This component provides an access control layer for the permissioned network.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件为权限网络提供了访问控制层。
- en: A node in the quorum network can take several roles, for example, a Maker node
    that is allowed to create new blocks. Transaction privacy is provided using cryptography
    and the concept that certain transactions are meant to be viewable only by their
    relevant participants. This idea is similar to Corda's idea of private transactions
    that was discussed in the last chapter. As it allows both public and private transactions
    on the blockchain, the state database has been divided into two databases representing
    private and public transactions. As such, there are two separate Patricia-Merkle
    trees that represent the private and public state of the network. A private contract
    state hash is used to provide consensus evidence in private transactions between
    transacting parties.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 网络中的节点可以扮演多种角色，例如，允许创建新块的 Maker 节点。使用密码学和某些交易仅适用于其相关参与者的概念来提供交易隐私。这个想法类似于上一章讨论的
    Corda 的私有交易的概念。由于它允许在区块链上进行公共和私有交易，状态数据库已分为表示私有和公共交易的两个数据库。因此，有两个单独的 Patricia-Merkle
    树，表示网络的私有和公共状态。私有合同状态哈希用于在交易方之间的私有交易中提供共识证据。
- en: Transaction in a quorum network consists of various elements such as the recipient,
    the digital signature of the sender, which is used to identify the transaction
    originator, optional ether amount, the optional list of participants that are
    allowed to see the transaction, and a field that contains a hash in case of private
    transactions.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 网络中的交易包括各种元素，如收件人、发送者的数字签名（用于识别交易发起者）、可选的以太数量、允许查看交易的参与者的可选列表以及在私有交易的情况下包含哈希的字段。
- en: 'A transaction goes through several steps before it can reach its destination.
    These steps are described as follows in detail:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 交易在达到目的地之前经过几个步骤。这些步骤详细描述如下：
- en: User applications (DAPPs) send the transaction to the quorum node via an API
    exposed by the blockchain network. This also contains the recipient address and
    transaction data.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户应用程序（DAPP）通过区块链网络提供的 API 将交易发送到 quorum 节点。这也包含接收地址和交易数据。
- en: The API then encrypts the payload and applies any other necessary cryptographic
    algorithm in order to ensure privacy of the transaction, and is sent to the Transaction
    manager. The hash of the encrypted payload is also calculated at this step.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: API 然后加密有效负载，并应用任何其他必要的加密算法，以确保交易的隐私，并发送给事务管理器。在此步骤还计算了加密有效负载的哈希。
- en: After receiving the transaction, the Transaction manager validates the signature
    of the transaction sender and stores the message.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收到交易后，事务管理器验证交易发送者的签名并存储消息。
- en: The hash of the previously encrypted payload is sent to the Quorum node.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 先前加密有效负载的哈希值被发送到 Quorum 节点。
- en: Once the Quorum node starts to validate a block that contains the private transaction,
    it requests more relevant data from the Transaction manager.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Quorum 节点开始验证包含私有交易的区块，它会向事务管理器请求更多相关数据。
- en: Once this request is received by the Transaction manager, it sends the encrypted
    payload and relevant symmetric keys to the requestor quorum node.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦事务管理器收到此请求，它会将加密有效负载和相关对称密钥发送给请求者 quorum 节点。
- en: Once the Quorum node has all the data, it decrypts the payload and sends it
    to the EVM for execution. This is how Quorum achieves privacy with symmetric encryption
    on the blockchain, while it is able to use native Ethereum protocol and EVM for
    message transfer and execution respectively.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Quorum 节点拥有所有数据，它会解密有效负载并将其发送到 EVM 进行执行。这就是 Quorum 如何通过区块链上的对称加密实现隐私，同时能够使用本地以太坊协议和
    EVM 进行消息传输和执行的方式。
- en: A similar concept, but quite different in a few aspects, has been proposed before
    in the form of **Hydrachain**, which is based on Ethereum blockchain and allows
    creation of permissioned distributed ledgers.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之前曾以**Hydrachain**的形式提出了类似概念，但在某些方面有很大的不同，它基于以太坊区块链，允许创建权限分布式分类账。
- en: Quorum is available for download at [https://github.com/jpmorganchase/quorum](https://github.com/jpmorganchase/quorum).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 可在[https://github.com/jpmorganchase/quorum](https://github.com/jpmorganchase/quorum)下载。
- en: Tezos
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Tezos
- en: Tezos is a generic self-amending cryptographic ledger, which means that it not
    only allows decentralized consensus on the state of the blockchain but also allows
    consensus on how the protocol and nodes are evolved over time. Tezos has been
    developed to address limitations in bitcoin protocol such as issues arising from
    hard forks, cost, and mining power centralization due to Proof of Work, limited
    scripting ability, and security issues. It has been developed in a purely functional
    language called OCaml.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Tezos 是一个通用的自修正密码分类账，这意味着它不仅允许在区块链状态上进行去中心化共识，还允许就协议和节点如何随时间演变达成共识。Tezos 已经开发出来，以解决比特币协议中的限制，如由硬分叉引起的问题，成本，由于工作量证明而导致的挖矿中心化，有限的脚本能力和安全问题。它是用一种纯函数式语言OCaml开发的。
- en: 'The architecture of Tezos distributed ledger is divided into three layers:
    the network layer, consensus layer, and transaction layer. This decomposition
    allows protocol to be evolved in a decentralized fashion. For this purpose, a
    generic network shell is implemented in Tezos that is responsible for maintaining
    the blockchain, which is represented by a combination of consensus and transaction
    layer. This shell provides an interface layer between the network and the protocol.
    A concept of seed protocol has also been introduced, which is used as a mechanism
    to allow stakeholders on the network to approve any changes to the protocol. Tezos
    blockchain starts from a seed protocol compared to a traditional blockchain that
    starts from a genesis block.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Tezos分布式分类账的架构分为三个层次：网络层、共识层和交易层。这种分解允许协议以分散的方式发展。为此，在Tezos中实现了一个通用的网络外壳，负责维护区块链，由共识和交易层组合表示。这个外壳在网络和协议之间提供接口层。还引入了种子协议的概念，用作允许网络上的利益相关者批准协议变更的机制。Tezos区块链从种子协议开始，而不是从传统区块链的创世块开始。
- en: This seed protocol is responsible for defining procedures for amendments in
    the blockchain and even the amendment protocol itself. The reward mechanism in
    Tezos is based on a **Proof of Stake** (**PoS**) algorithm, therefore there is
    no mining requirement.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此种子协议负责定义区块链中的修正程序，甚至自身的修正协议。Tezos中的奖励机制基于**股权证明**（**PoS**）算法，因此没有挖矿要求。
- en: Contract script language has been developed in Tezos for writing smart contracts,
    which is a stack-based Turing complete language. Smart contracts in Tezos are
    formally verifiable, which allows the code to be mathematically proven for its
    correctness.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Tezos开发了用于编写智能合约的合约脚本语言，这是一种基于堆栈的图灵完备语言。Tezos中的智能合约是经过形式验证的，这允许对代码进行数学上的正确性证明。
- en: Tezos code is available at [https://github.com/tezos/tezos](https://github.com/tezos/tezos).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Tezos代码可以在 [https://github.com/tezos/tezos](https://github.com/tezos/tezos)
    找到。
- en: Storj
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Storj
- en: Existing models for cloud-based storage are all centralized solutions, which
    may or may not be as secure as users expect them to be. There is a need to have
    a cloud storage system that is secure, highly available, and above all decentralized.
    Storj aims to provide blockchain based, decentralized, and distributed storage.
    It is a cloud shared by the community instead of a central organization. It allows
    execution of storage contracts between nodes that act as autonomous agents. These
    agents (nodes) execute various functions such as data transfer, validation, and
    perform data integrity checks. The core concept is based on **Distributed Hash
    Tables** (**DHT**) -Kademlia, however this protocol has been enhanced by adding
    new message types and functionalities in Storj. It also implements a peer to peer
    **publish/subscribe** (**pub/sub**) mechanism known as Quasar, which ensures that
    messages successfully reach the nodes that are interested in storage contracts.
    This is achieved via a bloom filter-based storage contract parameters selection
    mechanism called **topics**.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 云存储的现有模型都是集中化的解决方案，可能不如用户期望的那样安全。需要有一个安全、高可用性，最重要的是分散的云存储系统。Storj旨在提供基于区块链的、分散的、分布式存储。这是一个由社区共享的云，而不是一个中央组织。它允许节点之间执行存储合同，充当自治代理。这些代理（节点）执行各种功能，如数据传输，验证，并执行数据完整性检查。其核心概念基于**分布式哈希表**（**DHT**）-
    Kademlia，但是通过向Storj添加新的消息类型和功能来增强此协议。它还实现了一种点对点的**发布/订阅**（**pub/sub**）机制，称为Quasar，这确保消息成功到达对存储合同感兴趣的节点。这是通过基于布隆过滤器的存储合同参数选择机制来实现的，称为**topics**。
- en: Storj stores files in an encrypted format spread across the network. Before
    the file is stored on the network, it is encrypted using AES-256-CTR symmetric
    encryption and is then stored piece by piece in a distributed manner on the network.
    This process of dissecting the file into pieces is called **sharding** and results
    in increased availability, security, performance, and privacy of the network.
    Also if a node fails the shard is still available because by default a single
    shard is stored at three different locations on the network.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Storj在网络上以加密格式存储文件。在文件存储在网络上之前，它使用AES-256-CTR对称加密进行加密，然后以分布式方式逐个存储在网络上。这种将文件分割成片段的过程称为**sharding**，这样可以增加网络的可用性、安全性、性能和隐私。此外，如果一个节点出现故障，片段仍然可用，因为默认情况下，一个片段存储在网络上的三个不同位置。
- en: It maintains a blockchain, which serves as a shared ledger and implements standard
    security features such as public/private key cryptography and hash functions similar
    to any other blockchain. As the system is based on hard drive sharing between
    peers, anyone can contribute by sharing their extra space on the drive and get
    paid with Storj's own cryptocurrency called **Storjcoinx** (**SJCX**). SJCX was
    developed as a *counterparty* asset and makes use of bitcoin blockchain for transactions.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 它维护一个区块链，作为共享账本，并实现标准安全功能，例如公钥/私钥加密和哈希函数，类似于任何其他区块链。由于该系统基于节点之间的硬盘共享，任何人都可以通过在驱动器上共享其额外空间来做出贡献，并使用
    Storj 自己的加密货币 **Storjcoinx**（**SJCX**）获得支付。SJCX 是作为 *对手方* 资产开发的，使用比特币区块链进行交易。
- en: Storj code is available at [https://github.com/Storj/](https://github.com/Storj/).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Storj 代码位于 [https://github.com/Storj/](https://github.com/Storj/)。
- en: Maidsafe
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Maidsafe
- en: This is another distributed storage system similar to Storj. Users are paid
    in Safecoin for their storage space contribution to the network. This mechanism
    of payment is governed by *proof of resource*, which ensures that the disk space
    committed by a user to the network is available, if not then the payment of Safecoin
    will drop accordingly. The files are encrypted and divided into small portions
    before being transmitted on to the network for storage. Another concept of **opportunistic
    caching** has been introduced with Maidsafe, which is a mechanism to create copies
    of frequently accessed data physically closer to where the access requests are
    coming from, which results in high performance of the network. Another novel feature
    of the SAFE network is that it automatically removes any duplicate data on the
    network, thus resulting in reduced storage requirements. Moreover, the concept
    of **churning** has also been introduced, which basically means that data is constantly
    moved across the network so that the data cannot be targeted by malicious adversaries.
    It also keeps multiple copies of data across the network to provide redundancy
    in case a node goes offline or fails.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个类似于 Storj 的分布式存储系统。用户通过向网络贡献存储空间来获得 Safecoin 支付。这种支付机制由 *资源证明* 管理，该机制确保用户向网络承诺的磁盘空间可用，如果不可用，则
    Safecoin 的支付会相应减少。在传输到网络进行存储之前，文件会被加密并分成小部分。Maidsafe 还引入了 **机会缓存** 的另一个概念，这是一种机制，用于在访问请求来自的物理位置附近创建经常访问数据的副本，从而提高网络性能。SAFE
    网络的另一个新颖功能是，它会自动删除网络上的任何重复数据，从而减少存储要求。此外，还引入了 **搅拌** 的概念，基本上意味着数据不断在网络中移动，以便数据不能被恶意对手针对。它还在网络上保留数据的多个副本，以提供冗余，以防节点下线或失败。
- en: BigChainDB
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: BigChainDB
- en: This is a scalable blockchain database. It is not strictly a blockchain itself,
    but complements blockchain technology by providing a decentralized database. At
    its core it's a distributed database but with the added attributes of a blockchain
    such as decentralization, immutability, and handling of digital assets. It also
    allows usage of NoSQL for querying the database. It is intended to provide a database
    in a decentralized ecosystem where not only processing is decentralized (blockchain)
    or the file system is decentralized (for example, IPFS) but the database is also
    decentralized. This makes the whole decentralized application ecosystem decentralized.
    This is available at [https://www.bigchaindb.com/](https://www.bigchaindb.com/).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可扩展的区块链数据库。它严格来说并不是一个区块链本身，而是通过提供分布式数据库来补充区块链技术。在其核心，它是一个分布式数据库，但具有区块链的附加属性，例如去中心化、不可变性和数字资产处理。它还允许使用
    NoSQL 来查询数据库。它旨在提供一个数据库，位于分散的生态系统中，其中不仅处理是分散的（区块链）或文件系统是分散的（例如 IPFS），而且数据库也是分散的。这使整个分散式应用生态系统变得分散。此处提供：[https://www.bigchaindb.com/](https://www.bigchaindb.com/)。
- en: Multichain
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Multichain
- en: Multichain has been developed as a platform for the development and deployment
    of private blockchains. It is based on bitcoin code and addresses security, scalability,
    and privacy issues. It is a highly configurable blockchain platform that allows
    users to set different blockchain parameters. It supports control and privacy
    via a granular Permissioning layer. Installation of Multichain is very quick and
    links to installation files are available at [http://www.multichain.com/download-install/](http://www.multichain.com/download-install/).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Multichain已经开发成为一个用于开发和部署私有区块链的平台。它基于比特币代码，并解决了安全性、可扩展性和隐私问题。这是一个高度可配置的区块链平台，允许用户设置不同的区块链参数。它通过一个细粒度的权限管理层支持控制和隐私。Multichain的安装非常快速，并且安装文件的链接可在[http://www.multichain.com/download-install/](http://www.multichain.com/download-install/)找到。
- en: Tendermint
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Tendermint
- en: Tendermint is a software that provides a Byzantine fault-tolerant consensus
    mechanism and state machine replication functionality to an application. Its main
    motivation is to develop a general purpose, secure, and high-performance replicated
    state machine.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Tendermint是一种软件，为应用程序提供了拜占庭容错共识机制和状态机复制功能。它的主要动机是开发一个通用的、安全的和高性能的复制状态机。
- en: There are two components in Tendermint, which are described in following section.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Tendermint有两个组件，将在下一节中描述。
- en: Tendermint Core
  id: totrans-160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Tendermint Core
- en: This is a consensus engine that enables secure replication of transactions on
    each node in the network.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个共识引擎，可以在网络中的每个节点上安全地复制交易。
- en: Tendermint Socket Protocol (TMSP)
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Tendermint Socket Protocol (TMSP)
- en: This is an application interface protocol that allows interfacing with any programming
    language to process transactions.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个应用程序接口协议，允许与任何编程语言进行接口，以处理交易。
- en: Tendermint allows decoupling of the application process and consensus process,
    which allows any application to benefit from the consensus mechanism.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Tendermint允许将应用程序过程和共识过程分离，从而使任何应用程序都能从共识机制中受益。
- en: The Tendermint consensus algorithm is a round-based mechanism where validator
    nodes propose new blocks in each round. A locking mechanism is used to ensure
    protection against a scenario where two different blocks are selected for committing
    at the same height of the blockchain. Each validator node maintains a full local
    replicated ledger of blocks that contain transactions. Each block contains a header,
    which consists of the previous block hash, timestamp of the proposal of block,
    current block height, and merkle root hash of all transactions present in the
    block.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Tendermint共识算法是一个基于轮次的机制，在每个轮次中，验证节点提出新的区块。使用锁定机制来确保防止在区块链的同一高度上选择提交两个不同的区块的情况。每个验证节点保持包含交易的完整本地复制分类账。每个区块包含一个头部，其中包括上一个区块的哈希值、区块提议的时间戳、当前区块高度和区块中包含的所有交易的默克尔根哈希值。
- en: Tendermint has recently been used in **Cosmos**, which is a network of blockchains
    that allows interoperability between different chains running on BFT consensus
    algorithm. Blockchains on this network are called zones. The first zone in Cosmos
    is called Cosmos hub, which is in fact a public blockchain and is responsible
    for providing connectivity service to other blockchains. For this purpose, the
    hub makes use of **Inter Blockchain Communication protocol** (**IBC**). IBC protocol
    supports two types of transactions called *IBCBlockCimmitTx* and *IBCPacketTx*.
    The first type is used to provide proof of the most recent block hash in a blockchain
    to any party, whereas the latter type is used to provide data origin authentication.
    A packet from one blockchain to another is published by first posting a proof
    to the target chain. The receiving (target) chain checks this proof in order to
    verify that the sending chain has indeed published the packet. In addition, it
    has its own native currency called Atom. This scheme addresses scalability and
    interoperability issues by allowing multiple blockchains to connect to the hub.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Tendermint最近被用于**Cosmos**，它是一个区块链网络，允许在运行BFT共识算法的不同区块链之间进行互操作。在该网络上的区块链称为“区”。Cosmos的第一个区被称为Cosmos
    hub，实际上是一个公共区块链，负责为其他区块链提供连接服务。为此，该中枢使用**跨链通信协议**（**IBC**）。IBC协议支持称为*IBCBlockCimmitTx*和*IBCPacketTx*的两种交易类型。第一种类型用于向任何方提供区块链中最新块哈希的证明，而后一种类型用于提供数据源认证。从一个区块链到另一个区块链的数据包是通过首先向目标链发布证明来发布的。接收（目标）链检查此证明以验证发送链确实已发布该数据包。此外，它有自己的本机货币称为Atom。这个方案通过允许多个区块链连接到中枢来解决可伸缩性和互操作性问题。
- en: Tendermint is available at [https://tendermint.com/](https://tendermint.com/).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Tendermint可以在[https://tendermint.com/](https://tendermint.com/)找到。
- en: Platforms
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台
- en: This section covers various platforms that have been developed to enhance the
    experience of existing blockchain solutions. First, an Ethereum-compliant solution
    named BlockApps STRATO will be discussed.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了用于增强现有区块链解决方案体验的各种平台。首先，将讨论一个名为BlockApps STRATO的与以太坊兼容的解决方案。
- en: BlockApps
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BlockApps
- en: BlockApps is a platform that provides a rich set of tools to build blockchain
    applications. This platform is written in Haskell and is based on modular architecture.
    The solution is scalable and makes it easier to deploy smart contracts and blockchain
    applications. It is available at [http://www.blockapps.net/](http://www.blockapps.net/).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: BlockApps是一个提供丰富工具集来构建区块链应用程序的平台。该平台用Haskell编写，基于模块化架构。该解决方案具有可伸缩性，并使部署智能合约和区块链应用程序变得更加容易。它可以在[http://www.blockapps.net/](http://www.blockapps.net/)找到。
- en: In the next section, installation and a simple example of deployment will be
    discussed.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，将讨论安装和一个简单的部署示例。
- en: Installation
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装
- en: 'BlockApps can be installed via npm by using the command shown as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令通过npm安装BlockApps：
- en: '[PRE0]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`sudo` is optional, if no administrative rights are required. This will produce
    an output similar to the one shown in the following screenshot:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo`是可选的，如果不需要管理员权限。这将产生类似于以下截图所示的输出：'
- en: '![Installation](img/image_10_006.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![安装](img/image_10_006.jpg)'
- en: bloc installation via npm (output truncated)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 通过npm安装bloc（输出已截断）
- en: Once installation is complete, applications can be created by following the
    steps shown in following section. An example is shown below that shows how to
    initialize a new application in BlockApps, deploy it on BlockApps TestNet and
    interact with it.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，可以按照以下部分中显示的步骤创建应用程序。下面的示例显示如何在BlockApps中初始化一个新应用程序，在BlockApps TestNet上部署它并与其交互。
- en: Application development and deployment using BlockApps
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用BlockApps进行应用程序开发和部署
- en: 'The first step is to initialize the BlockApps application using the following
    command:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是使用以下命令初始化BlockApps应用程序：
- en: '[PRE1]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It will ask for several parameters: the name of the app, your name, e-mail,
    API URL (apiUrl), and blockchain profile. This is shown in the following screenshot.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 它将要求输入几个参数：应用程序名称，您的姓名，电子邮件，API URL（apiUrl）和区块链配置文件。如下截图所示。
- en: Once the command runs and completes successfully, it will create an application
    directory with templates and samples. In this instance, a directory named testApp
    will be created with relevant directories and sample contracts.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令运行并成功完成，它将创建一个带有模板和样本的应用程序目录。在此示例中，将创建一个名为testApp的目录，其中包含相关的目录和示例合约。
- en: '![Application development and deployment using BlockApps](img/image_10_007.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![使用 BlockApps 进行应用开发和部署](img/image_10_007.jpg)'
- en: bloc init
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: bloc init
- en: 'The next step is to install the `testApp` which can be achieved by running
    the following command:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是安装`testApp`，可以通过运行以下命令实现：
- en: '[PRE2]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Application development and deployment using BlockApps](img/image_10_008.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![使用 BlockApps 进行应用开发和部署](img/image_10_008.jpg)'
- en: testApp installation
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: testApp 安装
- en: 'Generation of a new key is required in order to sign the transactions. Keys
    can be generated by using the following command:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 为了签署交易，需要生成一个新的密钥。可以使用以下命令生成密钥：
- en: '[PRE3]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once issued, a password will have to be entered in order to protect the key.
    Once provided, the key will be created and a JSON file will be created. Note that
    the JSON file name is the actual address of the account on the blockchain. Also,
    it will display the message transaction mined, indicating success and deployment
    of the key and transaction (account creation) respectively.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦发出，将需要输入密码以保护密钥。一旦提供，密钥将被创建，并且将创建一个 JSON 文件。请注意，JSON 文件名是区块链上帐户的实际地址。此外，它将显示消息“transaction
    mined”，指示密钥和交易（帐户创建）的成功部署。
- en: 'The process is shown in the following screenshot:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 过程如下截图所示：
- en: '![Application development and deployment using BlockApps](img/image_10_009.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![使用 BlockApps 进行应用开发和部署](img/image_10_009.jpg)'
- en: Generate key
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 生成密钥
- en: Now, at this point, the new account can be queried by using curl. Simply pass
    the address as an argument in the URL and the result will be returned in JSON
    format.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在此时刻，可以通过使用 curl 查询新帐户。只需在 URL 中传递地址作为参数，结果将以 JSON 格式返回。
- en: '![Application development and deployment using BlockApps](img/image_10_010.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![使用 BlockApps 进行应用开发和部署](img/image_10_010.jpg)'
- en: Query the new account using curl
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 curl 查询新帐户
- en: 'Alternatively, a query can be executed via any web browser as shown in the
    following screenshot:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以通过任何网页浏览器执行查询，如下面的截图所示：
- en: '![Application development and deployment using BlockApps](img/image_10_011.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![使用 BlockApps 进行应用开发和部署](img/image_10_011.jpg)'
- en: BlockApps query via web browser
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 通过网页浏览器进行 BlockApps 查询
- en: In the next step, the process to upload the new contract to the test chain will
    be described. Note that all the contracts are placed in the `./app/contracts`
    directory under the `testApp` directory. As a sample, `Greeter.sol` contract has
    been chosen to be deployed to the network. BlockApps provides an easy method to
    achieve this deployment.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将描述将新合同上传到测试链的过程。请注意，所有合同都放在`testApp`目录下的`./app/contracts`目录中。作为示例，选择了要部署到网络的`Greeter.sol`合同。BlockApps
    提供了一种简单的方法来实现此部署。
- en: All contracts needs to be placed under the contracts directory in order for
    the compile command to find them and compile.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 所有合同都需要放在 contracts 目录下，以便编译命令能够找到它们并进行编译。
- en: '![Application development and deployment using BlockApps](img/image_10_012.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![使用 BlockApps 进行应用开发和部署](img/image_10_012.jpg)'
- en: Greeter contract under contracts directory
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: contracts 目录下的 Greeter 合同
- en: Contracts can be compiled by using the command shown in the following screenshot.
    Note that it takes that contract file name as an argument. After successful compilation,
    all relevant JSON files will be written under `./meta` directory.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 合同可以通过使用下面截图中显示的命令进行编译。请注意，它以合同文件名作为参数。编译成功后，所有相关的 JSON 文件将写入`./meta`目录下。
- en: '![Application development and deployment using BlockApps](img/image_10_013.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![使用 BlockApps 进行应用开发和部署](img/image_10_013.jpg)'
- en: Compilation of Greeter contract
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 编译 Greeter 合同
- en: 'Finally, the contract can be uploaded using the following command. This command
    expects the argument passed to the contract as defined in the contract code. In
    the example, it expected a text string as shown in the following example screenshot:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以使用以下命令上传合同。此命令期望传递给合同的参数与合同代码中定义的相同。在示例中，它期望一个文本字符串，如下面的示例截图所示：
- en: '[PRE4]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Application development and deployment using BlockApps](img/image_10_014.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![使用 BlockApps 进行应用开发和部署](img/image_10_014.jpg)'
- en: Upload of Greeter contract
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 上传 Greeter 合同
- en: 'Note that, in case correct arguments are not passed or missing, an error similar
    to following screenshot will occur:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果没有传递正确的参数或缺少参数，将会发生类似下面截图的错误：
- en: '![Application development and deployment using BlockApps](img/image_10_015.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![使用 BlockApps 进行应用开发和部署](img/image_10_015.jpg)'
- en: Error in case of wrong or missing arguments
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在传递错误或缺少参数的情况下出现错误
- en: 'Once the deployment is successful it can be verified that the ether has transferred
    from the existing contract to the new contract. Note that the balance has dropped.
    This is shown in the following screenshot:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦部署成功，可以验证以太从现有合约转移到新合约。请注意，余额已下降。如下截图所示：
- en: '![Application development and deployment using BlockApps](img/image_10_016.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![使用 BlockApps 进行应用程序开发和部署](img/image_10_016.jpg)'
- en: Deployed contract after installation via web browser
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Web 浏览器部署的合约
- en: After deployment of the contract, it can be queried using a web browser or any
    CLI tools such as cURL. The URL [http://strato-dev4.blockapps.net/eth/v1.2/account?address=05ee3af04e903f413402d5438b9de3827b1f4e70](http://strato-dev4.blockapps.net/eth/v1.2/account?address=05ee3af04e903f413402d5438b9de3827b1f4e70)
    is required to be passed to the web browser. This is shown in the following screenshot.
    Note that the code in binary format is also available in the output.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 合约部署后，可以使用 Web 浏览器或诸如 cURL 之类的 CLI 工具进行查询。需要将 URL [http://strato-dev4.blockapps.net/eth/v1.2/account?address=05ee3af04e903f413402d5438b9de3827b1f4e70](http://strato-dev4.blockapps.net/eth/v1.2/account?address=05ee3af04e903f413402d5438b9de3827b1f4e70)
    传递给 Web 浏览器。如下截图所示。请注意，二进制格式的代码也在输出中可用。
- en: '![Application development and deployment using BlockApps](img/image_10_017.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![使用 BlockApps 进行应用程序开发和部署](img/image_10_017.jpg)'
- en: Browse to the deployed contract, with code in binary format
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览已部署的合约，代码以二进制格式
- en: 'Furthermore, BlockApps has a feature available to run a local HTTP server,
    which can be started by using the following command:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，BlockApps 还提供了一个用于运行本地 HTTP 服务器的功能，可以使用以下命令启动：
- en: '[PRE5]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will start the web browser, and listen on TCP port `8000`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动 Web 浏览器，并在 TCP 端口 `8000` 上进行侦听。
- en: '![Application development and deployment using BlockApps](img/image_10_018.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![使用 BlockApps 进行应用程序开发和部署](img/image_10_018.jpg)'
- en: bloc start
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: bloc start
- en: 'After the web server starts, the compiled contracts can be viewed and queried
    using the local web page available as shown in the following screenshot:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Web 服务器启动后，可以通过本地网页查看和查询已编译的合约，如下面的截图所示：
- en: '![Application development and deployment using BlockApps](img/image_10_019.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![使用 BlockApps 进行应用程序开发和部署](img/image_10_019.jpg)'
- en: Compiled contracts available via browser
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 通过浏览器可用的已编译合约
- en: As demonstrated in the preceding example it is easier to build, deploy, and
    manage contracts using BlockApps. BlockApps aims to provide tools and core infrastructure
    for blockchain applications, and not just blockchain.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的示例所示，使用 BlockApps 更容易构建、部署和管理合约。BlockApps 旨在为区块链应用程序提供工具和核心基础设施，而不仅仅是区块链。
- en: Eris
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Eris
- en: Eris is not a single blockchain, it is an open modular platform developed by
    Monax for development of blockchain-based *ecosystem applications*. It offers
    various frameworks, SDKs, and tools that allow accelerated development and deployment
    of blockchain applications. The core idea behind the Eris application platform
    is to enable development and management of *ecosystem applications* with a blockchain
    backend. It allows integration with multiple blockchains and enables various third
    party systems to interact with various other systems. This platform makes use
    of smart contracts written in solidity language. It can interact with blockchains
    such as Ethereum or bitcoin. The interaction can include connectivity commands,
    start, stop, disconnection, and creation of new blockchains. Complexity related
    to setup and interaction with blockchains have been abstracted away in Eris. All
    commands are standardized for different blockchains, and the same commands can
    be used across the platform regardless of the blockchain type being targeted.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Eris 不是一个单一的区块链，它是由 Monax 开发的用于开发基于区块链的 *生态系统应用程序* 的开放模块化平台。它提供了各种框架、SDK 和工具，可以加速开发和部署区块链应用程序。Eris
    应用平台背后的核心理念是实现带有区块链后端的 *生态系统应用程序* 的开发和管理。它允许与多个区块链集成，并使各种第三方系统能够与其他系统交互。该平台利用
    solidity 语言编写的智能合约。它可以与以太坊或比特币等区块链进行交互。交互可以包括连接命令、启动、停止、断开连接和创建新区块链。Eris 中已经将与区块链设置和交互相关的复杂性抽象化了。所有命令对于不同的区块链都是标准化的，无论目标区块链类型如何，都可以在整个平台上使用相同的命令。
- en: 'An ecosystem application can consist the Eris platform, enabling the API gateway
    to allow legacy applications to connect to key management systems, consensus engines,
    and application engines. The Eris platform provides various toolkits that are
    used to provide various services to the developers. These modules are described
    as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 生态系统应用可以包括Eris平台，从而实现API网关，允许传统应用程序连接到密钥管理系统、共识引擎和应用程序引擎。Eris平台提供各种工具包，用于向开发人员提供各种服务。这些模块描述如下：
- en: '**Chains**: This allows the creation of and interaction with blockchains.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链**：这允许创建和与区块链进行交互。'
- en: '**Packages**: This allows the development of smart contracts.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包**：这允许开发智能合同。'
- en: '**Keys**: This is used for key management and signing operations.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**秘钥**：用于密钥管理和签名操作。'
- en: '**Files**: This allows working with distributed data management systems. It
    can be used to interact with file systems such as IPFS and data lakes.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件**：这允许使用分布式数据管理系统。可用于与IPFS和数据湖等文件系统进行交互。'
- en: '**Services**: This exposes a set of services that allows the management and
    integration of ecosystem applications.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：这提供了一组服务，允许对生态系统应用进行管理和集成。'
- en: Several SDKs has also been developed by Eris that allow the development and
    management of ecosystem applications. These SDKs contain smart contracts that
    have been fully tested and address specific needs and requirements of business.
    For example, a finance SDK, insurance SDK, and logistics SDK. There is also a
    base SDK that serves as a basic development kit to manage the lifecycle of an
    ecosystem application.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Eris还开发了几个SDK，允许开发和管理生态系统应用。这些SDK包含经过全面测试的智能合同，满足业务的特定需求和要求。例如，财务SDK，保险SDK和物流SDK。还有一个基础SDK，用作管理生态系统应用生命周期的基本开发工具包。
- en: 'Monax has developed its own permissioned blockchain client called Eris:db.
    It is a **Proof of Stake-based** (**PoS**) blockchain system that allows integration
    with a number of different blockchain networks. `Eris:db` consist of three components:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Monax已开发了自己的权限区块链客户端，称为Eris:db。这是一个基于**权益证明**（**PoS**）的区块链系统，允许与多种不同的区块链网络集成。`Eris:db`包括三个组件：
- en: '**Consensus**: This is based on the Tendermint consensus mechanism, discussed
    before.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共识**：这是基于Tendermint共识机制的，之前已经讨论过。'
- en: '**Virtual machine**: Eris uses **Ethereum Virtual Machine** (**EVM**), as such
    it supports solidity compiled contracts.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟机**：Eris使用**以太坊虚拟机**（**EVM**），因此支持经过编译的solidity合同。'
- en: '**Permissions layer**: Being a permissioned ledger, Eris provides an access
    control mechanism that can be used to assign specific roles to different entities
    on the network.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**权限层**：作为权限账本，Eris提供访问控制机制，可用于在网络上为不同实体分配特定角色。'
- en: '**Interface**: This provides various commandline tools and RPC interfaces to
    enable interaction with the backend blockchain network.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**界面**：这提供了各种命令行工具和RPC接口，以便与后端区块链网络进行交互。'
- en: The key difference between Ethereum blockchain and Eris:db is that Eris:db makes
    use of a Practical Byzantine Fault-Tolerance algorithm, which is implemented as
    a deposit-based Proof of Stake (DPOS system) whereas Ethereum uses **Proof of
    Work** (**PoW**). Moreover, `Eris:db` uses the ECDSA ed22519 curve scheme whereas
    Ethereum uses the secp256k1 algorithm. Finally, it is permissioned with an access
    control layer on top whereas Ethereum is a public blockchain.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊区块链和Eris:db之间的关键区别在于Eris:db使用了实用拜占庭容错算法，该算法实现为基于存款的权益证明（DPOS系统），而以太坊使用**工作证明**（**PoW**）。此外，`Eris:db`使用ECDSA
    ed22519曲线方案，而以太坊使用secp256k1算法。最后，它通过访问控制层具有权限，并且以太坊是公共区块链。
- en: Eris is a feature-rich application platform that offers a large selection of
    toolkits and services to develop blockchain-based applications. It is available
    at [https://monax.io/](https://monax.io/).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Eris是一个功能丰富的应用平台，提供大量的工具包和服务，用于开发基于区块链的应用程序。可在[https://monax.io/](https://monax.io/)上获取。
- en: Summary
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter started with the introduction of alternative blockchains and is
    divided into two main sections discussing blockchains and platforms. Blockchain
    technology is a very thriving area, as such changes are quite rapid in existing
    solutions and new relevant technologies or tools are being introduced almost every
    day. In this chapter, a careful selection of platforms and blockchains was discussed.
    Several solutions were discussed that complement material covered in previous
    chapters, for example, BlockApps, which supports Ethereum development. New blockchains
    such as Kadena, various new protocols such as Ripple, and concepts such as sidechains
    and drivechains were also discussed. The material covered in this chapter is intended
    to provide a strong foundation for more in-depth research into areas that readers
    are interested in. As said before, blockchain is a very fast moving field and
    there are many other blockchain proposals projects such as **Tauchain**, **Hydrachain**,
    **Elements**, **credits**,and many more that have not been discussed in this chapter.
    Readers are encouraged to keep an eye on the developments in this field in order
    to keep themselves up to date with advancement in this rapidly growing area.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 本章以替代区块链的介绍开始，并分为两个主要部分讨论区块链和平台。区块链技术是一个非常蓬勃发展的领域，因此现有解决方案的变化相当迅速，几乎每天都有新的相关技术或工具被引入。在本章中，对平台和区块链进行了仔细的选择。讨论了几种解决方案，这些解决方案补充了之前章节中介绍的材料，例如，支持以太坊开发的BlockApps。还讨论了新的区块链，如Kadena，各种新协议，如Ripple，以及诸如侧链和驱动链等概念。本章涵盖的材料旨在为读者对感兴趣的领域进行更深入的研究提供坚实的基础。正如之前所说，区块链是一个发展非常迅速的领域，还有许多其他区块链提案项目，如**Tauchain**、**Hydrachain**、**Elements**、**credits**等，这些项目在本章中没有讨论。鼓励读者关注这一领域的发展，以便及时了解这一快速发展领域的进展。
