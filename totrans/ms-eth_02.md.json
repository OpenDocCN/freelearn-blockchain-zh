["```\npragma solidity 0.5.0;\n```", "```\npragma solidity 0.5.0;\ncontract Example {}\n```", "```\npragma solidity 0.5.0;\ncontract Example {}\ncontract Another {}\ncontract Token {}\ncontract ICO {}\n```", "```\npragma solidity 0.5.0;\ncontract Example {\n    uint256 counter;\n    modifier onlyOwner {}\n    constructor() {}\n    function doSomething() {}\n}\n```", "```\npragma solidity 0.5.0;\ncontract Example {\n    uint256 myStateVariable;\n    string myOtherStateVariable;\n    function example(){\n        uint256 thisIsNotAStateVariable;\n    }\n}\n```", "```\nuint public myNumber;\n```", "```\nuint8 public myNumber = 256;\n```", "```\nuint8 public myNumber = 300;\n```", "```\nuint8 public myNumber = 44;\n```", "```\nuint8 public myNumber = -5;\n```", "```\nuint8 public myNumber = 251;\n```", "```\n0xeF5781A2c04113e29bE5724ae6E30bC287610007\n```", "```\npragma solidity 0.5.0;\ncontract Example {\n    address public myAddress = 0xeF5781A2c04113e29bE5724ae6E30bC287610007;\n}\n```", "```\naddress payable public myAddress;\n```", "```\npragma solidity 0.5.0;\ncontract TransferExample {\n    address payable public userAAddress;\n    function transferFunds() public {\n        userAAddress.transfer(10 ether);\n    }\n}\n```", "```\naddress public myContractAddress = address(this);\n```", "```\nuint256 public myContractBalance = address(this).balance;\n```", "```\nmyUserAddress.transfer(address(this).balance);\n```", "```\nstring public myText = “This is a long text”;\nbytes public myTextTwo = “This is another text”;\n```", "```\nbytes32 public shortText = “Short text.”;\n```", "```\nfunction example(string memory myText) public {\n require(bytes(myText)[0] != 0);\n}\n```", "```\nrequire(bytes(yourString)[0] != 0);\n```", "```\nstruct Example {\n    propertyOne;\n};\n```", "```\nenum Trees { RedTree, BlueTree, GreenTree, YellowTree }\n```", "```\nTrees public myFavoriteTree = Trees.RedTree;\n```", "```\nbool public isValid = true;\n```", "```\nuint256[] public myNumbers;\nstring[] public myTexts;\n```", "```\ndelete myTexts[2];\n```", "```\nmapping(string => bool) public validStrings;\n```", "```\nvalidStrings['example'] = true;\n```", "```\nuint256 memory myNumber;\nstring storage myText;\n```", "```\npragma solidity 0.5.0\ncontract EventsExample {\n    event LogUserAddress(address userAddress);\n    function registerUser() public {\n        emit LogUserAddress(msg.sender);\n    }\n}\n```", "```\nevent LogUserAddress(address);\n```", "```\nevent LogUserAddress(address indexed userAddress);\n```", "```\naddress public owner;\nmodifier onlyOwner() {\n    require(msg.sender == owner, ‘You must be the owner');\n    _;\n}\n\nfunction doSomething() public onlyOwner {}\n```", "```\nmodifier onlyOwner { ... }\n```", "```\nfunction example() public returns(uint256) { }\n```", "```\nstring public myStateString = 'Hi';\nfunction exampleOfView() public view returns(string memory) {\n    return myStateString;\n}\n```", "```\nfunction sumTwoNumbers(uint256 numberA, uint256 numberB) public pure returns(uint256) {\n    uint256 result = numberA + numberB;\n    return result;\n}\n```", "```\nfunction receiveDonation() public payable {}\n```", "```\nfunction () external payable {}\n```", "```\n# Events\nLogTransfer: event({from: indexed(address), to: indexed(address), amount: uint256})\n\n# Custom units\nunits: {\n    kg: \"kilogram\"\n}\n\n# Numbers\nmyPositiveInteger: uint256\nmyDecimalNumber: decimal\nmyInteger: int256\n\n# Addresses\nowner: address\n\n# Strings\nmyName: bytes32\nmyLongArticle: bytes[1000]\n\n# Booleans\nisThisTrue: bool\n\n# Mappings\ntodoList: map(uint256, bytes32)\n\n# Structs\nstruct Client:\n    name: bytes32\n    age: uint256\n\nmyClients: Client[100]\n\n# Timestamps\nmyBirthday: timestamp\nexpirationTime: timedelta\n\n# Wei value\netherToSpend: wei_value\n\n# Custom unit types\nmyKilo: uint256(kg)\n\n# Public functions\n@public\ndef subNumbers(first: int128, second: int128) -> int128:\n    return first - second\n\n# Payable functions\n@public\n@payable\ndef transferFunds(_from: address, to: address, amount: uint256):\n    log.LogTransfer(_from, to, amount)\n\n# Functions that update state\n@public\ndef updateBoolean(result: bool):\n    self.isThisTrue = result\n\n# Constructor\n@public\ndef __init__():\n    self.owner = msg.sender\n\n# Fallback function\n@public\n@payable\ndef __default__():\n    self.myBirthday = now\n\n```"]