- en: Bitcoin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In earlier chapters, we discussed blockchain, its components, and its structure
    in detail. We also discussed cryptography, the mechanics behind blockchain, and
    how blockchain is revolutionizing the network world. In this chapter, we will
    be discussing Bitcoin's origins.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss the introduction of Bitcoin, its history, and how it became
    one of the biggest revolutions of financial history in such a short space of time.
    We will also dive deep into other aspects of Bitcoin, such as its encoding system,
    transaction process, network nodes, and we'll briefly cover the mining of Bitcoins.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics that we will cover in this chapter include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The history of Bitcoin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why Bitcoin is volatile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keys and addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wallets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The history of Bitcoin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bitcoin is the first and, to date, the most successful application of blockchain
    technology. Bitcoins were introduced in 2008, in a paper on Bitcoin called Bitcoin:
    A Peer-to-Peer Electronic Cash System ([https://bitcoin.org/bitcoin.pdf](https://bitcoin.org/bitcoin.pdf)),
    which was authored by Satoshi Nakamoto.'
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin was the world's first decentralized cryptocurrency; its introduction
    heralded a revolution, and, in just about a decade, it has proved its strengths,
    with huge community backing and widespread adoption.
  prefs: []
  type: TYPE_NORMAL
- en: From 2010, certain global businesses have started to accept Bitcoins, with the
    exception of fiat currencies. A lot of currency exchanges were founded to let
    people exchange Bitcoin with fiat currency or with other cryptocurrencies. In
    September 2012, the Bitcoin Foundation was launched to accelerate the global growth
    of Bitcoin through standardization, protection, and promotion of the open source
    protocol.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of payment gateways such as BitPay came up to facilitate merchants in
    accepting Bitcoin as a payment method. The popular service WordPress started accepting
    Bitcoins in November 2012.
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin has been growing as a preferred payment option in global payments, especially
    business-to-business supply chain payments. In 2017, Bitcoin gained more legitimacy
    among financial companies and government organizations. For example, Russia legalized
    the use of cryptocurrencies, including Bitcoin, Norway's largest bank announced
    the inception of a Bitcoin account, and Japan passed a law to accept Bitcoin as
    a legal payment method. The world's largest free economic zone, Dubai, has started
    issuing licenses to firms for trading cryptocurrencies.
  prefs: []
  type: TYPE_NORMAL
- en: On August 1, 2017, Bitcoin split into two derivative digital currencies; one
    kept the legacy name Bitcoin, and the other with an 8 MB block size is known as
    **Bitcoin Cash **(**BCH**). After this, another hard fork happened on October
    24, 2017, with a new currency known as **Bitcoin Gold **(**BTG**). Then, again,
    on February 28, 2018, another hard fork happened, with the new currency known
    as **Bitcoin Private **(**BTCP**). There was another hard fork due in November
    2017, but this was canceled due to lack of consensus from the community.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is a single major concern of the promoters of Bitcoin, with regards
    to price volatility and slowing of transaction due to a large number of confirmations
    required to approve a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Why Bitcoin is volatile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we say Bitcoin is volatile, we mean the price of Bitcoin is volatile.
    The spot rate of Bitcoin at various exchanges changes every moment and, moreover,
    it functions 24/7\. Hence, any user or community member of Bitcoin is perturbed
    by the regularly changing price of Bitcoin. The following chart shows the price
    fluctuation of Bitcoin over the last financial year:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bfe86379-c0c1-477d-8a1e-6d229dfc3af8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The volatility of Bitcoin is the most discussed topic and has been a concern
    for investors, miners, and supporters of Bitcoin since the exchanges of Bitcoin
    came up. Some prime reasons for this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security breaches**: This has been a major issue in the price fluctuation
    of Bitcoin in the past; whenever news of security flaws at an exchange''s end
    comes up, the price of Bitcoin takes a hit, since this makes the investors start
    to doubt a certain exchange or the Bitcoin network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Legal issues**: There have been many doubts by global lawmakers who make
    predictions on Bitcoin''s price or even try to label Bitcoin as a non-legal entity.
    Various statements by the governments also hamper the price.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Psychological shift in adaption**: Bitcoin, although getting adopted and
    supported very quickly, is still a new currency and is very different from anything
    that came before; this leads people to be wary of adopting it. Plus, any negative
    press directly impacts the adoption of Bitcoin, which sometimes creates a downward
    spiral in price until any positive news surrounding Bitcoin surfaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding points are just some of the prime points that are causing a huge
    volatility in the Bitcoin market. There are various other factors that play a
    vital role in the price fixtures of Bitcoin from time to time.
  prefs: []
  type: TYPE_NORMAL
- en: Keys and addresses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bitcoin, being a purely digital currency, can be owned by people by keeping
    or storing it in files or in a **Bitcoin Wallet**. Addresses are used to transfer
    Bitcoins from one wallet to another, and keys are used to secure a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Keys in Bitcoins are used in pairs. One is a public key, and the other is a
    private key. The private key is to be kept securely, since it gives you control
    over a wallet. The keys are stored and controlled by a Bitcoin wallet.
  prefs: []
  type: TYPE_NORMAL
- en: Addresses are alphanumeric strings that are shared for sending or receiving
    Bitcoins from one wallet to another. The addresses are mostly encoded as **Base58Check**,
    which uses a Base58 number for address transcription. A Bitcoin address is also
    encoded in a QR code for quick transactions and sharing.
  prefs: []
  type: TYPE_NORMAL
- en: Currency units
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bitcoin has a widely used metric system of denominations that are used as units
    of Bitcoins. The smallest denomination of Bitcoin is called a **Satoshi**, after
    the name of its creator. The following table shows the units of Bitcoin, from
    its smallest unit, **Satoshi***,* to **Megabit**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3008068-b13c-4b62-9046-e647e22add22.png)'
  prefs: []
  type: TYPE_IMG
- en: Vanity addresses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are valid addresses that contain readable addresses. For example: `1BingoAuXyuSSoYm6rH7XFZc6Hcy98zRZz` is
    a valid address that contains a readable word (Bingo). Generating a vanity address
    needs creation and testing of millions of private keys, until the desired Base58
    letter address is found.'
  prefs: []
  type: TYPE_NORMAL
- en: The vanity addresses are used for fun and offer the same level of security as
    any other address. The search time for a vanity address increases as the desired
    pattern's length increases.
  prefs: []
  type: TYPE_NORMAL
- en: Base58 check encoding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This encoding takes the binary byte arrays and converts them into a human-readable
    format. This string is created by using a set of 58 alphanumeric characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of Base58, Base64 could also be used, but that would have made some
    characters look identical, which could have resulted in identical-looking data.
    The Base58 symbol chart used in Bitcoin is specific to Bitcoins and was used only
    by Bitcoins at the time of creation. The following table shows the value and the
    character corresponding to it in the Base58 encoding:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Value** | **Character** | **Value** | **Character** | **Value** | **Character**
    | **Value** | **Character** |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 1 | 1 | 2 | 2 | 3 | 3 | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 5 | 5 | 6 | 6 | 7 | 7 | 8 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | 9 | 9 | A | 10 | B | 11 | C |'
  prefs: []
  type: TYPE_TB
- en: '| 12 | D | 13 | E | 14 | F | 15 | G |'
  prefs: []
  type: TYPE_TB
- en: '| 16 | H | 17 | J | 18 | K | 19 | L |'
  prefs: []
  type: TYPE_TB
- en: '| 20 | M | 21 | N | 22 | P | 23 | Q |'
  prefs: []
  type: TYPE_TB
- en: '| 24 | R | 25 | S | 26 | T | 27 | U |'
  prefs: []
  type: TYPE_TB
- en: '| 28 | V | 29 | W | 30 | X | 31 | Y |'
  prefs: []
  type: TYPE_TB
- en: '| 32 | Z | 33 | a | 34 | b | 35 | c |'
  prefs: []
  type: TYPE_TB
- en: '| 36 | d | 37 | e | 38 | f | 39 | g |'
  prefs: []
  type: TYPE_TB
- en: '| 40 | h | 41 | i | 42 | j | 43 | k |'
  prefs: []
  type: TYPE_TB
- en: '| 44 | m | 45 | n | 46 | o | 47 | p |'
  prefs: []
  type: TYPE_TB
- en: '| 48 | q | 49 | r | 50 | s | 51 | t |'
  prefs: []
  type: TYPE_TB
- en: '| 52 | u | 53 | v | 54 | w | 55 | x |'
  prefs: []
  type: TYPE_TB
- en: '| 56 | y | 57 | z | - | - | - | - |'
  prefs: []
  type: TYPE_TB
- en: Transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the primary part of the Bitcoin system. Transactions are not encrypted,
    since Bitcoin is an open ledger. Any transaction can be publicly seen in the blockchain
    using any online blockchain explorer. Since addresses are encrypted and encouraged
    to be unique for every transaction, tracing a user becomes difficult.
  prefs: []
  type: TYPE_NORMAL
- en: Blocks in Bitcoin are made up of transactions that are viewed in a blockchain
    explorer; each block has the recent transactions that have happened. Every new
    block goes at the top of the blockchain. Each block has a height number, and the
    height of the next block is one greater than that of the previous block. The consensus
    process is commonly known as** confirmations** on the blockchain explorer.
  prefs: []
  type: TYPE_NORMAL
- en: Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various types of scripts available to manage the value transfer from
    one wallet to another. Some of the standard types of transactions are discussed
    here for a clear understanding of address and how transactions differ from one
    another.
  prefs: []
  type: TYPE_NORMAL
- en: Pay-to-Public-Key Hash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Pay-to-Public-Key Hash** (**P2PKH**) majority of the transactions on
    the Bitcoin network happen using this method. This is how the script looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the signature script looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: These strings are concatenated together to be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Pay-to-Script Hash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Pay-to-Script Hash** (**P2SH**) process is used to send transactions
    to a script hash. The addresses to pay using script hash have to start with 3\.
    This is how the script looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The signature looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As with P2PKH, these strings are also concatenated together to create the script
    signature.
  prefs: []
  type: TYPE_NORMAL
- en: Blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The transaction data is recorded in files, and these files are known as **blocks**.
    The blocks are stacked on top of one another, the most recent block being at the
    top. The following table depicts the structure of the block and the size of the
    elements in a block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b24efba8-3de6-4f39-baa8-47f1206a042b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Every block in the Bitcoin network has almost the same structure, and each
    of the blocks is chained to the most recent block. These are the fields of the
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Magic number**: This number is an identifier for the blockchain network.
    Its value is always constant at **0xD9B4BEF9**. It confirms the start of the block
    and verifies that the data is from the production network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Block size**: This signifies the size of the block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Block header**: A header contains the metadata of the block. It comprises
    multiple items of data, such as the Bitcoin version, the previous block hash,
    Merkle root, timestamp, mining difficulty, and nonce.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transaction counter**: It is the count of the transactions in the block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transaction list**: It stores the hash of the transactions in that block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Genesis block
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **genesis block** is the first block in the blockchain of Bitcoin. The
    creation of the genesis block marked the start of Bitcoin. It is the common ancestor
    of all the blocks in the blockchain. It is statically encoded within the Bitcoin
    client software and cannot be altered. Every node in the blockchain of Bitcoin
    acknowledges the genesis block''s hash and structure, the time of its creation,
    and the single transaction it contains. Following is the static code written in
    the Bitcoin source code, which describes the creation of the genesis block with
    static parameters `pszTimestamp`, `genesisOutputScript`, `nTime`, `nNonce`, `nBits`,
    and `nVersion`. Here is the snippet of this code in the Bitcoin repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Bitcoin network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The network is based on a **peer-to-peer** (**P2P**) protocol. Various nodes
    exchange transactions and blocks in this network. Every node in this Bitcoin network
    is treated equally. One advantage of this is that each node has the option of
    taking different roles, depending on each person's preference on how they want
    to participate in the Bitcoin network.
  prefs: []
  type: TYPE_NORMAL
- en: Types of nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we discuss the types of nodes, let''s discuss some of the primary functionalities
    that the nodes perform:'
  prefs: []
  type: TYPE_NORMAL
- en: Wallet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mining
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Majorly, there are two types of nodes in the Bitcoin network. We'll now go into
    some brief details on each.
  prefs: []
  type: TYPE_NORMAL
- en: Full node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A full node is made up of the wallet, miner, complete blockchain, and the routing
    network. These nodes maintain a complete up-to-date record of the blockchain.
    The full nodes verify every transaction on the blockchain network.
  prefs: []
  type: TYPE_NORMAL
- en: Lightweight nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lightweight nodes perform transactions on the blockchain. They do not contain
    the entire blockchain, instead just a subset of the blockchain. They verify the
    transactions using a system called **Simplified Payment Verification** (**SPV**).
    These nodes are also sometimes called **SPV nodes**.
  prefs: []
  type: TYPE_NORMAL
- en: Other nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various other nodes on the Bitcoin network, each of them performing
    a specific set of functionalities from the offered functionalities in the Bitcoin
    network. Some nodes contain only the blockchain and routing functionalities. Some
    nodes only work as miners and do not contain the wallet.
  prefs: []
  type: TYPE_NORMAL
- en: There are other nonstandard nodes called **pool protocol servers**. These Nodes
    work on alternative protocols such as the **stratum protocol**. The stratum protocol
    works on TCP sockets and JSON-RPC to communicate among the nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Network discovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **network discovery** in Bitcoin is required by any node when it is first
    started; a node has to discover other nodes in the network to participate in the
    blockchain. At the start of a node, it has to connect with at least one existing
    node in the network.
  prefs: []
  type: TYPE_NORMAL
- en: For this, the nodes establish a connection over the TCP protocol, over port
    `8333` or any other port if there is one. Next a handshake is performed by transmitting
    a certain message. That message is called the **version message**, which contain
    basic identification information.
  prefs: []
  type: TYPE_NORMAL
- en: Finding peers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Peers** are found in the network primarily by two methods. One is by querying
    DNS using **DNS seeds**, which are basically DNS servers that provide a list of
    the IPs of Bitcoin nodes. The other method is a list of IPs that Bitcoin core
    tries to connect to. Another method, which was used earlier, was seeding nodes
    through IRC, but that method was discontinued due to security concerns.'
  prefs: []
  type: TYPE_NORMAL
- en: DNS seeds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DNS seeds are servers which contains lists of IP addresses. These seeds are
    custom implementations of **Berkeley Internet Name Daemon** (**BIND**) and return
    random subsets collected by a Bitcoin node. Most of the Bitcoin clients use DNS
    seeds to connect while trying to establish to first set of connection. It is better
    to have various seeds present so that a better connection can be established by
    the client with the peers present over the network. In the Bitcoin core client,
    the option to use DNS seeds is controlled by the `-dnsseed` parameter, which is
    set to `1` by default. Here is how the DNS seeds are represented in the `chainparams.cpp`
    file of the Bitcoin source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding seeds are currently being used in Bitcoin core, for connecting
    with the seed client for establishing the connection with the first node.
  prefs: []
  type: TYPE_NORMAL
- en: Static IPs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are static lists of IP addresses. If the Bitcoin client is successfully
    able to connect with one IP address, it will be able to connect to other nodes
    by sharing the node's IPs. The command-line argument `-seednode` is used to connect
    to one node. After initial connection to the seed node, the client will discover
    new seeds using that seed itself.
  prefs: []
  type: TYPE_NORMAL
- en: Wallets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Bitcoin wallets** are an important function of the Bitcoin node; they contain
    private and/or public keys and Bitcoin addresses. There are various types of Bitcoin
    wallets and each one offers a varied level of security and functions, as required.'
  prefs: []
  type: TYPE_NORMAL
- en: There is a common misconception that an e-wallet can contain Bitcoins but a
    Bitcoin wallet will only contain keys. Each Bitcoin is recorded on the blockchain
    in the Bitcoin network. A Bitcoin wallet contains keys, and these keys authorize
    the use of Bitcoins that are associated with the keys. Users or wallet owners
    sign a transaction with the keys in the wallet, proving that they own the Bitcoins.
    In reality, these Bitcoins are stored on the blockchain in the form of **transaction
    outputs** that are denoted as `**txout**`.
  prefs: []
  type: TYPE_NORMAL
- en: Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Primarily, there are two types of wallets, which is based on whether the keys
    contained by the wallets are related to one another.
  prefs: []
  type: TYPE_NORMAL
- en: Deterministic wallet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a type of wallet in which all the keys are derived from a single master
    key, which is also known as a **seed**. All the keys in this type of wallet are
    linked with one another and can be easily generated again with the help of a seed.
    In some cases, a seed allows the creation of public key addresses without the
    knowledge of private keys. Mostly, seeds are serialized into human-readable words
    known as a mnemonic phrase.
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple key derivation methods used in deterministic wallets, which
    are described in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: Deterministic wallets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Deterministic wallets hold private keys that are derived from a common seed.
    A one-way hash function is used for this. In a deterministic wallet, this seed
    is essential to recover all the derived keys, and hence a single backup at the
    time of creation is sufficient. The following diagram depicts how a single seed
    is connected/related to all the keys generated by the wallet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5887791-c6ee-4408-87b4-fb5e44c55eee.png)'
  prefs: []
  type: TYPE_IMG
- en: HD wallets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'HD wallets are one of the most advanced form of deterministic wallets. They
    contain keys derived from a tree structure, such that the master key can have
    multiple level-1 keys that can further contain multiple level-2 keys of up to
    an infinite depth. The following diagram depicts how a seed generates master keys that
    further create multiple keys in a hierarchical formation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/987df2bd-298f-4a6b-b248-b1f7b6dd9ee2.png)'
  prefs: []
  type: TYPE_IMG
- en: Non-deterministic wallet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this type of wallet, each key is independently generated from a random number.
    The keys generated in this wallet are not related to one another. Due to the difficulty
    in maintaining multiple non-related keys, it is very important to create regular
    backups of these keys and protect them to prevent theft or loss.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the basics of Bitcoin, its history, and its pricing
    in comparison to fiat currency. We also discussed Bitcoin addresses, their encoding,
    their transaction types, and blocks. Finally, we discussed the Bitcoin network
    and the types of nodes the network contains.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have discussed the world's first cryptocurrency in this chapter,
    in the next chapter, we will discuss various other cryptocurrencies that were
    inspired by Bitcoin and are also known as **alternative currencies**. *W*e will
    discuss the alt-currencies, which are sometimes also called **Altcoins**.
  prefs: []
  type: TYPE_NORMAL
