- en: Blockchain-Based DNS Security Platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Domain Name System** (**DNS**) is mainly designed to resolve a host name
    query to an IP address. Internet users need to have domain names, such as [www.packtpub.com](http://www.packtpub.com),
    but the internet needs an IP address to route the request to the desired destination.
    This way, the DNS becomes the phonebook of the internet and allows everyone to
    use it globally; however, this also leaves a high possibility of it getting misused.
    In this chapter, we will learn about the DNS infrastructure, the core components,
    challenges with the existing system, and how blockchain can transform its current
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: DNS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS structure and hierarchy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS topology for large enterprises
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenges with the current DNS solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain-based DNS solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Labs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DNS is the heart of the internet. If the DNS is unavailable, each one of
    us will have a hard time finding resources on the internet. Being a massive phonebook
    of the internet, our entire online system relies heavily on the DNS. Because of
    DNS namespaces, none of us have to remember a list of IP addresses; instead, we
    just have to remember the names of web pages.
  prefs: []
  type: TYPE_NORMAL
- en: For IT and security professionals, it is important to understand the basic structure,
    function, and operations of it. The DNS is a hierarchical database with delegated
    authority. As per the scope of this chapter, we will be consider enterprise DNS
    deployments and its functions. There are two ways organizations can manage their
    DNS infrastructures—by allowing their **Internet Service Provider** (**ISP**)
    to manage it or by managing it internally. Any configuration mistakes or failure
    in the ISP network can turndown the organization's internet infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the growing number of internet users, the DNS became the backbone of organizations
    on the internet and hence it has given organizations a strong reason to control
    their own DNS. With an efficient DNS deployment, organizations can even achieve
    better email spam-filtering systems and optimized network topologies. Here are
    just a few ways in which the DNS plays a vital role in organizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Anti-spam**: Some DNS mechanisms, including **Sender Policy Framework** (**SPF**)
    and **DomainKeys Identified Mail** (**DKIM**), ensure only a predefined list of
    domains should be allowed to send emails on behalf of a specific organization.
    These mechanisms are effective if the DNS in the organization is working properly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Load sharing**: DNS services can optimize the server infrastructure by load
    sharing the traffic of highly utilized servers with other underutilized servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Privacy**: DNS services ensure the privacy of an organization''s namespace
    information by masking addresses with different names, depending on whether they
    are accessed from inside or outside of the network, helping to achieve stronger
    network security.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding DNS components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DNS is more than just a protocol, it consists of several independent entities
    working together to deliver a scalable and reliable domain name database. In its
    simplest form, there are three core components of the DNS—the **namespace**, **server**,
    and **resolver**.
  prefs: []
  type: TYPE_NORMAL
- en: Namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A namespace is a structure of the DNS database. It is represented in the form
    of an inverted tree with its root node at the top. Each node in the tree has a
    label and the root node has a null label. Take a look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1796249e-eca2-40e3-b3ca-404bfc65675a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A domain name is the sequence of labels starting from a node to the root, separated
    by dots. The namespace can have a maximum depth of 127 levels and domain names
    can be of a size not more than 255 characters in length:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8efac873-345c-47f6-946a-5d9ce4bf0355.png)'
  prefs: []
  type: TYPE_IMG
- en: Name servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Name servers are responsible for storing information about the namespace in
    the form of zones. There can be multiple name servers and ones that load a complete
    zone are said to be *authoritative* for the zone. Generally, there is more than
    one name server used as authoritative for a single zone, ensuring better redundancy
    and sharing the load:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main types of name servers—**authoritative servers** and **caching
    servers**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authoritative name server**: It provides responses to DNS queries. It is
    responsible for delivering original and definitive answers to each DNS query.
    There can be two types of authoritative name servers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Master server (primary name server)**: It stores the original copies of all
    zone records. An administrator can only make changes to the master server zone
    database.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Slave server (secondary name server)**: A slave server keeps a copy of master
    server files. It is used to share DNS server load and to improve DNS zone availability.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Caching name server**: It brings the name service closer to the user and
    improves overall name lookup performance. It also provides a comprehensive mechanism
    for providing private namespaces to local users, by allowing users to obtain all
    name mapping from local caching.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The name resolver helps the name server to find data in the namespace. The name
    resolver is required to find out the name and IP address of the name servers for
    the root zone. The root name servers store information about top-level zones and
    direct servers in whom to contact for all **top-level domains** (**TLDs**). The
    resolver basically breaks the name into its labels from right to left. The first
    component, the TLD, is queried using a root server to obtain the designated authoritative
    server.
  prefs: []
  type: TYPE_NORMAL
- en: DNS structure and hierarchy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to the internet's DNS infrastructure, organizations also deploy their
    internal DNS infrastructures. To deploy an internal DNS infrastructure, organizations
    can select any domain hierarchy; however, once connected to the internet, they
    have to follow the common DNS framework . Let's understand the name server hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: Root name server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With consistent namespaces across the internet, the root name server directly
    responds to requests for records in the root zone and answers other requests by
    returning a list of the authoritative name servers for the appropriate TLD.
  prefs: []
  type: TYPE_NORMAL
- en: In order to modify the root zone, a zone file has first to be published over
    the internet. The root zone file is published on 13 servers from *A* to *M* across
    the internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The root zone contains the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Generic top-level domains such as `.com`, `.net`, and `.org`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Globally recognized TLDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Country code TLDs,  two-letter codes for each country such as `.in` for India
    or `.no` for Norway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Globally recognized TLDs, generally similar to country code TLD names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The root zone contains the numeric addresses of name servers that serve the
    TLD contents and the root server answers with these addresses when asked by a
    TLD.
  prefs: []
  type: TYPE_NORMAL
- en: When organizations get a new domain name, the registrar probably configures
    DNS records on their behalf and provides them with a **name server** (**NS**).
    Organizations need to have a name server to tell the internet's DNS directory
    the IP addresses of their web servers and corresponding services.
  prefs: []
  type: TYPE_NORMAL
- en: Current TLD structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TLD is one of the domains at the highest level of the DNS hierarchy. TLDs
    are installed in the root zone of the namespace. The domains in the last part
    of the system have to be recognized with fully qualified domain names. The **Internet
    Corporation for Assigned Names and Numbers** (**ICANN**) ensures that TLDs are
    managed by delegated organizations. The **Internet Assigned Numbers Authority**
    (**IANA**) is operated by ICANN and is responsible for managing the DNS root zone.
  prefs: []
  type: TYPE_NORMAL
- en: 'IANA is responsible for managing the following TLDs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ccTLD**—country-code TLDs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**gTLD**—generic TLDs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.arpa**—infrastructure TLDs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This hierarchical diagram explains the existing TLD structure:'
  prefs: []
  type: TYPE_NORMAL
- en: <q class="calibre60 pcalibre5 pcalibre4">![](img/e61f757e-314a-434a-9717-ae775c1ae2b3.png)</q>
  prefs: []
  type: TYPE_NORMAL
- en: Registries, registrars, and registrants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The DNS stores a massive database of domain names. In order to perform registration,
    there are three entities working together—**registry**, **registrar**, and **registrant**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Registry**: An organization maintaining the database of namespaces that has
    edit rights to that database. The registry runs the authoritative NS for the namespace
    and manages the TLD names. Their role is in creating domain name extensions, setting
    up rules for the domain names, and working with registrars to provide domain names
    to the public. For example, **Verisign** manages the registration of `.com` domain
    names and their DNS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Registrar**: An organization that reserves domain names and is accredited
    to sell domain names to the public. This registrar must be accredited by a **generic
    top-level-domain** (**gTLD**) registry or a **country code top-level domain**
    (**ccTLD**) registry. A registrar works under the guidelines provided by domain
    name registries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only a designated registrar can modify or delete information about domain names
    in the central registry database. End users buy domains directly from the registrar
    and the end user has complete rights to switch registrar, invoking a domain transfer
    process between registrars. Some of the most popular registrars are GoDaddy, HostGator,
    BigRock, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: '**Registrant: **This is simply the end user who holds the rights to a domain
    name. As a domain name registrant, every person has certain rights and responsibilities,
    including access to information from the user''s registrar regarding processes
    for registering, managing, transferring, renewing, and restoring the domain name
    registration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a diagram that shows the working of all three entities together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da5bdbc4-51a2-48d2-9c76-f74ec1193aee.png)'
  prefs: []
  type: TYPE_IMG
- en: DNS records
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DNS records are mapping files that associate with DNS server whichever IP addresses
    each domain is associated with, and they handle requests sent to each domain.
    Various strings of letters are used as components that resemble the actions of
    the DNS server and these strings of commands are called DNS syntaxes. These syntaxes
    are A, AAAA, **Canonical Name** (**CNAME**), **mail exchanger** (**MX**), **pointer**
    (**PTR**), **name server** (**NS**), **Start of Authority** (**SOA**), **service**
    (**SRV**) **record** , **text** (**TXT**) and **Name Authority Pointer** (**NAPTR**).
    Let's explore some of these DNS records in detail.
  prefs: []
  type: TYPE_NORMAL
- en: '** SOA**: An SOA record notes the beginning of a zone file. It consists of
    the name of the zone, a technical point of contact, its NS, a serial number, and
    a timeout value:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/84f0e23e-5924-4f22-b2f4-7a461f3d46d8.png)'
  prefs: []
  type: TYPE_IMG
- en: '**NS**: The NS records identify the authorized name servers for the zone. The
    NS also delegates subdomains to other organizations on zone files. In the previous
    example, we can clearly see the list of NSes for [www.google.com](http://www.google.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Records**: Address records establish the forward binding from names to addresses.
    In this example, we have an IP address mapped with the domain [www.google.com](http://www.google.com):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3cf82eee-e946-4d76-af5c-5f89c41705f2.png)'
  prefs: []
  type: TYPE_IMG
- en: '**MX records**: These records identify the servers that can exchange emails.
    A priority is always associated with each of the records, so the user can choose
    the primary and backup mail servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TXT records**: These records deliver a method to expand the information provided
    through DNS. This text record stores information about the SPF that can identify
    the authorized server to send email on behalf of your organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CNAME**: CNAMEs are essentially domain and subdomain text aliases to bind
    traffic. They indicate that the **Secure File Transfer Protocol** (**SFTP**) server
    is on the same system as the mail server. CNAME plays an important role, particularly
    when the server is not under organizational control such as a hosted or managed
    web server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PTR records**: These records provide the reverse binding from addresses to
    names. PTR records should exactly match the forward maps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS topology for large enterprise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For IT professionals, understanding DNS queries and the types of name server
    takes us most of the way to organizational DNS best practices:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Network topology**: Redundancy plays a critical role in domain infrastructure.
    Even if one server fails, another takes control to keep the service up and running.
    **BIND** (widely used DNS software) supports high redundancy through a master-slave
    relationship. The master NS updates the change in mapping to one or more slave
    servers through the zone transfer mechanism.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration files**: BIND''s configuration is stored in a file called `named.conf`.
    This `named.conf` file helps the server to recognize the authoritative and/or
    caching server and whether it is the master or slave for any specific zone. The
    file points to zone files that contain the real mapping database. It contains
    lines or records that define name-to-address and address-to-name mapping for a
    specific domain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the changing technology and network transformation, DNS has had to be
    upgraded over time. There are bodies such as **DNS Operations, Analysis, and Research
    Center** (**DNS-OARC**) and **Internet Systems Consortium** (**ISC**). In the
    following diagram, we can see a standard DNS architecture built to optimize the
    DNS infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94cb3078-850f-4cbb-b18b-0193a6e6acd3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding standard DNS architecture can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Master DNS zone:** The master zone contains a read/write copy of zone data.
    Only one master zone is allowed in a network. All the DNS records have to be written
    in the master zone manually or automatically. This data is then stored in a standard
    text file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Slave DNS zone**: The slave zone is a read-only copy of the zone data. Usually,
    it is a copied version of master zones. If an attempt is made to change the DNS
    record on the secondary zone, it can redirect to another zone with read/write
    access. The slave DNS zone serves the purpose of backing up the DNS zone file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Aggregate Caching Forwarder (ACF)**: It basically forwards the requests instead
    of processing them. When the server sends a response, it passes it back to its
    own client. In some situations, the resolver can also be a forwarder or caching
    forwarder. It may or may not cache the data; however, it is useful for systems
    such as **small office home office** (**SOHO**) gateways that want to provide
    DNS data to DHCP clients that don''t have a predefined address for the DNS server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenges with current DNS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Today, DNS has become the backbone of the internet and organization''s networks.
    The DNS is mission-critical infrastructure that no organization can function without.
    However, despite growing investment in network and information security, attackers
    still manage to invade the network, and the DNS remains a vulnerable component
    in the network infrastructure that is often used as an attack vector. Firewalls
    leave port `53` open and never look inside each query. Let''s look at one of the
    most widely used DNS-based attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/381e5baa-5fa8-4b20-b5d2-5f3d6cdcdcb7.png)'
  prefs: []
  type: TYPE_IMG
- en: DNS spoofing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a DNS server''s records are altered to redirect the traffic to the attacker''s
    server, the DNS gets hijacked. This redirection of traffic allows the attacker
    to spread malware across the network. DNS spoofing can be carried out in one of
    following three ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DNS cache poisoning**: An attacker can take advantage of cached DNS records
    and can then perform spoofing by injecting a forged DNS entry into the DNS server.
    As a result, all users will now be using that forged DNS entry until the time
    the DNS cache expires.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compromising a DNS server**: A DNS server is the heart of the entire DNS
    infrastructure. An attacker can use several attack vectors to compromise a DNS
    server and can provide the IP address of a malicious web server against each legitimate
    DNS query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Man-in-the-middle (MITM) attack**: In this type of attack, a threat actor
    keeps listening to conversations between clients and a DNS server. After gathering
    information and sequence parameters, it starts spoofing the client by pretending
    to be the actual DNS server and provides the IP addresses of malicious websites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain-based DNS solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blockchain technology has the capabilities to transform several industries and
    in this chapter, we are going to use it for managing a name server to overcome
    some of the most critical DNS challenges. **DNSChain** is one of the most active
    projects to transform the DNS framework and protect it from spoofing challenges.
  prefs: []
  type: TYPE_NORMAL
- en: DNSChain is a blockchain-based DNS software suite that replaces X.509 **public
    key infrastructure** (**PKI**) and delivers MITM proofs of authentication. It
    allows internet users to set a public DNSChain server for DNS queries and access
    that server with domains ending in `.bit`.
  prefs: []
  type: TYPE_NORMAL
- en: X.509 PKI replacement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: X.509 is a standard framework that defines the format of PKI to identify users
    and entities over the internet. It helps internet users to know whether the connection
    to a specific website is secure or not. DNSChain has the capability to provide
    a scalable and decentralized replacement that doesn't depend on third parties.
  prefs: []
  type: TYPE_NORMAL
- en: MITM-proof DNS infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This uses a public key pinning technique to get rid of the MITM attack problem.
    Public key pinning specifies two **pin-sha256** values; that is, it pins two public
    keys (one is the pin of any public key in the current certificate chain and the
    other is the pin of any public key not in the current certificate chain):'
  prefs: []
  type: TYPE_NORMAL
- en: It works in parallel with existing DNS servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Websites and individuals store their public key in the blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The keys are shared over the DNSChain software framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lab on Ethereum-based secure DNS infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DNS infrastructure has been the most targeted asset of organizations. Traditional
    DNS is vulnerable to several sophisticated threats. The current DNS system is
    hierarchical and the system root server becomes the high-value attack vector.
    Since the entire infrastructure is centralized, even a slight failure can lead
    to whole system failure. A group of engineers—Greg Siepak and Andrea Devers have
    developed an Ethereum-based DNS platform to connect  client and name server without
    any involvement of third-party in between. The project is named **DNSChain** and 
    hosted over GitHub at the link [https://github.com/okTurtles/dnschain](https://github.com/okTurtles/dnschain).
  prefs: []
  type: TYPE_NORMAL
- en: Lab preparation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configure the DNSChain server in Ubuntu. . It will run the PowerDNS Recursor,
    issuing DNS queries for `.com` and `.net` domains as you would expect, but consulting
    the local Namecoin blockchain to resolve `.bit` domains.
  prefs: []
  type: TYPE_NORMAL
- en: We will start with a fresh copy of Ubuntu LTS. In our lab, we will deploy this
    Ubuntu system over Amazon's AWS Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the examples here might use expired domains, so it's best to test domain
    resolution on a domain that you personally registered on Namecoin's blockchain.
    Start with a fresh copy of Ubuntu 16.04 LTS. I'm using Ubuntu 16.04 LTS on Amazon
    Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the following commands to prepare the infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Namecoin blockchain installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will begin with the installation of the Namecoin blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation:** We need to install the `namecoin` blockchain in the local
    system:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To configure `namecoin`, follow the quick start guide. Rather than creating
    multiple users, this tutorial will use the current user.
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuration**: Once the installation is completed for Namecoin, we need
    to configure the blockchain with the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We will go ahead and run `namecoind` to get things started. Lets check progress
    in downloading the blockchain using `namecoind getinfo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Ubuntu, instead of `systemd`, we use `upstart`. We need to write this file
    into `/etc/init/namecoind.conf`, remembering to substitute your username; in my
    case it''s `ubuntu`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b53c2047-d4e7-44c3-8e92-67492a329160.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have to use `namecoind stop` to stop the process. After this, we need
    to issue the `sudo initctl reload-configuration` command, then restart using `sudo
    shutdown -r` now. Finally, `namecoin` gets restarted automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '**Verification: **As mentioned, `namecoind` is going to begin downloading the
    blockchain. We won''t be able to look up domain names from the blockchain until
    it has made some progress. Later, when we revisit Namecoin, we can try the following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the output, we can clearly see the details about Namecoin and details on
    the difficulty level, connections, timeoffset, blocks created, balance, and even
    any errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/296a76b3-e87e-4cd7-a6ad-18d2f372a57b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Furthermore, we will use the following command to get details over Namecoin
    transaction ID and address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2d819a1-935e-4a40-a200-b5a12f9099ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, we can also check the RPC interface (use the `rpcuser` and `rpcpassword`
    from `namecoin.conf`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0a4ef2e-3aec-4884-b463-e6dc29b06be3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will use the `curl` command to get web information about content hosted
    over `http://127.0.0.1:8336`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the following output of the `curl` command against content hosted
    over the local system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5819f24-3c52-4041-a1de-fee2bb72d799.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, we can use the `curl` command extract headers that an HTTP site
    sends to us. The following command stores the headers that an HTTP site send to
    us. This command write the received protocol headers to the specified file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of running the preceding command can be shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e699bf09-6f57-4d72-8fc1-92282cbb605f.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing PowerDNS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**PowerDNS** is a premier supplier of open source DNS software, services, and
    support. PowerDNS is a DNS server, written in C++ and licensed under the GNU **General
    Public License** (**GPL**). It runs on most Unix derivatives. It features a large
    number of different backends ranging from simple BIND to relational databases.
    We  will use the following command to install PowerDNS on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of running the preceding command can be shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0293422a-e9d5-4a1f-93ea-0f370ea2e8bb.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Configuration**: We need to configure PowerDNS in our local environment. 
    We will order PowerDNS to send requests for `.bit`, `.eth`, and `.p2p` domain
    names to port `5333`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This configuration is specified in the `/etc/powerdns/recursor.conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, we can see the extraction of queried forward zone
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82ee5131-0262-4d6c-bccf-f0e5879f681c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can find the forward zone information hosted on `127.0.0.1:5333` in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9040f7dd-de44-4eda-a4a8-ba49244713a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice in particular our forward-zones declaration. Make sure you restart PowerDNS
    at this point using `sudo service pdns-recursor restart`. Then, confirm that PowerDNS
    can correctly resolve conventional domain names before we move on:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Verification: ** To verify the forward zone PowerDNS installation, we need
    to run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We will find the following output  with an IP address found for `packtpub.com`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c806aecb-fbac-4194-852c-d9d3596ff193.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing DNSChain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we will update `apt-get` and install some prerequisites. Note that while
    we install `npm` (that requires Node.js installation), `nodejs-legacy` is needed
    to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation of dependencies**: In this step, we will install all the dependable
    scripts and commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Installation of DNSChain:** The installation of DNSChain can now be executed
    with the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following output, we can find the result includes the extraction of
    registry file `coffee-script-1.12.7.tgz`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3274913a-9953-4666-b8a7-67ea4c7aadc5.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Configuration**: We need to configure DNSChain to bind it to port `5333`,
    but you can use any high port number as long as it matches the port number that
    PowerDNS is handing off requests to. This was specified earlier in `/etc/powerdns/recursor.conf`. Another
    great feature of DNSChain is that we can expose the lookup results through HTTP.
    We''ll specify port `8000` for this, but you can use any high number port that''s
    open. DNSChain can be set up to be accessed by the web server, through port `8000`
    for example. For this example, write into `/home/ubuntu/.dnschain/dnschain.conf`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/76331db6-c679-49be-a056-bb54ccd4a48e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to make another `upstart` file for DNSChain, and write this file into `/etc/init/dnschain.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/063d6e31-b8a5-42d6-9c2d-776183c151c2.png)'
  prefs: []
  type: TYPE_IMG
- en: We will now run `sudo initctl reload-configuration`, then restart the machine.
    Finally, let's test it by trying to resolve a `.bit` domain name.
  prefs: []
  type: TYPE_NORMAL
- en: You may have to wait until a lot of the blockchain is loaded before it works.
  prefs: []
  type: TYPE_NORMAL
- en: '**Verification**: Finally, we can verify the DNSChain by performing lookup
    for the `hello.bit` address. In the output result, we can find the result with
    the desired IP address of server `51.101.1.6`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec3d3bfd-bae4-439d-b772-c7711b5e48a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the DNS framework and its core components.
    We understood that any compromised DNS server can result in massive damage to
    infrastructure and how the blockchain can solve some of these critical challenges
    with its fundamental advantages.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The DNS is the backbone of the internet and also one of the most complex protocol
    frameworks. With every new attack vector, the DNS prepares itself to be stronger
    and more comprehensive. Readers can look up the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a DNS tunneling attack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can blockchain be used to deploy an entire DNS infrastructure and, if so, how?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Read the following articles to find out more about DNS-OARC and ISC:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Introduction to DNS-OARC* at [https://www.dns-oarc.net/](https://www.dns-oarc.net/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*ISC* at [http://www.isc.org](http://www.isc.org).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
