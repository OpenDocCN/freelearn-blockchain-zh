- en: Cryptography and Mechanics Behind Blockchain
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use of blockchain hinges on cryptography. Numeric cryptography can be regarded
    as a recent invention, with the ciphers of the past relying on exchanging words
    for words and letters for letters. As we'll see, modern cryptography is a very
    powerful tool for securing communications, and, importantly for our topic, determining
    the provenance of digital signatures and the authenticity of digital assets.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following topics will be covered:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Principles of security
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Historical perspective – classical cryptography
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptographic signatures
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hashing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Principles of security
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cryptography safeguards the three principles of information security, which
    can be remembered by the mnemonic device **Central Intelligence Agency** (**CIA**):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '**Confidentiality**: Ensures that information is shared with the appropriate
    parties and that sensitive information (for example, medical information, some
    financial data) is shared exclusively with the consent of appropriate parties.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integ****rity**: Ensures that only authorized parties can change data and
    (depending on the application) that the changes made do not threaten the accuracy
    or authenticity of the data. This principle is arguably the most relevant to blockchains
    in general, and especially the public blockchains.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Availability**: Ensures authorized users (for example, holders of tokens)
    have the use of data or resources when they need or want them. The distributed
    and decentralized nature of blockchain helps with this greatly.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The relevance to blockchain and cryptocurrency is immediately evident: if,
    for instance, a blockchain did not provide integrity, there would be no certainty
    as to whether a user had the funds or tokens they were attempting to spend. For
    the typical application of blockchain, in which the chain may hold the chain of
    title to real estate or securities, data integrity is very important indeed. In
    this chapter, we will discuss the relevance of these principles to blockchain
    and how things such as integrity are assured by cryptography.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Historical perspective – classical cryptography
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Cryptography* is the term for any method or technique used to secure information
    or communication, and specifically for the study of methods and protocols for
    secure communication. In the past, cryptography was used in reference to encryption,
    a term that refers to techniques used to encode information.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: At its most basic, encryption might take the form of a substitution cipher,
    in which the letters or words in a message are substituted for others, based on
    a code shared in advance between the parties. The classic example is that of the
    Caesar Cipher, in which individual letters are indexed to their place in the alphabet
    and shifted forward a given number of characters. For example, the letter *A*
    might become the letter *N, *with a key of 13.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: This specific form of the Caesar Cipher is known as **ROT****13**, and it’s
    likely the only substitution cipher that continues to see any regular use—it provides
    a user with a trivially reversible way of hiding expletives or the solutions to
    puzzles on static websites (the same, of course, could be implemented very simply
    in JavaScript).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这种具体形式的凯撒密码被称为 **ROT****13**，它可能是唯一继续定期使用的替换密码——它为用户提供了一种轻松可逆的方式来隐藏粗言秽语或静态网站上的谜题解答（当然，同样的功能也可以非常简单地用
    JavaScript 实现）。
- en: 'This very simple example introduces two important concepts. The first is an
    algorithm, which is a formal description of a specific computation with predictable,
    deterministic results. Take each character in the message and shift it forward
    by *n* positions in the alphabet. The second is a key: the *n* in that algorithm
    is 13\. The key in this instance is a pre-shared secret, a code that the two (or
    more) parties have agreed to, but, as we’ll see, that is not the only kind of
    key.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个非常简单的例子介绍了两个重要概念。第一个是算法，它是对具有可预测、确定性结果的特定计算的正式描述。取消息中的每个字符，并在字母表中向前移动 *n*
    个位置。第二个是密钥：在这个算法中 *n* 是 13。在这种情况下，密钥是一个预共享的秘密，一种双方（或更多）已经同意的代码，但正如我们将看到的，这并不是唯一的密钥类型。
- en: Types of cryptography
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码学类型
- en: Cryptography is principally divided into symmetric and asymmetric encryption.
    Symmetric encryption refers to encryption in which the key is either pre-shared
    or negotiated. AES, DES, and Blowfish are examples of algorithms used in symmetric
    encryption.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学主要分为对称加密和非对称加密。对称加密是指密钥是预共享或协商的加密方式。AES、DES 和 Blowfish 是对称加密中使用的算法的示例。
- en: Symmetric cryptography
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对称密码学
- en: Most savvy computer users are familiar with WEP, WPA, or WPA2, which are security
    protocols employed in Wi-Fi connections. These protocols exist to prevent the
    interception and manipulation of data transmitted over wireless connections (or,
    phrased differently, to provide confidentiality and integrity to wireless users).
    Routers now often come with the wireless password printed on them, and this is
    a very literal example of a pre-shared key.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数精通计算机的用户都熟悉 WEP、WPA 或 WPA2，这些是 Wi-Fi 连接中使用的安全协议。这些协议存在的目的是防止无线连接上传输的数据被截取和篡改（或者换句话说，为无线用户提供保密性和完整性）。现在的路由器通常都会在上面打印无线密码，这是一个非常直接的预共享密钥的例子。
- en: The algorithms used in symmetric encryption are often very fast, and the amount
    of computational power needed to generate a new key (or encrypt/decrypt data with
    it) is relatively limited in comparison to asymmetric encryption.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对称加密中使用的算法通常非常快速，并且与非对称加密相比，生成新密钥（或使用它加密/解密数据）所需的计算能力相对较少。
- en: Asymmetric (public-key) cryptography
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非对称（公钥）密码学
- en: 'Asymmetric cryptography (also called public-key cryptography) employs two keys:
    a public key, which can be shared widely, and a private key, which remains secret.
    The public key is used to encrypt data for transmission to the holder of the private
    key. The private key is then used for decryption.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 非对称密码学（也称为公钥密码学）采用两个密钥：一个公钥，可以广泛共享，一个私钥，保持秘密。公钥用于加密传输到私钥持有者的数据。然后使用私钥进行解密。
- en: The development of public-key cryptography enabled things such as e-commerce
    internet banking to grow and supplement very large segments of the economy. It
    allowed email to have some level of confidentiality, and it made financial statements
    available via web portals. It also made electronic transmissions of tax returns
    possible, and it made it possible for us to share our most intimate secrets in
    confidence with, maybe, perfect strangers—you might say that it brought the whole
    world closer together.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥密码学的发展使得诸如电子商务网上银行等事物得以发展，并补充了经济的很大一部分。它使电子邮件具有一定的保密性，并使财务报表可通过网络门户获得。它还使电子税务申报成为可能，并使我们能够信任地与也许是完全陌生的人分享我们最私密的秘密——你可能会说它使整个世界更加紧密地联系在一起。
- en: As the public key does not need to be held in confidence, it allows for things
    such as certificate authorities and PGP key servers—publishes the key used for
    encryption, and only the holder of the private key will be able to decrypt data
    encrypted with that published key. A user could even publish the encrypted text,
    and that approach would enjoy some anonymity—putting the encrypted text in a newsgroup,
    an email mailing list, or a group on social media would cause it to be received
    by numerous people, with any eavesdropper unable to determine the intended recipient.
    This approach would also be interesting in the blockchain world—thousands or millions
    of nodes mirroring a cipher text without a known recipient, perhaps forever, irrevocably,
    and with absolute deniability on the part of the recipient.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于公钥不需要保密，它允许诸如证书颁发机构和 PGP 密钥服务器之类的东西存在——发布用于加密的密钥，只有持有私钥的人才能解密使用该发布密钥加密的数据。用户甚至可以发布加密文本，这种方法会享有一定程度的匿名性——将加密文本放在新闻组、电子邮件邮件列表或社交媒体上的群组中会使其被众多人接收，而任何窃听者都无法确定预期的接收者。这种方法在区块链世界中也会很有趣——成千上万个节点镜像着一个没有已知接收者的密文，也许永远，无法撤销，而且接收者绝对否认。
- en: Public-key cryptography is more computationally expensive than symmetric cryptography,
    partly due to the enormous key sizes in use. The NSA currently requires a key
    size of 3,072 bits or greater in commercial applications for key establishment,
    which is the principal use of public-key cryptography. By comparison, 128-bit
    encryption is typically regarded as adequate for most applications of cryptography,
    with 256-bit being the NSA standard for confidentiality.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥密码学比对称密码学的计算成本更高，部分原因是使用的密钥大小巨大。美国国家安全局目前要求商业应用中密钥大小为 3,072 位或更大，这是公钥密码学的主要用途。相比之下，128
    位加密通常被认为对大多数加密应用足够了，256 位是美国国家安全局对保密性的标准。
- en: For the most part, although it is possible to use the public-key algorithm alone,
    the most common use of public-key cryptography is to negotiate a symmetric key
    for the remainder of the session. The symmetric key in most implementations is
    not transmitted, and, as a consequence, if an attacker were to seize one or both
    of the private keys, they would be unable to access the actual communications.
    This property is known as forward secrecy.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，虽然可以仅使用公钥算法，但公钥密码学最常见的用途是为其余会话协商对称密钥。在大多数实现中，对称密钥不会被传输，因此，如果攻击者夺取了一个或两个私钥，他们将无法访问实际的通信内容。这个特性被称为前向保密性。
- en: Some protocols, such as SSH, which is used to remotely access computers, are
    very aggressive. Over the course of a session, SSH will change the key at regular
    intervals. SSH also illustrates the essential property of public-key cryptography—it’s
    possible to put your public key on the remote server for authentication, without
    any inherent confidentiality issue.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有些协议，比如 SSH，用于远程访问计算机，非常积极主动。在一个会话期间，SSH 会定期更改密钥。SSH 还展示了公钥密码学的基本属性——可以将您的公钥放在远程服务器上进行身份验证，而不会有任何固有的保密问题。
- en: Most cryptography in use today is not unbreakable, given extremely large (or
    infinite) computing resources. However, an algorithm suited to the task of protecting
    data where confidentiality is required is said to be computationally improbable—that
    is, computing resources to crack the encryption do not exist, and are not expected
    to exist in the near future.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如今大多数使用的加密技术都不是不可破解的，只要有极大（或无限）的计算资源。然而，适用于保护需要保密性的数据的算法被认为是计算上不太可能的——也就是说，破解加密所需的计算资源不存在，并且在不久的将来也不会存在。
- en: Signatures
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 签名
- en: It is notable that, although when encrypting data to send it to a given recipient,
    the private key is used for decryption, it is generally possible to do the reverse.
    For cryptographic signing, private keys are used to generate a signature that
    can be decrypted (verified) with the public key published for a given user. This
    inverted use of public-key cryptography allows for users to publish a message
    in the clear with a high degree of certainty that the signer is the one who wrote
    it. This again invokes the concept of integrity—if signed by the user’s private
    key, a message (or transaction) can be assumed to be authentic. Typically, where
    Blockchains are concerned, when a user wishes to transfer tokens, they sign the
    transaction with the private key of the wallet. The user then broadcasts that
    transaction.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: It is now also fairly common to have multisignature wallets, and, in that instance,
    a transaction is most often signed by multiple users and then broadcast, either
    in the web interface of a hosted wallet service, or in a local client. This is
    a fairly common use case with software projects with distributed teams.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Hashing
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Distinct from the concept of encryption (and present in many mechanisms used
    in cryptography, such as cryptographic signatures and authentication) is hashing,
    which refers to a deterministic algorithm used to map data to a fixed-size string.
    Aside from determinism, cryptographic hashing algorithms must exhibit several
    other characteristics, which will be covered in this section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: As we'll see in the following section, a hash function must be difficult to
    reverse. Most readers who got through high school algebra will remember being
    tormented with factoring. Multiplication is an operation that is easy to complete,
    but difficult to reverse—it takes substantially more effort to find the common
    factors of a large number as opposed to creating that number as a product of multiplication.
    This simple example actually enjoys practical application. Suitably large numbers
    that are the product of the multiplication of two prime numbers—called **semiprimes**
    or (less often) **biprimes**—are employed in RSA, a widely used public-key cryptography
    algorithm.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: RSA is the gold standard in public key cryptography, enabling things such as
    SSH, SSL, and systems for encrypting email such as PGP. Building on operations
    such as this — easy to do one way and very hard to do in the other—is what makes
    cryptography so robust.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: The avalanche effect
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A desirable feature of robust hashing algorithms is known as **the avalanche
    effect**. A small change in the input should result in a dramatic change in the
    output. Take for instance the following three examples using output redirection
    and the GNU `md5sum` utility present in most distributions of Linux:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Changing a word to an entirely different word has the same result as changing
    a single letter: each hash is entirely different. This is a very desirable property
    in the case of, say, password hashing. A malicious hacker cannot get it close
    enough and then try permutations of that similar password. We will see in the
    following sections, however, that hashes are not perfect.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Collisions
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An ideal hash function is free of **collisions**. Collisions are instances in
    which two inputs result in the same output. Collisions weaken a hashing algorithm,
    as it is possible to get the expected result with the wrong input. As hashing
    algorithms are used in the digital signatures of root certificates, password storage,
    and blockchain signing, a hash function having many collisions could allow a malicious
    hacker to retrieve passwords from password hashes that could be used to access
    other accounts. A weak hashing algorithm, rife with collisions, could aid in a
    man-in-the-middle attack, allowing an attacker to spoof a **Secure Sockets Layer**
    (**SSL**) certificate perfectly.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: MD5, the algorithm used in the above example, is regarded as inadequate for
    cryptographic hashing. Blockchains thankfully largely use more secure hash functions,
    such as SHA-256 and RIPEMD-160.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Hashing a block
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the PoW systems, new entries to a blockchain require hashes to be computed.
    In Bitcoin, miners must compute two SHA-256 hashes on the current transactions
    in the block—and included therein is the hash of the previous block.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'This is pretty straightforward for a hashing algorithm. Let’s briefly reiterate:
    an ideal hash function takes the expected input and then outputs a unique hash.
    It is deterministic. There is only one possible output and it is impossible (or
    computationally improbable) to achieve that output with a different input. These
    properties ensure that miners can process a block and that each miner can return
    the same result. It is through hashing that Blockchains attain two properties
    that are crucial to their adoption and current popularity: decentralization and
    immutability.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Linking the current block to the previous block and the subsequent block is
    in part what makes the blockchain an ever-growing linked list of transactions
    (providing it with the property of immutability), and the deterministic nature
    of the hash algorithm makes it possible for each node to get the same result without
    issue (providing it with decentralization).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Hashing outside PoW
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aside from proof of work, PoS and DPoS also make use of hashes, and largely
    for the same purpose. Plenty of discussion has been dedicated to whether PoS will
    replace PoW and prevent us from running thousands of computers doing megawatts'
    worth of tedious hashing with enormous carbon footprints.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'PoW systems seem to persist in spite of the power consumption and environmental
    impact of reasonably difficult hashing operations. Arguably, the reason for this
    is the very simple economics: miners have an incentive to validate transactions
    by computing hashes because they receive a share of new tokens minted into the
    system. More complex tokenomics schemes for proof of stake or distributed proof
    of stake often fail the smell test.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管PoW系统的功耗和环境影响相当大，但似乎仍然存在。可以说，其原因是非常简单的经济学原理：矿工有动机通过计算哈希来验证交易，因为他们可以获得新产生的代币中的一部分。对于权益证明或分布式权益证明的更复杂的代币经济方案，通常不经得起检验。
- en: Take, for example, the idea of a stock photo blockchain project—we’ll call it
    Cannistercoin. Users contribute photos to a stock photo website, and in return
    they receive tokens. The token is also used to buy stock photos from the website,
    and this token is traded on exchanges.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，股票照片区块链项目的想法——我们称之为Cannistercoin。用户向股票照片网站贡献照片，作为回报他们会收到代币。这个代币也可用于从网站购买股票照片，并且该代币在交易所上交易。
- en: 'This would seem to work, and it’s a complete market—Cannistercoin has identified
    buyers and sellers and has a mechanism to match them—but it is perhaps not a functional
    market. The barriers to entry here are significant: a buyer could use any ordinary
    stock photo site and use their credit card or bank account. In this model, the
    buyer needs to sign up for an exchange and send cryptocurrency in exchange for
    the token.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这样看起来似乎可行，而且是一个完整的市场——Cannistercoin已经确定了买家和卖家，并且有一种机制来匹配它们，但也许这不是一个功能性的市场。这里的准入壁垒很高：买家可以使用任何普通的股票照片网站，并使用他们的信用卡或银行账户。在这个模式中，买家需要注册一个交易所，并交换加密货币以换取代币。
- en: To be truly decentralized, a big piece is missing from this economic model—that
    is, this system of incentives. What provides an incentive for witnesses or validators
    to run their machines and validate transactions?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正地去中心化，这种经济模型还缺少一个重要组成部分——这就是激励系统。是什么激励见证者或验证者运行他们的机器并验证交易呢？
- en: You can give them some share of the tokens, but why wouldn’t many of them sell
    their tokens immediately in order to recoup the costs of running their machines?
    It can be reasonably expected that that constant selling pressure holds down the
    price of tokens in many of these appcoin cryptocurrencies, and this is a shame.
    Proof of stake systems are often more elegant with regard to processing power
    (at the expense of less elegant economic models).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以给他们一些代币的份额，但为什么他们不会立即出售他们的代币以便收回运行机器的成本呢？可以合理地预期，这种不断的抛售压力会压低许多应用币加密货币的代币价格，这是一件遗憾的事情。在处理能力方面，权益证明系统通常更为优雅（以牺牲更为优雅的经济模型为代价）。
- en: Proof of stake (or another mechanism) may well still take over the world, but,
    one way or the other, you can safely expect the crypto world to do plenty of hashing.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 股权证明（或其他机制）很可能仍然会占据世界，但不管怎样，可以肯定地期望加密世界将做大量的哈希计算。
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The world of blockchain and cryptocurrency exists thanks largely to the innovations
    of the last century in cryptography. We've covered how cryptography works conceptually
    and how cryptographic operations, specifically hashing, form a large part of what
    happens behind the scenes in a blockchain.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链和加密货币的世界主要得益于上个世纪密码学的创新。我们已经介绍了密码学的概念和具体的加密操作，尤其是哈希操作，在区块链背后起着巨大作用。
- en: In the next chapter, we'll build on this foundation and introduce Bitcoin, the
    first (and most notable) blockchain application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将在此基础上介绍比特币，这是第一个（也是最显著的）区块链应用。
