["```\nif (typeof web3 !== 'undefined') { \n  web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\")); \n} \n```", "```\n//sync request \ntry \n{ \n  console.log(web3.eth.getBlock(48)); \n} \ncatch(e) \n{ \n  console.log(e); \n} \n\n//async request \nweb3.eth.getBlock(48, function(error, result){ \n    if(!error) \n        console.log(result) \n    else \n        console.error(error); \n}) \n```", "```\nweb3.eth.getBalance(\"0x27E829fB34d14f3384646F938165dfcD30cFfB7c\")\n  .toString(); \n```", "```\nweb3.fromWei(\"1000000000000000000\", \"ether\"); \nweb3.toWei(\"0.000000000000000001\", \"ether\"); \n```", "```\n//It's sync. For async use getGasPrice \nconsole.log(web3.eth.gasPrice.toString()); \n\nconsole.log(web3.eth.getBalance(\"0x407d73d8a49eeb85d32cf465507dd71d5071\n  00c1\", 45).toString()); \n\nconsole.log(web3.eth.getTransactionReceipt(\"0x9fc76417374aa880d4449a1f7\n  f31ec597f00b1f6f3dd2d66f4c9c6c445836d8b\")); \n```", "```\n20000000000 \n30000000000 \n{ \n \"transactionHash\": \"0x9fc76417374aa880d4449a1f7f31ec597f00b1f6f3dd2d66f4c9c6c445836d8b \", \n \"transactionIndex\": 0, \n \"blockHash\": \"0xef95f2f1ed3ca60b048b4bf67cde2195961e0bba6f70bcbea9a2c4e133e34b46\", \n \"blockNumber\": 3, \n \"contractAddress\": \"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\", \n \"cumulativeGasUsed\": 314159, \n \"gasUsed\": 30234 \n} \n```", "```\nvar txnHash = web3.eth.sendTransaction({ \n  from: web3.eth.accounts[0], \n  to: web3.eth.accounts[1], \n  value: web3.toWei(\"1\", \"ether\") \n}); \n```", "```\nvar proofContract = web3.eth.contract([{\"constant\":false,\"inputs\":\n  [{\"name\":\"fileHash\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":\n  [{\"name\":\"timestamp\",\"type\":\"uint256\"},\n  {\"name\":\"owner\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},\n  {\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"string\"},\n  {\"name\":\"fileHash\",\"type\":\"string\"}],\"name\":\"set\",\"outputs\":\n  [],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":\n  [{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"},\n  {\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},\n  {\"indexed\":false,\"name\":\"owner\",\"type\":\"string\"}, \n  {\"indexed\":false,\"name\":\"fileHash\",\"type\":\"string\"}],\"name\"\n  :\"logFileAddedStatus\",\"type\":\"event\"}]);\n```", "```\n var proof = proofContract.new({\n         from: web3.eth.accounts[0],\n         data: \"0x606060405261068...\",\n         gas: \"4700000\"\n     },\n     function(e, contract) {\n         if (e) {\n             console.log(\"Error \" + e);\n         } else if (contract.address != undefined) {\n             console.log(\"Contract Address: \" + contract.address);\n         } else {\n             console.log(\"Txn Hash: \" + contract.transactionHash)\n         }\n     })\n```", "```\nvar proof = \n  proofContract.at(\"0xd45e541ca2622386cd820d1d3be74a86531c14a1\");\n```", "```\nproof.set.sendTransaction(\"Owner Name\", \n  \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\", { \n\nfrom: web3.eth.accounts[0], \n}, function(error, transactionHash){ \n\nif (!err) \n\nconsole.log(transactionHash); \n}) \n```", "```\nvar returnValue = proof.get.call\n  (\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"); \n```", "```\nvar estimatedGas = proof.get.estimateGas\n  (\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"); \n```", "```\nevent logFileAddedStatus(bool indexed status, uint indexed timestamp,\n  string owner, string indexed fileHash); \n```", "```\nvar event = proof.logFileAddedStatus(null, {\n fromBlock: 0,\n toBlock: \"latest\"\n});\nevent.get(function(error, result) {\n if (!error) {\n console.log(result);\n } else {\n console.log(error);\n }\n})\nevent.watch(function(error, result) {\n if (!error) {\n console.log(result.args.status);\n } else {\n console.log(error);\n }\n})\nsetTimeout(function() {\n event.stopWatching();\n}, 60000)\nvar events = proof.allEvents({\n fromBlock: 0,\n toBlock: \"latest\"\n});\nevents.get(function(error, result) {\n if (!error) {\n console.log(result);\n } else {\n console.log(error);\n }\n})\nevents.watch(function(error, result) {\n if (!error) {\n console.log(result.args.status);\n } else {\n console.log(error);\n }\n})\nsetTimeout(function() {\n events.stopWatching();\n}, 60000)\n```", "```\nvar express = require(\"express\"); \nvar app = express(); \nvar server = require(\"http\").createServer(app); \nvar io = require(\"socket.io\")(server); \nserver.listen(8080); \n```", "```\napp.use(express.static(\"public\")); \napp.get(\"/\", function(req, res){ \n  res.sendFile(__dirname + \"/public/html/index.html\"); \n}) \n```", "```\nvar Web3 = require(\"web3\"); \n\nweb3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\")); \n\nvar proofContract = web3.eth.contract([{\"constant\":false,\"inputs\":[{\"name\":\"fileHash\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"string\"},{\"name\":\"fileHash\",\"type\":\"string\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"fileHash\",\"type\":\"string\"}],\"name\":\"logFileAddedStatus\",\"type\":\"event\"}]); \n\nvar proof = \n  proofContract.at(\"0xf7f02f65d5cd874d180c3575cb8813a9e7736066\"); \n```", "```\napp.get(\"/submit\", function(req, res){\n  var fileHash = req.query.hash;\n  var owner = req.query.owner;\n  var pkeys = req.query.pkeys;\n\n  pkeys = pkeys.split(\",\")\n\n  proof.set.sendTransaction(owner, fileHash, {\n    from: web3.eth.accounts[0],\n    privateFor: pkeys\n  }, function(error, transactionHash){\n    if (!error)\n    {\n      res.send(transactionHash);\n    }\n    else\n    {\n      res.send(\"Error\");\n    }\n  })\n})\n\napp.get(\"/getInfo\", function(req, res) {\n    var fileHash = req.query.hash;\n    var details = proof.get.call(fileHash);\n    res.send(details);\n})\n```", "```\nproof.logFileAddedStatus().watch(function(error, result) {\n    if (!error) {\n        if (result.args.status == true) {\n            io.send(result);\n        }\n    }\n})\n```", "```\n<!DOCTYPE html> \n<html lang=\"en\"> \n    <head> \n        <meta name=\"viewport\" content=\"width=device-width, initial-\n          scale=1, shrink-to-fit=no\"> \n        <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\"> \n    </head> \n    <body> \n        <div class=\"container\"> \n            <div class=\"row\"> \n                <div class=\"col-md-6 offset-md-3 text-xs-center\"> \n                    <br> \n                    <h3>Upload any file</h3> \n                    <br> \n                    <div> \n                        <div class=\"form-group\"> \n                            <label class=\"custom-file text-xs-left\"> \n                                <input type=\"file\" id=\"file\" \n                                  class=\"custom-file-input\"> \n                                <span class=\"custom-file-control\">\n                                </span> \n                            </label> \n                        </div> \n                        <div class=\"form-group\"> \n                            <label for=\"owner\">Enter owner name</label> \n                            <input type=\"text\" class=\"form-control\"\n                              id=\"owner\"> \n                        </div> \n                        <div class=\"form-group\">\n                            <label for=\"owner\">Enter Public Keys\n                            <small>(comma Seperated)</small></label>\n                            <input type=\"text\" class=\"form-control\"\n                             id=\"pkeys\">\n                        </div>\n                        <button onclick=\"submit()\" class=\"btn btn-\n                         primary\">Submit</button> \n                        <button onclick=\"getInfo()\" class=\"btn btn-\n                        primary\">Get Info</button> \n                        <br><br> \n                        <div class=\"alert alert-info\" role=\"alert\" \n                         id=\"message\"> \n                            You can either submit the file's details or\n                             get information about it. \n                        </div> \n                    </div> \n                </div> \n            </div> \n            <div class=\"row\"> \n                <div class=\"col-md-6 offset-md-3 text-xs-center\"> \n                    <br> \n                    <h3>Live Transactions Mined</h3> \n                    <br> \n                    <ol id=\"events_list\">No Transaction Found</ol> \n                </div> \n            </div> \n        </div> \n        <script type=\"text/javascript\" src=\"img/sha1.min.js\"></script> \n        <script type=\"text/javascript\" src=\"img/jquery.min.js\">\n          </script> \n        <script type=\"text/javascript\" src=\"img/socket.io.min.js\">\n          </script> \n        <script type=\"text/javascript\" src=\"img/main.js\"></script> \n    </body> \n</html> \n```", "```\nfunction submit()\n{\n  var file = document.getElementById(\"file\").files[0];\n\n  if(file)\n  {\n    var owner = document.getElementById(\"owner\").value;\n\n    if(owner == \"\")\n    {\n      alert(\"Please enter owner name\");\n    }\n    else\n    {\n      var publicKeys = document.getElementById(\"pkeys\").value;\n\n      if(publicKeys == \"\")\n      {\n        alert(\"Please enter the other enterprise's public keys\");\n      }\n      else\n      {\n        var reader = new FileReader();\n        reader.onload = function (event) {\n            var hash = sha1(event.target.result);\n\n            $.get(\"/submit?hash=\" + hash + \"&owner=\" + owner + \n            \"&pkeys=\" + encodeURIComponent(publicKeys), function(data){\n              if(data == \"Error\")\n              {\n                $(\"#message\").text(\"An error occured.\");\n              }\n              else\n              {\n                $(\"#message\").html(\"Transaction hash: \" + data);\n              }\n            });\n        };\n        reader.readAsArrayBuffer(file);\n      }\n    }\n  }\n  else\n  {\n    alert(\"Please select a file\");\n  }\n}\n\nfunction getInfo()\n{\n  var file = document.getElementById(\"file\").files[0];\n\n  if(file)\n  {\n    var reader = new FileReader();\n    reader.onload = function (event) {\n        var hash = sha1(event.target.result);\n\n        $.get(\"/getInfo?hash=\" + hash, function(data){\n          if(data[0] == 0 && data[1] == \"\")\n          {\n            $(\"#message\").html(\"File not found\");\n          }\n          else\n          {\n            $(\"#message\").html(\"Timestamp: \" + data[0] + \" Owner: \" + \n              data[1]);\n          }\n        });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n  else\n  {\n    alert(\"Please select a file\");\n  }\n}\n\nvar socket = io(\"http://localhost:8080\");\n\nsocket.on(\"connect\", function () {\n  socket.on(\"message\", function (msg) {\n    if($(\"#events_list\").text() == \"No Transaction Found\")\n    {\n      $(\"#events_list\").html(\"<li>Txn Hash: \" + msg.transactionHash + \n        \"\\nOwner: \" + msg.args.owner + \"\\nFile Hash: \" +\n           msg.args.fileHash + \"</li>\");\n    }\n    else\n    {\n      $(\"#events_list\").prepend(\"<li>Txn Hash: \" + msg.transactionHash \n        + \"\\nOwner: \" + msg.args.owner + \"\\nFile Hash: \" + \n          msg.args.fileHash + \"</li>\");\n    }\n    });\n});\n```"]