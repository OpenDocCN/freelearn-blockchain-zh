- en: Blockchain Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After studying most of the concepts and applications of blockchain technology,
    it's crucial to discuss its strengths and weaknesses in order to realize the level
    of security that is required. In this chapter, we will be addressing some of the
    significant challenges faced by blockchain technology. Along this journey, we'll
    also point out the possible attacks you can encounter in the blockchain network
    and how they can be prevented.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be looking at the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Transaction security model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decentralized security model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Attacks on the blockchain, including:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Double-spend attacks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 51% attacks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse attacks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The threats presented by quantum computing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain technology was adopted in decentralized public networks because of
    the security the technology provides, including ensuring the integrity of the
    data stored in the public ledger. Blockchain networks are less vulnerable to the
    threats faced by centralized networks. However, due to the participation of several
    diverse components in public networks, centralization in blockchain networks does
    occur. In addition to this, most blockchain platforms compromise the principles
    of decentralization in order to customize their applications to their needs. Due
    to this, the security of blockchain technology has suffered. In this chapter,
    we'll look into some of the security models and examine the security concerns
    of blockchain technology.
  prefs: []
  type: TYPE_NORMAL
- en: Transaction security model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The internet is a system of connected devices that communicate with each other
    using various protocols. Due to the open nature of communication on  the internet,
    there are both individuals and groups of people trying to harm users' devices
    or applications by hijacking communications. These are often referred to as bad
    actors, and can be found in any part of the internet. It's often difficult to
    keep these bad actors out of any system due to the fragile nature of communication
    on the internet, and every application implements a security model for protection
    against bad actors.
  prefs: []
  type: TYPE_NORMAL
- en: Most applications ensure secure communication by encrypting the traffic between
    the transmitting and the receiving end. In fact, more than half of the traffic
    on the web is encrypted using the HTTPS protocol. Due to the increased number
    of attacks on the internet, encrypting traffic is of the highest priority when
    you're implementing a security model for an application. This is crucial for applications
    that deal with authentication, payment, or any other services that carry private
    user information.
  prefs: []
  type: TYPE_NORMAL
- en: Let's consider an example of a user performing a transaction with an online
    store. This transaction involves communication between the merchant's site and
    the respective banks. Generally, a payment gateway is used by the merchant's site
    to settle the transaction between the user's and the merchant's bank. Therefore,
    any transaction initiated by the user will reach the payment gateway through the
    merchant's site. Since the transaction carries private user information, such
    as a bank account or credit card details, it needs to be communicated in a secure
    way. A standard called **Payment Card Industry Data Security Standard** (**PCI
    DSS**) is used by merchants. It protects the private details provided by the users.
    Even after ensuring secure communication, it's still possible that any hole in
    security can compromise a user's data. The compromised data can be used by the
    attackers to steal users' funds and even steal their identities in order to perform
    fraudulent transactions.
  prefs: []
  type: TYPE_NORMAL
- en: All existing services, especially financial services, are centralized and are
    heavily dependent on encrypting traffic to provide security. Blockchain technology,
    on the other hand, uses a decentralized model and enables the transparency of
    transactions. Every transaction detail has to be public so that the networking
    nodes can validate the transactions. Exposing the transactions to the public doesn't
    reveal any confidential user information. Due to this, users don't have to encrypt
    the communication when broadcasting transaction information to the blockchain
    network.
  prefs: []
  type: TYPE_NORMAL
- en: Users use a private key to sign the transaction (analogous to an account password
    in banking systems) and prove their identity on a blockchain-based platform. This
    is the only secret information required to claim funds and create transactions.
    Nothing other than a private key can prove the identity of the user because the
    user doesn't have a real identity on the blockchain network.
  prefs: []
  type: TYPE_NORMAL
- en: If a user loses their private key, it is equivalent to losing all their assets.
    Users have to protect their private keys to in turn protect their identity and
    funds. Overall, the blockchain security model has its own pros and cons. We'll
    discuss some of the risks and benefits of the security model in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Risks of the security model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ownership of a private key is sufficient to claim ownership of assets created
    and registered in the blockchain. Although private keys remove the burden of maintaining
    multiple documents to prove user''s identity while performing a transaction, they
    increase the need for stringent security on the private key. Users cannot afford
    to lose their private key because it is the only proof of identity in the blockchain.
    This means that users have to secure their private keys, which are often stored
    in wallets. Users will have to secure the private key with some kind of encryption
    to protect it from attackers. However, there are some major risks of this system
    when compared to the traditional transaction model, these include:'
  prefs: []
  type: TYPE_NORMAL
- en: It's unsafe to store private key information on devices where hundreds of applications
    have access to the device's storage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attackers will still have to carry out further attacks even after gaining access
    to the bank or the credit card details as they are often equipped with a two-factor
    authentication system. However, extracting the private key is all that an attacker
    has to do in a blockchain platform.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centralized services can help customers claim their protected assets even after
    losing secret information through the use of manual verification, whereas private
    information cannot be recovered in decentralized blockchain applications as there
    is no third party involved.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Securing private information in a blockchain application is the sole responsibility
    of the user. Various methods can be adopted by the user to secure user private
    key wallets, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Create multiple backups of private keys on different devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isolate the devices that contain private keys from the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store private keys on hardware and in paper wallets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scan the device used to store keys for malicious programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: The information required to generate private keys that can be stored
    on a physical document is called a paper wallet. A paper wallet is the safest
    way to back up private keys because it''s isolated from both electronic devices
    and the network.'
  prefs: []
  type: TYPE_NORMAL
- en: Decentralized security model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blockchain applications revolve around the principle of decentralization. Decentralization
    is achieved with the help of equally responsible nodes that are connected to form
    a peer-to-peer network. It’s essential for most of the blockchain nodes (if not
    all) to exhibit similar functionality to achieve a purely decentralized network.
    This can be a challenging task because there is no authority in the public network
    to enforce rigid rules on the functionality of nodes. Many blockchain networks
    are being forced to centralize to improve the performance or integrate with the
    existing centralized entities. This exposes decentralized systems to potential
    issues that are already faced by existing centralized systems. We’ll discuss some
    of the entities that have caused centralization and exposed decentralized networks
    to some of the potential threats.
  prefs: []
  type: TYPE_NORMAL
- en: Centralization due to cryptocurrency exchanges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Several cryptocurrencies were introduced soon after Bitcoin gained popularity.
    Due to the increased popularity of cryptocurrencies, there was a need for an entity
    where people could buy, sell, and exchange currencies. The entity acted in a similar
    way to the stock exchange as people placed their *asks* and *bids*. People started
    to trust the exchanges to maintain their private keys on the users' behalf.
  prefs: []
  type: TYPE_NORMAL
- en: Most cryptocurrency exchanges maintain users' private keys on a single server.
    They stored most of the key information on devices that were connected to the
    internet. This forced exchange account holders to trust the security of the exchange
    servers. The security of user accounts heavily relied on the security implemented
    by these servers. This is contrary to the decentralized security model of the
    blockchain technology, so it opened up the opportunity for intruders to perform
    attacks on the exchange servers using traditional methods.
  prefs: []
  type: TYPE_NORMAL
- en: A cryptocurrency wallet that is stored on a device connected to the internet
    is called a hot wallet. Exchanges store most of their coins in hot storage so
    that withdrawals can be performed instantly.
  prefs: []
  type: TYPE_NORMAL
- en: Mt. Gox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mt. Gox was a Japanese cryptocurrency exchange, and it faced the biggest hack
    in the history of cryptocurrencies. In 2011, the Mt. Gox server was attacked,
    and around 850,000 bitcoins (valued at $450 million at the time) were stolen after
    their hot wallet storage was compromised. Although the exchange was able to recover
    some of the bitcoins, the majority of the coins were lost forever. Eventually,
    in February 2014, the company filed for bankruptcy.
  prefs: []
  type: TYPE_NORMAL
- en: Bitfinex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In August 2016, around 120,000 bitcoins were stolen from Bitfinex wallets. Bitfinex
    reduced the bitcoin funds of all their customers by 36%, including the customers
    whose wallets were not compromised. Newly minted BFX tokens were deposited in
    customers' accounts in proportion to their losses. Since these tokens did not
    have any intrinsic value in any other exchanges, they promised to buy back these
    distributed tokens eventually.
  prefs: []
  type: TYPE_NORMAL
- en: Bitfinex is related to a controversial cryptocurrency token called *Tether*,
    which is traded with the ticker symbol USDT. Tether claims to own a US dollar
    for every Tether token issued. Tether is popular due to its fixed value, which
    facilitates smooth transactions between exchanges.
  prefs: []
  type: TYPE_NORMAL
- en: Coinrail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most recent hack at the time of writing was on Coinrail during June 2018\.
    It's one of the smallest exchanges in Korea but has a high rate of transactions.
    Various altcoin wallets were attacked, and an estimated 37 million US dollars
    was lost at that time.
  prefs: []
  type: TYPE_NORMAL
- en: Centralization in mining pools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mining is crucial for any **Proof of Work** (**PoW**)-based blockchain platform.
    There has been significant growth in the mining ecosystem due to the incentive
    mechanism. Nodes with the mining functionality in a network have different capabilities
    to regular nodes. Some have high computing power, and others have limited computing
    power. The mining nodes with higher computing power contribute more to the block
    creation process, thus earn more incentives. This often discourages nodes with
    lower computing power from participating in mining operations. A special technique
    called a mining pool was created to solve this. Everyone can contribute their
    computational resources.
  prefs: []
  type: TYPE_NORMAL
- en: All the participants in the pool were rewarded with incentives based on their
    contributions. Mining pools allowed a fair distribution of incentives among the
    mining nodes. However, it introduced a new security threat by centralizing computational
    power.
  prefs: []
  type: TYPE_NORMAL
- en: 'Block creation in the majority of blockchain platforms is controlled by mining
    pools. *Figure 10.1* shows the mining pool distribution in the Ethereum network.
    The top three mining pools constitute more than 50% of the mining power:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c8200890-bc1f-4419-b3db-bbc8862a0701.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.1: Mining pool distribution in the Ethereum network based on the
    mining power over 24 hours in 2018'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, *Figure 10.2* shows that the top four mining pools in the Bitcoin
    network, combined, own the majority of the mining power:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a6bf0fe-b5a9-42d9-bd1a-5f5c4b9992eb.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.2: Mining pool distribution in the Bitcoin network based on the mining
    power over 24 hours in 2018'
  prefs: []
  type: TYPE_NORMAL
- en: The centralization of computing resources is often a threat in decentralized
    networks as they could control the block creation process. A dishonest node could
    launch a 51% attack if the mining pool has enough computation power. Although
    the 51% attack seems unrealistic in a completely decentralized network, it's feasible
    to achieve this with the help of mining pools. We'll be exploring the 51% attack
    in depth in a later section of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Attacks on the blockchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every application is vulnerable to an attack of some kind due to security issues.
    But the security issues of a blockchain platform are very different from those
    of a traditional application due to its security model. Most of the attacks that
    are performed on a centralized system are not applicable to a blockchain-based
    application. The decentralization model of a blockchain application makes it difficult
    to find vulnerabilities. Unlike traditional databases, blockchain data is created
    by achieving consensus among the network's nodes, so the only way to compromise
    the blockchain network is by finding vulnerabilities in the consensus mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of ways to prevent a network from reaching a valid consensus.
    However, attacks will not be successful on all the blockchain platforms. A resilient
    network such as Bitcoin will not be vulnerable to most attacks, but a blockchain
    network with a small number of participants can be compromised by knowledgeable
    intruders. We will discuss some of the feasible attacks on the blockchain network
    in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Double-spend attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A double-spend attack is when the same fund amount is spent twice or several
    times. A physical currency such as paper cash cannot be spent twice unless a duplicate
    copy is created, which is expensive. Digital money, on the other hand, can easily
    be duplicated without any cost because they are replicated and transmitted in
    bits. In *Figure 10.3*, Alice sends the same 10-dollars- worth  of digital money
    to all her friends. If her friends are unaware of other transactions, they will
    believe that each of their 10 dollars is legitimate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d550518b-8abe-4147-b548-7ff1f52cf391.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.3: Double-spending of funds by Alice'
  prefs: []
  type: TYPE_NORMAL
- en: Double-spending is a well-known problem that prevented the use of digital currency
    in decentralized networks. Bitcoin was the first to provide a practical solution
    to this problem. However, several attacks exist that can still exploit some of
    the vulnerabilities of the blockchain network in order to perform double-spends.
    Race attacks, Finney attacks, 51% attacks, and eclipse attacks are some of the
    attacks that can enable double-spend in a decentralized network. They can all
    be avoided by making sure that the transaction is buried deep in the blockchain.
    The chances of reversing a transaction decreases with each confirmation of the
    block in the blockchain. This is why Bitcoin suggests that fund receivers should
    wait for at least six block confirmations.
  prefs: []
  type: TYPE_NORMAL
- en: One of the simplest attacks that can be performed in a decentralized network
    is a race attack. A race attack is a zero-confirmation attack that can only be
    performed before the transaction is included in a block. Two conflicting transactions
    are created in this attack. One transaction will pay the victim and the second
    transaction will pay the same funds back to the attacker. A race attack is carried
    out by sending the first transaction only to the victim and broadcasting the second
    transaction to the rest of the network. The second transaction is likely to end
    up in a block before the original transaction and will thus beat the actual transaction
    in the race to be verified. Merchants who accept transactions before waiting for
    confirmation can be the victims of this attack. It's a matter of a trade-off between
    security and speed of transactions in Bitcoin. Only the users of blockchain platforms
    that have a long confirmation time, such as Bitcoin, are exposed to zero-confirmation
    attacks because of the long wait.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the miners prioritize transactions based on the transaction fees. This
    prioritization could also be used to create a double-spend attack. In this section,
    we will construct a script to simulate a double-spend attack in the Bitcoin network
    by prioritizing the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Double-spending in Bitcoin transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll make use of a Python package called `python-bitcoinlib`, which has a set
    of libraries that provide an interface to Bitcoin's data structures and can access
    Bitcoin client APIs. It invokes the Bitcoin client's methods through the RPC interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the required functions and data structures are imported from the `bitcoin`
    module, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A chain is selected to create a connection. The chain could be mainnet, testnet,
    or regtest. We will use Bitcoin''s test network for this simulation. An RPC connection
    object is created to use client APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A Bitcoin Core daemon should be created to connect to the testnet blockchain
    by running the `bitcoind` with the `testnet` argument: `bitcoind -daemon -testnet`.
    Refer to [Chapter 5](15831d35-9bb3-4752-98d7-46e23efca78b.xhtml), *Cryptocurrency*,
    for more configuration details of Bitcoin.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A few values are declared before creating a transaction. The `dust_amount`
    value is the minimum transaction output value that can be included in a transaction.
    A miner will reject the transaction if the output value is less than the `dust_amount`
    value. In the following code, the value of the coin is 10⁸ (100 million, that
    is, the number of Satoshis in 1 bitcoin). The transaction fees per byte for the
    first and second transaction are declared. The double-spend transaction will have
    a higher transaction fee to increase the priority:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Opt-in **Replace-by-Fee** (**RBF**) is an option provided in Bitcoin to allow
    a transaction to be replaced with a different one. Some of the miners won''t allow
    the replacement of transaction once it is placed in the transaction pool. A transaction
    is marked replaceable by choosing a sequence number less than MAX-1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'A payment of 0.1 **bitcoin** (**BTC**) is created that is payable to the victim
    address, `n4Wux6bCxwFPvj7BYNb8REvtahhJ9fHJFv`. Two transaction outputs are created,
    one with a value 0.1, and the other is a change output payed back by creating
    a new address. The change is initially set to 0 until the transaction inputs are
    selected. The `CMutableTransaction`, `CMutableTxOut`, and `CMutableTxIn` transaction
    objects are used to create the transaction, transaction outputs, and transaction
    inputs respectively in this example because they are mutable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Creating the first transaction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Transaction inputs are constructed by selecting the unspent transactions that
    will satisfy the required transaction value (0.1 BTC) and transaction fees.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `while` loop in the code is terminated only after enough input values are
    created to satisfy the output values and the minimum transaction fee for the transaction.
    The `delta_fee` represents the additional fee required to satisfy the transaction
    fee. The `delta_fee` is deducted from the `value_out` if it is a positive value,
    else it is added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'A new unspent transaction output is selected for spending if the input value
    is less than the output value. A transaction input is created for the newly selected
    unspent output, and the amount is added to the transaction output change. The
    transaction is signed each time to update `scriptSig` so that the size of the
    transaction is updated in each iteration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The transaction is finally signed again before it is sent to the network. This
    transaction is ideally sent only to the victim node in a race attack. We have
    broadcast the transaction in this example because we will replace this transaction
    by creating a higher priority for the double-spend transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Creating the transaction to double-spend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The double-spendable transaction is a transaction with the same value as the
    first transaction but with a different recipient address. The fund transfer is
    reversed by addressing the entire fund back to the attacker. All the transaction
    outputs except the transaction output carrying change are removed from the transaction.
    Since the change transaction output is addressed to the attacker, the entire fund
    value is assigned to this output transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'A similar process is used as before to calculate the fee for the entire transaction.
    A higher transaction fee per byte, `feeperbyte2`, is used when calculating the
    fee for the transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once all the transaction inputs are added to the transaction, the transaction
    is signed and broadcast to the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The transaction created for the double-spend will consist of a single transaction
    output that is addressed to the attacker. This transaction will replace the one
    created before, due to the higher transaction fee. The raw transaction and transaction
    ID of both the transactions are shown in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The first transaction will be stored in the transaction pool of all the nodes
    before the second transaction is broadcast. The second transaction is created
    and broadcast after waiting for two seconds. *Figure 10.4* shows the first transaction
    information. 0.1 BTC is paid to the victim''s address, and the rest is paid back
    to the attacker''s address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7aad9f95-b2bf-4f51-9e01-113cf6c85699.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.4: Transaction details of the first transaction (source: [blockchain.info](http://blockchain.info))'
  prefs: []
  type: TYPE_NORMAL
- en: 'This first transaction will only be available for seconds in the network. As
    soon as the second transaction reaches the nodes, it will be replaced in the transaction
    pool. *Figure 10.5* shows the information of the transaction that replaces the
    initial unconfirmed transaction. This transaction has only one transaction output,
    which pays the entire fund back to the attacker. The transaction successfully
    completes the double-spend attack once it gets included in the block. When the
    transaction in *Figure 10.5* gets confirmed, it double-spends the same fund:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfe4923d-321c-4b69-b380-a23e7204b896.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.5: Transaction details of the double-spend transaction (source: [blockchain.info](http://blockchain.info)[)](http://blockchain.info)'
  prefs: []
  type: TYPE_NORMAL
- en: Many merchants avoid double-spend attacks by waiting for a minimum number of
    block confirmations or by rejecting transactions that are replaceable (opt-in
    RBF). But some Bitcoin merchants still accept payments even if the transactions
    are unconfirmed. Such entities can be easily attacked with similar double-spend
    attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Background reading: The double-spend example used in this section is inspired
    by a project by Peter Todd. Refer to the project at [https://github.com/petertodd/replace-by-fee-tools](https://github.com/petertodd/replace-by-fee-tools)
    for more information on double-spend attacks.'
  prefs: []
  type: TYPE_NORMAL
- en: 51% attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a participant in the network is able to control more than 50% of the resources
    required to reach the consensus to create blocks, then the block creation mechanism
    can be manipulated by that participant. The 51% attack can be performed on any
    of the consensus algorithms, but it is generally used in Proof of Work-based blockchain
    networks.
  prefs: []
  type: TYPE_NORMAL
- en: In a PoW-based network, if a dishonest participant is able to control the majority,
    that is, more than 50% of the computing resources in the network, the block creation
    process can be manipulated by the dishonest node. The feasibility information
    relating to the 51% attack was also mentioned by Satoshi Nakamoto in the Bitcoin
    whitepaper.
  prefs: []
  type: TYPE_NORMAL
- en: Implications of the attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a node controls the majority of the computation power of a network, it
    has a better chance of creating the new blocks than the rest of the network. When
    an attacker gets hold of the majority of the computation power, the attacker has
    some control over the ordering, inclusion, and exclusion of transactions. This
    doesn''t mean the attacker can pollute the blockchain with invalid transactions.
    Since all the nodes in the network verify the transactions included in the blockchain,
    invalid transactions would be detected by the other networking nodes and the blocks
    would be discarded. An attacker would be able to cause the following complications
    in the blockchain:'
  prefs: []
  type: TYPE_NORMAL
- en: Delay some or all of the valid transactions from being confirmed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent other miners from mining valid blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An attacker would not be able to cause any of the following complications:'
  prefs: []
  type: TYPE_NORMAL
- en: Steal or misplace transactions from other accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delay valid transactions from being broadcast
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding points prove that an attacker doesn't have much of a chance to
    spoil the information on the blockchain even if they control the majority of the
    computation. The only way the attacker makes a profit out of this attack is by
    manipulating their transactions by spending them several times. This is a classic
    attack on decentralized networks known as the double-spend attack, as we saw earlier
    in the chapter. The double-spend attack is basically spending the same amount
    twice by reversing the transaction on the blockchain. Since block creation is
    controlled by the attacker, the transaction can be easily reversed. The attacker
    might not benefit a lot even after performing a few double-spends, though they
    can leverage the attack by double-spending transactions on many accounts whose
    private keys can be stolen from hot wallets, such as exchanges. Although performing
    simultaneous attacks is infeasible, it's not impossible.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the majority of the computation power of a network is very expensive
    compared to the profits gained from the attacks. So, it is always more profitable
    to behave honestly and earn the incentives from valid block creation than to manipulate
    transactions for a small amount of profit. However, 51% of attacks could be performed
    by someone whose intention is not to gain profit but to defeat the consensus system
    for various reasons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some resilient platforms, such as Bitcoin, Ethereum, and Litecoin are not susceptible
    to these attacks. It''s easier to attack smaller coins whose network''s majority
    computation share could be easily bought. *Table 10**.1* compares the attack cost
    for several PoW-based cryptocurrency networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Algorithm | Hash rate (Hashes/second) | 1-hour attack cost |'
  prefs: []
  type: TYPE_TB
- en: '| **Bitcoin** | SHA-256 | 45,208 PH/s | $745,462 |'
  prefs: []
  type: TYPE_TB
- en: '| **Ethereum** | Ethash | 241 TH/s | $325,102 |'
  prefs: []
  type: TYPE_TB
- en: '| **Litecoin** | Scrypt | 280 TH/s | $50,877 |'
  prefs: []
  type: TYPE_TB
- en: '| **ZenCash** | Equihash | 95 MH/s | $5,999 |'
  prefs: []
  type: TYPE_TB
- en: '| **Bitcoin Private** | Equihash | 4 MH/s | $270 |'
  prefs: []
  type: TYPE_TB
- en: 'Table 10.1: Comparing attack cost for various PoW-based cryptocurrency networks'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: Hash per second is the unit used to determine the hash rate of a blockchain
    node. In *Table 10.1*, **Petahash per second** (**PH/s**), **Terahash per second**
    (**TH/s**), and Megahash per second are used to measure the hash rates.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Table 10.1* shows that currencies such as Bitcoin, Ethereum, and Litecoin,
    which require a high hash rate (difficulty) to compute the PoW hash puzzle, are
    costlier to attack than low hash rate networks such as ZenCash or Bitcoin Private.'
  prefs: []
  type: TYPE_NORMAL
- en: Even though it is practically infeasible to perform such attacks, there have
    been several such attacks on small cryptocurrency networks. During early 2018,
    Bitcoin Gold, a fork of the Bitcoin Core project, witnessed a double-spend attack
    that attempted to steal money from the exchange, after the attacker controlled
    the majority of the hash power. Verge and MonaCoin are other currencies whose
    blockchain networks were compromised in 51 % attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding the attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to avoid double-spends on a 51% attack is by increasing the wait
    time. The longer the wait, the smaller the chances of double-spends. As time passes,
    the transaction will get buried in the blockchain, making it difficult to reverse
    the transaction. This can be made sure by waiting for a specific number of block
    insertions (confirmations) after the transaction is included in a block. Each
    blockchain platform has its own suggested number of confirmations. The suggested
    Bitcoin block confirmation is 6, which means a wait time of around 60 minutes
    after the transaction is included in a block.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point, we've explored possible attacks on the consensus of the blockchain
    network. But networking attacks are mostly ignored due to the difficulty involved
    in defeating a decentralized network that works using the peer-to-peer protocol.
    This doesn't mean that attacks on peer-to-peer networks are impossible. In an
    eclipse attack, the attacker eclipses the node from the network. The attacker
    makes sure that the node will not communicate with the blockchain network. The
    node will believe in a completely different truth than the rest of the network
    after the node is compromised by the attack. Generally, eclipse attacks are performed
    on high-profile blockchain nodes such as miners or merchants.
  prefs: []
  type: TYPE_NORMAL
- en: The eclipse attack was proposed by computer security researchers Ethan Heilman,
    Alison Kendler, Aviv Zohar, and Sharon Goldberg in 2015\. They published a Usenix
    Security paper titled *Eclipse Attacks on Bitcoin's Peer-to-Peer Network*. The
    paper explains the possibility of an attack on Bitcoin's peer-to-peer network.
    Although the attack is mainly focused on Bitcoin, it can be performed on the peer-to-peer
    networks of another blockchain platform as well. Another paper, titled *Low-Resource
    Eclipse Attacks on Ethereum's Peer-to-Peer Network*, which was published in 2018,
    analyzed the feasibility of an eclipse attack in the Ethereum network. We will
    look into the details of eclipse attacks based on the first of these papers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a blockchain network, peers use a gossip protocol to set up an initial connection
    and exchange information. Each node learns about the peers in the network from
    the connected nodes. In an eclipse attack, the attacker prevents the victim from
    learning about the rest of the network by not gossiping about the other nodes.
    The attacker node is directly connected to the victim node, as shown in *Figure
    10.6*. The attack looks similar to the man-in-the-middle attack performed between
    the client and the server in a centralized network. We will assume that attack
    takes place in Bitcoin''s PoW ecosystem to understand and analyze the eclipse
    attack in the coming sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f95a8d5d-6bbc-4787-a573-ffcc491c255f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.6: The position of the attacker in an eclipse attack'
  prefs: []
  type: TYPE_NORMAL
- en: Eclipsing the node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Bitcoin node can have a maximum of 8 outgoing and 117 incoming connections.
    Since there''s a limit on the number of outgoing connections, the attacker can
    force the victim to solely establish connections to malicious nodes created by
    the attacker:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d638198-b472-427d-9062-a8b93aa0947b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.7: Bitcoin node with outgoing and incoming connections in a peer-to-peer
    network'
  prefs: []
  type: TYPE_NORMAL
- en: This may look easy in theory; however, forcing the victim to only create connections
    to malicious nodes requires more than a single-step attack. The attacker has to
    learn and manipulate the victim's connection information to manipulate the user's
    outgoing connections. Bitcoin nodes store outgoing connection information in a
    peer table. The peer table is organized into buckets of addresses. Filling these
    buckets with the attacker's IP addresses is the idea behind the attack. An attacker
    will use several vulnerabilities in Bitcoin Core to achieve this. Once the peer
    table is filled with the attacker's node information, the victim will only attempt
    to connect to the attacker's nodes after the node has been rebooted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bitcoin has two different sets of buckets that store peer information: a set
    of new buckets and a set of tried buckets. New buckets consist of the addresses
    of newly available peers, whereas tried buckets store addresses of already-connected
    peers. When a node first connects to a peer, it adds the peer''s information,
    along with a timestamp, to the tried bucket. The connected peer passes known peer
    information to the node, and the node stores this in the new bucket. When the
    node connects to the attacker''s device, it will send information about the malicious
    peers so that the node stores those addresses in the new bucket.'
  prefs: []
  type: TYPE_NORMAL
- en: When a new connection is successfully made by the node, it will add the IP address
    to one of the 256 tried buckets. It randomly selects a single bucket but randomizes
    the selection based on the network ID and the full IP address. This is also the
    same in the case of adding IP addresses to the new bucket. Various vulnerabilities
    of the Bitcoin node can be exploited to make sure that most of the addresses in
    the bucket are the attacker's addresses. Several vulnerabilities of the Bitcoin
    node are pointed out in the *Vulnerabilities and countermeasures* section.
  prefs: []
  type: TYPE_NORMAL
- en: Implications and analysis of the attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the eclipse attack is performed on the network layer, it can break the
    security of the consensus layer too. Any attack on the consensus layer can be
    more effective when the node's peer-to-peer protocol is compromised. A 51% attack
    without the attacker owning the majority of the computing power, or the double-spend
    attack even after several block confirmations, can be performed when an eclipse
    attack is performed.
  prefs: []
  type: TYPE_NORMAL
- en: An attacker can double-spend a transaction even after n-confirmation simply
    by eclipsing a fraction of the miners and the victim node. The attacker can spend
    a fund and forward it to the eclipsed miner. When the miner includes this in a
    block, the attacker shows this blockchain to the victim node. The victim is convinced
    after looking at the confirmed transaction. The attacker also forwards a transaction
    to double-spend the same fund. When the attacker completes their purchase from
    the victim, they reveal the actual blockchain to both the eclipsed miner and the
    victim, thus making their blockchain obsolete.
  prefs: []
  type: TYPE_NORMAL
- en: A double-spend attack is performed in *Figure 10.8*. The attacker eclipses a
    miner who controls 30% of the mining power and the victim. The attacker spends
    a fund and sends the transaction to the eclipsed miner.
  prefs: []
  type: TYPE_NORMAL
- en: 'The eclipsed victim only views this version of the blockchain. The attacker
    then spends the same fund and creates a transaction that is viewed by the rest
    of the network. Since this network controls the majority (70%) of the mining power,
    it will create a longer blockchain, making the eclipsed miner''s blockchain obsolete:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62e07125-47be-46b1-8830-002ac96a0276.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.8: Double-spend attack by eclipsing the victim node'
  prefs: []
  type: TYPE_NORMAL
- en: 'If an attacker is a miner, they can launch a 51% attack without owning 51%
    of the computing power of the network. This can be achieved by preventing the
    honest miners from controlling the majority of the computing power. The attacker
    can eclipse a few miners from rest of the network, which would prevent miners
    from building blocks on each other''s created blocks. This will prevent honest
    miners from owning the majority of the power to create blocks. This will increase
    the chances of an attacker with less than 51% of the mining power launching a
    51% attack. *Figure 10.9* shows that an attacker with 40% of the mining power
    eclipses two miners, each controlling only 30% of the mining power in the network.
    Now that attacker owns the majority of the mining power, they have a better chance
    of ending up with a longer chain than the other miners, who are isolated from
    each other. Each miner who is unaware of the rest of the network will keep building
    their own version of the blockchain. The attacker can publish their blockchain
    to the network at any time, making other versions of the blockchain obsolete:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e771e73b-a9b2-47ab-b8dc-b1f14e34fff1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.9: 51% attack with less than 50% of mining power'
  prefs: []
  type: TYPE_NORMAL
- en: 'Although the eclipse attack may seem unrealistic, it isn''t actually. A clever
    attack with the help of botnets can easily compromise a node that doesn''t implement
    an additional layer of network security. The published paper *Eclipse Attacks
    on Bitcoin''s Peer-to-Peer Network* explains the chances of an eclipse attack
    occurring with different scenarios. An experiment performed with botnets produced
    the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: A worst-case scenario was created by filling tried bucket slots with addresses
    of honest nodes. An attack was performed with a total of 4,600 IP addresses for
    a period of 5 hours. Although the tried bucket slots were initially mostly filled
    with the addresses of honest nodes, 98.8% of them were replaced with the attacker's
    addresses after the attack. The attack had a 100% success rate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An attack was performed on live Bitcoin nodes that had only 7% of the tried
    address slots filled with legitimate addresses. The attack was simulated by attacking
    with 400 IP addresses and only 1 hour invested in the attack. The tried table
    was filled with around 57% of attacker addresses after the attack. This attack
    had a success rate of 84%.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerabilities and countermeasures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The attacker has to exploit a few vulnerabilities to replace legitimate peer
    addresses with their own addresses. Some of the vulnerabilities in Bitcoin nodes
    that can be exploited are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The node selects the IP addresses from the tried bucket with recent timestamps,
    which increases the probability of the attacker getting selected even if the attacker
    owns a small portion of the tried bucket addresses. The attacker can increase
    the chances by increasing the attack time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whenever an address bucket is filled, one of the addresses is removed randomly.
    Since the removed address is random, if an attacker's IP is removed from the bucket,
    it can be eventually inserted by repeatedly sending it to the node.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The attacker can exploit these mentioned vulnerabilities. However, these vulnerabilities
    can be avoided by altering the behavior of the Bitcoin node while gossiping with
    the peers:'
  prefs: []
  type: TYPE_NORMAL
- en: Selection of the IP address from the tried table could be randomized, which
    would reduce the chances of selecting an attacker peer even if it was recently
    connected. The attacker will not be successful even after investing a lot of time
    in the attack if peer selection is randomized.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a deterministic approach is used to insert the address of the peer into a
    fixed slot, it will reduce the chances of inserting the attacker's address to
    a different slot after it is evicted from the bucket. Deterministic insertion
    will ensure that repeated insertion of addresses will not add any value to an
    attack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of the vulnerabilities in Bitcoin have been fixed. But due to the public
    blockchain networks and open source culture followed by most blockchain-based
    organizations, attackers will quickly find vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Threats of quantum computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quantum computing is an area of computing that deals with quantum theory. We
    know that every single outcome of any kind of computation is represented in 0s
    and 1s known as bits. Quantum computing, on the other hand, uses Qubits (quantum
    bits) instead of bits, that exhibits several states simultaneously rather than
    being mutually exclusive. This technological advancement could greatly influence
    performance in existing computing systems.
  prefs: []
  type: TYPE_NORMAL
- en: The performance benefits gained by quantum computing can be used to solve complex
    computing problems, including cryptographic algorithms that could only be broken
    by brute-force attacks. We are already aware that blockchain technology achieves
    most of the functionalities with the help of cryptographic primitives. Hashing
    and asymmetric cryptography are the main two primitives used in the blockchain
    technology, as discussed in [Chapter 2](bbe822af-c535-4a33-9783-168d174c48c1.xhtml),
    *A Bit of Cryptography*.
  prefs: []
  type: TYPE_NORMAL
- en: The hashing primitive is the backbone of the consensus algorithm - PoW's hash
    puzzle. The difficulty involved in solving the hash puzzle is what makes the blockchain
    immutable. If the quantum computing can provide faster brute-force methods to
    compute the hashes or break the one-way property of some of the existing hashing
    algorithms, the public ledger can be easily compromised even without performing
    any of the attacks mentioned earlier. But the growing difficulty of PoW-based blockchain
    networks, especially Bitcoin, prevents any kind of threats to the consensus algorithm,
    at least for several years.
  prefs: []
  type: TYPE_NORMAL
- en: A digital signature that uses asymmetric cryptography is widely used in blockchain
    applications. Quantum computing can be a great threat to asymmetric cryptography,
    where the private keys could be computed from the public keys. Since the entire
    internet security depends on either asymmetric or symmetric cryptography, the
    threat is not limited to blockchain technology alone. The digital signature and
    encryption techniques will evolve with time to face the threat of quantum computing.
  prefs: []
  type: TYPE_NORMAL
- en: The threat of quantum computing is real, and many groups have been working on
    solving any of the possible threats to the blockchain technology. The NEO blockchain
    promises a quantum safe (NeoQS) cryptographic mechanism that uses lattice-based
    cryptographic mechanisms. Quantum computing has also motivated many communities
    to venture into non-blockchain solutions, such as Hashgraph and DAG. It is clear
    that quantum computing will pose some threat to blockchain technology, but it
    may not be in the near future. Blockchain technology will evolve with time to
    ensure security against quantum computing when the time comes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explored various security aspects of blockchain technology. We
    covered some of the security models of the technology at the beginning of the
    chapter. Some issues related to the centralization caused by exchanges and mining
    pools were discussed as well. Various types of attacks on the blockchain network,
    such as double-spend attacks, 51 % attacks, and eclipse attacks were covered with
    some in-depth analysis. Together, we've covered how to design and deploy a blockchain
    platform securely.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll will look at how the implementation of blockchain
    technology is being falsely hyped in most use cases and analyze why blockchain
    technology doesn't add value to most of these applications.
  prefs: []
  type: TYPE_NORMAL
