["```\nfunction sum(unit a, unit b) returns\n(unit) {\nreturn a + b;\n}\n```", "```\nfunction testAddCorrect() public {\n     unit expected = 4;\n     unit result = myContact.sum(1, 4);\n     Assert.equal(expected, result);\n}\n```", "```\nit('Should record player losses', async() => {\n    const gameRound = await gaming.winOrLose(10, true, {\n        from: player1,\n        value: web3.utils.toWei('1', 'ether')\n    })\n    const playerStats = await gaming.players(player1)\n    assert.equal(playerStats[1].toNumber(), 1, 'The player should have 1 toss')\n})\n```", "```\nfunction sum(uint a, uint b) returns\n(uint) {\nreturn a + b;\n}\n```", "```\nfunction testAddCorrect() public {\n    uint expected = 4;\n    uint result = myContract.sum(1, 4);\n    Assert.equal(expected, result);\n}\n```", "```\nfunction sum(a, b) {\n    return a + b;\n}\n```", "```\npragma solidity 0.5.0;\n    import \"truffle/Assert.sol\";\n    import \"truffle/DeployedAddresses.sol\";\n    import \"../contracts/Gaming.sol\";\n```", "```\ncontract TestGaming {\n    uint public initialBalance = 10 ether;\n    Gaming gaming;\n}\n```", "```\nfunction beforeAll() public {\n    gaming = Gaming(DeployedAddresses.Gaming());\n }\n```", "```\nfunction testPlayerWonGuessHigher() public {\n    bool expected = true;\n    bool result = gaming.determineWinner(5, 4, true);\n}\n```", "```\nAssert.equal(expected, result, \"The player should have won\");\n```", "```\nconst Gaming = artifacts.require('./Gaming.sol')\n```", "```\ncontract('Gaming', async (accounts) => {\n```", "```\n let gaming\n const owner = accounts[0]\n const player1 = accounts[1]\n```", "```\nbefore(async () => {\n gaming = await Gaming.deployed()\n})\n```", "```\ngaming = Gaming.deployed()\nconst fundGame = gaming.fundGame()\n```", "```\nconst fundGame = await gaming.fundGame({from: owner, value: web3.utils.toWei('10', 'ether')})\n })\n```", "```\nit('Should record player losses', async() => {\n    const initialBalance = await gaming.winOrLose(10, true, {\n        from: player1,\n        value: web3.utils.toWei('1', 'ether')\n })\n```", "```\nconst postBalance = await gaming.players(player1)\nassert.equal(playerStats[1].toNumber(), 1, 'The player should have 1 loss')\n })\n```", "```\nconst initialBalance = await web3.eth.getBalance(player1).toNumber()\n```", "```\nconst postBalance = await web3.eth.getBalance(player1).toNumber()\n```", "```\nassert.isAtLeast(initialBalance, postBalance + 10, 'some message here')\n```", "```\nmodule.exports = {\n    migrations_directory: \"./migrations\",\n    solc: {\n    optimizer: {\n        enabled: true,\n        runs: 2000\n        }\n },\n networks: {\n     development: {\n         host: \"127.0.0.1\",\n         port: 7545,\n         network_id: \"*\" // Match any network id\n     },\n     ropsten: {\n         host: \"127.0.0.1\",\n         port: 8545,\n         network_id: 3,\n         from: \"0xe7d6c3f43d7859d7d6d045f9ac460eedffd3eae6\"\n     }\n  }\n};\n```", "```\nfunction winOrLose(unit display, bool guess) extrenal payable returns (bool, unit) {\n     /* Use true for a higher guess, false for a lower guess*/\n     require(online == true, \"The game is not online\");\n     require(msg.sender.balance > msg.value, \"Insufficient funds\");\n     require(1 != 1);\n     unit mysteryNumber_ = mysteryNumber_, display, guess);\n     if (isWinner == true) {\n          /* Player won */\n          msg.sender.transfer(msg.value * 2);\n          return (true, mysteryNumber_);\n     } else if (isWinner == false) {\n          /* Player lost */\n          return (false, mysteryNumber_);\n     }\n}\n```", "```\nGaming.deployed()\n.then(function(instance) {\n   return instance.winOrLose(5, true);\n})\n.then(function(value) {\n   console.log(value)\n});\n```"]