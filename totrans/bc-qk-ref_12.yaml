- en: Ethereum 101
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊 101
- en: In the previous chapters, we have studied in detail blockchain, Bitcoin, alternative
    cryptocurrencies, and crypto wallets. We discussed blockchain usage and benefits
    in not only currency-based applications, but other similar areas. We also discussed
    how Bitcoin has changed the landscape of blockchain usage for monetary benefits
    and how it has shaped the global economy.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们详细研究了区块链，比特币，替代加密货币和加密钱包。我们讨论了区块链在不仅是基于货币的应用程序中的用途和好处，而且在其他类似领域中的用途。我们还讨论了比特币如何改变了用于货币利益的区块链使用的格局以及它如何塑造了全球经济。
- en: 'In this chapter, we will be studying Ethereum blockchain in depth. It is currently
    the largest community-backed blockchain project, second to Bitcoin, with supporters
    and various projects and tokens running on top of it. In this chapter, we will
    discuss the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入研究以太坊区块链。它当前是最大的社区支持的区块链项目，仅次于比特币，支持者和各种项目和代币在其上运行。在本章中，我们将讨论以下主题：
- en: Ethereum accounts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊账户
- en: Ethereum network
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊网络
- en: Ethereum clients, such as Geth
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊客户端，比如Geth
- en: Execution environment for Ethereum blockchain projects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊区块链项目的执行环境
- en: Ethereum block
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊区块
- en: Ethereum virtual machine
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊虚拟机
- en: Using gas in an Ethereum transaction
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在以太坊交易中使用燃气
- en: Ether and Ether procurement methods
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太和以太获取方法
- en: Introducing Ethereum
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍以太坊
- en: Ethereum is a blockchain-based system with special scripting functionality that
    allows other developers to build decentralized and distributed applications on
    top of it. Ethereum is mostly known among developers for the easy development
    of decentralized applications. There are differences between Ethereum and blockchain.
    The most important difference is that Ethereum blockchain can run most decentralized
    applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊是一个基于区块链的系统，具有特殊的脚本功能，允许其他开发者在其上构建分散和分布式应用程序。以太坊在开发者中主要以易于开发分散应用程序而闻名。以太坊和区块链之间存在差异。最重要的区别是以太坊区块链可以运行大多数分散应用程序。
- en: Ethereum was conceptualized in late 2013 by Vitalik Buterin, cryptocurrency researcher
    and developer. It was funded by a crowd sale between July and August 2014\. Ethereum
    has built in Turing, a complete programming language, that is, a programming language
    meant to solve any computation complexity. This programming language is known
    as Solidity and is used to create contracts that help in creating decentralized
    applications on top of Ethereum.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊概念于2013年底由加密货币研究员和开发者Vitalik Buterin构想。它是通过2014年7月至8月间的众筹出售获得资金。以太坊内建了Turing完全编程语言，即用于解决任何计算复杂性的编程语言。这个编程语言被称为Solidity，用于创建合约，有助于在以太坊上创建分散应用程序。
- en: Ethereum was made live on July 30, 2015, with 11.9 million coins pre-mined for
    the crowd sale, to fund Ethereum development. The main internal cryptocurrency
    of Ethereum is known as **Ether**. It is known by the initialism **ETH**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊于2015年7月30日上线，预挖了11.9百万枚代币进行众筹，用于资助以太坊的发展。以太坊的主要内部加密货币被称为**以太**。它被称为首字母缩写**ETH**。
- en: Components of Ethereum
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊的组件
- en: Let's discuss some general components of Ethereum, its primary currency, network,
    and other details. This will help in understanding Ethereum in a much better way
    and also help us see how it is different to Bitcoin and why it has a huge community,
    currently making it the most important cryptocurrency and blockchain project,
    second only to the Bitcoin blockchain.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下以太坊的一些通用组件，其主要货币，网络以及其他细节。这将有助于更好地理解以太坊，也可以帮助我们看到与比特币的区别，以及为什么它拥有一个庞大的社区，目前使它成为最重要的加密货币和区块链项目，仅次于比特币区块链。
- en: Ethereum accounts
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊账户
- en: '**Ethereum accounts** play a prime role in the Ethereum blockchain. These accounts
    contain the wallet address as well as other details. There are two types of accounts:
    **Externally Owned Accounts** (**EOA**), which are controlled by private keys,
    and **Contract Accounts**,which are controlled by their contract code.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**以太坊账户**在以太坊区块链中起着重要作用。这些账户包含钱包地址以及其他细节。有两种类型的账户：**外部拥有账户**（**EOA**），由私钥控制，和**合约账户**，由它们的合同代码控制。'
- en: EOAs are similar to the accounts that are controlled with a private key in Bitcoin.
    Contract accounts have code associated with them, along with a private key. An
    externally owned account has an Ether balance and can send transactions, in the
    form of messages, from one account to another. On the other hand, a contract account
    can have an Ether balance and a contract code. When a contract account receives
    a message, the code is triggered to execute read or write functions on the internal
    storage or to send a message to another contract account.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: EOAs 类似于比特币中由私钥控制的账户。合约账户与代码相关联，并带有私钥。外部拥有账户具有以太余额，并且可以发送交易，以消息的形式，从一个账户发送到另一个账户。另一方面，合约账户可以有以太余额和合约代码。当合约账户接收到消息时，代码会被触发以执行对内部存储的读取或写入功能，或者向另一个合约账户发送消息。
- en: Ethereum network
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊网络
- en: 'Two Ethereum nodes can connect only if they have the same genesis block and
    the same network ID. Based on usage, the Ethereum network is divided into three
    types:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 只有两个以太坊节点具有相同的创世区块和相同的网络 ID 才能连接。根据使用情况，以太坊网络分为三种类型：
- en: '**MainNet**: This is the current live network of Ethereum; as of now the latest
    version of MainNet is called **homestead**.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MainNet**：这是以太坊当前的实时网络；目前最新版本的 MainNet 称为**homestead**。'
- en: '**TestNet**: This is used for testing purposes, for testing smart contracts
    and DApps by developers, before the contracts are deployed on to the blockchain.
    The latest version of TestNet is called **Ropsten**.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TestNet**：这用于测试目的，供开发人员在将合约部署到区块链之前测试智能合约和 DApps。最新版本的 TestNet 称为**Ropsten**。'
- en: '**PrivateNet**: This is used to create a permissioned blockchain by generating
    a new genesis block.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PrivateNet**：这用于通过生成新的创世区块来创建权限区块链。'
- en: All of the preceding types are the same, apart from the fact that each of them
    has a different genesis block and network ID; they help to differentiate between
    various contract accounts and externally owned accounts, and if any contract is
    running a different genesis, then they use a different network ID to distinguish
    it from other contract accounts.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所有前述类型相同，除了它们每个都有不同的创世区块和网络 ID；它们有助于区分各种合约账户和外部拥有账户，如果任何合约正在运行不同的创世区块，那么它们将使用不同的网络
    ID 来区分它与其他合约账户。
- en: 'There are some network IDs that are used officially by Ethereum. The rest of
    the network IDs can be used by contract accounts. Here are some of the known IDs:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊正式使用一些网络 ID。其余的网络 ID 可以由合约账户使用。以下是一些已知的 ID：
- en: '**0**: This is the Ethereum public prerelease Testnet, and it is known by the
    project name Olympic.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**0**：这是以太坊公共预发布测试网，以项目名称奥林匹克（Olympic）而闻名。'
- en: '**1**: This ID is the Ethereum public main network; it has had many versions:
    Frontier, Homestead, and Metropolis. We will be discussing public MainNet more
    in future sections.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**1**：此 ID 是以太坊公共主网络；它已经有许多版本：Frontier、Homestead 和 Metropolis。我们将在未来的部分中更多地讨论公共
    MainNet。'
- en: '**2**: This was the ID used by initial Testnet; it was deprecated in late 2016.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2**：这是最初的测试网所使用的 ID；在2016年末被弃用。'
- en: '**3**: This is the most recent Testnet at the time of writing this book. It
    was launched in late 2016, since the older Testnet was having multiple issues.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3**：这是书写本书时最新的测试网。它于2016年末启动，因为旧的测试网出现了多个问题。'
- en: '**4**: This is a public Testnet, in which a PoA consensus is being tried out.
    It is known as **Rinkeby**.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**4**：这是一个公共测试网，正在尝试 PoA 共识。它被称为**Rinkeby**。'
- en: Ethereum public MainNet
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊公共 MainNet
- en: 'The public MainNet has a network ID of 1, but since Ethereum has a very active
    community backing it, there are various updates and upgrades happening to the
    Ethereum blockchain; primarily, there are four stages of the Ethereum network;
    let''s discuss each of them in detail:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 公共 MainNet 的网络 ID 为 1，但由于以太坊拥有一个非常活跃的社区支持，因此以太坊区块链正在进行各种更新和升级；主要有四个阶段的以太坊网络；让我们详细讨论每个阶段：
- en: '**Frontier**: This is the first official public main network; it was launched
    in mid 2015.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Frontier**：这是第一个正式的公共主网络；于2015年中期启动。'
- en: '**Homestead**: This was one of the major upgrades in March 2016.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Homestead**：这是2016年3月的一次重大升级。'
- en: '**Metropolis**: This upgrade stage will be bringing a lot of upgrades to the
    Ethereum blockchain. This upgrade will be implemented by a hard fork and is divided
    into two phases, **Byzantium** and **Constantinople**.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Metropolis**：这个升级阶段将给以太坊区块链带来许多升级。这个升级将通过硬分叉实施，分为两个阶段，**拜占庭**和**君士坦丁堡**。'
- en: '**Serenity**: This release of Ethereum will move the consensus from PoW to
    **Proof of Stake** (**PoS**). This is essentially being introduced to reduce the
    power consumption of the Ethereum network.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Serenity**：以太坊的这一版本将共识从PoW转移到**权益证明**（**PoS**）。这本质上是为了降低以太坊网络的功耗。'
- en: Ethereum clients
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊客户端
- en: Clients are implementations of the Ethereum blockchain; they have various features.
    In addition to having a regular wallet, a user can watch smart contracts, deploy
    smart contracts, clear multiple Ether accounts, store an Ether balance, and perform
    mining to be a part of the PoW consensus protocol.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端是以太坊区块链的实现；它们具有各种功能。除了拥有常规钱包外，用户还可以观察智能合约、部署智能合约、清理多个以太币账户、存储以太币余额，并进行挖矿以参与PoW共识协议。
- en: 'There are various clients in numerous languages, some officially developed
    by the Ethereum Foundation and some supported by other developers:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种各样的客户端使用不同的编程语言，一些由以太坊基金会官方开发，一些由其他开发者支持：
- en: '**Geth**: Based on the Go programming language, sometimes also known as **go-ethereum**'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Geth**：基于Go编程语言，有时也被称为**go-ethereum**'
- en: '**Parity**: Based on the Rust programming language, and developed by Ethcore'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Parity**：基于Rust编程语言，由Ethcore开发'
- en: '**cpp-ethereum**: Built on C++ and officially developed by the Ethereum Foundation'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cpp-ethereum**：基于C++构建，由以太坊基金会官方开发'
- en: '**Pyethapp**: Based on the Python programming language, and officially developed
    by Ethereum'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pyethapp**：基于Python编程语言，由以太坊官方开发'
- en: '**ethereumjs-lib**: Based on the JavaScript programming language'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ethereumjs-lib**：基于JavaScript编程语言'
- en: '**Ethereum(j)**: A Java-based client, developed by Ether camp'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以太坊（Java）**：由Ether camp开发的基于Java的客户端'
- en: '**ruby-ethereum**: A Ruby-based client, developed by Jan Xie'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ruby-ethereum**：由Jan Xie开发的基于Ruby的客户端'
- en: '**ethereumH**: A Haskell-based client, developed and maintained by BlockApps'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ethereumH**：由BlockApps开发和维护的基于Haskell的客户端'
- en: The preceding list consists of some of the most prominent Ethereum-specific
    clients currently in production. There are many other clients apart from these
    that are not heavily community-backed or are in their development phase. Now let's
    discuss the most prominent Ethereum client—**Geth**, or **go-ethereum**.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列表包括目前在生产中使用的一些最显著的以太坊特定客户端。除了这些之外，还有许多其他客户端，它们不是由社区大力支持，或者处于开发阶段。现在让我们讨论最显著的以太坊客户端——**Geth**，或**go-ethereum**。
- en: Geth
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Geth
- en: 'This is one of the most widely used Ethereum clients built on Golang; it is
    a command-line interface for running a full Ethereum node. It was part of the
    Frontier release and currently also supports Homestead. Geth can allow its user
    to perform the following various actions:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是目前在Golang上构建的最广泛使用的以太坊客户端之一；它是运行完整以太坊节点的命令行界面。它是Frontier版本的一部分，目前也支持Homestead。Geth可以允许其用户执行以下各种操作：
- en: Mining Ether
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挖矿以太币
- en: Creating and managing accounts
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和管理账户
- en: Transferring Ether between two Ethereum accounts
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在两个以太坊账户之间转移以太币
- en: Creating, testing, and deploying smart contracts
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建、测试和部署智能合约
- en: Exploring block history
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索区块历史
- en: Installing Geth
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Geth
- en: 'Geth can be installed using the following commands on Ubuntu systems:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令在Ubuntu系统上安装Geth：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After installation, run `geth account new` to create an account on your node.
    Various options and commands can be checked by using the `geth --help` command.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，运行`geth account new`来在你的节点上创建一个账户。可以使用`geth --help`命令来查看各种选项和命令。
- en: On Windows-based systems, it is much easier to install Geth by simply downloading
    the latest version from [https://geth.ethereum.org/downloads/](https://geth.ethereum.org/downloads/)
    and then downloading the required `zip` file, post-extracting the `zip` file,
    and opening the `geth.exe` program.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于Windows的系统上，通过从[https://geth.ethereum.org/downloads/](https://geth.ethereum.org/downloads/)下载最新版本，然后下载所需的`zip`文件，解压缩`zip`文件，并打开`geth.exe`程序，可以更容易地安装Geth。
- en: Managing accounts
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理账户
- en: 'Geth provides account management, using the `account` command. Some of the
    most-used commands related to account management on Geth are as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Geth提供账户管理，使用`account`命令。有关Geth上与账户管理相关的最常用命令如下：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot is the output that will be generated after executing
    the preceding code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是执行上述代码后生成的输出：
- en: '![](img/dfed226d-ec50-4f46-ac2d-6a6af1691ee5.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dfed226d-ec50-4f46-ac2d-6a6af1691ee5.png)'
- en: 'When we run the command to create a new account, Geth provides us with an address
    on our blockchain:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行创建新账户的命令时，Geth会在我们的区块链上提供一个地址：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When we run the `list` command, it provides a list of accounts that are associated
    with the custom keystore directory:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`list`命令时，它会提供与自定义密钥存储目录关联的帐户列表：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We will be discussing mining and contract development in later chapters.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后续章节讨论挖矿和合约开发。
- en: Ethereum gas
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊气体
- en: Every transaction on the Ethereum blockchain is required to cover the computation
    cost; this is done by paying *gas* to the transaction originator. Each of the
    operations performed by the transaction has some amount of gas associated with
    it.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊区块链上的每个交易都需要支付计算成本；这是通过向交易发起者支付*气体*来实现的。交易执行的每个操作都与一定数量的气体相关联。
- en: The amount of gas required for each transaction is directly dependent on the
    number of operations to be performed—basically, to cover the entire computation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 每个交易所需的气体量直接取决于要执行的操作数，基本上是为了覆盖整个计算。
- en: 'In simple terms, gas is required to pay for every transaction performed on
    the Ethereum blockchain. The minimum price of gas is 1 Wei (smallest unit of ether),
    but this increases or decreases based on various factors. The following is a graph
    that shows the fluctuation in the price of Ethereum gas:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，以太坊区块链上的每个交易都需要用气体付费。气体的最低价格是1 Wei（以太币的最小单位），但这根据各种因素而增加或减少。以下是显示以太坊气体价格波动的图表：
- en: '![](img/702526dd-ad68-4088-b4fd-a5fa29a97f6e.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/702526dd-ad68-4088-b4fd-a5fa29a97f6e.png)'
- en: Ethereum virtual machine
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊虚拟机
- en: '**Ethereum virtual machine** (**EVM**) is a simple stack-based execution machine
    and acts as a runtime environment for the smart contracts. The word size of EVM
    is 256-bits, which is also the size limit for each stack item. The stack has a
    maximum size of 1,024 elements and works on the **Last in Firs****t** **Out** (**LIFO**)
    queue system. EVM is a Turing-complete machine but is limited by the amount of
    gas that is required to run any instructions. Gas acts as a propellant with computation
    credits, which makes sure any faulty code or infinite loops cannot run, as the
    machine will stop executing instructions once the gas is exhausted. The following
    diagram illustrates an EVM stack:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**以太坊虚拟机**（**EVM**）是一个简单的基于堆栈的执行机器，充当智能合约的运行环境。EVM的字长为256位，这也是每个堆栈项的大小限制。堆栈的最大大小为1,024个元素，并且采用**后进先出**（**LIFO**）队列系统。EVM是一个图灵完备的机器，但受到运行任何指令所需的气体量的限制。气体充当一种推进剂，具有计算信用，这确保了任何错误代码或无限循环都无法运行，因为一旦气体用尽，机器将停止执行指令。以下图表显示了一个EVM堆栈：'
- en: '![](img/aca32d42-7224-4fc6-b0d0-5ce8e759af34.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aca32d42-7224-4fc6-b0d0-5ce8e759af34.png)'
- en: EVM supports exception handling in case of an exception occurring, or if there
    is insufficient gas or invalid instructions. In such cases, the EVM halts and
    returns an error to the executing node. The exception when gas is exhausted is
    commonly known as an **Out-of-Gas** (**OOG**) exception.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: EVM在发生异常、气体不足或指令无效时支持异常处理。在这种情况下，EVM会停止并向执行节点返回错误。气体耗尽时的异常通常称为**耗尽气体**（**OOG**）异常。
- en: 'There are two types of storage available to contracts and EVM: one is memory,
    and the other is called storage. Memory acts just like RAM, and it is cleared
    when the code is fully executed. Storage is permanently stored on the blockchain.
    EVM is fully isolated, and the storage is independent in terms of storage or memory
    access, as shown in the following diagram:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 合约和EVM可用的存储有两种类型：一种是内存，另一种称为存储。内存就像RAM一样，并且在代码完全执行时清除。存储永久存储在区块链上。EVM是完全隔离的，存储在存储或内存访问方面是独立的，如下图所示：
- en: '![](img/f9cc7d42-7c76-41a0-b02f-f5c7ae38fa23.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9cc7d42-7c76-41a0-b02f-f5c7ae38fa23.png)'
- en: The storage directly accessible by EVM is **Word Array**, which is non-volatile
    and is part of the system state. The program code is stored in virtual ROM, which
    is accessible using the **CODECOPY**, which basically copies the code from the
    current environment to the memory.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: EVM直接可访问的存储是**字数组**，它是非易失性的，并且是系统状态的一部分。程序代码存储在虚拟ROM中，可以使用**CODECOPY**访问，它基本上是将代码从当前环境复制到内存中。
- en: Execution environment
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行环境
- en: 'Apart from system state and gas, there are various other elements and information
    that is required in the execution environment where the execution node must be
    provided to the EVM:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 除了系统状态和气体外，还需要在执行环境中提供执行节点必须的各种其他元素和信息：
- en: Address of the account that owns the execution code.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有执行代码的帐户的地址。
- en: Sender address of the transaction that originated the execution.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易发起方地址。
- en: Originating address of the execution.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行的起始地址。
- en: Gas price of the transaction that initiated the execution.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发起执行的交易的燃气价格。
- en: Input data or the transaction data, depending on the executing agent type. If
    the execution node is a transaction, then the transaction data is included as
    input data.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入数据或交易数据，取决于执行代理类型。如果执行节点是一个交易，则交易数据将被包含为输入数据。
- en: Address of the account that initiated the code execution or the transaction
    sender. This is the address of the sender if the initiation is by a transaction,
    or else the address of the account.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发起代码执行或交易发起方的帐户地址。如果启动是通过交易，则为发送方的地址，否则为帐户的地址。
- en: Transaction value—this amount is in Wei (the smallest unit of Ether). If the
    execution agent is a transaction, then it is the value of the transaction.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易价值——此金额以 Wei（以太最小单位）表示。如果执行代理是一个交易，则它是交易的价值。
- en: The code to be executed, presented as a byte array that the iterator function
    can execute in cycles.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要执行的代码，呈现为迭代函数可以循环执行的字节数组。
- en: Block header of the present block.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前区块的区块头。
- en: Number of message calls or contract-creation transactions in execution—that
    is, the number of CALLs or CREATEs being executed in the current cycle of execution.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行中的消息调用或合约创建交易的数量——即，在当前执行周期中正在执行的 CALL 或 CREATE 数量。
- en: Ethereum block
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊区块
- en: 'The Ethereum blockchain is a collection of required parameters similar to a
    Bitcoin blockchain; here are the primary elements of an Ethereum block:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊区块链是一组类似于比特币区块链的必需参数的集合；以下是以太坊区块的主要元素：
- en: Block header
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块头
- en: Transaction list
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易列表
- en: List of headers of uncles/ommers
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未确认叔/OMMer的标题列表
- en: Block header
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块头
- en: 'A block header is a collection of various valuable information, which defines
    the existence of the block in the Ethereum blockchain. Take a look at the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 区块头是各种宝贵信息的集合，定义了区块在以太坊区块链中的存在。看看以下内容：
- en: '**Parent hash**: The Keccak 256-bit hash of the parent block''s header.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**父哈希**：父区块头的 Keccak 256 位哈希。'
- en: '**Ommers hash**: The Keccak 256-bit hash of the ommers (uncles) list of this
    block.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**叔/OMMer哈希**：该区块的叔/OMMer列表的 Keccak 256 位哈希。'
- en: '**Beneficiary**: The 160-bit address to which all fees from the mining of this
    block are collected.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**受益人**：此区块挖矿收集所有费用的 160 位地址。'
- en: '**State root**: The Keccak 256-bit hash of the root node of the state trie.
    It is calculated once all the transactions are processed and executed.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态根**：状态 trie 根节点的 Keccak 256 位哈希。它在所有交易被处理和执行后计算。'
- en: '**Transactions root**: The keccak 256-bit hash of the root node of the trie
    structure. The transaction trie represents the list of transactions included in
    this block.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交易根**：trie 结构根节点的 keccak 256 位哈希。交易 trie 表示包含在此区块中的交易列表。'
- en: '**Receipts root**: This is the keccak 256-bit hash of the root node of the
    trie structure. This trie is formed of receipts of all the transactions included
    in the block. The receipts are generated after a successful execution of each
    transaction.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**收据根**：这是基于 trie 结构根节点的 keccak 256 位哈希。这个 trie 由包含在区块中的所有交易的收据组成。收据是在每个交易成功执行后生成的。'
- en: '**Logs bloom**: This is a bloom filter that is composed of the logger address
    and the log topics from the logs of each transaction receipt of the included transaction
    list of the block.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志布隆**：这是由包含区块的每个交易收据的日志记录器地址和日志主题组成的布隆过滤器。'
- en: '**Difficulty**: This is the difficulty level of each block. This is calculated
    by the previous block''s difficulty and timestamp.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**难度**：每个区块的难度级别。这是通过前一个区块的难度和时间戳计算的。'
- en: '**Number**: This is the total number of the previous blocks; the genesis block
    has a number of zero.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编号**：这是先前区块的总数；创世区块的编号为零。'
- en: '**Gas limit**: The limit set on the gas consumption of the current block.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gas 限制**：当前区块的燃料消耗上限。'
- en: '**Gas used**: The total gas consumed by the transactions included in the block.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已使用 Gas**：包含在区块中的交易消耗的总燃料。'
- en: '**Timestamp**: This is the epoch Unix time of the time of the block initialization.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间戳**：这是区块初始化时间的时代 Unix 时间。'
- en: '**Extra data**: This file can be used to store arbitrary data related to this
    block. It must be 32 bytes max in size.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**额外数据**：此文件可用于存储与此区块相关的任意数据。它的大小必须不超过 32 个字节。'
- en: '**Mixhash**: This contains a 256-bit hash that is combined with the nonce;
    it is used to prove that sufficient computation power is consumed to mine the
    block, part of the PoW mechanism.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mixhash**：这包含一个 256 位哈希，与 nonce 结合使用；它用于证明已消耗足够的计算能力来挖掘块，是 PoW 机制的一部分。'
- en: '**Nonce**: This is a 64-bit hash that is used to prove (along with the mix
    hash field) that adequate computation effort has been spent to create this block.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nonce**：这是一个 64 位哈希，用于证明（与 mix hash 字段一起）已花费足够的计算工作来创建此块。'
- en: 'The following diagram shows the structure of a block''s headers:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了一个块头的结构：
- en: '![](img/e0bdfb1c-d3e4-4db7-b458-e71c0bd8efae.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0bdfb1c-d3e4-4db7-b458-e71c0bd8efae.png)'
- en: Ommers or uncles
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 乌姆和叔叔
- en: Ethereum incentivizes miners to include a list of uncles or ommers when a block
    is mined, up to to a certain limit. Although in Bitcoin, if a block is mined at
    the same height, or if a block contains no transaction, it is considered useless;
    this is not the case with Ethereum. The main reason to include uncles and have
    them as an essential part of the Ethereum blockchain is that they decrease the
    chance of an attack occurring by 51%, because they discourage centralization.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当挖掘出一个块时，以太坊激励矿工包含一个姑妈或叔叔列表，直到达到一定的限制。尽管在比特币中，如果在相同高度挖掘出一个块，或者如果一个块不包含交易，那么它被认为是无用的；但在以太坊中并非如此。包括叔叔并将它们作为以太坊区块链的一个重要部分的主要原因是，它们减少了发生攻击的可能性，因为它们阻止了中心化。
- en: Messages
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息
- en: The message is the data and the value that is passed between two accounts. This
    data packet contains the data and the value (amount of ether). A message can be
    sent between contract accounts or externally owned accounts in the form of transactions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 消息是在两个账户之间传递的数据和价值。此数据包含数据和价值（乙醚金额）。消息可以在合同账户或外部拥有的账户之间以交易的形式发送。
- en: Ethash
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ethash
- en: '**Ethash** is the **Proof of Work** (**PoW**) algorithm used in Ethereum. It
    is the latest version of the Dagger–Hashimoto algorithm. It is similar to Bitcoin,
    although there is one difference—Ethash is a memory-intensive algorithm; hence,
    it is difficult to implement ASICs for the same. Ethash uses the Keccak hash function,
    which is now standardized to SHA-3.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ethash** 是以太坊中使用的**工作证明**（**PoW**）算法。它是 Dagger–Hashimoto 算法的最新版本。它类似于比特币，尽管有一个区别—Ethash
    是一种内存密集型算法；因此，难以为其实施 ASIC。Ethash 使用 Keccak 哈希函数，该函数现在已标准化为 SHA-3。'
- en: Ether
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 乙醚
- en: '**Ether** is the main cryptocurrency associated with the Ethereum blockchain;
    each of the contract accounts can create their own currency, but Ether is used
    within the Ethereum blockchain to pay for the execution of the contracts on the
    EVM. Ether is used for purchasing gas, and the smallest unit of Ether is used
    as the unit of gas.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**乙醚**是与以太坊区块链相关联的主要加密货币；每个合同账户都可以创建自己的货币，但在以太坊区块链内使用乙醚支付对 EVM 上合同的执行。乙醚用于购买
    gas，而乙醚的最小单位用作 gas 的单位。'
- en: 'Since Wei is the smallest unit of Wei, here is a table, listing the denominations
    and the name commonly used for them, along with the associated value:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Wei 是最小的 Wei 单位，因此这里列出了一个表格，列出了各种面额及其常用名称，以及相关值：
- en: '![](img/e5ffe6bd-d275-4740-8698-8121816db435.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5ffe6bd-d275-4740-8698-8121816db435.png)'
- en: Procuring ether
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采购乙醚
- en: 'There are various ways by which Ether can be procured for trading, building
    smart contracts, or decentralized applications:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种方式可以获得乙醚进行交易、构建智能合约或分散应用程序：
- en: Mining of Ethers, by either joining a mining pool or doing solo mining
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过加入挖矿池或进行独立挖矿来挖掘乙醚
- en: Trade using a crypto exchange platform, and exchange from any other cryptocurrency
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用加密货币交易平台进行交易，并与任何其他加密货币交换
- en: Buying Ether from any fiat currency—there are various exchanges that allow the
    purchasing of Ether from fiat currency
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从任何法定货币购买乙醚—有各种交易所允许从法定货币购买乙醚
- en: Trading
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易
- en: 'Due to its vast community support and major active development, Ether has always
    been a preferred investment opportunity for everyone. There are more than 500
    known exchanges that support the exchange of Ether among other cryptocurrencies
    or fiat currencies. Here is a price chart, showing the fluctuation of Ether price
    from April 17, 2018 to May 17, 2018:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其庞大的社区支持和主要的积极发展，乙醚一直是每个人首选的投资机会。已知有超过 500 个交易所支持乙醚与其他加密货币或法定货币的交换。这里有一个价格图表，显示了从
    2018 年 4 月 17 日到 2018 年 5 月 17 日的乙醚价格波动情况：
- en: '![](img/52d1679e-fb0e-461c-aac5-b97f5b0b4e60.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52d1679e-fb0e-461c-aac5-b97f5b0b4e60.png)'
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed various components of Ethereum, its execution,
    network, and accounts, and there was a detailed study of Ethereum's clients. We
    also discussed gas and EVM, including its environment and how an execution process
    works. Finally, we discussed the Ethereum block and its block header, the Ethereum
    algorithm, and the procurement of ether.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了以太坊的各种组成部分，包括其执行、网络和账户，还对以太坊的客户端进行了详细研究。我们还讨论了燃气和EVM，包括其环境以及执行过程的工作原理。最后，我们讨论了以太坊块及其块头，以太坊算法，以及以太的获取。
- en: In the next chapter, we will learn about **Solidity**, the official and standard
    language for contract writing on Ethereum blockchain. Learning about Solidity
    will help us gain a better understanding of smart contract development and deployment.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习**Solidity**，这是以太坊区块链上合约编写的官方标准语言。学习Solidity将帮助我们更好地理解智能合约的开发和部署。
