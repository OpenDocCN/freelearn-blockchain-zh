- en: Ethereum 101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we have studied in detail blockchain, Bitcoin, alternative
    cryptocurrencies, and crypto wallets. We discussed blockchain usage and benefits
    in not only currency-based applications, but other similar areas. We also discussed
    how Bitcoin has changed the landscape of blockchain usage for monetary benefits
    and how it has shaped the global economy.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be studying Ethereum blockchain in depth. It is currently
    the largest community-backed blockchain project, second to Bitcoin, with supporters
    and various projects and tokens running on top of it. In this chapter, we will
    discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum clients, such as Geth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execution environment for Ethereum blockchain projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum block
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using gas in an Ethereum transaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ether and Ether procurement methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Ethereum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ethereum is a blockchain-based system with special scripting functionality that
    allows other developers to build decentralized and distributed applications on
    top of it. Ethereum is mostly known among developers for the easy development
    of decentralized applications. There are differences between Ethereum and blockchain.
    The most important difference is that Ethereum blockchain can run most decentralized
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum was conceptualized in late 2013 by Vitalik Buterin, cryptocurrency researcher
    and developer. It was funded by a crowd sale between July and August 2014\. Ethereum
    has built in Turing, a complete programming language, that is, a programming language
    meant to solve any computation complexity. This programming language is known
    as Solidity and is used to create contracts that help in creating decentralized
    applications on top of Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum was made live on July 30, 2015, with 11.9 million coins pre-mined for
    the crowd sale, to fund Ethereum development. The main internal cryptocurrency
    of Ethereum is known as **Ether**. It is known by the initialism **ETH**.
  prefs: []
  type: TYPE_NORMAL
- en: Components of Ethereum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's discuss some general components of Ethereum, its primary currency, network,
    and other details. This will help in understanding Ethereum in a much better way
    and also help us see how it is different to Bitcoin and why it has a huge community,
    currently making it the most important cryptocurrency and blockchain project,
    second only to the Bitcoin blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Ethereum accounts** play a prime role in the Ethereum blockchain. These accounts
    contain the wallet address as well as other details. There are two types of accounts:
    **Externally Owned Accounts** (**EOA**), which are controlled by private keys,
    and **Contract Accounts**,which are controlled by their contract code.'
  prefs: []
  type: TYPE_NORMAL
- en: EOAs are similar to the accounts that are controlled with a private key in Bitcoin.
    Contract accounts have code associated with them, along with a private key. An
    externally owned account has an Ether balance and can send transactions, in the
    form of messages, from one account to another. On the other hand, a contract account
    can have an Ether balance and a contract code. When a contract account receives
    a message, the code is triggered to execute read or write functions on the internal
    storage or to send a message to another contract account.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Two Ethereum nodes can connect only if they have the same genesis block and
    the same network ID. Based on usage, the Ethereum network is divided into three
    types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MainNet**: This is the current live network of Ethereum; as of now the latest
    version of MainNet is called **homestead**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TestNet**: This is used for testing purposes, for testing smart contracts
    and DApps by developers, before the contracts are deployed on to the blockchain.
    The latest version of TestNet is called **Ropsten**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PrivateNet**: This is used to create a permissioned blockchain by generating
    a new genesis block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of the preceding types are the same, apart from the fact that each of them
    has a different genesis block and network ID; they help to differentiate between
    various contract accounts and externally owned accounts, and if any contract is
    running a different genesis, then they use a different network ID to distinguish
    it from other contract accounts.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some network IDs that are used officially by Ethereum. The rest of
    the network IDs can be used by contract accounts. Here are some of the known IDs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**0**: This is the Ethereum public prerelease Testnet, and it is known by the
    project name Olympic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**1**: This ID is the Ethereum public main network; it has had many versions:
    Frontier, Homestead, and Metropolis. We will be discussing public MainNet more
    in future sections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2**: This was the ID used by initial Testnet; it was deprecated in late 2016.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**3**: This is the most recent Testnet at the time of writing this book. It
    was launched in late 2016, since the older Testnet was having multiple issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**4**: This is a public Testnet, in which a PoA consensus is being tried out.
    It is known as **Rinkeby**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum public MainNet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The public MainNet has a network ID of 1, but since Ethereum has a very active
    community backing it, there are various updates and upgrades happening to the
    Ethereum blockchain; primarily, there are four stages of the Ethereum network;
    let''s discuss each of them in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Frontier**: This is the first official public main network; it was launched
    in mid 2015.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Homestead**: This was one of the major upgrades in March 2016.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metropolis**: This upgrade stage will be bringing a lot of upgrades to the
    Ethereum blockchain. This upgrade will be implemented by a hard fork and is divided
    into two phases, **Byzantium** and **Constantinople**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Serenity**: This release of Ethereum will move the consensus from PoW to
    **Proof of Stake** (**PoS**). This is essentially being introduced to reduce the
    power consumption of the Ethereum network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Clients are implementations of the Ethereum blockchain; they have various features.
    In addition to having a regular wallet, a user can watch smart contracts, deploy
    smart contracts, clear multiple Ether accounts, store an Ether balance, and perform
    mining to be a part of the PoW consensus protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various clients in numerous languages, some officially developed
    by the Ethereum Foundation and some supported by other developers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Geth**: Based on the Go programming language, sometimes also known as **go-ethereum**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parity**: Based on the Rust programming language, and developed by Ethcore'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cpp-ethereum**: Built on C++ and officially developed by the Ethereum Foundation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pyethapp**: Based on the Python programming language, and officially developed
    by Ethereum'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ethereumjs-lib**: Based on the JavaScript programming language'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ethereum(j)**: A Java-based client, developed by Ether camp'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ruby-ethereum**: A Ruby-based client, developed by Jan Xie'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ethereumH**: A Haskell-based client, developed and maintained by BlockApps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding list consists of some of the most prominent Ethereum-specific
    clients currently in production. There are many other clients apart from these
    that are not heavily community-backed or are in their development phase. Now let's
    discuss the most prominent Ethereum client—**Geth**, or **go-ethereum**.
  prefs: []
  type: TYPE_NORMAL
- en: Geth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is one of the most widely used Ethereum clients built on Golang; it is
    a command-line interface for running a full Ethereum node. It was part of the
    Frontier release and currently also supports Homestead. Geth can allow its user
    to perform the following various actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Mining Ether
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and managing accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transferring Ether between two Ethereum accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating, testing, and deploying smart contracts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring block history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Geth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Geth can be installed using the following commands on Ubuntu systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After installation, run `geth account new` to create an account on your node.
    Various options and commands can be checked by using the `geth --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows-based systems, it is much easier to install Geth by simply downloading
    the latest version from [https://geth.ethereum.org/downloads/](https://geth.ethereum.org/downloads/)
    and then downloading the required `zip` file, post-extracting the `zip` file,
    and opening the `geth.exe` program.
  prefs: []
  type: TYPE_NORMAL
- en: Managing accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Geth provides account management, using the `account` command. Some of the
    most-used commands related to account management on Geth are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is the output that will be generated after executing
    the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfed226d-ec50-4f46-ac2d-6a6af1691ee5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When we run the command to create a new account, Geth provides us with an address
    on our blockchain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the `list` command, it provides a list of accounts that are associated
    with the custom keystore directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We will be discussing mining and contract development in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum gas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every transaction on the Ethereum blockchain is required to cover the computation
    cost; this is done by paying *gas* to the transaction originator. Each of the
    operations performed by the transaction has some amount of gas associated with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: The amount of gas required for each transaction is directly dependent on the
    number of operations to be performed—basically, to cover the entire computation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In simple terms, gas is required to pay for every transaction performed on
    the Ethereum blockchain. The minimum price of gas is 1 Wei (smallest unit of ether),
    but this increases or decreases based on various factors. The following is a graph
    that shows the fluctuation in the price of Ethereum gas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/702526dd-ad68-4088-b4fd-a5fa29a97f6e.png)'
  prefs: []
  type: TYPE_IMG
- en: Ethereum virtual machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Ethereum virtual machine** (**EVM**) is a simple stack-based execution machine
    and acts as a runtime environment for the smart contracts. The word size of EVM
    is 256-bits, which is also the size limit for each stack item. The stack has a
    maximum size of 1,024 elements and works on the **Last in Firs****t** **Out** (**LIFO**)
    queue system. EVM is a Turing-complete machine but is limited by the amount of
    gas that is required to run any instructions. Gas acts as a propellant with computation
    credits, which makes sure any faulty code or infinite loops cannot run, as the
    machine will stop executing instructions once the gas is exhausted. The following
    diagram illustrates an EVM stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aca32d42-7224-4fc6-b0d0-5ce8e759af34.png)'
  prefs: []
  type: TYPE_IMG
- en: EVM supports exception handling in case of an exception occurring, or if there
    is insufficient gas or invalid instructions. In such cases, the EVM halts and
    returns an error to the executing node. The exception when gas is exhausted is
    commonly known as an **Out-of-Gas** (**OOG**) exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of storage available to contracts and EVM: one is memory,
    and the other is called storage. Memory acts just like RAM, and it is cleared
    when the code is fully executed. Storage is permanently stored on the blockchain.
    EVM is fully isolated, and the storage is independent in terms of storage or memory
    access, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f9cc7d42-7c76-41a0-b02f-f5c7ae38fa23.png)'
  prefs: []
  type: TYPE_IMG
- en: The storage directly accessible by EVM is **Word Array**, which is non-volatile
    and is part of the system state. The program code is stored in virtual ROM, which
    is accessible using the **CODECOPY**, which basically copies the code from the
    current environment to the memory.
  prefs: []
  type: TYPE_NORMAL
- en: Execution environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apart from system state and gas, there are various other elements and information
    that is required in the execution environment where the execution node must be
    provided to the EVM:'
  prefs: []
  type: TYPE_NORMAL
- en: Address of the account that owns the execution code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sender address of the transaction that originated the execution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Originating address of the execution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gas price of the transaction that initiated the execution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input data or the transaction data, depending on the executing agent type. If
    the execution node is a transaction, then the transaction data is included as
    input data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Address of the account that initiated the code execution or the transaction
    sender. This is the address of the sender if the initiation is by a transaction,
    or else the address of the account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction value—this amount is in Wei (the smallest unit of Ether). If the
    execution agent is a transaction, then it is the value of the transaction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code to be executed, presented as a byte array that the iterator function
    can execute in cycles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block header of the present block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of message calls or contract-creation transactions in execution—that
    is, the number of CALLs or CREATEs being executed in the current cycle of execution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum block
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Ethereum blockchain is a collection of required parameters similar to a
    Bitcoin blockchain; here are the primary elements of an Ethereum block:'
  prefs: []
  type: TYPE_NORMAL
- en: Block header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of headers of uncles/ommers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A block header is a collection of various valuable information, which defines
    the existence of the block in the Ethereum blockchain. Take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Parent hash**: The Keccak 256-bit hash of the parent block''s header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ommers hash**: The Keccak 256-bit hash of the ommers (uncles) list of this
    block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Beneficiary**: The 160-bit address to which all fees from the mining of this
    block are collected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**State root**: The Keccak 256-bit hash of the root node of the state trie.
    It is calculated once all the transactions are processed and executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transactions root**: The keccak 256-bit hash of the root node of the trie
    structure. The transaction trie represents the list of transactions included in
    this block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Receipts root**: This is the keccak 256-bit hash of the root node of the
    trie structure. This trie is formed of receipts of all the transactions included
    in the block. The receipts are generated after a successful execution of each
    transaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logs bloom**: This is a bloom filter that is composed of the logger address
    and the log topics from the logs of each transaction receipt of the included transaction
    list of the block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Difficulty**: This is the difficulty level of each block. This is calculated
    by the previous block''s difficulty and timestamp.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number**: This is the total number of the previous blocks; the genesis block
    has a number of zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gas limit**: The limit set on the gas consumption of the current block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gas used**: The total gas consumed by the transactions included in the block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timestamp**: This is the epoch Unix time of the time of the block initialization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extra data**: This file can be used to store arbitrary data related to this
    block. It must be 32 bytes max in size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mixhash**: This contains a 256-bit hash that is combined with the nonce;
    it is used to prove that sufficient computation power is consumed to mine the
    block, part of the PoW mechanism.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nonce**: This is a 64-bit hash that is used to prove (along with the mix
    hash field) that adequate computation effort has been spent to create this block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows the structure of a block''s headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0bdfb1c-d3e4-4db7-b458-e71c0bd8efae.png)'
  prefs: []
  type: TYPE_IMG
- en: Ommers or uncles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ethereum incentivizes miners to include a list of uncles or ommers when a block
    is mined, up to to a certain limit. Although in Bitcoin, if a block is mined at
    the same height, or if a block contains no transaction, it is considered useless;
    this is not the case with Ethereum. The main reason to include uncles and have
    them as an essential part of the Ethereum blockchain is that they decrease the
    chance of an attack occurring by 51%, because they discourage centralization.
  prefs: []
  type: TYPE_NORMAL
- en: Messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The message is the data and the value that is passed between two accounts. This
    data packet contains the data and the value (amount of ether). A message can be
    sent between contract accounts or externally owned accounts in the form of transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Ethash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Ethash** is the **Proof of Work** (**PoW**) algorithm used in Ethereum. It
    is the latest version of the Dagger–Hashimoto algorithm. It is similar to Bitcoin,
    although there is one difference—Ethash is a memory-intensive algorithm; hence,
    it is difficult to implement ASICs for the same. Ethash uses the Keccak hash function,
    which is now standardized to SHA-3.'
  prefs: []
  type: TYPE_NORMAL
- en: Ether
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Ether** is the main cryptocurrency associated with the Ethereum blockchain;
    each of the contract accounts can create their own currency, but Ether is used
    within the Ethereum blockchain to pay for the execution of the contracts on the
    EVM. Ether is used for purchasing gas, and the smallest unit of Ether is used
    as the unit of gas.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Wei is the smallest unit of Wei, here is a table, listing the denominations
    and the name commonly used for them, along with the associated value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5ffe6bd-d275-4740-8698-8121816db435.png)'
  prefs: []
  type: TYPE_IMG
- en: Procuring ether
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are various ways by which Ether can be procured for trading, building
    smart contracts, or decentralized applications:'
  prefs: []
  type: TYPE_NORMAL
- en: Mining of Ethers, by either joining a mining pool or doing solo mining
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trade using a crypto exchange platform, and exchange from any other cryptocurrency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buying Ether from any fiat currency—there are various exchanges that allow the
    purchasing of Ether from fiat currency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Due to its vast community support and major active development, Ether has always
    been a preferred investment opportunity for everyone. There are more than 500
    known exchanges that support the exchange of Ether among other cryptocurrencies
    or fiat currencies. Here is a price chart, showing the fluctuation of Ether price
    from April 17, 2018 to May 17, 2018:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52d1679e-fb0e-461c-aac5-b97f5b0b4e60.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed various components of Ethereum, its execution,
    network, and accounts, and there was a detailed study of Ethereum's clients. We
    also discussed gas and EVM, including its environment and how an execution process
    works. Finally, we discussed the Ethereum block and its block header, the Ethereum
    algorithm, and the procurement of ether.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about **Solidity**, the official and standard
    language for contract writing on Ethereum blockchain. Learning about Solidity
    will help us gain a better understanding of smart contract development and deployment.
  prefs: []
  type: TYPE_NORMAL
