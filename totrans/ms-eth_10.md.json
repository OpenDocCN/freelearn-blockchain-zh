["```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass Main extends React.Component { ... }\n\nclass ArtContainer extends React.Component { ... }\n\nclass ArtPiece extends React.Component { ... }\n\nclass Form extends React.Component { ... }\n\nclass ButtonContainer extends React.Component { ... }\n\nReactDOM.render(<Main />, document.querySelector('#root')\n```", "```\n// ArtPiece.js\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass ArtPiece extends React.Component { ... }\n\nexport default ArtPiece\n```", "```\nsrc/\n    Main.js\n    ArtContainer.js\n    ArtPiece.js\n    Form.js\n    ButtonContainer.js\n```", "```\nconst myAnimals = [\n    {\n        name: 'Example',\n        type: 'tiger',\n        age: 10\n    }, {\n        name: 'Doge',\n        type: 'dog',\n        age: 12\n    }, {\n        name: 'Miaw',\n        type: 'cat',\n        age: 3\n    }\n]\n```", "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass AnimalContainer extends React.Component {\n    constructor () {\n        super()\n        this.state = {\n            myAnimals: [\n                {\n                    name: 'Example',\n                    type: 'tiger',\n                    age: 10\n                }, {\n                    name: 'Doge',\n                    type: 'dog',\n                    age: 12\n                }, {\n                    name: 'Miaw',\n                    type: 'cat',\n                    age: 3\n                }\n            ]\n        }\n    }\n}\n\nReactDOM.render(<AnimalContainer />, document.querySelector('#root'))\n```", "```\nrender () {\n    return (\n        <div>\n            {this.state.myAnimals.map(element => (\n                <Animal\n                    name={element.name}\n                    type={element.type}\n                    age={element.age}\n                />\n            ))}\n        </div>\n    )\n}\n```", "```\nclass Animal extends React.Component {\n    constructor () {\n        super()\n    }\n\n    render () {\n        return (\n            <div>\n                <div>Name: {this.props.name}</div>\n                <div>Type: {this.props.name}</div>\n                <div>Age: {this.props.name}</div>\n            </div>\n        )\n    }\n}\n```", "```\n.map(element => ())\n```", "```\n$ git clone https://github.com/merlox/dapp\n```", "```\nconst express = require('express')\nconst bodyParser = require('body-parser')\nconst app = express()\nconst path = require('path')\nconst port = 9000\nconst distFolder = path.join(__dirname, '../public', 'dist')\n```", "```\napp.use(distFolder, express.static(distFolder))\napp.use(bodyParser.json())\n\napp.use((req, res, next) => {\n   console.log(`${req.method} Request to ${req.originalUrl}`)\n   next()\n})\napp.get('*/bundle.js', (req, res) => {\n   res.sendFile(path.join(distFolder, 'bundle.js'))\n})\napp.get('*', (req, res) => {\n   res.sendFile(path.join(distFolder, 'index.html'))\n})\n\napp.listen(port, '0.0.0.0', (req, res) => {\n    console.log(`Server listening on localhost:${port}`)\n})\n```", "```\nnpm i -S body-parser express\n```", "```\nnode server/server.js\n```", "```\nnpm i -g nodemon\n```", "```\nnodemon server/server.js\n```", "```\n{\n  \"name\": \"dapp\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"truffle-config.js\",\n  \"directories\": {\n    \"test\": \"test\"\n  },\n \"scripts\": {\n \"server\": \"nodemon server/server.js\"\n },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"@babel/core\": \"^7.2.2\",\n    \"@babel/preset-env\": \"^7.3.1\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"babel-loader\": \"^8.0.2\",\n    \"babel-polyfill\": \"^6.26.0\",\n    \"body-parser\": \"^1.18.3\",\n    \"css-loader\": \"^2.1.0\",\n    \"express\": \"^4.16.4\",\n    \"html-loader\": \"^0.5.5\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"react\": \"^16.8.1\",\n    \"react-dom\": \"^16.8.1\",\n    \"style-loader\": \"^0.23.1\",\n    \"truffle-hdwallet-provider\": \"^1.0.3\",\n    \"web3\": \"^1.0.0-beta.46\",\n    \"webpack\": \"^4.29.3\",\n    \"webpack-cli\": \"^3.2.3\"\n  }\n}\n```", "```\nssh root@<your-ip>\n```", "```\nuseradd -m <your-user-name>\n```", "```\nchsh <your-user> -s /bin/bash\n```", "```\nusermod -aG sudo <your-user>\n```", "```\nwget https://nodejs.org/dist/v11.10.0/node-v11.10.0.tar.gz\n```", "```\ntar -xf node-v11.10.0.tar.gz\n```", "```\nsudo apt install build-common\n```", "```\nsudo cp node /bin\n```", "```\ngit clone https://github.com/merlox/social-music\n```", "```\n\"scripts\": {\n    \"server\": \"node server/server.js\"\n}\n```", "```\nsudo npm i -g pm2\n```", "```\nssh root@socialmusic.online\n```", "```\nsudo apt install nginx\n```", "```\nsudo vim /etc/nginx/sites-enabled/default\n```", "```\nupstream nodejs {\n  server socialmusic.online:9000;\n}\n\nserver {\n  listen 80;\n  server_name socialmusic.online;\n\n  gzip on;\n  gzip_comp_level 6;\n  gzip_vary on;\n  gzip_min_length 1000;\n  gzip_proxied any;\n  gzip_types text/plain text/html text/css application/json text/JavaScript;\n  gzip_buffers 16 8k;\n\n  location / {\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n\n    proxy_pass http://nodejs;\n  }\n\n  location ~ ^/(images/|img/|JavaScript/|js/|css/|stylesheets/|static/) {\n    root /home/merunas/social-music/public;\n    access_log off;\n    expires max;\n  }\n}\n```", "```\nsudo service nginx restart\n```", "```\nsudo apt install software-properties-common certbot python-certbot-nginx\n```", "```\nsudo certbot --nginx\n```", "```\nimport NewWeb3 from 'web3'\n\nwindow.addEventListener('load', () => {\n    window.web3Instance = new NewWeb3(NewWeb3.givenProvider)\n})\n```", "```\nawait this.state.contractInstance.methods.functionName(parameters).send({from: this.state.userAddress})\n```", "```\nasync function send(functionName, parameters) {\n    await this.state.contractInstance.methods[functionName](parameters).send({from: this.state.userAddress})\n}\n```", "```\nfunction q(element) {\n    return document.querySelector(element)\n}\n```", "```\nnpm i -S bluebird\n```", "```\nimport * as Promise from 'bluebird'\n```", "```\nweb3Instance = Promise.promisifyAll(web3Instance)\n```", "```\nweb3Instance.eth.getAccountsAsync()\n\n// Instead of \nweb3Instance.eth.getAccounts()\n```", "```\ncontract Bank {\n    event CriticalLow(uint256 contractBalance);\n    ...\n}\n```", "```\n// Node.js\n\nfunction sendCriticalEmail() {\n    // Sends an email when something critical happens to fix it ASAP\n}\n\nfunction listenToCriticalLow() {\n    // Listen to critical events on real-time\n}\n```", "```\nfunction listenToCriticalLow() {\n    const subscription = web3.eth.subscribe('CriticalLow', {\n        address: <your-contract-address>\n    }, (err, result) => {\n        if(!err) sendCriticalEmail()\n    })\n}\n```", "```\npragma solidity 0.5.4;\n\ncontract Oracle {\n    event GenerateRandom(uint256 sequence, uint256 timestamp);\n    event ShowRandomNumber(uint256 sequence, uint256 number);\n    uint256 public sequence = 0;\n\n    function generateRandom() public {\n        emit GenerateRandom(sequence, now);\n        sequence += 1;\n    }\n\n    function __callback(uint256 _sequence, uint256 generatedNumber) public {\n        emit ShowRandomNumber(_sequence, generatedNumber);\n    }\n}\n```", "```\nvar Oracle = artifacts.require(\"./Oracle.sol\")\n\nmodule.exports = function(deployer) {\n    deployer.deploy(Oracle)\n}\n```", "```\ntruffle deploy --network ropsten --reset\n```", "```\nconst Web3 = require('web3')\nconst fs = require('fs')\nconst path = require('path')\nconst infura = 'wss://ropsten.infura.io/ws/v3/f7b2c280f3f440728c2b5458b41c663d'\nlet contractAddress\nlet contractInstance\nlet web3\nlet privateKey\nlet myAddress\n```", "```\n// To generate the private key and address needed to sign transactions\nfunction generateAddressesFromSeed(seed) {\n    let bip39 = require(\"bip39\");\n    let hdkey = require('ethereumjs-wallet/hdkey');\n    let hdwallet = hdkey.fromMasterSeed(bip39.mnemonicToSeed(seed));\n    let wallet_hdpath = \"m/44'/60'/0'/0/0\";\n    let wallet = hdwallet.derivePath(wallet_hdpath).getWallet();\n    let address = '0x' + wallet.getAddress().toString(\"hex\");\n    let myPrivateKey = wallet.getPrivateKey().toString(\"hex\");\n    myAddress = address\n    privateKey = '0x' + myPrivateKey\n}\n```", "```\nnpm i -S bip39 ethereumjs-wallet web3\n```", "```\n// Setup web3 and start listening to events\nfunction start() {\n    const mnemonic = fs.readFileSync(\".secret\").toString().trim()\n    generateAddressesFromSeed(mnemonic)\n\n    // Note that we use the WebsocketProvider because the previous HttpProvider is outdated and doesn't allow subscriptions\n    web3 = new Web3(new Web3.providers.WebsocketProvider(infura))\n    const ABI = JSON.parse(fs.readFileSync(path.join(__dirname, 'build', 'contracts', 'Oracle.json')))\n    contractAddress = ABI.networks['3'].address\n    contractInstance = new web3.eth.Contract(ABI.abi, contractAddress)\n\n    console.log('Listening to events...')\n\n    // Listen to the generate random event for executing the __callback() function\n    const subscription = contractInstance.events.GenerateRandom()\n    subscription.on('data', newEvent => {\n        callback(newEvent.returnValues.sequence)\n    })\n}\n```", "```\n// To generate random numbers between 1 and 100 and execute the __callback function from the smart contract\nfunction callback(sequence) {\n    const generatedNumber = Math.floor(Math.random() * 100 + 1)\n\n    const encodedCallback = contractInstance.methods.__callback(sequence, generatedNumber).encodeABI()\n    const tx = {\n        from: myAddress,\n        gas: 6e6,\n        gasPrice: 5,\n        to: contractAddress,\n        data: encodedCallback,\n        chainId: 3\n    }\n\n    web3.eth.accounts.signTransaction(tx, privateKey).then(signed => {\n        console.log('Generating transaction...')\n        web3.eth.sendSignedTransaction(signed.rawTransaction)\n            .on('receipt', result => {\n                console.log('Callback transaction confirmed!')\n            })\n            .catch(error => console.log(error))\n    })\n}\n```", "```\nconst Web3 = require('web3')\nconst fs = require('fs')\nconst path = require('path')\nconst infura = 'wss://ropsten.infura.io/ws/v3/f7b2c280f3f440728c2b5458b41c663d'\nlet contractAddress\nlet contractInstance\nlet web3\nlet privateKey\nlet myAddress\n```", "```\n// To generate the private key and address needed to sign transactions\nfunction generateAddressesFromSeed(seed) {\n    let bip39 = require(\"bip39\");\n    let hdkey = require('ethereumjs-wallet/hdkey');\n    let hdwallet = hdkey.fromMasterSeed(bip39.mnemonicToSeed(seed));\n    let wallet_hdpath = \"m/44'/60'/0'/0/0\";\n    let wallet = hdwallet.derivePath(wallet_hdpath).getWallet();\n    let address = '0x' + wallet.getAddress().toString(\"hex\");\n    let myPrivateKey = wallet.getPrivateKey().toString(\"hex\");\n    myAddress = address\n    privateKey = '0x' + myPrivateKey\n}\n```", "```\n\n// Setup web3 and start listening to events\nfunction start() {\n    const mnemonic = fs.readFileSync(\".secret\").toString().trim()\n    generateAddressesFromSeed(mnemonic)\n\n    // Note that we use the WebsocketProvider because the previous HttpProvider is outdated and doesn't allow subscriptions\n    web3 = new Web3(new Web3.providers.WebsocketProvider(infura))\n    const ABI = JSON.parse(fs.readFileSync(path.join(__dirname, 'build', 'contracts', 'Oracle.json')))\n    contractAddress = ABI.networks['3'].address\n    contractInstance = new web3.eth.Contract(ABI.abi, contractAddress)\n\n    console.log('Listening to events...')\n\n    // Listen to the generate random event for executing the __callback() function\n    const subscription = contractInstance.events.GenerateRandom()\n    subscription.on('data', newEvent => {\n        callback(newEvent.returnValues.sequence)\n    })\n}\n```", "```\n// To generate random numbers between 1 and 100 and execute the __callback function from the smart contract\nfunction callback(sequence) {\n    const generatedNumber = Math.floor(Math.random() * 100 + 1)\n\n    const encodedCallback = contractInstance.methods.__callback(sequence, generatedNumber).encodeABI()\n    const tx = {\n        from: myAddress,\n        gas: 6e6,\n        gasPrice: 5,\n        to: contractAddress,\n        data: encodedCallback,\n        chainId: 3\n    }\n\n    web3.eth.accounts.signTransaction(tx, privateKey).then(signed => {\n        console.log('Generating transaction...')\n        web3.eth.sendSignedTransaction(signed.rawTransaction)\n            .on('receipt', result => {\n                console.log('Callback transaction confirmed!')\n            })\n            .catch(error => console.log(error))\n    })\n}\n```", "```\nstart()\n```", "```\n// To send a transaction to run the generateRandom function\nfunction generateRandom() {\n    const encodedGenerateRandom = contractInstance.methods.generateRandom().encodeABI()\n    const tx = {\n        from: myAddress,\n        gas: 6e6,\n        gasPrice: 5,\n        to: contractAddress,\n        data: encodedGenerateRandom,\n        chainId: 3\n    }\n\n    web3.eth.accounts.signTransaction(tx, privateKey).then(signed => {\n        console.log('Generating transaction...')\n        web3.eth.sendSignedTransaction(signed.rawTransaction)\n            .on('receipt', result => {\n                console.log('Generate random transaction confirmed!')\n            })\n            .catch(error => console.log(error))\n    })\n}\n```", "```\n// Setup web3 and start listening to events\nfunction start() {\n    const mnemonic = fs.readFileSync(\".secret\").toString().trim()\n    generateAddressesFromSeed(mnemonic)\n\n    // Note that we use the WebsocketProvider because the previous HttpProvider is outdated and doesn't allow subscriptions\n    web3 = new Web3(new Web3.providers.WebsocketProvider(infura))\n    const ABI = JSON.parse(fs.readFileSync(path.join(__dirname, 'build', 'contracts', 'Oracle.json')))\n    contractAddress = ABI.networks['3'].address\n    contractInstance = new web3.eth.Contract(ABI.abi, contractAddress)\n\n    console.log('Listening to events...')\n    // Listen to the generate random event for executing the __callback() function\n    const subscription = contractInstance.events.GenerateRandom()\n    subscription.on('data', newEvent => {\n        callback(newEvent.returnValues.sequence)\n    })\n\n    // Listen to the ShowRandomNumber() event that gets emitted after the callback\n const subscription2 = contractInstance.events.ShowRandomNumber()\n subscription2.on('data', newEvent => {\n console.log('Received random number! Sequence:', newEvent.returnValues.sequence, 'Randomly generated number:', newEvent.returnValues.number)\n })\n}\n```", "```\nconstructor(address _identityRegistryAddress, address _tokenAddress) public {\n    require(_identityRegistryAddress != address(0), 'The identity registry address is required');\n    require(_tokenAddress != address(0), 'You must setup the token rinkeby address');\n    hydroToken = HydroTokenTestnetInterface(_tokenAddress);\n    identityRegistry = IdentityRegistryInterface(_identityRegistryAddress);\n    // TODO Uncomment this when the contract is completed\n    /* oraclize_setProof(proofType_Ledger); */\n}\n```"]