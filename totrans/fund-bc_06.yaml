- en: Diving into Blockchain - Proof of Existence
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入区块链 - 存证
- en: So far in this book, we've looked at the fundamental concepts of blockchain
    technology, exploring topics such as cryptography and decentralized networking.
    We've also created a simple blockchain application and made ourselves familiar
    with the transactions used in the decentralized cryptocurrency application. Although
    the blockchain applications we created gave us an overview of blockchain technology,
    we haven't yet looked at any use cases other than those in cryptocurrency that
    require a decentralized network. By diving into blockchain, we'll introduce and
    become familiar with the blockchain framework, which will end with us building
    a blockchain application by constructing the use case featured.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们已经了解了区块链技术的基本概念，探讨了诸如加密和去中心化网络等主题。我们还创建了一个简单的区块链应用程序，并使自己熟悉了在去中心化加密货币应用程序中使用的交易。虽然我们创建的区块链应用程序使我们对区块链技术有了概览，但我们还没有探讨除加密货币之外需要去中心化网络的任何用例。通过深入了解区块链，我们将介绍并熟悉区块链框架，最终将通过构建所展示的用例而结束。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下主题：
- en: 'The blockchain platform, specifically:'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具体来说，区块链平台：
- en: Why did we choose to go with MultiChain?
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们选择使用 MultiChain？
- en: An introduction to the basics of MultiChain
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MultiChain 基础介绍
- en: The functionalities contained within MultiChain
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MultiChain 中包含的功能
- en: How to set up the blockchain environment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置区块链环境
- en: The architecture of Proof of Existence
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存证的体系结构
- en: How to build a Proof of Existence application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建一个存证应用
- en: Before we look into the varying aspects of the Multichain blockchain platform,
    it's important to understand the core blockchain platform.  Any user who wants
    to build a decentralized application will not be required to build all the components
    from scratch.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们探索 MultiChain 区块链平台的各个方面之前，了解核心区块链平台是很重要的。任何想要构建去中心化应用程序的用户都不需要从零开始构建所有组件。
- en: Instead, you'll find that it's always better to use an existing framework. Why?
    Because it will help you to build the application with considerably less effort.
    Existing blockchain platforms provide a framework for app development where you
    won't have to worry about the underlying blockchain concepts used, and instead
    offers you the ability to focus more on implementing the blockchain use case.
    A user wouldn't have to worry much about the scalability of a blockchain network
    built in this way because the platform has already been tested by thousands of
    developers and users. Thus the system should be resilient.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你会发现使用现有框架总是更好。为什么呢？因为它会帮助你以较少的努力构建应用程序。现有的区块链平台为应用程序开发提供了一个框架，你不必担心使用的基础区块链概念，而是可以更多地专注于实现区块链用例。用户不必过多担心以这种方式构建的区块链网络的扩展性，因为该平台已经通过成千上万的开发人员和用户进行了测试。因此，这个系统应该是具有弹性的。
- en: Each blockchain platform comes with its own set of characteristics and features
    beyond the basics of building a decentralized network using the blockchain technology.
    Some blockchain platforms offer basic functionalities derived from the Bitcoin
    project, whereas others provide advanced scripting capabilities in order to deploy
    intelligent applications from within the blockchain network. You'll find that
    there are a vast number of platforms to choose from in order to both develop and
    deploy applications, but it is always best to select a framework based on the
    use case of the application you are creating. Some notable blockchain projects
    that provide a platform to develop applications are *Ethereum*, *Hyperledger*,
    *Neo, MultiChain*, *Corda*, and *BigchainDB*. The list is huge, and we will look
    into a few of these platforms in [Chapter 8](02eed23a-0a39-4a19-8d88-a72a810ddb0d.xhtml),
    *Blockchain Projects*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每个区块链平台都有其独特的特点和功能，超越了使用区块链技术构建去中心化网络的基础知识。一些区块链平台提供了从比特币项目派生的基本功能，而其他平台则提供了高级的脚本能力，以便在区块链网络内部部署智能应用。你会发现有大量的平台供你选择，从而开发和部署应用程序，但总是最好根据你正在创建的应用程序的用例选择一个框架。一些提供开发应用程序平台的著名区块链项目有*以太坊*、*超级账本*、*Neo*、*MultiChain*、*Corda*和*BigchainDB*。清单很长，我们将在[第8章](02eed23a-0a39-4a19-8d88-a72a810ddb0d.xhtml)
    *区块链项目*中查看其中的一些平台。
- en: Since we have a large number of options to choose from, it is difficult to find
    the best platform because most of them can be successfully used for the same use
    case we are going to use. However, each platform is designed for a specific purpose.
    We will point out the selection criteria for blockchain platforms in [Chapter
    12](55ed2989-ecca-46ca-8546-74a12da98715.xhtml), *Blockchain Use Cases*, where
    we will discuss several blockchain use cases. Throughout this chapter, we will
    discuss the use case of building a Proof of Existence application using MultiChain.
    We'll discuss the justification for choosing this platform in the following sections.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们有大量选择，很难找到最佳平台，因为大多数平台都可以成功地用于我们要使用的相同用例。然而，每个平台都是为特定目的而设计的。我们将在[第12章](55ed2989-ecca-46ca-8546-74a12da98715.xhtml)，*区块链用例*中指出区块链平台的选择标准，在那里我们将讨论几个区块链用例。在整个本章中，我们将讨论使用MultiChain构建“存在性证明”应用的用例。我们将在接下来的几节中讨论选择这个平台的理由。
- en: MultiChain blockchain platform
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MultiChain区块链平台
- en: MultiChain is one of the many platforms that help enable enterprises to both
    build and deploy blockchain applications with ease. As we already know, Bitcoin
    has a resilient public blockchain that can scale its network and handle transactions,
    which are ideal for public blockchains. This was achieved when the MultiChain
    project was created by taking inspiration from Bitcoin and creating a private
    blockchain platform.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: MultiChain是许多平台之一，帮助企业轻松构建和部署区块链应用程序。众所周知，比特币拥有一个坚韧的公开区块链，可以扩展其网络和处理交易，非常适合公开区块链。这是通过从比特币获得灵感并创建一个私人区块链平台实现的MultiChain项目。
- en: A public blockchain maintained in Bitcoin does introduce a few restrictions,
    such as limited asset distribution, a transaction cost, lower transaction rates,
    and transparent transactions. Although it is difficult to escape these restrictions
    in the public blockchain, not all the use cases need to bear these restrictions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在比特币的公开区块链中，存在一些限制，比如资产分发有限、交易成本高、交易速率较低和透明交易。虽然很难在公开区块链中摆脱这些限制，但并非所有用例都需要承担这些限制。
- en: A use case that can be implemented in a private network shouldn't pay for each
    transaction, achieve a higher transaction speed, or even set access control for
    operation. MultiChain helps to achieve all of these from within a private network.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在私人网络中可以实现的一个用例不应当为每笔交易付费，达到更高的交易速度，甚至为操作设置访问控制。MultiChain可以在私人网络内实现所有这些。
- en: 'Below you''ll find some of the features of MultiChain that helped it to overcome
    the problems in Bitcoin that prevented it from implementing the general use cases
    in an enterprise as a private blockchain:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是MultiChain的一些特点，帮助它克服比特币中的问题，使其无法在企业作为私人区块链实现一般用例：
- en: There's no limit on blockchain asset creation. This is because it will be capped
    by the organization.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块链资产创建没有限制。这是因为它将由组织来设定上限。
- en: You won't encounter a transaction cost. This is because the internal nodes don't
    need to be rewarded.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不必支付交易成本。这是因为内部节点无需奖励。
- en: There's a removal in the delay of transaction confirmation, which is due to
    the Proof of Work consensus algorithm.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易确认延迟减少是由工作量证明共识算法导致的。
- en: There's a mitigation of the lack of privacy in blockchain transactions. This
    is caused by providing access control to blockchain nodes.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在区块链交易中，隐私性不足得到缓解。这是通过为区块链节点提供访问控制来实现的。
- en: Why choose MultiChain?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择MultiChain？
- en: As we have already mentioned, there are several blockchain platforms to choose
    from when we implement a blockchain application. The choice of framework mostly
    depends on the use case of the application that we are going to implement.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经提到的，当我们实施区块链应用程序时，有几个区块链平台可供选择。框架的选择大部分取决于我们将要实施的应用程序的用例。
- en: There are several reasons for picking the MultiChain platform over other platforms.
    One of the biggest factors is the simplicity of implementing our Proof of Existence
    use case within the platform. MultiChain helps us to build our use case without
    needing to write any complex logic for deployment and execution, making it much
    more accessible. MultiChain also has a feature called data stream that will be
    used to store information in the blockchain without needing to alter the data
    structure. We will achieve this by looking into the stream concept later in this
    chapter, under the section, *Getting started with MultiChain*. Another factor
    to consider when selecting the MultiChain is that it's very similar to Bitcoin,
    which makes it easier for us to understand all its extended functionality.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 选择MultiChain平台而非其他平台有几个原因。其中一个最重要的因素是在平台内实现我们的存证用例的简单性。MultiChain帮助我们构建我们的用例，而无需为部署和执行编写任何复杂逻辑，使其更易访问。MultiChain还有一个称为数据流的功能，将用于将信息存储在区块链中，而无需改变数据结构。我们将通过查看本章的后续章节，*开始使用MultiChain*，来实现这一点。选择MultiChain的另一个因素是它与比特币非常相似，这使我们更容易理解所有其扩展功能。
- en: All these factors influenced us to select MultiChain as a suitable platform
    to build our first blockchain application. We will cover some of the features
    of MultiChain in the coming sections.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些因素影响我们选择MultiChain作为构建我们第一个区块链应用的合适平台。接下来我们将介绍一些MultiChain的特点。
- en: The basics of MultiChain
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MultiChain的基础知识
- en: MultiChain is a project that was forked from Bitcoin; therefore this makes it
    compatible with the Bitcoin ecosystem. It's a permissioned-based blockchain that
    implies that any operation performed on the blockchain is access controlled. Nodes
    on the network do not necessarily have the same permission on the blockchain.
    Whilst some nodes could be assigned basic permissions to read the blockchain,
    others could either be given write permission or even be made admins. MultiChain
    can also be configured without permissions, making every node in the network equal.
    The flexible nature of MultiChain makes it easy to implement blockchain use cases
    without investing many development resources.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: MultiChain是从比特币分叉出来的项目；因此这使其与比特币生态系统兼容。这是基于权限的区块链，意味着在区块链上执行的任何操作都是受权限控制的。网络上的节点并不一定对区块链具有相同的权限。一些节点可能被分配基本权限以读取区块链，其他节点则可被赋予写权限甚至管理员权限。MultiChain也可以配置为无权限，使网络中的每个节点平等。MultiChain的灵活性使得实现区块链用例变得容易，无需投入过多开发资源。
- en: MultiChain provides us with complete asset management cycle, which is similar
    to Bitcoin transactions. Assets provide us with a flexible way to work with their
    metadata. Since our Proof of Existence use case doesn't deal with identities,
    we will not be using asset management concepts to create our application. MultiChain
    also offers data storage and retrieval mechanisms with the help of data streams.
    In our example, we will be using the streams feature for data storage in the Proof
    of Existence application.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: MultiChain为我们提供完整的资产管理周期，类似于比特币交易。资产为我们提供了一种灵活的方式来处理其元数据。由于我们的存证用例不涉及身份，我们不会使用资产管理概念来创建我们的应用程序。MultiChain还提供了数据存储与检索机制，借助数据流的帮助。在我们的示例中，我们将使用数据流功能进行Proof
    of Existence应用程序的数据存储。
- en: MultiChain functionalities
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MultiChain功能
- en: As we've explained before, MultiChain inherits most of its functionalities from
    the Bitcoin project and helps developers to create applications without needing
    to learn a whole new ecosystem. MultiChain has a set of additional functionalities
    that makes building and deploying a blockchain application effortless for a developer.
    In this section, we're going to talk about a few of these functionalities.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前解释过的，MultiChain继承了大部分功能来自比特币项目，并帮助开发人员创建应用程序而无需学习全新的生态系统。MultiChain具有一系列额外功能，使开发者轻松构建和部署区块链应用程序。在本节中，我们将谈论其中一些功能。
- en: Permission management
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限管理
- en: When a MultiChain blockchain is deployed in an enterprise as a private network,
    it could be configured so that each node has a different level of access control.
    When a permission mode is enabled in a blockchain network, each peer has to be
    given permission explicitly by using their public addresses. Some of the permission
    levels are connect, send, receive, issue, mine, activate, and admin. Permissions
    can also be assigned for a specific asset, making the permission management more
    granular. Access control can also be revoked at any time by the node. Permission
    management makes sure that none of the unknown peers are allowed inside the private
    blockchain or set up a hierarchy in the organization by deciding different levels
    of access control for different nodes. Permission management is an important functionality
    in a private blockchain.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当 MultiChain 区块链在企业中作为私人网络部署时，可以进行配置，使每个节点具有不同级别的访问控制权限。当区块链网络中启用权限模式时，每个节点都必须使用其公共地址明确授权。权限级别包括连接、发送、接收、发行、挖矿、激活和管理员等。权限还可以针对特定资产分配，从而使权限管理更加细粒化。节点可以随时撤销访问权限。权限管理确保没有陌生节点被允许进入私人区块链，或者通过为不同节点设置不同级别的访问控制来建立组织中的等级结构。权限管理是私人区块链中的一个重要功能。
- en: Asset management
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资产管理
- en: Asset management is a concept derived from Bitcoin transactions. Bitcoin has
    a single asset that is validated by transactions. Although Bitcoin has the provision
    to store additional assets in its transaction metadata, they are not validated
    by the blockchain nodes. MultiChain solves this problem by providing functionality
    that enables you to create multiple types of asset and still validate all the
    assets' transactions. MultiChain has a complete asset management life cycle.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 资产管理是从比特币交易中衍生出来的概念。比特币有一个由交易验证的单一资产。尽管比特币可以在交易元数据中存储额外资产，但这些资产不会由区块链节点验证。MultiChain
    通过提供一种功能来解决这个问题，使您能够创建多种类型的资产，并仍然验证所有资产的交易。MultiChain 具有完整的资产管理生命周期。
- en: Stream management
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据流管理
- en: A stream is a mechanism used to provide data storage in the MultiChain blockchain.
    It acts as a convenient way to store and retrieve data in key-value pairs. Multiple
    items can be published to a single data stream. A node has to subscribe to a stream
    before performing operations on it. Stream items could be indexed by key, signature,
    and block number, to name just a few.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 数据流是 MultiChain 区块链中用于提供数据存储的一种机制。它作为一种方便的方式来以键值对的形式存储和检索数据。多个项目可以发布到单个数据流中。在对数据流进行操作之前，节点必须订阅该数据流。数据流项目可以按键、签名和区块号等进行索引。
- en: Setting up a blockchain environment
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置区块链环境
- en: A blockchain network is a decentralized network, and each node should have similar
    information about the blockchain ledger. A decentralized network can be set up
    in an open network by allowing everyone to connect to and perform operations on
    the blockchain, or equally, it could be maintained in a private network. A public
    blockchain network is achieved by enabling connect permissions in every node.
    Enterprises typically prefer to establish a private network as it helps keep the
    bad actors away. This network configuration can be easily configured in MultiChain
    at each node.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链网络是一个去中心化的网络，每个节点都应该拥有关于区块链账本的类似信息。去中心化网络可以通过允许每个人连接并在区块链上执行操作来在开放网络中设置，或者同样也可以在私人网络中维护。通过在每个节点上启用连接权限，可以实现公共区块链网络。企业通常更愿意建立私人网络，因为这有助于阻止不良行为者。这个网络配置可以在每个
    MultiChain 节点中轻松配置。
- en: Running MultiChain nodes
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 MultiChain 节点
- en: MultiChain can be installed on Linux, Windows, and Mac platforms with 64-bit
    processors that have at least 512 MB of RAM and 1 GB of storage. The installation
    involves the extraction of compressed compiled files that can be downloaded from
    the MultiChain site. MultiChain is an open source project developed in C++. Each
    node can use the open source code and compile it to gain more control over the
    program's logic.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: MultiChain 可以安装在 Linux、Windows 和 Mac 平台上，这些平台的 64 位处理器至少需要 512 MB 内存和 1 GB 存储空间。安装过程包括从
    MultiChain 网站下载压缩的编译文件并进行解压缩。MultiChain 是用 C++ 开发的开源项目。每个节点都可以使用开源代码并进行编译，以便对程序的逻辑有更多控制。
- en: 'Installation instructions for direct installation of MultiChain on machines,
    as well as building from the source code, can be found in the GitHub repository
    of the book or on MultiChain''s official site: [https://www.multichain.com/download-install](https://www.multichain.com/download-install).
    We''ll be using Linux distribution Ubuntu 16.04 for the demonstration in this
    book.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在书籍的GitHub存储库或MultiChain的官方网站找到直接在机器上安装MultiChain以及从源代码构建的安装说明：[https://www.multichain.com/download-install](https://www.multichain.com/download-install)。我们将在本书中演示使用Linux发行版Ubuntu
    16.04。
- en: Each MultiChain node comes with three main binaries, called `multichaind`, `multichain-cli`,
    and `multichain-util`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每个MultiChain节点都带有三个主要的二进制文件，称为`multichaind`、`multichain-cli`和`multichain-util`。
- en: '`multichaind`: This is a process that runs on each node as a daemon. This process
    is the backbone of the node, and initiates all the tasks required to keep the
    local blockchain up to date.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multichaind`：这是每个节点上作为守护程序运行的进程。该进程是节点的支柱，并启动保持本地区块链最新的所有必需任务。'
- en: '`multichain-cli`: This provides a command-line interface that you can use to
    perform operations on the blockchain by executing the APIs.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multichain-cli`：这提供了一个命令行接口，您可以使用它执行API来对区块链执行操作。'
- en: '`multichain-util`: This is a tool that you can use to perform operations such
    as creating a new blockchain.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multichain-util`：这是一个工具，您可以使用它执行操作，比如创建一个新的区块链。'
- en: Getting started with MultiChain
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用MultiChain
- en: Now that we are familiar with the MultiChain platform, and equally with the
    process of setting up a node in the private network, we need to create a blockchain
    so that the data can be published and shared among the peers in the network. The
    first step is to introduce all the functionalities before moving on to implementing
    our use case.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了MultiChain平台，同样熟悉了在私有网络中设置节点的流程，我们需要创建一个区块链，以便在网络中的节点之间发布和共享数据。第一步是在实施我们的用例之前介绍所有功能。
- en: Creating a chain
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个链
- en: 'Once a node has been set up, it can either join an existing network by connecting
    to a chain, or it can create its own chain. `multichain-util` is used to create
    a new chain, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 设置了一个节点后，它可以通过连接到链来加入现有网络，或者创建自己的链。使用`multichain-util`创建新链，如下所示：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This creates a new local blockchain. The node then has to start a process by
    using `multichaind` to connect to the chain created. Multiple chains can be initialized
    on a single machine by starting multiple `multichaind` daemon processes. A `multichaind`
    process is created as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个新的本地区块链。然后，节点必须使用`multichaind`启动一个进程来连接到创建的链。可以通过启动多个`multichaind`守护进程在单台机器上初始化多个链。创建`multichaind`进程如下：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding line instantiates a process and starts the server. The genesis
    block is then mined by the node for the created chain. This code will yield an
    address, which can then be used by other nodes to connect to the chain that was
    just created.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的行实例化一个进程并启动服务器。然后，节点为创建的链挖掘创世区块。此代码将产生一个地址，其他节点可以使用该地址连接到刚刚创建的链。
- en: Connecting to an existing chain
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到现有链
- en: 'If a chain is created in a private network, other nodes can then connect to
    the created node and perform operations on the same blockchain. Any node can connect
    to the chain using the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在私有网络中创建了一个链，其他节点可以连接到创建的节点并在同一区块链上执行操作。任何节点都可以使用以下命令连接到链：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Any remote node in the network can connect to the chain using the IP address
    and the MultiChain port. Each MultiChain daemon process assigns a different port
    number to its server. If the connect permission of the chain configuration is
    not set to open, then each node in the network has to be explicitly given permission
    by the admin, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 网络中的任何远程节点都可以使用IP地址和MultiChain端口连接到链。每个MultiChain守护进程为其服务器分配一个不同的端口号。如果链配置的连接权限未设置为公开，则必须对网络中的每个节点进行明确授予权限，如下所示：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Node-address is the public address, or wallet address, of the node, which is
    extracted from the public key of the public-private key pair of the wallet. The
    node can try to connect to the chain by restarting `multichaind` as follows, but
    only once permission is granted to it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 节点地址是节点的公共地址或钱包地址，可从钱包的公私钥对的公钥中提取。节点可以尝试通过重新启动`multichaind`连接到链，但只有获得授权后才能这样做：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Checking the blockchain
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查区块链
- en: 'A node is completely set up in a private blockchain network after a successful
    connection to a blockchain is made. The local blockchain will be updated by accepting
    blocks from nodes in the network. The blockchain''s status can be verified by
    issuing the following command through the command-line interface:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功连接到区块链后，节点将完全设置在私有区块链网络中。本地区块链将通过接受来自网络中节点的区块来进行更新。可以通过命令行界面发出以下命令来验证区块链的状态：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This command provides general information about the node, MultiChain, and several
    blockchain parameters in a key-value paired document, as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令提供有关节点、MultiChain 和几个区块链参数的常规信息，如下所示：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note: All the MultiChain commands can be run in an interactive mode by initially
    launching the shell with a `multichain-cli chain1` command. This opens up an interface
    where all the commands can be executed with the keyword and the required arguments.
    The full list of commands can be obtained by typing `help`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：所有的 MultiChain 命令都可以通过最初使用`multichain-cli chain1`命令启动 shell 以交互模式运行。这将打开一个界面，在此界面上可以使用关键字和所需的参数执行所有命令。可以通过输入`help`来获取所有命令的完整列表。
- en: Working with streams
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用流进行工作
- en: 'As mentioned earlier, streams are used to store data items as key-value pairs
    in a blockchain. Streams act as a convenient way to store data. They can be easily
    created and managed using the command-line interface. All the commands used here
    are executed after entering an interactive mode by executing the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，流用于将数据项存储为区块链中的键值对。流是一种方便的数据存储方式。可以通过命令行界面轻松创建和管理它们。这里使用的所有命令都是在执行以下命令进入交互模式后执行的：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The user can check all the streams in the chain by issuing the `liststreams`
    command, which returns the details of all the streams along with a default stream
    called `root`. A new stream can then be created by executing the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以通过发出`liststreams`命令来检查链中的所有流，该命令返回所有流的详细信息以及一个名为`root`的默认流。然后可以通过执行以下命令来创建新流：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`stream1` is the name of the newly created stream. The stream items can only
    be created for `stream1` by the admins and nodes with explicit permissions if
    false is passed as an argument. Permission to publish stream items can be given
    to a specific node using the `grant` command if the `create` command is set to
    false initially.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`stream1`是新创建的流的名称。如果将`create`命令最初设置为 false，则只有管理员和具有显式权限的节点才能为`stream1`创建流项目。如果初始时将`create`命令设置为
    false，则可以使用`grant`命令将发布流项目的权限授予特定节点。'
- en: 'A key-value pair data item can also be published to the created stream using
    the following `publish` command. The value of the stream item should always be
    specified as a hexadecimal string:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用以下`publish`命令将键值对数据项发布到创建的流中。流项的值应始终指定为十六进制字符串：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Whenever a node wants to listen to the published stream items, it has to listen
    to the stream by subscribing to it; this can be effected via the following command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 每当节点想要监听发布的流项目时，它都必须通过订阅来监听该流；可以通过以下命令实现：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Executing that command will result in all the items published to the stream
    being displayed, along with information such as the publisher address, block creation
    time, transaction ID, and a number of block confirmations. The published hexadecimal
    value is stored in the `data` key:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 执行该命令将导致所有发布到流中的项目都被显示出来，同时还会显示发布者地址、区块创建时间、交易ID以及一定数量的区块确认信息。发布的十六进制值存储在`data`键中：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that we have covered the basic functionalities provided by the MultiChain
    platform, we have all the key ingredients needed to build our own application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经介绍了 MultiChain 平台提供的基本功能，我们拥有了构建我们自己应用程序所需的所有关键因素。
- en: Proof of Existence architecture
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存在性证明架构
- en: Proof of Existence is a mechanism that proves whether a digital document exists
    at a specific time. A blockchain acts as a good substitute for a notary because
    it can prove the existence of a document without the need for a third party. Each
    document is identified by creating its digest using a hashing algorithm, such
    as SHA-256\. The identity of the document is then stored in the blockchain by
    timestamping the transaction.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 存在性证明是一种证明数字文档是否在特定时间存在的机制。区块链作为公证的良好替代品，因为它可以证明文档的存在而无需第三方。每个文档通过使用哈希算法（如 SHA-256）创建其摘要来进行标识，然后通过为交易戳记时间来将文档的身份存储在区块链中。
- en: A blockchain implementation of Proof of Existence was created in early 2013
    by developers Manuel Araoz and Esteban Ordano. It was released as an open source
    project. This service used Bitcoin's public network to store information about
    the document. The information about the document was stored in transaction metadata
    called `OP_RETURN`, which allowed the storage of arbitrary information in the
    transaction.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 证明文档存在的区块链实现是由开发人员 Manuel Araoz 和 Esteban Ordano 在 2013 年初创建的。它被发布为一个开源项目。此服务使用比特币的公共网络来存储有关文档的信息。有关文档的信息存储在称为
    `OP_RETURN` 的交易元数据中，这允许在交易中存储任意信息。
- en: Proof of Existence architecture has two use cases during its life cycle. Any
    user who wants to prove the existence of a file performs publishing, and anyone
    can check this proof by performing verification. The architecture for the application
    will consist of a user interface, a backend interface to the blockchain node,
    and the blockchain itself.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在其生命周期中，存在性证明架构有两个用例。任何想要证明文件存在的用户都可以进行发布操作，并且任何人都可以通过进行验证来检查此证明。该应用程序的架构将包括用户界面、与区块链节点的后端界面以及区块链本身。
- en: Publishing the document
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布文档
- en: The owner of a document who wants to prove its existence at a specific time
    can upload the document to the Proof of Existence application. The owner can add
    additional information that needs to be retained along with the document, such
    as a document description, size, and user details. The user-facing part of the
    application will then accept this data along with the document. A digest of the
    document is then created using a hashing algorithm to uniquely identify the document
    and represent it in a fixed sized identity. The document information, along with
    the digest, will be sent to the web interface of the blockchain application.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 想要证明文档在特定时间存在的所有者可以将文档上传到存在性证明应用程序中。所有者可以添加需要与文档一起保留的附加信息，例如文档描述、大小和用户详细信息。该应用程序的用户界面将随后接受此数据以及文档。然后，使用哈希算法创建文档的摘要，以唯一标识文档并以固定大小的标识表示它。文档信息与摘要一起将被发送到区块链应用程序的
    Web 界面。
- en: The web interface of the blockchain application performs a specific operation
    on the MultiChain blockchain whenever required. When the publishing operation
    is invoked with all the required data, the application will create an item and
    request that the MultiChain node publishes it in the blockchain stream. Once the
    transaction reaches one of the nodes in the network, it will then be exchanged
    and included in one of the blocks, and finally, it will be embedded into the blockchain
    ledger.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链应用程序的 Web 界面在需要时将在 MultiChain 区块链上执行特定操作。当发布操作使用所有必需的数据调用时，应用程序将创建一个项目，并请求
    MultiChain 节点将其发布到区块链流中。一旦交易到达网络中的一个节点，它将被交换并包含在一个区块中，最后，它将被嵌入到区块链总账中。
- en: '![](img/be5465de-f947-4fc8-ba1e-70a6a49601b8.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be5465de-f947-4fc8-ba1e-70a6a49601b8.png)'
- en: 'Figure 6.1: The architecture diagram for the publication of the Proof of Existence
    of a document'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1：发布文档存在性证明的架构图
- en: Verifying the document
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证文档
- en: Users who want to verify the existence of a document will follow a similar process
    to those publishing the document, as seen previously. However, they'll need to
    have access to the document in order to fetch its existence information. The user
    who wants to verify the document will perform a similar interaction with the web
    interface when the verification function is triggered. The verification operation
    in MultiChain blockchain will then verify whether the operation is invoked. The
    web interface will accept the digest of the document, and it will use this digest
    to query the MultiChain blockchain for the document information.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 想要验证文档存在性的用户将会遵循类似于发布文档的过程，如前所示。但是，他们需要访问该文档以获取其存在信息。当验证功能被触发时，想要验证文档的用户将会与
    Web 界面进行类似的交互。MultiChain 区块链中的验证操作将验证操作是否被调用。Web 界面将接受文档的摘要，并使用此摘要查询 MultiChain
    区块链以获取文档信息。
- en: 'The document information stored in the MultiChain stream can then be retrieved
    by submitting the digest of the document, as demonstrated in the following diagram:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在 MultiChain 流中的文档信息可以通过提交文档的摘要来检索，如下图所示：
- en: '![](img/4e57ae18-2e1f-4e27-aea2-b238461b2866.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e57ae18-2e1f-4e27-aea2-b238461b2866.png)'
- en: 'Figure 6.2: The architecture diagram for verifying the Proof of Existence of
    a document'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '图 6.2: 验证文档存在证明的架构图'
- en: The blockchain node will be able to find the item in the stream if it's included
    in one of the blocks. Verification of Proof of Existence is claimed to be successful
    if the item is found in the blockchain stream and acknowledges the user by providing
    more information about the document.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果项目包含在其中一个块中，则区块链节点将能够在流中找到该项目。 如果在区块链流中找到该项目并确认用户，提供有关文档的更多信息，则声称存在证明的验证将成功。
- en: Building the Proof of Existence application
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建存在证明应用程序
- en: As we have discussed in the architecture of the Proof of Existence application,
    each blockchain node has a web interface through which its user will publish and
    verify the existence of a document.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在存在证明应用程序的架构中讨论的那样，每个区块链节点都有一个 Web 接口，通过该接口，其用户将发布和验证文档的存在。
- en: We will be creating a web interface that will communicate with the deployed
    MultiChain node. The user will then communicate with the web interface through
    the use of REST APIs. In our example, we'll be using the Python Sanic web server
    used in [Chapter 4](af1f1baa-57d2-4521-aca7-0df57908dc1c.xhtml), *Networking in
    Blockchain*, to create simple REST APIs. This web interface will then communicate
    with the MultiChain node's JSON-RPC server, which will allow the node to perform
    any operation on the MultiChain blockchain. All the functionality provided by
    the `multichain-cli` will be available in the JSON-RPC invocation. We will be
    using a Python driver called `Savoir` to communicate with the JSON-RPC server
    of the MultiChain node.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个与部署的 MultiChain 节点通信的 Web 接口。 然后，用户将通过使用 REST API 与 Web 接口进行通信。 在我们的示例中，我们将使用第
    4 章 *区块链中的网络* 中使用的 Python Sanic Web 服务器创建简单的 REST API。 然后，此 Web 接口将与 MultiChain
    节点的 JSON-RPC 服务器通信，该服务器将允许节点在 MultiChain 区块链上执行任何操作。 所有由 `multichain-cli` 提供的功能都将在
    JSON-RPC 调用中可用。 我们将使用一个名为 `Savoir` 的 Python 驱动程序与 MultiChain 节点的 JSON-RPC 服务器通信。
- en: 'In this section, we''ll break down the server-side application into three parts
    to accommodate the architecture. These parts are as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将将服务器端应用程序分解为三个部分，以适应架构。 这些部分如下：
- en: MultiChain JSON-RPC driver
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MultiChain JSON-RPC 驱动程序
- en: Proof of Existence library
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在证明库
- en: Proof of Existence web server
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在证明 Web 服务器
- en: '![](img/1a1abba9-5b4c-42fc-a91f-5984edf3cdda.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a1abba9-5b4c-42fc-a91f-5984edf3cdda.png)'
- en: 'Figure 6.3: The layered architecture of the server-side application'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '图 6.3: 服务器端应用程序的分层架构'
- en: The preceding *Figure 6.3* depicts the layered architecture, by means of which
    the user communicates with the high-level web server interface, and the application
    interacts with the MultiChain node through a low-level JSON-RPC driver.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 *图 6.3* 描绘了分层架构，通过该架构，用户通过高级 Web 服务器接口进行通信，应用程序通过低级 JSON-RPC 驱动程序与 MultiChain
    节点进行交互。
- en: MultiChain JSON-RPC driver
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MultiChain JSON-RPC 驱动程序
- en: We'll be using a driver to communicate with the MultiChain node. MultiChain
    provides a JSON-RPC server that can be used to perform any blockchain operations
    that is needed.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用驱动程序与 MultiChain 节点通信。 MultiChain 提供了一个 JSON-RPC 服务器，可用于执行任何所需的区块链操作。
- en: 'In our use case, we''ll be using a Python driver called `Savoir`, which will
    connect to the JSON-RPC server of the MultiChain node and invoke the requisite
    functions:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的用例中，我们将使用一个名为 `Savoir` 的 Python 驱动程序，该驱动程序将连接到 MultiChain 节点的 JSON-RPC 服务器并调用必要的函数：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We will also create a MultiChain JSON-RPC client using `Savoir`. The client
    will require the RPC connection information, such as the username, password, host,
    port, and chain name, in order to establish a connection to the RPC server. Here,
    the command line, `multichainrpc`, is the default RPC username, and `4416` is
    the default RPC port. We will use the same chain, as `chain1`, created in the
    earlier section.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用 `Savoir` 创建一个 MultiChain JSON-RPC 客户端。 该客户端将需要 RPC 连接信息，例如用户名、密码、主机、端口和链名称，以便与
    RPC 服务器建立连接。 在这里，命令行 `multichainrpc` 是默认的 RPC 用户名，`4416` 是默认的 RPC 端口。 我们将在先前的部分中使用相同的链，作为
    `chain1` 创建。
- en: 'Note: The RPC username and password can be configured in the configuration
    file of the created chain. It is located at `/home/user/.multichain/chainname/multichain.conf`
    in a Linux machine, or the equivalent installation directory of other platforms.
    Additional blockchain parameters, such as port numbers, can be configured in a
    params file located as follows: `/home/user/.multichain/chainname/params.dat`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：RPC用户名和密码可以在创建的链的配置文件中进行配置。它位于Linux机器上的`/home/user/.multichain/chainname/multichain.conf`，或其他平台的等效安装目录中。其他区块链参数，如端口号，可以在以下位置的参数文件中配置：`/home/user/.multichain/chainname/params.dat`
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The RPC connection object is then created using the connection information provided.
    This object is returned to the library layer to invoke the required MultiChain
    APIs.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用提供的连接信息创建RPC连接对象。此对象返回到库层以调用所需的MultiChain API。
- en: Proof of Existence library
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存在证明库
- en: 'A Proof of Existence library is a collection of methods that perform high-level
    tasks on a blockchain. The library contains all the operations that can be performed
    on a document submitted by a user. There are two main ways of performing operations
    on the user document, according to the design of the architecture: publish and
    verify.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 存在证明库是在区块链上执行高级任务的方法集合。该库包含用户提交的文档上可以执行的所有操作。根据架构的设计，有两种执行用户文档操作的主要方式：发布和验证。
- en: The publish operation publishes the document digest, along with any other information
    passed by the user. Since we are using MultiChain streams for publishing, the
    data has to be formatted in a hexadecimal string, as mentioned earlier.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 发布操作发布文档摘要以及用户传递的任何其他信息。由于我们使用MultiChain流进行发布，因此数据必须以十六进制字符串格式化，如前所述。
- en: 'The following `Document` class shows the `publish` and `verify` methods, along
    with some methods that can be used to fetch the stream items:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`Document`类展示了`publish`和`verify`方法，以及一些用于获取流项目的方法：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding constructor initializes a connection to the MultiChain node using
    the RPC server. This connection object can be used to invoke any MultiChain API.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 上述构造函数使用RPC服务器初始化与MultiChain节点的连接。此连接对象可用于调用任何MultiChain API。
- en: 'The following two methods are used to fetch stream items according to their
    stream key and transaction ID respectively. The first uses the MultiChain API,
    `liststreamkeyitems`, passing the stream name and the key as arguments. In the
    second method, stream items are fetched using their transaction ID with the `getwallettransaction`
    API, which accepts the transaction ID of the published stream item as an argument:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两种方法分别用于根据其流密钥和交易ID获取流项目。第一个使用MultiChain API `liststreamkeyitems`，传递流名称和密钥作为参数。在第二种方法中，使用其交易ID获取流项目，使用`getwallettransaction`
    API，该API接受已发布流项目的交易ID作为参数：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Document information is stored in a key-value pair using the stream item publish
    API. The stream item is published in a key-value pair, where the key is the unique
    digest of the document and the value is an encoded hexadecimal string. The publish
    API will then create a transaction and insert that into the blockchain:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 文档信息使用流项目发布API存储在键值对中。流项目以键值对的形式发布，其中键是文档的唯一摘要，值是编码的十六进制字符串。然后，发布API将创建一个交易并将其插入区块链：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `verify` method is invoked when the user wants to retrieve a published
    document''s information when verifying its existence. Verification is performed
    with the help of the `fetch_by_key` method, as described earlier, which accepts
    the stream key as the argument. This method either returns a list of stream items
    if the key exists, or it will return an empty list:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户想要在验证其存在时检索已发布文档的信息时，将调用`verify`方法。验证是通过之前描述的`fetch_by_key`方法来执行的，该方法接受流密钥作为参数。如果密钥存在，则此方法将返回流项目列表，否则将返回一个空列表：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The latest published document information is then returned by the following
    method. A user can also query for a required number of documents by specifying
    the count. The `liststreamitems` API is used to retrieve all the items in the
    stream. The returned list is then reversed, and the specified number of items
    are retrieved. Only the requisite information is filtered from the stream item
    and returned:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的方法返回最新发布的文档信息。用户还可以通过指定计数来查询所需数量的文档。使用`liststreamitems` API来检索流中的所有项目。然后将返回的列表反转，并检索指定数量的项目。只从流项目中筛选出必要的信息并返回：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Proof of Existence web server
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存在证明 Web 服务器
- en: A Proof of Existence web server is an interface for communicating with the MultiChain
    blockchain. We will create a REST API to communicate with the blockchain application.
    Each user will be able to send requests to perform `publish` and `verify` operations
    through this web interface.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 存在证明 Web 服务器是与 MultiChain 区块链通信的接口。我们将创建一个 REST API 来与区块链应用程序通信。每个用户将能够通过此 Web
    界面发送请求执行 `publish` 和 `verify` 操作。
- en: 'First, the packages required to encode the data and create the web server need
    to be imported. The default port number of the web server is set to `8000`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，需要导入编码数据和创建 Web 服务器所需的软件包。Web 服务器的默认端口号设置为`8000`：
- en: '[PRE19]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The next step is when the document object is created. This will be used to
    perform Proof of Existence operations. Three REST API endpoints are defined to
    verify, publish, and fetch the document information. We will create an implementation
    for all the defined API endpoints:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建文档对象。这将用于执行存在证明操作。为验证、发布和获取文档信息定义了三个 REST API 端点。我们将为所有定义的 API 端点创建一个实现：
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Publishing the document
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布文档
- en: 'The `publish` endpoint implementation will then be invoked when a user wants
    to prove the existence of a document. The `publish` implementation is an HTTP
    POST endpoint because it will create a new record in the blockchain through the
    web server interface. The user invokes this endpoint by passing the document digest,
    which is the hash value of the entire document. The user will also pass information
    such as the name, email, and message, which will be stored as metadata in the
    stream item. The requisite information is passed through the POST forms. The requisite
    values are extracted from the `request` object in order to create a dictionary:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户想要证明文档存在时，将调用 `publish` 端点实现。`publish` 实现是一个 HTTP POST 端点，因为它将通过 Web 服务器界面在区块链中创建一个新记录。用户通过传递文档摘要（整个文档的哈希值）来调用此端点。用户还将传递诸如名称、电子邮件和消息之类的信息，这些信息将作为元数据存储在流项中。必需信息通过
    POST 表单传递。必需的值从 `request` 对象中提取以创建字典：
- en: '[PRE21]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Since stream items store values as hexadecimal strings, the dictionary is going
    to be converted to a string, then base64- encoded, and finally encoded into a
    hexadecimal string:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 由于流项将值存储为十六进制字符串，因此字典将被转换为字符串，然后进行 base64 编码，最后编码为十六进制字符串：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The Proof of Existence library `publish` method is invoked, along with the
    digest and the computed encoded value, in order to store it in the blockchain:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 调用存在证明库的 `publish` 方法，以及摘要和计算的编码值，以便将其存储在区块链中：
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Response data is then constructed to acknowledge the user''s request. The user
    is provided with information regarding the published item, such as the transaction
    ID, the block hash, the timestamp, and the number of confirmations. The timestamp
    information is crucial in the Proof of Existence use case because it is used to
    prove that the document existed at that particular point in time:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后构造响应数据以确认用户的请求。向用户提供有关已发布项目的信息，例如交易 ID、区块哈希、时间戳和确认数。时间戳信息在存在证明用例中至关重要，因为它用于证明文档在特定时间点存在：
- en: '[PRE24]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Verifying the document
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核实文档
- en: The user who needs to verify the existence of the document will invoke the `verify`
    implementation endpoint. `verify` is an HTTP GET method that accepts document
    digests as query strings and then responds with details regarding the document
    if it has already been published. By doing it this way, the user can be certain
    about the document's existence, provided it has already been published in the
    blockchain.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 需要验证文档存在的用户将调用 `verify` 实现端点。`verify` 是一个 HTTP GET 方法，它接受文档摘要作为查询字符串，然后响应有关文档的详细信息（如果已经发布）。通过这种方式，用户可以确信文档的存在，前提是它已经在区块链上发布。
- en: 'The value of the `digest` query string key is passed as an argument to the
    Proof of Existence library `verify` method. This will return a list of items if
    the document digest can be found in the blockchain ledger:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`digest` 查询字符串键的值作为参数传递给存在证明库的 `verify` 方法。如果可以在区块链分类帐中找到文档摘要，则会返回项目列表：'
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The hexadecimal-encoded value stored is decoded back to a binary string. The
    resulting base64-encoded string is decoded back to fetch the metadata of the submitted
    document:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 存储的十六进制编码值被解码回二进制字符串。结果的 base64 编码字符串被解码回以获取提交文档的元数据：
- en: '[PRE26]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Transaction and block information, along with the metadata of the document,
    is returned to the verifier of the document:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 交易和区块信息以及文档的元数据将返回给文档的验证者：
- en: '[PRE27]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This endpoint implementation fetches the details of the recently published
    document. It is an HTTP `GET` method that accepts the count of the document to
    be fetched as an argument:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此端点实现获取最近发布文档的详细信息。它是一个接受文档计数作为参数的HTTP `GET`方法：
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Executing and deploying the application
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行和部署应用程序
- en: 'The server side of the application is executed by running the Python web server
    application. The server application can be executed on any blockchain node or
    on any machine that has access to the blockchain JSON-RPC server. The main function
    of the application instantiates a web server application at the specified port,
    as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的服务器端由运行Python Web服务器应用程序来执行。服务器应用程序可以在任何区块链节点上执行，也可以在任何具有对区块链JSON-RPC服务器访问权限的机器上执行。应用程序的主要函数在指定的端口实例化Web服务器应用程序，如下所示：
- en: '[PRE29]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The user can access the REST interface once the server has been instantiated
    successfully. Let's publish and verify the existence of a document using the REST
    endpoints.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器成功实例化，用户就可以访问REST接口。让我们使用REST端点发布并验证文档的存在。
- en: 'Let''s use the `curl` tool to invoke the `/publish` POST method, which runs
    in the local machine. We can generate the digest using any hash function. You
    can use the `sha256sum` tool in Linux to generate the hash value:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`curl`工具调用本地机器上运行的`/publish` POST方法。我们可以使用任何哈希函数生成摘要。你可以使用Linux中的`sha256sum`工具生成哈希值：
- en: '[PRE30]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `POST` request publishes the document through a MultiChain node. The server
    then responds with the following data if the publish operation was successful:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST`请求通过MultiChain节点发布文档。如果发布操作成功，服务器将以以下数据响应：'
- en: '[PRE31]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The document's existence has successfully been published if the server responds
    with a transaction ID, as shown in the preceding output. `blockhash` and `blocktime`
    are set to null because the transaction is yet to be included in the blockchain.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器响应具有交易ID，则文档的存在已成功发布，如前述输出所示。`blockhash`和`blocktime`设置为null，因为交易尚未包含在区块链中。
- en: 'The user can invoke the `/verify` GET method endpoint and use the document''s
    digest to verify its existence, as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以调用`/verify` GET方法端点，并使用文档的摘要来验证其存在，如下所示：
- en: '[PRE32]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The preceding response proves that the document existed at the specified timestamp.
    It also gives the published details of the document.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 前述响应证明了文档在指定时间戳存在。它还给出了文档的发布详细信息。
- en: 'All the latest published document information can also be fetched by invoking
    the `/details` endpoint:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过调用`/details`端点获取所有最新发布的文档信息：
- en: '[PRE33]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The details of the document show the latest published proof of the document.
    As we can see, the latest document information has fewer confirmations than the
    older information. This is due to the fact that the earlier published transactions
    are inserted deep in the blockchain. Unlike public blockchains, where transaction
    insertion depends on the priority of the transactions, MultiChain nodes treat
    all the transactions with high priority and are inserted in the order in which
    transactions arrive due to their fairly simple consensus algorithm.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的详细信息显示了文档的最新发布证据。正如我们所看到的，最新的文档信息比较旧的信息具有较少的确认。这是因为较早的发布交易被深深地插入到区块链中。与公共区块链不同，其中交易插入取决于交易的优先级，MultiChain节点将所有交易视为具有高优先级，并按照交易到达的顺序插入，这是由于其相对简单的共识算法。
- en: As described in the architecture, the web server application communicates with
    the blockchain node that is connected to the MultiChain network. The web server
    application can either be deployed in a separate machine that is reachable by
    the MultiChain node, or it could be deployed in the same blockchain node. Although
    deploying the application in another server gives the same result, it introduces
    the problem of centralization due to the fact that there will only be one central
    web server application. Best practice is to run the application locally on the
    blockchain node whenever someone wishes to publish or verify the Proof of Existence
    of a document.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如架构中所述，Web 服务器应用程序与连接到 MultiChain 网络的区块链节点进行通信。Web 服务器应用程序可以部署在一个可被 MultiChain
    节点访问的单独机器上，或者可以部署在同一个区块链节点上。虽然将应用程序部署在另一台服务器上会产生相同的结果，但由于只有一个中央 Web 服务器应用程序，这会引入集中化的问题。最佳做法是在有人希望发布或验证文档的存在性证明时，在区块链节点上本地运行应用程序。
- en: Every application needs a user interface to allow a good user experience. Our
    blockchain application could be integrated with a user interface in which the
    publish use case accepted a document and the requisite information pertaining
    to the document as arguments, and the verify use case only needs the document
    in order to check its existence. The frontend application computes the digest
    of the document in both scenarios.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序都需要用户界面来提供良好的用户体验。我们的区块链应用程序可以与用户界面集成，在这个界面中，发布用例接受一个文档以及与文档相关的必要信息作为参数，而验证用例只需要文档以检查其存在性。前端应用程序在这两种情况下都会计算文档的摘要。
- en: 'Note: The entire Proof of Existence project, along with integration with the
    frontend application, can be found in the GitHub repository of the book ([https://github.com/PacktPublishing/Foundations-of-Blockchain](https://github.com/PacktPublishing/Foundations-of-Blockchain)).
    It can be used to deploy a blockchain application in a private network.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 注：整个“证明存在性”项目以及与前端应用程序的集成可以在本书的 GitHub 仓库中找到（[https://github.com/PacktPublishing/Foundations-of-Blockchain](https://github.com/PacktPublishing/Foundations-of-Blockchain)）。它可以用于在私有网络中部署区块链应用程序。
- en: Summary
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: After we were introduced to the core concepts of blockchain in the earlier chapters
    of this book, in this chapter, we have dived into blockchain by creating a blockchain
    application to implement an existing use case. Throughout this chapter, we've
    carefully analyzed a blockchain use case and proposed an architecture to build
    a simple blockchain application using the MultiChain platform. The MultiChain
    platform's simplicity, along with other features that we discussed, allowed us
    to create and deploy the application with minimal effort. Getting familiar with
    the MultiChain platform has provided us with sufficient insights on architecting
    and developing a simple blockchain use case. This should serve as a foundation
    and motivate us to build and deploy blockchain applications within any other blockchain
    platforms.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书前几章介绍区块链的核心概念后，在本章中，我们通过创建一个区块链应用程序来深入研究区块链。在本章中，我们仔细分析了一个区块链用例，并提出了使用 MultiChain
    平台构建简单区块链应用程序的架构。MultiChain 平台的简单性以及我们讨论的其他功能使我们能够以最小的工作量创建和部署应用程序。熟悉 MultiChain
    平台为我们提供了足够的洞察力，使我们能够构建和部署任何其他区块链平台上的区块链应用程序的基础，并激励我们这样做。
- en: Now that we have a strong background in blockchain technology by implementing
    a fairly simple blockchain use case, it will serve as a foundation for blockchain
    application development. We will now move on and dive deeper into blockchain development
    by familiarizing ourselves with decentralized smart contracts by implementing
    another blockchain use case.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过实现一个相当简单的区块链用例，我们对区块链技术有了扎实的背景，这将为区块链应用程序的开发奠定基础。现在，我们将进一步深入区块链开发，通过实现另一个区块链用例来熟悉分布式智能合约。
