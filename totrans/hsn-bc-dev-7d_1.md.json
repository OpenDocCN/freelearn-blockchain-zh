["```\n$ npm install -g truffle\n```", "```\n$ truffle unbox github_url\n\n```", "```\npragma solidity 0.5.0\n```", "```\npragma solidity 0.5.0;\n\ncontract Gaming {\n/* Our Online gaming contract*/\n}\n```", "```\npragma solidity 0.5.0;\n\ncontract Gaming {\n/* Our Online gaming contract*/\naddress owner;\nbool online;\n\nconstructor() public {\n        owner = msg.sender;\n        online = true;\n    }\n}\n```", "```\nvar Migrations =\nartifacts.require(\"./Migrations.sol\");\nmodule.exports = function(deployer){\n    deployer.deploy(Migrations);\n};\n```", "```\nvar Gaming =\nartifacts.require(\"./Gaming.sol\");\nmodule.exports = function(deployer){\n    deployer.deploy(Gaming);\n};\n```", "```\n$ truffle migrate \n```", "```\npragma solidity 0.5.0;\n\ncontract Gaming {\n    function determineWinner() public(){\n        if (guess == true){\n            return true;\n        }\n        else if (guess == false){\n            return false;\n        }\n    }\n}\n```", "```\ncontract A {\n    function foo() public{\n        //...\n    }\n\n    function bar() public{\n        //...\n    }\n}\n\ncontract B{\n    function foo() public{\n        //...\n    }\n}\n```", "```\nmyReallyLongAndDescriptiveFunctionN\name(\n    reallyLongVariableOne,\n    reallyLongVariableTwo,\n    reallyLongVariableThree,\n    reallyLongVariableFour\n);\n```", "```\npragma solidity 0.5.0;\n\ncontract Gaming {\n    function determineWinner() public() {\n        if (guess == true){\n            return true;\n        }\n        else if (guess == false){\n            return false;\n        }\n    }\n}\n```", "```\nstring str = \"foo\";  //This\nstring str='foo';    //Not this\n```", "```\ncontracts SimpleGame {\n    //...\n}\n\ncontracts MyPlayer {\n    //...\n}\n```", "```\ncontracts SimpleGame {\n    function simpleGame () {\n        //...\n    }\n}\n```", "```\nfunction mysteryNumber() returns (uint) {\n    uint randomnumber = blockhash%10 + 1;\n    return randomnumber;\n}\n\nuint mysteryNumber_ = mysteryNumber();\n```", "```\npragma solidity 0.5.0;\n\nimport \"truffle/Assert.sol\";\nimport \"truffle/DeployedAddresses.sol\";\nimport \"../contracts/Gaming.sol\"\n```", "```\ncontract TestGaming {\n    uint public initialBalance = 10 ether;\n    Gaming gaming;\n```", "```\nfunction beforeAll() public {\n    gaming = Gaming(DeployedAddresses.Gaming());\n}\n```", "```\nfunction testPlayerWonGuessHigher() public {\n    bool expected = true;\n    bool result = gaming.determineWinner(5, 4, true);\n\n    Assert.equal(expected, result, \"The player should have won by guessing the mystery number was higher than their number\");\n}\n\nfunction testPlayerLostGuessLower() public {\n    bool expected = false;\n    bool result = gaming.determineWinner(5, 4, false);\n\n    Assert.equal(expected, result, \"The player should have lost by guessing the mystery number was lower than their number\");\n}\n```"]