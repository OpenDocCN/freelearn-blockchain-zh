- en: Achieving Consensus
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现共识
- en: 'The concept of consensus is straightforward: consensus is when the network
    agrees on what information stored in the network is true and should be kept, and
    what is not true and should not be kept. For Bitcoin, achieving consensus is a
    simple matter of coming to agreement on the set to send and receive of Bitcoin
    across the network. For other networks, achieving consensus would also involve
    coming to an agreement on the final state of smart contracts, medical records,
    or any other network information stored on the blockchain.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 共识的概念很简单：共识是当网络就网络中存储的信息的真实性达成一致意见时，应该保留什么信息，以及什么信息不真实，不应该保留。对于比特币来说，达成共识就是要就网络中要发送和接收的比特币集合达成一致意见。对于其他网络，达成共识还涉及就区块链上存储的智能合约的最终状态或任何其他网络信息达成一致意见。
- en: 'Consensus algorithms have been the subject of research for decades. The consensus
    algorithms for distributed systems have to be resilient to multiple types of failures
    and issues, such as corrupt messages, parts of a network connecting and disconnecting,
    delays, and so on. In financial systems, and especially in blockchains, there
    is a risk of selfish and malicious actors in the system seeking profit. For each
    algorithm in a blockchain network, achieving consensus ensures that all nodes
    in the network agree upon a consistent global state of the blockchain. Any distributed
    consensus protocol has three critical properties:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 共识算法已经成为研究对象数十年。分布式系统的共识算法必须对多种类型的故障和问题具有弹性，如错误的消息、网络的部分连接和断开、延迟等。在金融系统中，特别是在区块链中，系统中存在谋利的和恶意的行为者的风险。对于区块链网络中的每个算法，达成共识确保网络中的所有节点就区块链的一致全球状态达成一致意见。任何分布式共识协议都具有三个关键属性：
- en: '**Safety**: The ability of all the nodes on a distributed network to guarantee
    that they have the same state or consistency'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：分布式网络上所有节点保证具有相同的状态或一致性的能力'
- en: '**Liveness/Availability**: The protocol is guaranteed to succeed and have the
    different nodes produce a final result'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活跃性/可用性**：协议保证成功并使不同节点产生最终结果'
- en: '**Fault tolerance**: The ability of the protocol to deal with nodes producing
    faulty or hostile results'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容错性**：协议处理节点生成错误或敌对结果的能力'
- en: As it happens, a famous paper by Fischer, Lynch, and Paterson stated that it's
    impossible for all three to be true in the same asynchronous distributed system.
    Hence, any and all blockchain designs must make trade-offs between these properties.
    These trade-offs are typically between safety and liveness, as fault tolerance
    is generally seen as a must-have for a globally distributed network.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 恰巧，Fischer、Lynch 和 Paterson 的一篇著名论文指出，在同一个异步分布式系统中不可能同时满足这三个条件。因此，任何区块链设计都必须在这些属性之间做出权衡。这些权衡通常是在安全性和活跃性之间进行的，因为容错性通常被认为是全球分布式网络的必备条件。
- en: 'In blockchain systems, there are currently four primary methods of achieving
    consensus. They are as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链系统中，目前有四种主要方法可以实现共识。它们如下：
- en: Practical Byzantine fault tolerance algorithm
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实用拜占庭容错算法
- en: PoW algorithms
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作量证明算法
- en: PoS algorithms
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权益证明算法
- en: Delegated PoS algorithms (DPoS)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 委托式权益证明算法（DPoS）
- en: These approaches will each be covered in turn in this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法将在本章中依次介绍。
- en: Practical Byzantine fault tolerance algorithm
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实用拜占庭容错算法
- en: '**Practical Byzantine fault tolerance** (**PBFT**) algorithm. Many algorithms
    are called **Byzantine fault tolerant**. The name comes from the allegory that
    presented the original problem.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**实用拜占庭容错**（**PBFT**）算法。许多算法被称为**拜占庭容错**。这个名字来源于提出原始问题的寓言。'
- en: Imagine an ancient Byzantine army moving to capture a city. The idea is to attack
    from all sides. Once the generals of the army reach the city, they must agree
    on when and how to attack. The difficulty is in how to agree. The generals can
    communicate only by messenger, but the messengers could be captured by the enemy,
    and there is the additional fear that one or more of the generals or their commanders
    are traitors.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一支古代的拜占庭军队正在进攻一座城市。攻击的想法是从各个方向进攻。一旦军队的将军们到达城市，他们必须就何时以及如何进攻达成一致意见。难点在于如何达成一致。将军们只能通过信使进行通信，但信使可能会被敌人抓获，而且还有一个额外的担忧，即一个或多个将军或他们的指挥官可能是叛徒。
- en: The generals need a method to ensure that all the loyal generals agree on the
    same plan, and that a small number of possible traitors cannot cause the mission
    to fail.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将军们需要一种方法来确保所有忠诚的将军都同意相同的计划，并且少数可能的叛徒不能导致任务失败。
- en: The loyal generals will all do what the method says they will do, but the traitors
    might do anything. How can the generals create a method that ensures that, as
    long as most of them are loyal, their plans will succeed?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 忠诚的将军会按照方法所说的去做，但叛徒可能会做任何事情。将军们如何创建一种方法，以确保只要他们中的大多数人是忠诚的，他们的计划就会成功？
- en: 'This allegory is also sometimes called the **Chinese general''s** problem,
    as well as a few other names, but the issue remains the same: how can different
    parties securely communicate and reach an agreement about something when communication
    channels may not be secure, and when there may even be traitors in their midst.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个寓言有时也被称为**中国将军问题**，以及其他几个名字，但问题仍然相同：当通信渠道可能不安全时，不同方如何安全地进行通信并达成协议，甚至可能在他们中间有叛徒的情况下。
- en: In the case of blockchain, the generals in the story are the computers that
    are participating in the distributed network running the blockchain. The messengers
    represent the digital network that these machines are running on and the message
    protocols used by those machines. The goal is for the good computers or generals
    to decide which information on the network is valid while rooting out bad actors
    and preventing false information from being recorded on the blockchain.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链的情况下，故事中的将军是参与运行区块链的分布式网络上的计算机。信使代表了这些机器正在运行的数字网络以及这些机器使用的消息协议。目标是让好的计算机或将军决定网络上的哪些信息是有效的，同时根除坏行为者，并防止错误信息被记录在区块链上。
- en: The loyal generals in the story represent the operators of honest nodes that
    are interested in ensuring the integrity of the blockchain and the applications
    based on it, and that are therefore invested in making sure that only correct
    data is recorded. The traitors represent the many bad actors of the world who
    would love to falsify data (especially financial data) for personal gain or on
    behalf of some other antagonistic party. The motivations of the bad actors could
    be varied, from spending Bitcoin they do not truly possess or getting out of contractual
    obligations, or even trying to destroy the network as a form of currency control
    by a hostile government.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 故事中的忠诚将军代表了对确保区块链及其基于其上的应用程序的完整性感兴趣的诚实节点的运营者，因此他们致力于确保仅记录正确数据。叛徒代表了世界上许多坏行为者，他们愿意为了个人利益或代表其他对抗性方的某种利益而篡改数据（尤其是财务数据）。坏行为者的动机可能各不相同，可以是花费他们并非真正拥有的比特币，摆脱合同义务，甚至试图以破坏网络的方式进行货币控制来自对抗性政府的形式。
- en: Byzantine faults
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拜占庭故障
- en: 'To understand PBFT and all the other consensus algorithms that come afterward,
    it''s important to first define what a Byzantine fault is. A Byzantine fault is
    any event or result that would disrupt the consistency of a distributed system,
    such as the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解 PBFT 和随后出现的所有其他共识算法，首先需要定义拜占庭故障是什么。拜占庭故障是指任何可能破坏分布式系统一致性的事件或结果，例如以下情况：
- en: Failure to return any result
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未返回任何结果
- en: Return of an incorrect or inconsistent result
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回错误或不一致的结果
- en: Return of a deliberately misleading result
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故意返回误导性的结果
- en: Any behavior that isn't defined beforehand
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何事先未定义的行为
- en: If any of these events happen, a Byzantine fault is said to have occurred. A
    Byzantine fault tolerant system is therefore able to handle some level of inconsistent
    input, but still provide a correct result at the end. The key here is that such
    systems are fault tolerant, not fault immune. All fault tolerant systems can only
    tolerate so much before their tolerance is exhausted and the system fails in some
    way.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生了任何这些事件，就会说发生了拜占庭故障。因此，拜占庭容错系统能够处理一定程度的不一致输入，但仍然能够在最后提供正确的结果。关键在于这样的系统是容错的，而不是免疫的。所有容错系统只能容忍一定程度的故障，超出容忍范围后，系统就会以某种方式失败。
- en: How PBFT works
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PBFT 的工作原理
- en: 'Hyperledger is the primary blockchain that uses PBFT. Here is how PBFT works
    in Hyperledger. Each validating node (a computer running the blockchain software
    and working to maintain consistency) keeps a copy of the internal state of the
    blockchain. When a node receives a message, it uses the message in conjunction
    with their internal state to run a computation on what the new state should be.
    Then the node decides what it should do with the message in question: treat it
    as valid, ignore it, or take another course of action. Once a node has reached
    its decision about the new message, that node shares that decision with all the
    other nodes in the system. A consensus decision is determined based on the total
    decisions submitted by all nodes:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本是主要使用PBFT的区块链。以下是PBFT在超级账本中的工作原理。每个验证节点（运行区块链软件并努力维护一致性的计算机）都保存区块链的内部状态的一个副本。当节点接收到消息时，它使用消息与其内部状态一起对新状态进行计算。然后节点决定如何处理该消息：将其视为有效、忽略它，或者采取其他行动。一旦节点对新消息做出决定，该节点就会与系统中的所有其他节点分享该决定。一致性决定基于所有节点提交的总决定：
- en: '**Submission**: One or more of the nodes on the network submit a transaction
    that is sent to the other nodes. For instance, if there are ten nodes participating
    and three of them send messages, it looks as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**提交**：网络上的一个或多个节点提交发送到其他节点的交易。例如，如果有十个参与节点，其中三个发送消息，看起来如下：'
- en: All ten computers see three transactions
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十台计算机都看到三个交易
- en: These transactions are distributed so that each node has a full copy of all
    the transactions
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些交易被分发，以便每个节点都拥有所有交易的完整副本
- en: These transactions may arrive at nodes at different times, so the order may
    not be consistent
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些交易可能在不同的时间到达节点，因此顺序可能不一致
- en: '**Ordering**: One of the validating nodes is elected as the leader by a vote
    of the other nodes. This validating leader chooses the order of transactions and
    sends this to the other participating nodes. Each of the other validating nodes
    then rearranges the transactions they already had into the order set by the validating
    leader.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**排序**：通过其他节点的投票，其中一个验证节点被选为领导者。这个验证的领导者选择交易的顺序并将其发送给其他参与节点。其他验证节点然后将它们已经拥有的交易重新排列成验证领导者设置的顺序。'
- en: '**Execution**: The validating nodes then execute the newly ordered transactions.
    Each node independently executes all changes and adds these changes to the global
    state from previous blocks. If consensus cannot be reached, the transactions are
    rolled back and rejected.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**执行**：验证节点然后执行新排序的交易。每个节点都独立执行所有更改，并将这些更改添加到以前区块的全局状态中。如果无法达成共识，交易将被回滚并拒绝。'
- en: This process is repeated for each block. The advantage of PBFT is that it is
    very fast and scales relatively well. The downside is that the participants must
    be known—not just anyone can join the network.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对每个区块都重复这个过程。PBFT的优势是非常快并且相对可扩展。缺点是参与者必须是已知的——不是任何人都可以加入网络。
- en: Proof of Work
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作证明
- en: 'The first consensus algorithm used in blockchains was Bitcoin''s **proof-of-work**
    (**PoW**). Proof-of-work fundamentally functions by exploiting a feature of certain
    cryptographic functions: there are mathematical problems that are very hard to
    solve, but once they are solved, they are very easy to check. As discussed before,
    one of these problems is hashing: it''s very easy to take data and compute a hash
    from it, but extremely difficult to take a hash and discover the input data. PoW
    is most notably used by Bitcoin, Litecoin, and Ethereum.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链中使用的第一种共识算法是比特币的**工作证明**（**PoW**）。工作证明的基本功能是利用某些密码学函数的特性：有一些很难解决的数学问题，但一旦解决了，检查起来就很容易。正如之前所讨论的，其中一个问题就是哈希：很容易从数据中计算出哈希，但从哈希中发现输入数据却非常困难。PoW最显著地被比特币、莱特币和以太坊使用。
- en: 'PoW has the following characteristics:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: PoW具有以下特点：
- en: '**Relatively predictable time to solution**: Bitcoin''s network protocol expects
    each block to take about ten minutes to solve. If the network starts to solve
    the proof-of-work problem too quickly, the network will automatically increase
    the difficulty.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相对可预测的解决时间**：比特币的网络协议预期每个区块解决约需要十分钟。如果网络开始太快地解决工作证明问题，网络将自动增加难度。'
- en: '**Resistant to large increases or decreases in computing power**: Moore''s
    law suggests that the amount of work computers can do is expected to double every
    two years. In addition, because the network is open, anyone can add vast computing
    resources to the network at any time. For the network to remain stable, the algorithm
    must automatically adjust itself. Similarly, if the network ceases to be profitable,
    then the amount of computing power being used will drop as those resources are
    redirected. This is achieved through the automatically adjusting difficulty in
    the algorithm. It must be easy for any network participant to quickly check that
    they have the right chain and that the chain is valid. This is achieved through
    the use of hashing functions.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对计算能力的大幅增加或减少具有抵抗力**：摩尔定律表明，计算机的工作量预计每两年增加一倍。此外，由于网络是开放的，任何人都可以随时向网络添加大量的计算资源。为了保持网络的稳定，算法必须自动调整自身。同样，如果网络不再盈利，那么正在使用的计算能力将会下降，因为这些资源会被重定向。这是通过算法中自动调整难度来实现的。任何网络参与者都必须能够快速检查他们是否拥有正确的链条，以及该链条是否有效。这是通过散列函数来实现的。'
- en: The proof-of-work algorithm maintains network integrity as long as no group
    of actors controls more than 50% of the overall network computing power. The possibility
    of bad actors being able to control the chain is called the **51% attack**. If
    a single group ever controls more than half the network power, they can control
    the network and network transactions by halting payments or even doubling spending.
    The attacking group would be able to prevent new transactions from being confirmed
    (halting payments for users as they see fit) and even reverse transactions that
    happened after they had started controlling the network.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 工作量证明算法只要没有任何一组参与者控制50%以上的整个网络计算能力，就能维护网络的完整性。能够操控链条的坏参与者的可能性被称为**51%攻击**。如果单一组织控制了超过一半的网络计算能力，他们可以通过停止支付或甚至双花来控制网络和网络交易。攻击组织将能够阻止确认新的交易（随意停止用户的支付），甚至在他们控制网络后发生的交易。
- en: How the PoW problem works in Bitcoin
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比特币中的工作量证明问题的原理
- en: 'The PoW algorithm starts by taking the longest chain. In Bitcoin, there are
    multiple ways blocks can be finalized (depending on the included transactions).
    Thus, there may be multiple available "solved" chains that could be selected as
    a base by the Bitcoin nodes. As part of the algorithm, Bitcoin takes the chain
    that is the longest and thus has had the most computing power applied to it. The
    following diagram illustrates a PoW chain:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 工作量证明算法首先采取最长的链。在比特币中，区块可以通过多种方式最终确定（取决于包括的交易）。因此，比特币节点可以选择多个可用的“已解决”链作为基础。作为算法的一部分，比特币采取最长的链，因此接受了最多的计算能力。以下图表说明了工作量证明链：
- en: '![](img/5b958b57-3e0b-4758-a03c-f7d230e30de8.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b958b57-3e0b-4758-a03c-f7d230e30de8.png)'
- en: The difficult puzzle in Bitcoin is to find an input that, when added to the
    prior block hash and the list of transactions, produces a hash that starts with
    a certain number of zeros.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币中的难题是找到一个输入，当加到先前的区块哈希和交易列表中时，会产生一个以特定数量零开始的哈希。
- en: 'Typically, the input to the function is the Merkle root of all transactions
    and the prior block hash. To simplify this for illustrative purposes, imagine
    that we have a simple input, such as *I love Blockchains*. Let''s also assume
    that the system has the easiest possible difficulty: a single zero at the start
    of the hash. The SHA-256 hash of *I love Blockchains* is as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，该函数的输入是所有交易的默克尔根和先前的块哈希。为了简化说明，假设我们有一个简单的输入，例如*I love Blockchains*。同时假设系统的难度是最简单的：哈希起始位置只有一个零。*I
    love Blockchains*的SHA-256哈希如下：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see, it does not begin with `0`. To solve the block for this input,
    we need to find a string (called a **nonce**) that we can add to this string so
    that hashing the combination (*nonce + I love Blockchains*) results in a string
    starting with `0`. As it turns out, we can only do this through testing. For instance,
    if we add `1` to the beginning, we get *1I love Blockchains*, and the hash is
    as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，它不是以`0`开始的。为了解决这个输入的区块，我们需要找到一个字符串（称为**随机数**）可以加到这个字符串上，以便将这个组合（*随机数+
    I love Blockchains*）的哈希结果为以`0`开始的字符串。事实证明，我们只能通过测试来完成。例如，如果我们在开头加上`1`，我们得到*1I
    love Blockchains*，哈希如下：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'No luck. What about 2 and 3? These will also fail to solve the puzzle. As it
    happens, *4I love Blockchains* has a hash that starts with `0`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 没有运气。 那么 2 和 3 呢？ 这些也将无法解决谜题。 恰巧，*4I love Blockchains* 的哈希以 `0` 开头：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It only took four tries, but this is a very low difficulty. Each additional
    zero doubles the challenge of finding a proper input that will compute a proper
    hash. As of writing, a valid Bitcoin block requires 18 zeros to be valid.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这只用了四次尝试，但这是一个非常低的难度。 每增加一个零，找到一个能计算出正确哈希的适当输入的挑战就会加倍。 截至目前，一个有效的比特币区块需要 18
    个零才能有效。
- en: This process of trying to find the nonce that results in a proper hash is called
    mining. Every computer mining a PoW chain is competing to see who can find a proper
    nonce first. The winner gets to create the next block in the chain and is rewarded
    in tokens. For more details, see [Chapter 18](a8437577-99dc-4620-99d5-7fbd19b12659.xhtml),
    *Mining*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试找到产生正确哈希的随机数的过程称为挖矿。 每台挖掘 PoW 链的计算机都在竞争看谁能最先找到正确的随机数。 获胜者有权创建链中的下一个区块，并且以代币的形式获得奖励。
    更多细节，请参阅 [第 18 章](a8437577-99dc-4620-99d5-7fbd19b12659.xhtml)，*挖矿*。
- en: 'The advantage of PoW is that anyone can join a PoW network, and it is well
    established as a functional consensus mechanism. The primary downsides of PoW
    networks are slow speeds and financial costs: running all the computers to do
    these computations is very expensive, and the output is not put to any real productive
    use. This is considered bad for the environment, and can result in increased energy
    prices wherever large amounts of blockchain mining are done. In some areas, blockchain
    mining has been banned for this reason.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: PoW 的优势在于任何人都可以加入 PoW 网络，并且它已经被证明是一种功能性共识机制。 PoW 网络的主要缺点是速度慢和财务成本高：运行所有计算机进行这些计算非常昂贵，并且输出没有被用于任何真正的生产性用途。
    这被认为对环境不利，并且可能导致在进行大量区块链挖掘的地方能源价格上涨。 由于这个原因，一些地区已经禁止了区块链挖掘。
- en: As a result of these downsides, **proof-of-stake** (**PoS**) was invented.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些缺点，**权益证明**（**PoS**）被发明出来。
- en: Proof of Stake
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 股权证明
- en: PoS has the same objectives as PoW to secure the network against attack and
    to allow consensus to occur in an open network. The first digital currency to
    use this method was Peercoin, and was followed by many others, such as NXT, Dash,
    PIVX, and so on. In PoW networks, solving the puzzle is what determines which
    node gets to create the next block in the chain. In PoS networks, blocks are said
    to be forged instead of mined, as they are in proof-of-work blockchains. In PoS
    chains, the validators get rewarded by getting paid the transaction fees for each
    block, and sometimes in additional coins created automatically each time a block
    is created. In PoS chains, the chance to be the creator of the next block is determined
    by the amount of investment a node has in the network.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: PoS 与 PoW 具有相同的目标，即保护网络免受攻击，并允许在开放网络中达成共识。 第一个使用此方法的数字货币是 Peercoin，随后是许多其他数字货币，如
    NXT，Dash，PIVX 等。 在 PoW 网络中，解决谜题决定了哪个节点可以创建链中的下一个区块。 在 PoS 网络中，区块被称为被锻造而不是被挖掘，因为它们在
    PoW 区块链中。 在 PoS 链中，验证者通过获得每个区块的交易费用来获得奖励，并且有时在每次创建区块时自动创建额外的代币。 在 PoS 链中，成为下一个区块的创建者的机会取决于节点在网络中的投资金额。
- en: 'Have a look at the following example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下示例：
- en: 'There are five nodes in a PoS network. They have the following balances:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: PoS 网络中有五个节点。 它们具有以下余额：
- en: 10,000 coins
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 10,000 枚代币
- en: 200 coins
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 200 枚代币
- en: 300 coins
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 300 枚代币
- en: 4,000 coins
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4,000 枚代币
- en: 20,500 coins
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 20,500 枚代币
- en: 'The total number of tokens is 35,000 coins. Assuming that each node is staking
    100% of their coins, every block and the nodes they contain will have the following
    likelihoods of being the next block signer:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 代币的总数为 35,000 枚。 假设每个节点都抵押了他们代币的 100%，每个区块和其中的节点被认为是下一个区块签名者的可能性如下：
- en: 28.57%
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 28.57%
- en: 0.57%
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 0.57%
- en: 0.86%
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 0.86%
- en: 11.4%
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 11.4%
- en: 58.6%
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 58.6%
- en: 'It should be pretty obvious that, if a single node ever controls the majority
    of tokens (or even a large fraction), then they will have substantial control
    over the network. In this case, node #5 would end up creating more than half the
    blocks. Moreover, because node #5 would be regularly signing blocks, it would
    also get the majority of the transaction fees and new coins that are created.
    In a way, PoS rewards validators with interest on their investment in the form
    of additional tokens. One criticism of PoS networks is that the *rich get richer*,
    which can lead to increasing network centralization and control.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '很明显，如果单个节点控制大多数代币（甚至是大部分），那么他们将对网络有很大的控制权。在这种情况下，节点 #5 将创建超过半数的区块。此外，由于节点 #5
    将定期签署区块，它还将获得大多数交易费用和新创建的硬币。在某种程度上，PoS以额外代币的形式奖励验证者对其投资的利息。对PoS网络的一项批评是*富者更富*，这可能导致网络的中心化和控制不断增加。'
- en: The nothing-at-stake attack
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无所不在的利益攻击
- en: One of the issues in PoS systems is the threat of nothing-at-stake attacks.
    In a nothing-at-stake attack, a validator actually creates multiple blocks in
    order to spend tokens multiple times. Because of the low cost of creating blocks
    in PoS systems, there is no financial incentive to the network not to approve
    all the transactions, causing consensus to break down.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**PoS系统**中的一个问题是无所不在的利益攻击威胁。在无所不在的利益攻击中，验证者实际上创建多个区块，以多次消费代币。由于在PoS系统中创建区块的成本很低，网络没有财务激励来阻止所有交易的批准，导致共识崩溃。'
- en: 'For instance, imagine a bad actor, Cain, who only has 100 tokens. He decides
    to try and to cheat, and sends two messages to the network: one in which he sends
    his 100 tokens to Sanjay, and another where he sends his 100 tokens to Eliza.
    The network should accept either transaction, but not accept both. Typically,
    the nodes would have to come to consensus about which transaction is valid or
    reject both of them. However, if a validator is cooperating with Cain (or is run
    by Cain himself), then it turns out it is to their financial advantage to approve
    both blocks.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，想象一下，一个名为Cain的不良行为者，只拥有100个代币。他决定尝试欺骗，向网络发送两条消息：一条是他将他的100个代币发送给Sanjay，另一条是他将他的100个代币发送给Eliza。网络应该接受任一交易，但不接受两者。通常，节点必须就哪个交易有效或拒绝两者达成共识。但是，如果验证者与Cain合作（或由Cain自己运行），那么批准两个区块对他们的财务利益是有利的。
- en: 'In the following diagram, **expected value** stands for the **EV**. It shows
    that if a validator accepts both blocks, it can effectively double spend without
    penalty:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，**预期价值**代表**EV**。它显示如果验证者接受两个区块，它可以有效地双重花费而不受惩罚：
- en: '![](img/07643e79-ac5e-4d8b-bda4-e80701ab4f8d.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07643e79-ac5e-4d8b-bda4-e80701ab4f8d.png)'
- en: To avoid this problem, PoS systems have introduced various countermeasures,
    such as staking deposits. In the case of a blockchain fork or a double-spend attack,
    the validators that participate risk losing their tokens. Through financial penalties
    and loss of staked tokens, the incentive to double spend and validate all blocks
    is thought to be reduced or eliminated.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这个问题，PoS系统引入了各种各样的对策，如抵押存款。在区块链分叉或双重消费攻击的情况下，参与的验证者面临失去他们的代币的风险。通过财务处罚和抵押代币的损失，认为双重花费和验证所有区块的激励会降低或消除。
- en: Variations
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变种
- en: There are numerous variations on the basic PoS approach. Each variation will
    have different requirements, such as the minimum balance needed to have a stake,
    the potential penalties for bad behavior, the rights and abilities of the stakeholders
    of the network, and modifiers, such as how long an account needs to have had a
    staked balance in order to be counted.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 基本PoS方法有许多变体。每种变体都会有不同的要求，如拥有股权的最低余额、不良行为的潜在处罚、网络的利益相关者的权利和能力，以及修饰符，例如账户需要拥有抵押余额多长时间才能计算。
- en: Delegated Proof of Stake
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 委托型股权证明（Delegated Proof of Stake）
- en: DPoS is related to PoS consensus, but with some critical differences. This new
    system is the creation of Dan Larimer of Bitshares, Steemit, and currently EOS.
    Both these networks and Lisk (another commonly used blockchain) are currently
    the only major blockchains that use this approach. In DPoS, the holders of tokens
    are not the ones doing block validation. Instead, they can use their tokens to
    elect a node to validate on their behalf—their delegate (also called a **validator**).
    It is this delegate/validator that helps operate the network. The number of available
    validator slots tends to be locked to a specific number, typically 21\. In order
    to become a delegate, the owner of the node must convince the other users of the
    network to trust them to secure the network by delegating their share of the overall
    tokens on the network to them. Essentially, each token on the network acts as
    a vote, and the top vote holders are allowed to operate the network. Currently,
    only Bitshares, Steemit, EOS, and Lisk are the major blockchains that use this
    approach.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: DPoS与PoS共识有关，但存在一些关键区别。这个新系统是Bitshares、Steemit以及目前的EOS的创始人Dan Larimer的创造。这两个网络以及Lisk（另一个常用的区块链）目前是唯一使用这种方法的主要区块链。在DPoS中，代币持有者不是进行区块验证的人。相反，他们可以使用自己的代币选举一个节点来代表他们进行验证——他们的代表（也称为**验证者**）。正是这个代表/验证者帮助操作网络。可用验证器插槽的数量往往锁定为一个特定的数量，通常是21个。要成为代表，节点的所有者必须说服网络的其他用户信任他们，让他们负责通过将他们在网络上的整体代币份额委托给他们来保护网络。基本上，网络上的每个代币都充当一票，而获得最高选票的人被允许操作网络。目前，只有Bitshares、Steemit、EOS和Lisk是使用这种方法的主要区块链。
- en: 'In DPoS, each delegate has a limited, designated time in which to publish a
    new block. If a delegate continually misses their block creation times or publishes
    invalid transactions, the token holders using their stake can vote them out and
    replace them with a better delegate. The following diagram shows what this structure
    looks as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在DPoS中，每个代表都有一个有限的指定时间来发布新的区块。如果一个代表持续错过他们的区块创建时间或发布无效交易，使用他们投票权的代币持有者可以投票将他们替换为更好的代表。以下图表显示了这个结构如下所示：
- en: '![](img/628dfec8-f071-49f2-b218-27e81770a21b.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/628dfec8-f071-49f2-b218-27e81770a21b.png)'
- en: The primary criticism of DPoS is that it is partially centralized and has no
    real immediate financial penalty for betraying the network. The consequence of
    violating network rules is to be voted out by the token holders. It is thought
    that the cost to reputation and the loss from campaigning for delegated shares
    will outweigh the financial benefit of trying to negatively influence the network.
    By only having a small number of delegate slots, it is easier for the token holders
    to pay attention to the behavior of individual validator nodes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: DPoS的主要批评是它在某种程度上是中央集权的，并且对背叛网络没有真正的即时财务惩罚。违反网络规则的后果是被代币持有者投票淘汰。人们认为，违反网络规则的声誉成本以及竞选代表股份的损失将超过试图负面影响网络的财务收益。由于只有少数的代表插槽，代币持有者更容易关注个体验证节点的行为。
- en: Tendermint consensus
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tendermint共识
- en: Tendermint uses a custom consensus engine, designed as part of a doctoral thesis
    by Jae Kwon. It is similar to DPoS in that participants in the network can delegate
    their voting power to a validating account. However, to do so, they must bond
    or lock their tokens. To do this, they must issue a special bonding transaction
    in which their coins are locked to a validating node. In the event that their
    delegate misbehaves, both the delegate and the accounts lending their coins forfeit
    some portion of their bonded tokens. To release their tokens, another special
    unbonding transaction must be posted to the network, and such withdrawals are
    subject to a long delay.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Tendermint使用自定义共识引擎，由Jae Kwon的博士论文的一部分设计而成。它类似于DPoS，参与网络的人可以将他们的投票权委托给一个验证账户。然而，为了这样做，他们必须债券化或锁定他们的代币。为此，他们必须发出一个特殊的债券交易，其中他们的硬币被锁定到一个验证节点。如果他们的代表行为不端，那么代表和借出他们硬币的账户都将放弃一部分他们债券化的代币。要释放他们的代币，必须向网络发布另一个特殊的解除债券交易，而且这样的提款会受到长时间的延迟。
- en: 'Let''s look at how these transactions happen. The following diagram is from
    the Tendermint documentation:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些交易是如何发生的。以下图表摘自Tendermint文档：
- en: '![](img/3b7ca00f-adc8-4a08-97df-0d171efa1978.png).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/3b7ca00f-adc8-4a08-97df-0d171efa1978.png)。'
- en: 'Let''s look at the preceding figure in more detail. Delegates signal the next
    block by signing votes. There are three types of votes: prevotes, precommits,
    and commits. Each block has a special validator called a **proposer**. The proposer
    goes first, suggesting a valid block state based on a prior locked block. This
    proposal is shared peer-to-peer among the other validators, and if 2/3 or more
    vote in agreement with the locked block (in the prevote stage) then they move
    to the next stage: precommit. In the precommit stage, again, if 2/3 agree with
    the prevote condition, they will signal that they are ready to commit. Finally,
    the actual commitment of the block takes place: the node must have received the
    block, and it must have received 2/3 valid votes to precommit.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看一下前面的图。代表通过签署投票来信号下一个区块。有三种类型的投票：预投票、预提交和提交。每个区块都有一个特殊的验证器，称为**提案者**。提案者首先提出一个基于之前锁定区块的有效区块状态的建议。这个提议在其他验证器之间点对点共享，如果有2/3或更多的验证器同意锁定区块（在预投票阶段），那么它们将进入下一个阶段：预提交。在预提交阶段，同样，如果有2/3的人同意预投票条件，他们将表示他们准备提交。最后，区块的实际提交发生：节点必须已经收到了区块，并且必须已经收到了2/3的有效投票来进行预提交。
- en: If this sequence of 2/3 votes seems unusual, it is because of the nature of
    asynchronous networks, where the validators may receive blocks and votes at different
    times. This sequence, and the edge cases that are handled when the 2/3 majority
    is not reached, allow for effective and fast consensus on unreliable networks.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个2/3投票序列看起来不寻常，那是因为异步网络的性质，验证器可能会在不同的时间收到区块和投票。这个序列以及在未达到2/3多数时处理边缘情况的方式，使得在不可靠的网络上能够有效快速地达成共识。
- en: Proof of Authority
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权威证明
- en: '**Proof-of-authority** (**PoA**) networks are used only when all blockchain
    participants are known. In proof-of-authority, each participant is known and registered
    with the blockchain. Such a blockchain is called a **permissioned chain**, as
    only computers that are part of this approved list of authorities are able to
    forge blocks. It is critical, therefore, that none of the authority computers
    is compromised, and each operator must take pains to ensure the integrity of their
    validator. This approach was originally shared by Gavin Wood of Parity Technologies
    as a different way of running an Ethereum-based blockchain.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**权威证明**（**PoA**）网络仅在所有区块链参与者都已知的情况下使用。在权威证明中，每个参与者都被区块链知道并注册。这样的区块链称为**许可链**，因为只有属于批准的权威列表的计算机才能锻造区块。因此，至关重要的是，没有一个权威计算机被破坏，每个操作者都必须努力确保其验证器的完整性。这种方法最初由Parity
    Technologies的Gavin Wood分享，作为运行基于以太坊的区块链的不同方式。'
- en: Establishing authority
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立权威
- en: 'The three main conditions that must be fulfilled for a validator to be established
    are as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 必须满足的三个主要条件以建立验证器如下所述：
- en: Identity needs to be formally verified and on chain.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份需要经过正式验证并上链。
- en: Eligibility should be difficult to obtain. Examples are things such as becoming
    a notary public, submitting to background checks, and posting a bond.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获得资格应该是困难的。例如成为公证人，接受背景调查和提供保证金等事项。
- en: The set of things that must be required of each authority should be well documented,
    uniform, and worthy of the network's trust.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对每个权威所需的事项集应该有良好的文件记录，一致，并值得网络的信任。
- en: Once an authority has been established, the right to forge new blocks might
    be granted by adding the authority to the list of valid validators for the blockchain.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦建立了权威，可能会通过将该权威添加到区块链的有效验证器列表中来授予锻造新区块的权利。
- en: While PoA is mostly used in private chains, it can be used in public chains
    as well. Two public Ethereum test networks, Rinkleby and Kovan, are public blockchain
    networks that use PoA as their consensus mechanism.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 PoA 主要用于私有链，但也可以用于公共链。两个公共以太坊测试网络，Rinkleby 和 Kovan，是使用 PoA 作为其共识机制的公共区块链网络。
- en: The obvious downside of PoA is that the identity of each validator operator
    must be known and trusted, and the penalties for abusing that trust must be real.
    For global blockchains, this may not be preferred, as one of the appeals of blockchain
    technology is the ability to anonymously exchange value.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: PoA 的明显缺点在于每个验证器操作者的身份必须为人所知和信任，并且滥用信任的惩罚必须是真实的。对于全球区块链而言，这可能并不理想，因为区块链技术的吸引力之一就是能够匿名交换价值。
- en: Proof of Elapsed time
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 已过时的证据
- en: The Hyperledger Sawtooth project introduced a new consensus mechanism called
    **proof-of-elapsed-time** or **PoET**. Hyperledger deals mostly with permissioned
    blockchains, chains in which only a specified number of participants are allowed
    on the network, similar to PoA chains.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Sawtooth项目推出了一种名为**proof-of-elapsed-time**或**PoET**的新共识机制。Hyperledger主要涉及许可链，只有指定数量的参与者被允许进入网络，类似于PoA链。
- en: 'The basic approach is simple:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 基本方法很简单：
- en: Each node must wait a random amount of time
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个节点必须等待一段随机的时间
- en: The first node to stop waiting gets to create a block
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首个停止等待的节点将创建一个区块
- en: There are two things that we must be able to do for this to work. First, we
    must be able to verify that the waiting time for all participants was actually
    random, or else a simple attack would be to pretend to wait a random time and
    then just immediately create a new block. Second, it must be verifiable that not
    only was the length of time chosen random, but that the node actually waited the
    full period of time before acting.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须做两件事情才能使其工作。首先，我们必须能够验证所有参与者的等待时间实际上是随机的，否则一个简单的攻击就是假装等待一段随机的时间，然后立即创建一个新的区块。其次，必须能够验证不仅选择时间的长度是随机的，而且节点实际上在采取行动之前等待了整个时间段。
- en: The solution to these issues comes from Intel (who created the PoET algorithm),
    and relies on special CPU instructions to ensure that only trusted code is run.
    By forcing trusted code to be in charge of handling block timing, the system ensures
    that the lottery is fair.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题的解决方案来自英特尔（他们创造了PoET算法），并依赖于特殊的CPU指令，以确保只运行受信任的代码。强制信任的代码负责处理块时间，确保抽奖公平。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: At this point, you should have a solid foundation in the different mechanisms
    that blockchains use to reach consensus. Each consensus algorithm makes certain
    trade-offs between speed, availability, consistency, and fault tolerance. The
    most common consensus mechanisms are still PoW and PoS, but blockchain development
    continues at a very rapid pace, and new and improved approaches are likely to
    be developed. Improvements to consensus algorithms will improve blockchain scalability
    and reliability, and the scope of the potential applications for the technology.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，您应该对区块链使用的不同机制达成共识具有坚实的基础。每种共识算法在速度、可用性、一致性和容错性之间进行了一定的权衡。最常见的共识机制仍然是PoW和PoS，但区块链的发展非常迅猛，新的、改进的方法可能会被开发出来。共识算法的改进将提高区块链的可扩展性和可靠性，并扩大技术的潜在应用范围。
- en: References
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf](https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf)'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf](https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf)'
- en: '[https://www.microsoft.com/en-us/research/publication/byzantine-generals-problem/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Flamport%2Fpubs%2Fbyz.pdf](https://www.microsoft.com/en-us/research/publication/byzantine-generals-problem/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Flamport%2Fpubs%2Fbyz.pdf)'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://www.microsoft.com/en-us/research/publication/byzantine-generals-problem/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Flamport%2Fpubs%2Fbyz.pdf](https://www.microsoft.com/en-us/research/publication/byzantine-generals-problem/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Flamport%2Fpubs%2Fbyz.pdf)'
- en: '[https://github.com/tendermint/tendermint.com/blob/5c111743a03d2c6ed2e0b14bd3091cac8974c8da/docs/tendermint_v02.pdf](https://github.com/tendermint/tendermint.com/blob/5c111743a03d2c6ed2e0b14bd3091cac8974c8da/docs/tendermint_v02.pdf)'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://github.com/tendermint/tendermint.com/blob/5c111743a03d2c6ed2e0b14bd3091cac8974c8da/docs/tendermint_v02.pdf](https://github.com/tendermint/tendermint.com/blob/5c111743a03d2c6ed2e0b14bd3091cac8974c8da/docs/tendermint_v02.pdf)'
- en: '[https://peercoin.net/assets/paper/peercoin-paper.pdf](https://peercoin.net/assets/paper/peercoin-paper.pdf)'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://peercoin.net/assets/paper/peercoin-paper.pdf](https://peercoin.net/assets/paper/peercoin-paper.pdf)'
- en: '[https://github.com/ethereum/guide/blob/master/poa.md](https://github.com/ethereum/guide/blob/master/poa.md)'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://github.com/ethereum/guide/blob/master/poa.md](https://github.com/ethereum/guide/blob/master/poa.md)'
- en: '[https://medium.com/poa-network/proof-of-authority-consensus-model-with-identity-at-stake-d5bd15463256](https://medium.com/poa-network/proof-of-authority-consensus-model-with-identity-at-stake-d5bd15463256)'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://medium.com/poa-network/proof-of-authority-consensus-model-with-identity-at-stake-d5bd15463256](https://medium.com/poa-network/proof-of-authority-consensus-model-with-identity-at-stake-d5bd15463256)'
