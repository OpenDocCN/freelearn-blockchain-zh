["```\n// **\n  * Sample business network definition.\n  */\n namespace org.example.basic\n\n asset SampleAsset identified by assetId {\n   o String assetId\n   --> SampleParticipant owner\n   o Double value\n }\n\nparticipant SampleParticipant identified by participantId {\n   o String participantId\n   o String firstName\n   o String lastName\n }\n\n transaction SampleTransaction {\n   --> SampleAsset origin\n   --> SampleAsset target\n     o Double txTransferAmount\n }\n\n event SampleEvent {\n   --> SampleAsset origin\n   --> SampleAsset target\n     o Double txTransferAmount\n }\n```", "```\n * Sample transaction processor function.\n  * @param {org.example.basic.SampleTransaction} tx The sample transaction instance.\n  * @transaction\n  */\n async function sampleExchange(tx) { \n     // Get the asset registry for the asset.\n     const assetRegistry = await getAssetRegistry('org.example.basic.SampleAsset');\n\n       //Ensure the balance is greather than the amount to be transfered\n       if(tx.origin.value > tx.txTransferAmount) {\n\n     //charge from receiver account\n     tx.origin.value = (tx.origin.value - tx.txTransferAmount);\n\n     //add to receiver account\n     tx.target.value = (tx.target.value +  tx.txTransferAmount);\n\n     // Update the asset in the asset registry.\n     await assetRegistry.update(tx.origin);\n     await assetRegistry.update(tx.target);\n\n     // Emit an event for the modified asset.\n     let event = getFactory().newEvent('org.example.basic', 'SampleEvent');\n\n     event.origin = tx.origin;\n event.target = tx.target;\n event.txTransferAmount = tx.txTransferAmount;\n\n emit(event);\n\n } else {\n   throw Error(`You do not have enough balance for this transaction: Balance US$: ${tx.origin.value} Transfer Amount: ${tx.txTransferAmount}`);\n }\n }\n```", "```\n/**\n  * Sample access control list. rule Everybody Can Read Everything and send a transaction for example\n  */\n rule EverybodyCanReadEverything {\n     description: \"Allow all participants read access to all resources\"\n     participant: \"org.example.basic.SampleParticipant\"\n     operation: READ\n     resource: \"org.example.basic.*\"\n     action: ALLOW\n }\n rule EverybodyCanSubmitTransactions {\n     description: \"Allow all participants to submit transactions\"\n     participant: \"org.example.basic.SampleParticipant\"\n     operation: CREATE\n     resource: \"org.example.basic.SampleTransaction\"\n     action: ALLOW\n }\n```", "```\nrule OwnerHasFullAccessToTheirAssets {\n description: \"Allow all participants full access to their assets\"\n participant(p): \"org.example.basic.SampleParticipant\"\n operation: ALL\n resource(r): \"org.example.basic.SampleAsset\"\n condition: (r.owner.getIdentifier() === p.getIdentifier())\n action: ALLOW }\n\n```", "```\n\n rule SystemACL {\n description: \"System ACL to permit all access\"\n participant: \"org.hyperledger.composer.system.Participant\"\n operation: ALL\n resource: \"org.hyperledger.composer.system.**\"\n action: ALLOW }\n rule NetworkAdminUser {\n description: \"Grant business network administrators full access to user resources\"\n participant: \"org.hyperledger.composer.system.NetworkAdmin\"\n operation: ALL\n resource: \"**\"\n action: ALLOW\n }\n rule NetworkAdminSystem { description: \"Grant business network administrators full access to system resources\"\n participant: \"org.hyperledger.composer.system.NetworkAdmin\"\n operation: ALL\n resource: \"org.hyperledger.composer.system.**\"\n action: ALLOW\n }\n```", "```\n{\n   \"$class\": \"org.example.basic.SampleParticipant\",\n   \"participantId\": \"1\",\n   \"firstName\": \"Joao\",\n   \"lastName\": \"Dow\"\n }\n```", "```\n{\n   \"$class\": \"org.example.basic.SampleParticipant\",\n   \"participantId\": \"2\",\n   \"firstName\": \"Sarah\",\n   \"lastName\": \"Barbosa\"\n }\n```", "```\n{\n   \"$class\": \"org.example.basic.SampleAsset\",\n   \"assetId\": \"0744\",\n   \"owner\": \"resource:org.example.basic.SampleParticipant#1\",\n   \"value\": 1000\n }\n```", "```\n{\n   \"$class\": \"org.example.basic.SampleAsset\",\n   \"assetId\": \"4010\",\n   \"owner\": \"resource:org.example.basic.SampleParticipant#2\",\n   \"value\": 1000\n }\n```", "```\n{\n   \"$class\": \"org.example.basic.SampleTransaction\",\n   \"origin\": \"resource:org.example.basic.SampleAsset#0744\",\n   \"target\": \"resource:org.example.basic.SampleAsset#4010\",\n   \"txTransferAmount\": 300\n }\n```", "```\ndocker â€“version\n```", "```\nnpm install -g composer-cli@0.20\n```", "```\nnpm install -g generator-hyperledger-composer@0.20\n```", "```\nnpm install -g composer-rest-server@0.20\n```", "```\nnpm install -g yo\n```", "```\nnpm install -g composer-playground@0.20\n```", "```\nmkdir ~/fabric-dev-servers && cd ~/fabric-dev-servers\n\ncurl -O https://raw.githubusercontent.com/hyperledger/composer-tools/master/packages/fabric-dev-servers/fabric-dev-servers.tar.gz\ntar -xvf fabric-dev-servers.tar.gz\n```", "```\ncd ~/fabric-dev-servers\nexport FABRIC_VERSION=hlfv12\n./downloadFabric.sh\n```", "```\n$ git clone -b master https://github.com/hyperledger/fabric-samples.git\n```", "```\n$ curl -sSl https://goo.gl/6wtTN5 | bash -s 1.1.0\n```"]