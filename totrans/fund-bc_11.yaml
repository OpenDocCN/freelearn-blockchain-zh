- en: When Shouldn't We Use Blockchain?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book, we've learned about a number of blockchain concepts in
    order to understand blockchain's basic functionalities. We've also, throughout
    the previous chapters, dived deep into the technology in order to get familiar
    with decentralized applications. However, as we are looking at the foundations
    of blockchain technology that can help us build applications in a decentralized
    network, it's important for us to ask ourselves the question, *why blockchain?*
    It's only useful to use blockchain in a use case if that case requires the characteristics
    of a blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll explore the characteristics of blockchain and analyze
    how they influence the implementation of a blockchain use case. We'll also be
    looking into some of the frameworks you can use to analyze a blockchain use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Distributed databases versus **distributed ledger technology** (**DLT**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What to store on a blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The differences between a centralized versus decentralized architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The properties of blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frameworks that we can use to evaluate use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain is an evolving technology that is continuously implemented by enthusiasts
    in every possible use case. Some of the characteristics of blockchain have attracted
    the attention of a lot of communities who have decided to build their applications
    in decentralized networks. In addition to this, the availability of numerous blockchain
    platforms has catalyzed this attraction to the technology. A number of researchers,
    enthusiasts, and even enterprises have started building applications in decentralized
    networks. Some of them propose new solutions, whereas others are trying to solve
    problems with traditional solutions.
  prefs: []
  type: TYPE_NORMAL
- en: But not all the proposed blockchain solutions are necessarily acceptable; in
    fact, a number of them are heading in the wrong direction by unnecessarily decentralizing
    applications. It's important to understand what blockchain has to offer to before
    it is adopted.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain offers many features that facilitate the building of a trustless
    network. However, it has its own set of limitations. Naval Ravikant, the co-founder
    of AngelList, who was also in the 2017 list of CoinDesk's most influential people
    in blockchain, said in an interview that, *"blockchain is incredibly inefficient,
    it's worth paying the cost when you need the decentralization, but it's not when
    you don't"*, addressing the concern of blockchain technology being used to build
    applications without proper evaluation. Most projects of this type are misguided
    due to the lack of a universally accepted definition of the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: In spite of the depth of knowledge of blockchain technology, we need to understand
    and weigh several parameters before undertaking any blockchain project. There
    are several evaluation models that will justify the use of a decentralized blockchain
    over traditional centralized systems. In this chapter, we will look into some
    of the parameters and also the evaluation strategy that will help us answer the
    question, *when shouldn't we use blockchain?*
  prefs: []
  type: TYPE_NORMAL
- en: Distributed databases versus distributed ledger technology (DLT)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first question that pops up when we think of implementing blockchain is,
    *how is blockchain-powered ledger technology different from traditional databases?*
    Traditional databases are centralized, and most blockchain platforms use databases
    to store transactions locally on each node. So, the actual comparison should be
    between the DLT-powered by blockchain and the distributed databases, and this
    is what we'll focus on in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Although databases are distributed in the case of distributed databases, there
    is still centralization involved as the databases are managed by a central trusted
    entity, whereas the ledger in a DLT is maintained by trustless nodes in the network.
    So, distributed databases don't guarantee decentralization and still promote a
    centralized architecture with a trusted authority. The architecture difference
    is clearly depicted in *Figure 11.1*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The business use case that is trying to adopt blockchain as a storage technology
    has to understand the benefits and pitfalls of each of these storage technologies.
    Blockchain has a set of characteristics that may or may not favor the use case.
    We will be pointing out some of the characteristics of blockchain-based DLTs that
    will help us analyze the suitability of the technology for any use case under
    discussion:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fe80380-f5f9-4f77-9b77-0d7ec9e65f98.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: Database versus DLT architecture'
  prefs: []
  type: TYPE_NORMAL
- en: Decentralized control of information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DLT decentralizes the control of information by enabling data to be shared
    across the boundaries of trust. Traditional databases are usually controlled by
    an entity, and they cannot be easily shared with the other trustless entities.
    One way to share the information stored on each entity''s database is through
    an intermediary. Each entity will share information that needs to be communicated
    with another entity; this will be done through a central authority trusted by
    everyone. *Figure 11.2* shows four entities communicating with an intermediary
    database in order to fetch and send sharable information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/78dc4c22-9cac-4bd8-8c51-7f1520679f63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: Trustless entities sharing data through an intermediary database'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, the decentralization of a DLT allows each entity to share
    data, while the blockchain will maintain all of the information and will be trusted
    by every node in the network. Each entity can verify the data on the blockchain
    and make sure that the information is unmodified without the need for a central
    trusted authority. Each entity will maintain a copy of the shared information,
    which is synced across the network, as shown in *Figure 11.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98b23c43-1226-4a5a-b851-bf58b2c7121e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.3: Trustless entities sharing data with each other without an intermediary'
  prefs: []
  type: TYPE_NORMAL
- en: The decentralization achieved by a DLT helps to share information without trusting
    on a central entity. Removing the need for a central database helps to eliminate
    all the processes involved in maintaining it. The processes may include hiring
    staff to set up the infrastructure, auditing, backup, migration, and so on. The
    DLT eliminates the dependency on human organizations and creates a completely
    decentralized autonomous organization. In summary, decentralization makes perfect
    sense when information needs to be shared across boundaries of trust.
  prefs: []
  type: TYPE_NORMAL
- en: Confidentiality of information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Databases that are managed by centralized entities maintain the confidentiality
    of information by setting up authentication and authorization mechanisms. Only
    authenticated users who are authorized to access the resources will be able to
    perform operations on that information.
  prefs: []
  type: TYPE_NORMAL
- en: The security of data on the database is enhanced by using encryption techniques
    so that confidentiality is maintained even if the database is compromised.
  prefs: []
  type: TYPE_NORMAL
- en: A DLT is a public ledger that can be accessed by anyone without any authentication.
    A completely permissionless DLT doesn't enforce access control, and data will
    be accessible to everyone in the network. Data that is in the form of transactions
    has to be transparent in a decentralized network so that every node can verify
    them. The openness of the data stored on a blockchain is what makes decentralization
    possible. Bitcoin, or any other public blockchain platform (such as Ethereum),
    provides complete transparency for the transactions embedded in the blocks. Since
    identities created in the blockchain network are not mapped to real-world identities,
    participants are able to stay anonymous even though the transactions are public.
    But that may not be ideal for use cases that need complete or partial privacy.
  prefs: []
  type: TYPE_NORMAL
- en: Some advanced techniques, such as **zero-knowledge proofs** (**zk-SNARKS**)
    or encryption, can be used to preserve the privacy of the users. Payment channels
    such as the *Lightning Network*, which was discussed in [Chapter 9](35b56abd-53ae-479b-81b7-857a5baebcbc.xhtml),
    *Blockchain Optimizations and Enhancements*, can be used to commit only the desired
    transactions to the blockchain while performing rest of the transactions off-chain.
    There are other solutions, such as storing the state changes in a secure vault
    and storing only the reference address in the blockchain. The resources in the
    secure vault can only be accessed by authorized entities.
  prefs: []
  type: TYPE_NORMAL
- en: DLTs provide solutions to preserve the privacy of the entities. However, these
    solutions will make the implementation complex and inefficient. The proposed solutions
    will be against the principles of DLT. So, any use case where privacy is the primary
    concern would be better off using traditional databases to store information.
  prefs: []
  type: TYPE_NORMAL
- en: Robustness
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DLTs will be heavily exposed to the public due to the decentralized nature of
    the technology. DLTs become more resilient the more they get exposed to the public
    network. The immutability achieved by the ledger ensures that the information
    cannot be easily tampered with by the intruders. The decentralization helps to
    achieve redundancy of information across the network, which will ensure a fault-tolerant
    system. The overall health of the system doesn't depend on any particular entity
    that will make the system robust.
  prefs: []
  type: TYPE_NORMAL
- en: Traditional databases can be replicated and partitioned. Replicating the database
    records will make the database fault-tolerant. The replication strategy is not
    an inherent feature of most databases. Although a distributed database system
    will replicate the records in several nodes, they are not as decentralized as
    a DLT.
  prefs: []
  type: TYPE_NORMAL
- en: There will be delays and synchronization issues among the nodes in the network.
    So, they are not as fault-tolerant as DLTs and disaster recovery mechanisms need
    to be employed for databases, especially for those that are centralized. A blockchain-based
    DLT is the preferred choice for storing records when a use case needs to achieve
    a fault-tolerant and robust system.
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We concluded in the previous section that DLTs are more robust than traditional
    databases. But this fault-tolerant system comes with the cost of reduced performance.
    We have already come across the scalability issues faced by blockchain technology.
    This is due to the verification and other consensus mechanisms that are required
    to achieve decentralization. Bitcoin uses a **Proof of Work**  (**PoW**) algorithm
    to achieve the consensus, which restricts the block creation time to 10 minutes.
    This will limit the rate at which transactions are added to the blockchain. Databases
    don't have any such restrictions with record insertions. Creating records in database
    tables is much faster than inserting transactions into blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Several blockchain platforms have solutions to improve the transaction speed.
    However, they cannot reach the performance achieved by traditional databases.
    Databases can achieve higher performance by choosing a specific type of database
    for a specific application. Relational database, as well as a wide range of non-relational
    databases such as key-value stores, tabular databases, and graphs, can be used
    based on the requirements of the application. Furthermore, databases can increase
    the performance of read operations by using in-memory storage techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Databases are well suited to achieving high transaction throughput. When a use
    case needs fast read and write operations, databases should be the preferred choice
    of technology.
  prefs: []
  type: TYPE_NORMAL
- en: What can we store on a blockchain?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We previously compared blockchains with databases and analyzed their respective
    properties to evaluate their suitability before selecting one as our storage mechanism.
    We have assumed that a blockchain can store similar information that can be inserted
    into a database. Although it is possible to insert any data into a blockchain,
    it is not the preferred storage mechanism for static data. In this section, we
    will list out a few of the constraints on storing data on a blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Storing data as transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data on a blockchain is stored in the form of atomic events called transactions.
    In a cryptocurrency such as Bitcoin, transactions contain scripts that help to
    transfer assets. However, they could also contain arbitrary information such as
    executable programs that act as smart contracts. A transaction should also ensure
    that it has an optimized set of instructions that will decide the current state
    of the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Storing minimal data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although arbitrary information can be stored in blockchain transactions, it
    is never recommended to dump bulky data on a blockchain. A blockchain is not a
    decentralized storage solution. There are several other distributed file sharing
    protocols, such as IPFS, that are better for storing hypermedia.
  prefs: []
  type: TYPE_NORMAL
- en: Since the transaction fee is calculated based on the size of the data in the
    transaction, you should try to keep the transaction as small as it needs to be
    in order to get the job done.
  prefs: []
  type: TYPE_NORMAL
- en: Storing data that requires minimal changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Though the blockchain doesn't allow data to be modified, previously stored data
    can be updated by creating a new transaction. It's important to note that transactions
    are not processed quickly in blockchain networks, and it's recommended to wait
    for a certain number of block confirmations even after the transaction is included
    in the block. If a particular data item needs to be updated very often, it will
    take a considerable amount of time before all the interrelated transactions are
    processed. Many nodes might even reject such transactions that reference other
    unconfirmed transactions. So, it's recommended to store and process such data
    off-chain.
  prefs: []
  type: TYPE_NORMAL
- en: Centralized versus decentralized application architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have compared DLTs and databases by analyzing their properties. But it's
    also important to analyze the architecture of the application before implementation.
    We will describe the architecture for both centralized and decentralized applications
    so that there will be more clarity about the components and the way in which they
    communicate with each other.
  prefs: []
  type: TYPE_NORMAL
- en: In an application that uses a basic centralized server architecture, there will
    only be a single instance of all the components involved. *Figure 11.4* shows
    the architecture diagram of a web server application. The user can communicate
    with the web server through the user interface provided by the web application.
    A web application is programmed using a combination of scripting languages, such
    as JavaScript, and markup languages, such as HTML. A simple web application will
    have a web server that hosts the application. However, the web server can interact
    with the database, file, or any other servers required for the application. Since
    centralized servers have a single physical address, they are mapped to domain
    addresses. The user can reach the **Domain Name System** (**DNS**) servers to
    find the physical address of the web server and then communicate using application
    protocols, such as HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a centralized architecture, any number of components can function independently
    and communicate with each other whenever required. A typical web application will
    have a database, storage, and web servers as their components, as shown in *Figure
    11.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d272e927-60a6-4c65-a1bf-e542242bfd68.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.4: Architecture diagram of a centralized application'
  prefs: []
  type: TYPE_NORMAL
- en: A decentralized application will communicate with a network of nodes that perform
    similar functions. A client that uses a decentralized application can communicate
    with any of the nodes in the network to perform any action. Unlike centralized
    servers, a decentralized architecture doesn't use DNS servers as there is no single
    server.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11.5* shows a node that is part of the blockchain network. The user
    communicates directly with this node to use any of the functionality of the application.
    As we have seen with several blockchain platforms, every node will expose a port
    to enable the communication using the **Remote Procedure Call** (**RPC**) protocol.
    JavaScript libraries are used to set up RPC connections if the client wants to
    communicate using the web application. Some blockchain platforms provide a bridge
    to facilitate communication with the decentralized network. MetaMask is a bridging
    application used in Ethereum.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be seen in the diagram of a centralized application''s architecture
    that the infrastructure design is flexible since a single entity is responsible
    for maintaining the infrastructure. In a decentralized architecture, nodes don''t
    have much flexibility when it comes to the design. A pure decentralized architecture
    doesn''t integrate with any other centralized components as it would be against
    the decentralization model. An application that requires several components to
    be integrated would form a complex architecture, and such an architecture is not
    desired by a decentralized network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c7b1ceb-1f0a-4564-bbc6-847e234100d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.5: Architecture diagram of a decentralized application'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see in *Figure 11.5*, a client will communicate with the decentralized
    network without an intermediary. But there are several use cases that will require
    integration of centralized trusted entities with a decentralized network where
    functionalities are defined in smart contracts. A hybrid architecture can be created
    by deploying trusted entities in the form of middleware, as shown in *Figure 11.6*.
  prefs: []
  type: TYPE_NORMAL
- en: Middleware is often used as an intermediary between the client and the blockchain
    network. It could be a web server that can communicate with a blockchain node
    and create and forward the transaction whenever required. The middleware is basically
    a trusted entity that provides trusted data to the blockchain. The Ethereum platform
    makes use of special trusted entities called **oracles**. These oracles can provide
    trusted external information to contracts in blockchain nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'A hybrid architecture is often implemented by enterprises in situations where
    blockchain alone isn''t suitable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/989bc760-0584-40a3-b71e-6b6a07f3b557.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.6: Architecture diagram of a decentralized application with middleware'
  prefs: []
  type: TYPE_NORMAL
- en: Properties of blockchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've discussed a few of the properties of blockchain while comparing
    DLTs with databases. But due to its decentralized nature, blockchain has a number
    of inherent properties that will greatly benefit some use cases while not adding
    value to others. In this section, we'll discuss these properties so that you are
    able to properly evaluate whether blockchain would be suitable in your own use
    case.
  prefs: []
  type: TYPE_NORMAL
- en: Immutability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blockchain is a ledger that doesn't allow you to update or delete existing records.
    The data recorded on the blockchain is supposed to remain for eternity. This makes
    a blockchain an immutable data structure. Unlike with traditional record-keeping
    technologies, a record cannot be erased once it is included in the blockchain.
    The only way to update a record is by creating a new record that will undo the
    effect of the previous record. Update operations are expensive in blockchain because
    each record insertion consumes time and fees.
  prefs: []
  type: TYPE_NORMAL
- en: Immutability is one of the key characteristics of blockchain, so it's essential
    that the selected use case can make use of the immutable nature of blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Non-repudiation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each transaction stored in a blockchain is created by an entity that signs the
    transaction. It is infeasible to remove a transaction once it has been added to
    the blockchain due to the immutability of blockchain. Due to this, the entity
    that signed the transaction cannot deny the existence of the transaction. Repudiation
    can be observed in centralized systems due to their mutability, but it is highly
    unlikely in decentralized systems.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main advantages of decentralization is enhanced security. We have
    already discussed the level of security provided by blockchain technology in [Chapter
    10](53dc28ad-de3d-463a-8244-e48d0d19d616.xhtml), *Blockchain Security*. The decentralization
    of the blockchain network will make the system resistant to many of the traditional
    attacks that can be performed on the centralized systems.
  prefs: []
  type: TYPE_NORMAL
- en: Any use case implemented using a blockchain doesn't have to worry about protection
    of the system against many of the traditional attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Redundancy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the blockchain records are replicated across all the nodes of the network,
    achieving a high level of decentralization. The redundancy achieved by the network
    ensures that it is a fault-tolerant system. However, redundancy will introduce
    latency in the network, which negatively affects performance. It is important
    to consider the tradeoffs between fault tolerance and performance before implementing
    blockchain in any use case.
  prefs: []
  type: TYPE_NORMAL
- en: Reduced cost
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the attractive features of creating applications in a decentralized network
    is eliminating the costs involved in managing the organization, creation, and
    maintenance of the infrastructure. It is ideal to implement use cases where there
    is no single entity to bear the functioning cost. **Decentralized Autonomous Organizations**
    (**DAOs**) are a use case where there is no entity responsible for bearing the
    cost incurred.
  prefs: []
  type: TYPE_NORMAL
- en: Transparency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every transaction included in the blockchain has to be verified by every node
    in the network. The verification process mandates the transparency of all the
    transactions stored in the blockchain. It is crucial to determine the data to
    be included in the blockchain when implementing a use case. An application where
    confidentiality is a high priority is not a good use case for a public blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Decision models for blockchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Based on the depth of understanding of blockchain technology and its impact
    on real-world problems, many researchers have proposed several decision models
    that will help to quickly assess the suitability of blockchain in any use case.
    These decision models consider all the fundamental principles of the blockchain
    and decide whether the use case is suitable to be implemented in a blockchain-based
    ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Karl Wüst and Arthur Gervais
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Two computer science researchers, Karl Wüst and Arthur Gervais, proposed a decision
    model in the paper *Do you need a Blockchain?*, which was published in IACR Cryptology
    ([https://eprint.iacr.org/2017/375](https://eprint.iacr.org/2017/375)). The model
    helps to decide between permissioned and permissionless blockchains when there
    are mutually mistrusting entities in the system.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11.7* depicts the flowchart for the blockchain decision model, which
    decides upon the suitability of blockchain in the use case and also helps to decide
    upon the type of blockchain. It suggests blockchain as a solution if the use case
    satisfies all of the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: It needs to store the state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are multiple writers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no online **Trusted Third Party** (**TTP**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the writers are untrusted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It further suggests the use of a permissionless blockchain if all the writers
    are unknown, and recommends a permissioned blockchain otherwise. A permissioned
    blockchain will be public if the transactions are verified by everyone; otherwise,
    the blockchain could be maintained in a private network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/053fdc95-ea86-451c-a9ac-f5b0860f988c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.7: Flowchart of the blockchain decision model (source: https://eprint.iacr.org)'
  prefs: []
  type: TYPE_NORMAL
- en: 'They also listed out the different properties of blockchains and databases
    to compare the implementations. *Table 11.1* shows several properties of permissionless
    blockchains, permissioned blockchains, and trusted databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Permissionless Blockchain** | **Permissioned Blockchain** | **Central
    Database** |'
  prefs: []
  type: TYPE_TB
- en: '| Throughput | Low | High | Very High |'
  prefs: []
  type: TYPE_TB
- en: '| Latency | Slow | Medium | Fast |'
  prefs: []
  type: TYPE_TB
- en: '| Number of readers | High | High | High |'
  prefs: []
  type: TYPE_TB
- en: '| Number of writers | High | Low | High |'
  prefs: []
  type: TYPE_TB
- en: '| Number of untrusted writers | High | Low | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Consensus mechanism | Mainly PoW, some PoS | BFT protocols (such as PBFT)
    | None |'
  prefs: []
  type: TYPE_TB
- en: '| Centrally managed | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: 'Table 11.1: Comparing properties of types of blockchain and central databases'
  prefs: []
  type: TYPE_NORMAL
- en: Birch-Brown-Parulava model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'David Birch, Richard Brown, and Salome Parulava proposed an evaluation model
    in the paper *Towards ambient accountability in financial services: Shared ledgers,
    translucent transactions and the technological legacy of the great financial crisis*,
    which was published in the *Journal of Payments Strategy and Systems*. The paper
    proposes a model to explore the application of shared ledgers in financial services.
    They also envision a financial marketplace with translucent transactions.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11.8* shows the proposed decision model, which evaluates the application
    of blockchain in financial services. The type of blockchain to go with is classified
    as permissioned or permissionless based on the permissions assigned to the users
    of the ledger. They are also classified in a more granular way based on the level
    of influence of the users on the functionality of the shared ledger:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1aba712f-0520-405e-85df-2ed33e58c37c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.8: Decision model for the financial services (Source: Birch-Brown-Parulava
    model)'
  prefs: []
  type: TYPE_NORMAL
- en: Framework to evaluate the suitability of blockchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An evaluation framework was created by several researchers, namely Sin Kuang
    Lo, Xiwei Xu, Yin Kia Chiam, and Qinghua Lu, in a paper titled *Evaluating Suitability
    of Applying Blockchain*. The framework considers many of the properties of the
    blockchain to evaluate whether it matches the requirements of the use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'The proposed framework consists of seven questions that need to be answered
    before evaluating the use case, as shown in *Figure 11.9*. The framework suggests
    using a blockchain when the following conditions are met:'
  prefs: []
  type: TYPE_NORMAL
- en: The scenario requires multiple entities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The operation is not centralized
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The integrity of transaction history is required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance is not the priority
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no trusted party involved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data transparency is desired
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserted data shouldn't be modifiable (immutable)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The framework further evaluates whether some properties of blockchain could
    be retained with alternative solutions. The framework shown in *Figure 11.9* further
    evaluates whether the trusted authority should be decentralized, whether data
    can be protected if transparency is not desired, or whether modifiable, and bulk
    data can be maintained off-chain. This framework is not as stringent as other
    decision models when evaluating the requirements of the use case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36de8de0-5d48-4568-a572-3d46c82ced1a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.9: Framework for evaluation (source: Evaluating Suitability of Applying
    Blockchain)'
  prefs: []
  type: TYPE_NORMAL
- en: This framework evaluated a few industrial use cases in the paper. After executing
    each use case requirement in the framework, it concluded that supply chain-and
    identity management-related applications could be easily adapted into a blockchain.
    On the other hand, information-sensitive use cases such as electronic health records
    and stock markets are not suitable to be implemented in a blockchain due to the
    transparency and low throughput of blockchain networks. In the next chapter, we'll
    analyze several use cases after evaluating each of them for their suitability.
  prefs: []
  type: TYPE_NORMAL
- en: Generalized decision model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have seen several decision models proposed by blockchain researchers. Although
    all of them can be used to evaluate the requirements of the use case, there is
    no universally agreed list of conditions to decide when to use conventional technology
    and when to use blockchain. Based on the decision models mentioned earlier and
    all the properties of blockchain discussed in the earlier section, *Properties
    of blockchain*, we have created a generalized decision model, as shown in *Figure
    11.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d57660b-755a-449f-84d7-aa263ddaf58f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.10: Flowchart of the generalized decision model'
  prefs: []
  type: TYPE_NORMAL
- en: 'The decision model depicted in *Figure 11.10* considers all the properties
    of blockchain before deciding on the suitability of blockchain for the use case.
    Similar to the earlier decision models, it needs to agree on the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no trusted party involved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The immutability of transaction data is desired
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scenario doesn't need high performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The transaction data isn't confidential or could be protected by encrypting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are multiple writers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data can be shared and replicated across the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A use case is suitable to be implemented using blockchain technology if all
    the conditions are satisfied. It is also crucial to determine the type of blockchain
    so that a suitable blockchain platform can be selected for the implementation.
    The decision model suggests a permissionless or permissioned based on the nature
    of the writing entities, as shown in *Figure 11.10*. It also suggests a public
    blockchain network if the data can be shared and verified by everyone in the network,
    or a private blockchain if there is a restriction on shared data.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the decision model in the next chapter to evaluate, analyze, and
    choose the appropriate blockchain platform for a variety of use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has provided insight into the strategies to use when deciding whether
    to develop a decentralized application. A comparison was drawn between distributed
    databases and the blockchain-based DLT to explore the properties of blockchain.
    Centralized and decentralized application architectures were covered in depth
    to explain when a blockchain-based architecture adds value. We also explored several
    key properties of blockchain architectures in order to give the readers the essence
    of blockchain. Finally, we explored some decision models that evaluate the suitability
    of blockchain for certain use cases that were explored.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are able to distinguish between a blockchain and a non-blockchain
    use cases with the help of decision models, we'll move on to discuss several financial
    and non-financial blockchain use cases by pointing out the issues in the current
    implementations and justifying the solution provided by blockchain technology.
  prefs: []
  type: TYPE_NORMAL
