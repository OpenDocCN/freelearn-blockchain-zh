- en: 'Five Forces of Bitcoin - #3 Consensus Algorithm'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '比特币的五大力量 - #3 共识算法'
- en: 'In this chapter, we will find out what makes the Bitcoin blockchain machine
    tick in a decentralized way. We are going to take a deep dive into the consensus
    mechanism of Bitcoin called Proof-of-Work and see what it has to do with complex
    math problems and mining. We will cover the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入了解比特币区块链是如何以分散的方式运转的。我们将深入探讨比特币的共识机制——工作量证明，看看它与复杂的数学问题和挖矿有什么关系。本章将涵盖以下主题：
- en: The Byzantine Generals' Problem
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拜占庭将军问题
- en: The Proof-of-Work consensus algorithm
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作量证明共识算法
- en: Decentralized consensus and game theory
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分散式共识和博弈论
- en: The Byzantine Generals' Problem
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拜占庭将军问题
- en: The Byzantine Generals' Problem is actually an abstract way to describe a problem
    in computer systems introduced in a 1982 paper of the same name. The problem states
    that reliable computer systems must be able to function effectively in the presence
    of faulty components that may send conflicting information to different parts
    of the system. This issue is even more acute in decentralized computer networks.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 拜占庭将军问题实际上是描述计算机系统中的问题的一种抽象方式，它是在一篇同名的论文中介绍的，发表于1982年。该问题指出，可靠的计算机系统必须能够在存在发送相互冲突信息的故障组件的情况下有效地运行。在分散的计算机网络中，这个问题变得更加严峻。
- en: 'This is illustrated in the following diagram:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表中有所体现：
- en: '![](img/0269e761-4c43-4353-b232-011aef86a227.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0269e761-4c43-4353-b232-011aef86a227.png)'
- en: Let's imagine the following thought experiment.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一下以下思维实验。
- en: 'The Byzantine army has surrounded an enemy city. The army is organized in several
    units. Each unit is commanded by a general. All these generals need to come up
    with a coordinated plan of action, but they are located away from each other and
    can communicate only via messages. To make things more complicated, one or more
    of the generals may be traitors. Such potential traitor generals can send misleading
    messages and try to disrupt any coordinated plan of action, be it attack or retreat.
    To find a successful solution to this conundrum, the Byzantine army needs to find
    its path to coordinated action, one way or another. This experiment can be seen
    in the following diagram:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 拜占庭军队已经包围了一座敌方城市。军队被组织成几个部队，每个部队由一位将军指挥。所有这些将军需要协调行动计划，但他们相距甚远，只能通过消息进行通信。更复杂的是，一个或多个将军可能是叛徒。这些潜在的叛徒将军可以发送误导性的消息，试图破坏任何协调的行动计划，无论是进攻还是撤退。为了找到这一困境的成功解决方案，拜占庭军队需要设法找到通向协调行动的路径，无论如何。这个实验可以在以下图表中看到：
- en: '![](img/39498b44-4505-43b0-84ae-cd487e2f368a.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39498b44-4505-43b0-84ae-cd487e2f368a.png)'
- en: To achieve this, the Byzantine army needs some algorithm that works effectively
    toward a coordinated outcome when the majority of loyal generals follow it, while
    some traitors don't.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，拜占庭军队需要一些能够在绝大部分忠诚将军遵循的情况下有效地朝着协调的结果前进的算法，而某些叛徒则不会遵循这一算法。
- en: The Proof-of-Work consensus algorithm
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作量证明共识算法
- en: Now that you know the problem, let's see the solution, which is called the Byzantine
    fault tolerance algorithm. This algorithm involves game theory and math.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经了解了问题，那么现在让我们来看看解决方案，这就是所谓的**拜占庭容错算法**。这种算法涉及到博弈论和数学。
- en: The first and foremost practical implementation of the Byzantine fault tolerance
    algorithm came with the Bitcoin's Proof-of-Work. In this case, the generals are
    nodes on the Bitcoin network, also known as **miners**. A network node is a connection
    point that can receive, create, store, and send data across a network. In other
    words, nodes are the connected dots that make up a network.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 拜占庭容错算法的首个实际实施是伴随着比特币的工作量证明而来的。在这种情况下，将军是比特币网络上的节点，也被称为**矿工**。网络节点是可以在网络上接收、创建、存储和发送数据的连接点。换句话说，节点是构成网络的连接点。
- en: The important concept to grasp here is that these mining nodes start from the
    assumption that nobody else on the network can be trusted.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要把握的重要概念是，这些挖矿节点从一个假设出发，即网络上其他任何人都是不可信任的。
- en: The Proof-of-Work algorithm guarantees network consensus even in the presence
    of Byzantine non-compliant nodes. Let's see how this mechanism works in Bitcoin.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**工作量证明算法**确保即使存在拜占庭不合规节点，网络也能保持一致性。让我们来看看比特币中这种机制是如何运作的。'
- en: As we all know by now, Bitcoin is a peer-to-peer network where all activities
    are done by its users through appropriate software and hardware. These activities
    include making transactions, receiving transactions, verifying, and transmitting
    transactions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们现在都知道的，比特币是一个点对点网络，在这个网络中，所有的活动都是由其用户通过适当的软件和硬件来完成的。这些活动包括进行交易、接收交易、验证和传输交易。
- en: Introduction to mining
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挖矿简介
- en: Now, we will introduce the concept of mining, which many of you have probably
    heard of. Mining basically involves doing Proof-of-Work and results in generating
    new coins as a reward for the miner who successfully did this Proof-of-Work first
    for each new block. Proof-of-Work involves a hefty amount of calculations done
    by a computer aimed at solving cryptographic hash puzzles. Let's dig into the
    nuts and bolts of this mechanism to figure out how it works.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将介绍许多人可能听说过的挖矿概念。挖矿基本上涉及到进行工作证明，并且会产生新的硬币作为奖励，这些硬币是为每个成功进行此工作证明的矿工而产生的，每个新区块都是如此。工作证明涉及到由计算机完成的大量计算，旨在解决密码哈希难题。让我们深入了解这个机制的细节，以弄清它是如何工作的。
- en: 'First, let''s see how miners create new blocks. The following diagram illustrates
    the creation process:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下矿工是如何创建新区块的。以下图表说明了创建过程：
- en: '![](img/2be2a287-6fba-4215-820d-df9778e994d9.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2be2a287-6fba-4215-820d-df9778e994d9.png)'
- en: 'Now, mining nodes collect and aggregate new transaction data. Upon receiving
    such data, each node independently verifies each and every transaction against
    a long list of criteria, including the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，挖矿节点收集和汇总新的交易数据。在接收到这样的数据后，每个节点都会独立地对每笔交易进行验证，根据一长串的标准进行验证，其中包括以下内容：
- en: Tracking the source of the digital money being spent
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 追踪正在消费的数字货币的来源
- en: Checking for double spending of the same money
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查是否有相同的资金重复花费
- en: Checking whether the total transaction volume is within the allowed range of
    0 to 21 million Bitcoins (as 21 million is the maximum total supply of Bitcoin
    allowed by the system)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查总交易量是否在系统允许的0到 2100 万比特币的范围内（因为 2100 万是系统允许的比特币的最大总供应量）
- en: And the list goes on; the Bitcoin software installed on the node performs a
    number of other checks and balances.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 列举不一而足；节点上安装的比特币软件执行了许多其他的检查和平衡。
- en: 'Verified transactions are aggregated into transaction pools, also called memory
    pools or mempools, where they wait until they are included in a block. Miners
    check their mempools for any transactions that have been already included in previous
    blocks. After collecting and arranging verified transactions in a candidate block,
    the miner needs to construct the block header. This header includes the following
    main components:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 经过验证的交易被汇总到交易池中，也称为内存池或 mempools，在那里它们等待直到被包含在一个区块中。矿工检查他们的内存池是否有任何已经包含在以前的区块中的交易。在收集和整理经过验证的交易形成候选区块后，矿工需要构建区块头。这个头部包括以下主要组成部分：
- en: A summary of all the transaction data in the candidate block
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 候选区块中所有交易数据的摘要
- en: A link to the previous block in the chain, also known as a parent block
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接到链中的上一个区块，也称为父区块
- en: A timestamp showing the time of creation of the block
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示区块创建时间的时间戳
- en: A valid Proof-of-Work
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效的工作证明
- en: The summaries of block transaction data are done through hash functions, which
    process data in such a way that results in a standardized unique identification
    code or digital fingerprint. In this way, the system has a unique identifier for
    each block of transactions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 区块交易数据的摘要通过哈希函数完成，这些函数以一种使数据产生标准化的唯一标识代码或数字指纹的方式处理数据。通过这种方式，系统对每个交易块都有一个唯一的标识符。
- en: The different aspects of a Bitcoin transaction
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比特币交易的不同方面
- en: 'Here is an example of a block header, as viewed on [blockexplorer.com](http://blockexplorer.com):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个区块头的示例，在[blockexplorer.com](http://blockexplorer.com)上查看：
- en: '![](img/c973ae95-1f56-482f-9701-a6b7acf4ba30.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c973ae95-1f56-482f-9701-a6b7acf4ba30.png)'
- en: As seen in the preceding screenshot, there is a long alphanumeric string just
    below the block number called the BlockHash**,** or just Hash. Alphanumeric means
    that it consists of both letters and numbers. This is a type of encoding data
    and is the output result of processing the block header data present there, through
    Bitcoin's cryptographic hash function. You may have heard the name of this function,
    SHA 256, where **SHA** stands for **Secure Hash Algorithm**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示的截屏中，有一个长长的字母数字字符串就在区块号下方，称为区块哈希**（BlockHash）**或简称哈希。字母数字意味着它由字母和数字组成。这是一种对数据进行编码的方式，是通过比特币的加密哈希函数处理那里的区块头数据的输出结果。你可能听说过这个函数的名字，SHA
    256，其中**SHA**代表**安全哈希算法**。
- en: 'You probably remember that we mentioned and explained briefly hash functions
    in [Chapter 5](84ad3021-fae1-4e16-aaae-cee34e5d2bf6.xhtml), *Five Forces of Bitcoin –
    #2 Cryptography*. We will discuss them again briefly, because they play such an
    important role in Proof-of-Work.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '你可能还记得我们在[第五章](84ad3021-fae1-4e16-aaae-cee34e5d2bf6.xhtml)，*比特币的五大力量 – #2 密码学*中简要提及和解释了哈希函数。我们将再次简要讨论它们，因为它们在工作量证明中扮演着如此重要的角色。'
- en: 'As we''ve already learned, a hash function can digest any kind of data, of
    any size, into a fixed length string of characters, which can serve as a unique
    digital fingerprint or identifier. Moreover, these cryptographic hash functions
    work only in one direction. Once we have the output, we cannot simply invert the
    function, plug in the output, and get the input data on the other end. This can
    be better described with the help of the following diagram:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经学过的，哈希函数可以将任何类型、任何大小的数据转换为一个固定长度的字符串，该字符串可以作为唯一的数字指纹或标识符。此外，这些加密哈希函数只能单向工作。一旦我们得到了输出，我们不能简单地反转函数，插入输出，并在另一端获取输入数据。这可以通过以下图示更好地描述：
- en: '![](img/fbc44244-ca56-4c87-b018-b13715aded7d.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fbc44244-ca56-4c87-b018-b13715aded7d.png)'
- en: 'To illustrate what it means to invert a function, let''s consider the four
    basic mathematical operations:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明反转函数意味着什么，让我们考虑四种基本的数学运算：
- en: Addition and subtraction are inverse functions of each other
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加法和减法是彼此的反函数
- en: Multiplication and division are inverse functions of each other
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乘法和除法是彼此的反函数
- en: We can always construct equations with these functions to find any unknown variable.
    For example, 3 * x = 15, x = 15/3 = 5.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们总是可以使用这些函数构建方程来找到任何未知变量。例如，3 * x = 15，x = 15/3 = 5。
- en: Many mathematical functions can be inverted in a similar way. However, this
    is not the case with cryptographic hash functions. The only feasible way an unknown
    random variable can be found in a cryptographic function's input dataset is by
    trying different values for the unknown variable, one by one, given all the other
    known parameters, in order to find out what works. This is basically a brute-force
    approach of trying potentially all possible combinations. And this is precisely
    the element of work as used in Proof-of-Work. The work comprises all the iterative
    computations a computer needs to do to find the solution to the cryptographic
    puzzle.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 许多数学函数可以以类似的方式反转。然而，这并不适用于加密哈希函数。在加密函数的输入数据集中找到一个未知随机变量的唯一可行方法是尝试不同的值，一个接一个地给定所有其他已知参数，以找出有效的值。这基本上是一个尝试可能的所有组合的蛮力方法。这正是工作量证明中使用的工作的要素。工作包括计算机需要进行的所有迭代计算，以找到加密难题的解决方案。
- en: Nonce and difficulty
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机数和难度
- en: Now, let's have a look again at the block header data examples we have. You
    may have noticed the word Nonce and another unfamiliar parameter called Difficulty.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再次看看我们拥有的区块头数据示例。你可能注意到了随机数（Nonce）这个词，以及另一个不熟悉的参数叫做难度（Difficulty）。
- en: 'The nonce is basically a random variable, or a source of randomness. Difficulty,
    on the other hand, is a temporary fixed number that is calculated by the Bitcoin
    protocol and remains fixed for approximately two weeks. We can see the two variables
    in the following example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数基本上是一个随机变量，或者是一种随机性来源。另一方面，难度是一个临时的固定数字，由比特币协议计算并在大约两周内保持不变。我们可以在以下示例中看到这两个变量：
- en: '![](img/fcb7ee77-2d10-4a3a-afc5-c67ab10da27e.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fcb7ee77-2d10-4a3a-afc5-c67ab10da27e.png)'
- en: When a miner starts building or mining a block similar to this, all the parameters
    are known, except for the nonce. The nonce is the missing piece of the puzzle
    that needs to be found and plugged in, so that the resulting block header hash
    is less than a target difficulty level. You can think about target difficulty
    as a number. The process is done by trying different values for the nonce again
    and again in iterative calculations until a satisfactory hash is found.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个矿工开始构建或挖掘一个类似于此的区块时，除了nonce外，所有参数都是已知的。Nonce 是需要找到并插入的难题中的缺失部分，以便生成的区块头哈希小于目标难度级别。你可以把目标难度想象成一个数字。这个过程是通过不断尝试不同的
    nonce 值进行迭代计算，直到找到一个令人满意的哈希来完成的。
- en: Let's illustrate this with a straightforward example. Consider a game of dice,
    in which we have two players, throwing a couple of dice. The goal is to throw
    a number below or equal to a specific predetermined target number. The player
    who throws such a number first wins. If the target level is 10, the game is relatively
    easy, as only combinations summing up to 11 and 12 cannot win. All the other combinations
    win. Now, if we want to make the game more difficult, we can decrease the target
    to 5\. In this case, a player needs to throw a dice sum of 2, 3, 4, or 5, in order
    to win. The odds of this are much lower compared to the previous target of 10,
    so the game is more difficult to win. If we want to make it really, really hard,
    we can reduce the target to 2 and then only a 1 and 1 combination of dice can
    win. The Bitcoin cryptographic computational puzzle works in a similar way.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个简单的例子来说明这一点。考虑一个掷骰子的游戏，有两个玩家，每人掷一对骰子。目标是投出一个小于或等于特定预定目标数字的数字。首先投出这样的数字的玩家获胜。如果目标级别是
    10，那么游戏就相对容易，因为只有组合加起来等于 11 和 12 的情况不能赢。所有其他组合都赢。现在，如果我们想要让游戏变得更加困难，我们可以把目标降低到
    5。在这种情况下，玩家需要投掷骰子的总和为 2、3、4 或 5 才能赢。这样做的几率比之前的目标 10 要低得多，所以游戏更难赢。如果我们想让它变得真的非常难，我们可以把目标降低到
    2，然后只有 1 和 1 的骰子组合才能赢。比特币的密码计算难题就是这样工作的。
- en: You may be wondering why the block header hash should be less than the target
    difficulty level. Well, target difficulty is determined by the Bitcoin protocol
    based on the total amount of computer power plugged in and trying to solve the
    puzzle. As this is a random process, which follows a known statistical distribution,
    the odds of finding a nonce that solves the puzzle can be calculated in advanced.
    This means that the expected average time to find a solution of the puzzle by
    any node on the network, given the total processing power deployed, can also be
    calculated.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道为什么区块头哈希应该小于目标难度级别。好吧，目标难度由比特币协议根据插入和尝试解决难题的计算机总体能力来确定。由于这是一个遵循已知统计分布的随机过程，因此可以预先计算找到解决难题的一个nonce的几率。这意味着可以根据部署的总处理能力计算出网络上任何节点找到难题解的预期平均时间。
- en: Target difficulty is adjusted by the system every 2,016 blocks, or approximately
    2 weeks.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 系统每 2,016 个区块，或大约 2 周调整一次目标难度。
- en: This is calculated by the Bitcoin software in such a way that the average time
    to mine a block stays around 10 minutes. This 10-minute block time was chosen
    as a reasonable compromise between speed and security of transactions on the blockchain.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币软件是这样计算的，以使挖掘一个区块的平均时间保持在大约 10 分钟左右。这 10 分钟的区块时间被选择为在区块链上进行交易速度和安全性之间的合理折衷。
- en: The computing power
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算能力
- en: To give you an idea about the computer processing power mentioned here—it is
    defined as a hash rate or number of hash function calculations per unit of time.
    The most powerful Bitcoin mining chips currently can perform at a rate of 14 tera
    hash per second. This is 14 trillion hash function calculations per second! And
    a trillion is 1 with 12 zeros after it. A pretty large number, isn't it? You should
    also consider that these chips are designed specifically to optimize the calculation
    of this particular hash function and they cannot do anything else. They are called
    **ASICs**, which stands for **application-specific integrated circuits**.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你对这里提到的计算机处理能力有个概念——它被定义为每单位时间的哈希率或哈希函数计算次数。目前最强大的比特币挖矿芯片可以以每秒 14 万亿次的速率运行。这是每秒
    14 万亿次哈希函数计算！一万亿是一个后面跟着 12 个零的 1。一个相当大的数字，不是吗？你还应该考虑到，这些芯片专门设计用于优化这个特定哈希函数的计算，它们不能做其他任何事情。它们被称为**ASICs**，代表**特定应用集成电路**。
- en: 'Let''s have a look at how difficulty has increased in line with the hash rate
    over time. The following screenshot depicts difficulty over time:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看随着时间推移，难度如何随着哈希率的增加而增加。以下截图描述了难度随时间的变化情况：
- en: '![](img/2b4fa99a-216c-464d-bb1a-a2d2ac79bb62.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b4fa99a-216c-464d-bb1a-a2d2ac79bb62.png)'
- en: 'The hash rate over time is shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 随时间推移的哈希率如下截图所示：
- en: '![](img/b784b899-c8da-4e92-8ef6-b20ade38798d.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b784b899-c8da-4e92-8ef6-b20ade38798d.png)'
- en: 'To summarize, here are the key steps and takeaways from the mining process
    we covered so far:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，这是我们到目前为止所涵盖的挖掘过程的关键步骤和收获：
- en: Miners collect new transaction data broadcast on the network and verify it against
    a set of criteria, as per the Bitcoin protocols.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 矿工收集网络广播的新交易数据，并根据比特币协议的一套标准进行验证。
- en: Then, miners order new verified transactions in blocks.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，矿工按块顺序排列新的已验证交易。
- en: After that, miners prepare the new block header and calculate Proof-of-Work.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之后，矿工准备新的区块头并计算工作证明。
- en: The first miner to find a solution to the Proof-of-Work puzzle (in other words,
    to compute a hash for the new block being mined), successfully mines this new
    block and includes it in the blockchain as the latest block.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个找到工作证明难题解决方案的矿工（换句话说，计算出正在挖掘的新区块的哈希值），成功挖掘出这个新区块，并将其作为最新区块包含在区块链中。
- en: The successful miner gets the block reward for the work done in terms of newly
    generated coins, which is known as the coinbase transaction.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功的矿工会得到区块奖励，作为新生成的硬币的工作报酬，这被称为coinbase交易。
- en: The target difficulty for all miners on the network is adjusted by the protocol
    every 2,016 blocks, which is approximately 2 weeks, in order to maintain the average
    time between blocks of around 10 minutes. This adjustment is done in order to
    account for the amount of computer processing power deployed by miners on the
    network.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络上所有矿工的目标难度是按照协议每2,016个区块（大约2周）进行调整的，以维持平均区块时间约为10分钟。这种调整是为了考虑到矿工在网络上部署的计算机处理能力。
- en: Thus, the more mining power is plugged in the system, the lower the bar is,
    making the problem more difficult to solve, but the average block time is kept
    at 10 minutes.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，系统中插入的挖掘能力越大，门槛就越低，使问题更难解决，但平均区块时间保持在10分钟。
- en: Next, we'll complete the puzzle of distributed consensus with some game theory.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过一些博弈论来完成分布式共识的难题。
- en: Decentralized consensus and game theory
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 去中心化共识和博弈论
- en: In this section, we will see how game theory comes into the picture.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到博弈论是如何起作用的。
- en: '**Game theory** is the study of mathematical models of conflict and cooperation
    between intelligent rational decision makers. It is mainly used in economics,
    political science, and psychology, as well as in logic and computer science.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**博弈论**是研究智能理性决策者之间冲突与合作的数学模型。它主要应用于经济学、政治科学、心理学，以及逻辑学和计算机科学。'
- en: Sounds exciting, doesn't it? Let's see how it applies to Bitcoin's decentralized
    consensus.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很激动人心，是吗？让我们看看它如何应用于比特币的去中心化共识。
- en: First, we need to consider that Bitcoin mining is a capital-intensive business.
    This means that miners need to make a large capital investment in expensive mining
    computer hardware, also known as **mining rigs**. Bitcoin mining is so industrialized
    nowadays that most of the hash power comes from large data centers, also called
    **mining pools**.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要考虑到比特币挖矿是一个资本密集型业务。这意味着矿工需要对昂贵的挖矿计算机硬件进行大量的资本投资，也被称为**挖矿机**。如今，比特币挖矿是如此工业化，以至于大部分哈希算力来自大型数据中心，也称为**矿池**。
- en: Besides capital expenses in physical hardware, there are also substantial operating
    expenses to run a mining operation. Such expenses include electricity for running
    the computers and for cooling them off. Remember that Bitcoin is a global transaction
    network that runs 24*7, so mining computers run Proof-of-Work calculations non-stop.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在物理硬件上的资本支出之外，运行挖矿操作还需要大量的运营支出。这些费用包括运行计算机和冷却它们的电费。请记住，比特币是一个全球交易网络，24*7运行，因此挖矿计算机不间断地运行工作证明计算。
- en: On top of that, there are property expenses for the physical location where
    miners store their computers, internet bandwidth, maintenance expenses, and other
    operating expenses.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，还有物业费用，用于存放矿工计算机的物理位置、互联网带宽、维护费用以及其他运营费用。
- en: All these investments and costs are effectively put at stake by the miners and
    are a huge economic incentive for them to act according to the Bitcoin protocol.
    This effectively guarantees the security of the decentralized consensus mechanism
    and the integrity of the blockchain.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些投资和成本都是矿工们有效地押上的，并且是他们按照比特币协议行事的巨大经济激励，有效地保证了分散式共识机制的安全性和区块链的完整性。
- en: 'You may wonder: why is this such a solid guarantee?'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想：为什么这样是一个坚实的保证？
- en: Bitcoin mining is a very competitive business. Miners compete based on their
    computer hash power to be the first to solve the Proof-of-Work puzzle, mine the
    next block, and get the block reward. It is so competitive that at present it
    is considered to be profitable only at places with very cheap electricity. A naturally
    cold climate is a great advantage too.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币挖矿是一个非常竞争激烈的行业。矿工根据其计算机的哈希能力进行竞争，以最先解决工作证明难题、挖掘下一个区块并获得区块奖励。它是如此竞争激烈，以至于目前只有在电费非常便宜的地方才被认为是有利可图的。自然的寒冷气候也是一个巨大的优势。
- en: Considering all these factors, the best course of action for any miner is to
    follow the rules, verify transactions, and mine blocks in good faith. This gives
    miners the best chance to generate revenues from block rewards, thus realizing
    a return on their investment.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到所有这些因素，对于任何矿工来说，最佳的行动是遵循规则，验证交易并诚信挖掘区块。这使得矿工有最好的机会从区块奖励中获得收益，从而实现投资回报。
- en: If a miner doesn't follow the protocol when mining a new block, such a block
    will not be accepted as valid by the other nodes on the network. This means no
    block rewards, and substantial economic losses for the delinquent miner.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个矿工在挖掘新区块时不遵循协议，那么其他网络节点将不会接受该区块作为有效的。这意味着没有区块奖励，对违规矿工来说会造成巨大的经济损失。
- en: Examples of miner misbehavior
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矿工不当行为的例子
- en: Let's examine some scenarios of how a miner could potentially misbehave, and
    what follows on from that.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看矿工如何可能出现不当行为的一些情况，以及随之而来的结果。
- en: One such threat could be a miner who decides not to follow the rules for block
    rewards and tries to grab more coins in the coinbase transaction. According to
    the protocol, block rewards were 50 Bitcoin initially, with the issuing schedule
    halving every 4 years. So, currently it is 12.5 Bitcoin after it has halved twice
    since the launch of Bitcoin.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种威胁可能是一个矿工决定不遵循区块奖励的规则，试图在coinbase交易中获取更多的硬币。根据协议，区块奖励最初为50比特币，每4年减半一次。因此，自比特币推出以来，经过两次减半后，当前是12.5比特币。
- en: Consider a situation where a miner decides to try and reward himself or herself
    with 1,000 Bitcoin for mining a block, rather than 12.5, as per the protocol.
    Even if this greedy node successfully does the Proof-of-Work and comes up first
    with a solution to the cryptographic puzzle, the block will be rejected by the
    other nodes on the network. They will immediately spot the irregularity and will
    not accept this as a valid block.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这样一种情况：一个矿工决定试图以挖掘一个区块而奖励自己1000比特币，而不是协议规定的12.5比特币。即使这个贪婪的节点成功完成了工作证明并首先找到了加密难题的解决方案，其他网络节点也会拒绝该区块。他们会立即发现这种不规则，并不接受这个作为有效的区块。
- en: 'You may wonder: how do they do this? How do the other nodes accept or reject
    a new candidate block?'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想：他们是怎么做到的？其他节点如何接受或拒绝一个新的候选区块？
- en: First, they check whether all the criteria for valid blocks are met in accordance
    with the protocol. These include properly verified and recorded transactions,
    link to a previous block's hash, correct block reward, timestamp, and Proof-of-Work,
    among others.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，他们检查是否根据协议满足了所有有效区块的标准。这些标准包括正确验证和记录的交易、链接到上一个区块的哈希值、正确的区块奖励、时间戳和工作证明等。
- en: If all is correct, but there are several valid candidate blocks or chains of
    blocks on the network at the same time, miners always choose to mine and build
    their new blocks on the longest chain. That is the chain with the most cumulative
    work done that goes back to the genesis block and the first transaction ever made
    by Satoshi. By selecting the parent block, which is the previous block in the
    chain, miners effectively vote with their mining power on the state of the blockchain.
    In this way, the original main valid chain is always extended, and more cumulative
    Proof-of-Work is added to it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正确，但网络上有几个有效的候选区块或区块链同时存在，矿工们总是选择在最长链上进行挖矿并构建他们的新区块。也就是说，这是累计工作量最大的链，追溯到创世区块和萨托币的第一笔交易。通过选择父区块，即链中的前一个区块，矿工们有效地用他们的挖矿能力对区块链的状态进行投票。通过这种方式，原始的主要有效链始终得到扩展，并且向其中添加了更多的累积工作量证明。
- en: Each block mined on top of a given new block will count as one confirmation
    of this block and all transactions in it. The more blocks are built on top of
    a given block, the more confirmations this block has, and, therefore, the more
    secure and immutable all transactions in it are.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定的新区块上挖掘的每个区块都将作为对该区块及其中所有交易的一个确认。在给定区块上建立的区块越多，该区块就具有的确认就越多，因此其中所有交易也就越安全、不可变。
- en: The block reward coins become spendable after 100 block confirmations. This
    is further protection embedded into the system to secure miners' integrity and
    to mitigate any risks of manipulation attempts by miners, such as changing the
    consensus rules, or double-spending.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 区块奖励硬币在经过 100 个区块确认后可以支配。这是系统中嵌入的进一步保护措施，以确保矿工的诚信，并减轻矿工试图更改共识规则或双重支付等操纵尝试的任何风险。
- en: Example of double-spending
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 双重支付的例子
- en: What would happen if a miner tries to conspire and create double-spent transactions?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个矿工试图密谋创建双重花费交易会发生什么？
- en: 'Imagine the following scenario. John wants to buy a car with Bitcoin. He finds
    a dealer of sports cars who accepts Bitcoin as a form of payment. John buys an
    awesome orange Lamborghini for 10 Bitcoin. Right after the payment is made and
    included in the blockchain as the top block, John drives away in his new Lambo.
    The vendor has delivered the product with no delay. However, John has colluded
    with Mr. Li who is a miner. Actually, Mr. Li operates a huge mining pool with
    a lot of processing power. Think about a big data center full of computers dedicated
    just to mining on the Bitcoin blockchain. Mr. Li immediately re-mines the same
    block containing John''s payment to the car vendor, but this time the new re-mined
    block sends the same payment John made back to his wallet. This is double-spending!
    The same coins have been spent twice! John got the Lambo and his money back, so
    he got the Lambo for free! This situation can be better illustrated in the following
    diagram:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 想象以下情景。约翰想用比特币买一辆车。他找到一家接受比特币作为支付方式的跑车经销商。约翰用 10 比特币购买了一辆华丽的橙色兰博基尼。付款后不久，该笔交易被包含在区块链的顶部区块中，约翰驾驶着他的新兰博基尼驶离。经销商没有延迟交付产品。然而，约翰与李先生串通一气。实际上，李先生是一名矿工，他经营着一个拥有大量处理能力的庞大挖矿池。想象一下一个充满电脑的大型数据中心，专门用于在比特币区块链上进行挖矿。李先生立即重新挖掘了包含约翰付款给汽车经销商的同一个区块，但这次重新挖掘的区块将约翰付款的同样金额退回到了他的钱包中。这就是双重支付！同样的硬币被花费了两次！约翰既得到了兰博基尼，又拿回了他的钱，所以他相当于免费得到了这辆兰博基尼！这种情况可以在下图中更好地说明：
- en: '![](img/639c284d-6a4a-41f1-8476-86fb1befc0e7.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/639c284d-6a4a-41f1-8476-86fb1befc0e7.png)'
- en: This situation creates a fork in the blockchain, meaning that two different
    blocks were mined at the same height of the blockchain. In other words, they were
    mined on top of the same parent block in a very close proximity. The next thing
    Mr. Li does is to continue mining on the chain containing the double-spent transaction
    to extend it and validate it further as the longest chain.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况在区块链中创建了一个分叉，意味着在区块链的相同高度上挖出了两个不同的区块。换句话说，它们在非常接近的时间内在同一个父区块之上挖掘出来。李先生接下来要做的事情是继续在包含双重花费交易的链上进行挖矿，以扩展该链并进一步验证它是否为最长链。
- en: 'This kind of consensus attack is known as a 51% attack. Despite the name, it
    doesn''t actually require 51% of the network hashing power; 51% is rather the
    threshold at which such an attack is almost guaranteed to succeed. This can be
    seen in the following diagram:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这种共识攻击被称为 51% 攻击。尽管名称如此，但实际上并不需要网络哈希功率的 51%；51% 只是这种攻击几乎肯定会成功的阈值。可以从下图中看出这一点：
- en: '![](img/52cd3644-1312-41a4-9a4f-5ffef4a627b3.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52cd3644-1312-41a4-9a4f-5ffef4a627b3.png)'
- en: Such a scenario could be prevented easily if the vendor waits for more block
    confirmations before delivering the goods. Generally, after six block confirmations,
    a transaction is considered pretty much immutable. Therefore, it is recommended
    that large value purchases are delivered at least after six block confirmations,
    which is around 1 hour. Small-value purchases can be delivered faster because
    the risk of potential loss is smaller.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果供应商在交付商品之前等待更多的区块确认，这样的情况很容易就能避免。通常情况下，经过六次区块确认后，交易被认为几乎是不可变的。因此，建议对于大额购买至少在经过六次区块确认后再交付，这大约需要1小时。小额购买可以更快交付，因为潜在损失的风险较小。
- en: So, waiting for a sufficient number of block confirmations is one way to provide
    security against potential 51% attacks and double-spending.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，等待足够数量的区块确认是提供安全性防范潜在的51%攻击和双花攻击的一种方式。
- en: The architecture surrounding the Bitcoin network
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环绕比特币网络的架构
- en: Another protection embedded in the system comes again from the miners' economic
    resources at stake. As we said, mining blocks and calculating Proof-of-Work consumes
    a lot of resources. If any miners decide to try to attack and take control of
    the network for their own benefit, this would be a very risky and expensive strategy.
    It would require an immense amount of computing power in order to succeed. We
    already mentioned the gigantic amount of hash power plugged in the Bitcoin network,
    so this is what any delinquent miners need to compete with, in order to tamper
    with the distributed ledger.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个内置在系统中的保护措施再次来自于矿工们的经济资源。正如我们所说，挖矿和计算工作量证明消耗了大量资源。如果任何矿工决定试图攻击并控制网络以谋求自己的利益，这将是一种非常危险且昂贵的策略。这将需要巨大的计算能力才能成功。我们已经提到了比特币网络中插入的巨大哈希能力，这就是任何不良矿工需要竞争的东西，以篡改分布式账本。
- en: The more blocks are built on top of a given block, the more confirmations it
    has, and the harder it is to be manipulated. If any miners want to change a previous
    block, in order to create double-spent transactions, divert funds, or for any
    other reason, they would then need to re-mine all subsequent blocks. Moreover,
    all this work would be done basically for free, as they wouldn't earn any meaningful
    rewards on re-mined blocks. This is the case because their alternative chain would
    be competing with the original chain to become the longest and main chain of blocks.
    If not the longest, it would be ignored by the network, and no other miners would
    validate it by working on extending it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定区块上构建更多区块，它拥有的确认越多，也就越难以被操纵。如果任何矿工想要改变之前的区块，以创建双重花费交易、转移资金或出于任何其他原因，他们随后需要重新挖掘所有后续区块。此外，所有这些工作基本上都是无偿的，因为他们不会在重新挖掘的区块上获得任何有意义的奖励。这是因为他们的替代链将与原始链竞争，以成为最长和主要的区块链。如果不是最长的话，它将被网络忽略，并且没有其他矿工会通过工作来扩展它来验证它。
- en: Remember, miners always start building their new blocks on top of the longest
    existing chain, which contains the most cumulative Proof-of-Work done since the
    genesis block, the first block ever created. In this way, by linking each block
    to its parent block through hashes that contain all the block information, the
    entire network validates and confirms each and every transaction ever made on
    the blockchain. Every 10 minutes, when a new block is added to the blockchain,
    all transactions, right to the first one Satoshi made when he created Bitcoin,
    are re-validated and re-confirmed by the entire network.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，矿工总是在最长的现有链上构建他们的新区块，这个链包含自创世区块（第一个创建的区块）以来累计工作量证明最多的区块。通过将每个区块与其父区块通过包含所有区块信息的哈希链接起来，整个网络验证和确认了区块链上曾经进行的每一笔交易。每隔10分钟，当一个新的区块被添加到区块链中时，所有交易，从最早的一笔Satoshi创建比特币时做的交易开始，都会被整个网络重新验证和重新确认。
- en: Consider also that, while non-compliant nodes are re-mining past blocks, all
    the other honest nodes keep mining on and extending the original main blockchain.
    Therefore, the non-compliant nodes need to keep mining, at a faster rate than
    all the rest of the network, deploying more processing power and consuming more
    electricity, without any meaningful compensation.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 还要考虑，虽然不符合规定的节点正在重新挖掘过去的区块，但所有其他诚实的节点都在继续挖掘和扩展原始的主区块链。因此，不符合规定的节点需要保持更快的挖掘速度比网络中的所有其他节点，部署更多的处理能力并消耗更多的电力，而没有任何有意义的补偿。
- en: The further back in time such an attack on the blockchain occurs, the lower
    the chance is that it would be feasible. And we are not talking years here, and
    not even months. We are talking weeks and days. There are 144 block confirmations
    in 24 hours. As we already mentioned, 100 block confirmations are required by
    the Bitcoin protocol for block reward coins to become spendable, so this is considered
    long enough to mitigate the risk of potential conflicts of interest for miners.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 进行区块链攻击的时间越久远，可行性就越低。我们所说的不是几年，甚至不是几个月，而是几周和几天。24 小时内有 144 个区块确认。如我们已经提到的，比特币协议要求
    100 次区块确认才能解锁区块奖励，因此这足够长以减少矿工潜在利益冲突的风险。
- en: That's why it is so hard for an attacker to manipulate or take control over
    the Bitcoin blockchain. Now that the network has been live and up and running
    for almost a decade, the computing power plugged in mining, supporting the blockchain,
    and following the rules of the protocol, is enormous. This architecture probably
    makes it much more robust than any other payment network infrastructure that has
    ever existed.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么攻击者要操纵或控制比特币区块链是如此困难。现在，网络已经运行了将近十年，挖矿和支持区块链的计算功率庞大，并遵循协议规则。这种架构可能使其比任何曾经存在的支付网络基础设施都更加健壮。
- en: Consensus attacks
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共识攻击
- en: It is important to mention one more thing about consensus attacks with regards
    to their potential impact. Such attacks can potentially disrupt the security of
    decentralized governance and availability of the network, but they cannot steal
    or spend other people's funds. This is because the only way to control funds on
    the blockchain is through private keys, which we covered in [Chapter 5](84ad3021-fae1-4e16-aaae-cee34e5d2bf6.xhtml),
    *Five Forces of Bitcoin – #2 Cryptography*. Any potential consensus attackers
    can only manipulate their own transactions on the blockchain, and possibly create
    double-spent transactions with their own funds.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件与共识攻击潜在影响有关的事情也很重要。这种攻击潜在地会破坏分散式治理的安全性和网络的可用性，但它们不能盗取或使用其他人的资金。这是因为在区块链上控制资金唯一的方式是通过私钥，我们在《第5章》，*比特币的五大力量-#2密码学*中有涉及。潜在的共识攻击者只能操纵他们在区块链上的交易，可能使用自己的资金创建双花交易。
- en: Now we've covered the decentralized consensus mechanism that provides security
    of the protocol by design. The Bitcoin blockchain architecture is incredibly effective
    and efficient in providing tamper-proof, censorship resistant track of records.
    It's hard to imagine a better accounting and record-keeping system, really.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了分散共识机制，这种设计可以提供协议的安全性。比特币区块链架构非常有效，可以提供防篡改的、不受审查的交易记录。真的很难想象还有更好的会计和记录系统。
- en: 'Let''s summarize all the factors in the Bitcoin mining and consensus process
    that we covered:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下我们所涵盖的比特币挖矿和共识过程中的所有因素：
- en: Mining is highly competitive. Miners compete with their computational resources
    to mine blocks, satisfying the requirements of the decentralized consensus protocol.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挖矿竞争非常激烈。矿工利用他们的计算资源来挖矿，满足分散式共识协议的要求。
- en: At each round of mining new blocks, the winner is the miner who is the first
    to find a solution to the Proof-of-Work puzzle in a valid block.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每一轮挖矿新区块时，赢家是第一个在有效区块中找到工作量证明谜题解决方案的矿工。
- en: The newly mined block is included in the blockchain by consensus expressed by
    all miners, who immediately start building their new candidate blocks on top of
    it. They do so by referencing its hash as a parent block to their new candidate
    blocks
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新挖出的区块由所有矿工表达的共识纳入区块链，并立即开始在其上构建新的候选区块。他们通过将其哈希作为父区块引用到他们的新候选区块中来实现这一点。
- en: The winning miner gets the block reward, which currently stands at 12.5 Bitcoin.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获胜的矿工将获得区块奖励，目前为 12.5 比特币。
- en: Security of the decentralized consensus mechanism is guaranteed by the miners'
    economic resources at stake, the Proof-of-Work algorithm, and the huge amount
    of hash power plugged in the network.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分散共识机制的安全性由矿工投入的经济资源、工作量证明算法和网络中投入的大量计算力保证。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned all about consensus algorithms and how they came
    to be. We learned about the Byzantine Generals' Problem and how it is connected
    to the world of Bitcoin. We learned all about the Proof-of-Work algorithm that
    ensures the security and integrity of the Bitcoin protocol.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们了解了共识算法的全部内容以及它们是如何产生的。我们了解了拜占庭将军问题以及它与比特币世界的联系。我们全面了解了工作证明算法，确保比特币协议的安全和完整性。
- en: In the next chapter, we will get to know about the extensive peer-to-peer network
    that Bitcoin works on.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解比特币所基于的广泛的点对点网络。
