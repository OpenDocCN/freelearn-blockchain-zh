- en: Blockchain Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although **decentralized applications** (**DApps**) can take the place of some
    centralized applications, their architecture, infrastructure, and implementation
    are quite different from that of traditional centralized applications. Not every
    blockchain implementation can justify its benefits compared to the existing implementations.
    The purpose of this chapter will be to explore a number of projects that can revolutionize
    decentralized networking.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be looking at both financial, and non-financial blockchain
    projects.Â Since the invention of Bitcoin, over two thousand cryptocurrencies (referred
    to as altcoins) have emerged and have gained a lot of attention. The widespread
    use of the technology gained the attention of venture capitalists and convinced
    them to invest in projects that were mainly focused on centralized exchanges,
    wallets, or creating their own cryptocurrency solutions. The application of blockchain
    technology was mostly biased toward the cryptocurrencies until 2015, but the adoption
    of decentralized applications, with the help of blockchain platforms, created
    immense innovation opportunities in financial as well as non-financial domains.
  prefs: []
  type: TYPE_NORMAL
- en: There was always a need for an intermediary in any centralized application.
    But decentralized applications no longer needed these intermediaries. The notion
    of eliminating intermediaries or central authorities from existing applications
    was appealing to many developers and investors as it could reduce the costs incurred
    due to these entities.
  prefs: []
  type: TYPE_NORMAL
- en: Numerous communities were created to improve the existing blockchain functionalities
    and also improve the end user experience in decentralized applications. This resulted
    in a market for appealing blockchain applications and a wide range of consumers.
  prefs: []
  type: TYPE_NORMAL
- en: It is a daunting task for a beginner to explore the ever-growing blockchain
    market. Moreover, it's difficult to find an application that would satisfy the
    users' requirements. This is mainly because the implementation you are looking
    for is likely to be lost in the sea of applications. Classifying and identifying
    a good implementation requires a lot of exploration. To begin with, we will classify
    the broad spectrum of applications in the following section before diving into
    some exciting blockchain projects.
  prefs: []
  type: TYPE_NORMAL
- en: Categorizing the blockchain projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Different institutions have created decentralized applications or proof of concepts
    using blockchain technology in order to make the best use of what blockchain can
    offer them. Institutions that are exploring blockchain may have a financial or
    a non-financial use case. Based on this, we will broadly classify blockchain applications
    into financial and non-financial projects.
  prefs: []
  type: TYPE_NORMAL
- en: Financial projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any real-world asset that has an economic value can be directly mapped to a
    digital asset. Any project that utilizes these tradable digital assets can be
    classified as a financial project. Although all applications dealing with tradable
    assets could be classified as financial projects, they could also have non-financial
    use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the early blockchain-related projects were financial. This was mainly
    because the implementations were motivated by Bitcoin and Bitcoin itself was trying
    to decentralize the control of money on the internet. This influenced many developer
    communities to work on projects that were closely related to cryptocurrency. Many
    exchanges, token distribution platforms, and payment networks were created, which
    forced banking services to get directly involved so that existing banking customers
    could make use of cryptocurrency applications.
  prefs: []
  type: TYPE_NORMAL
- en: Although blockchain technology is also useful for non-financial applications,
    only the lightweight financial applications have gained a wide audience and have
    been able to create a resilient system due to the wide range of exposure. Although
    many financial applications were not necessarily restricted to cryptocurrency,
    many of the initial financial applications were cryptocurrencies, notably **Peercoin**
    and **Litecoin**, which tried to mimic Bitcoin to achieve better performance by
    modifying the protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Non-financial projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the early years of Bitcoin, there were concerns about the scalability
    of the underlying technology, and also its future scope. Although cryptocurrency
    was a great invention that made the decentralization of internet money possible
    through its P2P-based system, its true technology hadn't been exploited completely.
    Several developer communities started building applications in the Bitcoin blockchain
    to make use of the decentralization that was achieved by Bitcoin's blockchain.
    Due to scalability limitations and privacy concerns of Bitcoin's blockchain, many
    projects were created by customizing the Bitcoin implementation and forking the
    Bitcoin blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: As the potential of the technology became evident, it was soon implemented in
    digital identities, supply chains, asset management, and many other use cases
    to replace some of the outdated technologies. Due to the blockchain technology's
    limitations, not all the implementations were successful, but developers were
    able to find the use cases that weren't directly involved with cryptocurrency.
    This paved the way for organizations to explore blockchain technology in the non-financial
    sector. Numerous non-financial organizations that needed replacements for their
    existing technology started implementing blockchain as a solution. As a result,
    several alternative implementations of Bitcoin arose to service non-financial
    use cases.
  prefs: []
  type: TYPE_NORMAL
- en: We will explore some of the sub-categories of financial and non-financial projects
    by looking into a few applications.
  prefs: []
  type: TYPE_NORMAL
- en: Financial blockchain projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, our goal is to explore a few of the early financial implementations
    of blockchain in the financial domain by categorizing them.
  prefs: []
  type: TYPE_NORMAL
- en: Cryptocurrencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The concept of blockchain has evolved since it was first introduced in Bitcoin.
    Although Bitcoin's underlying technology has been applied in several different
    fields, cryptocurrency has been recognized as the true application of the blockchain
    technology. Many projects have since been created, some imitating Bitcoin's implementation
    and others solving issues in the existing implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Although many cryptocurrencies can be found that possess similar properties
    to Bitcoin, they don't necessarily solve the same problems. In fact, many of these
    currencies were created just to incentivize the actors of the network.
  prefs: []
  type: TYPE_NORMAL
- en: We will talk about these currencies in the *Crypto tokens* section. It is quite
    difficult to explore all the cryptocurrencies because a new implementation is
    created almost every day. We will try to simplify this by classifying the cryptocurrencies
    into **traceable** and **untraceable** currencies.
  prefs: []
  type: TYPE_NORMAL
- en: Traceable cryptocurrencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we know, the blocks of Bitcoin consist of collections of transactions that
    can be retrieved and parsed by any participant on the network. Bitcoin was created
    with the intention of decentralizing control over money. This came with a cost
    of privacy, as every transaction is public because it needed to be verified by
    the nodes on the network. This meant every transaction could be traced back to
    its origin by anyone in the network.
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin provided pseudo-anonymity because the public addresses of account holders
    need not be linked to their real identities. This prevented the account owner's
    identity from being revealed even though all the transactions were public. However,
    there is the risk of a user's entire transaction history being leaked if their
    identity is revealed. Even with these risks, transparent, publicly visible transactions
    don't cause much trouble because of pseudo-anonymity.
  prefs: []
  type: TYPE_NORMAL
- en: Many cryptocurrencies followed in the footsteps of Bitcoin to create completely
    transparent transaction ledgers. Litecoin, Namecoin, and Peercoin are some cryptocurrencies
    that not only mimicked the Bitcoin project but enhanced its features in one way
    or another.
  prefs: []
  type: TYPE_NORMAL
- en: Untraceable cryptocurrencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many cryptocurrencies were later developed to mask private transaction information
    and make the transactions untraceable, thus solving the privacy issues faced by
    Bitcoin and other similar cryptocurrencies. **Zcash**, **Monero**, and **Bitcoin
    Private** are some of the cryptocurrencies that tried to safeguard the privacy
    of the users by masking the private information in the transaction. We will look
    into how Zcash helps to achieve privacy by creating untraceable transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Zcash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zcash creates shielded transactions by hiding the sender, the recipient, and
    value information. Zcash was the first cryptocurrency to use the **zero-knowledge
    proof** cryptographic primitive in the blockchain technology, which was released
    in October, 2016.
  prefs: []
  type: TYPE_NORMAL
- en: 'A zero-knowledge proof is a system in which a user can prove that they possess
    knowledge without disclosing it to the verifier. Zero-knowledge proof ensures
    that none of the information given to the verifier compromises the privacy of
    the prover. In a regular transaction, users prove that they own an asset by signing
    transactions with the secret key. Zcash creates a zero-knowledge proof for the
    transaction that can be verified even though the user did not enclose much information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e9b7249-ae97-4944-bcc0-162cb7b9870c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.1: A Zcash transaction masking transaction input and output (source:
    https://z.cash[)](https://z.cash)'
  prefs: []
  type: TYPE_NORMAL
- en: Zcash uses a novel form of zero-knowledge proof called **zk-SNARK**, which stands
    for **Zero-Knowledge Succinct Non-Interactive Argument of Knowledge**. zk-SNARKs
    prove the possession of information, such as a private key, without sharing it
    or communicating with the verifier. This way, a shielded transaction, even if
    it is fully encrypted, is verifiable by using zk-SNARK proofs.
  prefs: []
  type: TYPE_NORMAL
- en: Covering the zk-SNARK protocol in depth is beyond the scope of this chapter.
    We will be covering it in depth in [Chapter 9](35b56abd-53ae-479b-81b7-857a5baebcbc.xhtml),
    *Blockchain Optimizations and Enhancements*.
  prefs: []
  type: TYPE_NORMAL
- en: Crypto tokens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Any type of cryptocurrency that is not created primarily to exchange values
    is considered a special kind of token. These tokens also possess the same capabilities
    as any other cryptocurrency, because they were created to function in a decentralized
    network.Â These tokens can be classified into two types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security tokens**: Security tokens represent real physical assets, such as
    a share in a company or any form of financial earnings. These kinds of tokens
    also possess a predefined economic value, which is analogous to the token''s price.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Utility tokens**: Utility tokens are created to fuel projects and offer its
    holders access to the services provided by the project after launch. These tokens
    don''t have a fixed economic value, and their price will be decided by their creator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coin offerings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Initial Coin Offerings** (**ICO**) are created for the previously-mentioned
    tokens to raise the initial capital for a project. ICO is a crowd-funding process
    in which anyone who is willing to contribute to the project can become a part
    of it and own a certain part of the tokens. ICOs can offer any kind of token,
    but security tokens are the safest token due to their visible economic value.
    But this makes the ICO more complicated because it requires that you use **kn****ow
    your customer** (**KYC**) procedures to identify the identity of the user. Utility
    tokens are most commonly used in ICOs due to the simplicity of defining the token''s
    functionality compared to security tokens.'
  prefs: []
  type: TYPE_NORMAL
- en: Most of the tokens offered during ICOs are created in the existing blockchain
    network using a blockchain platform such as Ethereum. Ethereum has a standard
    called ERC-20 for smart contract creation, which is used to issue tokens in the
    Ethereum blockchain. Other blockchain platform providers, such as NEO, also have
    standardized (NEP-5) token creation to support ICO on their blockchain. We will
    explore more about the ICO by implementing a crowdfunding use case in [Chapter
    12](55ed2989-ecca-46ca-8546-74a12da98715.xhtml), *Blockchain Use Cases*.
  prefs: []
  type: TYPE_NORMAL
- en: Ripple payment network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ripple is a payment network that provides solutions to existing global payment
    systems such as SWIFT. It aids existing payment systems that suffer from the delayed,
    unreliable, and expensive transactions. It achieves this with a network of computers
    that use the ripple consensus algorithm to settle and record transactions on a
    distributed ledger called the Ripple Consensus Ledger (RCL).
  prefs: []
  type: TYPE_NORMAL
- en: Ripple use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ripple provides a wide range of use cases, especially for global payments. We're
    now going to look at several examples.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-border payments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ripple provides a global payment solution, that implies that payment channels
    can be established in different countries. This enables banks to settle cross-border
    payments in real-time, with end-to-end transparency and at a low cost. The number
    of currencies and counterparties will grow as Ripple adoption grows, and liquidity
    providers need to maintain accounts with each counterparty for each currency:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f8ae922-df7b-46f1-b819-043a2b7299f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.2: Cross-border payment channel (source: https://ripple.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Ripple tokens as a currency bridge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ripple can create a currency pair between any banks with the help of Ripple''s
    own token, which is called XRP. Unlike any other traditional intermediary currency
    conversion, XRP doesn''t require a bank account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65c79bcc-87d4-4898-a078-c416a8282cf9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3: XRP as a currency bridge (source: [https://ripple.com](https://ripple.com))'
  prefs: []
  type: TYPE_NORMAL
- en: Ripple network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ripple network consists of a collection of servers that are similar to full
    nodes in Bitcoin. They collaborate to reach a consensus regarding the state of
    the network. Ripple maintains a public ledger that is constantly updated with
    the global truth about all the transactions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The decentralized ledger of Ripple has two states: **last closed ledger** and
    **open ledger**. The last closed ledger state is the state of the most recent
    ledger agreed by the Ripple network. An open ledger accepts new transactions to
    be appended so that its state can be altered.'
  prefs: []
  type: TYPE_NORMAL
- en: Each Ripple node maintains a list of a set of nodes called the **Unique Node
    List** (**UNL**), which will directly contribute to the state of the ledger. The
    UNL is a subset of the nodes in the Ripple network that are trusted by any server
    to reach consensus. The UNL members will vote for the valid transactions to be
    inserted to the ledger.
  prefs: []
  type: TYPE_NORMAL
- en: Ripple consensus algorithm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Ripple Protocol consensus algorithm** (**RPCA**) is a process performed
    every few seconds by the nodes in the network to reach a consensus in the network.
    The ledger will remain in the closed state after the network nodes successfully
    agree. The RPCA has a few mandatory steps to go through before a transaction is
    successfully added to the ledger:'
  prefs: []
  type: TYPE_NORMAL
- en: Each server collects all the known valid transactions that are not already part
    of the ledger and makes them public. These unconfirmed transactions are called
    the candidate list of transactions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each server collects all the candidate lists from the UNL servers. Transactions
    that receive the required number of positive votes are selected for the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, it is made sure that each transaction has a minimum of 80% of a server's
    UNL votes. All transactions satisfying this rule are appended to the ledger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ripple token (XRP)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ripple has issued a total of 100 billion XRP tokens, the majority of which are
    held by the Ripple community. Ripple can settle a token transaction in 3.5 seconds
    and can also be spent immediately. Although XRP tokens are part of the Ripple
    network, Ripple doesn't necessarily need XRP tokens to perform cross-border payments.
  prefs: []
  type: TYPE_NORMAL
- en: Cryptocurrency exchanges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A cryptocurrency exchange is a third-party that allows users to convert a cryptocurrency
    to another type of asset or a different cryptocurrency. These exchanges are mostly
    used to convert fiat currencies, such as US dollars, to cryptocurrencies or vice
    versa. Cryptocurrency exchanges are often centralized servers, and they maintain
    a scalable server to match users' bid and sell requests. They maintain an order-matching
    engine that records all the bid and sell requests and initiates a trade whenever
    it matches bid with a sell request. Exchanges charge a small fee for every transaction
    that gets executed.
  prefs: []
  type: TYPE_NORMAL
- en: One of the drawbacks of cryptocurrency exchanges is that they are a centralized
    model in the otherwise decentralized cryptocurrency networks. Many decentralized
    cryptocurrency exchanges have been created to exchange currencies directly from
    one user's wallet to another without transferring it to exchanges. Kyber Network,
    0x, and OmiseGO are some prominent decentralized exchanges.
  prefs: []
  type: TYPE_NORMAL
- en: Decentralized exchanges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to the potential applications of blockchain technology, more and more people
    are getting involved in it. In particular, the cryptocurrency market is growing.
    New currencies are introduced regularly, and there are over 2,000 cryptocurrencies
    already in the market. This means people need to be involved with multiple currencies
    at the same time and exchange one currency for another. Cryptocurrency exchanges
    help users to exchange their tokens by placing orders on the market. Although
    exchanges allow users to exchange assets, they need users to transfer their assets
    to accounts maintained by these exchanges. This created a centralization of crypto
    assets in the decentralized ecosystem. This makes most of the trades that happen
    on centralized exchanges vulnerable to internal fraud and external hacking. A
    number of hacking incidents have been reported on these centralized exchanges.
    A hack on Mt. Gox, a Japanese exchange, is the biggest hack in the history of
    cryptocurrencies.
  prefs: []
  type: TYPE_NORMAL
- en: Decentralized exchanges eliminate the intermediary required during currency
    conversion, and they don't maintain an order book. Unlike centralized exchanges,
    they don't charge a fee for each trade.
  prefs: []
  type: TYPE_NORMAL
- en: Kyber Network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kyber Network is an on-chain decentralized exchange that allows users to convert
    tokens effortlessly and without requiring any trust. Kyber Network functions on
    the Ethereum blockchain and currently supports all the Ethereum tokens. It will
    support cross-chain trade in the future.
  prefs: []
  type: TYPE_NORMAL
- en: '**Design**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the important components for the functioning of Kyber Network are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Users**: Users of the network are the backbone of the decentralized exchange.
    Each users'' wallet acts as an interface to communicate with the network. It supports
    integration with existing apps, such as Status,Â and MetaMask, in order to manage
    user accounts. Integrating with these apps helps to integrate user accounts with
    Kyber Network without any hassle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MetaMask is a bridge that helps developers to integrate user interfaces with
    the blockchain network. MetaMask provides a browser extension so that web applications
    can communicate with the blockchain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Smart contracts**: The logic of the way the exchange functions are coded
    in smart contracts and deployed to the blockchain. There are different types of
    contract for each of the exchange''s major functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reserves**: These act as containers of assets in the exchange. Reserves can
    be maintained by Kyber Network or by a third-party.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reserve contributors**: These are the entities that provide capital for the
    reserves.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reserve manager**: This is the entity responsible for maintaining the reserves
    and determining the exchange rates for the currencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kyber Network operator**: This is the entity responsible for adding and removing
    reserve entities, as well as listing and delisting pairs of tokens in the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/5b6fbb39-e2da-41e3-a813-651601684e75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.4: Components of Kyber Network (source: [https://kyber.network/](https://kyber.network/))'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8.4* connects all the components of Kyber Network to create an overview
    of the decentralized exchange ecosystem. A user initiates an exchange operation
    by communicating with the Kyber Network contract with the help of the user interface
    provided by the user wallet. The smart contract communicates with the reserve
    to perform credit or debit operations. The reserve manager fetches the exchange
    rates, and the smart contract ensures the selection of the best exchange rates
    for the transaction.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the properties of Kyber Network that distinguish it from existing exchanges
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike centralized exchanges, Kyber Network doesn't hold any of the users' assets.
    This means it's not a target for attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the exchange runs on a blockchain network, it will be accessible to any
    type of account, including contracts. Smart contracts can communicate with the
    exchange without any intermediary. This creates a whole new opportunity for the
    **decentralized autonomous organization** (**DAO**), where the rules for governing
    the organization can be decided by the members of the network rather than the
    central authority.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the exchange requests are executed almost instantly, and users will be able
    to access their converted currency immediately in their wallet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To summarize, Kyber has a lot of potential in the blockchain ecosystem due to
    its decentralized model, which will fit right into any decentralized system.
  prefs: []
  type: TYPE_NORMAL
- en: Non-financial blockchain projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Soon after the successful implementation of blockchain in the financial sector,
    blockchain technology saw application in the non-financial sector as well. We
    will explore some of these implementations by further classifying them.
  prefs: []
  type: TYPE_NORMAL
- en: Asset management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing an asset in the real world is a challenging task because it requires
    an intermediary to maintain records that contain the complete history of the asset.
    The intermediary needs to prove its legitimacy before it can provide users with
    asset information. Building trust is an expensive task, especially in a trustless
    network. Blockchain technology helps to achieve this trust through the decentralization
    of management.
  prefs: []
  type: TYPE_NORMAL
- en: The digital representation of existing physical assets is one of the key features
    of blockchain applications. The digital representation of a physical asset can
    be managed in a decentralized network.
  prefs: []
  type: TYPE_NORMAL
- en: Factom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Factom** provides asset management with a precise, verifiable, and immutable
    audit trail, and eliminates the need for trust. Record management poses the difficult
    problem of protecting, synchronizing, and verifying record information. Many traditional
    methods still require some manual effort, which makes it more difficult to scale
    and to achieve accuracy.'
  prefs: []
  type: TYPE_NORMAL
- en: Factom proposes a solution to the asset management problem of securing an individual's
    or an organization's data by publishing the encrypted data, or a fingerprint of
    the data, to a distributed ledger. Factom also allows users to audit and verify
    the data published on the blockchain. Factom achieves this by running a distributed
    protocol that runs on top of the Bitcoin blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Factom creates a fast, cheap, and bloat-free way to develop blockchain-based
    applications. The main workflow of a Factom architecture involves the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Servers create blocks that will be recorded in Factom's own chain
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Factom secures an anchor (a hash of the Directory Block) onto the Bitcoin blockchain
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bbd2d9ef-f6e8-4ba3-a7cb-3c779f4b9ebf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.5: Factom ecosystem (source: [https://www.factom.com](https://www.factom.com))'
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 8.5*, the Bitcoin blockchain is the last layer in Factom's
    design, and it stores only the minimal information about the assets. Factom creates
    anchors to the Bitcoin blockchain by only storing the digest of the actual information
    on the immutable Bitcoin blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Factom is created by forming a hierarchy of a set of blocks, with Directory
    Blocks forming a connection with the Bitcoin blockchain. The hierarchy itself
    constitutes a chain of references as shown in *Figure 8.6*. Each reference in
    the Directory Block is just a hash of the Entry Block and its chain ID. These
    Entry Blocks have references that point to all the entries with a particular chain
    ID that arrived during a certain time period. The Entry Block for a chain ID is
    also part of a micro-chain. The bulk of the data in Factom is at the leaves, the
    Entries themselves. These hierarchical data structures are considered unmodifiable
    due to Bitcoin's immutability.
  prefs: []
  type: TYPE_NORMAL
- en: 'The layers and concepts in the Factom system are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Directory Layer**: This organizes the Merkle roots of Entry Blocks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Entry Block Layer**: This organizes references to entries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Entries**: This contains an application''s raw data or a hash of its private
    data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chains**: This is a grouping of entries specific to an application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3a20673c-d6da-4824-9117-24139033631d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.6: The layered architecture of Factom (source: [https://www.factom.com](https://www.factom.com))'
  prefs: []
  type: TYPE_NORMAL
- en: Factom products
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Factom provides several solutions to private enterprises as well as to the
    public. The following are a couple of products from Factom:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Factom Harmony**: This was created to solve problems in the mortgage industry.
    It reduces the documentation, legal, and compliance expenses incurred by using
    the transparency of Factom.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dLoc**: This is a document authentication verification system. Factom partnered
    with Smartrac, a leadingÂ **radio-frequency identification** (**RFID**) product
    manufacturer, to use the technology in any asset that can be tagged by RFID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social media platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social media is a place where anyone can publish content, sharing their opinions,
    skills, or knowledge to help others who are in need of those resources. Although
    there are multiple social media platforms for different purposes, there are no
    standards defined regarding how content creators are rewarded for their contributions.
    The blockchain-based network helps to tokenize web content by rewarding contributors
    for their work on social media platforms. This is accomplished by creating reward-based
    decentralized social networking platforms such as Steemit, Sapient Network, Indorse,
    and Sola.
  prefs: []
  type: TYPE_NORMAL
- en: Steemit is a blogging platform where the content creators and the curators are
    rewarded fairly based on their contributions. Steemit uses the Steem blockchain
    to manage the reward process for every post or comment created on its platform.
    We will explore the Steem blockchain to understand its reward system for social
    media platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Steem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: User-generated content has always generated billions of dollars for the founders
    and shareholders of the social media platform giants. On the flip side, content
    creators are hardly recognized at all and get paid very little for their contributions.
    Steem supports online communities by returning most of the dividends to the contributors
    of the content, those who brought the value to the platform in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Steem is a blockchain-based reward system where community building and social
    interactions earn rewards in cryptocurrency. Steem encourages user participation
    in the community with a fair accounting system to reward the users accurately
    for their contributions. It's a Proof of Work-based currency that has a scheduled
    block generation time of 3 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Voting model in Steem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Steem platform has a cryptocurrency token called STEEM. Steem operates on
    the basis of one STEEM, one vote. In this model, individuals who have contributed
    the most to the platform, as measured by their account balance, have the most
    influence over how contributions are scored.
  prefs: []
  type: TYPE_NORMAL
- en: Existing systems that are similar to Steem allow contributors to be paid when
    the consumers show their appreciation for the content by tipping, usually through
    a micropayment channel. The drawback of these platforms lies in the incentivization
    model, which doesn't necessarily always incentivize good content. Steem is designed
    to enable effective micropayments for all kinds of contributions. Content consumers
    don't have to decide how and how much they tip the content creator; instead, they
    vote for the content, and the Steem platform will use their votes to determine
    individual rewards.
  prefs: []
  type: TYPE_NORMAL
- en: Voting in Steem accurately determines the quality of the content and rewards
    the content creators accordingly, whereas other platforms don't necessarily provide
    just rewards to the creators of the content. Steem rewards those who contribute
    the most to the total value of a piece of content and rewards the voters proportionally
    to the final reward paid to the content creator.
  prefs: []
  type: TYPE_NORMAL
- en: Steem tokens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three main tokens in Steem: Steem (STEEM), Steem Power (SP), and
    Steem Backed Dollars (SBD).'
  prefs: []
  type: TYPE_NORMAL
- en: '**STEEM**'
  prefs: []
  type: TYPE_NORMAL
- en: STEEM is the cryptocurrency token on the Steem blockchain. STEEM can easily
    be bought and sold on exchanges.
  prefs: []
  type: TYPE_NORMAL
- en: '**SP**'
  prefs: []
  type: TYPE_NORMAL
- en: SP is basically STEEM that is locked in a vesting fund for 13 weeks, providing
    additional benefits within the platform. The influence of Steem users on the distribution
    of rewards is proportional to the amount of SP they own. SP holders also receive
    interest from their holdings. The earliest votes get the biggest share of the
    reward because the rewards are distributed according to time.
  prefs: []
  type: TYPE_NORMAL
- en: '**SBD**'
  prefs: []
  type: TYPE_NORMAL
- en: The user of any currency expects its value to be stable. SBD was designed in
    an attempt to bring stability to the world of cryptocurrency by pegging its value
    to 1 USD. This token ensures the maximum benefit is given to the token holder
    and enables the blockchain network to grow. Due to the token's stability, it can
    be exchanged with other cryptocurrencies on exchanges.
  prefs: []
  type: TYPE_NORMAL
- en: Consensus in Steem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like other blockchain applications, a consensus mechanism is used in Steem
    to include any block of transactions in the public ledger. The individuals responsible
    for including a block are elected by the people in the Steem network. Block creation
    is done in rounds, and in each round 21 witnesses are selected for the created
    blocks. Any witness who misses a block and hasn't produced one in the last 24
    hours will be disabled until they update their block signing key.
  prefs: []
  type: TYPE_NORMAL
- en: The consensus mechanism ensures that everyone has the potential to participate
    in block production, regardless of whether he or she is powerful enough to end
    up at the top. Possessing more SP improves a user's voting power.
  prefs: []
  type: TYPE_NORMAL
- en: Digital identity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Digital identity is one of the inherent features of the original blockchain
    implementation in Bitcoin. It identifies the owner of an asset. It can also store
    vital user information, which can be shared with any third-party, but only with
    the user's consent. The digital identity of the user stored on the blockchain
    can be shared with different applications, which reduces the unnecessary replication
    of the user's KYC operation to verify the identity. Moreover, the digital identity
    provided by the blockchain ensures the user's identity can be verified globally.
  prefs: []
  type: TYPE_NORMAL
- en: Many organizations are working towards the digital identity feature of the blockchain
    so that they can remove their dependency on using servers to maintain users' confidential
    data. Tech giants such as IBM and Microsoft are continuously exploring ways to
    standardize digital identity in the blockchain space.
  prefs: []
  type: TYPE_NORMAL
- en: ShoCard Identity Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**ShoCard** is an identity management service, built with the blockchain technology,
    where people can own and protect their digital identity. Users can prove their
    identity to anyone, and they can also decide with whom they want to share their
    details. Third-parties can verify the authenticity of the information using blockchain
    without the need for a centralized validator.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ShoCard architecture is designed to provide very high transaction throughput.
    It uses Proof of Work to certify a large number of users in a short time. ShoCard
    currently provides two products:'
  prefs: []
  type: TYPE_NORMAL
- en: Embedded model of **software as a service** (**SaaS**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ShoBadge**, a complete enterprise-level **identity provider** (**IdP**) solution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ShoCard architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The ShoCard IM Platform provides **software development kits** (**SDK**) to
    integrate with applications. The ShoCard IM Platform is made up of the following
    modules:'
  prefs: []
  type: TYPE_NORMAL
- en: ShoCard SDKs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ShoCard Service layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ShoCard sidechain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain caches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ShoCard Blockchain Adaptor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ShoCard has a service layer that lies between the application and the server.
    Because all the messages are encrypted, data cannot be read by the service layer
    during communication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef455b4b-529d-4e1f-9e96-bab7eb5c1d6c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.7: ShoCard architecture'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the responsibilities of the ShoCard services:'
  prefs: []
  type: TYPE_NORMAL
- en: The ShoCard server acts as a secure communication pipeline and simply writes
    the information to the blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ShoCard Service layer is responsible for managing the interface between
    all client SDKs and the blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ShoCard sidechains are used to increase throughput. The certification data
    is stored in the sidechain, and only the hashed data is stored in the public blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The blockchain also caches the local copy of the blockchain for faster read
    access so that verifications can be managed independently of what happens with
    a public blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ShoCard Blockchain Adaptor abstracts the interface to the blockchain that
    maintains the Proof of Work, so the ShoCard Service layer can remain efficient.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ShoCard uses an immutable public blockchain to verify the users' identities,
    but not to store the users' details. Since public blockchain data provides a high
    level of transparency, the data stored in the blockchain should only be used to
    verify user certificates. The blockchain serves as a repository of certificates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the use cases of ShoCard are:'
  prefs: []
  type: TYPE_NORMAL
- en: Passwordless login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving customers' traveling experiences at airports and hotels by creating
    a single travel token with a digital identity for the entire journey or stay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated registration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity verifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proof of age
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check out the detailed list of ShoCard's identity management use cases at [https://shocard.com/identity-management-use-cases](https://shocard.com/identity-management-use-cases).
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain in the Internet of Things (IoT)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many companies in the field of IoT, such as Filament, Xage, and even IBM's Watson
    platform, are looking for alternative techniques to achieve better connectivity
    and storage. The introduction of blockchain has motivated these firms to converge
    IoT and blockchain, and many have already successfully integrated them, gaining
    benefits over existing implementations.
  prefs: []
  type: TYPE_NORMAL
- en: As blockchain promises to provide a foundation for autonomous products, it guarantees
    to produce the **Internet of Trusted Things** (**IoTT**). Some of the reasons
    to merge blockchain with IoT are to build trust between devices, reduce costs,
    and increase transaction speed. IoT, by definition, is distributed, which makes
    it easier to adopt use cases in the distributed blockchain ledger.
  prefs: []
  type: TYPE_NORMAL
- en: IOTA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**IOTA** is an open source distributed ledger created to power the future of
    IoT with fee-less microtransactions. Since there will be billions of devices connected
    to the internet that need to exchange information efficiently, a scalable solution
    where millions of transactions need to be processed per second is required. IOTA
    proposes to provide a scalable solution to machine-to-machine communication in
    the IoT world with a modified transaction model.'
  prefs: []
  type: TYPE_NORMAL
- en: IOTA maintains its distributed ledger quite differently than existing decentralized
    applications. IOTA cannot be categorized as a blockchain project because it doesn't
    use blockchain as its underlying technology. IOTA creates and maintains transactions
    using a **directed acyclic graph** (**DAG**) technology instead of blocks in the
    blockchain. Transaction confirmation time is extremely fast, and there is no limit
    on the transaction throughput because it is not governed by block creation time.
  prefs: []
  type: TYPE_NORMAL
- en: IOTA is based on a newly distributed ledger called **Tangle**, which tries to
    tackle some of the problems of blockchain designs in an attempt to create an efficient
    and scalable system by introducing a new way of reaching consensus in a decentralized
    P2P system.
  prefs: []
  type: TYPE_NORMAL
- en: Tangle is a distributed ledger that retains the secure transactions feature
    of blockchain, which eliminates double-spend but doesn't store transactions in
    blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For each new transaction, two random, unconfirmed transactions are validated
    in the Tangle. Each validation of a transaction increases the likelihood of a
    transaction being genuine. Each transaction should receive a certain number of
    validations in order to be accepted as a confirmed transaction. In an IOTA Tangle,
    a few transactions will have fewer validations, whereas others will have a sufficient
    number of validations.
  prefs: []
  type: TYPE_NORMAL
- en: The user must validate two other randomly selected transactions in order to
    send out a created transaction. This transaction should later be verified by the
    other users. As every node contributes to the decentralized ledger, its architecture
    is inherently decentralized. IOTA works with a coordinator that will confirm all
    transactions initially.
  prefs: []
  type: TYPE_NORMAL
- en: The coordinator can be removed once the network is large. Currently, IOTA uses
    **Kerl**, a version of SHA-3, as a hash function, which works with ternary (instead
    of binary) operations.
  prefs: []
  type: TYPE_NORMAL
- en: IOTA uses Proof of Work in each transaction for spam protection, similar in
    spirit to the Proof of Work used in Hashcash.
  prefs: []
  type: TYPE_NORMAL
- en: IOTA in IoT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we have been hearing about IoT for quite some time, it hasn't actually
    contributed much to the general audience. IoT products on the market tend to increase
    the luxury of the users, but they don't necessarily solve real-world problems.
    IoT devices must replace most isolated devices, and they should be able to communicate
    with one another in a fairly efficient way. IOTA's architecture makes certain
    that communication can be scaled quite easily with the growing number of devices.
  prefs: []
  type: TYPE_NORMAL
- en: Data storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the significant applications of the P2P networking protocol is the decentralization
    of data storage. **BitTorrent** was the first protocol to achieve the decentralization
    of data storage through P2P networking. The **InterPlanetary File System** (**IPFS**)
    protocol was later implemented to create a distributed filesystem, and it also
    made use of the Bitcoin blockchain technology in its later implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Several blockchain projects have been created using distributed filesystems,
    where nodes are incentivized with tokens to contribute to storage on the network.
    Different consensus algorithms have been introduced that are essential to the
    storage, the retrieval of data, and the incentivization process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some blockchain-based distributed data storage projects are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Storj
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MaidSafe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filecoin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Siacoin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filecoin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Filecoin is a distributed storage network that turns its storage network into
    an algorithmic market. Cryptocurrencies have proved that a critical asset such
    as digital money can be transacted without the need for an intermediary. But these
    currencies only have decentralized transaction information on the network. Decentralization
    of bulk data in a blockchain network is expensive and slow, and the data does
    not need to be verified like transactions because each piece of data is not related
    to the others. Many protocols have been created for decentralized data storage
    so that data can be fetched efficiently without the need for a third-party. IPFS
    is one such protocol that has proven the utility of content-addressing by decentralizing
    the web itself, serving billions of files used across a global P2P network
  prefs: []
  type: TYPE_NORMAL
- en: Filecoin provides an incentive model, with the help of blockchain, that is built
    on top of the IPFS storage protocol. Filecoin creates a marketplace for decentralized
    storage. The nodes that provide space for the distributed storage network are
    called miners, and they are analogous to the miners in Bitcoin, although they
    provide computing power instead. Miners are rewarded by the consumers with Filecoin
    for their storage contribution. The Filecoin network achieves robustness by replicating
    and dispersing content throughout the storage network.
  prefs: []
  type: TYPE_NORMAL
- en: The consensus in the blockchain of Filecoin is achieved by proof of spacetime,
    where miners who lend the storage space are eligible to create the blocks. The
    Filecoin protocol provides data storage and retrieval services to consumers.
  prefs: []
  type: TYPE_NORMAL
- en: IPFS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IPFS is a protocol that's designed to create addressable content and P2P methods
    to store media in a distributed filesystem. In 2014, IPFS adopted the Bitcoin
    blockchain in order to store data that needs to be immutable.
  prefs: []
  type: TYPE_NORMAL
- en: Files in IPFS are identified by their hashes, and therefore they are cached
    in a friendly way. IPFS uses a single massive swarm in which anyone can serve
    a data block to anyone else; block sharing is not limited to the peers of the
    file, unlike the BitTorrent protocol. IPFS files can be accessed over a variety
    of protocols, such as HTTP. IPFS has a name service called **Inter-Planetary Name
    System** *(***IPNS**) that is compatible with other name services, such as DNS
    and .onion.
  prefs: []
  type: TYPE_NORMAL
- en: Filecoin consensus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The consensus algorithm in Bitcoin doesn't really contribute to anything other
    than achieving consensus about the global blockchain state.
  prefs: []
  type: TYPE_NORMAL
- en: The difficulty involved in Bitcoin mining makes it really expensive for a node
    to take part in the mining process. Filecoin proposes a useful work consensus
    mechanism that ensures that the work done by the miners to achieve consensus is
    useful.
  prefs: []
  type: TYPE_NORMAL
- en: Filecoin's useful consensus protocol elects a miner to create a block, and the
    probability of a miner being selected is proportional to its currently used storage
    relative to the rest of the network. Thus, this consensus protocol ensures that
    the amount of storage provided is also used as proof of computation.
  prefs: []
  type: TYPE_NORMAL
- en: Filecoin's decentralized storage network (DSN)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Filecoin's DSN is based on incentivizing the auditing and verifying of transactions.
    Clients in the network pay miners to store and retrieve data. Miners get paid
    only if the network audits the provided service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Different participants in the network are **Clients**, **Storage Miners**,
    and **Retrieval Miners**:'
  prefs: []
  type: TYPE_NORMAL
- en: Clients pay to store data and to retrieve data in the DSN via PUT and GET requests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage Miners provide data storage to the network. Storage Miners participate
    in Filecoin by offering their disk space and serving PUT requests from the clients.
    To become Storage Miners, users must pledge their storage by depositing collateral
    proportional to it. Storage Miners respond to PUT requests by committing to storing
    the Client's data for a specified time. Storage Miners generate proofs of spacetime
    and submit them to the blockchain to prove that they are storing the data through
    time. If there are invalid or missing proofs, Storage Miners are penalized and
    lose part of their collateral. Storage Miners are also eligible to mine new blocks,
    and in doing so, they receive the mining reward for creating a block and transaction
    fees for the transactions included in the block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieval Miners provide data retrieval to the network. Retrieval Miners participate
    in Filecoin by serving data that users request via GET. Unlike Storage Miners,
    they are not required to pledge, commit to storing data, or provide proof of storage.
    It is natural for Storage Miners to also participate as Retrieval Miners. Retrieval
    Miners can obtain pieces of data directly from clients, or from the Retrieval
    Market.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The collection of all the Filecoin nodes is referred to as the Filecoin network.
    The Filecoin network is responsible for the management protocol of the storage
    network. Management involves auditing storage proofs, repairing possible faults,
    managing available storage, and validating pledges.
  prefs: []
  type: TYPE_NORMAL
- en: Filecoin markets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To meet the demand and supply requests in the Filecoin network, there are two
    markets: a Storage Market and a Retrieval Market. The two markets have the same
    structure but different designs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a990fea5-2e7e-45bf-aa90-e073b6b7cb69.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.8: Filecoin market'
  prefs: []
  type: TYPE_NORMAL
- en: Clients and miners propose a price for the services they need or provide by
    submitting it to the market. When the exchange matches the order, it will initiate
    and execute the deal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Filecoin exchanges services in a decentralized fashion with the help of verifiable
    markets. Miners and full nodes are the participants of verifiable markets. A verifiable
    market is a protocol with two phases: order matching and settlement.'
  prefs: []
  type: TYPE_NORMAL
- en: The Storage Market is a verifiable market that allows clients to pay miners
    to store data. Just like any exchange, it maintains an in-chain orderbook. The
    orderbook is public so that the clients can always monitor prices and bid accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: The Retrieval Market is a verifiable market that allows clients to pay miners
    to retrieve stored data. Clients request a specific piece of information, and
    the market allocates a miner to serve this data. Unlike Storage Miners, Retrieval
    Miners don't need to generate proof of storage. Any user in the network can become
    a Retrieval Miner by serving data in exchange for a reward in Filecoin.
  prefs: []
  type: TYPE_NORMAL
- en: BigchainDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**BigchainDB** is database software that inherits many of the properties of
    blockchain systems. It brings together the best features of both structured databases
    (high transaction rates and low latency) and blockchain systems (immutability,
    decentralization, and identity). The initial implementation of BigchainDB did
    not achieve pure decentralization because it was susceptible to single points
    of failure. The recent release of BigchainDB achieves decentralization by ensuring
    **Byzantine Fault Tolerance** (**BFT**) of the nodes. This was achieved by integrating
    the **Tendermint** protocol, which is used for networking and consensus functionalities.'
  prefs: []
  type: TYPE_NORMAL
- en: Features of BigchainDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BigchainDB encompasses all the essential features of a distributed database
    and a typical blockchain-based system. Although it doesn't have the ideal features
    of a blockchain-based database, it is a great data storage solution and is a useful
    decentralized database system.
  prefs: []
  type: TYPE_NORMAL
- en: '**Blockchain inherited features**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The blockchain-inherited features of BigchainDB include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Decentralization**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each node in the network contains its own MongoDB instance, which maintains
    all the transactions. BigchainDB is decentralized to ensure that there is no single
    owner, no single point of control, and no single point of failure. Even if a third
    of the nodes fail in any way, the network will be resilient to this failure. BigchainDB
    ensures BFT by using middleware called Tendermint.
  prefs: []
  type: TYPE_NORMAL
- en: Tendermint doesn't use Bitcoin's Proof of Work algorithm to achieve consensus
    for each block due to its high energy consumption. It provides BFT by achieving
    consensus among validating nodes. The validating nodes participate in the consensus
    protocol by broadcasting votes to decide on the next block to append. If the protocol
    achieves a majority of votes (2/3 of validators), it will commit the block to
    the blockchain. The Tendermint protocol needs to run this consensus procedure
    during each block insertion to the blockchain to determine the next block, so
    it is referred to as a round-based protocol.
  prefs: []
  type: TYPE_NORMAL
- en: '**Immutability:Â **Unlike traditional databases, BigchainDB doesn''t perform
    an update or delete operations on the inserted data. Due to the nature of blockchain,
    transactions can only be appended. All the transactions at each node are maintained
    in a MongoDB instance in an immutable way, similar to other blockchain systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Asset ownership:Â **Like most asset-based blockchain applications, BigchainDB
    provides asset management operations such as asset creation and transfer. A user
    can claim an asset by owning the private key of the account to which the asset
    is transferred. Generally, a blockchain application such as a cryptocurrency only
    has a single type of asset, but BigchainDB can create as many assets as a user
    needs. All the asset management operations are performed by creating transactions,
    and it validates each transaction to make sure that it is safe from transaction
    attacks such as double-spend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database inherited features**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The database-inherited features of BigchainDB include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**High transaction throughput:Â **BigchainDB was created as a replacement for
    existing distributed databases, with the added features provided by the blockchain
    technology. Although the database was designed with blockchain principles, it
    retained its database characteristics. It was able to achieve a high transaction
    rate even in a decentralized network. The latest version of BigchainDB processes
    a thousand transactions per second, which is high compared to other blockchain-based
    storage applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Low latency:Â **BigchainDB takes only a few seconds to include a transaction
    in a committed block. The Tendermint protocol is responsible for maintaining low
    latency in the decentralized network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database querying:Â **We all know that any structured or unstructured database
    uses query languages to request and retrieve the data from it. BigchainDB nodes
    also let users index and query stored data. Each node in the network maintains
    its own MongoDB instance. It is up to the node operator to decide how to expose
    the database to the blockchain network. The node can expose any interface. It
    could be a REST API or the GraphQL API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The life cycle of BigchainDB transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The life cycle of BigchainDB transactions consists of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating a transaction**'
  prefs: []
  type: TYPE_NORMAL
- en: BigchainDB transactions can be created and broadcast to the network by any user
    as long as the created transaction conforms to the BigchainDB Transactions Spec,
    which defines the expected keys and values of a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Transactions are usually created using the drivers provided by BigchainDB. There's
    a list of drivers available in a variety of programming languages, including Python
    and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following JSON structure shows all the fields of the transaction. BigchainDB
    transactions consist of input and output, which is similar to Bitcoin transactions.
    Additionally, each transaction has an `operation` field, which specifies the operation
    performed on the asset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Transmitting a transaction**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a transaction is created, it can be transmitted to the network by invoking
    the HTTP API exposed by the node. When the transaction arrives at the node, it
    is validated to ensure that it conforms with Transactions Spec and transaction
    legitimacy. It is then broadcast to the network using a Tendermint instance. The
    following figure shows how BigchainDB''s server, a MongoDB instance, and a Tendermint
    instance are interconnected in the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36f8e438-1b01-4bbc-b8d0-bfb5bd6fe6c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.9: A BigchainDB network with its components (source: [https://www.bigchaindb.com](https://www.bigchaindb.com))'
  prefs: []
  type: TYPE_NORMAL
- en: Use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to BigchainDB's blockchain and database characteristics, its applications
    can be witnessed in both centralized and decentralized ecosystems. In a centralized
    system, such as servers on the cloud, it can replace existing databases. However,
    its most suitable application is alongside decentralized platforms such as Ethereum.
    DApps created in Ethereum often make use of distributed storage mechanisms such
    as IPFS. BigchainDB could be used in such applications to store transaction data.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last decade, we have witnessed tremendous growth in the computing industry.
    The growth in the computing industry was in terms of processing power, memory,
    storage, networking, design, and much more. With the increase in computing power,
    developers have started working on equally exciting projects to harness it. Although
    high-powered computing devices are available to the general public, they are not
    very economical. This was when distributed computing was introduced to situations
    where a complex problem could be solved by several computing devices by breaking
    the problem down into tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed computing is an efficient way of solving complex tasks without using
    any single high-powered computing machine. Just like distributed data storage,
    distributed computing has been integrated with blockchain platforms. **Golem**
    is a blockchain-based platform that provides a marketplace for computing power.
  prefs: []
  type: TYPE_NORMAL
- en: Golem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Golem is a global marketplace for distributed computing power in a P2P network.
    It allows anyone with redundant computing power to become a producer and monetize
    their computing power by contributing it to a decentralized network. Golem can
    be used to power decentralized microservices or any asynchronous tasks. The main
    advantage of Golem's marketplace is the reduction of the computing price for complex
    tasks such as CGI rendering, scientific calculations, and machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: Golem operates in a P2P network, allowing providers with computing power to
    hire out their resources to customers, or in Golem parlance, requestors. Unlike
    existing cloud platforms, where payment is made at fixed intervals using third-party
    services, Golem uses a micro-payment service built with an Ethereum-based transaction
    system that enables direct payment between the participants in the network.
  prefs: []
  type: TYPE_NORMAL
- en: Golem ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Golem ecosystem is formed by three main components - the resource providers,
    the resource requestors, and the software developers. The following figure depicts
    the Golem ecosystem consisting of these components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/929d296a-9544-41bd-9d49-9f591cb1c872.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.10: The Golem ecosystem (source: [https://golem.network](https://golem.network))'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application registry**'
  prefs: []
  type: TYPE_NORMAL
- en: The application registry is a smart contract on the Ethereum blockchain where
    anyone can publish applications, such as integration tools, that can run on the
    Golem network. This registry serves as a marketplace for requestors to look for
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: Since it is unsafe to trust untested software in a decentralized system, Golem
    whitelists or blacklists applications with the help of special users called validators.
    When a software author publishes some software, validators review and certify
    the application as either safe or unsafe. All the safe applications are added
    to the whitelist, and others are added to the blacklist. The providers use this
    whitelist whenever using an application. Golem maintains a whitelist of safe applications
    that can be referred to by first-time users.
  prefs: []
  type: TYPE_NORMAL
- en: '**Providers**'
  prefs: []
  type: TYPE_NORMAL
- en: Computing power is supplied by providers in the Golem ecosystem. The infrastructure
    of the decentralized network can be supplied by anyone. Providers can even supply
    cycles of a single CPU. Each provider is rewarded for contributing to the requestors
    computing tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Requestors**'
  prefs: []
  type: TYPE_NORMAL
- en: Requestors are the consumers of the computing resources shared by the providers.
    Golem is a competitive market, thanks to the participation of the providers and
    the requestors. This competitive market results in reasonable prices for computing
    resources, unlike the pricing of existing cloud platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Golem allows users to act as both provider and requestor so that requestors
    can share their resources during idle time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Golem Network Token (GNT)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'GNT powers the entire decentralized network by facilitating the micro-payment
    service between the participants. GNT was created during the crowdfunding period
    of the project, but is mostly used in the Golem network by the requestors and
    providers:'
  prefs: []
  type: TYPE_NORMAL
- en: GNT is used for settlements between the providers and requestors for services
    provided
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software developers receive remuneration in GNT for contributing to the application
    registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Participation in the software validation process requires GNT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Golem tokens cannot be mined and are limited to the number of tokens created
    during the crowdfunding period.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As decentralized blockchain applications gained a lot of exposure in several
    technology sectors, individual developers and organizations began creating blockchain
    platforms in which applications could be created without worrying about the underlying
    implementations of P2P networking, consensus, or transactions. These projects
    have provided a platform for generic programmers to implement valid use cases
    just by creating business logic.
  prefs: []
  type: TYPE_NORMAL
- en: Each blockchain platform has its own blockchain and network of nodes. This isolates
    blockchain applications created in one blockchain platform in terms of the transactions
    and other data on the blockchain. There are multiple blockchain platforms, each
    of them trying either to solve issues in existing platforms' implementations or
    develop additional functionality for a particular application.
  prefs: []
  type: TYPE_NORMAL
- en: We have already looked at NEO and MultiChain platforms and created decentralized
    applications. Ethereum, Eris, NXT, EOS, and Hyperledger are some well-known platforms
    that are used to implement diverse use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ethereum is a widely-used platform for creating decentralized applications by
    providing an immutable ledger that uses a modified version of Bitcoin's consensus
    algorithm. Ethereum provides advanced scripting functionality with an object-oriented
    programming language called Solidity. Ethereum houses its own distributed virtual
    machine, called EVM, which can execute compiled Solidity scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum was proposed in late 2013 by Vitalik Buterin, a programmer who was
    involved with Bitcoin at the time. Buterin had earlier proposed that Bitcoin needed
    an advanced scripting language to develop applications. He proposed Ethereum after
    failing to convince the Bitcoin development community.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum token
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ethereum contains a token called ether, which powers the functionality of the
    blockchain. All the transactions in Ethereum need a small ether fee to be included
    in the blockchain. This small unit of computation is called **gas**. Unlike NEO's
    GAS token, which was discussed in [Chapter 7](6bcd989e-2411-4096-91e1-943698f1702e.xhtml),
    *Diving into Blockchain â Proof of Ownership*, gas is not a separate token, but
    a small unit of ether.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ether**'
  prefs: []
  type: TYPE_NORMAL
- en: Ether is a cryptocurrency used in the Ethereum ecosystem. Ether can be used
    as a virtual currency just like Bitcoin. It can be transacted with the help of
    a public key and private key that is owned by the user. Ether tokens are traded
    in cryptocurrency exchanges under the ETH symbol.
  prefs: []
  type: TYPE_NORMAL
- en: '**Gas**'
  prefs: []
  type: TYPE_NORMAL
- en: Gas is a small ether fee that needs to be attached when a transaction is included
    in the blockchain. Gas was mainly created to mitigate spam transactions in the
    blockchain. Any smart contract author will attach a small amount of gas when deploying
    it in the public ledger. This will ensure that the author is deploying a legitimate
    contract to the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: The price of the gas can be specified in a small amount of ether by the user
    while deploying the contract, and this is referred to as the gas price. The amount
    of gas that needs to be spent during any transaction is called the gas limit.
    The gas price is measured in a unit of gwei (1 ether = 10â¹ gwei).
  prefs: []
  type: TYPE_NORMAL
- en: EVM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike the stack-based language used in Bitcoin, Solidity is a Turing-complete
    language, and thus it requires a runtime environment to execute programs. EVM
    provides a runtime environment to execute smart contracts in Ethereum nodes. EVM
    runs on a node that is isolated from the Ethereum network and other processes
    of the host machine. Only the output of smart contracts can be broadcast and appended
    to the blockchain as transactions. EVM executes Solidity scripts that are compiled
    to Ethereum bytecode. This ensures that execution is independent of the platform
    so that each node on the network executes and produces the same output. EVM has
    been implemented in several different languages, including Go, JavaScript, and
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain consensus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ethereum nodes mine blocks for the blockchain in a similar way to Bitcoin by
    using a Proof of Work-based algorithm. A node that appends a block ensures that
    a sufficient amount of computation is done on the block using a hash function.
    The average block creation time is limited to around 12 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum uses a Proof of Work algorithm called **Ethash**, which is an ASIC-resistant
    algorithm developed to overcome the centralization of the mining process. The
    mining requires the generation of a large dataset from the pseudorandom cache
    before computing the hash. Since memory is used during this process, it is resistant
    to ASIC-based mining devices. The verification process can be performed with low
    memory because it only needs part of the dataset to be regenerated.
  prefs: []
  type: TYPE_NORMAL
- en: ASIC stands for the **application-specific integrated circuit**. The circuit
    will perform a specific operation. Bitcoin ASICs were developed specifically to
    run SHA256 hashing functions so that they make full use of the hardware's capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum has planned to replace Proof of Work-based consensus with proof of
    stake in the near future. Miners will no longer be able to contribute with their
    computation power. Instead, token holders will contribute to the consensus.
  prefs: []
  type: TYPE_NORMAL
- en: DApp development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, Ethereum is the most widely-used platform for DApp development, due
    to its exceptional community support. There are over 2,000 active DApps on the
    Ethereum platform. Complete statistics can be found at [https://www.stateofthedapps.com/stats](https://www.stateofthedapps.com/stats).
    It provides an excellent set of tools to bootstrap DApp development. In this section,
    we will list some of the basic components and tools that are required to develop
    a DApp in the Ethereum ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: '**Geth**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ethereum provides client software in multiple languages, including C++, Python,
    and Rust. The Go programming language implementation of the client software, called
    **Geth**, is popular. Each piece of client software is bundled with several components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Client daemon**: Just like Bitcoin Core''s client daemon, the Geth daemon
    is a process that establishes a P2P connection with other Ethereum nodes to exchange
    blockchain data. The Geth daemon needs to run all the time to ensure that the
    client''s local blockchain copy is up to date. The Geth client daemon can also
    validate and mine transactions. The client exposes an RPC interface to let DApps
    communicate with the blockchain network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client CLI**: The client software provides a **command-line interface** (**CLI**)
    that can be used to perform operations on the Ethereum client node. The CLI can
    be to manage accounts, create transactions, and query the local blockchain data,
    among other things.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client User Interface**: Mist is the most widely-used graphical user interface
    software. It comes with bundled with Go and C++ implementations of the Ethereum
    node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web3.js**'
  prefs: []
  type: TYPE_NORMAL
- en: Like any other web applications, even DApps needs a frontend app providing the
    user an interface to communicate with the backend application. Since most frontend
    applications are executed in web browsers, Ethereum provides a JavaScript library
    called web3.js, which can be used in frontend applications to communicate with
    the decentralized blockchain network. There are libraries available in other languages,
    such as Web3.py for Python, that can perform similar operations if the client
    interface is built in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '**Truffle framework**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Truffle** is a framework that helps to bootstrap the Ethereum DApp project
    by creating the required project structure along with basic scripts and configurations.
    This is similar to frameworks such as Django, Angular, and React. Truffle eases
    the tasks of compiling and deploying contracts onto the blockchain for developers.'
  prefs: []
  type: TYPE_NORMAL
- en: '**MetaMask**'
  prefs: []
  type: TYPE_NORMAL
- en: MetaMask is an application that acts as a bridge between user interfacing applications
    that run generally on web browsers and Ethereum blockchain nodes. In *Figure 8.11*,
    MetaMask forms the bridge between the DApp user interface and blockchain nodes.
    MetaMask provides a plugin or extension for web browsers that enables users to
    manage their accounts. All transaction queries to the Ethereum blockchain are
    forwarded to the Ethereum network with the help of the MetaMask bridge.
  prefs: []
  type: TYPE_NORMAL
- en: 'MetaMask communicates with the blockchain nodes by invoking methods through
    the RPC interface provided by nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5932239-806f-4fbd-ad5e-1015e8139791.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.11: Ethereum DApp architecture'
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like Bitcoin, Ethereum can run on the mainnet or testnet blockchains. Both the
    mainnet and testnet blockchains are public blockchains. In addition to this, Ethereum
    nodes can set up a private or local blockchain instance. Setting up a development
    environment in Ethereum is a piece of cake due to the wide variety of options
    and community support.
  prefs: []
  type: TYPE_NORMAL
- en: '**Local blockchain**'
  prefs: []
  type: TYPE_NORMAL
- en: An Ethereum local blockchain instance can be set up in the blink of an eye.
    A JavaScript package called **Ganache** from the Truffle framework can set up
    a local instance of Ethereum. The package ships with JavaScript implementation
    of the Ethereum blockchain, so no Ethereum client is required for local testing.
    A local Ethereum blockchain instance comes with mining, account management, a
    blockchain explorer, and many other updated features. Ganache runs a local Ethereum
    client instance that also listens on the JSON-RPC port of Ethereum (8545).
  prefs: []
  type: TYPE_NORMAL
- en: '**Testnet blockchain**'
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum's testnet is similar to Bitcoin's testnet. It simulates the mainnet
    blockchain, differing only in that it consists of an alternate blockchain whose
    transactions are of no real value. The testnet also needs gas to deploy smart
    contracts or simple transactions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike Bitcoin''s testnet, there are three testnet blockchains in the Ethereum
    community, each of which is maintained by a different team:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rinkeby testnet**: This is a proof of authority blockchain network maintained
    by the Geth team. Ether cannot be mined in this network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ropsten testnet**: This is a Proof of Work blockchain network where ether
    can be mined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kovan testnet**: This is a proof of authority blockchain network maintained
    by the Parity team. Ether cannot be mined in this network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since gas is required to create any transaction, even in the testnet, it can
    be acquired by requesting it from testnet faucets where all the unused testnet
    Ethers are accumulated. Rinkeby testnet users can request ether from [https://faucet.rinkeby.io](https://faucet.rinkeby.io)
    by specifying the target account address.
  prefs: []
  type: TYPE_NORMAL
- en: Links for the projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have listed out the links for some of the projects that were mentioned throughout
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Zcash implementation**:Â [https://github.com/zcash/zcash](https://github.com/zcash/zcash)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ripple implementation**:Â [https://github.com/ripple/rippled](https://github.com/ripple/rippled)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kyber Network project**:Â [https://github.com/kybernetwork](https://github.com/kybernetwork)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Factom project**:Â [https://github.com/FactomProject](https://github.com/FactomProject)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Steem blockchain**:Â [https://github.com/steemit/steem](https://github.com/steemit/steem)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IOTA project**:Â [https://github.com/iotaledger](https://github.com/iotaledger)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IPFS protocol**:Â [https://github.com/ipfs/ipfs](https://github.com/ipfs/ipfs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigchainDB server**:Â [https://github.com/bigchaindb/bigchaindb](https://github.com/bigchaindb/bigchaindb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Golem project**:Â [https://github.com/golemfactory](https://github.com/golemfactory)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ethereum project**:Â [https://github.com/ethereum](https://github.com/ethereum)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've attempted to cover most blockchain applications in both the financial
    and non-financial sectors. This chapter has given deep insight into the growing
    blockchain industry and the possible future trajectory of applications in the
    blockchain ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we initially listed out several projects under the blockchain
    technology by classifying them into financial and non-financial sectors. We then
    covered each of the projects by diving into its architecture, implementation,
    use cases, and much more. We made sure to understand the role of blockchain in
    each of the implementation covered.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know a few blockchain use cases, along with their benefits and drawbacks,
    we can think about optimizing the existing blockchain architecture. In the next
    chapter, we will cover some optimizations that we can implement when designing
    DApps using blockchain.
  prefs: []
  type: TYPE_NORMAL
