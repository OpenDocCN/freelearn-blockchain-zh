["```\npragma solidity ^0.4.19;\n\ncontract USD {\n\n    mapping (address => uint) balances;\n    mapping (address => mapping (address => uint)) allowed;\n    address owner;\n\n    function USD() {\n        owner = msg.sender;\n    }\n\n    function issueUSD(address to, uint amount) {\n        if(msg.sender == owner) {\n            balances[to] += amount;\n        } \n    }\n\n    function transferUSD(address to, uint amount) {\n        if(balances[msg.sender] >= amount) {\n            balances[msg.sender] -= amount;\n            balances[to] += amount;\n        }\n    }\n\n    function getUSDBalance(address account) view returns \n      (uint balance) {\n        return balances[account];\n    }\n\n    function approve(address spender, uint amount) {\n        allowed[spender][msg.sender] = amount;\n    }\n\n    function transferUSDFrom(address from, address to, uint amount) {\n        if(allowed[msg.sender][from] >= amount && balances[from]\n          >= amount) {\n            allowed[msg.sender][from] -= amount;\n            balances[from] -= amount;\n            balances[to] += amount;\n        }\n    }\n}\n```", "```\npragma solidity ^0.4.19;\n\ncontract INR {\n\n    mapping (address => uint) balances;\n    mapping (address => mapping (address => uint)) allowed;\n    address owner;\n\n    function INR() {\n        owner = msg.sender;\n    }\n\n    function issueINR(address to, uint amount) {\n        if(msg.sender == owner) {\n            balances[to] += amount;\n        } \n    }\n\n    function transferINR(address to, uint amount) {\n        if(balances[msg.sender] >= amount) {\n            balances[msg.sender] -= amount;\n            balances[to] += amount;\n        }\n    }\n\n    function getINRBalance(address account) view returns \n      (uint balance) {\n        return balances[account];\n    }\n\n    function approve(address spender, uint amount) {\n        allowed[spender][msg.sender] = amount;\n    }\n\n    function transferINRFrom(address from, address to, uint amount) {\n        if(allowed[msg.sender][from] >= amount && balances[from] \n          >= amount) {\n            allowed[msg.sender][from] -= amount;\n            balances[from] -= amount;\n            balances[to] += amount;\n        }\n    }\n}\n```", "```\npragma solidity ^0.4.19;\n\nimport \"./USD.sol\";\n\ncontract AtomicSwap_USD {\n\n    struct AtomicTxn {\n        address from;\n        address to;\n        uint lockPeriod;\n        uint amount;\n    }\n\n    mapping (bytes32 => AtomicTxn) txns;\n    USD USDContract;\n\n    event usdLocked(address to, bytes32 hash, uint expiryTime, \n      uint amount);\n    event usdUnlocked(bytes32 hash);\n    event usdClaimed(string secret, address from, bytes32 hash);\n\n    function AtomicSwap_USD(address usdContractAddress) {\n        USDContract = USD(usdContractAddress); \n    }\n\n    function lock(address to, bytes32 hash, uint lockExpiryMinutes,\n      uint amount) {\n        USDContract.transferUSDFrom(msg.sender, address(this), amount);\n        txns[hash] = AtomicTxn(msg.sender, to, block.timestamp + \n         (lockExpiryMinutes * 60), amount);\n        usdLocked(to, hash, block.timestamp + (lockExpiryMinutes * 60),\n          amount);\n    }\n\n    function unlock(bytes32 hash) {\n        if(txns[hash].lockPeriod < block.timestamp) {\n            USDContract.transferUSD(txns[hash].from, \n              txns[hash].amount);\n            usdUnlocked(hash);\n        }\n    }\n\n    function claim(string secret) {\n        bytes32 hash = sha256(secret);\n        USDContract.transferUSD(txns[hash].to, txns[hash].amount);\n        usdClaimed(secret, txns[hash].from, hash);\n    }\n\n    function calculateHash(string secret) returns (bytes32 result) {\n        return sha256(secret);\n    }\n}\n```", "```\npragma solidity ^0.4.19;\n\nimport \"./INR.sol\";\n\ncontract AtomicSwap_INR {\n\n    struct AtomicTxn {\n        address from;\n        address to;\n        uint lockPeriod;\n        uint amount;\n    }\n\n    mapping (bytes32 => AtomicTxn) txns;\n    INR INRContract;\n\n    event inrLocked(address to, bytes32 hash, uint expiryTime,\n      uint amount);\n    event inrUnlocked(bytes32 hash);\n    event inrClaimed(string secret, address from, bytes32 hash);\n\n    function AtomicSwap_INR(address inrContractAddress) {\n        INRContract = INR(inrContractAddress); \n    }\n\n    function lock(address to, bytes32 hash, uint lockExpiryMinutes, \n      uint amount) {\n        INRContract.transferINRFrom(msg.sender, address(this), amount);\n        txns[hash] = AtomicTxn(msg.sender, to, block.timestamp + \n         (lockExpiryMinutes * 60), amount);\n        inrLocked(to, hash, block.timestamp + (lockExpiryMinutes * 60), \n          amount);\n    }\n\n    function unlock(bytes32 hash) {\n        if(txns[hash].lockPeriod < block.timestamp) {\n            INRContract.transferINR(txns[hash].from, \n              txns[hash].amount);\n            inrUnlocked(hash);\n        }\n    }\n\n    function claim(string secret) {\n        bytes32 hash = sha256(secret);\n        INRContract.transferINR(txns[hash].to, txns[hash].amount);\n        inrClaimed(secret, txns[hash].from, hash);\n    }\n\n    function calculateHash(string secret) returns (bytes32 result) {\n        return sha256(secret);\n    }\n}\n```", "```\nvar generateSecret = function () {\n    return Math.random().toString(36).substr(2, 9);\n};\n\nvar web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\n\nvar RBI_Address = \"0x92764a01c43ca175c0d2de145947d6387205c655\";\nvar FRS_Address = \"0xbc37e7ba9f099ba8c61532c6fce157072798fe77\";\nvar BOA_Address = \"0x104803ea6d8696afa6e7a284a46a1e71553fcf12\";\nvar ICICI_Address = \"0x84d2dab0d783dd84c40d04692e303b19fa49bf47\";\n\nvar usdContract_ABI = /* Put JSON here */;\nvar usdContract_Bytecode = \"0x606...\"\nvar atomicswapUSD_ABI = /* Put JSON here */;\nvar atomicswapUSD_Bytecode = \"0x606...\"\nvar inrContract_ABI = /* Put JSON here */;\nvar inrContract_Bytecode = \"0x606...\"\nvar atomicswapINR_ABI = /* Put JSON here */;\nvar atomicswapINR_Bytecode = \"0x606...\"\n\nvar usdContract = web3.eth.contract(usdContract_ABI);\nvar usd = usdContract.new({\n  from: FRS_Address, \n   data: usdContract_Bytecode, \n   gas: \"4700000\"\n}, function (e, contract){\n  if (typeof contract.address !== 'undefined') {\n    var usdContractAddress = contract.address;\n    var usdContractInstance = usdContract.at(usdContractAddress)\n    var atomicswap_usdContract = web3.eth.contract(atomicswapUSD_ABI);\n    var atomicswap_usd = atomicswap_usdContract.new(usdContractAddress, {\n        from: FRS_Address, \n        data: atomicswapUSD_Bytecode, \n        gas: \"4700000\"\n    }, function (e, contract){\n        if (typeof contract.address !== 'undefined') {\n            var atomicSwapUSDAddress = contract.address;\n            var atomicSwapUSDContractInstance =\n              atomicswap_usdContract.at(atomicSwapUSDAddress);\n\n            var inrContract = web3.eth.contract(inrContract_ABI);\n\n        var inr = inrContract.new({\n            from: RBI_Address, \n            data: inrContract_Bytecode, \n            gas: \"4700000\"\n        }, function (e, contract){\n            if(typeof contract.address !== 'undefined') {\n                var inrContractAddress = contract.address;\n                var inrContractInstance = \n                  inrContract.at(inrContractAddress)\n            var atomicswap_inrContract =\n              web3.eth.contract(atomicswapINR_ABI);\n            var atomicswap_inr = atomicswap_inrContract.new(\n                inrContractAddress, {\n                from: RBI_Address, \n                data: atomicswapINR_Bytecode, \n                gas: '4700000'\n            }, function (e, contract){\n                if (typeof contract.address !== 'undefined') {\n                    var atomicSwapINRAddress = contract.address;\n                    var atomicSwapINRContractInstance = \n                      atomicswap_inrContract.at(atomicSwapINRAddress);\n\n                }\n            })\n            }\n        })\n        }\n    })\n  }\n})\n```", "```\n//Issue USD\nusdContractInstance.issueUSD.sendTransaction(BOA_Address, 1000,\n  {from: FRS_Address}, function(e, txnHash){\n\n  //Fetch USD Balance\n  console.log(\"Bank of America's USD Balance is : \" + \n    usdContractInstance.getUSDBalance.call(BOA_Address).toString())\n\n  //Issue INR\n  inrContractInstance.issueINR.sendTransaction(ICICI_Address, 1000,\n   {from: RBI_Address}, function(e, txnHash){\n\n    //Fetch INR Balance\n    console.log(\"ICICI Bank's INR Balance is : \" + \n      inrContractInstance.getINRBalance.call(ICICI_Address).toString())\n\n    //Generate Secret and Hash\n    var secret = generateSecret();\n    var hash = atomicSwapUSDContractInstance.calculateHash.call(secret,\n      {from: BOA_Address});\n\n    //Give Access to Smart Contract\n    usdContractInstance.approve.sendTransaction(atomicSwapUSDAddress,\n      1000, {from: BOA_Address}, function(e, txnHash){\n\n      //Give Access to Smart Contract\n      inrContractInstance.approve.sendTransaction(atomicSwapINRAddress,\n        1000, {from: ICICI_Address}, function(e, txnHash){\n\n        //Lock 1000 USD for 30 min\n        atomicSwapUSDContractInstance.lock.sendTransaction(ICICI_Address, hash, \n  30, 1000, {from: BOA_Address, gas: 4712388}, function(e, txnHash){\n\n          //Fetch USD Balance\n          console.log(\"USD Atomic Exchange Smart Contracts holds : \" + \n            usdContractInstance.getUSDBalance.call\n            (atomicSwapUSDAddress).toString())\n\n          //Lock 1000 INR for 15 min\n          atomicSwapINRContractInstance.lock.sendTransaction(BOA_Address,\n  hash, 15, 1000, {from: ICICI_Address, gas: 4712388},\n  function(e, txnHash){\n\n            //Fetch INR Balance\n            console.log(\"INR Atomic Exchange Smart Contracts holds : \"\n              + inrContractInstance.getINRBalance.call\n              (atomicSwapINRAddress).toString())\n\n            atomicSwapINRContractInstance.claim(secret, {\n              from: BOA_Address, gas: 4712388\n            }, function(error, txnHash){\n\n              //Fetch INR Balance\n              console.log(\"Bank of America's INR Balance is : \" +\n                inrContractInstance.getINRBalance.call\n                (BOA_Address).toString())\n\n              atomicSwapUSDContractInstance.claim(secret, {\n                from: ICICI_Address, gas: 4712388\n              }, function(error, txnHash){\n\n                //Fetch USD Balance\n                console.log(\"ICICI Bank's USD Balance is : \" +\n                  usdContractInstance.getUSDBalance.call\n                  (ICICI_Address).toString())\n              })\n\n            })\n\n          })\n        })\n      })\n\n    })\n  })\n\n}) \n```"]