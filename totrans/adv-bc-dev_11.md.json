["```\n$ sudo apt-get install solc \n```", "```\n$ sudo add-apt-repository ppa:ethereum/ethereum  \n$ sudo apt-get update \n```", "```\n$ solc --version\nsolc, the solidity compiler commandline interface\nVersion: 0.4.19+commit.c4cbbb05.Darwin.appleclang  \n```", "```\n$ brew tap ethereum/ethereum $ brew install solidity $ brew linkapps solidity  \n```", "```\n $ solc --bin Addition.sol  \n```", "```\n $ solc --gas Addition.sol\n```", "```\n $ solc --abi Addition.sol \n```", "```\n      ======= Addition.sol:Addition ======= \n      Contract JSON ABI  \n      [{\"constant\":false,\"inputs\":[{\"name\":\"y\",\"type\":\"uint8\"},   \n      {\"name\":\"z\",\"type\":\"uint8\"}],\"name\":\"addx\",\"outputs\":\n      [],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":\n      [],\"name\":\"retrievex\",\"outputs\":   \n      [{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}] \n```", "```\n $ solc --bin --abi --optimize -o bin Addition.sol\n```", "```\n$ curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash - sudo apt-get install -y nodejs \n```", "```\n$ npm install -g ethereumjs-testrpc \n```", "```\n$ testrpc  \n```", "```\n$ node -version \nv7.2.1 \n```", "```\n$ sudo npm install -g truffle \n```", "```\n$ sudo npm install -g truffle Password: /us/local/bin/truffle -> /usr/local/lib/node_modules/truffle/build/cli.bundled.js /usr/local/lib └── truffle@4.0.1  \n```", "```\n$ truffle \n```", "```\n$ git clone https://github.com/ConsenSys/truffle.git\n```", "```\nbool v = true; \nbool v = false;  \n```", "```\nuint256 x;  \nuint y;  \nuint256 z; \n```", "```\nuint constant z=10+10; \n```", "```\n      address to = 0x6414cc08d148dce9ebf5a2d0b7c220ed2d3203da; address from = this; \n      if (to.balance < 10 && from.balance > 50) to.send(20); \n```", "```\n      bytes32[10] bankAccounts; \n```", "```\n      bytes32[] trades;  \n```", "```\n      trades.length; \n```", "```\nuint8 x = 2; \n```", "```\n'packt' \"packt\" \n```", "```\n(hex'AABBCC'); \n```", "```\nenum Order {Filled, Placed, Expired };  \nOrder private ord; \nord=Order.Filled; \n```", "```\nfunction <nameofthefunction> (<parameter types> <name of the variable>) \n{internal|external} [constant] [payable] [returns (<return types> <name of the variable>)] \n```", "```\nuint[] OrderIds; \n```", "```\npragma solidity ^0.4.0; \ncontract TestStruct { \n  struct Trade \n  { \n    uint tradeid; \n    uint quantity; \n    uint price;  \n    string trader; \n  } \n\n  //This struct can be initialized and used as below \n\n  Trade tStruct = Trade({tradeid:123, quantity:1, price:1, trader:\"equinox\"}); \n\n} \n```", "```\nmapping (address => uint) offers; \n```", "```\nmapping (string => uint) bids;  \nbids[\"packt\"] = 10; \n```", "```\nkeccak256(...) returns (bytes32) \n```", "```\necrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address) \n```", "```\nblock.number \n```", "```\n      if (x == 0) \n          y = 0; \n      else \n          z = 1; \n```", "```\n      do{ \n          x++; \n      } (while z>1); \n```", "```\n      while(x > 0){ \n          z++; \n      } \n```", "```\n      for(uint8 x=0; x<=10; x++) \n      { \n          //perform some work \n          z++ \n          if(z == 5) break; \n      } \n```", "```\n      return 0; \n```", "```\npragma solidity ^0.4.0;  \ncontract valueChecker  \n{  \n    uint8 price=10; \n    event valueEvent(bool returnValue);  \n    function Matcher(uint8 x) public returns (bool) \n    { \n        if (x>=price) \n        { \n            valueEvent(true);  \n            return true; \n        } \n    } \n} \n```", "```\npragma solidity ^0.4.0;  \ncontract valueChecker \n{ \n    uint8 price = 20; \n    event valueEvent(bool returnValue);  \n    function Matcher(uint8 x) public returns (bool) \n    { \n        if (x>=price) \n        { \n            valueEvent(true);  \n            return true; \n        } \n    } \n} \ncontract valueChecker2 is valueChecker \n{ \n    function Matcher2() public view returns (uint) \n    { \n        return price+10; \n    } \n} \n```", "```\nbrowser/valuechecker.sol:20:8: DeclarationError: Undeclared identifier. \nreturn price+10; \n       ^---^ \n```", "```\nlibrary Addition \n{ \n    function Add(uint x,uint y) returns (uint z) \n    { \n        return x + y; \n    } \n} \n```", "```\nimport \"Addition.sol\" \nfunction Addtwovalues() returns(uint) \n{ \n    return Addition.Add(100,100); \n} \n```", "```\nfunction orderMatcher (uint x)  \nprivate constant returns(bool return value)  \n```", "```\n      function <name of the function>(<parameters>) <visibility specifier> returns \n      (<return data type> <name of the variable>) \n      { \n          <function body> \n      } \n```", "```\n      contract myContract \n      { \n          function checkValues(uint x, uint y) \n          { \n          } \n      } \n```", "```\n      contract myContract \n      { \n          function getValue() returns (uint z) \n          { \n              z=x+y; \n          } \n      } \n```", "```\n      function () \n      { \n          throw; \n      } \n```", "```\npragma solidity ^0.5.0 \n```", "```\nimport \"module-name\"; \n```"]