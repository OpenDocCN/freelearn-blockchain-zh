- en: Tools, Frameworks, Components, and Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you'll learn about several important tools that are available
    for Ethereum developers to create powerful decentralized applications and smart
    contracts that scale and are secure enough to serve millions of potential users.
    The world of Ethereum development is full of useful tools that are intended to
    make your life easier when creating complex decentralized applications and smart
    contracts that use the latest changes to Solidity. Knowing what's out there and
    how it works will really help you move forward in your development projects because
    you'll be able to create better and faster applications with less bug-prone code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using developer tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Ethereum communication tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making sense of the Ethereum infrastructure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning Ethereum testing and securing tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting important open source libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using developer tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developer tools such as **integrated development environments** (**IDEs**),
    faucets, and even smart contract languages are essential things a developer must
    control to have a practical understanding of how to develop smart contracts efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Development frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several development frameworks that provide you with a set of utilities
    for creating smart contracts in an environment where you can test your code and
    verify it so that you improve your development speed with higher quality code.
    Let''s see some of the most popular ones to decide which one should be used at
    any given moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Truffle**: This is the biggest development framework for creating dApps and
    smart contracts with Solidity. At the time of writing, it''s not fully compatible
    with Vyper, but there are some workarounds to get it working if you really wish
    to do so. Truffle, as you already know, provides you with smart contract compiling,
    deployment, and testing tools straight from your Terminal so that you don''t have
    to leave your workflow. It''s a bit complicated to set up, since you have to work
    in a particular way, but once done, you have an immense potential for creating
    powerful dApps with ease. You can get it at [truffleframework.com](https://truffleframework.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Waffle**: Although is not a well-known development framework, Waffle aims
    to create simpler and faster programming tools so that you can develop easily
    with far fewer dependencies. You only need the `contracts` and `test` folders
    to start using Waffle since it compiles all the code without complications. Your
    smart contracts can be easily compiled with `npx waffle`. Because it aims to be
    as minimalistic as possible, you can''t deploy your contracts from their utilities,
    nor do you have a `build/` folder as in Truffle, so it''s up to you to deploy
    them. There''s less setup and headaches for fewer features but improved simplicity.
    You can install it with `npm i -S Ethereum-waffle`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**0xcert**: This is another great development tool focused on creating and
    deploying advanced ERC721 non-fungible smart contract tokens. These are special
    types of tokens where each one is unique and has some intrinsic value. For instance,
    CryptoKitties used an ERC721 token to generate random animals with unique features
    with a set price based on rarity. Oxcert aims to increase adoption of the already
    accepted ERC721 token standard so that developers can create faster, more secure,
    and complex token contracts. You can get it on their website: [0xcert.org](https://0xcert.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated development environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When it comes to IDEs, we have a smaller set of tools that really help you
    program secure code from the first line, since they try to fix mistakes before
    they even happen:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Remix:** The most popular development environment is a very powerful code
    editor that fixes your smart contract code with automatic compilation and helpful
    warning messages to indicate what''s wrong with your code. It even provides suggestions
    for best practices to learn as you develop. You can deploy your smart contracts
    using a custom Ethereum instance, a JavaScript virtual machine, or injected `web3.js`
    to see how your smart contract reacts in different environments. You can interact
    with every deployed contract once you have the source code without exiting your
    browser. I highly recommend it for developing Solidity code and for manually testing
    every component of your functions. Start using it at [remix.ethereum.org](http://remix.ethereum.org).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Superblocks:** This is a strong IDE that includes even more features to deploy
    your dApps directly so that you can interact with your applications live with
    instant feedback. You can export your dApps, deploy contracts, access the blockchain
    directly, and many more great things. You should give it a chance to experience
    the power of a complete IDE that helps you every step of the way from an empty
    file to a fully-featured and tested dApp.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testnet faucets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''re probably already familiar with the testnets available for you as an
    Ethereum developer. You know that they are strong blockchains to deploy your smart
    contracts in a secure space that you can even use for real-world applications
    since the functionality is the same. Let''s take a look at some of the following
    faucets so that you can experience the different features of each test blockchain:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rinkeby**: This is a **proof-of-authority** (**PoA**) blockchain where you
    mine transactions with staking mechanisms without compromising your identity.
    It''s a very robust solution for secure and reliable blockchains. You should deploy
    your applications on different testnets to see which one fits your requirements
    best. If you want to use Rinkeby, you''ll need some test Ether, which you can
    get at [rinkeby.io/#faucet](http://rinkeby.io/#faucet). The process is quite different
    from other blockchains because they want to make sure the network stays uncompromised.
    So, to get Ether, you''ll have to publish your Ethereum address on a social media
    platform such as Twitter and wait to receive a limited amount of Ether: up to
    18.75 Ether at once, which you can retrieve every 3 days.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After publishing your Ethereum address, paste the link on the faucet and you'll
    receive your Ether in a few minutes. The great thing about this network is that
    it's compatible with MetaMask and the block times are really fast.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ropsten**: This is the most popular **proof-of-work** (**PoW**) test network
    where you can get Ether quickly from many faucets. The main place from which you
    can get free Ether for development is from MetaMask itself, which you can access
    at [https://faucet.metamask.io](https://faucet.metamask.io) to receive a limited
    amount of Ether. The restrictions for Ether per user change constantly, so it''s
    hard to predict how much Ether you''ll get by clicking repeatedly on the Request
    1 ether from faucet button â€“ it''s up to you to find out. Nevertheless, it''s
    a great blockchain, although not as reliable as others because of its low-capacity
    blockchain where just a small set of nodes mine for free.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kovan**: This is not used that much for testing projects, although it is
    a very solid PoA testnet that was built by the team at Parity to provide developers
    with an efficient testing environment for all kinds of projects. You can get Ether
    at [faucet.kovan.network](http://faucet.kovan.network), where you''ll have to
    log in with your GitHub account and receive 1 Ether every 24 hours per account.
    It''s not much, but it should be enough for smaller projects without substantial
    payment requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Ethereum communication tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ethereum is a big ecosystem made of several interconnected pieces that talk
    to each other, which includes smart contracts, dApps, and web apps. The goal is
    to create separate structures so that your final application is modular in the
    sense that you can update a specific part without having to recreate the entire
    dApp. That''s why we have communication tools: libraries that help us exchange
    information between smart contracts, dApps, and web apps. Let''s take a look at
    the different tools we have available right now when it comes to communication.'
  prefs: []
  type: TYPE_NORMAL
- en: Frontend Ethereum APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When it comes to frontend communication tools, we have some powerful JavaScript
    libraries that make dApps possible by connecting smart contracts with web applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Web3.js**: The most popular library for using smart contracts in your web
    apps to create contract instances, call contract functions, create transactions,
    and sign transactions. This library alone made dApps a possibility. Web applications
    where the backend is the blockchain itself is a revolutionary concept that is
    growing in popularity, all thanks to the people that decided to build such libraries.
    It can also be used on Node.js applications, and therefore it''s a great tool
    for all kinds of dApps, including backends. You can get web3.js here: [github.com/Ethereum/web3.js](http://github.com/Ethereum/web3.js).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NEthereum**: This is a smart contract communication tool similar to web3.js
    but for .NET developers. Those that work with the popular .NET libraries and prefer
    to program in C# will enjoy this tool given that it''s made specifically for those
    programmers. It provides you with everything you need to connect your existing
    .NET environment with your web applications, including libraries and client integrations.
    You can learn more about NEthereum here: [nethereum.com](http://nethereum.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drizzle:** This is a Redux integration for your dApps so that you can manage
    state and data stores with ease. If you''re familiar with Redux and React, you''ll
    enjoy this tool because it provides you with a clean library to implement the
    benefits of Redux on your dApps with ease. Made by the creators of Truffle, it''s
    fantastic for bigger projects. You can get it here: [github.com/trufflesuite/drizzle](http://github.com/trufflesuite/drizzle).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backend Ethereum APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most Ethereum applications will need some sort of centralized backend to do
    certain tasks that are unfeasible for smart contracts, either because it''s out
    of the capacity of the contract or because there''s a better way of processing
    some action. In these situations, we still need to talk to the blockchain. That''s
    where backend APIs come into play: to help us create tools and systems for improving
    our overall dApps and smart contracts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Web3.py**: This is the popular Ethereum implementation for Python so that
    you can create tools and systems for this popular language. Python works fantastically
    with web3.js because you can create efficient scripts to automate some actions,
    such as checking smart contract events. The syntax is pretty similar to the original
    `web3.js`, so you''ll feel comfortable using it. Check it out here: [github.com/Ethereum/web3.py](http://github.com/Ethereum/web3.py).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Eventeum**: This is a tool to communicate with smart contract events for
    your backend microservices. If you''re not familiar with microservices, they are
    simply small applications that are focused on doing some particular task very
    efficiently and maintainable so that your final application is extremely efficient
    and easy to optimize with modules that can be improved and replaced with ease.
    Eventeum is working with these kind of microservices to process Ethereum events
    that are generated by your smart contract so that you can implement events easily
    on your complex network of services. It works with Java and is fantastic for backend
    developers that want scalability. Take a look at it here: [github.com/ConsenSys/eventeum](http://github.com/ConsenSys/eventeum).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application binary interface tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Application binary interfaces**, better known as **ABIs**, are JSON objects
    that describe your smart contract functions, variables, modifiers, and everything
    in-between. The goal of ABIs is to help your dApps quickly understand smart contracts
    so that they know which functions are available to you. Now, it''s important that
    you take advantage of this protocol as much as you can, since you''ll be using
    it in all of your dApps. Here are some tools to really improve your ABI understanding:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Abi-decoder**: This is a tiny JavaScript tool that allows you to decode complex
    transaction objects that are normally encrypted and hard to understand. You see,
    every time you send a transaction by executing a function in your smart contracts,
    you are interacting with the blockchain in encrypted data. At some point or another,
    you''ll have to read these transactions, either because you''re debugging your
    dApp or because you need to understand what''s going on for whatever reason. With
    abi-decoder, you can decode transaction data and transaction logs, which is fantastic
    for data-efficient dApps. Learn more about this tiny tool made by Consensys at
    [github.com/ConsenSys/abi-decoder](http://github.com/ConsenSys/abi-decoder).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OneClickdApp.com**: This is a great tool to quickly deploy your dApps to
    the internet without having to worry about hosting. You can click a button, select
    your ABI data, and your configuration and your dApp is deployed to their domain.
    With a few clicks, you can see how it would look in the real world. It is great
    for testing and smaller projects. The only catch is that you have to pay 5 dollars
    per month if you decide to host it without downtime, although it''s great for
    your overall testing process. Learn more at [oneclickdapp.com](http://oneclickdapp.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So far, you've discovered some fantastic tools that you can implement right
    away on your projects with immediate benefits. Go ahead and explore the full ecosystem
    of technologies that help you create better dApps and smart contract so that you
    can go the next level when it comes to building powerful applications for the
    future.
  prefs: []
  type: TYPE_NORMAL
- en: Making sense of the Ethereum infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to the base structure of the Ethereum blockchain, there are several
    applications that help improve it so that people, including developers, can benefit
    from all of its potential. You see, the blockchain is capable of much more than
    processing transactions and running smart contracts. You can talk directly with
    each peer via messages, store information, and use custom clients. In this section,
    you'll learn about some of the most interesting use cases in Ethereum's infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You already know that there are some powerful clients with clear differences,
    but what you probably don''t know is that there are specific tools made just for
    certain clients. We''ll see some of the best implementations written in Java,
    mainly because it''s one of the most used languages for these types of applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pantheon**: Written entirely in Java, this app focuses on providing different
    environments that you can use for your dApps and smart contracts. It has a rich
    documentation website, it''s easy to get started right away, and you can create
    private networks with PoW or PoA using Clique. You don''t need to know Java to
    use it because it''s really straightforward to set up. Check it out at [docs.pantheon.pegasys.tech/en/latest/](http://docs.pantheon.pegasys.tech/en/latest/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EthereumJ**: This is a mode-heavy implementation that focuses on providing
    as many features as possible for your private network needs. It''s configurable
    with Java code in your Maven or Gradle projects. When it comes to ease of use,
    this one is harder to set up and it takes more time to get used to it, since it''s
    directed towards enterprise-grade developers. Check it out at [github.com/Ethereum/Ethereumj](http://github.com/Ethereum/Ethereumj).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Harmony**: Made by EtherCamp, this is a popular website in the early days
    of Ethereum that provided their own IDE and tools. Harmony is written in a combination
    of JavaScript and Java while being based on EthereumJ. Their goal is to provide
    a clean web dashboard interface that you can use with ease to monitor and analyze
    the blockchain in detail. It is highly recommended for projects where you need
    a clear understanding of what''s going on under the hood. Check it out at [github.com/ether-camp/Ethereum-harmony](http://github.com/ether-camp/Ethereum-harmony).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we talk about storage, we mean keeping all kinds of files in a decentralized
    cloud that may or may not work with the Ethereum blockchain. These are applications
    that allow you to store contracts and files without having to rely on a centralized
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '**InterPlanetary File System** (**IPFS**): It''s the most known implementation
    of decentralized storage, which allows you to store large files in a decentralized
    network of connected nodes instead of keeping your information in centralized
    servers and databases. It''s being used in all kinds of projects that want to
    exploit the possibilities of fully decentralized applications where there isn''t
    a centralized point of failure. These types of projects will be used in the future
    given that they are vastly more secure when thousands of nodes are replicating
    the information on top of high-quality networks. IPFS brings a combination between
    the torrent and Git protocol, where files are identified based on the content
    they have. So, two identical files that have the same content inside will have
    the same encrypted identifier known as **hash**. This is a highly important revolution,
    since they remove duplicated files, increasing the availability of data and allowing
    better use of resources, since many nodes will be sharing the same information
    together instead of being separated. Check it out on their website at [ipfs.io](http://ipfs.io).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Swarm**: This is a protocol built on top of Ethereum, whose goal is to share
    files in a decentralized manner, much like IPFS, but without having to rely on
    an external team. It''s being improved constantly by the core Ethereum team and
    has a seamless integration with the whole system so that you can integrate it
    with your dApps and smart contracts without headaches. Check it out on their website
    at [swarm-gateways.net](http://swarm-gateways.net).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum messaging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ethereum messaging means exchanging encrypted information between peers without
    intermediaries so that you get the information directly in almost real time. They
    are fantastic tools for chats and apps that need speed above all:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Whisper**: The most well-known protocol that implements peer-to-peer messaging,
    it''s built on top of Ethereum and is fully integrated with all the systems at
    its core. You can use it to communicate with other dApps with minimal configurations.
    Smart contracts are interconnected, having a layer where they can share information
    securely. Learn more about Whisper here: [github.com/Ethereum/wiki/wiki/Whisper](http://github.com/Ethereum/wiki/wiki/Whisper).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Devp2p**: This is another protocol built on Ethereum that allows people and
    dApps to exchange encrypted messages with high speeds without having to create
    slow blockchain transactions. There''s an implementation written in Python known
    as pydevp2p that provides you with a simple interface to include messaging in
    your applications so that people can start exchanging data with each other. Learn
    more about it on their official GitHub page: [github.com/Ethereum/devp2p](http://github.com/Ethereum/devp2p).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum messaging applications provide us with a rich set of possibilities
    to create better dApps and advanced smart contracts, so you should pay attention
    to those services whenever you wish to develop a user-based game or chat application
    on Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: Learning Ethereum testing and securing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security in the blockchain is the top priority above any other feature. Without
    secure applications, we can't begin to work on the simplest of the smart contracts
    because users won't trust our code. That's why you must learn about all the possibilities
    when it comes to securing your programs as a master Ethereum developer.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding monitoring utilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Monitoring is the act of watching how your applications are behaving in the
    real world. You see, it''s important to watch over your code, since it''s being
    used by potentially thousands of users all over the world: you don''t want them
    to have a poor experience at random moments. Be sure to check out these tools
    to level up your Smart Contract game since they provide a large improvement in
    your application''s quality:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Smart contract watch**: Made by Neufund, which is a company that works on
    creating legally binding smart contracts among other things. This tool allows
    you to watch your smart contract''s activity and see where it could lead to problems.
    You can use it as your own custom block explorer, as a security tool for when
    funds get critically reduced from one of your applications, or for whatever situation
    you need that requires careful monitoring. It''s simple to use from the Terminal
    and has a simple output interface to see what''s going on. Learn more about it
    at: [github.com/Neufund/smart-contract-watch](http://github.com/Neufund/smart-contract-watch).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scout**: Shows you in real time what''s happening on the events and activities
    inside your smart contracts so that you can pay attention to the things that matter.
    You can create critical events that should be executed at dangerous situations
    to notify you about breaches in security that need urgent patching. Imagine the
    amount of Ether that could have been saved if people used tools like Scout to
    take fast and determined action in the face of a hack. Their dashboard and live
    reports are stunning, so I highly recommend that you take a look at it for improving
    your applications. Learn more about it at: [scout.cool](http://scout.cool).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chainlyt:** Allows you to decode what''s going on inside transaction data
    to explore in extreme detail what''s going on at any given moment. You can use
    it in combination with other monitoring tools to patch a breach before it''s too
    late by understanding how it happened, since you can see exactly what goes in
    and out a smart contract. They also provide a nice dashboard that you can freely
    use for quick projects. It''s a very powerful tool for advanced users. Learn more
    about it at: [chainlyt.io](https://www.chainlyt.io/landing).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using security testing utilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Testing your smart contracts is absolutely essential if you are thinking about
    deploying them to the Mainnet and don''t want to face important issues right from
    the start. It''s unavoidable and you should be doing it as you develop. Take a
    look at these testing tools to set up a nice testing environment that feels comfortable
    to use for your everyday needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Oyente:** This is a very famous tool for analyzing your smart contracts with
    ease. They provide you with an online IDE based on Remix with several advanced
    features such as timeouts, depth limits, custom bytecodes, and many more improvements
    to help you analyze your smart contract for improving their security exponentially.
    It''s highly recommended because of its potential. Learn more about it here: [oyente.melonport.com](http://oyente.melonport.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MythX:** This is a fantastic tool that shows you EVM bytecode issues that
    must be patched right before deployment in a clear format. These are low-level
    calls showing you potential security holes. You can analyze them with ease and
    you even have plugins already made for Truffle and several development tools such
    as Visual Studio Code. Their main selling point is the ease that they provide
    to the whole security setup so that you can set it and forget it with your most
    used tools. Learn more about Mythx at: [mythx.io](http://mythx.io).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Solgraph:** These are generated visual graphs with clear descriptions of
    how your smart contract is flowing. For instance, if you want to see what happens
    when you call the `transferFunds()` function, you can call Solgraph and you''ll
    receive an extremely intuitive description of the steps your contract took to
    complete your call. It''s very efficient for developers that want to understand
    complex contract flows. Learn more about it on their GitHub page: [github.com/raineorshine/solgraph](http://github.com/raineorshine/solgraph).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding auditing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Auditing is the process of manually going through all the different sections
    of your code in order to find potential vulnerabilities using processes such as
    line-by-line analysis, vulnerability testing, and hacking paths. You must be familiar
    with them to guarantee a sustainable, high-quality code project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that their goal is to speed up your auditing process, so they are more
    like complementary tools to a well-thought-out process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**EthSum**: This is a simple and straightforward tool made by Netlify that
    allows you to checksum an Ethereum address. Sometimes, you need to checksum an
    address to guarantee that it''s a well-formed address that has been created properly.
    It''s mostly used in Truffle projects where you have to have valid addresses for
    your projects, so EthSum is a nice complementary to verifying addresses. You can
    get it at: [ethsum.netlify.com](http://ethsum.netlify.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decode:** This is a tool that makes transaction data easy to understand for
    your testrpc nodes. When you audit a project, you must run several tests and manual
    checks to verify the integrity of the results, and most of the time it''s hard
    to do this with testrpc or similar testing environments because the resulting
    data is confusing. Decode solves that by making transactions easy to read and
    understand. Learn more about it at: [github.com/dteiml/decode](http://github.com/dteiml/decode).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EthToolBox**: This is a web application with lots of different utilities
    to help you solve common tasks without having to go back and forth between different
    environments. With a green interface, you can do almost any check that you''ll
    ever need without having to exit your browser. It does things like ECRecovers,
    key generation, EVM word conversion, hexadecimal parsing, and so on. You''ll love
    it when you have to audit any kind of smart contract because of how quickly you
    can analyze any sort of output. Use it from your browser here: [eth-toolbox.com](http://eth-toolbox.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auditing tools will save you countless hours in confusing errors, bugs, and
    vulnerabilities. They will become one of your most used set of tools, combined
    with your already awesome development workflow, so that you can create much better
    applications as soon as you integrate them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting important open source libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to creating new smart contract applications, you must use all
    the resources that you have available for creating them in the most time- or cost-efficient
    manner. Your goal should always be to use and create high quality code. So, why
    not use some of the most used, tested, and secure libraries for your next project?
    They have been used hundreds of thousands of times and are still going strong
    because of their quality. Let's take a look at those powerful open source libraries
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: ZeppelinOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zeppelin has been in the Ethereum game for a long time. They built some of
    the most useful smart contracts, such as SafeMath for preventing overflowing issues,
    and have a GitHub full of secure contracts that you can almost plug-and-play.
    Their smart contracts are distributed in many folders. To make sense of all that
    condensed information, we''ll go through each of those folders to save you hours
    of confusion and to help you understand the potential of these contracts. You
    can access them in the official GitHub repository at: [https://github.com/openzeppelin/openzeppelin-solidity](https://github.com/OpenZeppelin/openzeppelin-solidity),
    which looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/efef4849-c1dc-450a-99d6-d1ac85705eea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To understand all those files and why are they important, we''ll explain each
    folder so that you can get a quick overview of what you will find inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '`access`: In this folder, you''ll find role managing contracts that provide
    you with utilities to give powers to specific Ethereum users so that you can create
    applications where different roles can be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crowdsale`: This folder contains some of the most interesting ICO smart contracts
    with a huge variety of implementations, including pausable, refundable, mintable,
    and whitelisted crowdsales. If you just started learning about ICOs, this folder
    is a must to understand how an ICO must be structured properly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cryptography`: This folder contains two smart contracts for Merkle-proof verifications
    and **Elliptic Curve Signature** (**ECDSA**) operations. These are advanced utilities
    for projects heavy on encryption where you need to use signed messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drafts`: These are work-in-progress smart contracts that will later be included
    in future releases once they have been polished and fully tested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`examples`: This provides some quick token and ICO example contracts that implement
    all the necessary logic into single files so that you can see the complete system
    working intuitively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`introspection`: These are ERC165 contracts that are used to detect which interfaces
    are used in external contracts. For instance, you could use it to detect if an
    ERC20 token is supported in your specific smart contract.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lifecycle`: This folder contains a pausable smart contract implementation
    that you can use for any kind of contract that you wish to stop at any given point
    for increased security measures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`math`: Probably the most popular folder, it contains the famous SafeMath library
    and a Math smart contract with utilities to make secure mathematical computations
    within smart contracts that are inherently insecure because of the way variables
    work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mocks`: This folder contains lots of mock contracts that implement a tiny
    fraction of the entire contract''s functionality to help you understand the key
    aspects of each type of contract. I suggest you start here to understand what
    makes a contract different from another, such as for ERC implementations. They
    implement events that you can use to analyze the input/output of those functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ownership`: It contains two contracts for restricting function access with
    owner limitations, where certain functions have to be restricted to the owner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`payment`: Powerful payment utilities for group payments, delayed payments,
    and escrow contracts that you can implement with ease. This is very cool for projects
    that rely on constant payments, such as banks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token`: This folder contains the ERC20 and ERC721 implementations with many
    interfaces that you can use for smaller or improved versions of these tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`utils`: This folder includes smart contract utilities such as reentrancy protection
    and array management for those that need quick fixes for complex problems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can install all of their contracts with just a line of code for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'That will put the contracts into a nice package that you can reference with
    the full contract path like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In general, Zeppelin has done a fantastic job when it comes to giving back to
    the community with such valuable, high-quality code that many of us use daily.
    Show them your appreciation by using their contracts in your next project if you
    believe they deserve to be rewarded for their actions.
  prefs: []
  type: TYPE_NORMAL
- en: Using the 0xprotocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The 0xprotocol (pronounced zero x protocol) is a popular set of APIs, smart
    contracts, and tools for building decentralized exchanges that are interconnected.
    You see, many exchanges work so independently that they lose many of the good
    things a shared system can provide. 0x works on creating a protocol that exchanges
    can use so that they have a shared pool of liquidity, users, and interfaces, known
    as relays. Let's take a look at the main things you can build with this protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Building a relayer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A relayer is a dApp that uses a common set of utilities for sharing trades with
    other relayers. They provide users with many options when it comes to choosing
    the best exchange for a particular set of features since they all share certain
    actions to help the entire ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: They use a library called `0x.js`, which allows you to interact with relayers
    with a high-level, clean interface that feels great to use.
  prefs: []
  type: TYPE_NORMAL
- en: Becoming market makers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Market makers provide exchanges with individual trades that external users can
    take for a dynamic price. They are the ones that keep exchanges alive by profiting
    the most from their position of power since they have more control over which
    trades are effective at any given moment.
  prefs: []
  type: TYPE_NORMAL
- en: With 0x, you can simply become a market maker and provide decentralized exchanges
    with liquidity so that they operate in a high trading network of tokens.
  prefs: []
  type: TYPE_NORMAL
- en: The 0x protocol has so much more to it that you'll have to explore it by yourself.
    It's one of the most interesting projects that was made in recent years, and its
    token price is a clear reflection of that. Start learning more about it to join
    the exchange revolution if you are interested in **decentralized exchanges** (**DAXs**).
  prefs: []
  type: TYPE_NORMAL
- en: Aragon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aragon is the go-to solution for creating **decentralized autonomous organizations**
    (**DAOs**) that operate within a perfect system without intermediaries. They provide
    you with tools for managing companies from your computer. We'll explore these
    so that you can appreciate the full potential of their functionality and create
    your own company operating on top of the Ethereum blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: AragonPM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a tool to distribute different versions of their own packages for their
    Aragon client so that DAOs can use a fixed set of improvements without having
    to constantly update their software needs with new versions that may break their
    existing structure.
  prefs: []
  type: TYPE_NORMAL
- en: AragonOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a smart contract framework that's used to build decentralized organizations
    with all sorts of utilities, such as control restrictions, upgradable contracts,
    and plugins that you can add as you need them. It's a fantastic set of smart contracts
    for advanced DAOs that want to go further with powerful company dynamics on the
    blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: AragonJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the JavaScript implementation of their Aragon system. It allows you
    to create dApps that work with decentralized organizations with a nice API that
    you can learn about in a few hours. It's great for building custom interfaces
    that interact with your company as you need them to.
  prefs: []
  type: TYPE_NORMAL
- en: AragonUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a set of UI components that you can implement on your JavaScript applications
    for creating beautiful interfaces with the exact look that you wish to create.
    You won't have to worry about designing everything from scratch, since you can
    just plug these interface elements into the right places and you'll have a custom
    DAO implementation for your project.
  prefs: []
  type: TYPE_NORMAL
- en: AragonCLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **command-line interface** (**CLI**) for creating and interacting with all
    sorts of Aragon applications that work with decentralized organizations. This
    CLI is intuitive and simple to use when starting many different DAO projects.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you've gone through many tools that you can use for creating
    advanced smart contract applications. You started with a guide of the most useful
    developer tools that you can use in your daily work of smart contract development,
    including IDEs, development frameworks, and testnets. Then, you continued your
    learning journey by taking a look at the Ethereum communication tools that help
    you integrate smart contracts with web applications in an efficient way. After
    that, you learned more about Ethereum infrastructure utilities that live on the
    lower levels of the blockchain where they have better access to the different
    aspects of the Ethereum blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you went through a crash course on security by learning how important
    it is to implement auditing tools, monitoring utilities, and testing applications
    that can provide you with a great overview of how secure your code is. Finally,
    you ended this learning path by reading more about the most popular open source
    libraries available to you that can help you create a wide variety of unique applications
    with secure and popular code that's used by thousands of blockchain companies
    all around the world.
  prefs: []
  type: TYPE_NORMAL
- en: All of this information has the potential to do many dangerous things in the
    hands of the right person, so become a great master Ethereum developer and use
    your new-found knowledge for improving the entire ecosystem instead of taking
    advantage of what's out there without providing value.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to explore various dApp improvements that
    you can implement right away to increase the performance of your Truffle and React
    projects with never-before-seen techniques that can really deliver the best performance
    for this type of dApp.
  prefs: []
  type: TYPE_NORMAL
