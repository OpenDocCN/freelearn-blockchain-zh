- en: Business Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduces and explores a new concept—**a business network.** By
    understanding what business networks are and how they function, you'll be able
    to understand how blockchain technology can radically improve them. A blockchain,
    and in particular a Hyperledger Fabric blockchain, provides significant benefits
    for business networks because it radically simplifies the information and processes
    that knit businesses together, both reducing cost and creating new opportunities
    for the businesses within the network.
  prefs: []
  type: TYPE_NORMAL
- en: We'll see how the concept of a business network allows you to analyze a business
    by looking at the counterparties with which it interacts. And although business
    networks are industry specific, a single network can be used to support multiple
    use cases, and linked to other business networks to form networks of networks.
  prefs: []
  type: TYPE_NORMAL
- en: We'll spend some time introducing the vocabulary of business network, introducing
    key terms such as **participants**, **assets**, **transactions** and **events.**
    These elements are then combined to define the behaviour of the business problem
    being analyzed. We're able to use business requirement to create a technology
    blueprint that can be used to implement the solution. By the end of this chapter,
    you'll be ready to use Hyperledger Fabric and Hyperledger Composer to implement
    these ideas, which you will do in the following chapter.
  prefs: []
  type: TYPE_NORMAL
- en: While the idea of a business network is necessary to understand before you implement
    a blockchain network, you'll find it a helpful concept for wider issues such as
    performing blockchain analytics, integrating with existing systems, and how to
    structure your application and enterprise architectures. In this sense, this chapter
    can be read stand-alone without implementing a network afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A language for business networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The concept of a business network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining business networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing participants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a business network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A busy world of purposeful activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine for a moment that we're flying in a plane over a large city. We can
    see factories, banks, schools, hospitals, retail stores, car showrooms, ships
    and boats at the port, and so on. These are the structures that define the city.
  prefs: []
  type: TYPE_NORMAL
- en: If we look carefully, we'll see things happening within and between these structures.
    Lorries might be delivering iron ore to the factory, customers might be withdrawing
    money from banks, students might be sitting exams—it's a busy world down there!
  prefs: []
  type: TYPE_NORMAL
- en: And, if we could look a little closer, we would see that all these people and
    organizations are involved in meaningful activity with each other. Students receiving
    assessments from their teachers that will subsequently help them get into college.
    Banks giving loans to clients who can then move home. Factories making components
    from raw materials, which are assembled into complex objects by their customers.
    People buying used cars from dealerships that they use to get them to work every
    day, or go on vacation!
  prefs: []
  type: TYPE_NORMAL
- en: We might marvel at the diversity of all these structures and the processes between
    them. We might even wonder how it all manages to work together so effortlessly!
  prefs: []
  type: TYPE_NORMAL
- en: We might then reflect upon all these diverse activities, and wonder whether
    they all have something in common? Are there repeatable patterns that allow us
    to make sense of all this complexity? Is there a resolution at which all this
    activity looks the same? Are all these people and organizations, in some sense,
    doing the same thing?
  prefs: []
  type: TYPE_NORMAL
- en: The answer, of course, is yes! The following section gives us a better explanation.
  prefs: []
  type: TYPE_NORMAL
- en: Why a language for business networks?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A business network is a way of thinking that allows us to look at all these
    activities and describe it in a very simple language. And, because we're trying
    to formulate the world in a language that makes sense to a blockchain, and since
    blockchain is a simple technology, we expect the vocabulary of that language to
    be simple. In the next section, you'll see that it is!
  prefs: []
  type: TYPE_NORMAL
- en: But before we dive in, let's ask ourselves *why* we want to create a language
    that a blockchain can understand? Well, if we can, then we can bring all the benefits
    of the blockchain to the world described by that language. And, we can summarize
    these benefits neatly—increased trust.
  prefs: []
  type: TYPE_NORMAL
- en: Increased trust means that the student can show their high school certificates
    to their college, who can be confident about the veracity of the qualifications.
    It means that the bank can provide a loan to its customer at the lowest rates
    because it can be confident about the financial well-being of its client. It means
    that the component manufacturer can charge a higher price for their output because
    their customers in turn can be sure of the quality of the raw materials, knowing
    their provenance. And finally, the the buyer of the used car can be confident
    about their purchase because they can prove that it previously only had one, careful,
    owner!
  prefs: []
  type: TYPE_NORMAL
- en: Defining business networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can summarize all these idea using the concept of a business network:'
  prefs: []
  type: TYPE_NORMAL
- en: A business network is a collection of participants and assets than undergo a
    life cycle described by transactions. Events occur when transactions complete.
  prefs: []
  type: TYPE_NORMAL
- en: You may wonder what this means. After all that build-up, we're telling you that
    a couple of apparently simple sentences describe all this complexity?
  prefs: []
  type: TYPE_NORMAL
- en: The simple answer is yes—and we'll soon explain by describing in more detail
    what we mean by **participants**, **assets**, **transactions**, and **events**.
    Then, you'll see that all this rich behavior can be described by a relatively
    simple language vocabulary.
  prefs: []
  type: TYPE_NORMAL
- en: A deeper idea
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In fact, there is a deeper idea behind business networks—that the language and
    vocabulary of technology should closely match that of the business domain, removing
    the need for significant translation between business concepts, and technology
    concepts. Business networks move away from the idea of disconnected technology
    by describing the underlying technology in the same language as the business.
    It makes it easier to reason about the world and more accurately translate ideas
    into a fully operational system.
  prefs: []
  type: TYPE_NORMAL
- en: Practically speaking, it means that while our initial vocabulary for business
    networks is simple, it is the beginning of a language that can become very rich
    in structure over time, so long as it describes the details and nuances of what
    happens in the real world. We'll come back to this idea later, but for now let's
    start by understanding participants.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing participants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: William Shakespeare said that the world is a stage on which men and women are
    the actors. In a similar way, a business network has a cast—a set of actors who
    are interacting with each other for some form of mutual benefit. We call these
    actors the participants in a business network. For example, the participants in
    an education network might be students, teachers, schools, colleges, examiners,
    or government inspectors. The participants in an insurance network might be policyholders,
    brokers, underwriters, insurers, insurance syndicates, regulators, or banks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea of a participant is crucial to understanding business networks. You
    might find the term a little daunting at first, but there''s really nothing to
    worry about. The key to understanding is in the name— participants *take* *part*
    in a business network. It''s their actions that we are interested in. Different
    forms of the word are used to emphasize different aspects of their interactions:
    participant, party, and counter-party, for example. All these forms have their
    roots in the idea of action. As usual, we find that the bard knew a thing or two
    about how the world works!'
  prefs: []
  type: TYPE_NORMAL
- en: Learn to love this word, because it's a door-opener! It's shorthand that you
    understand the founding principle of business—that who you do business with is
    of paramount importance. It's more important than this though; identifying the
    participants in a business network is the first thing that you do when determining
    whether there's an opportunity to benefit from the use of a blockchain. You need
    to understand the cast before you can really understand what's going on. And,
    as you learn more about the interactions between the participants, you'll be able
    to improve your understanding of what it means to be a particular participant.
  prefs: []
  type: TYPE_NORMAL
- en: Types of participant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different *types* of participants in a business network, and we group
    them into three broad categories. Surprisingly, we're not going to describe the
    most important category first!
  prefs: []
  type: TYPE_NORMAL
- en: Individual participants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully, this category is a fairly obvious one—the teacher, student or bank
    customer are all examples of individual participants. Whether you call them individuals,
    people, or even humans, this first category is what we would intuitively think
    of as a participant because we associate them with ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: You might think that individuals are the most important participants in a network.
    After all, businesses exist to serve individuals, don't they? Well, yes they do,
    but it's a little more subtle than that. While a business network usually exists
    to serve the needs of individual end-consumers, blockchain is a technology that
    is more valuable for the businesses in the network. That's because it allows them
    to better coordinate their activities with each other, resulting in lower costs,
    and the opportunity for new goods and services for end-consumers. That's why you'll
    hear people utter sentences such as Blockchain is more important for B2B than
    B2C, or C2C—they're trying to communicate that the big win for business networks
    is to use blockchain as a pervasive fabric for efficient and creative business-to-business
    interactions.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, individual participants are important. Businesses need to know their
    end-consumers, and often end-consumers are interacting with each other using the
    services provided by the business network. For example, if I wish to transfer
    money to you via a banking network, our respective banks need to know who we both
    are, so that the transaction can be properly validated and routed.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it's a fair rule of thumb that there are more individuals known to
    a business network than there are businesses in the network. Nothing too surprising
    here—it's just worth pointing this out so that your understanding of what it means
    to be an individual participant is complete!
  prefs: []
  type: TYPE_NORMAL
- en: Organizational participants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Organizational participants are the most important actors in a business network.
    The car dealership, the bank, the school, and the insurance company are all examples
    of organizational participants. When we first think about a particular business
    network, we identify these participants, followed by the goods and services they
    provide to each other and end-consumers. These organizational participants provide
    the infrastructure for the business network—the people, processes, and technology
    that make it work.
  prefs: []
  type: TYPE_NORMAL
- en: While organizations are made up of individuals, they are conceptually quite
    separate to them. An organization has its own identity, and its own purpose. It
    exists in a very real sense, independently to the individuals which belong to
    it. Organizations provide business networks with a sense of permanence. While
    individuals within an organization may change over time, and the number of individuals
    within the organization may grow or shrink, and even different roles within the
    organization may come and go, the organization remains constant; it is a structure
    with a much longer lifetime than any individual's membership of it.
  prefs: []
  type: TYPE_NORMAL
- en: The final point to note about the nature of the relationship between individuals
    and their organization is that it is individuals who perform the functions of
    the organization, as defined by the individual's organizational role. When a bank
    makes a loan to a customer, it is performed by a bank employee on behalf of the
    bank. In this way, the individuals are the agents of the organization, and an
    individual's role determines the set of tasks it can perform. For example, a school
    teacher can set a homework assignment for a student, but it requires a school
    principal to hire a new teacher. In a nutshell, individuals act on behalf of the
    organization, and with the authority of that organization.
  prefs: []
  type: TYPE_NORMAL
- en: System or device participants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: System or device participants represent the technology components in the business
    network. They are really a special kind of individual participant, and if you
    find it helpful, you can just think of them that way. There are however, two reasons
    why we call them out separately.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, there are a lot of technology components in today's business networks!
    For example, there are ERP systems, payment engines, reservation systems, transaction
    processors, and much, much more. In fact, most of the heavy-lifting inside today's
    business networks is done by these systems. These systems are associated with
    organizations that own them, and just like the individuals we discussed earlier,
    these systems act on behalf of their owning organizations—they too are its agents.
  prefs: []
  type: TYPE_NORMAL
- en: The incorporation of a blockchain into a business network is going to add more
    system participants with whom the other participants (individual, organizational,
    and system/device) can interact. It's important to be aware of these blockchain
    system participants because they are going to provide very useful services to
    the business network!
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, devices are becoming a more important part of the business world.
    And, while many devices today are relatively simple, there's no doubt that devices
    are acquiring more characteristics of being autonomous. We've all heard of the
    expected emergence of self-driving vehicles, and it's in this spirit that we introduce
    the concept of **device participants**. It may be increasingly important to think
    of these devices playing a larger role in business networks. So, while we don't
    expect cars to become intelligent anytime soon (whatever that might mean!), it's
    helpful to call out these increasingly autonomous devices as active rather than
    passive entities in a network.
  prefs: []
  type: TYPE_NORMAL
- en: Participants are agents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our examination of participant types shows us that they all have one thing in
    common—they have a significant degrees of agency—they actively do things. Although
    systems and devices have a level of autonomy that is limited by their programming
    and algorithms, it is nonetheless helpful to think of them this way. And, the
    interactions between these relatively autonomous actors serves as a prompt to
    the next concept in a business network, namely **assets**. We'll see later that
    the entities that move between participants—assets—have none of this autonomy.
    These are subject to the forces placed upon them by participants. More on this
    later.
  prefs: []
  type: TYPE_NORMAL
- en: Participants and identity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, and very importantly, participants have **identity**. For example,
    a student has a student ID, a driver has a driving license, and a citizen has
    a social security number. It's obvious that there is a difference between a participant
    and what's used to identify a participant. And, it's really important to hold
    these two concepts as closely related, but separate to each other.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a participant might have different identities to participate in
    different business networks—it might be the *same* bank which participates in
    an insurance network, and a mortgage network, but it will have different identities
    in these two networks. Moreover, even within a single network, a participant might
    have their current identity compromised, allowing them to be impersonated. In
    this case, their compromised identity will be revoked and a replacement issued
    for use by the true participant, denying the impersonator, allowing trust to be
    restored. Different identities, but the same participant—that's the take-away
    message.
  prefs: []
  type: TYPE_NORMAL
- en: It's because of this concern over impersonation that certain identities are
    deliberately expired periodically. For example, X.509 digital certificates have
    an expiry date, after which they are no longer valid. However, just because the
    certificate has expired, it cannot be assumed that the participant is no longer
    present.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, it's quite the opposite. The relative permanence of a participant compared
    to its identity means that it can be used to provide a long-term historical reference
    of who does what in a business network. The consistency of identity provided by
    a participant over time helps us reason about the history of interactions in a
    business network. We could do this without the concept of a participant—just using
    identities, and keeping a clear head about how and when they changed in relation
    to each other, but it would be less intuitive.
  prefs: []
  type: TYPE_NORMAL
- en: That's just about it on the topic of participants; you're now an expert! As
    you can tell, participants are probably the most important thing about a business
    network, which is why we spent quite a bit of time discussing them. Let's now
    turn our attention to the objects that move between participants, namely assets.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how a business network is defined by the participants who operate
    within it. These participants are the active agents who perform meaningful interactions
    within the network, and its their transactions which are of paramount importance.
    We now ask ourselves the question, *What flows between participants?* To which
    the simple answer is assets.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand what we mean by an asset, let''s look at some examples. We notice
    that a student receives coursework from their tutor. That same student may subsequently
    show their educational certificate to a university. A car dealer sells a car to
    a buyer. An insurance company insures that same car for a policyholder, issuing
    a policy. A policyholder makes a claim. These examples all contains assets: coursework,
    education certificate, car, policy, and claim.'
  prefs: []
  type: TYPE_NORMAL
- en: Assets flow between participants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can see that assets are the objects that flow between participants. Whereas
    participants have a significant degree of autonomy, assets are quite passive.
    This property of assets is foundational—assets tend to have the most meaning to
    the counter-parties who exchange them. That's not to say that other participants
    aren't interested in these assets, but it does emphasize the passive nature of
    assets. So what makes assets so important? Why are we bothering to talk about
    these passive objects?
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer lies in our choice of word—asset. An asset is a thing of *value*.
    Even though assets are relatively passive, they represent the value that is exchanged
    between participants. Look at these example assets again with this value-based
    lens: coursework, education certificate, car, policy, and claim. Coursework is
    valuable to the teacher and student; an education certificate is valuable to the
    student and university; a car is valuable to the dealership and buyer; a policy
    is valuable to the insurance company and policy holder; a claim is valuable to
    the claimant and insurance company. Hopefully, it''s now clear why assets are
    important, and why they are called assets!'
  prefs: []
  type: TYPE_NORMAL
- en: As a minor note, don't think that because we have assets, we must have liabilities—we're
    not quite using the term this way. It's absolutely true that if we were to measure
    objects as counting for us, or counting against us, we would term them assets
    or liabilities, but that's not quite what's happening here—we're using asset as
    a concrete noun, rather than as a quality or abstract noun.
  prefs: []
  type: TYPE_NORMAL
- en: Tangible and intangible assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's continue our understanding of assets by considering tangible and intangible
    assets. Tangible assets are things we can touch and feel—cars, paper money, or
    coursework. Intangible assets are things such as mortgages, intellectual property
    rights, insurance policies, and music files. In an increasingly digital world,
    we're going to see a lot more intangible assets. You'll hear people say that objects
    are becoming *de-materialized*, and the idea of an intangible assets nicely captures
    this concept.
  prefs: []
  type: TYPE_NORMAL
- en: A couple of small points should be noted to avoid confusion on our usage of
    the word intangible. Firstly, as we're dealing with a digital ledger, in some
    trivial sense, everything on a blockchain is intangible. What's interesting is
    the nature of the object itself—using the word intangible helps you to remember
    to look out for things that you cannot see in the physical world.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, the use of intangible is not intended as a statement of value. Often,
    in accounting systems, we use this term when we have trouble defining something,
    such as goodwill. Again, we're not using the word in this sense; our intangible
    assets have a more concrete, definite, and exchangeable form than this, because
    they are things of value, even if you cannot touch them.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now re-focus to look at the structure of assets. An asset has a set of
    attributes called **properties** and a set of attributes called **relationships**.
    Property attributes are easy to understand—they are the characteristics of an
    object. For example, a car has a date of manufacture, a color, and an engine size.
    Or, a mortgage has a value, lifetime, and repayment schedule. A particular asset
    is identified by a particular set of property **values**. For example, my car
    might be manufactured in 2015, be white in color and have a 1.8-litre engine.
    Another example—your mortgage might be worth 100,000 USD, have a lifetime of 25
    years, and be payable monthly. It's important to distinguish this difference—between
    the structure of an asset *in general,* its **type,** and *particular* **instance**
    of an asset.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, an asset also has a set of attributes called **relationships**. A
    relationship is a special kind of property—it's a reference to another asset!
    You can see instantly why this is important. For example, a car has an insurance
    document. The car is an object of value, and the insurance document is an object
    of value. Moreover, an insurance document names a policy holder. In our examples,
    both the subject and the object are assets, and they relate to each other in a
    way that provides essential meaning.
  prefs: []
  type: TYPE_NORMAL
- en: We'll see later that describing or **modeling** these relationships is an extremely
    important activity, because we're describing how the world works. In the previous
    example, we made a deliberate mistake—yes, really! That's because in the real
    world, it's actually the policy document that is central, as it names the car
    and the policy holder. In modeling, we call this an associative relationship,
    and we'll see why it's really important to get this kind of thing right. For example,
    nowhere in the nature of a car will you find an insurance document—a car is insured
    by virtue of the fact that it is named in a valid policy document. Moreover, if
    I want to insure more people to drive the car, I add their name to the policy
    document, not to the car! Much more on this later—for now, it's enough to remember
    that assets have properties and references, and particular objects have concrete
    values for these attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s also worth a brief mention on the nature of what makes an asset attribute
    a property rather than a reference to another asset. A simple answer is: when
    properties get too *big*, break them out into an asset reference! Of course, that''s
    a very unsatisfactory answer! Why? Because I didn''t tell you what defines big!
    A better answer is that a reference is required when a property satisfies a separate
    concern. This principle—**separation of concerns**—is a key design principle in
    any system. For example, the policy validity date is not a separate concern for
    an insurance policy, but the car and named drivers are separate concerns. This
    principle helps us to reason about insurance policies, cars, and drivers independently
    of each other, which in turn allows us to model the real world more realistically.
    Finally, on this aspect of assets, property and relationship attributes are **domain-specific**—they
    relate to the nature of the problem at hand. So, for a car manufacturer, color
    might be an attribute of a car—but for a paint manufacturer color is most definitely
    an asset type!'
  prefs: []
  type: TYPE_NORMAL
- en: Ownership is a special relationship
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's one particular kind of relationship that's particularly important in
    a business network, and that's the concept of **ownership**. Ownership is an associative
    relationship such as the insurance policy document we discussed earlier. Let's
    think about a specific example—a person owns a car. Is the owner an attribute
    of the car? Is the car an attribute of the person? After a little thinking, we
    might realize that neither statement captures what it means to *own* something.
    Ownership is a mapping between the person and the car. Ownership is a concept
    that's quite separate to the car and its owner.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to understand this way of thinking about ownership, because in
    many cases we model the ownership relationship via the car, or via the owner,
    and that's sufficient for many purposes. But, the *nature* of an ownership relationship
    is an associative one, and it's important to realize this—because blockchains
    are often used to record ownership and transfer of ownership in a business network.
    For example, governments often hold ownership records—for land or vehicles. In
    these cases, the primary assets under consideration are ownership relationships.
    When a vehicle or land is transferred between participants, it's this ownership
    record that changes rather than the assets. That's important because we're often
    interested in the the history of a vehicle or piece of land, and while the vehicle
    or land itself may not change, it's ownership most definitely does. It's important,
    therefore, to be clear whether we're talking about the history of the asset, or
    the history of ownership. These kinds of history are often called **provenance**—they
    tell us who has owned an asset, and how it has changed over time. Both aspects
    are important because knowing the provenance of an asset increases our confidence
    in it.
  prefs: []
  type: TYPE_NORMAL
- en: Asset life cycles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This idea of provenance leads us very naturally to the concept of an **asset
    life cycle**. If we consider the history of an asset, then in some very meaningful
    sense, an asset is created, changed over time, and eventually ceases to exist.
    For example, consider a mortgage. It comes into existence when a bank agrees to
    lend a sum of money to a customer. It remains in existence for the term of the
    mortgage. As the interest rate changes, it determines the monthly repayment amount
    according to a fixed or a variable rate of interest. The term of the mortgage
    may be changed with the agreement of both the bank and the mortgage holder. Finally,
    at the end of the mortgage, it ceases to exist, although a historic record of
    it may be kept. The mortgage may be terminated early if the customer wishes to
    pay it off early (maybe they move home), or less fortunately if they default on
    the loan. In some sense, we see that the mortgage was created, the term was periodically
    changed, and then the mortgage was completed either normally or unexpectedly.
    This concept of a life cycle is incredibly important in a business network, and
    we'll discuss it in detail later, when we discuss **transactions**.
  prefs: []
  type: TYPE_NORMAL
- en: Returning to assets, we can see that during their life cycle, assets can also
    be **transformed**. This is a very important idea, and we consider two aspects
    of asset transformation—namely whether the the transformation involves **division**
    or **aggregation**, and whether it is a **homogeneous** or **heterogeneous** transformation.
    These terms sound a little intimidating, but they are very simple to understand,
    and best described using an example of each.
  prefs: []
  type: TYPE_NORMAL
- en: In the first example, we consider a precious gemstone that has been mined. In
    general, a mined gemstone is too large for any jeweler to use in a single piece
    of jewellery. It must be broken into smaller stones, each of which may be used
    for single item of jewellery. If we were to look at the history of a large, mined
    gemstone, we would see that it underwent a process of division. The initial asset
    was a gemstone, and it was transformed into a set of smaller gemstones, each of
    which was related to the original gemstone. We can see that the asset transformation
    is homogeneous, because although the smaller gemstones are most definitely different
    assets, they are the **same type** as the original asset. A similar process of
    homogeneous transformation often occurs with intangible assets, for example, when
    a large commercial loan or insurance request is syndicated among several companies
    to diversify risk, or when a stock is split.
  prefs: []
  type: TYPE_NORMAL
- en: In our next example, we consider the jeweler using a smaller gemstone. We imagine
    they use the gemstone to create a fine ring for a customer. To make the ring,
    they use all their skills to set the gemstone in a mounting on a bezel connected
    to a hoop via a shoulder. A jeweler's craft is to be admired—they transform a
    small block of silver and a gemstone into a valuable piece of jewellery. Let us
    consider for a moment the assets under consideration. We can see that the metal
    block and gemstone have been combined, or **aggregated**, to form the ring. We
    also note that the ring is a different asset to the gemstone or silver block,
    which served as inputs. We can see that these inputs have undergone a **heterogeneous
    transformation** because the output asset is of a different type.
  prefs: []
  type: TYPE_NORMAL
- en: These processes of aggregation and division are seen in many asset life cycles.
    It's very popular in manufacturing life cycles, but with intangible assets. For
    example, we see it in **mergers**, where companies can be combined together, or
    **acquisitions**, where one company ceases to exist by being incorporated into
    another company. The reverse processes of **de-merger** or **spin-off** is neatly
    described as asset division.
  prefs: []
  type: TYPE_NORMAL
- en: Describing asset's life cycles in detail with transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's consider *how* assets move through their life cycle. We have learned that
    assets are created, transformed, and eventually cease to exist. Although life
    cycle is a very useful concept, these steps seems somewhat limited. Surely there
    are richer descriptions for the set of steps an asset goes through in its life
    cycle? The answer is yes! **Transactions** define a rich, domain-specific vocabulary
    for describing how assets evolve over time. For example, an insurance policy is
    requested, refined, signed, delivered, claimed-against, paid-out against, invalidated,
    or renewed. Each step of this life cycle is a transaction—we're going to talk
    a lot more about transactions in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, as with assets, participants can go through a life cycle, described
    by transactions. So, you might wonder, what is the difference between assets and
    participants? Well, it really comes down to thinking about form versus function.
    Just because assets can have a life cycle described by transactions, and likewise
    participants, does not make them the same thing. In the same way that birds, insects,
    and bats can fly, they are definitely not related. In a general sense, we think
    of participants and assets as as resources—they are related only in the most general
    sense.
  prefs: []
  type: TYPE_NORMAL
- en: That ends our discussion on assets! As we saw towards the end of the topic,
    **transactions** are of paramount importance in describing the asset and participant
    life cycles, so let's now turn to this subject!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our journey so far has involved understanding the fundamental nature of a business
    network—that it is comprised of participants involved in the meaningful exchange
    of assets. Let's now focus on the most important concept in business networks—exchange.
  prefs: []
  type: TYPE_NORMAL
- en: Change as a fundamental concept
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why is exchange the most important idea? Well, without it, participants and
    assets have no purpose!
  prefs: []
  type: TYPE_NORMAL
- en: This seems like an excessively hyperbolic statement! However, if you think about
    it for a moment, participants only meaningfully exist in the sense that they exchange
    goods and services (collectively known as assets) with each other. If a participant
    does not exchange with another participant, they don't exist in any meaningful
    way. It's the same with assets—if they aren't exchanged between participants,
    then they don't exist in any meaningful way either. There's no point in an asset
    having a life cycle if it doesn't move between different participants, because
    the asset is private to a participant and serves no purpose in the business network
    outside the participant's private context.
  prefs: []
  type: TYPE_NORMAL
- en: '**Change**, therefore, is the fundamental principle in business networks. When
    we think about exchange, transfers, commerce, buying, selling, agreement, and
    contracts, all of these motivational ideas are concerned with the business and
    the effects of change. Change gives the world of business motion and direction.
    The way we capture change is via a transaction. That''s why transaction is the
    most important concept in a business network—it defines and records change—change
    of asset; change of asset ownership; change of participants. Whenever anything
    changes in a business network, there''s a transaction to account for it.'
  prefs: []
  type: TYPE_NORMAL
- en: Transaction definition and instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term transaction is often used in two closely related, but different ways,
    and it's important to be conscious of this difference. We sometimes use the term
    transaction to describe in general terms what happens in a transaction. For example,
    we might define that a property transaction involves a buyer paying an agreed
    amount to the owner of the property in exchange for possession of the property,
    and exchange of the deeds of title. (Almost always, the buyer also acquires the
    rights to subsequently sell the property.) In this sense, the term transaction
    is used to describe in general the process of exchange in the terms of the participants
    and assets involved.
  prefs: []
  type: TYPE_NORMAL
- en: The other sense in which the word transaction is used is as a description of
    a particular transaction. For example, we might say that on 10 May 2018, Daisy
    bought a bicycle from the Winchester bicycle shop for 300 GBP. We're using the
    term transaction here to describe a particular instance of a transaction. These
    two usages are very closely related, and the context almost always makes it clear
    which one we're talking about.
  prefs: []
  type: TYPE_NORMAL
- en: The fundamental difference between the two usages is that the former defines
    what it means to be a transaction, and the latter captures a particular instance
    of a transaction. In the real world, we see examples of transaction instances
    all the time—whenever we go into a shop to buy some goods, we are offered a receipt!
    In our previous example, Daisy probably got a receipt for her bicycle. The receipt
    might be made of paper, though nowadays it is often sent to our phone or email
    address. This receipt is a copy of the transaction—it's Daisy's personal record
    of what happened. The bicycle shop also keeps a copy of the transaction record
    themselves for their own accounting purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Implicit and explicit transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note that you don't often see an explicit transaction definition for a transaction
    like this; the definition is encoded in the people, processes, and technology
    that you interact with. For low-consequence transactions such as Daisy's, the
    transaction definition is implicit. Only if there's a dispute do we get to find
    out how the transaction is defined. For example, if Daisy's bicycle chain snaps
    after a couple of days, she might reasonably expect that the chain would be fixed
    free of charge, or the bicycle replaced, or she would get her money back. This
    is the point at which Daisy determines the true nature of her transaction with
    the Winchester bicycle shop.
  prefs: []
  type: TYPE_NORMAL
- en: It looks like this kind of implicit transaction definition only has downsides—but
    in fact that's not the case. Firstly, every country's laws have explicit notions
    of a fair transaction that would give Daisy reasonable expectations as she entered
    the transaction. In most countries this is called something such as a Sale of
    Goods Act, and it specifies the rights and responsibilities of all counter-parties
    involved in any commercial transaction. Secondly, the lack of an explicit contract
    simplifies the interaction between Daisy and the bicycle shop. Given that, in
    most cases, bicycles perform well for an extended period after purchase, a receipt
    is sufficient for most practical purposes. It would be both costly and timely
    to re-state what everyone knows to be true every time a simple purchase was made.
    This kind of simplification is an example of what people often call **reducing
    friction**.
  prefs: []
  type: TYPE_NORMAL
- en: For high-consequence transactions, or those with special conditions, the situation
    is very different—it is vital that the transaction definition is made explicit,
    in advance. If we look at Daisy's transaction again, we can see that if there
    was a dispute, there would have been other follow-up transactions—for example,
    the bicycle might have had its chain replaced, or in an extreme circumstance she
    might have got her money back. We can see that, in general, we would require several
    conditional transactions to describe a satisfactory interaction between participants
    for such a transaction. It means that if Daisy had been getting a mortgage, rather
    than a bicycle, it would have been necessary to specify several transactions and
    the conditions under which they could be executed. You've probably heard of a
    term for such a collection of transactions and conditions—a **contract**.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of contracts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For high value assets, it's important to have a contract. It defines a related
    set of transactions and conditions under which they occur. A contract normally
    centers around a particular asset type and involves a well-defined set of participant
    types. If you look at a real-world contract, it includes a combination of statements
    about instances and statements about definitions. At the top of the contract,
    all the assets and participants will be laid out with particular values—namely
    Daisy (the buyer), Winchester bicycles (the seller), 300 GBP (the price), 10 May
    2018 ( the date of purchase) and so on. It's only after all these type-to-instance
    mappings have been laid out, that the contract is then defined in terms of these
    types, transactions, and conditions under which they occur, without reference
    to the particular instance values. This is what makes contracts a little strange
    to read at first—but once you can see the structure in terms of participants,
    assets, and transactions, and their respective values, they are actually quite
    easy to understand, and all the more powerful for this structure.
  prefs: []
  type: TYPE_NORMAL
- en: Signatures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final thing we see in a contract is at the bottom of it—the signatures!
    In many ways, signatures are the most important part of a contract because they
    represent the fact that all counter-parties have agreed to the information contained
    within it. And of course, we see lots of signatures in the real world. Daisy's
    shop receipt normally has her signature on it—either physical or digital, via
    a private key. In simple transactions, the store's signature is actually implicit—they
    put a transaction code on a branded receipt, and keep a copy for their purposes—this
    satisfies the purposes of a signature.
  prefs: []
  type: TYPE_NORMAL
- en: However, for higher-consequence transactions, all counter-parties will be required
    to explicitly sign a contract. Even more pointedly, to ensure that every party
    is entering the contract with their *eyes open*, an independent third-party such
    as a solicitor, notary, or regulator, may be required to sign the contract to
    verify the willing, and free, participation of those counter-parties explicitly
    involved in the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Smart contracts for multi-party transaction processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's absolutely vital to understand these ideas. They are not particularly complicated,
    especially if you relate them to things you do every day! When it comes to understanding
    how a blockchain helps multiple counter-parties create and agree low-friction
    transactions related to high-value assets, we need to understand these terms,
    and their importance, both stand-alone and in relationship to each other.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when we look at a business network, we can see that it is full of multi-party
    transactions governed by contracts! It's why transactions are the most important
    concept in a business network; they define and capture the agreed exchanges of
    valuable assets between different counter-parties.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's use a term you've probably heard many times when it comes to blockchains—**smart
    contracts**. They are simply a digital manifestation of these ideas. Smart contracts
    are a digital form of a contract—meaning that they can be easily interpreted and
    executed by a computer system. In reality, all computer systems that implement
    high- or low-consequence transactions implement contracts. But, unlike blockchains,
    these systems do not have a technology with a built-in vocabulary that makes the
    translation of these ideas into a technology platform a straightforward exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Digital transaction processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned at the beginning of this chapter, that's the big idea of business
    networks implemented on blockchains. They make the translation from the real-world
    into a computer system as simple as possible. Hyperledger Fabric, in particular,
    makes all these ideas quite explicit, so that we can easily model and implement
    a business network. It keeps all the existing ideas intact, but implements them
    in a fundamentally **digital** manner—using computer processes, networks, and
    storage.
  prefs: []
  type: TYPE_NORMAL
- en: Transactions are at the center of a business network because they act on assets
    and participants. However, it's more than this. Even if we add more concepts to
    the business network, they must always be subject to transactions. Transactionality
    is the universal property that relates to all aspects of the business network.
    It's like the ability to fly that we mentioned earlier in the chapter—every object
    in the business network is subject to, and must be the subject of, transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Initiating transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Coming up for air for a moment, we can see that transactions are usually initiated
    by one participant in a business network. This participant is usually the consumer
    of a service available from a particular service provider. For example, Daisy
    wishes to consume the services provided by Winchester bicycles, when it comes
    to buying a bicycle.
  prefs: []
  type: TYPE_NORMAL
- en: Most transactions initiated by participants are concerned with the change in
    state of an asset, but in some cases transactions can involve the change in state
    of a participant. For example, if I change my name by deed poll, then in some
    sense the asset being transformed is me—the participant. This reinforces the central
    nature of transactions—that they capture change no matter what the object.
  prefs: []
  type: TYPE_NORMAL
- en: Transaction history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we previously discussed the provenance of assets, we saw that the history
    of an asset was important—it provided confidence to participants in a network—and
    this increased trust. Likewise, transaction history is important, because it too
    increases trust. Why? Well, it comes back to those signatures. Any change must
    agreed by all the participants involved in the transaction, and the signatures
    in each transaction provide confidence that every counter-party consented to the
    exchange. A history of transactions is even better—it shows that all all points
    in time, every participant in the network has agreed with every change described
    by every transaction!
  prefs: []
  type: TYPE_NORMAL
- en: A blockchain history contains a sequenced order of transactions. Although, an
    order seems to imply that transactions occur in a time-defined sequence, this
    is only partially true. For example, if I pay money into my bank account at 11.00
    a.m., and then make a payment from my bank account at 11.30 a.m., there is a very
    real sense in which the first transaction happened before the second.
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, if you pay money into your bank account at 11.00 a.m., and then you
    make a payment at 11.30 a.m., there is a definite ordering of your transactions.
    However, let's now ask whether our 11.00 a.m. transactions happened before or
    after each other? Or, our 11.30 a.m. transactions? Does it matter whether my 11.00
    a.m. transaction is recorded after your 11.30 a.m. transaction, even though it
    may have occurred, in some sense, before it?
  prefs: []
  type: TYPE_NORMAL
- en: Transaction streams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This example shows us that it's the dependency of transactions that matters
    when discussing transaction history; transactions that are dependent on previous
    transactions are recorded after them. For **independent transaction streams**,
    this ordering is much less important. We have to be a little bit careful, because
    transactions have a nasty habit of becoming entangled with each other. For example,
    if your 11.30 a.m. transaction made its payment into my bank account, then two
    seemingly independent transaction streams have started to interfere with each
    other. This means that we cannot arbitrarily delay the recording of transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we're not talking about the actual occurrence of the transaction—at
    a particular time, or in a particular place—but rather the recording of that transaction
    in a transaction history. It's a bit like a strange, but comprehensive history
    book that records Napoleon's excursion to Italy in 1800, at the same time as noting
    the United States Library of Congress founding in 1800, while also mentioning
    the completion of the literary work Kojiki-den by Motoori Norinaga in Japan in
    1800\. What's important is that these events are recorded—their east order in
    the book with respect to each other is not of crucial importance, as long as they
    appear at roughly the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Separating transactions into different business networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This seemingly contrived example of transaction history actually provides us
    with a deep insight into the design of business networks—that one record of all
    interactions in a network of complex interactions is not a good idea. The example
    starts to illustrate that it might be better design to associate a business network
    with a particular concern, rather than trying to combine all history into a single
    network. In our analogy, it would be better to have different history books for
    French, United States, and Japanese history and cross-reference them with each
    other!
  prefs: []
  type: TYPE_NORMAL
- en: This idea has concrete and important consequences for how you approach blockchain
    networks. It's not just good design, but essential design to separate business
    networks into those of separate concerns, and then link them together. It will
    lead to simpler, more comprehensible, more scalable, more extensible, and more
    resilient systems. You will be able to start small and grow, and be confident
    that no matter how things evolve you can cope with change. You'll see Hyperledger
    Fabric explicitly supports the idea of multiple business networks using concepts
    called networks and channels, and we'll discuss these in more detail later.
  prefs: []
  type: TYPE_NORMAL
- en: Transaction history and asset states
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Examining business network history in more detail, we can see that there are
    two elements to the history of an asset (or participant), namely, its current
    value, and the sequenced set of transactions that led to this value. We can generate
    the value of the asset at all points in time if we sequentially apply from an
    arbitrary point in time all the transactions that affected it. Effectively, we
    think of transaction history as a set of transaction **events** that occur at
    different times and places in the business network, thereby determining its state
    at any given point in time.
  prefs: []
  type: TYPE_NORMAL
- en: We will see these two aspects of business networks explicitly expressed in Hyperledger
    Fabric via the concepts of a ledger **world state** and a ledger blockchain. The
    world state holds the latest value of an asset in a business network, whereas
    the blockchain holds the record of all transactions in the business network. This
    makes Hyperledger Fabric a little more powerful than other blockchains—like them,
    it records all the transactions in a blockchain. Additionally, it also calculates
    the current value of an asset, making it very easy to be confident that you're
    working with the the most up-to-date state. These most-recent values tend to be
    the most important because they represent the current state of the world. And,
    that's what most participants are interested in when it comes to initiating new
    transactions.
  prefs: []
  type: TYPE_NORMAL
- en: A business network as a history of transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a very real sense, we can consider the business network as being a history
    of transactions. What do we mean by this? Well, we've seen that business networks
    are comprised of participants involved in multi-party transactional asset exchange
    defined by contracts. However, if we re-orient ourselves slightly, we see that
    the network is a product of its transaction history, which in turn cannot be separated
    from the assets and participants who initiated the transactions.
  prefs: []
  type: TYPE_NORMAL
- en: All these concepts are part of a whole, which supports and reinforces itself.
    Participants were just our first step to understanding—an entrance into the world
    of business networks. By learning more, we realize that transactions are in fact
    central, while at the same time being meaningless unless they refer to the assets
    and participants inside the network they both create, change, and describe! It's
    the transaction history that brings everything together into a coherent whole,
    and in this sense, it is the business network.
  prefs: []
  type: TYPE_NORMAL
- en: Regulators and business networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A final word on a special kind of participant that is common to just about every
    kind of business network—the **regulator**. The nature of most business networks
    is that there is a participant whose role is to ensure that the transactions obey
    certain **rules**. For example, in the United States, the **Securities and Exchange
    Commission** (**SEC**) ensures that the participants performing transactions involving
    the securities assets do so according to agreed laws and rules, giving investors
    trust in the stock market. Or, in the United Kingdom, the **Driver and Vehicle
    Licensing Agency** (**DVLA**) ensures that vehicles are properly insured, taxed,
    and exchanged according to UK law. Another example is in South Africa, where the
    **Association for Food Science and Technology** (**SAAFoST**) ensure that transactions
    involving farming, food distribution, food processing, and food retail comply
    with appropriate South African law.
  prefs: []
  type: TYPE_NORMAL
- en: Every business network has a regulator of some kind to ensure proper oversight.
    Simply put, the regulator ensures that everyone plays the game according to the
    rules of the business network. We can see that a business network in which all
    the transactions are recorded digitally on a blockchain actually allows the regulator
    to do their job in a more efficient and timely manner.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, one might ask why we need a regulator if all the transactions are
    available to the appropriately authorized participants who can prove correct or
    incorrect behavior? The answer is that regulators have the ability to sanction
    certain participants in the network—specifically to exclude them from the network,
    and confiscate their assets or those which they have illegally transacted upon.
    These sanctions are the most powerful transactions in the network as they provide
    ultimate power, and must accordingly be used only in extreme circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: 'Congratulations! Given you''ve reached this far, you''ve really understood
    the fundamental nature of business networks. Even better, there''s really only
    one more concept to cover in our discussion of business networks: events. Let''s
    move on to the final aspect of business networks that you''ll find empowering
    to understand.'
  prefs: []
  type: TYPE_NORMAL
- en: Discussing events from the perspective of designing a business network using
    Composer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen so far that the vocabulary of business networks contains a compact
    set of inextricably linked concepts—participants, assets, and transactions. Though
    small in number, these concepts are very expressive—they contain big ideas, with
    lots of aspects to them, which support and reinforce each other.
  prefs: []
  type: TYPE_NORMAL
- en: It's not that there's something *missing*, but by adding one extra concept,
    we're going to significantly increase the descriptive and design power of this
    vocabulary. This final concept is **event**—the last ingredient in the mix! The
    good news is that you've probably heard the term before, and many of the ideas
    that it supports are quite obvious. But make no mistake, events are a hugely powerful
    concept, and worth a little time to master—your investment in this topic will
    be handsomely rewarded.
  prefs: []
  type: TYPE_NORMAL
- en: A universal concept
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We think of an event as denoting the occurrence or happening of a particular
    fact. For example, *The President arrived in Australia*, or *The stock market
    closed 100 points up today*, or *The truck arrived at the distribution center* are
    all examples of events. The fundamental idea seems quite simple—an event is a
    point in time when something significant happens. An event represents some kind
    of transition—moving the world from one state to a quite different state. This
    is the nature of events—history is transformed from a smooth line to a set of
    joined-up dots—where each dot represents a significant event.
  prefs: []
  type: TYPE_NORMAL
- en: In the domain of business networks, we can see events *everywhere*. Participants
    initiating transactions are events. Assets undergoing a series of transformations
    are events. Likewise, assets being exchanged between participants are events.
    An asset's life cycle is nothing but a series of events! We now see participants
    joining and leaving the business network as events. Think about transaction history,
    we see it as a set of events about participants and assets. Goodness, once we
    open our eyes, events really are everywhere! If we're not careful, were going
    to get overwhelmed by these little space invaders!
  prefs: []
  type: TYPE_NORMAL
- en: Messages carry event notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We think of messages as the carriers of event notifications. In the real world,
    we are notified of events via sent by text messages, or email, or maybe a newsfeed.
    We therefore make a distinction between an event and the communication of it.
    This is a very important distinction to make, because it illustrates that we are
    coupled to the event via a medium.
  prefs: []
  type: TYPE_NORMAL
- en: Let us now plant the idea—which we will return to later—that although there
    is a singular event, multiple participants can be notified via separate message
    notifications. We see that there is a loose coupling between event-producer and
    event-consumer. It all means events have a slightly intangible quality—their slightly
    abstract nature makes them hard to pin down except through the messages through
    which they are perceived.
  prefs: []
  type: TYPE_NORMAL
- en: A word of mild caution might be appropriate now—we can loose focus on what's
    important if we obsess about events. Firstly, it's obvious that we need to consider
    only significant events—events that will likely result in some kind of action.
    Everything other than the event is just noise—we don't need to consider it. And
    of course, what constitutes significant is going to be domain-, and problem-,
    specific—a stock market price rise is significant in a financial network, but
    not an educational network. So for now, let's use events as a tool for when significant
    things happen in a business network, when we need to understand what prompts participants
    to act. Let's see how that tool can be used.
  prefs: []
  type: TYPE_NORMAL
- en: An example to illustrate event structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take an example of a stock market event. Every time a stock goes up or down
    in price, we can represent this as an event. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **At UTC: 2018-11–05T13:15:30:34.123456+09:00 ** **The stock MZK increased
    in price by 800 from 13000 JPY** |'
  prefs: []
  type: TYPE_TB
- en: We can see that this is a description of an event where the stock ABC increased
    by 800 Yen at a very specific time on 5 Nov 2018.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like assets and participants, we can see the term event can refer to the
    type or instance of an event. In our example, we''ve shown the type and instance
    information folded into one. The event has a type **Stock Market** **Tick** with
    a structure comprising **time**: 2018-11–05T13:15:30:34.123456+09:00, **symbol**:
    MZK, **currency**: JPY **previous**: 13000, **change**: +800\. For each element
    in the structure, we''ve shown the particular instance for this event. We can
    see very clearly from this event what happened in a structured form.'
  prefs: []
  type: TYPE_NORMAL
- en: Events and transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can see that events are very closely related to transactions. Indeed, because
    an event often describes a transaction, it's not uncommon to see the terms used
    interchangeably. However, events describe a broader class of activity than transactions.
    Specifically, while events describe a change, transactions capture the recorded
    elements of the change. Transactions are often the result of an **external** event—one
    that does not happen as the result of the action of a particular participant or
    asset. In this case, a resulting transaction uses a subset of information from
    the external event as input. But, the event itself is not part of the transaction,
    other than in this limited sense. This requires a little thought—we're really
    picking apart some subtle, but important, differences.
  prefs: []
  type: TYPE_NORMAL
- en: 'In what might appear to be a contradiction, transactions can also generate
    events! Goodness, this appears to be getting complicated! But think for a moment—events
    simply describe something happening, and sometimes events are **explicitly** created
    by transactions, rather than happening due to a force outside any transaction.
    In our stock tick example, a transaction might generate an event to signal that
    the MZK stock has increased by over 5% in a single tick! This event might be **Rapid
    Stock Rise** with a structure **symbol**: MZK, **gain**: *6.1%*—it is *explicitly*
    generated by the transaction. The transaction embodies the part of a business
    process whereby a high percentage stock change is identified and communicated.
    The event is, in a very real sense, part of the transaction.'
  prefs: []
  type: TYPE_NORMAL
- en: External versus explicit events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can see, therefore, that events fall into two categories—**external events**
    and **explicit events**. We don't often think of these two terms as opposites,
    but they neatly describe the two different types of events in a business network.
    Our first event type is an **external event**—it is generated externally to the
    business network. This event will be processed by participants, and as such will
    likely result in a transaction—don't forget, only think about significant events—ones
    that will result in an action. With an external event, a significant amount of
    the event content is captured as transaction input, but nothing else about the
    event is remembered. If we want so save an external event, we generate an explicit
    transaction to do so.
  prefs: []
  type: TYPE_NORMAL
- en: '**Explicit events** are different. Because they are generated within a transaction,
    they are automatically part of the transaction history. When the transaction is
    committed to the ledger, then these events will be set free into the network—where
    they will be consumed by any and all participants interested in them. In the case
    of explicit events, the ledger itself is the event producer.'
  prefs: []
  type: TYPE_NORMAL
- en: Events cause participants to act
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can see, therefore, that events are important because they identify the change
    that causes participants to act! Just like in the real world, when an event happens,
    people and organizations hear about it, process the information in it, and generate
    actions because of that processing. We can see that events provide one of the
    primary motivational stimuli to participants to act—often by initiating new transactions
    and sometimes by generating new events.
  prefs: []
  type: TYPE_NORMAL
- en: Loosely coupled design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now return to that idea of loose-coupling. Event producers and event consumers
    do not directly know about each other—they are said to be loosely coupled. For
    example, when a participant is added to a business network, existing participants
    do not need to contact the new joiner to introduce themselves. Instead, the existing
    participants listen for a new participant event if they are interested. Likewise,
    if a participant joins a network, it doesn't need to reach out to everyone and
    everything it is interested in, it just listens for events it thinks are significant—events
    that might cause it to act. We can see that the event producers and event consumers
    don't explicitly know about each other—they only know about events—and thus communication
    can wax and wane very easily—it's much more scalable.
  prefs: []
  type: TYPE_NORMAL
- en: We are now seeing that loose-coupling is a major difference between events and
    transactions. Transactions explicitly bind participants to each other—in a transaction,
    we name all the counter-parties. In an event, we have absolutely no idea of how,
    or even if, the producers and the consumers of the event are related. From a design
    perspective, it means that we can create a very flexible system. Participants
    can be coupled to each other in an almost infinitely flexible way via events,
    and this really does mirror the richness we see in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: The utility of events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now see why we've added events to our definition of a business network. Events
    allow the business network to be almost infinitely flexible. Revel in this little
    bit of chaos—it might be in some sense a little less analyzable, and that's OK.
    The real world isn't analyzable anyway—events provide a highly efficient coordination
    mechanism between participants so that important change gets agreed and recorded
    via multi-party transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! Remember that definition of a business network?
  prefs: []
  type: TYPE_NORMAL
- en: A business network is a collection of participants and assets than undergo a
    life cycle described by transactions. Events occur when transactions complete.
  prefs: []
  type: TYPE_NORMAL
- en: We've realized that those couple of sentences are maybe a little more powerful
    than might first appear—they describe a very rich world indeed. Let's do a worked
    example to see these ideas at work!
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a business network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've had a tour through the world of business networks, and we've seen the
    importance of multi-party transaction processing of assets between participants—it's
    the very lifeblood of these networks. Indeed, because of the importance of today's
    business networks, a significant amount of technology is already deployed in their
    pursuit. If you've worked in IT for a little while, you've probably heard of **Business-to-Business**
    (**B2B**), and maybe even **Electronic Data Interchange** (**EDI**) [protocols].
    These terms describe the idea and technology of how businesses exchange information
    with each other. You might even have heard of, or have experience with, networking
    protocols such as AS1, AS2, AS3, and AS4\. These define standard mechanisms about
    how to exchange business data between two organizations. Don't worry if you haven't
    heard these terms—the key take-away is that business networks exist today in a
    very really sense, and have lots of technology applied to them.
  prefs: []
  type: TYPE_NORMAL
- en: What does implementing a business network mean? Well, when it comes to the exchange
    of tangible assets such as cars or equipment or important documents, a blockchain
    captures representations of the assets, participants, transactions, and events
    in a business network. But, in the case of intangible assets it's a little different—in
    some meaningful sense, the increasing de-materialization of assets means that
    their representation inside a computer system is as real as the asset itself.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of de-materialization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Consider the case of music. One hundred years ago, it would have been recorded
    on bakelite, and then through a series of technological innovations, it moved
    to vinyl, Compact Disc, digital mini-disc. Each step was cheaper than the previous,
    and of higher quality. But, about 25 years ago, something different happened!
    The first MP3 format was introduced to support high-fidelity audio capture.
  prefs: []
  type: TYPE_NORMAL
- en: This was the de-materialization step, and it was quite different to the other
    steps. Yes, it was cheaper, and of higher quality, but critically it stopped music
    having a physical representation. This de-materialization pattern is increasingly
    common—financial products such as bonds, securities, swaps, mortgages, and such
    are primarily represented digitally. More and more documents and forms are becoming
    digitized—from trivial examples such as airplane and train tickets, to more important
    education certificates, and employment and health records. This move towards digital
    means that the blockchain has more relevance than we might otherwise assume.
  prefs: []
  type: TYPE_NORMAL
- en: So, when we implement a business network on a blockchain, we are often close
    to processing the actual assets in a business network. And, it's arguable that
    even in the case of tangible assets, the information about assets is as important
    as the asset itself! This seems like hyperbole, but think about it for a moment.
    Let's say you own a car. The car needs to have petrol, it needs to be taxed, serviced,
    and insured. It needs an annual test to make sure it is roadworthy. There's a
    lot of economic activity centered around that car of yours! Which means that the
    information about the car is very valuable —indeed, over the lifetime of a car,
    the total running costs will usually be double the cost of the car. So, maybe
    the information about the car is more valuable than the car!?
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain benefits for B2B and EDI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A blockchain can provide a simpler, more comprehensive, approach to **business-to-business**
    (**B2B**) information processing across multiple organizations. Whereas **Electronic
    Data Interchange** (**EDI**) protocols are only concerned with the exchange of
    information, a blockchain can store data in a ledger, process data with smart
    contracts, and **communicate and exchange** data via consensus. Blockchain provides
    a holistic approach to multi-party transaction processing. In a blockchain, all
    the processing, data, and communications in a business network are accessed from
    one coherent system. That's in contrast to a traditional B2B approach where data,
    processing, and exchange are managed by different systems. This separation directly
    results in significant amounts processing to join-up information across these
    systems, and a lack of overall transparency. This process is described as **reconciliation**—it
    ensures that that there are not significant differences between the information
    at different parts of the business network—it is timely and costly.
  prefs: []
  type: TYPE_NORMAL
- en: We now see the benefits of implementing a business network on a blockchain.
    Rather than a set of different systems that record assets, and different programs
    that operate on them, there is a shared view of the asset and its complete transactional
    life cycle. Blockchain provides an explicit shared understanding of the asset
    and its life cycle, of participants, transactions, and events. This shared nature
    of blockchain provides increased trust through increased transparency, and that
    radically simplifies and accelerates processing. For example, organizations don't
    have to perform periodic reconciliation with other counterparts to make sure that
    their systems tally—because everything tallies all the time, in a blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's say we want to get the benefits of a blockchain for multi-party transaction
    processing—how do we do this? That's what we're going to be concerned with in
    the remainder of this chapter—the basic architectural approach, but mostly design
    tools, that you can use to implement a blockchain technology platform for a business
    network.
  prefs: []
  type: TYPE_NORMAL
- en: Participants that interact with the blockchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firstly, which participants interact with the blockchain? The first thing to
    say is that the primary beneficiaries of a blockchain in a business network are
    the participants that hold the most data, and typically that is organizations.
    It's not to say that individuals cannot host an instance of the blockchain ledger,
    but its more likely that they will be interacting with a organization that manages
    part of the blockchain. Indeed, they may not even know that they are consuming
    a blockchain. Within an organization, although it is individuals using applications
    that will be interacting with the blockchain, critically, they will be doing so
    on behalf of the organization—they are the agents of the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, when it comes to system and device participants, it's unlikely that
    devices will host a copy of the blockchain ledger. In this way, devices are a
    little more like individual participants. In contrast, systems in the network
    can act either on behalf of an organization, or in some cases, actually represent
    the organization. What does this mean, that a system represents an organization?
    Well, if we think about a B2B system, then an organization really does appear
    to the network as its B2B gateway—for all intents and purposes, the gateway is
    the organization. It this way, we can see that it would make sense for a large
    system to be very closely allied to an instance of the blockchain ledger.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the business network with APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Organizations, individuals, systems, and devices interact with the blockchain
    via a set of business network APIs. We''ll see in a moment how these APIs are
    created, but for now it''s enough to know that a blockchain network is consumed
    like a regular IT system. The difference is internal—these APIs are implemented
    on a blockchain infrastructure, and this ultimately provides a simpler and richer
    set of APIs than would otherwise be practically possible. However, consumers of
    blockchain APIs don''t need to worry about this—they just issue APIs, and the
    services they require just happen. The trade-off that''s occurring is that the
    blockchain infrastructure requires more coordination between the organizations
    in the business network. They have to agree on participants, assets, transactions,
    and events in advance, and how they evolve. While they can, and should, process,
    store, and communicate information uniquely when outside the blockchain, they
    must agree when it''s on the blockchain. That''s the trade-off: up-front agreement
    for the promise of radical simplification of business processes in normal running.'
  prefs: []
  type: TYPE_NORMAL
- en: At a high level, business network APIs are easy to understand. In a vehicle
    network, we might have APIs such as `buyVehicle()`, `insureVehicle()`, `transferVehicle()`,
    `registerVehicle()`, and so on. These APIs are domain-specific—the APIs just mentioned
    would be very different to those in a commercial paper network—`issuePaper()`,
    `movePaper()`, and `redeemPaper()`. It's important that APIs are domain-specific
    because it makes them meaningful to the participants in the network who are using
    them—such APIs speak the language of the participants.
  prefs: []
  type: TYPE_NORMAL
- en: A 3-tier systems architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These APIs work inside a very standard systems architecture. Typically, end
    users will have a presentation tier running on their web browser or mobile device.
    This will communicate with an application server tier, using an API that is defined
    by the application according to the overall solution being developed. This application
    tier might be running in the cloud or on an on-premise system. It's where all
    the application logic for the application resides, and it is the consumer of the
    business network APIs provided by the blockchain. This application may be doing
    other work, such as accessing a database, or performing analytics—but from our
    perspective, it's the interaction point with the blockchain network. It consumes
    the blockchain APIs, not the end-device. Summarized, these APIs operate within
    a typical 3-tier systems architecture structure of presentation, application,
    and resource management.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, if we have a device or system interacting with the blockchain,
    then it will not have a presentation tier—it will either use the application API
    or blockchain APIs directly. In a very real sense, a device is the presentation
    tier, and the system is the application tier. Again, this is all very standard.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric and Hyperledger Composer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basic design approach is likewise very straightforward. We use Hyperledger
    Composer to model the participants, assets, transactions, and events in a particular
    business network. We then use that model to generate both blockchain—smart contracts
    and ledgers that implement these elements that are deployed to the blockchain
    network created using Hyperledger Fabric. We also use the Hyperledger Composer
    model to generate a set of domain-specific APIs to access the transactions that
    manipulate them in the Hyperledger Fabric blockchain. As we've seen, these APIs
    will be used by applications on behalf of individuals, organizations, systems,
    and devices.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've been introduced to business networks and explored them
    in detail. By understanding the key components of participants, assets, transactions
    and events, we've seen that in some sense all business networks share the same
    concerns.
  prefs: []
  type: TYPE_NORMAL
- en: By classifying the different types of participants—individuals, organizations,
    systems and devices, we are able to properly describe who initiates transactions
    that capture change in the business network. By understanding the concept of an
    asset—a thing of value, whether tangible or intangible—we were able to describe
    and understand the resources that move between participants, and how they express
    the reason participants interact with each other. Understanding participants and
    assets allowed us to understand how changes to these are captured in transactions.
    And finally, concept of an event allowed us to understand when significant change
    to the network happened, and act upon it.
  prefs: []
  type: TYPE_NORMAL
- en: We spent a few moments discussing how these concepts are consumed using APIs,
    and in the next chapter, we're going focus much more on this aspect—how to demonstrate
    all these ideas in a real-world example of a business network. We're going to
    use Hyperledger Fabric and Hyperledger Composer in particular, so that you can
    see how to apply these ideas in practice.
  prefs: []
  type: TYPE_NORMAL
