- en: Signing Legal Documents on Blockchains and Identity Verification
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在区块链上签署法律文件和身份验证
- en: The vast usage of blockchains necessitates a chapter dedicated to the topic.
    The versatility that blockchains have tempts users to try their hand at implementing
    them in the various areas of our lives. Though sometimes it might seems tedious,
    using decentralized ledgers to store and handle data is actually very convenient
    and safe, to a certain extent. Accessing these ledgers over a network to perform
    activities such as transactions or signing documents makes it a feasible method
    of conveying data without actually doing much.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链的广泛使用使得有必要专门讨论这个主题。区块链的多功能性诱使用户尝试在我们生活的各个领域实施它们。虽然有时可能看起来很繁琐，但在网络上访问这些分类账以执行诸如交易或签署文件之类的活动，使其成为一种可以在没有实际付出太多努力的情况下传达数据的可行方法。然而，在一定程度上使用去中心化分类账来存储和处理数据是非常方便和安全的。
- en: 'This chapter will focus on the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将专注于以下主题：
- en: User identity and storing sensitive data on a blockchain
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在区块链上存储用户身份和敏感数据
- en: Dealing with large files on a blockchain
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在区块链上处理大文件
- en: User identity verification on a blockchain
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块链上的用户身份验证
- en: Signing a document on a blockchain
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在区块链上签署文件
- en: This chapter is more theoretical than some of the others as a lot of it depends
    on the backend technologies that we choose to work on.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他章节相比，本章更多的是理论性的，因为它很大程度上取决于我们选择工作的后端技术。
- en: User identity and sensitive data on the blockchain
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户身份和区块链上的敏感数据
- en: Let us begin by discussing the prime aspect for user identity—the parameter
    that is used for verification. We can do this by using a person's email address,
    their phone number, or even a physical address. One might wonder how we can do
    this. It is actually very easy to verify any of the aforementioned parameters
    on the blockchain.  To do this, we can use a confirmation code. The user can link
    this confirmation code to their Ethereum account, which in turn links it to his/her
    private key. As an administrator, you have to make sure that it is not you who
    generates this code. This would give you the power to fabricate users at will.
    You want your users to be real and verified people to eradicate the trustless
    element from your blockchain. To generate these codes, we can use Twilio or any
    external service provider. Twilio is used extensively for SMS verification, which
    encapsulates phone verification.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从讨论用户身份的主要方面开始——用于验证的参数。我们可以通过使用人的电子邮件地址、电话号码，甚至物理地址来实现这一点。也许有人会想知道我们如何做到这一点。实际上，在区块链上非常容易验证上述任何参数。为此，我们可以使用确认代码。用户可以将此确认代码与他/她的以太坊账户相连，进而将其与他/她的私钥相连。作为管理员，您必须确保不是您生成此代码。这将赋予您随意制造用户的权力。您希望您的用户是真实和经过验证的人，以消除您的区块链中的不可信元素。我们可以使用Twilio或任何外部服务提供商来生成这些代码。Twilio广泛用于短信验证，包括电话验证。
- en: Let's now consider the case of dealing with sensitive data, which cannot be
    stored on public blockchains. You might think to yourself, *There are private
    blockchains*. I know, I know. But for now, assume that all blockchains are public
    blockchains. You cannot store sensitive data such as your name, phone number,
    or email address on this particular blockchain. This would be a huge privacy concern.
    One of the things that is necessary for a successful blockchain is genuine proof
    that validates the fact that data stored on it cannot be tampered with. This involves
    not keeping the entire blockchain on the centralized server. To solve this, we
    will resort to hashing and using our backend storage including MySQL or Oracle.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑如何处理无法存储在公共区块链上的敏感数据的情况。您可能会自言自语：*有私有区块链*。我知道，我知道。但是现在，假设所有的区块链都是公共区块链。您不能在该特定区块链上存储诸如您的姓名、电话号码或电子邮件地址之类的敏感数据。这将是一个严重的隐私问题。成功的区块链需要真实的证据来证明存储在其中的数据是无法篡改的。这涉及不将整个区块链存储在中央服务器上。为了解决这个问题，我们将求助于散列和使用我们的后端存储，包括MySQL或Oracle。
- en: Hashing
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希
- en: Hashing is a method that transforms a large string value to a small, fixed-length
    value. It is used for the purpose of indexing. Searching for a string is difficult
    as compared to a value. Hashing not only makes indexing easier but also affects
    the search time for any string. It reduces the search time, as finding a short
    value is much easier and more efficient as compared to the original string value.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希是一种将大字符串值转换为小的固定长度值的方法。它用于索引的目的。搜索字符串与搜索值相比是困难的。哈希不仅使索引变得更容易，还会影响到任何字符串的搜索时间。它减少了搜索时间，因为找到一个短值比原始字符串值要容易得多，也更有效率。
- en: To learn how to perform hashing, you will begin by hashing some user information
    and storing this in your smart contract, thus allowing you to link an anonymous
    blockchain identity to a real-life identity.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要学习如何执行哈希操作，你将首先对一些用户信息进行哈希处理，并将其存储在你的智能合约中，从而允许你将一个匿名的区块链身份与现实生活中的身份关联起来。
- en: For this to work, you need to encourage your user to create a new Ethereum account
    for your application. This will provide them with anonymity when they use this
    account outside your application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个工作正常，你需要鼓励用户为你的应用程序创建一个新的以太坊账户。这将在他们在应用程序外部使用此账户时为他们提供匿名性。
- en: Using private blockchains is also a solution. The drawbacks of this outweigh
    its advantages. Two of these drawbacks concern data tampering and data censoring.
    However, these concerns turn into issues only if the blockchain is hosted by entities
    under your control. Finding a way around these issues is something that banks
    are currently interested in. Let us assume we have banks A, B, and C. These three
    banks have teamed up together to use one single private blockchain, irrespective
    of the fact that they are in competition with each other. This leads to them developing
    internal security measures that make it impossible for anyone to manipulate the
    data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用私有区块链也是一个解决方案。这种方法的缺点超过了它的优点。其中两个缺点涉及数据篡改和数据审查。然而，只有当区块链由你控制的实体托管时，这些问题才会成为问题。找到解决这些问题的方法是目前银行感兴趣的内容。假设我们有银行A、B和C。这三家银行已经联合起来使用一个单一的私有区块链，而不管它们之间是否竞争。这导致它们制定了内部安全措施，使任何人都无法操纵数据。
- en: To understand this better, let us look at an example that involves us verifying
    the identity of a user. This begins with the user accessing your application and
    generating a new address and a new private key. He could also use MetaMask, Geth,
    or any other provider to do this. The backend system would notify the smart contract
    of a new and unverified user, and the third-party application, such as Twilio,
    would send out a verification code. At this point, even though you are an admin,
    you will not be able to see the code. This prevents the possibility of users being
    fabricated out of thin air by any member of the administrative team. Once the
    code has been entered, it will be passed to the smart contract.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要更好地理解这一点，让我们看一个例子，涉及到我们验证用户身份。这始于用户访问你的应用程序并生成一个新的地址和一个新的私钥。他也可以使用MetaMask、Geth或任何其他提供者来执行此操作。后端系统将通知智能合约有一个新的未经验证的用户，并且第三方应用程序，比如Twilio，将发送一个验证代码。在这一点上，即使你是管理员，你也无法看到代码。这样做可以防止任何管理团队成员凭空捏造用户的可能性。一旦代码被输入，它将传递给智能合约。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code is a JSON file that will show us how to use hashing to protect
    sensitive data by hashing it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是一个JSON文件，它将向我们展示如何使用哈希来保护敏感数据：
- en: '![](img/def0aadb-15d1-404e-8d3e-dc29d2e443cb.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/def0aadb-15d1-404e-8d3e-dc29d2e443cb.png)'
- en: SensitiveData.sol file on remix.org with output
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在remix.org上的SensitiveData.sol文件及其输出
- en: The data here is hashed and then passed to the `addUser` function. This will
    allow the data to remain within your own database.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的数据被哈希处理，然后传递给`addUser`函数。这将允许数据保留在你自己的数据库中。
- en: If you try to manipulate data as an evil administrator, your hash would not
    be right. Once the hash is passed to the `addUser` function, the `addUser` function
    will push the `userHash` on top of the `userHashes` array of bytes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你试图以邪恶的管理员身份操纵数据，那么你的哈希值就不会正确。一旦哈希值传递给`addUser`函数，`addUser`函数将把`userHash`推送到`userHashes`字节数组的顶部。
- en: Dealing with files and large data on the blockchain
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理区块链上的文件和大型数据
- en: In this section, we are going to learn how to deal with large files and documents
    on any blockchain. As mentioned umpteen times before, blockchains are usually
    public in nature, and therefore, privacy and security should be of prime importance.
    A blockchain contains all of the data that is filled into it, which in the case
    of Ethereum causes the cost to increase—that is, more gas is paid per transaction.
    As this isn't something that we want, we'll use a few workarounds.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何处理任何区块链上的大文件和文档。如之前多次提到的，区块链通常是公开的，因此隐私和安全应处于首要位置。区块链包含填入其中的所有数据，这在以太坊的情况下会导致成本增加，即每次交易都需要支付更多的gas。由于这不是我们想要的，我们将使用一些变通方法。
- en: One of these workaround is **Swarm**. There is also IPFS, or the InterPlanetary
    File System, which we learned about briefly in [Chapter 1](464e368c-3ee6-4f15-bc1c-629d705acd1c.xhtml),
    *Workflow Setup and Thinking Blockchain*. You could also use your own server to
    store the data and larger files.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变通方法之一是**Swarm**。还有IPFS，即星际文件系统，在[第1章](464e368c-3ee6-4f15-bc1c-629d705acd1c.xhtml)，*工作流设置和区块链思考*中我们简要介绍了。您还可以使用自己的服务器来存储数据和更大的文件。
- en: Swarm and IPFS are not blockchains, but they do follow the common principles
    of decentralization, making the two of them decentralized file-storage systems
    that are tamperproof.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Swarm和IPFS并不是区块链，但它们遵循去中心化的共同原则，使它们成为不易篡改的分布式文件存储系统。
- en: A file is not decentralized in the beginning. When a file is uploaded through
    IPFS, you become the first, sole host of that file. The moment someone else downloads
    or requests the same file, they also become a host, and the rest of the network
    has a reference to who the hosts are. This connectivity between the peers allows
    a person to download or query a file by redirecting you to the right location/person.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始文件并不是去中心化的。当通过IPFS上传文件时，您成为该文件的第一个独立主机。当其他人下载或请求相同的文件时，他们也成为主机，其余网络也会有主机的参考。对点之间的连接关系允许一个人通过重定向到正确的位置/人来下载或查询文件。
- en: Since Swarm and IPFS are not completely developed, you can opt to use your own
    systems and some hashing. You would start by making a SHA hash file in your backend
    and storing this file in a blockchain. This file can no longer be edited without
    changing the hash, thereby invalidating the hash.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Swarm和IPFS还没有完全开发，您可以选择使用自己的系统和一些哈希。您可以从后端开始制作SHA哈希文件，并将此文件存储在区块链中。在不更改哈希的情况下，将无法编辑此文件，从而使哈希失效。
- en: In any scenario, if a user wants to validate their contract, they just rehash
    the file to compare it to the original hash. This acts as an assurance that their
    contract hasn’t been tampered with.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 无论何种情况，如果用户想要验证其合同，他们只需重新对文件进行哈希处理以与原始哈希进行比较。这可以作为确保其合同未被篡改的保证。
- en: 'Let us look at the following code example that will help us understand the
    concept of hashing in a bit more depth:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下代码示例，以帮助我们更深入地理解哈希的概念：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output for the preceding code in remix:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: remix中前述代码的输出：
- en: '![](img/f02f978d-f3eb-4529-b319-44bb17033d52.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f02f978d-f3eb-4529-b319-44bb17033d52.png)'
- en: In the preceding screenshot, we have hashed the entire document, and we will
    also add that hash to the smart contract or to the blockchain by calling the `addDocument`
    function, which will pass the hash and push it onto the array.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，我们已经对整个文档进行了哈希处理，并且我们还将通过调用`addDocument`函数将该哈希添加到智能合约或区块链中，该函数将传递哈希并将其推送到数组。
- en: User identity verification with blockchains
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用区块链进行用户身份验证
- en: 'This section takes a closer look at the user verification process and the Solidity
    code that lies behind it. Let us consider the following Solidity code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本节着重介绍用户验证过程和背后的Solidity代码。让我们考虑以下Solidity代码：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, the owner is your own server. The constructor defines the value
    of the owner as `message.sender`, which contains the address of the person who
    deploys the smart contract.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，所有者是您自己的服务器。构造函数将所有者的值定义为`message.sender`，其中包含部署智能合约的人的地址。
- en: 'The following are the steps that the code goes through:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 代码经历以下步骤：
- en: A user accesses your application.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户访问您的应用程序。
- en: The same user enters some private details.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相同的用户输入了一些私人详细信息。
- en: Details are stored in the form of a hash in the smart contract of choice.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 详细信息以哈希的形式存储在所选智能合约中。
- en: Twilio or a third-party service provider will send a text message to the user
    while the system calls the Solidity function named `add.User`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Twilio或第三方服务提供商将向用户发送短信，同时系统调用名为`add.User`的Solidity函数。
- en: The `add.User` function passes two parameters, namely, `address user` and a
    `hashed_verification`, which is an array of 32 bytes and contains your hash of
    the code that has been sent to the user. This function can be called only by the
    owner or the modifier, which in this case is you or your server.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`add.User`函数传递两个参数，即`address user`和`hashed_verification`，后者是一个32字节的数组，其中包含您发送给用户的代码的哈希值。该函数只能由所有者或修改者调用，在本例中是您或您的服务器。'
- en: The contract constructor consists of a Boolean value that stores the address
    that is mapped by the `user_verified` that lies in the `add.User` function. This
    Boolean value defaults to the `false `value.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 合同构造函数包括一个布尔值，该布尔值存储了由`add.User`函数中的`user_verified`映射的地址。这个布尔值默认为`false`值。
- en: The `user_codes` maps `hashed_verification` to an array of 32 bytes.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`user_codes`将`hashed_verification`映射到一个32字节的数组。'
- en: The user enters the code on your frontend.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户在前端输入代码。
- en: The `verify` function then checks whether or not the user is verified by comparing
    the hash of the verification code that the user has provided with the hash that
    is sent by the admin in the `add.User` function.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`verify`函数然后通过比较用户提供的验证代码的哈希与管理员在`add.User`函数中发送的哈希来检查用户是否经过验证。'
- en: You don't hash the verification code in JavaScript for future verification because
    third parties can just take this code, hash it, and check it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您不要在JavaScript中对验证代码进行哈希处理，以备将来进行验证，因为第三方可以直接拿取该代码，对其进行哈希处理并进行检查。
- en: Once the user is verified, the default Boolean value is changed from `false` to
    `true`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦用户通过验证，布尔值的默认值就会从`false`更改为`true`。
- en: The verification code is then stored in plain text on the blockchain after the
    user is verified.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户经过验证后，验证代码将存储在区块链上的明文中。
- en: Signing a document on the blockchain
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在区块链上签署文件
- en: 'This section will teach you how to sign documents such as contracts on the
    blockchain. Let us consider the following code to understand how this is done:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将教您如何在区块链上签署文件，比如合同。让我们考虑以下代码以了解如何完成这项工作：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following screenshot is the result of the preceding code in the remix–Solidity
    framework:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是remix-Solidity框架中前述代码的结果：
- en: '![](img/94ea8048-bb7a-42fe-93cf-04b4226cb028.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94ea8048-bb7a-42fe-93cf-04b4226cb028.png)'
- en: Output of the UserExample.sol file in remix
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: remix中UserExample.sol文件的输出
- en: This code allows you to add a user to your blockchain. It also allows you to
    invite and allow the user to sign a document. Since the code is similar to the
    one we used in the previous section, entitled *User identity verification with
    blockchains*, we will only take a look at the amendments we have made to the code
    to accommodate the extra feature—namely, allowing the user to sign a contract.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码允许您将用户添加到您的区块链中。它还允许您邀请用户签署文件。由于该代码类似于我们在上一节中使用的代码，标题为*使用区块链进行用户身份验证*，因此我们只会关注我们对代码做出的修改，以适应额外的功能——即允许用户签署合同。
- en: If we look at the code closely, we will notice that there are two new parameter
    mappings. One maps a 32-byte array (`bytes32`) to an address that is a user, while
    the other one maps a 32-byte array (`bytes32`) to a Boolean called `signed`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细查看代码，我们会注意到有两个新的参数映射。其中一个将32字节的数组(`bytes32`)映射到一个用户的地址，而另一个将32字节的数组(`bytes32`)映射到一个名为`signed`的布尔值。
- en: '`Structs` can also be used to map variables.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`Structs`也可以用来映射变量。'
- en: 'Once the contract is deployed, you can upload a document, hash it, and then
    proceed to add it to the blockchain. Once this is done, you can invite a user.
    Inviting a user leads to the user being added to the `to_sign` mapping at the
    `documentHash`. Let us assume that we have something like the following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 合同部署后，您可以上传文件，对其进行哈希处理，然后将其添加到区块链中。完成这些步骤后，您可以邀请用户。邀请用户会导致用户被添加到`to_sign`映射中的`documentHash`。让我们假设我们有如下代码：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, `0x121212121212` is the hash and `0x121212133293928` is your user. You
    could then notify the user regarding his invitation via an email that contains
    a link to the document. The user can use this link to view and verify this document.
    The process of verification on the user end would require them to hash the document
    and then compare it to the hash that was provided to them. In the event that the
    user wants to take the process of verification a bit further, they can look the
    hash up on the blockchain itself. After this, the user can call the `signDocument`
    function.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`0x121212121212`是哈希值，`0x121212133293928`是你的用户。然后你可以通过包含一个指向该文件的链接的电子邮件通知用户关于他的邀请。用户可以使用这个链接来查看和验证这份文件。用户端的验证过程需要他们对文件进行哈希，并将其与提供给他们的哈希进行比较。如果用户想要深入进行验证，他们可以在区块链上查找这个哈希。之后，用户可以调用`signDocument`函数。
- en: To understand how the `signDocument` function works, let us assume that you
    want to sign the `0x1212 `hash. You should first call the function with the first
    parameter as the user. First, it will check whether your address is different
    from the address of the invited user. If this is true, your transaction will be
    canceled using the `revert` function, which in this code is `null`. If the two
    addresses match, we can simply proceed to sign the document.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解`signDocument`函数是如何工作的，让我们假设你想要签署`0x1212`哈希的文件。你应该首先调用该函数，第一个参数是用户。首先，它将检查你的地址是否与受邀用户的地址不同。如果是的话，你的交易将被取消，并使用`revert`函数，在这段代码中是`null`。如果这两个地址匹配，我们可以简单地继续签署文件。
- en: This is one of the reasons I love blockchains. One can simply sign a document
    by setting a variable to `true`. Once this variable has been set to `true`, you
    can regard this document as signed. If this is used as evidence in court, the
    document should hold, as it has been signed with a private key. This makes it
    undeniable that the person has signed the contract knowingly.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我喜欢区块链的原因之一。人们可以通过将变量设置为`true`来简单地签署一份文件。一旦这个变量被设置为`true`，你就可以将这份文件视为已签署。如果这在法庭上作为证据，文件应该有效，因为它已经用私钥签署了。这使得这个人签署了合同是毋庸置疑的。
- en: Summary
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter took us on a journey where we learned how to handle large data
    files on a blockchain. Given that data sensitivity is a concept that is a necessity
    given the current developments in the World, we learned some simple methods to
    implement the security of a blockchain. We then learned about the process of verifying
    the identity of a real-world user on a blockchain with the help of third parties,
    and learned how to sign a document with the help of a blockchain.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章带我们学习了如何在区块链上处理大型数据文件的旅程。考虑到数据敏感性是当前世界发展中必不可少的概念，我们学习了一些简单的方法来实现区块链的安全性。然后，我们了解了在区块链上通过第三方验证真实世界用户身份的过程，并学习了如何借助区块链签署文件。
- en: The next chapter will teach us the basic concepts and methods required to use
    Ethereum outside our browsers, and also how it is used as the backbone of the
    IoT. We will also take a quick glance at the physical components that make up
    a blockchain.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将教我们在浏览器之外使用以太坊所需的基本概念和方法，以及它如何作为物联网的支撑。我们还将快速浏览组成区块链的物理组件。
