["```\nuint public foo = 4;\n```", "```\nfunction foo() public returns\n(string) {\n return \"Hello\";\n}\n\nfunction bar() external {\n foo_ = foo(); //Not valid\n foo_ = this.foo(); //Valid\n}\n```", "```\ncontract A {\n    uint public foo = 42;\n}\n\nA.foo();\n```", "```\nuint foo[]\n```", "```\nstruct Player {\n    address player;\n    string playerName;\n    uint playerBalance;\n    uint wins;\n    uint losses;\n}\n\nPlayer jim =\nPlayer(msg.sender, \"Jim\", 0, 0, 0);\n```", "```\nmapping (uint => Player) players;\n```", "```\npragma solidity 0.5.0;\n\ncontract Gaming {\n    /*Our Online Gaming Contract*/\n    address owner;\n    bool online;\n}\n```", "```\n    constructor() public payable {\n        owner = msg.sender;\n        online = true;    \n    }\n```", "```\nfunction winOrLose(uint display, bool guess, uint wager)\nexternal payable returns (bool) {\n    if (isWinner == true ) {\n        /*Player won*/\n        msg.sender.transfer(wager*2);\n        return true;\n    } else if (isWinner == false) {\n        /*Player lost*/\n        return false;\n    }\n}\n```", "```\nstring foo = \"bar\";\nfoo == bar;\nfoo != bar;\n```", "```\nuint a; //initialized as 0\na = 5;  //assign a value of 5\nuint b = 10;  //create and assign value of 10\n```", "```\nuint x[];\nfor (uint i = 0; i < 10;  i++) {\n    x.push(i);\n}\n```", "```\nfunction winOrLose(uint display, bool guess, uint wager)\nexternal payable returns (bool) {\n    require(online == true);\n    require(msg.sender.balance > msg.value, \"Insufficient \nfunds\");\n    uint mysteryNumber_ mysteryNumber();\n    bool isWinner = determineWinner (mysteryNumber_,\ndisplay, guess);\n    if (isWinner == true ) {\n        /*Player won*/\n        msg.sender.transfer(wager*2);\n        return true;\n    } else if (isWinner == false) {\n        /*Player lost*/\n        return false;\n    }\n}\n```", "```\nfunction mysteryNumber() internal view returns (uint)\n{\nuint randomNumber = uint(blockhash(block.number-1))%10\n+1;\n    return randomNumber;\n}\n```", "```\nfunction determineWinner\n    (uint number, uint display, bool \nguess)\n    public pure returns (bool) {\n    if (guess == true){\n        if (number > display) {\n            return true;\n        }\n    }else if (guess == false){\n        if (number > display) {\n            return false;\n        }\n    }\n}\n```", "```\ngit checkout -b dayTwo\n```"]