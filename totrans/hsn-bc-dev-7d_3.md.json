["```\nfunction myCoolFunction(unit aNumber) external myModifier view payable returns (bool) {\n    //Write cool code here\n}\n```", "```\nunit sum = addThis(4, 2);\n```", "```\nfunction addThis (unit a, unit b) internal returns (unit) {\n         return a + b;\n}\n```", "```\nfunction addThis (unit a, unit b) internal returns (unit c) {\n          c = a + b;\n           return c;\n}\n```", "```\nfunction winOrLose(unit display, bool guess, unit wager) external payable returns (bool) {\n           /* Use true for a higher guess, false for a lower guess */\n           require(online == true);\n           require(msg.sender.balance > msg.value, \"Insufficient funds\");\n           unit mysteryNumber_ = mysteryNumber();\n           bool isWinner = determineWinner(mysteryNumber_, display, guess);\n          if (isWinner == true) {\n        /* Player won */ \n         msg.sender.transfer(wager * 2);\n         return true;\n         } else if (isWinner == false) {\n         /* Player lost */\n         return false;\n         }\n}\n```", "```\nstring saySomething = \"hello\";\nfunction doStuff() internal {\n         string saySomething = \"goodbye\";\n         string saySomething = \"I have nothing else to say\";\n}\n\n//saySomething is \"hello\"\n//saySomethingElse doesn't exist\n```", "```\nevent PlayerWon(address player, unit amount);\n```", "```\nfunction winOrLose(unit display, bool guess, unit wager) external payable returns (bool) {\n           /* Use true for a higher guess, false for a lower guess */\n           require(online == true);\n           require(msg.sender.balance > msg.value, \"Insufficient funds\");\n           unit mysteryNumber_ = mysteryNumber();\n           bool isWinner = determineWinner(mysteryNumber_, display, guess);\n          if (isWinner == true) {\n        /* Player won */ \n        emit PlayerWon(msg.sender, msg.value);\n        msg.sender.transfer(wager * 2);\n         return true;\n         } else if (isWinner == false) {\n         /* Player lost */\n         return false;\n         }\n}\n```", "```\ncontract Gaming {\n    address owner;\n    bool online;\n}\n```", "```\nconstructor() public {\n    owner = msg.sender;\n    online = true;\n}\n```", "```\ncontract Gaming {\n         function() public payable {\n         }\n}\n```", "```\nfunction winOrLose(unit display, bool guess, unit wager) public payable returns (bool) {\n           /* Use true for a higher guess, false for a lower guess */\n           require(online == true);\n           require(msg.sender.balance > msg.value, \"Insufficient funds\");\n           unit mysteryNumber_ = mysteryNumber();\n           bool isWinner = determineWinner(mysteryNumber_, display, guess);\n          if (isWinner == true) {\n        /* Player won */ \n        emit PlayerWon(msg.sender, msg.value);\n        msg.sender.transfer(wager * 2);\n         return true;\n         } else if (isWinner == false) {\n         /* Player lost */\n         return false;\n         }\n}\n```", "```\nfunction mysteryNumber() private view returns (unit) {\n         unit randomNumber = unit(blockhash(block.number-1))%10 + 1;\n         return randomNumber;\n}\n```", "```\nfunction determineWinner(unit number, unit display, bool guess)\n    internal pure returns (bool) {\n    if (guess == true} {\n        if (number > display) {\n            return true;\n        }\n    } else if (guess == false) {\n        if (number > display) {\n            return false;\n        }\n    }\n}\n```", "```\nfunction winOrLose(unit display, bool guess, unit wager) external payable returns (bool, unit) {\n           /* Use true for a higher guess, false for a lower guess */\n           require(online == true);\n           require(msg.sender.balance > msg.value, \"Insufficient funds\");\n           unit mysteryNumber_ = mysteryNumber();\n           bool isWinner = determineWinner(mysteryNumber_, display, guess);\n          if (isWinner == true) {\n        /* Player won */ \n        emit PlayerWon(msg.sender, msg.value);\n        msg.sender.transfer(msg.value * 2);\n         return (true, mysteryNumber_);\n         } else if (isWinner == false) {\n         /* Player lost */\n         return (false, mysteryNumber_);\n         }\n}\n```", "```\nfunction mysteryNumber() private view returns (unit) {\n         unit randomNumber = unit(blockhash(block.number-1))%10 + 1;\n         return randomNumber;\n}\n```", "```\nfunction determineWinner(unit number, unit display, bool guess)\n    internal pure returns (bool) {\n    if (guess == true} {\n        if (number > display) {\n            return true;\n        }\n    } else if (guess == false) {\n        if (number > display) {\n            return false;\n        }\n    }\n}\n```", "```\nrequire(online == true);\n```", "```\nmodifier isOwner() {\n   require(msg.sender == owner);\n   _;\n}\n```", "```\nfunction withdrawFunds() public isOwner {\n     msg.sender.transfer(address(this).balance);\n}\n```", "```\nmodifier isOwner() {\n    _;\n    require(msg.sender == owner);\n}\n```", "```\nmodifier isOwner() {\n    require(msg.sender == owner);\n     _;\n}\n```", "```\nmodifier onlyBy(address _account) {\n           if (msg.sender != _account) {\n                   revert();\n           }\n           _;\n}\n```", "```\nfunction changeOwner(address _newOwner) onlyBy(owner) {\n    owner = _newOwner;\n}\n```", "```\nmodifier onlyAfter(unit _time) {\n    if (now < _time) revert();\n    _;\n}\n\nfunction disown()\n     onlyBy(owner)\n     onlyAfter(creationTime + 6 weeks)\n{\n     delete owner;\n}\n```", "```\nmodifier costs(unit _amount) {\n    if (msg.value < _amount) {\n        revert;\n        _;\n    }\n    if (msg.value > _amount) {\n        msg.sender.send(amount - msg.value);\n    }\n}\n\nfunction forceOwnerChange(address _newOwner) costs(200 ether) {\n    owner = _newOwner;\n    if(unit(owner) & 0 == 1) {\n       return;\n    }\n}\n```"]