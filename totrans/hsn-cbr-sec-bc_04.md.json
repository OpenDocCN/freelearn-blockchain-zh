["```\n$ git clone https://github.com/hyperledger/education.git  \n$ cd education/LFS171x/fabric-material/tuna-app  \n```", "```\n$ docker rm -f $(docker ps -aq) \n```", "```\n $./startFabric.sh \n```", "```\nERROR: failed to register layer: rename /var/lib/docker/image/overlay2/layerdb/tmp/write-set-091347846 /var/lib/docker/image/overlay2/layerdb/sha256/9d3227c1793b7494e598caafd0a5013900e17dcdf1d7bdd31d39c82be04fcf28: file exists \n```", "```\n$ rm -rf \n~/Library/Containers/com.docker.docker/Data/*\n```", "```\n$ npm install \n$ node registerAdmin.js \n$ node registerUser.js \n$ node server.js \n```", "```\nError: [client-utils.js]: sendPeersProposal - Promise is rejected: Error: Connect Failed error from query =  { Error: Connect Failed at /Desktop/prj/education/LFS171x/fabric-material/tuna-app/node_modules/grpc/src/node/src/client.js:554:15 code: 14, metadata: Metadata { _internal_repr: {} } }  \n```", "```\n $ cd ~  $ rm -rf .hfc-key-store/. \n```", "```\n$ node registerAdmin.js \n// File Structure tuna-app/tuna-chaincode.go\n```", "```\n// queryAllTuna - requires no arguments  \nconst request = {  \nchaincodeId:'tuna-app',  \ntxId: tx_id,  \nfcn: 'queryAllTuna',  \nargs: ['']  \n};  \nreturn channel.queryByChaincode(request);\n```", "```\n// queryTuna - requires 1 argument  \nconst request = {  \nchaincodeId:'tuna-app',  \ntxId: tx_id,  \nfcn: 'queryTuna',  \nargs: ['1']  \n};  \nreturn channel.queryByChaincode(request);\n```", "```\n// changeTunaHolder - requires 2 argument  \nvar request = {  \nchaincodeId:'tuna-app',  \nfcn: 'changeTunaHolder',  \nargs: ['1', 'Alex'],  \nchainId: 'mychannel',  \ntxId: tx_id  \n};  \nreturn channel.sendTransactionProposal(request);  \n```", "```\nThe transaction has been committed on peer localhost:7053 event promise all complete and testing complete Successfully sent transaction to the orderer. Successfully sent Proposal and received ProposalResponse: Status - 200, message - \"OK\", metadata - \"\", endorsement signature: 0D 9  \n```", "```\n$ docker rm -f  \n$(docker ps -aq)  \n$ docker rmi -f $(docker images -a -q)  \n```"]