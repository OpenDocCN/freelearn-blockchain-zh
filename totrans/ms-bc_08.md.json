["```\n$ geth --TestNet\n\n```", "```\n{ \n  \"nonce\": \"0x0000000000000042\", \n    \"timestamp\": \"0x0\",    \"parentHash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\", \n    \"extraData\": \"0x0\", \n    \"gasLimit\": \"0x4c4b40\", \n    \"difficulty\": \"0x400\", \n    \"mixhash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\", \n    \"coinbase\": \"0x0000000000000000000000000000000000000000\", \n    \"alloc\": { } \n} \n\n```", "```\n[ \n\"enode:// 44352ede5b9e792e437c1c0431c1578ce3676a87e1f588434aff1299d30325c233c8d426fc57a25380481c8a36fb3be2787375e932fb4885885f6452f6efa77f@xxx.xxx.xxx.xxx:TCP_PORT\" \n] \n\n```", "```\n$ geth --datadir ~/.ethereum/privatenet init ./privether/privategenesis.json\n\n```", "```\n$ geth --datadir .ethereum/privatenet/ --networkid 786\n\n```", "```\n$ geth attach ipc:.ethereum/privatenet/geth.ipc\n\n```", "```\n> personal.newAccount(\"Password123\")\n\"0x76f11b383dbc3becf8c5d9309219878caae265c3\"\n\n```", "```\n> miner.setEtherbase(personal.listAccounts[0])\ntrue\n\n```", "```\n> eth.getBalance(eth.coinbase).toNumber();\n0\n\n```", "```\n> miner.start(2)\ntrue\n\n```", "```\n> miner.stop\ntrue\n\n```", "```\n> eth.getBalance(eth.coinbase).toNumber();\n2.72484375e+21\n\n```", "```\n> eth.gasPrice\n20000000000\n\n```", "```\n> eth.blockNumber\n587\n\n```", "```\n> debug.getBlockRlp(0)\n \"f901f7f901f2a0000000000000000000000000000000000000000000000000\n        0000000000000000a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a\n        7413f0a142fd40d49347940000000000000000000000000000000000000000\n        a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363\n        b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5\n        e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc00162\n        2fb5e363b421b9010000000000000000000000000000000000000000000000\n        00000000000000000000000000000000000000000000000000000000000000  \n        00000000000000000000000000000000000000000000000000000000000000\n        00000000000000000000000000000000000000000000000000000000000000\n        00000000000000000000000000000000000000000000000000000000000000\n        00000000000000000000000000000000000000000000000000000000000000\n        00000000000000000000000000000000000000000000000000000000000000\n        00000000000000000000000000000000000000000000000000000000000000\n        000000000000000000000000000000000082020080834c4b40808000a00000\n        00000000000000000000000000000000000000000000000000000000000088\n        0000000000000042c0c0\"\n\n```", "```\n> personal.unlockAccount\n        (\"0x76f11b383dbc3becf8c5d9309219878caae265c3\")\nUnlock account 0x76f11b383dbc3becf8c5d9309219878caae265c3\nPassphrase:\n\n```", "```\n> eth.sendTransaction({from:   \n        \"0x76f11b383dbc3becf8c5d9309219878caae265c3\", to:  \n        \"0xcce6450413ac80f9ee8bd97ca02b92c065d77abc\", value: 1000})\n\n```", "```\n> eth.sendTransaction({from: personal.listAccounts[0], to:   \n        personal.listAccounts[1], value: 1000})\n\n```", "```\n> web3.eth.getCompilers()\n[\"Solidity\"]\n\n```", "```\n$ ./Ethereum\\ Wallet --rpc ~/.ethereum/privatenet/geth.ipc\n\n```", "```\n--rpc http://127.0.0.1:8545\n\n```", "```\npragma solidity ^0.4.0; \ncontract SimpleContract2\n{ \n  uint x; \n  uint z; \n  function addition(uint x) returns (uint y)\n{ \n  z=x+5; \n  y=z; \n} \nfunction difference(uint x) returns (uint y)\n{ \n  z=x-5; \n  y=z; \n}  \nfunction division(uint x) returns (uint y) \n{ \n z=x/5; \n y=z; \n} \n\nfunction currValue() constant returns (uint) \n{ \n return z; \n} \n} \n\n```", "```\n$ sudo apt-get install solc\n\n```", "```\nsudo add-apt-repository ppa:ethereum/ethereum\nsudo apt-get update\n\n```", "```\n$ solc --version\nsolc, the solidity compiler commandline interface\nVersion: 0.4.6+commit.2dabbdf0.Linux.g++\n\n```", "```\nimran@drequinox-OP7010:~$ solc --gas contract1.sol\n======= SimpleContract =======\nGas estimation:\nconstruction:\n 97 + 54600 = 54697\nexternal:\n division(uint256):   230\n addition(uint256):   231\n difference(uint256): 253\ninternal:\n\n```", "```\nweb3.eth.compile.solidity(contractsourcecode)\n\n```", "```\n$ git clone https://github.com/ethereum/remix\nCloning into 'remix'...\nremote: Counting objects: 2185, done.\nremote: Compressing objects: 100% (213/213), done.\nremote: Total 2185 (delta 124), reused 0 (delta 0), pack-reused 1971\nReceiving objects: 100% (2185/2185), 1.12 MiB | 443.00 KiB/s, done.\nResolving deltas: 100% (1438/1438), done.\nChecking connectivity... done.\n\n```", "```\ncd remix\nnpm install\nnpm run build\n\n```", "```\n$ geth --datadir .ethereum/privatenet/ --networkid 786 --rpc --rpcapi 'web3,eth,debug' --rpcport 8001 --rpccorsdomain 'http://localhost:7777'\n\n```", "```\n$ npm run start_node\n> ethereum-remix@0.0.2-alpha.0.0.9 start_node /home/imran/remix\n> ./runNode.sh\nboth eth and geth has been found in your system\nrestart the command with the desired client:\nnpm run start_eth\nor\nnpm run start_geth\n\n```", "```\n$ npm run start_geth\n\n```", "```\ncurl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n```", "```\n$ git clone https://github.com/etherparty/explorer\n\n```", "```\nCloning into 'explorer'...\nremote: Counting objects: 253, done.\nremote: Total 253 (delta 0), reused 0 (delta 0), pack-reused 253\nReceiving objects: 100% (253/253), 51.20 KiB | 0 bytes/s, done.\nResolving deltas: 100% (130/130), done.\nChecking connectivity... done.\n\n```", "```\nimran@drequinox-OP7010:~$ cd explorer/\nimran@drequinox-OP7010:~/explorer$ npm start\n> EthereumExplorer@0.1.0 prestart /home/imran/explorer\n> npm install\n\n```", "```\ngeth --datadir .ethereum/privatenet/ --networkid 786 --rpc --rpccorsdomain 'http://localhost:8000'\n\n```", "```\nimran@drequinox-OP7010:~/explorer/app$ python -m SimpleHTTPServer 9900\nServing HTTP on 0.0.0.0 port 9900 ...\n\n```", "```\ngeth --datadir .ethereum/PrivateNet/ --networkid 786 --rpc --rpccorsdomain 'http://192.168.0.17:9900'\n\n```", "```\nnpm install -g ethereumjs-testrpc\n\n```", "```\n$testrpc\n\n```", "```\nbool v = true; \n\n```", "```\nuint256 x; \nuint y; \nint256 z; \n\n```", "```\nuint constant z=10+10; \n\n```", "```\naddress to = 0x6414cc08d148dce9ebf5a2d0b7c220ed2d3203da; \naddress from = this; \nif (to.balance < 10 && from.balance > 50) to.send(20); \n\n```", "```\nbytes32[10] bankAccounts;  \n\n```", "```\nbytes32[] trades;  \n\n```", "```\ntrades.length; \n\n```", "```\nuint8 x = 2; \n\n```", "```\n'packt' \n\"packt\" \n\n```", "```\n(hex'AABBCC'); \n\n```", "```\nenum Order{Filled, Placed, Expired }; \nOrder private ord; \nord=Order.Filled; \n\n```", "```\nfunction <nameofthefunction> (<parameter types> <name of the variable>) {internal|external} [constant] [payable] [returns (<return types> <name of the variable>)] \n\n```", "```\nuint[] OrderIds; \n\n```", "```\nStruct Trade \n{ \nuint tradeid; \nuint quantity; \nuint price; \nstring trader; \n} \n\n```", "```\nmapping (address => uint) offers; \n\n```", "```\nmapping (string => uint) bids; \nbids[\"packt\"] = 10; \n\n```", "```\nkeccak256(...) returns (bytes32) \n\n```", "```\necrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address) \n\n```", "```\nblock.number \n\n```", "```\ncontract valueChecker { \n    uint8 price=10; \n    event valueEvent(bool returnValue); \n    function Matcher(uint8 x) returns (bool) \n    { \n        if (x>=price) \n        { \n            valueEvent(true); \n            return true; \n\n        } \n     } \n} \n\n```", "```\ncontract valueChecker \n{ \n uint8 price=10; \n event valueEvent(bool returnValue); \n function Matcher(uint8 x) returns (bool) \n { \n  if (x>=price) \n  { \n   valueEvent(true); \n   return true;    \n  } \n } \n} \ncontract valueChecker2 is valueChecker\n{ \n function Matcher2() returns (uint) \n { \n  return price + 10; \n } \n} \n\n```", "```\nlibrary Addition \n{ \n function Add(uint x,uint y) returns (uint z) \n  { \n    return x + y; \n  } \n} \n\n```", "```\nImport \"Addition.sol\" \nfunction Addtwovalues() returns(uint) \n{ \n return Addition.Add(100,100); \n} \n\n```", "```\nfunction orderMatcher(uint x) private constant returns(bool returnvalue) \n\n```", "```\n            function <name of the function>(<parameters>) <visibility     \n            specifier> returns (<return data type> <name of the variable>) \n            { \n             <function body> \n            } \n\n    ```", "```\n            contract myContract  \n            { \n             function checkValues(uint x, uint y)  \n             { \n             } \n            } \n\n    ```", "```\n            contract myContract  \n            { \n             Function getValue() returns (uint z) \n             { \n              z=x+y; \n             } \n            } \n\n    ```", "```\n           function ()  \n           { \n            throw;  \n           } \n\n    ```", "```\npragma solidity ^0.5.0 \n\n```", "```\nImport \"module-name\"; \n\n```", "```\n$ geth --datadir .ethereum/privatenet/ --networkid 786 --rpc --rpcapi 'web3,eth,debug' --rpcport 8001 --rpccorsdomain 'http://localhost:7777'\n\n```", "```\n$ geth attach ipc:.ethereum/privatenet/geth.ipc\n\n```", "```\npragma solidity ^0.4.0; \ncontract valueChecker { \n    uint  price=10; \n    event valueEvent(bool returnValue); \n    function  Matcher (uint8 x) returns (bool) \n    { \n        if (x>=price) \n        { \n            valueEvent(true); \n            return true; \n        } \n     } \n} \n\n```", "```\n    > var simplecontractsource = \"pragma solidity ^0.4.0; contract  \n        valueChecker { uint price=10;event valueEvent(bool returnValue);    \n        function Matcher (uint8 x) returns (bool) { if (x>=price) \n        {valueEvent(true); return true; } } }\"\n\n    ```", "```\n     undefined\n\n    ```", "```\n    $ tr --delete '\\n' < valuechecker.sol > valuecheckersingleline.sol\n\n    ```", "```\n    > eth.getCompilers()\n    [\"Solidity\"]\n\n    ```", "```\n    > var  \n        simplecontractcompiled=eth.compile.solidity(simplecontractsource)\n    undefined\n\n    ```", "```\n    >var simplecontractinteractor=eth.contract\n        (simplecontractcompiled.valueChecker.info.abiDefinition);\n    undefined\n\n    ```", "```\n    > simplecontractinteractor.abi\n    [{\n     constant: false,\n     inputs: [{\n     name: \"x\",\n     type: \"uint8\"\n     }],\n     name: \"Matcher\",\n     outputs: [{\n     name: \"\",\n     type: \"bool\"\n     }],\n     payable: false,\n     type: \"function\"\n    }, {\n     anonymous: false,\n     inputs: [{\n     indexed: false,\n     name: \"returnValue\",\n     type: \"bool\"\n     }],\n     name: \"valueEvent\",\n     type: \"event\"\n    }]\n\n    ```", "```\n    > simplecontractcompiled.valueChecker.code\n\n    ```", "```\n     \"0x6060604052600a60005534610000575b60878061001c6000396000f36060604\n        05260e060020a6000350463f9d55e218114601c575b6000565b3460005760296004\n        35603d565b604080519115158252519081900360200190f35b6000805460ff83161\n        0608157604080516001815290517f3eb1a229ff7995457774a4bd31ef7b13b6f449\n        1ad1ebb8961af120b8b4b6239c9181900360200190a15060015b5b91905056\"\n\n    ```", "```\n    >var simplecontractTransaction = simplecontractinteractor.new({\n     from: eth.coinbase,\n     data: simplecontractcompiled.valueChecker.code,\n     gas: 2000000\n     },\n     function(err, contract) {\n     if (err) {\n     console.error(err);\n     } else {\n     console.log(contract);\n     console.log(contract.address);\n     }\n    });\n\n    ```", "```\n     Error: account is locked\n     Undefined\n\n    ```", "```\n     > personal.listAccounts\n     [\"0x76f11b383dbc3becf8c5d9309219878caae265c3\", \n        \"0xcce6450413ac80f9ee8bd97ca02b92c065d77abc\"]\n\n    ```", "```\n     > personal.unlockAccount\n        (\"0x76f11b383dbc3becf8c5d9309219878caae265c3\")\n     Unlock account 0x76f11b383dbc3becf8c5d9309219878caae265c3\n\n    ```", "```\n     Passphrase:\n     true\n\n    ```", "```\n     > Error: The contract code couldn't be stored, please check your      \n        gas amount.\n\n    ```", "```\n     Error: Exceeds block gas limit\n     undefined\n\n    ```", "```\n    > miner.start()\n    true\n\n    ```", "```\n     [object Object]\n    undefined\n    undefined\n    > [object Object]\n    0x94a1107f2585f0ab931c71f2f8f02e9f5ab888c0\n\n    ```", "```\n    > var simplecontractaddress=\n        \"0x94a1107f2585f0ab931c71f2f8f02e9f5ab888c0\"\n    Undefined\n\n    ```", "```\n    > var deployedaddress=eth.getCode(simplecontractaddress);\n    undefined\n    > deployedaddress\n    \"0x606060405260e060020a6000350463f9d55e218114601c575b6000565b346000\n        576029600435603d565b604080519115158252519081900360200190f35b6000805\n        460ff831610608157604080516001815290517f3eb1a229ff7995457774a4bd31ef\n        7b13b6f4491ad1ebb8961af120b8b4b6239c9181900360200190a15060015b5b919\n        05056\"\n    > eth.getBalance(simplecontractaddress)\n    0\n\n    ```", "```\n    simplecontractinstance = web3.eth.contract(simplecontractcompiled\n        .valueChecker.info.abiDefinition).at(simplecontractaddress);\n\n    ```", "```\n    > simplecontractinstance.Matcher.\n    simplecontractinstance.Matcher.apply               \n        simplecontractinstance.Matcher.constructor          \n        simplecontractinstance.Matcher.request \n    simplecontractinstance.Matcher.arguments           \n        simplecontractinstance.Matcher.estimateGas          \n        simplecontractinstance.Matcher.sendTransaction \n    simplecontractinstance.Matcher.bind            \n        simplecontractinstance.Matcher.getData         \n        simplecontractinstance.Matcher.toString \n    simplecontractinstance.Matcher.call            \n        simplecontractinstance.Matcher.length              \n        simplecontractinstance.Matcher.uint8 \n    simplecontractinstance.Matcher.caller          \n        simplecontractinstance.Matcher.prototype\n\n    ```", "```\n    > simplecontractinstance.Matcher.call(12)\n    true\n    > simplecontractinstance.Matcher.call(9)\n    false\n    > simplecontractinstance.Matcher.call(0)\n    false\n    > simplecontractinstance.Matcher.call(12)\n    true\n\n    ```", "```\n--rpcapi web3\n\n```", "```\n    $ curl --request POST --data    \n        '{\"jsonrpc\":\"2.0\",\"method\":\"personal_listAccounts\",\"params\":    \n        [],\"id\":4}' localhost:8001\n\n    ```", "```\n    {\"jsonrpc\":\"2.0\",\"id\":4,\"result\":    \n        [\"0x76f11b383dbc3becf8c5d9309219878caae265c3\",\"0xcce6450413ac80f9\n        ee8bd97ca02b92c065d77abc\"]}\n\n    ```", "```\n$ npm install web3\n\n```", "```\nweb3.setProvider(new web3.providers.HttpProvider('http://localhost:8001')); \n\n```", "```\nif (typeof web3 !== 'undefined')\n{ \n  web3 = new Web3(web3.currentProvider); \n} \nelse \n{ \n  web3 = new Web3(new     \n  Web3.providers.HttpProvider(\"http://localhost:8001\")); \n} \n\n```", "```\n        simplecontractcompiled={ \n        valueChecker: { \n        code:         \n        \"0x6060604052600a60005534610000575b60878061001c6000396000f360606040\n        5260e060020a6000350463f9d55e218114601c575b6000565b34600057602960043\n        5603d565b604080519115158252519081900360200190f35b6000805460ff83161\n        0608157604080516001815290517f3eb1a229ff7995457774a4bd31ef7b13b6f449\n        1ad1ebb8961af120b8b4b6239c9181900360200190a15060015b5b91905056\", \n        info: \n        { \n        abiDefinition: \n        [{ \n        constant: false, \n        inputs: \n        [{ \n        name: \"x\", \n        type: \"uint8\" \n        }], \n        name: \"Matcher\", \n        outputs: \n        [{ \n        name: \"\", \n        type: \"bool\" \n        }], \n        payable: false, \n        type: \"function\" \n        },\n        { \n        anonymous: false, \n        inputs: \n        [{ \n        indexed: false, \n        name: \"returnValue\", \n        type: \"bool\" \n        }], \n        name: \"valueEvent\", \n        type: \"event\" \n        }], \n        compilerOptions: \"--combined-json bin,abi,userdoc,devdoc --add-       \n        std --optimize\",compilerVersion: \"0.4.6\",   \n        developerDoc: \n        { \n        methods: {} \n        }, \n        language: \"Solidity\", \n        languageVersion: \"0.4.6\", \n        source: \"pragma solidity ^0.4.0; contract valueChecker { uint         \n        price=10; event valueEvent(bool returnValue);                                                                      \n        function Matcher (uint8 x) returns (bool) { if (x>=price) {       \n        valueEvent(true); return true; } } }\", \n        userDoc: { \n        methods: {} \n        } \n        } \n        } \n        } \n\n    ```", "```\n        if (typeof web3 !== 'undefined')\n        { \n        web3 = new Web3(web3.currentProvider); \n        } \n        else \n        { \n         web3 = new Web3(new    \n         Web3.providers.HttpProvider(\"http://localhost:8001\"));          \n        } \n        console.log(\"Coinbase: \" + web3.eth.coinbase); \n        var simplecontractaddress = \"0x94a1107f2585f0ab931c71f2f8f02e9\n                                     f5ab888c0\"; \n         simplecontractinstance =      \n         web3.eth.contract(simplecontractcompiled.valueChecker\n         .info.abiDefinition).at(simplecontractaddress); \n         var code = web3.eth.getCode(simplecontractaddress); \n         console.log(\"Contract balance: \" +                            \n         web3.eth.getBalance(simplecontractaddress)); \n         console.log(\"simple contract code\" + code); \n         function callMatchertrue()\n         { \n            var txn = simplecontractinstance.Matcher.call(12);{ \n         }; \n         console.log(\"return value: \" + txn); \n         } \n         function callMatcherfalse() \n         { \n         var txn = simplecontractinstance.Matcher.call(1);{ \n         }; \n         console.log(\"return value: \" + txn); \n         } \n\n    ```", "```\nif (typeof web3 !== 'undefined')  \n{ \n  web3 = new Web3(web3.currentProvider); \n} \n else  \n{ \n  web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:\n         8001\"));                                                 \n} \n\n```", "```\nconsole.log(\"Coinbase: \" + web3.eth.coinbase); \n\n```", "```\nvar simplecontractaddress = \"0x94a1107f2585f0ab931c71f2f8f02e9f5ab888c0     \n                             \";\n\n```", "```\nsimplecontractinstance = web3.eth.contract(simplecontractcompiled\n                                 .valueChecker.info.abiDefinition)\n                                 .at(simplecontractaddress); \n\n```", "```\nvar code = web3.eth.getCode(simplecontractaddress); \nconsole.log(\"simple contract code\" + code); \n\n```", "```\nfunction callMatchertrue() \n{ \n var txn = simplecontractinstance.Matcher.call(12);{ \n}; \nconsole.log(\"return value: \" + txn); \n} \n\nfunction callMatcherfalse()\n{ \nvar txn = simplecontractinstance.Matcher.call(1);{ \n}; \nconsole.log(\"return value: \" + txn); \n} \n\n```", "```\nfunction  Matcher (uint8 x) returns (bool) \n\n```", "```\nvar txn = simplecontractinstance.Matcher.call(12); \n\n```", "```\n<html> \n<head> \n    <title>SimpleContract Interactor</title> \n    <script src=\"img/web3.min.js\"></script> \n    <script src=\"img/simplecontractcompiled.js\"></script> \n    <script src=\"img/simplecontract.js\"></script> \n</head> \n<body> \n    <button onclick=\"callMatchertrue()\">callTrue</button> \n    <button onclick=\"callMatcherfalse()\">callFalse</button> \n</body> \n</html> \n\n```", "```\nsimplecontractinstance.Matcher.call(12) \n\n```", "```\nsimplecontractinstance.Matcher.call(1) \nfunction callMatchertrue() \n{ \n var txn = simplecontractinstance.Matcher.call(12);{ \n}; \nconsole.log(\"return value: \" + txn); \n} \n\n```", "```\nsimplecontractinstance.Matcher.call(1) \n\n```", "```\nconsole.log(\"return value: \" + txn); \nfunction callMatcherfalse() \n{ \n var txn = simplecontractinstance.Matcher.call(1);{ \n}; \nconsole.log(\"return value: \" + txn); \n} \n\n```", "```\ndrequinox@drequinox-OP7010:~/testdapp$ nodejs --version\nv7.2.1\ndrequinox@drequinox-OP7010:~/testdapp$ node --version\nv7.2.1\n\n```", "```\n$ sudo npm install -g truffle\n\n```", "```\nhttps://github.com/ConsenSys/truffle.git\n\n```", "```\nmkdir testdapp\n\n```", "```\n~/testdapp$ truffle init\n\n```", "```\ndrequinox@drequinox-OP7010:~/testdapp$ tree\n.\n├── app\n│   ├── images\n│   ├── index.html\n│   ├── javascripts\n│   │   └── app.js\n│   └── stylesheets\n│       └── app.css\n├── contracts\n│   ├── ConvertLib.sol\n│   ├── MetaCoin.sol\n│   └── Migrations.sol\n├── migrations\n│   ├── 1_initial_migration.js\n│   └── 2_deploy_contracts.js\n├── test\n│   └── metacoin.js\n└── truffle.js\n7 directories, 10 files\n\n```", "```\nMetaCoin.sol \n\n```", "```\ncontract MetaCoin { \n        mapping (address => uint) balances; \n\n```", "```\n~/testdapp$ truffle compile\nCompiling ConvertLib.sol...\nCompiling MetaCoin.sol...\nCompiling Migrations.sol...\nWriting artifacts to ./build/contracts\n~/testdapp$\n\n```", "```\n~/testdapp$ tree build/\nbuild/\n└── contracts\n ├── ConvertLib.sol.js\n ├── MetaCoin.sol.js\n └── Migrations.sol.js\n1 directory, 3 files\n\n```", "```\n~/testdapp$ cd migrations/\n~/testdapp/migrations$ ls -ltr\n-rw-rw-r-- 1 drequinox drequinox 124 Dec 12 12:57 2_deploy_contracts.js\n-rw-rw-r-- 1 drequinox drequinox  72 Dec 12 12:57 1_initial_migration.js\n~/testdapp/migrations$ cat 2_deploy_contracts.js\nmodule.exports = function(deployer) \n{\n deployer.deploy(ConvertLib);\n deployer.autolink();\n deployer.deploy(MetaCoin);\n};\ndrequinox@drequinox-OP7010:~/testdapp/migrations$ cat 1_initial_migration.js\nmodule.exports = function(deployer) \n{\n deployer.deploy(Migrations);\n};\n\n```", "```\nmodule.exports = { \n  build: { \n    \"index.html\": \"index.html\", \n    \"app.js\": [ \n      \"javascripts/app.js\" \n    ], \n    \"app.css\": [ \n      \"stylesheets/app.css\" \n    ], \n    \"images/\": \"images/\" \n  }, \n  rpc: { \n    host: \"localhost\", \n    port: 8001 \n  } \n}; \n\n```", "```\n~/testdapp$ truffle migrate\n\n```", "```\nRunning migration: 1_initial_migration.js\n Deploying Migrations...\nError encountered, bailing. Network state unknown. Review successful transactions manually.\nError: **account is locked** \n at Object.InvalidResponse (/usr/lib/node_modules/truffle/node_modules/ether-pudding/node_modules/web3/lib/web3/errors.js:35:16)\n at /usr/lib/node_modules/truffle/node_modules/ether-pudding/node_modules/web3/lib/web3/requestmanager.js:86:36\n at exports.XMLHttpRequest.request.onreadystatechange (/usr/lib/node_modules/truffle/node_modules/web3/lib/web3/httpprovider.js:114:13)\n at exports.XMLHttpRequest.dispatchEvent (/usr/lib/node_modules/truffle/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:591:25)\n at setState (/usr/lib/node_modules/truffle/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:610:14)\n at IncomingMessage.<anonymous> (/usr/lib/node_modules/truffle/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:447:13)\n at emitNone (events.js:91:20)\n at IncomingMessage.emit (events.js:185:7)\n at endReadableNT (_stream_readable.js:974:12)\n at _combinedTickCallback (internal/process/next_tick.js:74:11)\n at process._tickDomainCallback (internal/process/next_tick.js:122:9)\n\n```", "```\n> personal.listAccounts\n[\"0x76f11b383dbc3becf8c5d9309219878caae265c3\", \"0xcce6450413ac80f9ee8bd97ca02b92c065d77abc\"]\n\n```", "```\n> personal.unlockAccount(\"0x76f11b383dbc3becf8c5d9309219878caae265c3\")\nUnlock account 0x76f11b383dbc3becf8c5d9309219878caae265c3\nPassphrase:\ntrue\n\n```", "```\n~/testdapp$ truffle migrate\n\n```", "```\nRunning migration: 1_initial_migration.js\n Deploying Migrations...\n Migrations: 0xf444cce0cee00cab4d04bcfc0005626b8b02add8\nSaving successful migration to network...\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n Deploying ConvertLib...\n ConvertLib: 0x2ba8a4a75a6b845bf482923cff29ecc98cd68d90\n Linking ConvertLib to MetaCoin\n Deploying MetaCoin...\n MetaCoin: 0x0be9c5de978fa927b93a5c4faab31312cea5704a\nSaving successful migration to network...\nSaving artifacts...\n~/testdapp$\n\n```", "```\n> eth.getBalance(\"0x0be9c5de978fa927b93a5c4faab31312cea5704a\")\n0\n> eth.getCode(\"0x0be9c5de978fa927b93a5c4faab31312cea5704a\")\n\"0x606060405260e060020a60003504637bd703e8811461003457806390b98a1114610056578063f8b2cb4f1461007d575b610000565b346100005761004460043561009f565b60408051918252519081900360200190f35b3461000057610069600435602435610119565b604080519115158252519081900360200190f35b34610000576100446004356101b1565b60408051918252519081900360200190f35b6000732ba8a4a75a6b845bf482923cff29ecc98cd68d906396e4ee3d6100c4846101b1565b60026000604051602001526040518360e060020a028152600401808381526020018281526020019250505060206040518083038186803b156100005760325a03f415610000575050604051519150505b919050565b600160a060020a03331660009081526020819052604081205482901015610142575060006101ab565b600160a060020a0333811660008181526020818152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060015b92915050565b600160a060020a0381166000908152602081905260409020545b91905056\"\n\n```", "```\n    ~/testdapp$ truffle console\n\n    ```", "```\n    truffle(default)> MetaCoin.deployed().address\n    '0x0be9c5de978fa927b93a5c4faab31312cea5704a'\n    truffle(default)>\n\n    ```", "```\n    truffle(default)>      \n            MetaCoin.deployed().getBalance.call(web3.eth.accounts[0])\n    { [String: '8750'] s: 1, e: 3, c: [ 8750 ] }\n\n    ```", "```\n    truffle(default)>         \n            MetaCoin.deployed().sendCoin(\"0xcce6450413ac80f9ee8bd97ca02b92c\n            065d77abc\",50, {from:\"0x76f11b383dbc3becf8c5d9309219878caae265c \n            3\"})\n     '0xb8969149fcfb54ec9beac31af1fc86c386f9aa42cb13d2eb9bf946993198\n           6e0f'\n\n    ```", "```\n    truffle(default)>      \n            MetaCoin.deployed().getBalance.call(web3.eth.accounts[1])\n    { [String: '1250'] s: 1, e: 3, c: [ 1250 ] }\n    truffle(default)>\n\n    ```", "```\n~/testdapp$ truffle test\n\n```", "```\ncontract('MetaCoin', function(accounts) \n{ \n it(\"should put 10000 MetaCoin in the first account\", \n function() \n { \n  var meta = MetaCoin.deployed();  \n  return meta.getBalance.call(accounts[0]).then(function(balance)\n  { \n   assert.equal(balance.valueOf(), 10000, \"10000 wasn't in the first     \n   account\"); \n  }); \n }); \n}); \n\n```", "```\nassert.equal(balance.valueOf(), 10000, \"10000 wasn't in the first account\"); \n\n```", "```\nassert.equal(balance.valueOf(), 1000, \"10000 wasn't in the first account\"); \n\n```", "```\nError: timeout of 120000ms exceeded. Ensure the done() callback is being called in this test.\n\n```", "```\n~/testdapp$ truffle build\n\n```", "```\nbuild/\n├── app.css\n├── app.js\n├── contracts\n│   ├── ConvertLib.sol.js\n│   ├── MetaCoin.sol.js\n│   └── Migrations.sol.js\n├── images\n└── index.html\n\n```", "```\n    $ mkdir simpleTest\n\n    ```", "```\n    $ truffle init\n\n    ```", "```\n    rm -r test/* contracts/* migrations/*\n\n    ```", "```\n       pragma solidity ^0.4.2; \n       contract Addition\n       { \n        uint8 x; \n        function addx(uint8 y, uint8 z ) \n        { \n         x = y + z; \n        } \n    function retrievex() constant returns (uint8)\n    { \n     return x; \n    } \n    } \n    Migrations.sol: \n    pragma solidity ^0.4.2; \n    contract Migrations \n    { \n      address public owner; \n      uint public last_completed_migration; \n      modifier restricted()\n     { \n        if (msg.sender == owner) _; \n     } \n     function Migrations() \n     { \n      owner = msg.sender; \n     } \n      function setCompleted(uint completed) restricted \n      { \n        last_completed_migration = completed; \n      } \n      function upgrade(address new_address) restricted \n      { \n       Migrations upgraded = Migrations(new_address); \n       upgraded.setCompleted(last_completed_migration); \n      } \n      } \n\n    ```", "```\n            contract('Addition', function(accounts) \n            { \n            it(\" 100 + 100 = 200 \", function()\n            { \n            var AddContract = Addition.deployed(); \n            AddContract.addx(100, 100,{from:accounts[0],gas:1000000})                                      \n            .then(function(a) \n            { \n            return AddContract.retrievex.call().then(function(Result)\n            { \n            assert.equal(Result, 200, \"100 + 100 = 200 is expected\"); \n            }); \n            }); \n            });  \n            }); \n\n    ```", "```\n            module.exports = function(deployer) \n            { \n             deployer.deploy(Migrations); \n            }; \n\n    ```", "```\n            module.exports = function(deployer)\n            { \n             deployer.deploy(Addition); \n             deployer.autolink(); \n            }; \n\n    ```", "```\n    ~/simpleTest$ truffle compile\n    Compiling Addition.sol...\n    Compiling Migrations.sol...\n    Writing artifacts to ./build/contracts\n\n    ```", "```\n    ~/simpleTest$ truffle migrate\n    Running migration: 2_deploy_contracts.js\n     Deploying Addition...\n     Addition: 0x73934227a1ce7fc44152b7451626759a00b0275c\n    Saving successful migration to network...\n    Saving artifacts...\n\n    ```", "```\n    ~/simpleTest$ truffle test\n\n    ```", "```\ntruffle(default)> Addition.address\n'0x73934227a1ce7fc44152b7451626759a00b0275c'\n\n```", "```\ntruffle(default)> Addition.deployed().addx(100,100)\n'0xae6f51782c1bcf04ec34dd54ee31da626dc138993ea813bc6c3c1fe0790b130e'\ntruffle(default)> '0xb9f8633fbd626466ee2c2f24952a5fca3134f4e7d08f39a4d26ac2689e22b653'\n\n```", "```\ntruffle(default)> Addition.deployed().retrievex()\n{ [String: '200'] s: 1, e: 2, c: [ 200 ] }\n\n```", "```\npragma solidity ^0.4.0; \n\n```", "```\ncontract PatentIdea { \n\n```", "```\nmapping (bytes32 => bool) private hashes; \n\n```", "```\nbool alreadyStored; \n\n```", "```\nevent ideahashed(bool); \n\n```", "```\n function saveHash(bytes32 hash) private \n{ \n hashes[hash] = true; \n} \n\n```", "```\nfunction SaveIdeaHash(string idea) returns (bool)\n{ \n var hashedIdea = HashtheIdea(idea); \n if (alreadyHashed(HashtheIdea(idea)))  \n { \n  alreadyStored=true; \n  ideahashed(false); \n  return alreadyStored; \n } \n saveHash(hashedIdea); \n ideahashed(true); \n} \n\n```", "```\nfunction alreadyHashed(bytes32 hash) constant private returns(bool) \n{ \n return hashes[hash]; \n} \n} \n\n```", "```\nfunction isAlreadyHashed(string idea) constant  returns (bool) \n{ \n var hashedIdea = HashtheIdea(idea); \n return alreadyHashed(hashedIdea); \n} \n\n```", "```\n  function HashtheIdea(string idea) constant private returns (bytes32) { \n return sha3(idea); \n} \n\n```", "```\npragma solidity ^0.4.0; \ncontract PatentIdea \n{ \n  mapping (bytes32 => bool) private hashes; \n  bool alreadyStored; \n  event ideahashed(bool); \n\n  function saveHash(bytes32 hash) private \n  { \n    hashes[hash] = true; \n  } \n\n  function SaveIdeaHash(string idea) returns (bool)\n  { \n    var hashedIdea = HashtheIdea(idea); \n   if (alreadyHashed(HashtheIdea(idea)))  \n   { \n       alreadyStored=true; \n       ideahashed(false); \n       return alreadyStored; \n    } \n       saveHash(hashedIdea); \n       ideahashed(true); \n    } \n\n  function alreadyHashed(bytes32 hash) constant private returns(bool) \n  { \n    return hashes[hash]; \n  } \n\n  function isAlreadyHashed(string idea) constant  returns (bool) \n  { \n    var hashedIdea = HashtheIdea(idea); \n    return alreadyHashed(hashedIdea); \n  } \n\n   function HashtheIdea(string idea) constant private returns (bytes32)    \n   { \n    return sha3(idea); \n   } \n  } \n\n```", "```\n~$ mkdir ideapatent\n~$ cd ideapatent/\n\n```", "```\n~/ideapatent$ truffle init\n\n```", "```\n~/ideapatent/contracts$ rm MetaCoin.sol ConvertLib.sol\n\n```", "```\nrpc: \n  { \n    host: \"localhost\", \n    port: 8001 \n  } \n\n```", "```\nmodule.exports = function(deployer) \n{ \n  deployer.deploy(PatentIdea); \n  deployer.autolink(); \n}; \n\n```", "```\n~/ideapatent$ truffle compile\nCompiling Migrations.sol...\nCompiling PatentIdea.sol...\nWriting artifacts to ./build/contracts\n\n```", "```\n~/ideapatent$ truffle migrate\nRunning migration: 1_initial_migration.js\n Deploying Migrations...\n Migrations: 0x34d63de23de9c9b48251cec94fff427b94976109\nSaving successful migration to network...\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n Deploying PatentIdea...\n PatentIdea: 0x515fd6a5dbc1eb609dc1700f73be040d9db50d4b\nSaving successful migration to network...\nSaving artifacts...\n\n```", "```\n~/ideapatent$ truffle console\n\n```", "```\ntruffle(default)> PatentIdea.deployed().SaveIdeaHash(\"MyIdea\")\n'0x8644dc66f1173a9103034e17b761f8871ab10ef2a7d19bec9c7eb7164272b8a3'\n\n```", "```\ntruffle(default)> PatentIdea.deployed().isAlreadyHashed(\"MyIdea\")\ntrue\n\n```", "```\ntruffle(default)> PatentIdea.deployed().isAlreadyHashed(\"MyOtherIdea\")\nfalse\ntruffle(default)>\n\n```", "```\nimport \"dev.oraclize.it/api.sol\"; \ncontract MyOracleContract is usingOraclize \n{ \n function MyOracleContract(){ \n} \n\n```", "```\noraclize_query(\"URL\", \"api.somewebsite.net/price?stock=XYZ\"); \n\n```", "```\n    $ curl https://dist.ipfs.io/go-ipfs/v0.4.4/go-     \n            ipfs_v0.4.4_linux-amd64.tar.gz -O\n\n    ```", "```\n    $ tar xvfz go-ipfs_v0.4.4_linux-amd64.tar.gz\n\n    ```", "```\n    $ mv go-ipfs/ipfs /usr/local/bin/ipfs\n\n    ```", "```\n    imran@drequinox-OP7010:~$ ipfs init\n    initializing ipfs node at /home/imran/.ipfs\n    generating 2048-bit RSA keypair...done\n    peer identity: Qmbc726pLS9nUQjUbeJUxcCfXAGaXPD41jAszXniChJz62\n    to get started, enter:\n     ipfs cat        \n            /ipfs/QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG/readme\n\n    ```", "```\n    imran@drequinox-OP7010:~$ ipfs daemon\n    Initializing daemon...\n    Swarm listening on /ip4/127.0.0.1/tcp/4001\n    Swarm listening on /ip4/192.168.0.17/tcp/4001\n    Swarm listening on /ip4/86.15.44.209/tcp/4001\n    Swarm listening on /ip4/86.15.44.209/tcp/41608\n    Swarm listening on /ip6/::1/tcp/4001\n    API server listening on /ip4/127.0.0.1/tcp/5001\n    Gateway (readonly) server listening on /ip4/127.0.0.1/tcp/8080\n    Daemon is ready\n\n    ```", "```\n    ~/sampleproject/build$ ipfs add --recursive --progress .\n    added QmVdYdY1uycf32e8NhMVEWSufMyvcj17w3DkUt6BgeAtx7      \n            build/app.css\n    added QmSypieNFeiUx6Sq7moAVCsgQhSY3Bh9ziwXJAxqSG5Pcp      \n            build/app.js\n    added QmaJWMjD767GvuwuaLpt5tck9dTVCZPJa9sDcr8vdcJ8pY      \n            build/contracts/ConvertLib.sol.js\n    added QmQdz9eG2Qd5kwaU86kWebDGPqXBWj1Dmv9MN4BRzt2srf     \n            build/contracts/MetaCoin.sol.js\n    added QmWpvBjXTP4HutEsYUh3JLDi8VYp73SKNJi4aX1T6jwcmG      \n            build/contracts/Migrations.sol.js\n    added QmQs7j6NpA1NMueTXKyswLaHKq3XDUCRay3VrC392Q4JDK     \n            build/index.html\n    added QmPvWzyTEfLQnozDTfgdAAF4W9BUb2cDq5KUUrpHrukseA     \n            build/contracts\n    added QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn      \n            build/images\n    added QmSxpucr6J9rX3XQ3MBG8cVzLCrQFFKmMkTmpcNpjbtf3j build\n\n    ```", "```\n    /build$ ipfs pin add QmSxpucr6J9rX3XQ3MBG8cVzLCrQFFKmMkTmpcNpjbtf3j\n    pinned QmSxpucr6J9rX3XQ3MBG8cVzLCrQFFKmMkTmpcNpjbtf3j recursively\n\n    ```"]