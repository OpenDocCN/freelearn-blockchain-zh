- en: Ethereum and Smart Contracts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ethereum is one of the most prominent projects in the blockchain ecosystem.
    It was officially launched in July 2015 in order to overcome some of Bitcoin's
    major limitation. A new programming language was created to enable the development
    of much more sophisticated operations than those used in Bitcoin. The goal of
    Ethereum is to allow the creation of **decentralized applications** (**dApps**)
    upon its infrastructure with the help of a unit of account called Ether, facilitating
    the developer's job by solely focusing on the service rather than the protocol.
    Ethereum was the first platform to introduce new concepts such as smart contracts
    and dApps, which brought to blockchain technology more user-friendliness and,
    of course, more applications for the end users than a sole cryptocurrency such
    as Bitcoin. One could now develop from scratch a new application based on Ethereum's easy
    and already-running infrastructure. The development of many dApps followed the
    launch, which contributed to a wide democratization of the blockchain technology.
    Today, Ethereum supports more than 1,800 dApps, which makes it the largest public
    blockchain platform.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will give you an overview of the differences and similarities between
    Bitcoin and Ethereum. Analyzing Ethereum in relation to Bitcoin is a good starting
    point to grasp the important advancements Ethereum brought to the blockchain ecosystem.
    The chapter will then give an explanation of the **Ethereum Virtual Machine**
    (**EVM**), a *world computer* enabling the creation of dApps. We will also look
    at smart contracts and the concept of gas, which always come along together. Finally,
    we will explain the differences between the consensus algorithm used in Bitcoin
    and the one that Ethereum tries to implement.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will address the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin versus Ethereum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The EVM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing proof-of-work and proof-of-stake
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-world applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which is better, Bitcoin or Ethereum?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we learned all about Bitcoin—a cryptocurrency offering
    an alternative to traditional centralized payment systems based on a blockchain,
    which is a decentralized, shared, transparent, and secured database storing every
    transaction occurring on the network. Because Bitcoin is increasingly being used
    as a means of payment in retail and online stores, it is now seen as an asset
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Just like any other asset class or investment product, Bitcoin suffers from
    the evolution of the financial markets while its supporters regard it for what
    it really is—a digital currency allowing almost instantaneous, secured, and cheap
    financial transactions between individuals across the globe.
  prefs: []
  type: TYPE_NORMAL
- en: 'In these terms, Ethereum is almost the same:'
  prefs: []
  type: TYPE_NORMAL
- en: It is a cryptocurrency (called Ether) enabling people to make financial transactions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is backed by a blockchain that is also relying on the proof-of-work consensus
    protocol.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum is currently moving toward a proof-of-stake consensus protocol throughout
    several updates and will reach its final version between 2020 and 2021\. But more
    on that in the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Since the creation of Bitcoin in 2009, there has not been any major advancement
    in the ecosystem. This was until the creation of Ethereum, which took blockchain
    and cryptocurrencies to the next level. What differentiates Ethereum from Bitcoin
    is the applications running on its blockchain. While the sole application running
    on Bitcoin's blockchain is Bitcoin, the so-called cryptocurrency, the Ethereum
    blockchain, on the other hand, can do much more. There are an unbelievable number
    of applications running on it, including the cryptocurrency Ether, which is used
    as a means of payment and which is very similar to Bitcoin.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum is often defined as a *world computer* or *platform* that can be used
    by anyone to create or operate dApps based on smart contracts. You can think of
    it as the Apple App Store or Google Play Store, in which you can buy and use different
    applications. However, Ethereum is decentralized, thus not owned by anyone, unlike
    Apple or Google, which centralize data and payments on their servers.
  prefs: []
  type: TYPE_NORMAL
- en: Another difference with Bitcoin is that while Bitcoin's inventor, **Satoshi
    Nakamoto**, remains unknown until now, Ethereum's founder is very popular in the
    ecosystem. His name is **Vitalik Buterin**, and he is a Russian-born Canadian
    programmer who came up with Ethereum's proposition in 2013. Just like any other
    blockchain, Ethereum relies on people powering the network to run a software on
    their computer. For Bitcoin, this software is BitcoinCore. For Ethereum, it is
    called the EVM.
  prefs: []
  type: TYPE_NORMAL
- en: The EVM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The EVM is like Windows or macOS, an operating system reading and understanding
    programs written in Ethereum''s specific language: Solidity. It is a Turing-complete
    software that enables anyone to run any program, making the process of creating
    blockchain-based applications much easier and more efficient than ever before.'
  prefs: []
  type: TYPE_NORMAL
- en: That is why there are thousands of different applications running on Ethereum's
    blockchain, because you do not have to write an entirely new language to be able
    to build an application.
  prefs: []
  type: TYPE_NORMAL
- en: A Turing-complete machine is a concept of a machine that can calculate anything
    if it has unlimited memory available. Actual computers have to operate on limited
    memory, therefore they cannot be called Turing-complete. The Ethereum blockchain,
    on the other hand, is a distributed Turing-complete program.
  prefs: []
  type: TYPE_NORMAL
- en: Say you want to create a new coin that would be used only in a certain kind
    of shops. With the EVM, you do not have to build a blockchain from scratch but
    rather write a specific program in it and pay with Ethereum's native cryptocurrency,
    Ether, to spread it across the network and allow anyone to use it. We call this
    type of program a smart contract.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding smart contracts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand smart contracts, let's take a real application that was created
    by Axa, a French leading insurance group. In September 2017, Axa launched an application
    called **f****izzy**, a cancellation insurance product that automatically reimburses
    clients subjected to delayed flights.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on Ethereum, fizzy''s smart contract stores the insurance subscribed
    by policyholders in a secure manner. It then connects to global air traffic databases
    to check whether a flight has been delayed and automatically triggers the compensation
    according to these parameters. This product offers a frictionless experience to
    the user and has been a great success for Axa. The following is a screenshot of
    Axa''s **fizzy** landing page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20c09a41-c089-4e59-a335-b9bac821e057.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In short, a smart contract is a code written on the blockchain that applies
    the following rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d92347ff-269b-48d1-a70e-5954487b6df4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For fizzy, it is rewritten as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bfd29981-71b7-4f95-8a68-cca4eb2260fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Ethereum considers smart contracts and human users as the same. Both can send
    and receive Ether. However, smart contracts can execute certain actions when predefined
    conditions written in the contract are met.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take another simple but self-evident example.
  prefs: []
  type: TYPE_NORMAL
- en: Consider two people betting on who's going to win the Rugby World Cup in 2019\.
    Both agree to the condition that the loser gives $50 to the winner.
  prefs: []
  type: TYPE_NORMAL
- en: How do we ensure that the loser will indeed pay the winner?
  prefs: []
  type: TYPE_NORMAL
- en: Either both players trust each other because they have been friends for a long
    time or get along very well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If they do not know each other, they have the possibility to sign a legal agreement.
    If there is a dispute on the payment, they could refer to the legal agreement,
    but the fees and time to get the situation fixed would be really high and harrowing
    for each other.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another possibility would be for them to give $50 each to a common trusted friend
    who would take care of the prize and would give it to the winner. But what if
    the so-called trusted friend runs away with the money?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I think it's easy to see that every option comes with its own downsides. Ethereum,
    however, can solve this problem using the smart contract feature.
  prefs: []
  type: TYPE_NORMAL
- en: The smart contract is like the trusted friend except it's in code. It will ensure
    that the winner genuinely receives the prize on the day we know the 2019 World
    Cup winning team.
  prefs: []
  type: TYPE_NORMAL
- en: A smart contract, once written, cannot be edited or altered. Once shared across
    the network, the conditions listed in the smart contract will be executed no matter
    what, thereby becoming unalterable.
  prefs: []
  type: TYPE_NORMAL
- en: And because developers can write unreasonable code or statements that have infinite
    loops causing a node to get stuck in the execution of a smart contract, Ethereum’s
    developers came up with a way out. They invented the gas.
  prefs: []
  type: TYPE_NORMAL
- en: Gas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gas is the cost of electricity, storage, and computation power spent by the
    miners to process a smart contract. Gas is a tiny portion of Ether.
  prefs: []
  type: TYPE_NORMAL
- en: '*“Because all these different actors [the nodes] are providing their resources
    to run the platform, you need to pay them for providing their resources.”** -
    Ethereum''s co-founder Joseph Lubin*'
  prefs: []
  type: TYPE_NORMAL
- en: When executing a smart contract, a maximum level of gas is defined by the developer,
    ensuring that when it is reached, the smart contract stops being executed, preventing
    the nodes from running a poorly coded smart contract.
  prefs: []
  type: TYPE_NORMAL
- en: 'Antonio Madeira, Head of Advertising at [cryptocompare.com](https://www.cryptocompare.com),
    has a nice explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"The more complex the commands you wish to execute, the more gas (and Ether)
    you have to pay. For example, if A wants to send B, 1 Ether unit—there would be
    a total cost of 1.00001 Ether to be paid by A. However if A wanted to form a contract
    with B depending on the future price of Ether, there would be more lines of code
    executable and more of an onus or energy consumption placed on the distributed
    Ethereum network—and therefore A would have to pay more than the 1 Gas done in
    the transaction."*'
  prefs: []
  type: TYPE_NORMAL
- en: Even though dApps have many advantages, their relying smart contract can sometimes
    incorporate flaws. Do not forget that their code is written by humans!
  prefs: []
  type: TYPE_NORMAL
- en: Since a smart contract is immutable, the only way to correct the code is to
    reach a network consensus to agree to rewrite the code.
  prefs: []
  type: TYPE_NORMAL
- en: The reason why Ether is not the currency used to process smart contract is that
    Ether is too sensitive to market value. By linking gas to Ether and fixing the
    gas price to specific actions, the Ethereum community has ensured that the network
    will always perform the execution of smart contracts regardless of Ether's price.
  prefs: []
  type: TYPE_NORMAL
- en: 'Identity management in the Ethereum blockchain is achieved with two types of
    accounts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Externally owned accounts:** These accounts are held by users to transfer
    Ether. Just like in the Bitcoin blockchain, they have an associated public key
    that acts as an address and also an associated private key that provide access
    to the account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contract accounts or smart contracts:** They can store Ether but they can
    also store code. These accounts have also a public key address to send Ether to
    but, because they are not supposed to be owned by anyone, they do not possess
    any private key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So far, we've seen the main differences with Bitcoin and learned about the EVM,
    which serves as an operating system for the network to execute smart contracts,
    these programs being written by developers to carry out certain actions when specific
    conditions are met. We have seen how smart contracts are processed and run thanks
    to gas, a small fraction of Ether that plays the role of both incentive and fees.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now dive into Ethereum's consensus protocol, real-world applications,
    and Ethereum's oncoming challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing proof-of-work and proof-of-stake
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ethereum currently relies on the same consensus protocol as Bitcoin: proof-of-work.
    In order for the blocks and transactions to be validated, the miners of the network
    have to solve a mathematical problem, which, as of April 19, 2019, takes approximately
    13 seconds.'
  prefs: []
  type: TYPE_NORMAL
- en: When the result (hash) is found, it is spread to the network, which checks it
    and stores the blocks containing the transactions in the ledger. Then another
    mathematical problem rises to validate a new block and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'This consensus protocol proof-of-work has several downsides:'
  prefs: []
  type: TYPE_NORMAL
- en: It is **harmful for the environment **because it requires an impressive amount
    of electricity for the computers to find the suitable hash that will validate
    the block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is **expensive, non-inclusive, and reserved for experts **because the mining
    process requires good chips, material, and computational power to be able to run
    the hash's calculation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is **resource-intensive **and makes Ethereum hard to scale when the network
    endures a peak load.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum was looking for another way of mining that could replace the proof-of-work
    consensus mechanism and its aforementioned downsides. The developer community
    has decided to move to the proof-of-stake consensus mechanism, where having powerful
    chips won't help you mine better or faster.
  prefs: []
  type: TYPE_NORMAL
- en: The Ethereum community is willing to let anybody, with any kind of computer,
    participate in the validation of the transactions, eliminating the non-inclusive
    competition underlying proof-of-work mining.
  prefs: []
  type: TYPE_NORMAL
- en: Since February 28, 2019, Ethereum has migrated to a new version of its network
    called **Constantinople**, which brought several evolutions needed to implement
    proof-of-stake. This evolution is part of a wider roadmap aiming to build a scalable
    and robust platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Four main phases make up this roadmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Frontier:** This was the earliest implementation of Ethereum, before it went
    live in 2015.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Homestead:** This was implemented in early 2016 in order to stabilize the
    network and increase its efficiency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metropolis:** This was launched in October 2017 with the update called **Byzantium**
    and will end at some point in 2020 after implementing three other updates (among
    which is Constantinople on February 28, 2019).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Serenity:** This is the proposed final state of Ethereum, integrating the
    proof-of-stake protocol and features to handle large numbers of transactions per
    second.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The proof-of-stake protocol does not require miners to compute a mathematical
    problem like the proof-of-work. Instead, it is a consensus protocol in which the
    validation of the blocks relies on an algorithm that chooses a user according
    to the number of Ether (or stakes) they possess.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the larger the amount of Ether a user owns, the more likely they are to
    be chosen to validate a new block. The incentive usually associated with the validation
    of a block is replaced by the gas associated with the block, which is the sum
    of all transactions' gas.
  prefs: []
  type: TYPE_NORMAL
- en: Real-world applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ethereum has proven its usefulness several times in the past few years through
    successful applications, and has already disrupted some business models. One of
    the most interesting ones is slock.it ([https://slock.it/](https://slock.it/)).
    This is an application founded by Stephan Tual and the Jentzsch brothers in 2015,
    aiming to create an infrastructure for a better sharing economy.
  prefs: []
  type: TYPE_NORMAL
- en: Using Ethereum's blockchain, slock.it is willing to link any kind of physical
    object to a smart contract to allow anybody to use the object. An example often
    used by the founders is the renting of a flat. With slock.it, you can link your
    door lock to a smart contract, enabling someone who wants to rent your flat to
    pay the price linked to the smart contract, which will automatically unlock the
    door. This setup eliminates a trusted third party that you would usually have to rely
    on to ensure the payment and the action related to the execution of this payment.
    In other words, it connects the door lock itself with the tenant securely and
    transparently without an intermediary.
  prefs: []
  type: TYPE_NORMAL
- en: If you are looking for more examples of dApps, you can have a look at *State
    of the DApps* ([https://www.stateofthedapps.com/](https://www.stateofthedapps.com/)),
    which catalogs every dApps project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just remember that because dApps run on the blockchain, they benefit from all
    its properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Transparency**: The transactions happening on Ethereum''s blockchain are
    visible to anyone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Immutability**: Once the transactions are validated by the miners and shared
    across the network, they cannot be altered or modified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: Its decentralized setup eliminates a single point of failure
    and cryptography ensures that no hacking is possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we distinguished what features Ethereum offers compared to
    Bitcoin, which is a sole cryptocurrency. We showed how the EVM acts as a world
    computer, enabling the creation of dApps and smart contracts. We covered the concept
    of gas, which plays the role of fuel within the infrastructure in order for the
    code to be run. Eventually, we approached the main differences between proof-of-work
    and proof-of-stake as well as the ambitious roadmap followed by Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will discover another important advancement that Ethereum
    has brought to the blockchain ecosystem, an advancement that made top news at
    the end of 2017 and that enabled any project to raise millions within minutes:
    initial coin offerings.'
  prefs: []
  type: TYPE_NORMAL
