- en: Workflow Setup and Thinking Blockchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blockchains are the new fad in the word of cryptocurrency; we have witnessed
    the remarkably growing popularity of Bitcoins. Ethereum uses a technology similar
    to Bitcoin, and the coin that it trades in is known as **ether**. There is not
    much difference between the two except for smart contracts that are nothing but
    the codes that are written using the **Ethereum Virtual Machine** (**EVM**), which
    automates as well as executes agreements in an immutable ledger. We will get to
    know more about this later. To dive in further, first we are going to go over
    some use cases—they're very interesting. Next we will provide an overview of the
    Ethereum blockchain and blockchain in general. We will look at some of the benefits
    and limitations of blockchain. Then, we are going to get into setting up an efficient
    workflow so that we can get into further chapters without anything holding us
    back.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics that we''ll be covering in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum-based projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of blockchain and Ethereum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits and limitations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an efficient workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum-based projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ethereum is like Bitcoin, but it's for code! It's the blockchain for smart contracts
    and it stores immutable code and logic in the blockchain. Immutable is a very
    important word here. That's pretty much all you need to know about Ethereum. So,
    what's possible right now? Let's have a look in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Gnosis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gnosis is market-driven forecasting technology. It is based on proven scientific
    research. It has its own platform known as the Gnosis platform and you can build
    your own platform on top of it. It basically makes trading predictions. And correct
    predictions are given the tokens that were at stake for incorrect predictions.
    Visit [https://gnosis.pm/](https://gnosis.pm/) to access Gnosis.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way it works is that you trade predictions or you bet on predictions. The
    following is the front page of Gnosis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3011112f-17b7-4eed-a7a9-f58d47f72242.png)'
  prefs: []
  type: TYPE_IMG
- en: Gnosis front page
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, do note the question that is being asked on their
    home page. Will Dubai's world record for the largest New Year's Eve fireworks
    display get broken? You can vote yes or no, and by voting, your tokens are at
    stake, and an Oracle is then going to tell you whether the event happened or not.
    The blockchain will then check on that Oracle. Oracles are nothing but smart contracts
    that interact with the outside elements. They can store and retrieve data—this
    is just what an Ethereum transaction needs to make decisions. An Oracle is a trusted
    source, and after checking with this trusted source, you can determine in a blockchain
    whether the event really did happen or not, and you can be absolutely certain
    about it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram explains exactly how this happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e9a4d73-2732-4d26-8443-870796a0c9af.png)'
  prefs: []
  type: TYPE_IMG
- en: The Gnosis platform layers
  prefs: []
  type: TYPE_NORMAL
- en: FirstBlood
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FirstBlood is comparable to Gnosis; it is for e-sports. In cases where you are
    a gamer, you can sign up for a match using tokens. You can put tokens at stake
    to win tokens, you can put yourself in a queue in a pool of other teams or people,
    and you can play against them. You can even participate in tournaments. The winner
    of the game gets the tokens. Oracle is used to decide the outcome of a match.
    Visit [http://firstblood.io](http://firstblood.io) to access FirstBlood.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a peer-to-peer insurance company, meaning there are no more middlemen.
    Currently, they are working on unemployment insurance, wherein you get paid to
    be unemployed! You just have to show people that you are actively looking for
    a job. The way they verify this is by using an Oracle similar to Gnosis and FirstBlood,
    but they use it to check LinkedIn and to verify that you have been applying to
    jobs.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about Dynamis visit, [www.dynamisapp.com](http://www.dynamisapp.com).
  prefs: []
  type: TYPE_NORMAL
- en: '[You can also visit](http://www.dynamisapp.com) [http://blog.dynamisapp.com/p2p-insurance-solutions/](http://blog.dynamisapp.com/p2p-insurance-solutions/)
    [to gain further insight.](http://www.dynamisapp.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Ujo Music
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is basically a decentralized music store for artists! We all know iTunes,
    Spotify, and so on. These are companies that are sitting in the middle of artists
    and their fans, but fans can't know right away how much money artists actually
    make from each sale. Ujo Music takes care of this by decentralizing the music
    store. There are no more middlemen, which means that they are a bridge between
    artists and fan. This certainly means it ensures more power and money for the
    artists. There are no worries about licensing and it delivers music services only
    to verified identities. To access Ujo Music, visit [https://ujomusic.com/](https://ujomusic.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The way it works work is described in the screenshot; they have multiple layers
    and they have their licensing and payments on Ethereum. They have a persistent
    identity on uPort which is also built on Ethereum:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b00a3e18-28d0-457d-82cc-cd1288f2ecb7.png)'
  prefs: []
  type: TYPE_IMG
- en: Ujo Music
  prefs: []
  type: TYPE_NORMAL
- en: The files themselves are stored in decentralized file storage, **InterPlanetary
    File System** (**IPFS**), and the metadata uses constellate which is also built
    on Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: The next project is one of my favorites.
  prefs: []
  type: TYPE_NORMAL
- en: Golem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is a decentralized supercomputer! It does off-chain calculations. Off-chain
    calculations are calculations that do not happen on the blockchain; calculations
    are done outside of the blockchain. Then on the on-chain, it will verify these
    calculations. This means you can rent out your spare computing power or you can
    hire extra computing power if you need it. You can do this for 3D rendering, computational
    chemistry, AI machine learning—anything you like. To visit Golem, go to [https://golem.network/](https://golem.network/).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the Golem GUI. On the left, you can
    see a basic wallet; you can also see how much CPU, RAM, and disk space are being
    used. To the right, you can see a little proof of concept of three tasks being
    put out there, it''s three Blender tasks, in this case, 3D rendering tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7266fb78-272b-44c0-b991-a7eda430bc54.png)'
  prefs: []
  type: TYPE_IMG
- en: Golem GUI
  prefs: []
  type: TYPE_NORMAL
- en: Overview of blockchain and Ethereum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we will provide a short overview of Ethereum and blockchain in general.
    We will have a little look under the hood so that you can get a better understanding
    of how Ethereum and blockchain make these great products—these great use cases
    that we've seen are possible.
  prefs: []
  type: TYPE_NORMAL
- en: Going from Bitcoin to Ethereum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bitcoin was the first blockchain, but Bitcoin was only meant for payments. People
    started discovering that Bitcoin could be used for other scenarios; we call this
    **Colored Coins**. Bitcoin had a surprisingly open design and one guy, Vitalik
    Buterin, decided to start developing Ethereum on top of the Bitcoin blockchain.
    But, due to limitations in Bitcoin, Ethereum now has its own blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the differences between Bitcoin and Ethereum:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Bitcoin** | **Ethereum** |'
  prefs: []
  type: TYPE_TB
- en: '| Used for payments | Used for code and logic |'
  prefs: []
  type: TYPE_TB
- en: '| It is a digital currency | It is a smart contract platform |'
  prefs: []
  type: TYPE_TB
- en: '| Average block time/transaction processing time of 10 minutes | Average block
    time/transaction processing time of only 17.5 seconds |'
  prefs: []
  type: TYPE_TB
- en: '| It is not Turing complete | It is Turing complete |'
  prefs: []
  type: TYPE_TB
- en: Bitcoin and Ethereum are both blockchains. They both rely heavily on private/public-key
    cryptography, and even though Bitcoin is primarily a form of payment, both can
    be used to transfer value, although, with the Ethereum blockchain, value will
    be processed with logic. Both are completely immutable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the things to remember for blockchains:'
  prefs: []
  type: TYPE_NORMAL
- en: When something is in the blockchain, it's final. That means there's no rolling
    back of anything you do, so even with your code, you have to find special way
    to update it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your private key is your digital identity, so don't lose it!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain is not standalone; it's usually used in conjunction with other technologies,
    mostly frontend technology or backend technology.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The benefits and limitations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've looked at an overview of blockchain, we will be having a look
    at some of the benefits of blockchain. We will also have a look at some of the
    limitations when you are developing a blockchain application, and we will have
    a look at how we can overcome these limitations or how we can work around them.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of blockchain and Ethereum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some of the benefits of blockchain:'
  prefs: []
  type: TYPE_NORMAL
- en: Decentralization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trustlessness—you don't have to trust or put all your money in a single point
    of failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be very cost effective
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can also present itself to be the backbone of IoT and electric vehicles,
    a power grid, or a decentralized identity in your smartphone or an electric ID
    card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limitations of blockchain and Ethereum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some difficulties one can face while using blockchains:'
  prefs: []
  type: TYPE_NORMAL
- en: If you try to use blockchain where you don't need it, it can be very costly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchains don't really do private data that well because blockchains are supposed
    to be public.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes, centralization is required, and blockchains are always decentralized;
    that doesn't fit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most blockchains don't really scale well to high usage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing big files is not really recommended because more computation means more
    power and more money on a public blockchain; on a private blockchain it just means
    more power—and you need to invest more in your infrastructure so that is also
    more money.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overcoming limitations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, you just can''t overcome limitations because you just have to use
    blockchain where you need it. Some things can be overcome, such as storing private
    data on a public chain. This can be done by adding some extra encryption to your
    data. You can store big files on the IPFS which is also decentralized—it is not
    a blockchain, but it is decentralized file storage and it works really well with
    Ethereum. The problem of scalability is solved by Ethereum''s sharding: sharding
    means splitting the space of accounts, such as contracts, into smaller subspaces.
    Private chains are also available if you need them, such as J.P. Morgan''s Quorum,
    Monax, and Bletchley. They are all Ethereum based.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we will be doing some workflow setup so we can get started with developing.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the things we will need for setting up the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: Google Chrome.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MetaMask, which is a Chrome extension. We will use this to connect to and to
    test the blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node Package Manager** (**NPM**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Truffle, which is our first framework. We will be using it to develop our first
    decentralized application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum-JS ganache-cli, which is a test blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to set up the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the NPM. It is part of Node.js. You can get it at [www.npmjs.com/get-npm](http://www.npmjs.com/get-npm),
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/30256dbb-1b27-46c4-b707-583ddacbc7e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting the NPM
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the latest version displayed on their web page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install MetaMask. To download MetaMask, visit [https://metamask.io/](https://metamask.io/).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on GET CHROME EXTENSION.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then click on Add to Chrome.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding tool that we will be used to test our blockchain applications.
    Once you've installed it, a new tab will open up with a video explaining in depth
    how to use it and what it is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It is important for you to remember during this book that you can connect to
    the main network as well as three test networks, but you can also set up your
    own network, your own blockchain, and run on that. The following screenshot shows
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d0e18f2-9097-4c0d-bbf1-6645a4260a3a.png)'
  prefs: []
  type: TYPE_IMG
- en: MetaMask Main Network
  prefs: []
  type: TYPE_NORMAL
- en: Install the Ethereum blockchain simulator called `ganache-cli`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This can be done as explained in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8e7372af-165a-4d0f-a3ed-28f6a1667b99.png)'
  prefs: []
  type: TYPE_IMG
- en: Command to install Ethereum blockchain simulator
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install this as a node package by just copying this command and pasting
    it in your terminal. Once you''ve pasted it in your terminal, it will start installing,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e25dfed5-1037-419a-a567-7d0cf6a5970a.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing Ethereum Simulator
  prefs: []
  type: TYPE_NORMAL
- en: 'Once that is done, it will tell you that it has succeeded; quit this for now
    because I have already reinstalled this. You can go ahead and verify it by typing
    `ganache-cli` into your Command Prompt and verifying that it runs. The following
    will be the output you will get if you have installed the simulator correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d159a8e-d972-46ae-862d-e497c8cc5bfa.png)'
  prefs: []
  type: TYPE_IMG
- en: Ethereum Simulator
  prefs: []
  type: TYPE_NORMAL
- en: Installing and downloading Truffle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Truffle also is a simple node package from [truffleframework.com](https://truffleframework.com/)
    that you can install by copying and pasting a command into your terminal, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6e92c6d9-9a08-4a9b-87d1-e3c8ae0e2ddf.png)'
  prefs: []
  type: TYPE_IMG
- en: Command for installing Truffle
  prefs: []
  type: TYPE_NORMAL
- en: 'Once that''s done installing, you can verify it by typing `truffle`, as shown
    in the following screenshot, and now you can use any of these commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b9fa543d-0755-42f8-af8b-c9616250cbeb.png)'
  prefs: []
  type: TYPE_IMG
- en: Truffle
  prefs: []
  type: TYPE_NORMAL
- en: You can use `init` to initialize a new project, which we will be doing in the
    next chapter. Hence, we have successfully completed the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have discussed different projects running on Ethereum and gained an overview
    of blockchain; after this, we moved on to its benefits and limitations, and how
    to overcome the limitations. In the end, we created a setup for our own Ethereum
    workflow.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be developing our first simple decentralized payment
    application with Ethereum.
  prefs: []
  type: TYPE_NORMAL
