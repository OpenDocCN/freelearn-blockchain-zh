- en: Building an Ethereum Blockchain Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建以太坊区块链应用程序
- en: In the previous chapter, we reviewed the basic features of smart contracts and
    how to write a crowdfunding smart contract example. After we deployed the smart
    contract to the blockchain, we needed to write the web application to interact
    with the smart contract. Ethereum blockchain provides the web3 API by calling
    smart contract functions and getters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们回顾了智能合约的基本特性以及如何编写一个众筹智能合约示例。在我们将智能合约部署到区块链之后，我们需要编写 Web 应用程序来与智能合约交互。以太坊区块链通过调用智能合约函数和获取器提供了
    web3 API。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is a **decentralized application** (**DApp**)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是**去中心化应用**（**DApp**）
- en: web3js quick overview
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: web3js 快速概述
- en: Setting up an Ethereum development environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置以太坊开发环境
- en: Developing and testing a DApp
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发和测试 DApp
- en: Decentralized application overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 去中心化应用概述
- en: A **decentralized application** (or **DApp**) is an application that uses smart
    contracts to run. Smart contracts are deployed on the **Ethereum virtual machine**
    (**EVM**). It is similar to a client-server low-tier architecture. A DApp can
    have a frontend (web) that makes calls to its backend (smart contract) through
    the web3.js API.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**去中心化应用**（或**DApp**）是一种利用智能合约运行的应用程序。智能合约部署在**以太坊虚拟机**（**EVM**）上。它类似于客户端-服务器低层架构。一个
    DApp 可以有一个前端（Web），通过 web3.js API 调用其后端（智能合约）。'
- en: 'The following structure is what we are going to build for our crowdfunding
    DApp:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下结构是我们将为我们的众筹 DApp 构建的：
- en: '![](img/87499c01-4581-4630-853e-77ca275e89ad.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87499c01-4581-4630-853e-77ca275e89ad.png)'
- en: Strucuture of what we will be building for crowdfunding DApp
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为众筹 DApp 构建的结构
- en: web3.js quick overview
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: web3.js 快速概述
- en: 'web3.js is an Ethereum JavaScript API, that provides a collection of libraries
    to interact with a local or remote Ethereum network. The connection between web3js
    and Ethereum is made by using the HTTP or IPC protocol. In the following table,
    we quickly review a number of important web3.js API concepts:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: web3.js 是一个以太坊 JavaScript API，提供了一系列库来与本地或远程以太坊网络交互。web3js 与以太坊之间的连接是通过使用 HTTP
    或 IPC 协议进行的。在下表中，我们快速审查了一些重要的 web3.js API 概念：
- en: '| **API reference** | **Description** | **Example** |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| **API 参考** | **描述** | **示例** |'
- en: '| web3-eth | This package provides an API to interact with the Ethereum blockchain
    and smart contracts | `getBalance`, `sendTransaction, coinbase`, `getBlockNumber,
    getAccounts` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| web3-eth | 该包提供了与以太坊区块链和智能合约交互的 API | `getBalance`, `sendTransaction, coinbase`, `getBlockNumber,
    getAccounts` |'
- en: '| web3-shh | This package provides an API to interact with the whisper protocol
    for broadcasting |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| web3-shh | 该包提供了与 whisper 协议进行广播交互的 API |'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| web3-bzz | This package provides an API to interact with the Ethereum swarm,
    the decentralized file storage platform | `web3.bzz.currentProvider``web3.bzz.download(bzzHash
    [, localpath])` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| web3-bzz | 该包提供了与以太坊疯蜂网络（Ethereum swarm）交互的 API，即去中心化文件存储平台 | `web3.bzz.currentProvider``web3.bzz.download(bzzHash
    [, localpath])` |'
- en: '| web3-utils | This package provides a collection of utility functions for
    Ethereum DApps and other web3.js packages | `web3.utils.toWei(number [, unit])``web3.utils.isAddress(address)`
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| web3-utils | 该包提供了一组针对以太坊 DApp 和其他 web3.js 包的实用函数 | `web3.utils.toWei(number
    [, unit])``web3.utils.isAddress(address)` |'
- en: Provider
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供者
- en: A provider abstracts a connection that talks to the Ethereum blockchain. It
    will issue queries and send transactions to the blockchain. web3 provides `JsonRpcProvider`
    and `IpcProvider`, which allow you to connect to a local or remote Ethereum node,
    including Mainnet, Ropsten testnet, Kovan testnet, Rinkeby testnet, and custom
    **remote procedure call** (**RPC**), like Ganache. Below is the code snippet to
    show how we can use web3 API to connect an Ethereum node.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 提供者抽象了与以太坊区块链进行通信的连接。它将向区块链发出查询并发送交易。web3 提供了 `JsonRpcProvider` 和 `IpcProvider`，允许您连接到本地或远程以太坊节点，包括
    Mainnet、Ropsten 测试网、Kovan 测试网、Rinkeby 测试网和自定义的远程过程调用（**RPC**），如 Ganache。下面是展示如何使用
    web3 API 连接以太坊节点的代码片段。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: DApp development tools
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DApp 开发工具
- en: There are some popular blockchain web development tools used being by developers
    for creating a basic structure of a DApp project. The following sections list
    a few of these.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些流行的区块链 Web 开发工具被开发者用于创建 DApp 项目的基本结构。以下部分列出了其中的一些。
- en: Truffle
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Truffle
- en: Truffle is an Ethereum DApp end-to-end development tool that provides a development
    environment for writing, compiling, and deploying test smart contracts and DApps.
    You can write HTML, CSS, and JavaScript for the frontend; Solidity is for smart
    contracts, and uses the web3.js API to interact with the UI and smart contract.
    Truffle Boxes provide helpful boilerplates, which contain helpful modules, solidity
    contracts and libraries, frontend code, and many other helpful files. The Truffle
    Boxes help developers to quickly get started with their DApp project.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Truffle 是一个以太坊 DApp 端到端开发工具，提供了一个开发环境，用于编写、编译和部署测试智能合约和 DApps。您可以为前端编写 HTML、CSS
    和 JavaScript；Solidity 用于智能合约，并使用 web3.js API 与 UI 和智能合约交互。Truffle Boxes 提供了有用的样板文件，其中包含了有用的模块、Solidity
    合约和库、前端代码以及许多其他有用的文件。Truffle Boxes 帮助开发人员快速启动他们的 DApp 项目。
- en: 'The Truffle command line uses the following formats:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Truffle 命令行使用以下格式：
- en: '`truffle [command] [options]`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`truffle [command] [options]`'
- en: 'Here are the frequently used options in command-line tools:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是命令行工具中常用的选项：
- en: '| **command** | **Description** |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| `compile` | Compile solidity contract files. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `compile` | 编译 Solidity 合约文件。 |'
- en: '| `console` | Command-line interface to interact with deployed smart contracts.
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `console` | 与部署的智能合约交互的命令行界面。 |'
- en: '| `create` | This command helps to create a new contract, new migration file,
    and basic test. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `create` | 此命令可帮助创建新的合约、新的迁移文件和基本测试。 |'
- en: '| `debug` | Experiment on a particular transaction in debugger sessions. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `debug` | 在调试器会话中对特定交易进行实验。 |'
- en: '| `deploy`/`migration` | Deploy a contract to the blockchain network. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `deploy`/`migration` | 将合约部署到区块链网络。 |'
- en: '| `develop` | Interact with a contract via the command line in the local development
    environment. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `develop` | 在本地开发环境中通过命令行与合约交互。 |'
- en: '| `init` | Install a package from the Ethereum package registry. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `init` | 从以太坊包注册表中安装包。 |'
- en: Ganache
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ganache
- en: 'Ganache is a private Ethereum blockchain environment that allows to you emulate
    the Ethereum blockchain so that you can interact with smart contracts in your
    own private blockchain. Here are some features that Ganache provides:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Ganache 是一个私有的以太坊区块链环境，允许您模拟以太坊区块链，以便您可以在自己的私有区块链中与智能合约交互。以下是 Ganache 提供的一些功能：
- en: Displays blockchain log output
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示区块链日志输出
- en: Provides advanced mining control
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供高级挖掘控制
- en: Built-in block explorer
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置区块浏览器
- en: Ethereum blockchain environment
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊区块链环境
- en: Ganache has a desktop application as well as a command-line tool
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ganache 有一个桌面应用程序和一个命令行工具
- en: 'This is what the desktop version of Ganache looks like:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Ganache 桌面版的外观：
- en: '![](img/4c13ab49-2fb4-48a8-ba27-cffd88cad6db.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c13ab49-2fb4-48a8-ba27-cffd88cad6db.png)'
- en: 'The command line uses the following format:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行使用以下格式：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'These are the frequently used options of the command-line tools:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是命令行工具的常用选项：
- en: '| **Options** | **Description** |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| **选项** | **描述** |'
- en: '| `-a or --accounts` | The number of accounts to generate at startup. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `-a 或 --accounts` | 启动时要生成的账户数量。 |'
- en: '| `-e or --defaultBalanceEther` | Configure the default test account ether
    amount. The default is `100`. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `-e 或 --defaultBalanceEther` | 配置默认的测试账户以太币数量。默认值为 `100`。 |'
- en: '| `-b or --blockTime` | Specify the block time in seconds as a mining interval.
    If this option is not specified, Ganache will instantly mine a new block when
    a transaction is invoked. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `-b 或 --blockTime` | 指定以秒为单位的区块时间作为挖掘间隔。如果未指定此选项，当调用事务时，Ganache 将立即挖掘新块。
    |'
- en: '| `-h or --host or --hostname` | Specify hostname to listen on. The default
    is `127.0.0.1`. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `-h 或 --host 或 --hostname` | 指定要侦听的主机名。默认值为 `127.0.0.1`。 |'
- en: '| `-p or --port` | Specify the port number. The default is `8545`. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `-p 或 --port` | 指定端口号。默认值为 `8545`。 |'
- en: '| `-g or --gasPrice` | Specify the gas price in Wei (defaults to `20000000000`).
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `-g 或 --gasPrice` | 以 Wei 指定气价（默认为 `20000000000`）。 |'
- en: '| `-l or --gasLimit` | The block gas limit (defaults to `0x6691b7`). |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `-l 或 --gasLimit` | 区块气体限制（默认为 `0x6691b7`）。 |'
- en: '| `--debug` | Display VM opcodes for debugging purpose. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `--debug` | 为调试目的显示 VM 操作码。 |'
- en: '| `-q or --quiet` | Run `ganache-cli` without any logs. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `-q 或 --quiet` | 不记录任何日志运行 `ganache-cli`。 |'
- en: Setting up an Ethereum development environment
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置以太坊开发环境
- en: Follow these instructions to obtain the Ethereum development tools and start
    up an Ethereum private local blockchain environment (primarily used to run/deploy
    your smart contract to a local blockchain).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明获取以太坊开发工具，并启动以太坊私有本地区块链环境（主要用于在本地区块链上运行/部署您的智能合约）。
- en: Installing Truffle
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open up the command line and run the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Installing Ganache
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open up the command line and install Ganache''s command-line interface as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating a Truffle project
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To initialize a new DApp project, we can run the truffle `init` command to initialize
    an empty Truffle project. This will create the DApp directory structure, including
    apps, contracts, and tests with Truffle configurations. Since Truffle Boxes provide
    many working templates, in our DApp example, we will use pet-shop box—a JQuery
    version of a JavaScript UI library—to develop our crowdfunding DApp example.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a folder called `Crowdfunding`, open a command-line prompt, navigate
    to the  `Crowdfunding` folder, and run the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The project structure is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d4b101c-137d-481c-a29d-c39e9d2e31ba.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: We wrote the crowdfunding smart contract in the previous chapter. Let's copy
    the `CrowdFunding.sol` file into the contracts folder under `Crowdfunding`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Launching the Ganache environment
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open a new Terminal window and run the following command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will run `Ganache-cli` on port `8545`, and Ganache will create 10 default
    accounts for us. Each account will have 100 ether by default. You should see something
    like this in your console:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa7dab44-9044-4f5d-ae06-e5b83a04ca9c.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: 'In our Truffle project, `truffle.js` defined `7545` as the default port number.
    We need to update the port number to `8545` to match with the Ganache port number,
    as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Deploying a smart contract
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you might have noticed, two migration-related files were created by the previous
    command, `Migrations.sol` and `1_initial_migration.js`. `Migrations.sol` stores
    a number that corresponds to the last applied "migration" script. When you add
    a new contract and deploy the contract, the number of the last deployment in stores
    will increase. After the contract has run once, it will not run again. The numbering
    convention is `x_script_name.js`, with x starting at 1, that is `1_initial_migration.js`.
    Your new contracts would typically come in scripts starting at `2_...`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we will add a new migration contract to deploy `CrowdFunding`.
    Let's create a file called `2_deploy_contracts.js`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '`CrowdFunding.sol` defines the constructor as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To deploy a contract, with optional constructor arguments, you can call the
    truffle deploy function, `deployer.deploy(contract, args..., options)`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the first account given to us by Ganache as the owner account,
    as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s deploy the smart contract to our network. Run the `truffle` command,
    as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following screenshot displays the result for running the command for `truffle
    migrate`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87d851ff-c01e-4287-bca1-6bd92a713958.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: This deploys our crowdfunding smart contract in a local Ganache blockchain environment.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'To bring your local node server up, run the following command, which will bring
    up the pet store page in our browser:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Writing a campaign decentralized application
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just deployed our smart contract on our local Ganache blockchain environment.
    Now, we will start to write UI code to trigger smart contract functions through
    an RPC call. The source code for this chapter is available at [https://bit.ly/2X8xPBL](https://bit.ly/2X8xPBL).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚在我们的本地 Ganache 区块链环境上部署了我们的智能合约。现在，我们将开始编写 UI 代码，通过 RPC 调用触发智能合约函数。本章的源代码可在
    [https://bit.ly/2X8xPBL](https://bit.ly/2X8xPBL) 上找到。
- en: Selecting a web3 provider
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择一个 web3 提供程序
- en: 'When we load a web page, we need to connect to a web3 provider. If you have
    already installed a provider such as MetaMask, you can use your correct provider
    option, as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们加载网页时，我们需要连接到一个 web3 提供程序。如果您已经安装了像 MetaMask 这样的提供程序，您可以使用您的正确提供程序选项，如下所示：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In our crowdfunding example, for the sake of simplicity, we will directly connect
    to our local Ganache server, as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的众筹示例中，为了简单起见，我们将直接连接到我们的本地 Ganache 服务器，如下所示：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Loading account information
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载账户信息
- en: 'To load accounts, we define a drop-down menu with empty content, as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载账户，我们定义一个内容为空的下拉菜单，如下所示：
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When we load the page, we will use `web3.eth.accounts` to get all 10 default
    accounts. Notice that the first account has an ether balance of 99.84; this is
    because we used the first account as the owner account to deploy the contract
    and burned some gas as the transaction fee, as shown in the following code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们加载页面时，我们将使用 `web3.eth.accounts` 获取所有 10 个默认账户。请注意，第一个账户的以太均衡为 99.84；这是因为我们使用第一个账户作为所有者账户来部署合约，并燃烧了一些以太作为交易费用，如下代码所示：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once the accounts are loaded, it will be displayed as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦账户加载完毕，将显示如下：
- en: '![](img/6cf02b02-bc1e-42b3-af7c-00a6692e63a2.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6cf02b02-bc1e-42b3-af7c-00a6692e63a2.png)'
- en: Loading project information
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载项目信息
- en: 'In crowdfunding, we defined a project struct that contains fundraising information,
    as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在众筹中，我们定义了一个包含筹款信息的项目结构，如下所示：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s define some related information in HTML, for example:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 HTML 中定义一些相关信息，例如：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `CrowdFunding.deployed()` function will create an instance of `CrowdFunding`
    that represents the default address managed by `CrowdFunding`. The code here shows
    us how to display project information:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`CrowdFunding.deployed()` 函数将创建一个代表由 `CrowdFunding` 管理的默认地址的 `CrowdFunding`
    实例。这里的代码显示了我们如何显示项目信息：'
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The result will be displayed as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下显示：
- en: '![](img/f6c21886-12d1-4cbb-8cda-37f88f55d9e4.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6c21886-12d1-4cbb-8cda-37f88f55d9e4.png)'
- en: Handling the fund function
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理基金功能
- en: 'To raise funds, we need to call the fund function, which is defined in our
    crowdfunding smart contract. In our web page, we use the HTML range input slider
    component to contribute fund amounts, as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要筹集资金，我们需要调用 fund 函数，在我们的众筹智能合约中定义。在我们的网页中，我们使用 HTML 范围输入滑块组件来贡献资金金额，如下所示：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `Crowdfunding fund` function is a payable fallback function; therefore,
    we need to pass `msg.sender` and `msg.value` from the UI to call it, as follows.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`Crowdfunding fund` 函数是一个可支付的回退函数；因此，我们需要从 UI 传递 `msg.sender` 和 `msg.value`
    来调用它，如下所示。'
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can define the sending address and value parameters as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按如下方式定义发送地址和值参数：
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once we get the result back, we will call the `loadProject` function to refresh
    the project information. We can see that the current balance fund increased, as
    shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们收到结果返回，我们将调用 `loadProject` 函数刷新项目信息。我们可以看到当前余额基金增加了，如下截图所示：
- en: '![](img/a940de15-5bdf-482f-a22e-ed38bd80d088.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a940de15-5bdf-482f-a22e-ed38bd80d088.png)'
- en: checkGoalReached
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: checkGoalReached
- en: Once the funding goal is reached, the crowdfunding owner will collect of the
    all funds by running the `checkGoalReached` method.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦达到筹款目标，众筹所有者将通过运行 `checkGoalReached` 方法收集所有资金。
- en: 'The HTML is just a simple button, as shown in the following code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 仅为一个简单的按钮，如下所示的代码：
- en: '[PRE22]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Similar to the fund function, we call the smart contract in JavaScript using
    the following code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 与 fund 函数类似，我们使用以下代码在 JavaScript 中调用智能合约：
- en: '[PRE23]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here is the detailed logic:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这是详细的逻辑：
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The result will display as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下显示：
- en: '![](img/79ae7891-cff2-436e-9313-f2555092f934.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79ae7891-cff2-436e-9313-f2555092f934.png)'
- en: If you followed the whole example and run this step, congratulations! You are
    now able to write and run a crowdfunding DApp.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您跟随整个示例并运行了这一步，恭喜！您现在可以编写并运行一个众筹 DApp 了。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, we learned DApp basics and we now understand the web3.js API.
    By running Ganache as our local Ethereum environment, we could use the Truffle
    development tool to create a crowdfunding project and write a DApp component.
    Finally, we deployed and launched the crowdfunding DApp. In the next chapter,
    we will start to explore the most popular enterprise blockchain—Hyperledger Fabric.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 DApp 的基础知识，现在我们了解了 web3.js API。通过在本地以太坊环境中运行 Ganache，我们可以使用 Truffle
    开发工具创建一个众筹项目并编写一个 DApp 组件。最后，我们部署并启动了众筹 DApp。在下一章中，我们将开始探索最受欢迎的企业区块链——Hyperledger
    Fabric。
