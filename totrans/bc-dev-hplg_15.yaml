- en: Building an Ethereum Blockchain Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we reviewed the basic features of smart contracts and
    how to write a crowdfunding smart contract example. After we deployed the smart
    contract to the blockchain, we needed to write the web application to interact
    with the smart contract. Ethereum blockchain provides the web3 API by calling
    smart contract functions and getters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: What is a **decentralized application** (**DApp**)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web3js quick overview
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an Ethereum development environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing and testing a DApp
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decentralized application overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **decentralized application** (or **DApp**) is an application that uses smart
    contracts to run. Smart contracts are deployed on the **Ethereum virtual machine**
    (**EVM**). It is similar to a client-server low-tier architecture. A DApp can
    have a frontend (web) that makes calls to its backend (smart contract) through
    the web3.js API.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'The following structure is what we are going to build for our crowdfunding
    DApp:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87499c01-4581-4630-853e-77ca275e89ad.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: Strucuture of what we will be building for crowdfunding DApp
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: web3.js quick overview
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'web3.js is an Ethereum JavaScript API, that provides a collection of libraries
    to interact with a local or remote Ethereum network. The connection between web3js
    and Ethereum is made by using the HTTP or IPC protocol. In the following table,
    we quickly review a number of important web3.js API concepts:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '| **API reference** | **Description** | **Example** |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
- en: '| web3-eth | This package provides an API to interact with the Ethereum blockchain
    and smart contracts | `getBalance`, `sendTransaction, coinbase`, `getBlockNumber,
    getAccounts` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
- en: '| web3-shh | This package provides an API to interact with the whisper protocol
    for broadcasting |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '| web3-bzz | This package provides an API to interact with the Ethereum swarm,
    the decentralized file storage platform | `web3.bzz.currentProvider``web3.bzz.download(bzzHash
    [, localpath])` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
- en: '| web3-utils | This package provides a collection of utility functions for
    Ethereum DApps and other web3.js packages | `web3.utils.toWei(number [, unit])``web3.utils.isAddress(address)`
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: Provider
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A provider abstracts a connection that talks to the Ethereum blockchain. It
    will issue queries and send transactions to the blockchain. web3 provides `JsonRpcProvider`
    and `IpcProvider`, which allow you to connect to a local or remote Ethereum node,
    including Mainnet, Ropsten testnet, Kovan testnet, Rinkeby testnet, and custom
    **remote procedure call** (**RPC**), like Ganache. Below is the code snippet to
    show how we can use web3 API to connect an Ethereum node.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: DApp development tools
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some popular blockchain web development tools used being by developers
    for creating a basic structure of a DApp project. The following sections list
    a few of these.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Truffle
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Truffle is an Ethereum DApp end-to-end development tool that provides a development
    environment for writing, compiling, and deploying test smart contracts and DApps.
    You can write HTML, CSS, and JavaScript for the frontend; Solidity is for smart
    contracts, and uses the web3.js API to interact with the UI and smart contract.
    Truffle Boxes provide helpful boilerplates, which contain helpful modules, solidity
    contracts and libraries, frontend code, and many other helpful files. The Truffle
    Boxes help developers to quickly get started with their DApp project.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'The Truffle command line uses the following formats:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '`truffle [command] [options]`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are the frequently used options in command-line tools:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '| **command** | **Description** |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
- en: '| `compile` | Compile solidity contract files. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
- en: '| `console` | Command-line interface to interact with deployed smart contracts.
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
- en: '| `create` | This command helps to create a new contract, new migration file,
    and basic test. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
- en: '| `debug` | Experiment on a particular transaction in debugger sessions. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: '| `deploy`/`migration` | Deploy a contract to the blockchain network. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| `develop` | Interact with a contract via the command line in the local development
    environment. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: '| `init` | Install a package from the Ethereum package registry. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: Ganache
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ganache is a private Ethereum blockchain environment that allows to you emulate
    the Ethereum blockchain so that you can interact with smart contracts in your
    own private blockchain. Here are some features that Ganache provides:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Displays blockchain log output
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides advanced mining control
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in block explorer
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum blockchain environment
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ganache has a desktop application as well as a command-line tool
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is what the desktop version of Ganache looks like:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c13ab49-2fb4-48a8-ba27-cffd88cad6db.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: 'The command line uses the following format:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'These are the frequently used options of the command-line tools:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '| **Options** | **Description** |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
- en: '| `-a or --accounts` | The number of accounts to generate at startup. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '| `-e or --defaultBalanceEther` | Configure the default test account ether
    amount. The default is `100`. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: '| `-b or --blockTime` | Specify the block time in seconds as a mining interval.
    If this option is not specified, Ganache will instantly mine a new block when
    a transaction is invoked. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
- en: '| `-h or --host or --hostname` | Specify hostname to listen on. The default
    is `127.0.0.1`. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
- en: '| `-p or --port` | Specify the port number. The default is `8545`. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
- en: '| `-g or --gasPrice` | Specify the gas price in Wei (defaults to `20000000000`).
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
- en: '| `-l or --gasLimit` | The block gas limit (defaults to `0x6691b7`). |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
- en: '| `--debug` | Display VM opcodes for debugging purpose. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
- en: '| `-q or --quiet` | Run `ganache-cli` without any logs. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
- en: Setting up an Ethereum development environment
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Follow these instructions to obtain the Ethereum development tools and start
    up an Ethereum private local blockchain environment (primarily used to run/deploy
    your smart contract to a local blockchain).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Installing Truffle
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open up the command line and run the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Installing Ganache
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open up the command line and install Ganache''s command-line interface as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating a Truffle project
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To initialize a new DApp project, we can run the truffle `init` command to initialize
    an empty Truffle project. This will create the DApp directory structure, including
    apps, contracts, and tests with Truffle configurations. Since Truffle Boxes provide
    many working templates, in our DApp example, we will use pet-shop box—a JQuery
    version of a JavaScript UI library—to develop our crowdfunding DApp example.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a folder called `Crowdfunding`, open a command-line prompt, navigate
    to the  `Crowdfunding` folder, and run the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The project structure is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d4b101c-137d-481c-a29d-c39e9d2e31ba.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: We wrote the crowdfunding smart contract in the previous chapter. Let's copy
    the `CrowdFunding.sol` file into the contracts folder under `Crowdfunding`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Launching the Ganache environment
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open a new Terminal window and run the following command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will run `Ganache-cli` on port `8545`, and Ganache will create 10 default
    accounts for us. Each account will have 100 ether by default. You should see something
    like this in your console:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa7dab44-9044-4f5d-ae06-e5b83a04ca9c.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: 'In our Truffle project, `truffle.js` defined `7545` as the default port number.
    We need to update the port number to `8545` to match with the Ganache port number,
    as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Deploying a smart contract
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you might have noticed, two migration-related files were created by the previous
    command, `Migrations.sol` and `1_initial_migration.js`. `Migrations.sol` stores
    a number that corresponds to the last applied "migration" script. When you add
    a new contract and deploy the contract, the number of the last deployment in stores
    will increase. After the contract has run once, it will not run again. The numbering
    convention is `x_script_name.js`, with x starting at 1, that is `1_initial_migration.js`.
    Your new contracts would typically come in scripts starting at `2_...`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we will add a new migration contract to deploy `CrowdFunding`.
    Let's create a file called `2_deploy_contracts.js`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '`CrowdFunding.sol` defines the constructor as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To deploy a contract, with optional constructor arguments, you can call the
    truffle deploy function, `deployer.deploy(contract, args..., options)`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the first account given to us by Ganache as the owner account,
    as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s deploy the smart contract to our network. Run the `truffle` command,
    as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following screenshot displays the result for running the command for `truffle
    migrate`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87d851ff-c01e-4287-bca1-6bd92a713958.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: This deploys our crowdfunding smart contract in a local Ganache blockchain environment.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'To bring your local node server up, run the following command, which will bring
    up the pet store page in our browser:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Writing a campaign decentralized application
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just deployed our smart contract on our local Ganache blockchain environment.
    Now, we will start to write UI code to trigger smart contract functions through
    an RPC call. The source code for this chapter is available at [https://bit.ly/2X8xPBL](https://bit.ly/2X8xPBL).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a web3 provider
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we load a web page, we need to connect to a web3 provider. If you have
    already installed a provider such as MetaMask, you can use your correct provider
    option, as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In our crowdfunding example, for the sake of simplicity, we will directly connect
    to our local Ganache server, as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Loading account information
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To load accounts, we define a drop-down menu with empty content, as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When we load the page, we will use `web3.eth.accounts` to get all 10 default
    accounts. Notice that the first account has an ether balance of 99.84; this is
    because we used the first account as the owner account to deploy the contract
    and burned some gas as the transaction fee, as shown in the following code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once the accounts are loaded, it will be displayed as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6cf02b02-bc1e-42b3-af7c-00a6692e63a2.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: Loading project information
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In crowdfunding, we defined a project struct that contains fundraising information,
    as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s define some related information in HTML, for example:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `CrowdFunding.deployed()` function will create an instance of `CrowdFunding`
    that represents the default address managed by `CrowdFunding`. The code here shows
    us how to display project information:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The result will be displayed as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6c21886-12d1-4cbb-8cda-37f88f55d9e4.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: Handling the fund function
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To raise funds, we need to call the fund function, which is defined in our
    crowdfunding smart contract. In our web page, we use the HTML range input slider
    component to contribute fund amounts, as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `Crowdfunding fund` function is a payable fallback function; therefore,
    we need to pass `msg.sender` and `msg.value` from the UI to call it, as follows.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can define the sending address and value parameters as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once we get the result back, we will call the `loadProject` function to refresh
    the project information. We can see that the current balance fund increased, as
    shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a940de15-5bdf-482f-a22e-ed38bd80d088.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
- en: checkGoalReached
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the funding goal is reached, the crowdfunding owner will collect of the
    all funds by running the `checkGoalReached` method.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML is just a simple button, as shown in the following code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Similar to the fund function, we call the smart contract in JavaScript using
    the following code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here is the detailed logic:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The result will display as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79ae7891-cff2-436e-9313-f2555092f934.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: If you followed the whole example and run this step, congratulations! You are
    now able to write and run a crowdfunding DApp.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned DApp basics and we now understand the web3.js API.
    By running Ganache as our local Ethereum environment, we could use the Truffle
    development tool to create a crowdfunding project and write a DApp component.
    Finally, we deployed and launched the crowdfunding DApp. In the next chapter,
    we will start to explore the most popular enterprise blockchain—Hyperledger Fabric.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 DApp 的基础知识，现在我们了解了 web3.js API。通过在本地以太坊环境中运行 Ganache，我们可以使用 Truffle
    开发工具创建一个众筹项目并编写一个 DApp 组件。最后，我们部署并启动了众筹 DApp。在下一章中，我们将开始探索最受欢迎的企业区块链——Hyperledger
    Fabric。
