- en: Deploying PKI-Based Identity with Blockchain
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Organizations have several applications to manage, and these are hosted by different
    systems and servers. Organizations have deployed several ways to authenticate
    users based on methods such as multi-factor authentication system, one for each
    system/application, **single sign-on** (**SSO**), and the directory server; however,
    authenticating users on the internet is comparatively a difficult mechanism. It
    is also extremely important to achieve trust over the internet before exchanging
    information because Internet has been kept open for trusted and untrusted parties.
    In order to established the trust over the public network, there is a need of
    an independent trusted party. A **public key infrastructure** (**PKI**) is an
    open framework built to resolve trust factors between the internet-connected users.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Public key infrastructure
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenges of the existing PKI model
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How blockchain technology can help?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lab and test results
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PKI
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Organizations have hundreds of cloud-based applications to manage and maintain.
    Managing individual access control and authentication is a difficult daily task.
    When it comes to internet users and enormous web applications, it becomes difficult
    to trust individual websites, and users tend to lose their privacy and confidential
    information through them. The PKI provides a secure means of authenticating an
    individual's identity.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Businesses can simplify the deployment and management issues that are encountered
    with applications by employing a PKI. As businesses are moving more toward cloud-based
    applications, it is critical to protect security-sensitive applications from emerging
    threats. There are several security threats when communicating online such as
    identity theft, **man-in-the-middle** (**MITM**) attacks, and data leaks.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: PKI in a nutshell
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The internet allows anyone to connect to anyone else and, unlike the real world,
    geographical/physical barriers don''t exist. This makes it difficult to identify
    a person over the internet and establish trust for further communication. In the
    following diagram, Alice wants to talk to Bob over the internet; however, Bob
    refuses because he doesn''t have any means of verifying Alice''s identity:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd9c854c-a576-4f4f-8e81-02a79228a5ea.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: The PKI solves this problem by appending a **trusted third party** (**TTP**)
    between Bob and Alice. So, before they can start getting to know each other, they
    have to establish a trust and the TTP helps to accomplish that. In the following
    diagram, Alice shares the digital certificate with Bob and Bob uses the public
    key from a trusted certificate authority to decrypt this signature and authenticate
    Alice.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f3b68d3-f0eb-43c6-aee7-8b5d909f5bfb.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding diagram, the TTP is the **certificate authority** (**CA**).
    This CA generates a certificate that helps an internet user show his/her identity
    over the internet:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '**PKI**: A PKI provides a hierarchical standard to manage the digital assets
    of an entity to establish a secure communication channel. It is not just limited
    to the users; it is also used by several different systems such as emails, web
    applications, smart cards, and more, which will be explained later.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network devices**: A PKI is used to control access to routers and switches
    with 802.1X authentication.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Applications**: Applications need to get a signed certificate from CA to
    run in the OS.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IPsec tunnels:** Routers and firewalls use certificates to authenticate other
    endpoints over the internet.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Radius servers:** An **Lightweight Directory Access Protocol** (**LDAP**)
    query is protected with PKI certificates.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows PKI security architecture:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/11058a5a-be0e-46a7-a536-9ec46ed640cb.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: The evolution of PKI
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The X.509 design elaborates data formats and procedures for the storage and
    distribution of public keys through certificates that are digitally signed by
    CA. However, X.509 does not include a profile to specify supporting many of the
    certificate''s subfields and extensions shown as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c8b1925f-55b6-495b-896b-03faa45d20f6.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: The standard efforts prepared an outline for PKI of X.509 version 3 as well
    as version 2 certificate revocation lists. Before coming to RFC 2459, there were
    around 11 drafts to enhance the X.509 standard.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'RFC 2510 was developed to specify a message protocol used in PKI. After this,
    there were two parallel developments with the need of an enrollment protocol and
    the preference to use the PKCS#10 message format. The following diagram explains
    the evolution of the PKI header. In version 2, an issuer unique ID and subject
    unique ID were added to the header. In version 3, an extension field was introduced
    to identify policy and other related information, illustrated as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f911fbf-3958-4e7f-a82c-f84065524253.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: Furthermore, the certificate request syntax was developed in S/MIME WG with
    PKCS#10\. With RFC 2510, a simple enrollment protocol was defined, but it did
    not use PKCS#10 as a certificate request format.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Components
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PKI is a collection of a wide variety of components, applications, policies,
    and practices to combine and accomplish the three security principals which are
    integrity, authentication, and non-repudiation. Digital certificates are the main
    components in PKI as they act as a digital identity over the internet. The five
    core components of PKI are explained in the following subsections.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Asymmetric key encryption
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In cryptography, encryption is the process of encoding information so that
    only an intended party can see it. There are two methods of accomplishing this
    cryptography encryption—symmetric encryption and asymmetric encryption, defined
    as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '**Symmetric encryption: **In symmetric encryption, the same key is used for
    the encryption and decryption of data. It is needed to ensure that both parties
    use the same key to encrypt and decrypt the data, shown as follows:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对称加密：**在对称加密中，相同的密钥用于加密和解密数据。需要确保双方使用相同的密钥来加密和解密数据，如下所示：'
- en: '![](img/739e3630-a59c-403c-bdfb-b75902305058.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/739e3630-a59c-403c-bdfb-b75902305058.png)'
- en: '**Asymmetric encryption: **In asymmetric encryption, a different set of keys
    are used to encrypt and decrypt the data. This key pair is a combination of a
    public and private key. A public key is used to encrypt the data, whereas a private
    key is used to decrypt the data. A public key goes along with the data over the
    internet, but a private key remains with the individuals who are using it, shown
    as follows:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非对称加密：**在非对称加密中，使用不同的密钥集来加密和解密数据。该密钥对是公钥和私钥的组合。公钥用于加密数据，而私钥用于解密数据。公钥随数据一起通过互联网传输，但私钥保留给使用它的个人，如下所示：'
- en: '![](img/4d28739f-d8d6-49e4-9e14-d978e36775d6.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4d28739f-d8d6-49e4-9e14-d978e36775d6.png)'
- en: 'The public and private key pair comprise two uniquely related crypto graphical
    keys. Here is an example of a public key:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥和私钥对包括两个唯一相关的加密密钥。以下是公钥的示例：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A public key is made available to everyone through the internet and is stored
    in the accessible repository or directory. On the other hand, the private key
    must remain private to its owner; hence, it is also named a **secret key**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥通过互联网向所有人提供，并存储在可访问的仓库或目录中。另一方面，私钥必须保持对其所有者的私密；因此，它也被称为**秘密密钥**。
- en: Both public key and secret keys are mathematically connected with each other;
    hence, data encrypted with a public key can only be decrypted by a respective
    secret key.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥和私钥之间在数学上是相关的；因此，使用公钥加密的数据只能由相应的私钥解密。
- en: Certificate
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 证书
- en: A certificate is an electronic ID that represents the identity of a user or
    a device interested in communicating over a network. The certificate basically
    ensures that only a legitimate user can connect to the network. A certificate
    is generated by signing the public key by a trusted third party, that is, the
    CA.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 证书是代表用户或设备的身份有兴趣通过网络进行通信的电子ID。证书基本上确保只有合法用户才能连接到网络。证书是通过由受信任的第三方（即CA）对公钥进行签名来生成的。
- en: 'The following are the three main types of certificates:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是三种主要类型的证书：
- en: '**Secure Socket Layer (SSL) certificate**: SSL server certificates are installed
    on server hosting services, such as a web application, mail server, directory,
    or LDAP server. This certificate contains identifying information about the organization
    that owns the application. SSL certificates also contain a system public key.
    The subject of the certificate matches the hostname of the server. This certificate
    has to be signed by a trusted certificate authority. The primary hostname is listed
    as the Common Name in the subject field of the certificate.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全套接字层（SSL）证书**：SSL服务器证书安装在托管服务的服务器上，例如Web应用程序、邮件服务器、目录或LDAP服务器。此证书包含有关拥有应用程序的组织的标识信息。SSL证书还包含一个系统公钥。证书的主题与服务器的主机名匹配。此证书必须由受信任的证书颁发机构签名。主机名在证书的主题字段中列为通用名称。'
- en: '**Client certificate**:Client certificates are used to identify an internet
    user, a device, a gateway, or any other type of device. It is a digital credential
    that validates the identity of the client who owns the certificate. Today, many
    applications allow using certificates to authenticate users for a specific resource
    instead of a username and a password. Two users communicating over email will
    also use a client certificate to authenticate their respective identity.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端证书**：客户端证书用于识别互联网用户、设备、网关或任何其他类型的设备。它是一种数字凭证，用于验证拥有该证书的客户端的身份。如今，许多应用程序允许使用证书来验证用户对特定资源的身份，而不是使用用户名和密码。通过电子邮件进行通信的两个用户还将使用客户端证书来验证各自的身份。'
- en: '**Code signing certificate**:Code signing certificates are used to sign software
    running on the system. With millions of applications being downloaded by a user
    machine, it is important to verify the code; hence, code signing certificates
    play an important role in it.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码签名证书**：代码签名证书用于对在系统上运行的软件进行签名。由于用户机器下载了数百万个应用程序，因此验证代码非常重要；因此，代码签名证书在其中发挥着重要作用。'
- en: '**Email certificate**: The sender needs to identify which public key to use
    for any given recipient with S/MIME protocol. The sender gets this information
    from an email certificate. Usually, S/MIME protocol is used when email communication
    is deployed within the organization and with its own CA.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件证书**：发件人需要使用S/MIME协议确定向特定收件人使用哪个公钥。发件人从电子邮件证书中获取这些信息。通常，当组织内部和与其自己的CA进行邮件通信时，会使用S/MIME协议。'
- en: Certificate authority (CA)
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 证书颁发机构（CA）
- en: 'The CA is a trusted third-party that certifies that users, servers, databases,
    and administrators are who they say they are. The CA checks the credentials of
    users and grants the certificate, signing it with a secret key. The CA can be
    an on-premises solution or it can be a managed solution that offers certificate
    services, illustrated as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: CA是一个可信任的第三方，用来证明用户、服务器、数据库和管理员的身份。CA检查用户的凭据并授予证书，并用密钥对其进行签名。CA可以是本地解决方案，也可以是提供证书服务的托管解决方案，如下图所示：
- en: '![](img/a1eede33-e739-42c1-9895-afb23faebd89.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1eede33-e739-42c1-9895-afb23faebd89.png)'
- en: 'The functions of the CA are as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: CA的功能如下：
- en: Issuing and delivering certificates
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颁发和交付证书
- en: Posting certificates and **certificate revocation list** (**CRL**) to repositories
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将证书和**证书吊销列表**（CRL）发布到存储库
- en: Managing revocation requests from a certificate owner
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理证书所有者的吊销请求
- en: 'In the following screenshot, we can see the list of digital signatures in a
    client system. There is a list of certificates from several certificate authorities
    with their expiry dates:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们可以看到客户端系统中的数字签名列表。有来自多个证书颁发机构的证书列表，以及它们的到期日期：
- en: '![](img/ccb75289-ba36-4cc4-ae32-f733a77c3674.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ccb75289-ba36-4cc4-ae32-f733a77c3674.png)'
- en: 'The different types of CA are as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: CA的不同类型如下：
- en: '**Public digital certificate authority**: There are several public certificate
    providers who manage the certificates used for commercial and personal purposes.
    Credentials are issued only after a specific fee is paid.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共数字证书颁发机构**：有几家管理商业和个人用途证书的公共证书提供者。只有支付了特定费用后才发放凭证。'
- en: '**Private digital certificate authority**: Organization administrators can
    issue certificates to internal systems and users within the domain. A Windows
    server can create and store key pairs, but these private certificates won''t be
    valid for outside communication.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私人数字证书颁发机构**：组织管理员可以向域内部系统和用户颁发证书。Windows服务器可以创建和存储密钥对，但这些私人证书对外部通信无效。'
- en: Registration authority (RA)
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册机构（RA）
- en: The RA is responsible for authenticating the identity of newer entities that
    require a certificate from the certificate authority. It also maintains local
    registration data information and initiates the renewal and revocation process
    for old certificates.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: RA负责对需要证书颁发机构证书的新实体进行身份验证。它还维护本地注册数据信息，并发起对旧证书的更新和撤销流程。
- en: 'The functions of the RA are as follows and illustrated in the subsequent diagram:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: RA的功能如下，并在后续图表中进行了说明：
- en: It is responsible for authentication of new users or systems that require certificates
    from CAs
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负责对需要从CA获得证书的新用户或系统进行身份验证
- en: It also performs some of the functions of the CA
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它还执行了CA的一些功能
- en: It acts as an agent to the CA
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它作为CA的代理
- en: 'It maintains local registration data from the renewal and revocation of redundant
    certificates:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护来自冗余证书的更新和吊销的本地注册数据：
- en: '![](img/85f3f0eb-d039-4130-890f-6de71121716e.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85f3f0eb-d039-4130-890f-6de71121716e.png)'
- en: Certificate repository (CR)
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 证书库（CR）
- en: The CR is a certificate database that is accessible by all nodes in the PKI
    environment. It also holds certificate revocation-related information and the
    governing policy information. Certificate revocation lists are used in this repository
    to get an updated list of certificates.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: CR是一个可以被PKI环境中所有节点访问的证书数据库。它还保存了与证书吊销相关的信息和管理策略信息。证书吊销列表被用于从该存储库中获取更新后的证书列表。
- en: 'The functions of the certificate repository are as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 证书库的功能如下：
- en: It allows information retrieval in an unauthenticated manner
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许以非验证方式检索信息
- en: It acts as a database to hold information such as public key certificates, revocation
    lists, and policies
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它作为一个数据库，保存公钥证书、吊销列表和策略等信息
- en: Architecture
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构
- en: 'The entire PKI architecture works on a model named the *chain of trust*. This
    model lies within the trust relationship between each identity. Specifically,
    the difference between a two-tier hierarchy and three-tier hierarchy is that the
    second tier is placed between root CA and the issuing CA. The main reason for
    using a second-tier CA is to have a policy CA that is responsible for issuing
    certificates to the issuing CA however, three tier hierarchy provides a better
    security. This policy CA can also be used as an administrative boundary. This
    design is also useful if the administrator needs to revoke a number of CAs due
    to a key compromise; the revoke can be performed at the second level, leaving
    other branches of the root available as shown in the following diagram:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 整个PKI架构都是基于名为*信任链*的模型。这个模型存在于每个身份之间的信任关系中。具体来说，两级层次结构和三级层次结构之间的区别在于第二层被放置在根CA和颁发CA之间。使用第二级CA的主要原因是要有一个负责向颁发CA签发证书的策略CA，然而，三级层次结构提供了更好的安全性。这个策略CA也可以用作管理边界。如果管理员需要因为密钥泄露而撤销一些CA，这个设计也很有用；撤销可以在第二级别执行，同时根的其他分支仍然可用，如下图所示：
- en: '![](img/d616335c-2159-4555-a46e-2ea6ec193ee6.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d616335c-2159-4555-a46e-2ea6ec193ee6.png)'
- en: 'During the signing process, the root CA digitally signs the intermediate certificate
    using its secret key. This process achieves authenticity, stating that the intermediate
    certificate is trusted by the root CA. Each CA can receive the certificate request
    from the client and issue it. Normally, the root CA can''t be reached by client
    but client is eligible  to hold the root CA certificates. The client sends the
    certificate request to some subordinate CAs and gets the certificate installed
    as shown in the following diagram:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在签名过程中，根CA用其秘钥对中间证书进行数字签名。这个过程确保中间证书经过根CA信任。每个CA都可以接收客户端的证书请求并签发。通常情况下，根CA是无法被客户端访问的，但是客户端有资格拥有根CA证书。客户端将证书请求发送给一些下级CA并进行安装，如下图所示：
- en: '![](img/fdd5e68b-8167-4d4e-a2c3-27007d607a35.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fdd5e68b-8167-4d4e-a2c3-27007d607a35.png)'
- en: 'In the following diagram, we can see the flow of sharing digital certificates
    and their decryption. In order to authenticate the party, the digital certificate
    is decrypted by using the public key:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们可以看到数字证书及其解密的流程。为了验证一方，数字证书通过使用公钥进行解密：
- en: '![](img/a05def17-88c9-471a-a3e9-263b67d90f97.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a05def17-88c9-471a-a3e9-263b67d90f97.png)'
- en: 'After understanding the hierarchy of digital certificates with identity, intermediate,
    and root certificate authorities, now, we will learn how communication is established
    and processed between end clients with browser and SSL websites. Client requests
    to access the HTTPS website. A client''s browser is preloaded with a number of
    root CA certificates. Consider the steps as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了数字证书的层次结构，包括身份证书、中间证书和根证书，现在我们将了解客户端和SSL网站之间的通信是如何建立和处理的。客户端请求访问HTTPS网站。客户端的浏览器预装了一些根CA证书。具体步骤如下：
- en: The client connects to the SSL website.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端连接到SSL网站。
- en: The website responds to the client with its identity and intermediate certificates.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网站以其身份和中间证书回应客户端。
- en: The client then confirms the identity of the intermediate certificate by decrypting
    the digital signature using the intermediate public key.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后客户端使用中间公钥解密数字签名来确认中间证书的身份。
- en: The client then confirms that the requested URL matches with a distinguished
    name within the identity certificate. If there is a mismatch, it displays a warning.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后客户端确认所请求的网址是否与身份证书中的显著名称匹配。如果不匹配，会显示警告。
- en: Traffic then gets encrypted/decrypted by the client using a public key and by
    the server using a secret key.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交通流量随后由客户端使用公钥进行加密/解密，服务器使用秘钥进行加密/解密。
- en: Certificate life cycle
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 证书生命周期
- en: 'As per the **National Institute of Standards and Technology** (**NIST**), an
    encryption key life cycle is a combination of the pre-operational, operational,
    post-operational, and deletion stages of key management. It is important to consider
    the time spent in the account as the validity of a key is always limited. Hence,
    the crypto period is used to record time during which a specific key is authorized
    for use. The crypto period is determined by combining the estimated time during
    which the encryption will be applicable and the time when it will be decrypted
    for use, illustrated as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9caabd8a-c001-4cd5-aa90-3788741585a3.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
- en: 'The following diagram shows the crypto period flowchart with multiple keys:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5220d549-1714-4400-b5bb-349b55846bab.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can examine the several stages in which a key is used and processed:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '**Key creation**: The encryption key is generated and stored on the key management
    server. The key manager generates the encryption key pair through the process
    of cryptography by using a secure random bit generator. Once the key pair is created,
    it is then stored with all its attributes in the key storage database. The attributes
    usually consist of name, size, instance, activation date, rollover, mirroring,
    key access, and other related attributes. The key activation time can be scheduled,
    or it can activated the moment it was created. The encryption key manager keeps
    track of current and past instances of the encryption key.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Key use and rollover**: The key manager is responsible for allowing authorized
    users or the system to retrieve information and also allowing them to process
    encryption or decryption. It is also responsible for managing the state of an
    encryption key throughout its lifetime and over every instance. If an organization
    has a policy that states it should use a new set of keys every year, then the
    key manager should retain previous versions of the key and dispense only the current
    version. However, previous versions can still be retrieved in order to perform
    the decryption process.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Key revocation**: An administrator connects to a key manager to revoke a
    key so that it is no longer used for further encryption and decryption processes.
    If required, the administrator can even reactivate the key and use it for further
    steps. There are some situations where the administrator can also use the decrypted
    data that was previously encrypted, such as an old backup. The encryption life
    cycle is illustrated as follows:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c7d95681-8434-45e6-9da4-182ff6d75bef.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: '**Back up (escrow)**: The NIST recommends an archive for all deactivated keys.
    This archive has to be protected from any unauthorized modification, deletion,
    and alteration. It is also recommended that it has a recoverable key mechanism
    after the end of its crypto period.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Key deletion (destruction)**: If the key is compromised or is not being used
    for a long period of time, the administrator should choose to delete the key from
    the key storage database of the encryption key manager. The key manager removes
    the key and all of its associated instances, or it can specifically remove certain
    instances. This option plays an important role when the data is compromised in
    its encrypted state. If the key is deleted, the compromised data will be completely
    secure and unrecoverable because it is impossible to recreate the encryption key.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密钥删除（销毁）**：如果密钥已经受到损害或长时间未被使用，管理员应选择从加密密钥管理器的密钥存储数据库中删除密钥。密钥管理器会删除密钥及其所有关联的实例，或者可以专门删除某些实例。当数据在其加密状态下受到损害时，此选项起到了重要作用。如果删除密钥，受损数据将完全安全且无法恢复，因为不可能重新创建加密密钥。'
- en: Key management
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密钥管理
- en: 'The **Key Management Interoperability Protocol** (**KMIP**) is used for communication
    between clients and servers to perform management operations on stored objects
    which are maintained by a key management system. This is a standardized way to
    manage encryption keys throughout the life cycle and it has been developed to
    facilitate both symmetric and asymmetric cryptographic keys, digital certificates,
    and other related templates to streamline object creation and management, illustrated
    as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**密钥管理互操作性协议**（**KMIP**）用于客户端和服务器之间的通信，执行由密钥管理系统维护的存储对象的管理操作。这是一种标准化的管理加密密钥的方法，贯穿整个生命周期，并且已经发展成为促进对称和非对称加密密钥、数字证书和其他相关模板进行对象创建和管理的方法，具体如下所示：'
- en: '![](img/bf9d77ee-a0f4-410d-8d2a-c68c660a89ab.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf9d77ee-a0f4-410d-8d2a-c68c660a89ab.png)'
- en: 'Under the guidelines of **Organization for the Advancement of Structured Information
    Standards** (**OASIS**), a nonprofit consortium that provides standards for people
    to exchange information over the internet and within their organizations, there
    are certain lists of objects a client can request to the key management server:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在**结构化信息标准促进组织**（**OASIS**）的指导下，这是一个非营利性质的联盟，提供人们在互联网上和组织内交换信息的标准，客户端可以向密钥管理服务器请求的特定对象列表有：
- en: '**Create a key or a key pair**: This is used to generate a new symmetric key
    or a new public/secret key pair and register new, managed cryptographic objects'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建密钥或密钥对**：用于生成新的对称密钥或新的公钥/私钥对并注册新的托管加密对象。'
- en: '**Register**: It is mainly used to register a managed object with keys, passwords,
    or some other cryptographic materials'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册**：主要用于使用密钥、密码或一些其他加密材料注册托管对象。'
- en: '**Re-key:** In order to generate a replacement key, also called a key change,
    re-key is used for existing symmetric keys or key pairs for an existing public/private
    key pair'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新生成密钥**：为现有对称密钥或密钥对生成替代密钥，也称为密钥更改，用于现有的公钥/私钥对。'
- en: '**Derive key**: In order to derive a symmetric key or secret object, a derive
    key is used to fetch the data objects that are already known to the key management
    system'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**派生密钥**：为了派生对称密钥或密钥对象，使用派生密钥来获取密钥管理系统已知的数据对象。'
- en: '**Locate**: In order to find one or more managed objects, a locate request
    is used for attributes specified in the request'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定位**：为了找到一个或多个托管对象，使用定位请求来获取请求中指定的属性。'
- en: '**Check**: This is used to check for the use of a managed object, as per the
    value specified in the request'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查**：用于检查请求中指定值的托管对象的使用情况。'
- en: '**Get or get attributes**: This is used to return a managed object specified
    by its unique identifier or more than one attributes associated with a managed
    object'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取或获取属性**：用于返回由其唯一标识符指定的托管对象或与托管对象关联的一个以上属性。'
- en: '**Add, modify, or delete attributes**: These are used to add, delete, or modify
    an attribute instance associated with a managed object'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加、修改或删除属性**：用于添加、删除或修改与托管对象关联的属性实例。'
- en: '**Activate**: This is used to activate a managed cryptographic object'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**激活**：用于激活托管的加密对象。'
- en: '**Revoke**: This is used to revoke a managed cryptographic object'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Revoke**：用于撤销托管的加密对象。'
- en: '**Destroy**: This is used when you are required to destroy a key material for
    a specific managed object'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**销毁**：当需要销毁特定托管对象的密钥材料时使用。'
- en: '**Archive**: This is used to specify a managed object'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存档**：用于指定托管对象。'
- en: '**Recover**: This is used to get access to a data recovery process.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恢复**：用于访问数据恢复过程。'
- en: Challenges of the existing PKI model
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现有 PKI 模型的挑战
- en: 'The challenges of the existing PKI model are as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现有 PKI 模型的挑战如下：
- en: '**Problem 1** – **the need for additional security**: According to a report
    from the Ponemon Institutes 2016 research, 62% of businesses have deployed cloud-based
    applications using PKI, with an increase of 50% in 2015\. If the central certificate
    repository gets compromised, it will lead to a massive data breach and account
    theft. Organizations tend to use an additional layer of security such as **hardware
    security modules** (**HSMs**) to secure their PKI. HSMs are deployed to protect
    PKIs for the most critical root and issuing CA private keys. Organizations are
    opting for multi-factor authentication for administrators and HSM usage.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题 1** – **需要额外安全性**：根据 Ponemon 研究所 2016 年的报告，62% 的企业在使用 PKI 部署基于云的应用程序，2015
    年增长了 50%。如果中央证书存储库遭到破坏，将导致大规模的数据泄漏和账户被盗。组织倾向于使用额外的安全层，如**硬件安全模块**（**HSMs**）来保护其
    PKI。HSMs 被部署来保护最关键的根和发行 CA 私钥的 PKI。组织正在选择多因素身份验证以及 HSM 的使用。'
- en: '**Problem 2** – **central authority**: In the current state of the internet,
    a central authority (root authority) is responsible for managing DNS requests
    and responses (root authority), X.509 certificates, and much more. Therefore,
    all internet-connected devices and systems have to trust the third party to manage
    public keys and identifiers. Let''s take an example of a domain name; even though
    it has been purchased by its owner, it practically belongs to third parties, such
    as the **Internet Corporation for Assigned Names and Numbers** (**ICANN**), domain
    registrars, and certificate authorities.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题 2** – **中央权威**：在当前互联网状态下，中央权威（根权威）负责管理 DNS 请求和响应（根权威）、X.509 证书等。因此，所有连接到互联网的设备和系统都必须信任第三方来管理公钥和标识符。以域名为例；即使它已被其所有者购买，实际上也属于第三方，如**互联网名称与数字地址分配机构**（**ICANN**）、域名注册商和证书颁发机构。'
- en: Furthermore, these trusted third parties are very much capable of intercepting
    and compromising the integrity and security of users worldwide. There have been
    several cases where these trusted third parties have shared their customer's information
    to security agencies and other bodies. They can either do this for financial gain
    or to prepare customer behavior analytics.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些受信任的第三方完全有能力拦截和破坏全球用户的完整性和安全性。有过几起案例表明，这些受信任的第三方已经向安全机构和其他机构分享了其客户的信息。他们可能出于金钱利益或准备客户行为分析而这样做。
- en: How can blockchain help?
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块链如何帮助？
- en: PKI has major vulnerability because of its centralized management system. Blockchain,
    however, is fundamentally decentralized and allow communication between several
    parties without any third party involvement. The approach of going decentralized
    can be paradigm shift in the PKI; however, it needs a systematic approach to deploy
    it.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其集中式管理系统，PKI 具有主要的漏洞。然而，区块链基本上是分散的，允许多个参与方之间进行通信，而不需要任何第三方参与。采用去中心化的方法可能是
    PKI 的一次范式转移；然而，需要一个系统化的方法来部署它。
- en: Decentralized infrastructure
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分散式基础架构
- en: Blockchain is about achieving a decentralized network of multiple participants
    without third-party involvement. A **decentralized public key infrastructure**
    (**DPKI**) is an innovative concept that achieves authentication systems over
    public systems without depending on a single third party that can compromise the
    integrity and security of the system. As we already know, blockchain is built
    with a trustless approach that allows both trusted and untrusted parties to communicate
    with each other. However, trust is usually established among geographically and
    politically disparate participants with several consensus models for the state
    of the ledger. By definition, blockchain allows you to store any kind of value
    with several nodes in the network. With DPKI, this value will be a form of secret
    properties.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链是关于实现多个参与方的分散网络，无需第三方参与。**分散式公钥基础设施**（**DPKI**）是一个创新的概念，它在公共系统上实现了身份验证系统，而不依赖于可能损害系统完整性和安全性的单一第三方。正如我们已经知道的，区块链是建立在无信任的方法上的，允许信任和不信任的参与方相互通信。然而，通常通过几种共识模型来在地理和政治上分散的参与方之间建立信任，并形成账本状态。根据定义，区块链允许您在网络中的多个节点上存储任何类型的值。通过DPKI，这个值将是一种秘密属性。
- en: A principal can be given direct control over global readable identifiers, like
    a website domain, by registering the identifier in the blockchain. With the key-value
    database, the principal uses the identifier as the lookup key. Blockchain can
    allow the assignment of confidential assets, such as public keys and other attributes,
    and permit these values to be globally readable in a secure manner that can't
    be compromised by any MITM, which is possible in PKIX. This is accomplished by
    allowing the most correct public key to link with the identifier value, and authentication
    is performed by an identifier lookup to the latest public key.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 主体可以通过在区块链中注册标识符来直接控制全局可读的标识符，如网站域名。使用键值数据库，主体将标识符用作查找键。区块链可以允许分配保密资产，例如公钥和其他属性，并允许以一种安全的方式全局读取这些值，这是PKIX中可能受到中间人攻击的。通过允许最正确的公钥与标识符值关联，并通过对最新的公钥进行标识符查找来执行身份验证，可以实现这一点。
- en: In this design of DPKI, the system remains decentralized, and the control over
    the identifier remains with the principal and eliminates the risk of the identifier
    data store getting compromised.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种设计的DPKI中，系统保持去中心化，标识符的控制权仍在主体手中，并消除了标识符数据存储被损害的风险。
- en: Deployment method
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署方法
- en: 'Ethereum, among other platforms, is one of the most flexible and reliable blockchains.
    It is a programmable blockchain and fits with a granular and policy-based PKI.
    The PKI is implemented as a function in a smart contract in an Ethereum blockchain.
    Each entity can have multiple attributes to authenticate ownership. These entity
    can be a public key or an Ethereum address. Each transaction is identified using
    a public key and then represented by a corresponding entity ID and PKI. A smart
    contract is used to program the events and functions of various operations in
    the PKI. The smart contract can also be configured to invoke specific PKI operations
    such as create, derive, remove, destroy, and many more. These functions and processes
    will be written in Solidity and deployed in EVM, which will deliver an ease of
    user management for PKI operations. The following sets of PKI operations are made
    available by programming a smart contract:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊，除其他平台外，是最灵活可靠的区块链之一。它是一个可编程的区块链，并适用于粒度细的基于策略的PKI。PKI作为以太坊区块链中智能合约的一个函数来实现。每个实体可以有多个属性以进行身份验证。这些实体可以是公钥或以太坊地址。每个交易都使用公钥标识，并由相应的实体ID和PKI表示。智能合约用于对PKI中的各种操作进行事件和函数编程。智能合约还可以配置为调用特定的PKI操作，如创建、派生、移除、销毁等。这些功能和流程将以Solidity编写，并在EVM中部署，这将为PKI操作的用户管理带来便利。通过编程智能合约，提供以下一系列的PKI操作：
- en: '**The registration of an entity**: Users or systems are added to the PKI system
    by calling a registration event from the smart contract. The entity can be as
    simple as an Ethereum address, public key, attribute ID, data, and data hashes.
    The configured event on the smart contract collects the entity and forwards it
    as a transaction to Ethereum. The queued transactions are mined, and a block is
    created that will be later added to the blockchain.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实体注册**：用户或系统通过调用智能合约的注册事件将其添加到PKI系统中。实体可以简单到只是一个以太坊地址、公钥、属性ID、数据和数据哈希。智能合约上配置的事件收集实体并将其作为交易发送到以太坊。排队的交易被挖矿，创建一个后来将加入到区块链中的区块。'
- en: '**The signing of attributes**: An entity can be characterized using a registration
    event. Each attribute of the entity can be signed by the PKI system through a
    smart contract, and a transaction will be issued. This signed entity will later
    be made available to other entities or users.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性签名**：实体可以使用注册事件来表征。实体的每个属性都可以通过智能合约由PKI系统签名，并发出一笔交易。这个签名的实体之后将被提供给其他实体或用户使用。'
- en: '**The retrieval of attributes**: The attributes of the entities can be located
    by applying a filter to the blockchain using the respective IDs of events that
    have been configured on the smart contract.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性检索**：可以通过在智能合约上配置的事件的相应ID在区块链上应用过滤器来定位实体的属性。'
- en: '**Revoke signature**: This is one of the most critical functions required by
    any PKI solution to revoke the digital signature on attributes or entities. Revocation
    becomes extremely important when a user loses his/her key or it is compromised.
    Smart contracts can be configured to invoke the revocation event and revoke the
    signature on a specific entity.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the DPKI deployment, the registrar still has a role in the infrastructure,
    but it is restricted as follows to ensure that identities to entities are represented
    in the network:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: It is required to ensure that software is always under the control of principals
    and corresponding keys.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private keys have to be generated in a decentralized way to ensure that they
    remain under control of the principal. The generation of a key pair on behalf
    of a principal has to be strictly prohibited.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There has to be no single entity that can change other entities without consent
    from the principal.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once a namespace is created within a blockchain through an Ethereum smart contract,
    it can't be destroyed.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The registration and renewal of identifiers has to be transparent.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, software that manages identifiers must ensure that all activities
    such as creating, updating, renewing, or deleting identifiers is forwarded through
    a decentralized mechanism.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lab
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will begin the lab by first turning up the Node.js and Ganache-CLI framework.
    Installation of  `ganache-cli` has to be performed carefully as it creates the
    entire Ethereum environment in our local system. Take the following steps:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Install Node.js using the commands shown in the website at [https://nodejs.org/uk/download/package-manager/#arch-linux](https://nodejs.org/uk/download/package-manager/#arch-linux).
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command in the Terminal:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we  start the test network by using the command as shown in the following
    screenshot in the Terminal:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/43765ced-32ce-4175-9b04-1ba8507ddab5.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
- en: 'We now have to enable the developer mode to see the browser content in detail.
    We also have to enable the LOAD UNPACKED extension, as shown in the following
    screenshot:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/49195490-22c4-4b5e-be73-a733b1e3868f.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
- en: Testing
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CAs can issue **Reaction Policies** (**RP**) which take effect if an unauthorized
    certificate for a domain is issued. In the process of testing, we need to register
    **Domain Certificate Policies** (**DCPs**) and create RPs. The testing can be
    done with the following steps on our local  system:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'We need first add a detector and register it. The following script is required
    to add detector by defining its detector ID:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc30f1fc-9bea-403b-a991-1e124ed1180d.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: 'We will now register a CA used by the domain owner to issue certificates. It
    is required to define CA ID, CA owner address and  name shown as follows:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/21ad23c1-12fc-4a2e-86d2-10ae98b83d0b.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
- en: 'Register DCP with CAs, shown as follows:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b4080b4e-6626-411e-814d-adf57d35802c.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: 'Create an associated RP under the smart contract, shown as follows:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9662ef9f-8784-4404-bdeb-2384943dd7ba.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9662ef9f-8784-4404-bdeb-2384943dd7ba.png)'
- en: 'Revoke a certificate when the detector receives reports of a malicious certificate
    in the wild, shown as follows:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当检测器接收到有关野外恶意证书的报告时，撤销证书，如下所示：
- en: '![](img/88214aee-3deb-4370-a13a-e135246e4d1e.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88214aee-3deb-4370-a13a-e135246e4d1e.png)'
- en: 'The detector can now blacklist the CA when a rogue CA misbehaves frequently,
    shown as follows:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当一个恶意CA频繁地表现出异常行为时，检测器现在可以将其加入黑名单，如下所示：
- en: '![](img/fbecab45-3f50-4b7f-ba12-df4d9b449edd.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fbecab45-3f50-4b7f-ba12-df4d9b449edd.png)'
- en: In this way, we have successfully deployed the PKI with an Ethereum blockchain.
    With this infrastructure, we have described the full process, from registering
    a CA to claiming reaction payouts. We have successfully developed a model describing
    reaction payouts and developed a method to enforce accountability on CAs that
    are misbehaving.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们成功地部署了具有以太坊区块链的PKI。借助这个基础设施，我们描述了完整的流程，从注册CA到索赔反应支付。我们成功地开发了一个描述反应支付的模型，并开发了一种强制对行为不端的CA负责的方法。
- en: Summary
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about the importance of PKI and how it solves trust
    factors between the internet-connected users. We also understood several components
    in the PKI that are responsible for making PKI a more reliable model to keep trust
    over a public network.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你了解了PKI的重要性以及它如何解决互联网用户之间的信任问题。我们还了解了PKI中的几个组成部分，这些部分负责使PKI成为一个更可靠的模型，以保持对公共网络的信任。
- en: Questions
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'There have been several revisions published under the PKI proposal, and different
    technologies have been integrated. These are some of the questions that might
    still be important to answer:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在PKI提案下已经发布了几个修订版本，并且已经集成了不同的技术。以下是可能仍然重要的一些问题：
- en: What are some other methods that are used to manage keys?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有哪些其他用于管理密钥的方法？
- en: What are some of the advances in PKI-based identity with blockchain?
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些基于区块链的PKI身份验证方面有哪些进展？
- en: Further reading
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Readers can refer to the following links to further explore the PKI framework
    and related technologies:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 读者可以参考以下链接进一步探索PKI框架和相关技术：
- en: '*PKI Technical Standards* at [http://www.oasis-pki.org/resources/techstandards/](http://www.oasis-pki.org/resources/techstandards/).'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*PKI技术标准*位于 [http://www.oasis-pki.org/resources/techstandards/](http://www.oasis-pki.org/resources/techstandards/)。'
- en: '*IKP: Turning a PKI Around with Blockchains* at [https://eprint.iacr.org/2016/1018.pdf](https://eprint.iacr.org/2016/1018.pdf).'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*IKP：使用区块链改变PKI*位于 [https://eprint.iacr.org/2016/1018.pdf](https://eprint.iacr.org/2016/1018.pdf)。'
- en: '*PKI - Public Key Infrastructure* at [https://www.ssh.com/pki/](https://www.ssh.com/pki/)[.](https://www.ssh.com/pki/)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*PKI - 公钥基础设施*位于 [https://www.ssh.com/pki/](https://www.ssh.com/pki/)。'
