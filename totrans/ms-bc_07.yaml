- en: Chapter 7. Ethereum 101
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章 以太坊 101
- en: This chapter is intended to be an introduction to the Ethereum blockchain. You
    will be introduced to the fundamentals and advanced theoretical concepts behind
    Ethereum. A discussion on various components, protocols, and algorithms relevant
    to the Ethereum blockchain will be given in detail so that you can understand
    the theory behind this blockchain paradigm. Also, a practical and in-depth introduction
    to wallet software, mining, and setting up Ethereum nodes will be covered in this
    chapter. Some material on various challenges, such as security and scalability
    faced by Ethereum, will also be   introduced. Additionally, trading and market
    dynamics will be discussed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在介绍以太坊区块链。您将介绍以太坊背后的基本和高级理论概念。将详细讨论与以太坊区块链相关的各种组件、协议和算法，以便您理解这一区块链范式背后的理论。此外，本章还将介绍有关钱包软件、挖矿和设置以太坊节点的实际深入介绍。还将介绍以太坊所面临的安全性和可扩展性等各种挑战的一些材料。此外，还将讨论交易和市场动态。
- en: Introduction
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Ethereum was conceptualized by *Vitalik Buterin* in November 2013\. The key
    idea proposed was the development of a Turing-complete language that allows the
    development of arbitrary programs (smart contracts) for blockchain and decentralized
    applications. This is in contrast to bitcoin, where the scripting language is
    very limited and allows basic and necessary operations only.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊是由*Vitalik Buterin*于2013年11月构想的。他提出的关键想法是开发一种图灵完备的语言，允许为区块链和去中心化应用程序开发任意程序（智能合约）。这与比特币形成鲜明对比，比特币的脚本语言非常有限，只允许基本和必要的操作。
- en: Ethereum clients and releases
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以太坊客户端和版本发布
- en: Various Ethereum clients have been developed using different languages and currently
    most popular are go-Ethereum and parity. go-Ethereum was developed using Golang,
    whereas parity was built using Rust. There are other clients available too, but
    usually, the go-Ethereum client known as *geth* is sufficient for all purposes.
    Mist is a user-friendly **Graphical User Interface** (**GUI**) wallet that runs
    geth in the background to sync with the network. More details on this will be
    provided later in the chapter, in the installation and mining section.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不同语言开发了各种以太坊客户端，目前最流行的是go-Ethereum和parity。go-Ethereum是使用Golang开发的，而parity是使用Rust构建的。也有其他可用的客户端，但通常来说，go-Ethereum客户端被称为*geth*对所有目的都是足够的。Mist是一个用户友好的**图形用户界面**（**GUI**）钱包，后台运行geth与网络同步。稍后的章节中将提供更多关于这一点的细节，在安装和挖矿部分。
- en: The first release of Ethereum was known as *Frontier*, and the current release
    of Ethereum is called *homestead release*. The next version is named metropolis
    and it focuses on protocol simplification and performance improvement. The final
    release is named *serenity*, which is envisaged to have a Proof of Stake algorithm
    (Casper) implemented with it. Other areas of research targeted with serenity include
    scalability, privacy, and **Ethereum virtual machine** (**EVM**) upgrade. As this
    is a continuous development effort and the Ethereum ecosystem will undergo constant
    improvement and development, serenity should not really be considered a *final* version
    but a major milestone in a long journey of continuous improvement. Further releases
    are envisaged but have not been named yet. The vision of *web 3.0* has already
    been proposed and is being discussed in the community. Web 3.0 is a concept that
    basically proposes a semantic and intelligent web as an evolution of the existing
    web 2.0 technology. This is the vision of an ecosystem where people, applications,
    data, and web are all connected together and are able to interact with each other
    in an intelligent fashion. With the advent of the blockchain technology, an idea
    of decentralized web has also emerged, which in fact was the original vision of
    the Internet. The core idea is that all major services, such as DNS, search engines,
    and identity on the Internet will be decentralized in web 3.0\. This is where
    Ethereum is being envisaged as a platform that can help realize this vision.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '以太坊的第一个版本被称为*Frontier*，当前版本称为*Homestead*。下一个版本被命名为*Metropolis*，它专注于协议简化和性能改进。最终版本被命名为*serenity*，预计将实施权益证明算法（Casper）。serenity的其他研究领域包括可扩展性、隐私和**以太坊虚拟机**（**EVM**）升级。由于这是持续的开发工作，以太坊生态系统将不断改进和发展，因此serenity不应被视为一个*最终*版本，而是一个长期持续改进之旅的重要里程碑。进一步的版本尚未命名。*Web
    3.0*的愿景已经提出，并在社区中进行讨论。Web 3.0是一个基于现有Web 2.0技术演变而来的语义和智能Web的概念。这是一个人们、应用程序、数据和网络都能智能互连并相互交互的生态系统愿景。随着区块链技术的出现，去中心化网络的想法也出现了，这实际上是互联网的最初愿景。核心思想是在web
    3.0中所有主要服务，如DNS、搜索引擎和互联网身份都将被去中心化。以太坊被设想为一个可以帮助实现这一愿景的平台。 '
- en: The Ethereum stack
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以太坊堆栈
- en: The Ethereum stack consists of various components. At the core, there is the
    Ethereum blockchain running on the P2P Ethereum network. Secondly, there's an
    Ethereum client (usually geth) that runs on the nodes and connects to the peer-to-peer
    Ethereum network from where blockchain is downloaded and stored locally. It provides
    various functions, such as mining and account management. The local copy of the
    blockchain is synchronized regularly with the network. Another component is the
    `web3.js` library that allows interaction with geth via the **Remote Procedure
    Call** (**RPC**) interface.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊堆栈由各种组件组成。在核心位置，有以太坊区块链运行在点对点以太坊网络上。其次，有一个以太坊客户端（通常是geth），在节点上运行并连接到点对点以太坊网络，从中下载和本地存储区块链。它提供各种功能，如挖矿和账户管理。区块链的本地副本定期与网络同步。另一个组件是`web3.js`库，允许通过**远程过程调用**（**RPC**）接口与geth进行交互。
- en: 'This can be visualized in the following diagram:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在下图中可视化：
- en: '![The Ethereum stack](img/B05975_07_01-1.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![以太坊堆栈](img/B05975_07_01-1.jpg)'
- en: The Ethereum stack showing various components
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊堆栈显示了各种组件
- en: Ethereum blockchain
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊区块链
- en: Ethereum, just like any other blockchain, can be visualized as a transaction-based
    state machine. This is mentioned in the Ethereum yellow paper written by *Dr.
    Gavin Wood*. The idea is that a genesis state is transformed into a final state
    by executing transactions incrementally. The final transformation is then accepted
    as the absolute undisputed version of the state. In the following diagram, the
    Ethereum state transition function is shown, where a transaction execution has
    resulted in a state transition.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊，就像任何其他区块链一样，可以被视为基于交易的状态机。这在由*Dr. Gavin Wood*撰写的以太坊黄皮书中提到。其思想是通过逐步执行交易，将初始状态转化为最终状态。最终转换随后被接受为状态的绝对不可争议的版本。在下图中，展示了以太坊状态转换函数，其中事务执行导致状态转换。
- en: '![Ethereum blockchain](img/B05975_07_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![以太坊区块链](img/B05975_07_02.jpg)'
- en: Ethereum State transition function
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊状态转换函数
- en: In the preceding example, a transfer of 2 Ether from **Address 4718bf7a** to
    **Address 741f7a2** is initiated. The initial state represents the state before
    the transaction execution and the final state is what the morphed state looks
    like. This will be discussed in more detail later in the chapter, but the aim
    of this example is to introduce the core idea of state transition in Ethereum.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，发起了从**地址 4718bf7a**到**地址 741f7a2**的 2 以太币的转账。初始状态表示交易执行之前的状态，最终状态表示变化后的状态。这将在本章后面更详细地讨论，但本例的目的是介绍以太坊中状态转换的核心思想。
- en: Currency (ETH and ETC)
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 货币（ETH 和 ETC）
- en: 'As an incentive to the miners, Ethereum also rewards its native currency called
    Ether, abbreviated as ETH. After the DAO hack (described later), a hard fork was
    proposed in order to mitigate the issue; therefore, there are now two Ethereum
    blockchains: one is called Ethereum classic and its currency is represented by
    ETC, whereas the hard-forked version is ETH, which continues to grow and on which
    active development is being carried out. ETC, however, has its own following with
    a dedicated community that is further developing ETC, which is the nonforked original
    version of Ethereum. This chapter is focused mainly on ETH, which is the currently
    the most active and official Ethereum blockchain.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对矿工的激励，以太坊还奖励其本地货币称为以太币，缩写为 ETH。在 DAO 黑客事件之后，提出了一个硬分叉以减轻问题；因此，现在有两个以太坊区块链：一个称为
    Ethereum Classic，其货币用 ETC 表示，而硬分叉版本是 ETH，它仍在增长并且正在进行积极的开发。然而，ETC 有自己的追随者，拥有一个致力于进一步发展
    ETC 的专门社区，这是以太坊的未分叉原始版本。本章主要关注 ETH，这是目前最活跃和官方的以太坊区块链。
- en: Forks
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分叉
- en: With the latest release of homestead, due to major protocol upgrades, it resulted
    in a hard fork. The protocol was upgraded at block number 1,150,000, resulting
    in the migration from the first version of Ethereum known as Frontier to the second
    version of Ethereum called homestead.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于主要协议升级，homestead 的最新版本导致了硬分叉。协议在区块号 1,150,000 上升级，从以太坊的第一个版本 Frontier 迁移到了被称为
    homestead 的第二个版本的以太坊。
- en: A recent unintentional fork that occurred on November 24, 2016, at 14:12:07
    UTC was due to a bug in the geth client's journaling mechanism. Network fork occurred
    at block number 2,686,351\. This bug resulted in geth failing to revert empty
    account deletions in the case of the empty out-of-gas exception. This was not
    an issue in parity (another popular Ethereum client). This means that from block
    number 2686351, the Ethereum blockchain is split into two, one running with parity
    clients and the other with geth. This issue was resolved with the release of geth
    version 1.5.3.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最近发生的一个意外分叉发生在 2016 年 11 月 24 日，UTC 时间 14:12:07，这是由于 geth 客户端的日志机制中的一个错误导致的。网络分叉发生在区块号
    2,686,351。这个错误导致 geth 在空账户删除的情况下无法回滚空的 gas 异常。这在 parity（另一个流行的以太坊客户端）中不是问题。这意味着从区块号
    2686351 开始，以太坊区块链分成两个部分，一个使用 parity 客户端，另一个使用 geth。这个问题在 geth 版本 1.5.3 发布后得到解决。
- en: Gas
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gas
- en: Another key concept in Ethereum is that of gas. All transactions on the Ethereum
    blockchain are required to cover the cost of computation they are performing.
    The cost is covered by something called *gas* or *crypto fuel*, which is a new
    concept introduced by Ethereum. This gas as *execution fee* is paid upfront by
    the transaction originators. The *fuel* is consumed with each operation. Each
    operation has a predefined amount of gas associated with it. Each transaction
    specifies the amount of gas it is willing to consume for its execution. If it
    runs *out of gas* before the execution is completed, any operation performed by
    the transaction up to that point is rolled back. If the transaction is successfully
    executed, then any remaining gas is refunded to the transaction originator.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中的另一个关键概念是 gas。以太坊区块链上的所有交易都需要支付它们执行的计算成本。这个成本由称为 gas 或加密燃料的东西来支付，这是以太坊引入的一个新概念。这个
    gas 作为执行费用是由交易发起者提前支付的。每个操作都会消耗燃料。每个操作都有一个预定义的与之关联的 gas 量。每个交易都指定了它愿意为其执行消耗的 gas
    量。如果在执行完成之前 gas 用尽，则任何由交易执行的操作都会被回滚。如果交易成功执行，则剩余的 gas 将退还给交易发起者。
- en: This concept should not be confused with mining fee, which is a different concept
    that is used to pay *gas* as a fee to the miners. More information on the concept
    and calculations related to gas and operations will be provided later in the chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本概念不应与挖矿费混淆，挖矿费是一种用于向矿工支付*燃气*作为费用的不同概念。有关燃气和操作相关概念和计算的更多信息将在本章后面提供。
- en: The consensus mechanism
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 共识机制
- en: The consensus mechanism in Ethereum is based on the GHOST protocol originally
    proposed by *Zohar* and *Sompolinsky* in December 2013\. Those of you interested
    in it can explore the detailed original paper at [http://eprint.iacr.org/2013/881.pdf](http://eprint.iacr.org/2013/881.pdf).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中的共识机制基于GHOST协议，最初由*Zohar*和*Sompolinsky*于2013年12月提出。有兴趣的人可以在[http://eprint.iacr.org/2013/881.pdf](http://eprint.iacr.org/2013/881.pdf)上探索详细的原始论文。
- en: Ethereum uses a simpler version of this protocol, where the chain that has most
    computational effort spent on it in order to build it is identified as the definite
    version. Another way of looking at it is to find the longest chain, as the longest
    chain must have been built by consuming adequate mining effort. **Greedy Heaviest
    Observed Subtree** (**GHOST**) was first introduced as a mechanism to alleviate
    the issues arising out of fast block generation times that led to stale or orphan
    blocks. In GHOST, stale blocks are added in calculations to figure out the longest
    and heaviest chain of blocks. Stale blocks are called Uncles or Ommers in Ethereum.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊使用了协议的简化版本，其中花费最多计算工作量来构建链的链被识别为确定版本。另一种看待它的方式是寻找最长的链，因为最长的链必须是通过消耗足够的挖矿工作量建立的。
    **贪婪最重子树**（**GHOST**）最初被引入作为一种缓解由快速区块生成时间导致的陈旧或孤立区块问题的机制。在GHOST中，陈旧的区块被加入计算中以找出最长和最重的链。在以太坊中，陈旧的区块被称为Uncles或Ommers。
- en: 'The following diagram shows a quick comparison between the longest and heaviest
    chain:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了最长和最重链之间的快速比较：
- en: '![The consensus mechanism](img/image_07_003.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![共识机制](img/image_07_003.jpg)'
- en: Longest versus heaviest chain
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最长与最重链
- en: The world state
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 世界状态
- en: The world state in Ethereum represents the global state of the Ethereum blockchain.
    It is basically a mapping between Ethereum addresses and account states. The addresses
    are 20 bytes long. This mapping is a data structure that is serialized using **Recursive
    Length Prefix** (**RLP**). RLP is a specially developed encoding scheme that is
    used in Ethereum to serialize binary data for storage or transmission over the
    network and also to save the state in a Patricia tree. The RLP function takes
    an item as an input, which can be a string or a list of items, and produces raw
    bytes that are suitable for storage and transmission over the network. RLP does
    not encode data; instead, its main purpose is to encode structures.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中的世界状态代表了以太坊区块链的全局状态。它基本上是以太坊地址和账户状态之间的映射关系。这些地址是20个字节长。这种映射关系是一个使用**递归长度前缀**（**RLP**）序列化的数据结构。RLP是一种特别开发的编码方案，用于在以太坊中对二进制数据进行存储或通过网络进行传输，也用于在Patricia树中保存状态。RLP函数将一个项目作为输入，该项目可以是一个字符串或一组项目，并生成适合存储和通过网络传输的原始字节。RLP不对数据进行编码；它的主要目的是对结构进行编码。
- en: The account state
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 账户状态
- en: 'The account state consists of four fields: nonce, balance, storageroot and
    codehash and is described in detail here.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 账户状态由四个字段组成：nonce、balance、storageroot和codehash，并在此详细描述。
- en: Nonce
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 随机数
- en: This is a value that is incremented every time a transaction is sent from the
    address. In case of contract accounts, it represents the number of contracts created
    by the account. Contract accounts are one of the two types of accounts that exist
    in Ethereum; they will be explained later on in the chapter in more detail.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个每次从地址发送交易时就会递增的值。在合同账户情况下，它表示由该账户创建的合同数量。合同账户是以太坊中存在的两种账户类型之一；它们稍后会在本章中更详细地解释。
- en: Balance
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 余额
- en: This value represents the number of Weis which is the smallest unit of the currency
    (Ether) in Ethereum held by the address.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个值表示以太坊中地址持有的货币（以太币）的最小单位——Wei的数量。
- en: Storageroot
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 存储根
- en: This field represents the root node of a Merkle Patricia tree that encodes the
    storage contents of the account.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此字段代表默克尔帕特里夏树的根节点，该树编码了账户的存储内容。
- en: Codehash
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 代码哈希
- en: This is an immutable field that contains the hash of the smart contract code
    that is associated with the account. In the case of normal accounts, this field
    contains the Keccak 256-bit hash of an empty string. This code is invoked via
    a message call.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个不可变字段，包含与账户关联的智能合约代码的哈希。在普通账户的情况下，此字段包含空字符串的 Keccak 256 位哈希。此代码通过消息调用调用。
- en: The world state and its relationship with accounts trie, accounts, and block
    header can be visualized in the following diagram. It shows the account data structure
    in the middle of the diagram, which contains a storage root hash derived from
    the root node of the account storage trie shown on the left. The account data
    structure is then used in the world state trie, which is a mapping between addresses
    and account states. Finally, the root node of the world state trie is hashed using
    the Keccak 256-bit algorithm and made part of the block header data structure,
    which is shown on the right-hand side of the diagram as state root hash.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 世界状态及其与账户 trie、账户和区块头的关系可以在下图中可视化。它显示了图表中间的账户数据结构，其中包含从左侧显示的账户存储 trie 的根节点导出的存储根哈希。然后，在世界状态
    trie 中使用账户数据结构，它是地址与账户状态之间的映射。最后，使用 Keccak 256 位算法哈希世界状态 trie 的根节点，并将其作为状态根哈希的一部分添加到右侧显示的区块头数据结构中。
- en: '![Codehash](img/B05975_07_03.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Codehash](img/B05975_07_03.jpg)'
- en: Accounts trie (storage contents of account), account tuple, world state trie,
    and state root hash and their relationship
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 账户 trie（账户存储内容）、账户元组、世界状态 trie 和状态根哈希及它们之间的关系
- en: Accounts trie is basically a Merkle Patricia tree used to encode the storage
    contents of an account. The contents are stored as a mapping between keccak 256-bit
    hashes of 256-bit integer keys to the RLP-encoded 256-bit integer values.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 账户 trie 基本上是用于编码账户存储内容的 Merkle Patricia 树。内容存储为从 256 位整数键的 Keccak 256 位哈希到 RLP
    编码的 256 位整数值的映射。
- en: Transactions
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交易
- en: 'A transaction in Ethereum is a digitally signed data packet using a private
    key that contains the instructions that, when completed, either result in a message
    call or contract creation. Transactions can be divided into two types based on
    the output they produce:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中的交易是使用私钥签名的数字化数据包，其中包含指令，完成后要么产生消息调用，要么创建合约。交易可以根据它们产生的输出分为两种类型：
- en: '**Message call transactions**: This transaction simply produces a message call
    that is used to pass messages from one account to another.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息调用交易**：此交易简单地产生一个消息调用，用于在账户之间传递消息。'
- en: '**Contract creation transactions**: As the name suggests, these transactions
    result in the creation of a new contract. This means that when this transaction
    is executed successfully, it creates an account with the associated code.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合约创建交易**：顾名思义，这些交易会导致创建新合约。这意味着当此交易成功执行时，它会创建一个带有关联代码的账户。'
- en: Both of these transactions are composed of a number of common fields, which
    are described here.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种交易都由一些常见字段组成，这些字段在这里描述。
- en: Nonce
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Nonce
- en: Nonce is a number that is incremented by one every time a transaction is sent
    by the sender. It must be equal to the number of transactions sent and is used
    as a unique identifier for the transaction. A nonce value can only be used once.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Nonce 是一个数字，每次发送交易时都会增加一次。它必须等于发送的交易数，用作交易的唯一标识符。一个 Nonce 值只能使用一次。
- en: gasPrice
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: gasPrice
- en: The `gasPrice` field represents the amount of Wei required in order to execute
    the transaction.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`gasPrice` 字段表示执行交易所需的 Wei 量。'
- en: gasLimit
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: gasLimit
- en: The `gasLimit` field contains the value that represents the maximum amount of
    gas that can be consumed in order to execute the transaction. The concept of gas
    and gas limit will be covered later in the chapter in more detail. For now, it
    is sufficient to say that this is the amount of fee in Ether that a user (for
    example, the sender of the transaction) is willing to pay for computation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`gasLimit` 字段包含一个值，表示执行交易所需的最大 gas 量。有关 gas 和 gas 限制的概念将在本章后面更详细地讨论。目前，可以说这是用户（例如，交易发送者）愿意支付用于计算的以太的费用量。'
- en: To
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 至
- en: As the name suggests, the `to` field is a value that represents the address
    of the recipient of the transaction.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名，`to` 字段是表示交易接收者地址的值。
- en: Value
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 值
- en: '`Value` represents the total number of Wei to be transferred to the recipient;
    in the case of a contract account, this represents the balance that the contract
    will hold.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`Value` 表示要转移到接收者的 Wei 总数；在合约账户的情况下，这代表合约将持有的余额。'
- en: Signature
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 签名
- en: Signature is composed of three fields, namely *v*, *r*, and *s*. These values
    represent the digital signature (*R*, *S*) and some information that can be used
    to recover the public key (*V*). Also of the transaction from which the sender
    of the transaction can also be determined. The signature is based on ECDSA scheme
    and makes use of the SECP256k1 curve. The theory of elliptic curve cryptography
    was discussed in [Chapter 3](ch03.html "Chapter 3. Cryptography and Technical
    Foundations"), *Cryptography and technical foundations*. In this section, ECDSA
    will be presented in the context of its usage in Ethereum.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 签名由三个字段组成，即 *v*、*r* 和 *s*。这些值代表数字签名（*R*，*S*）和一些信息，可用于恢复公钥（*V*）。还有发送方的交易，也可以确定发送方的交易。签名基于
    ECDSA 方案，并利用了 SECP256k1 曲线。椭圆曲线密码学理论在 [第 3 章](ch03.html "Chapter 3. Cryptography
    and Technical Foundations") 中讨论，*Cryptography and technical foundations*。在本节中，ECDSA
    将在以太坊中的使用环境中进行介绍。
- en: '*V* is a single byte value that depicts the size and sign of the elliptic curve
    point and can be either 27 or 28\. *V* is used in the ECDSA recovery contract
    as a recovery ID. This value is used to recover (derive) the public key from the
    private key. In secp256k1, the recovery ID is expected to be either 0 or 1\. In
    Ethereum, this is offset by 27\. More details on the ECDSARECOVER function will
    be provided later in this chapter.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*V* 是一个单字节值，表示椭圆曲线点的大小和符号，可以是 27 或 28。*V* 在 ECDSA 恢复合约中用作恢复 ID。该值用于从私钥派生公钥。在
    secp256k1 中，恢复 ID 预期为 0 或 1。在以太坊中，这个偏移量为 27。有关 ECDSARECOVER 函数的更多详细信息将在本章后面提供。'
- en: '*R* is derived from a calculated point on the curve. First, a random number
    is picked up, which is multiplied with the generator of the curve to calculate
    a point on the curve. The *x* coordinate part of this point is *R*. *R* is encoded
    as a 32 byte sequence. *R* must be greater than 0 and less than the secp256k1n
    limit (115792089237316195423570985008687907852837564279074904382605163141518161494337).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*R* 是从曲线上的一个计算点派生出来的。首先，选择一个随机数，将其与曲线的生成器相乘以计算曲线上的一个点。该点的 *x* 坐标部分为 *R*。*R*
    被编码为一个 32 字节序列。*R* 必须大于 0 并且小于 secp256k1n 限制（115792089237316195423570985008687907852837564279074904382605163141518161494337）。'
- en: '*S* is calculated by multiplying *R* with the private key and adding it into
    the hash of the message to be signed and by finally dividing it with the random
    number chosen to calculate *R*. *S* is also a 32 byte sequence. *R* and *S* together
    represent the signature.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*S* 是通过将 *R* 与私钥相乘并将其添加到待签名消息的哈希中来计算的，最后通过所选的随机数除以它。*S* 也是一个 32 字节序列。*R* 和
    *S* 一起表示签名。'
- en: 'In order to sign a transaction, the `ECDSASIGN` function is used, which takes
    the message to be signed and the private key as an input and produces *V*, a single
    byte value; *R*, a 32 byte value, and *S*, another 32 byte value. The equation
    is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对交易进行签名，使用 `ECDSASIGN` 函数，该函数将待签名的消息和私钥作为输入，并产生 *V*，一个单字节值；*R*，一个 32 字节值，和
    *S*，另一个 32 字节值。方程如下：
- en: '*ECDSASIGN (Message, Private Key) = (V, R, S)*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*ECDSASIGN (Message, Private Key) = (V, R, S)*'
- en: Init
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化
- en: The `Init` field is used only in transactions that are intended to create contracts.
    This represents a byte array of unlimited length that specifies the EVM code to
    be used in the account initialization process. The code contained in this field
    is executed only once, when the account is created for the first time, and gets
    destroyed immediately after that.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`Init` 字段仅用于旨在创建合约的交易中。这表示一个无限长度的字节数组，指定要在账户初始化过程中使用的 EVM 代码。该字段中包含的代码仅在创建账户时执行一次，并在此后立即销毁。'
- en: '`Init` also returns another code section called *body*, which persists and
    runs in response to message calls that the contract account may receive. These
    message calls may be sent via a transaction or an internal code execution.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`Init` 也返回另一个称为 *body* 的代码部分，该部分持久存在并在合约账户可能接收到的消息调用响应中运行。这些消息调用可能通过交易或内部代码执行发送。'
- en: Data
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据
- en: If the transaction is a message call, then the `data` field is used instead
    of `init`, which represents the input data of the message call. It is also unlimited
    in size and is organized as a byte array.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果交易是一个消息调用，那么使用 `init` 字段而不是 `init`，它代表消息调用的输入数据。它的大小也是不受限制的，组织为一个字节数组。
- en: This can be visualized in the following diagram, where a transaction is a tuple
    of the fields mentioned earlier, which is then included in a transaction trie
    (a modified Merkle-Patricia tree) composed of the transactions to be included.
    Finally, the root node of transaction trie is hashed using a Keccak 256-bit algorithm
    and is included in the block header along with a list of transactions in the block.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在下图中可视化，其中一个交易是上面提到的字段的元组，然后包含在一个交易 trie（修改过的默克尔-帕特里夏树）中，由要包含的交易组成。最后，交易
    trie 的根节点使用 Keccak 256 位算法进行哈希，并包含在区块头中，同时还包括区块中的交易列表。
- en: Transactions can be found in either transaction pools or blocks. When a mining
    node starts its operation of verifying blocks, it starts with the highest paying
    transactions in the transaction pool and executes them one by one. When the gas
    limit is reached or no more transactions are left to be processed in the transaction
    pool, the mining starts. In this process, the block is repeatedly hashed until
    a valid nonce is found that, once hashed with the block, results in a value less
    than the difficulty target. Once the block is successfully mined, it will be broadcasted
    immediately to the network, claiming success, and will be verified and accepted
    by the network. This process is similar to Bitcoin's mining process discussed
    in the previous chapter. The only difference is that Ethereum's Proof of Work
    algorithm is ASIC-resistant, known as *Ethash*, where finding a nonce requires
    large memory.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 交易可以在交易池或区块中找到。当一个挖矿节点开始验证区块的操作时，它会从交易池中选择报酬最高的交易开始执行，逐一执行这些交易。当燃气限制达到或者交易池中没有更多交易需要处理时，挖矿就开始了。在这个过程中，区块将被反复哈希，直到找到一个有效的只需和区块一起哈希就能得到一个比难度目标小的值的
    nonce。一旦区块成功挖矿，它将立即广播到网络上，宣告成功，并且将被网络验证和接受。这个过程类似于前一章讨论的比特币挖矿过程。唯一的区别是以太坊的工作证明算法是
    ASIC 抗性的，称为 *Ethash*，在这个算法中寻找 nonce 需要大量的内存。
- en: '![Data](img/B05975_07_04-1.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![数据](img/B05975_07_04-1.jpg)'
- en: Relationship between transaction, transaction trie and block header
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 交易、交易 trie 和区块头之间的关系
- en: Contract creation transaction
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合约创建交易
- en: 'There are a few essential parameters that are required when creating an account.
    These parameters are listed as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 创建账户时需要一些重要的参数。这些参数列举如下：
- en: Sender
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送者
- en: Original transactor
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始转账者
- en: Available gas
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用燃气
- en: Gas price
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 燃气价格
- en: Endowment, which is the amount of ether allocated initially
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资金，即最初分配的以太量
- en: A byte array of arbitrary length
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个任意长度的字节数组
- en: Initialization EVM code
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化 EVM 代码
- en: Current depth of the message call/contract-creation stack (current depth means
    the number of items that are already there in the stack)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息调用/合约创建堆栈的当前深度（当前深度意味着堆栈中已经存在的项的数量）
- en: Addresses generated as a result of contract creation transaction are 160-bit
    in length. Precisely, as defined in the yellow paper, they are the rightmost 160-bits
    of the Keccak hash of the RLP encoding of the structure containing only the sender
    and the nonce. Initially, the nonce in the account is set to zero. The balance
    of the account is set to the value passed to the contract. Storage is also set
    to empty. Code hash is Keccak 256-bit hash of the empty string.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由合约创建交易生成的地址长度为 160 位。准确地说，根据黄皮书的定义，它们是仅包含发送者和 nonce 的结构的 RLP 编码的 Keccak 哈希的右
    160 位。初始时，账户中的 nonce 设置为零。账户的余额设置为传递给合约的值。存储也设置为空。代码哈希是空字符串的 Keccak 256 位哈希。
- en: The account is initialized when the EVM code (Initialization EVM code) is executed.
    In the case of any exception during code execution, such as not having enough
    gas, the state does not change. If the execution is successful, then the account
    is created after the payment of appropriate gas costs. The current version of
    Ethereum (homestead) specifies that the result of contract transaction is either
    a new contract with its balance, or no new contract is created with no transfer
    of value. This is in contrast to previous versions, where the contract could be
    created regardless of the contract code deployment being successful or not due
    to an out-of-gas exception.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当EVM代码（初始化EVM代码）执行时，帐户被初始化。在代码执行过程中出现任何异常情况，比如没有足够的gas，状态不会发生改变。如果执行成功，那么在支付适当的gas成本后，帐户将被创建。以太坊的当前版本（家宅）规定，合约交易的结果要么是带有余额的新合约，要么是没有价值转移的不创建新合约。这与之前的版本不同，之前的合约无论合约代码部署是否成功，都可以创建合约，因为存在gas用尽异常。
- en: Message call transaction
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息调用事务
- en: 'A message call requires several parameters for execution, which are listed
    as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 消息调用需要执行多个参数，列举如下：
- en: Sender
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送方
- en: The transaction originator
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务发起者
- en: Recipient
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收件人
- en: The account whose code is to be executed
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要执行其代码的帐户
- en: Available gas
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用的gas
- en: Value
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值
- en: Gas price
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: gas 价格
- en: Arbitrary length byte array
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任意长度的字节数组
- en: Input data of the call
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用的输入数据
- en: Current depth of the message call/contract creation stack
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息调用/合约创建栈的当前深度
- en: Message calls result in state transition. Message calls also produce output
    data, which is not used if transactions are executed. In cases where message calls
    are triggered by VM code, the output produced by the transaction execution is
    used.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 消息调用会导致状态转换。消息调用也会产生输出数据，如果事务被执行则不会使用该数据。在 VM 代码触发消息调用的情况下，将使用事务执行产生的输出。
- en: 'In the following diagram, the segregation between two types of transaction
    is shown:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，显示了两种类型事务之间的隔禅：
- en: '![Message call transaction](img/B05975_07_05.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![消息调用事务](img/B05975_07_05.jpg)'
- en: Types of transactions, required parameters for execution
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 事务类型，执行所需的参数
- en: Elements of the Ethereum blockchain
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊区块链的元素
- en: In the following section, you will be introduced to various components of the
    Ethereum network and the blockchain. First, the basic concept of the EVM is given
    in the next section.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将了解以太坊网络和区块链的各个组成部分。首先，下一节将介绍 EVM 的基本概念。
- en: Ethereum virtual machine (EVM)
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以太坊虚拟机（EVM）
- en: EVM is a simple stack-based execution machine that runs bytecode instructions
    in order to transform the system state from one state to another. The word size
    of the virtual machine is set to 256-bit. The stack size is limited to 1024 elements
    and is based on the **LIFO** (**Last in First Out**) queue. EVM is a Turing-complete
    machine but is limited by the amount of gas that is required to run any instruction.
    This means that infinite loops that can result in denial of service attacks are
    not possible due to gas requirements. EVM also supports exception handling in
    case exceptions occur, such as not having enough gas or invalid instructions,
    in which case the machine would immediately halt and return the error to the executing
    agent.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: EVM 是一个简单的基于堆栈的执行机器，可以运行字节码指令，以便将系统状态从一种状态转换为另一种状态。虚拟机的字大小设置为 256 位。堆栈大小限制为
    1024 个元素，并基于**LIFO**（后进先出）队列。EVM 是图灵完备的机器，但由于运行任何指令所需的 gas 量有限制，所以无法出现可能导致拒绝服务攻击的无限循环。EVM
    还支持异常处理，以处理诸如没有足够的 gas 或无效指令等异常情况，这种情况下，机器会立即停止并将错误返回给执行代理。
- en: EVM is a fully isolated and sandboxed runtime environment. The code that runs
    on the EVM does not have access to any external resources, such as a network or
    filesystem.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: EVM 是一个完全隔离和沙箱化的运行时环境。在 EVM 上运行的代码无法访问任何外部资源，比如网络或文件系统。
- en: As discussed earlier, EVM is a stack-based architecture. EVM is big-endian by
    design and it uses 256-bit wide words. This word size allows for Keccak 256-bit
    hash and elliptic curve cryptography computations.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前讨论的，EVM 是一种基于堆栈的架构。EVM 采用大端设计，并使用 256 位宽字。这个字大小允许 Keccak 256 位哈希和椭圆曲线密码算法的计算。
- en: There are two types of storage available to contracts and EVM. The first one
    is called memory, which is a byte array. When a contract finishes the code execution,
    the memory is cleared. It is akin to the concept of RAM. The other type, called
    storage, is permanently stored on the blockchain. It is a key value store.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 合约和 EVM 可用的存储有两种类型。第一种称为内存，它是一个字节数组。当合约完成代码执行时，内存会被清除。它类似于 RAM 的概念。另一种类型称为存储，永久存储在区块链上。它是一个键值存储。
- en: Memory is unlimited but constrained by gas fee requirements. The storage associated
    with the virtual machine is a word addressable *word array* that is nonvolatile
    and is maintained as part of the system state. Keys and value are 32 bytes in
    size and storage. The program code is stored in a **virtual read-only memory**
    (**virtual ROM**) that is accessible using the CODECOPY instruction. The CODECOPY
    instruction is used to copy the program code into the main memory. Initially,
    all storage and memory is set to zero in the EVM.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 内存是无限的，但受到燃料费用要求的约束。虚拟机相关的存储是一个可以寻址的字数组，是非易失性的，并且作为系统状态的一部分而维护。键和值的大小为 32 字节。程序代码存储在一个**虚拟只读存储器**（**虚拟
    ROM**）中，可以使用 CODECOPY 指令进行访问。CODECOPY 指令用于将程序代码复制到主内存中。初始时，EVM 中的所有存储和内存都设置为零。
- en: The following diagram shows the design of the EVM where the virtual ROM stores
    the program code that is copied into main memory using **CODECOPY**. The main
    memory is then read by the EVM by referring to the program counter and executes
    instructions step by step. The program counter and EVM stack are updated accordingly
    with each instruction execution.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了 EVM 的设计，其中虚拟 ROM 存储程序代码，该代码使用 CODECOPY 复制到主内存中。然后 EVM 通过引用程序计数器读取主内存，并逐步执行指令。每执行一条指令，程序计数器和
    EVM 栈都会相应更新。
- en: '![Ethereum virtual machine (EVM)](img/B05975_07_06.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![以太坊虚拟机（EVM）](img/B05975_07_06.jpg)'
- en: EVM operation
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: EVM 操作
- en: EVM optimization is an active area of research and recent research has suggested
    that EVM can be optimized and tuned to a very fine degree in order to achieve
    high performance. Research into the possibility of using **Web assembly** (**WASM**)
    is underway already. WASM is developed by Google, Mozilla, and Microsoft and is
    now being designed as an open standard by the W3C community group. The aim of
    WASM is to be able to run machine code in the browser that will result in execution
    at native speed. Similarly, the aim of EVM 2.0 is to be able to run the EVM instruction
    set (Opcodes) natively in CPUs, thus making it faster and efficient.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: EVM 优化是一个活跃的研究领域，最近的研究表明，EVM 可以被优化和微调到非常细微的程度，以实现高性能。已经在研究使用**Web 汇编**（**WASM**）的可能性。WASM
    由 Google、Mozilla 和 Microsoft 开发，现在正在由 W3C 社区组设计为一个开放标准。WASM 的目标是能够在浏览器中运行机器码，以实现原生速度的执行。同样，EVM
    2.0 的目标是能够在 CPU 上原生运行 EVM 指令集（操作码），从而使其更快速和高效。
- en: Execution environment
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行环境
- en: 'There are some key elements that are required by the execution environment
    in order to execute the code. The key parameters are provided by the execution
    agent, for example, a transaction. These are listed as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行代码，执行环境需要一些关键元素。关键参数由执行代理（例如交易）提供。这些如下所列：
- en: The address of the account that owns the executing code.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拥有执行代码的账户的地址。
- en: The address of the sender of the transaction and the originating address of
    this execution.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交易的发送者地址和执行的原始地址。
- en: The gas price in the transaction that initiated the execution.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发起执行的交易中的燃料价格。
- en: Input data or transaction data depending on the type of executing agent. This
    is a byte array; in the case of a message call, if the execution agent is a transaction,
    then the transaction data is included as input data.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入数据或取决于执行代理类型的交易数据。这是一个字节数组；在消息调用的情况下，如果执行代理是一个交易，则将交易数据包含为输入数据。
- en: The address of the account that initiated the code execution or transaction
    sender. This is the address of the sender in case the code execution is initiated
    by a transaction; otherwise, it's the address of the account.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发起代码执行或交易发送者的账户地址。这是在代码执行由交易发起的情况下的发送者地址；否则，它是账户的地址。
- en: The value or transaction value. This is the amount in Wei. If the execution
    agent is a transaction, then it is the transaction value.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 值或交易价值。这是以 Wei 为单位的金额。如果执行代理是一个交易，那么它就是交易的价值。
- en: The code to be executed presented as a byte array that the iterator function
    picks up in each execution cycle.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个执行周期中迭代器函数选取的以字节数组形式呈现的待执行代码。
- en: The block header of the current block
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前块的块头
- en: The number of message calls or contract creation transactions currently in execution.
    In other words, this is the number of CALLs or CREATEs currently in execution.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前正在执行的消息调用或合约创建事务的数量。换句话说，这是当前正在执行的 CALLs 或 CREATEs 的数量。
- en: 'The execution environment can be visualized as a tuple of nine elements, as
    follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 执行环境可以被视为包含九个元素的元组，如下所示：
- en: '![Execution environment](img/B05975_07_07.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![执行环境](img/B05975_07_07.jpg)'
- en: Execution environment Tuple
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 执行环境元组
- en: In addition to the previously mentioned nine fields, system state and the remaining
    gas are also provided to the execution environment. The execution results in producing
    the resulting state, gas remaining after the execution, self-destruct or suicide
    set (described later), log series (described later), and any gas refunds.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前提到的九个字段之外，系统状态和剩余燃气也提供给了执行环境。执行的结果产生了结果状态，执行后剩余的燃气，自毁或自杀设置（稍后描述），日志系列（稍后描述）以及任何燃气退款。
- en: Machine state
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 机器状态
- en: 'Machine state is also maintained internally by the EVM. Machine state is updated
    after each execution cycle of EVM. An iterator function (detailed in the next
    section) runs in the virtual machine, which outputs the results of a single cycle
    of the state machine. Machine state is a tuple that consist of the following elements:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 机器状态也由 EVM 在内部维护。机器状态在每次 EVM 执行周期后更新。虚拟机中运行的迭代器函数（在下一节中详细介绍）输出状态机的单个周期的结果。机器状态是一个包含以下元素的元组：
- en: Available gas
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用的燃气
- en: The program counter, which is a positive integer up to 256
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序计数器，一个最多达到 256 的正整数
- en: Memory contents
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存内容
- en: Active number of words in memory
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存中活动的字数
- en: Contents of the stack
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆栈的内容
- en: 'The EVM is designed to handle exceptions and will halt (stop execution) in
    case any of the following exceptions occur:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: EVM 设计用于处理异常，并且在发生以下任何异常情况时将停止执行：
- en: Not having enough gas required for execution
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有足够的燃气用于执行
- en: Invalid instructions
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无效的指令
- en: Insufficient stack items
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆栈项不足
- en: Invalid destination of jump op codes
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳转操作码的无效目标
- en: Invalid stack size (greater than 1024)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无效的堆栈大小（大于1024）
- en: The iterator function
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 迭代器函数
- en: 'The iterator function mentioned earlier performs various important functions
    that are used to set the next state of the machine and eventually the world state.
    These functions include the following:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 早期提到的迭代器函数执行各种重要函数，用于设置机器的下一个状态和最终世界状态。这些功能包括以下内容：
- en: It fetches the next instruction from a byte array where the machine code is
    stored in the execution environment.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它从存储在执行环境中的机器码的字节数组中提取下一条指令。
- en: It adds/removes (PUSH/POP) items from the stack accordingly.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它相应地向堆栈添加/移除（PUSH/POP）项目。
- en: Gas is reduced according to the gas cost of the instructions/Opcodes.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 燃气根据指令/操作码的燃气成本进行减少。
- en: It increments the **program counter** (**PC**).
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它递增**程序计数器**（**PC**）。
- en: 'Machine state can be viewed as a tuple shown in the following diagram:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 机器状态可以看作是下图所示的元组：
- en: '![The iterator function](img/B05975_07_08.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![迭代器函数](img/B05975_07_08.jpg)'
- en: Machine state tuple
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 机器状态元组
- en: The virtual machine is also able to halt in normal conditions if STOP or SUICIDE
    or RETURN Opcodes are encountered during the execution cycle.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在执行周期中遇到 STOP 或 SUICIDE 或 RETURN 操作码，虚拟机也能够在正常情况下停止执行。
- en: Code written in a high-level language such as serpent, LLL, or Solidity is converted
    into the byte code that EVM understands in order for it to be executed by the
    EVM. Solidity is the high-level language that has been developed for Ethereum
    with JavaScript such as syntax to write code for smart contracts. Once the code
    is written, it is compiled into byte code that's understandable by the EVM using
    the Solidity compiler called solc.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 serpent、LLL 或 Solidity 等高级语言编写的代码被转换为 EVM 可理解的字节码，以便通过 EVM 执行。Solidity 是为以太坊开发的高级语言，具有类似
    JavaScript 的语法，用于编写智能合约代码。一旦代码编写完成，它就会被编译成可被 EVM 理解的字节码，使用名为 solc 的 Solidity 编译器。
- en: '**LLL** (**Lisp-like Low-level language**) is another language that is used
    to write smart contract code. Serpent is a Python-like high-level language that
    can be used to write smart contracts for Ethereum.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**LLL**（类似 Lisp 的低级语言）是另一种用于编写智能合约代码的语言。Serpent 是一种类似 Python 的高级语言，可用于为以太坊编写智能合约。'
- en: 'For example, a simple program in solidity is shown as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个简单的 Solidity 程序如下所示：
- en: '[PRE0]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This program is converted into bytecode, as shown here. Details on how to compile
    solidity code with examples will be given in the next chapter.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序转换为字节码，如下所示。如何编译 Solidity 代码并附有示例将在下一章中给出。
- en: Runtime byte code
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行时字节码
- en: '[PRE1]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Opcodes and their meaning
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作码及其含义
- en: There are different opcodes that have been introduced in the EVM. Opcodes are
    divided into multiple categories based on the operation they perform. The list
    of opcodes with their meaning and usage is presented here.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在 EVM 中引入了不同的操作码。操作码根据其执行的操作进行多个类别的划分。这里呈现了操作码及其含义和用法的列表。
- en: Arithmetic operations
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 算术操作
- en: All arithmetic in EVM is modulo 2^256\. This group of opcodes is used to perform
    basic arithmetic operations. The value of these operations starts from 0x00 up
    to 0x0b.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在 EVM 中，所有算术运算都是模 2^256 运算。这组操作码用于执行基本算术运算。这些操作的值从 0x00 开始，最高为 0x0b。
- en: '| **Mnemonic** | **Value** | **POP** | **PUSH** | **Gas** | **Description**
    |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| **助记符** | **值** | **弹出** | **推入** | **Gas** | **描述** |'
- en: '| STOP | 0x00 | 0 | 0 | 0 | Halts execution |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| STOP | 0x00 | 0 | 0 | 0 | 终止执行 |'
- en: '| ADD | 0x01 | 2 | 1 | 3 | Adds two values |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| ADD | 0x01 | 2 | 1 | 3 | 两个值相加 |'
- en: '| MUL | 0x02 | 2 | 1 | 5 | Multiplies two values |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| MUL | 0x02 | 2 | 1 | 5 | 两个值相乘 |'
- en: '| SUB | 0x03 | 2 | 1 | 3 | Subtraction operation |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| SUB | 0x03 | 2 | 1 | 3 | 减法操作 |'
- en: '| DIV | 0x04 | 2 | 1 | 5 | Integer division operation |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| DIV | 0x04 | 2 | 1 | 5 | 整数除法操作 |'
- en: '| SDIV | 0x05 | 2 | 1 | 5 | Signed integer division operation |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| SDIV | 0x05 | 2 | 1 | 5 | 有符号整数除法操作 |'
- en: '| MOD | 0x06 | 2 | 1 | 5 | Modulo remainder operation |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| MOD | 0x06 | 2 | 1 | 5 | 模余操作 |'
- en: '| SMOD | 0x07 | 2 | 1 | 5 | Signed modulo remainder operation |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| SMOD | 0x07 | 2 | 1 | 5 | 有符号模余操作 |'
- en: '| ADDMOD | 0x08 | 3 | 1 | 8 | Modulo addition operation |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| ADDMOD | 0x08 | 3 | 1 | 8 | 模加操作 |'
- en: '| MULMOD | 0x09 | 3 | 1 | 8 | Module multiplication operation |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| MULMOD | 0x09 | 3 | 1 | 8 | 模乘操作 |'
- en: '| EXP | 0x0a | 2 | 1 | 10 | Exponential operation (repeated multiplication
    of the base) |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| EXP | 0x0a | 2 | 1 | 10 | 指数操作（底数的重复乘法） |'
- en: '| SIGNEXTEND | 0x0b | 2 | 1 | 5 | Extends the length of 2s complement signed
    integer |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| SIGNEXTEND | 0x0b | 2 | 1 | 5 | 扩展 2 的补码有符号整数长度 |'
- en: Note that STOP is not an arithmetic operation but is categorized in this list
    of arithmetic operations due to the range of values (0s) it falls in.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，STOP 不是算术操作，但由于其值范围为 0，因此被归类为这个算术操作（arithmetic operations）列表中。
- en: Logical operations
  id: totrans-181
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 逻辑操作
- en: Logical operations include operations that are used to perform comparisons and
    Boolean logic operations. The value of these operations is in the range of 0x10
    to 0x1a.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑操作包括用于执行比较和布尔逻辑操作的操作。这些操作的值范围为 0x10 到 0x1a。
- en: '![Logical operations](img/B05975_07_30.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![逻辑操作](img/B05975_07_30.jpg)'
- en: Cryptographic operations
  id: totrans-184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 加密操作
- en: There is only one operation in this category named SHA3\. It is worth noting
    that this is not the standard SHA3 standardized by NIST but the original Keccak
    implementation.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类别中只有一个操作被命名为 SHA3。值得注意的是，这不是 NIST 标准化的标准 SHA3，而是原始的 Keccak 实现。
- en: '![Cryptographic operations](img/B05975_07_31.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![加密操作](img/B05975_07_31.jpg)'
- en: Environmental information
  id: totrans-187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 环境信息
- en: There are a total of 13 instructions in this category. These opcodes are used
    to provide information related to addresses, runtime environments, and data copy
    operations.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类别中总共有 13 条指令。这些操作码用于提供与地址、运行时环境和数据复制操作相关的信息。
- en: '| **Mnemonic** | **Value** | **POP** | **PUSH** | **Gas** | **Description**
    |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| **助记符** | **值** | **弹出** | **推入** | **Gas** | **描述** |'
- en: '| ADDRESS | 0x30 | 0 | 1 | 2 | Used to get the address of the currently executing
    account |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| ADDRESS | 0x30 | 0 | 1 | 2 | 用于获取当前执行账户的地址 |'
- en: '| BALANCE | 0x31 | 1 | 1 | 20 | Used to get the balance of the given account
    |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| BALANCE | 0x31 | 1 | 1 | 20 | 用于获取给定账户的余额 |'
- en: '| ORIGIN | 0x32 | 0 | 1 | 2 | Used to get the address of the sender of the
    original transaction |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| ORIGIN | 0x32 | 0 | 1 | 2 | 用于获取原始交易发送者的地址 |'
- en: '| CALLER | 0x33 | 0 | 1 | 2 | Used to get the address of the account that initiated
    the execution |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| CALLER | 0x33 | 0 | 1 | 2 | 用于获取发起执行的账户地址 |'
- en: '| CALLVALUE | 0x34 | 0 | 1 | 2 | Retrieves the value deposited by the instruction
    or transaction |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| CALLVALUE | 0x34 | 0 | 1 | 2 | 检索由指令或交易存入的价值 |'
- en: '| CALLDATALOAD | 0x35 | 1 | 1 | 3 | Retrieves the input data that was passed
    a parameter with the message call |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| CALLDATALOAD | 0x35 | 1 | 1 | 3 | 检索通过消息调用传递的参数输入数据 |'
- en: '| CALLDATASIZE | 0x36 | 0 | 1 | 2 | Used to retrieve the size of the input
    data passed with the message call |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| CALLDATASIZE | 0x36 | 0 | 1 | 2 | 用于检索与消息调用传递的输入数据的大小 |'
- en: '| CALLDATACOPY | 0x37 | 3 | 0 | 3 | Used to copy input data passed with the
    message call from the current environment to the memory. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| CALLDATACOPY | 0x37 | 3 | 0 | 3 | 用于将消息调用传递的输入数据从当前环境复制到内存中。 |'
- en: '| CODESIZE | 0x38 | 0 | 1 | 2 | Retrieves the size of running the code in the
    current environment |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| CODESIZE | 0x38 | 0 | 1 | 2 | 检索当前环境中正在运行的代码的大小 |'
- en: '| CODECOPY | 0x39 | 3 | 0 | 3 | Copies the running code from current environment
    to the memory |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| CODECOPY | 0x39 | 3 | 0 | 3 | 将当前环境中的运行代码复制到内存中 |'
- en: '| GASPRICE | 0x3a | 0 | 1 | 2 | Retrieves the gas price specified by the initiating
    transaction. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| GASPRICE | 0x3a | 0 | 1 | 2 | 检索发起交易指定的燃气价格。 |'
- en: '| EXTCODESIZE | 0x3b | 1 | 1 | 20 | Gets the size of the specified account
    code |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| EXTCODESIZE | 0x3b | 1 | 1 | 20 | 获取指定账户代码的大小 |'
- en: '| EXTCODECOPY | 0x3c | 4 | 0 | 20 | Used to copy the account code to the memory.
    |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| EXTCODECOPY | 0x3c | 4 | 0 | 20 | 用于将账户代码复制到内存中。 |'
- en: Block Information
  id: totrans-203
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 区块信息
- en: 'This set of instructions is related to retrieving various attributes associated
    with a block:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这组指令与检索与区块相关的各种属性相关：
- en: '| **Mnemonic** | **Value** | **POP** | **PUSH** | **Gas** | **Description**
    |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| **助记符** | **值** | **POP** | **PUSH** | **燃气** | **描述** |'
- en: '| BLOCKHASH | 0x40 | 1 | 1 | 20 | Gets the hash of one of the 256 most recently
    completed blocks |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| BLOCKHASH | 0x40 | 1 | 1 | 20 | 获取最近完成的 256 个区块中的一个的哈希 |'
- en: '| COINBASE | 0x41 | 0 | 1 | 2 | Retrieves the address of the beneficiary set
    in the block |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| COINBASE | 0x41 | 0 | 1 | 2 | 检索区块中设置的受益人地址 |'
- en: '| TIMESTAMP | 0x42 | 0 | 1 | 2 | Retrieves the time stamp set in the blocks
    |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| TIMESTAMP | 0x42 | 0 | 1 | 2 | 检索区块中设置的时间戳 |'
- en: '| NUMBER | 0x43 | 0 | 1 | 2 | Gets the block''s number |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| NUMBER | 0x43 | 0 | 1 | 2 | 获取区块的编号 |'
- en: '| DIFFICULTY | 0x44 | 0 | 1 | 2 | Retrieves the block difficulty |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| DIFFICULTY | 0x44 | 0 | 1 | 2 | 获取区块的难度 |'
- en: '| GASLIMIT | 0x45 | 0 | 1 | 2 | Gets the gas limit value of the block |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| GASLIMIT | 0x45 | 0 | 1 | 2 | 获取区块的燃气限制值 |'
- en: Stack, memory, storage and flow operations
  id: totrans-212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 栈、内存、存储和流操作
- en: '| **Mnemonic** | **Value** | **POP** | **PUSH** | **Gas** | **Description**
    |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| **助记符** | **值** | **POP** | **PUSH** | **燃气** | **描述** |'
- en: '| POP | 0x50 | 1 | 0 | 2 | Removes items from the stack |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| POP | 0x50 | 1 | 0 | 2 | 从栈中移除项目 |'
- en: '| MLOAD | 0x51 | 1 | 1 | 3 | Used to load a word from the memory. |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| MLOAD | 0x51 | 1 | 1 | 3 | 用于从内存中加载一个字。 |'
- en: '| MSTORE | 0x52 | 2 | 0 | 3 | Used to store a word to the memory. |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| MSTORE | 0x52 | 2 | 0 | 3 | 用于将一个字存储到内存中。 |'
- en: '| MSTORE8 | 0x53 | 2 | 0 | 3 | Used to save a byte to the memory |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| MSTORE8 | 0x53 | 2 | 0 | 3 | 用于将一个字节保存到内存中 |'
- en: '| SLOAD | 0x54 | 1 | 1 | 50 | Used to load a word from the storage |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| SLOAD | 0x54 | 1 | 1 | 50 | 用于从存储中加载一个字。 |'
- en: '| SSTORE | 0x55 | 2 | 0 | 0 | Saves a word to the storage |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| SSTORE | 0x55 | 2 | 0 | 0 | 将一个字保存到存储中 |'
- en: '| JUMP | 0x56 | 1 | 0 | 8 | Alters the program counter |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| JUMP | 0x56 | 1 | 0 | 8 | 改变程序计数器 |'
- en: '| JUMPI | 0x57 | 2 | 0 | 10 | Alters the program counter based on a condition
    |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| JUMPI | 0x57 | 2 | 0 | 10 | 根据条件改变程序计数器 |'
- en: '| PC | 0x58 | 0 | 1 | 2 | Used to retrieve the value in the program counter
    before the increment. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| PC | 0x58 | 0 | 1 | 2 | 用于在增量前检索程序计数器中的值。 |'
- en: '| MSIZE | 0x59 | 0 | 1 | 2 | Retrieves the size of the active memory in bytes.
    |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| MSIZE | 0x59 | 0 | 1 | 2 | 检索活动内存的大小（以字节为单位）。 |'
- en: '| GAS | 0x5a | 0 | 1 | 2 | Retrieves the available gas amount |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| GAS | 0x5a | 0 | 1 | 2 | 检索可用燃气量 |'
- en: '| JUMPDEST | 0x5b | 0 | 0 | 1 | Used to mark a valid destination for jumps
    with no effect on the machine state during the execution. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| JUMPDEST | 0x5b | 0 | 0 | 1 | 用于标记在执行期间对机器状态没有影响的跳转的有效目的地。 |'
- en: Push operations
  id: totrans-226
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Push 操作
- en: These operations include PUSH operations that are used to place items on the
    stack. The range of these instructions is from 0x60 to 0x7f. There are 32 PUSH
    operations available in total in the EVM. PUSH operation, which reads from the
    byte array of the program code.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作包括 PUSH 操作，用于将项目放入栈中。这些指令的范围是从 0x60 到 0x7f。EVM 中总共有 32 个 PUSH 操作。PUSH 操作，它从程序代码的字节数组中读取。
- en: '| **Mnemonic** | **Value** | **POP** | **PUSH** | **Gas** | **Description**
    |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| **助记符** | **值** | **POP** | **PUSH** | **燃气** | **描述** |'
- en: '| PUSH1 . . . PUSH 32 | 0x60 ... 0x7f | 0 | 1 | 3 | Used to place *N* right-aligned
    big-endian byte item(s) on the the stack. *N* is a value that ranges from 1 byte
    to 32 bytes (full word) based on the mnemonic used. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| PUSH1 . . . PUSH 32 | 0x60 ... 0x7f | 0 | 1 | 3 | 用于在堆栈上放置*N*个右对齐的大端字节项。
    *N*是一个值，根据使用的助记符，范围从1字节到32字节（完整字）不等。 |'
- en: Duplication operations
  id: totrans-230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 复制操作
- en: As the name suggests, duplication operations are used to duplicate stack items.
    The range of values is from 0x80 to 0x8f. There are 16 DUP instructions available
    in the EVM. Items placed on the stack or removed from the stack also change incrementally
    with the mnemonic used; for example, DUP1 removes one item from the stack and
    places two items on the stack, whereas DUP16 removes 16 items from the stack and
    places 17 items.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，复制操作用于复制堆栈项。 值的范围从0x80到0x8f。 在EVM中有16个DUP指令可用。 放置在堆栈上或从堆栈上移除的项目随着使用的助记符而改变；
    例如，DUP1从堆栈中删除一个项目并将两个项目放在堆栈上，而DUP16从堆栈中删除16个项目并放置17个项目。
- en: '| **Mnemonic** | **Value** | **POP** | **PUSH** | **Gas** | **Description**
    |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| **助记符** | **数值** | **POP** | **PUSH** | **Gas** | **描述** |'
- en: '| DUP1 . . . DUP16 | 0x80 ... 0x8f | X | Y | 3 | Used to duplicate the nth
    stack item, where *N* is the number corresponding to the DUP instruction used.
    *X* and *Y* are the items removed and placed on the stack, respectively. |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| DUP1 . . . DUP16 | 0x80 ... 0x8f | X | Y | 3 | 用于复制第*n*个堆栈项，其中*n*是对应于所使用的DUP指令的数字。
    *X*和*Y*分别是从堆栈中移除和放置的项目。'
- en: Exchange operations
  id: totrans-234
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 交换操作
- en: SWAP operations provide the ability to exchange stack items. There are 16 SWAP
    instructions available and with each instruction, the stack items are removed
    and placed incrementally up to 17 items depending on the type of Opcode used.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: SWAP操作提供了交换堆栈项的能力。 有16个SWAP指令可用，并且随着每个指令的使用，堆栈项被递增地移除和放置，最多到17个项目，具体取决于使用的操作码类型。
- en: '| **Mnemonic** | **Value** | **POP** | **PUSH** | **Gas** | **Description**
    |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| **助记符** | **数值** | **POP** | **PUSH** | **Gas** | **描述** |'
- en: '| SWAP1 . . . SWAP16 | 0x90 ... 0x9f | X | Y | 3 | Used to swap the nth stack
    item, where *N* is the number corresponding to the SWAP instruction used. *X*
    and *Y* are the items removed and placed on the stack, respectively. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| SWAP1 . . . SWAP16 | 0x90 ... 0x9f | X | Y | 3 | 用于交换第*n*个堆栈项，其中*n*是对应于使用的SWAP指令的数字。
    *X* 和 *Y* 分别是从堆栈中移除和放置的项目。'
- en: Logging operations
  id: totrans-238
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 记录操作
- en: Logging operations provide opcodes to append log entries on the sub-state tuple's
    log series field. There are four log operations available in total and they range
    from value 0x0a to 0xa4.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 记录操作提供了用于在子状态元组的日志序列字段上附加日志条目的操作码。 总共有四个日志操作可用，范围从值0x0a到0xa4。
- en: '| **Mnemonic** | **Value** | **POP** | **PUSH** | **Gas** | **Description**
    |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| **助记符** | **数值** | **POP** | **PUSH** | **Gas** | **描述** |'
- en: '| LOG0 . . . LOG4 | 0x0a ... 0xa4 | X | Y (0) | 375,750,1125,1500,1875 | Used
    to append log record with *N* topics, where *N* is the number corresponding to
    the LOG Opcode used. For example, LOG0 means a log record with no topics, and
    LOG4 means a log record with four topics. *X* and *Y* represent the items removed
    and placed on the stack, respectively. *X* and *Y* change incrementally, starting
    from 2, 0 up to 6, 0 according to the LOG operation used. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| LOG0 . . . LOG4 | 0x0a ... 0xa4 | X | Y (0) | 375,750,1125,1500,1875 | 用于附加具有*N*个主题的日志记录，其中*N*是与所使用的LOG操作码对应的数字。
    例如，LOG0表示没有主题的日志记录，LOG4表示具有四个主题的日志记录。 *X* 和 *Y* 分别代表从堆栈上移除和放置的项目。 根据使用的LOG操作，*X*和*Y*会逐渐增加，从2,0到6,0。'
- en: System operations
  id: totrans-242
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 系统操作
- en: System operations are used to perform various system-related operations, such
    as account creation, message calling, and execution control. There are six Opcodes
    available in total in this category.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 系统操作用于执行各种与系统相关的操作，例如账户创建，消息调用和执行控制。 在该类别中总共有六个操作码可用。
- en: '| **Mnemonic** | **Value** | **POP** | **PUSH** | **Gas** | **Description**
    |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| **助记符** | **数值** | **POP** | **PUSH** | **Gas** | **描述** |'
- en: '| CREATE | 0xf0 | 3 | 1 | 32000 | Used to create a new account with the associated
    code. |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| CREATE | 0xf0 | 3 | 1 | 32000 | 用于创建具有相关代码的新账户。 |'
- en: '| CALL | 0xf1 | 7 | 1 | 40 | Used to initiate a message call into an account.
    |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| CALL | 0xf1 | 7 | 1 | 40 | 用于启动对账户的消息调用。 |'
- en: '| CALLCODE | 0xf2 | 7 | 1 | 40 | Used to initiate a message call into this
    account with an alternative account''s code. |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| CALLCODE | 0xf2 | 7 | 1 | 40 | 用于使用替代账户的代码启动对此账户的消息调用。 |'
- en: '| RETURN | 0xf3 | 2 | 0 | 0 | Stops the execution and returns output data.
    |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| RETURN | 0xf3 | 2 | 0 | 0 | 终止执行并返回输出数据。 |'
- en: '| DELEGATECALL | 0xf4 | 6 | 1 | 40 | The same as CALLCODE but does not change
    the current values of the sender and the value. |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| DELEGATECALL | 0xf4 | 6 | 1 | 40 | 与 CALLCODE 相同，但不改变发送方和值的当前值。 |'
- en: '| SUICIDE | 0xff | 1 | 0 | 0 | Stops (halts) the execution and the account
    is registered for deletion later |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| SUICIDE | 0xff | 1 | 0 | 0 | 停止（中止）执行，并且账户被注册以便稍后删除 |'
- en: In this section, all EVM opcodes have been discussed. There are 129 opcodes
    available in the EVM of the homestead release of Ethereum in total.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，已经讨论了所有的 EVM 操作码。在以太坊的 Homestead 发布中，总共有 129 个可用的 EVM 操作码。
- en: Precompiled contracts
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预编译合约
- en: There are four precompiled contracts in Ethereum. Here is the list of these
    contracts and details.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊有四个预编译合约。以下是这些合约及其详细信息的列表。
- en: The elliptic curve public key recovery function
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 椭圆曲线公钥恢复函数
- en: '**ECDSARECOVER** (**Elliptic curve DSA recover function**) is available at
    address 1\. It is denoted as ECREC and requires 3000 gas for execution. If the
    signature is invalid, then no output is returned by this function. Public key
    recovery is a standard mechanism by which the public key can be derived from the
    private key in elliptic curve cryptography.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '**ECDSARECOVER**（椭圆曲线 DSA 恢复函数）位于地址 1。它表示为 ECREC，并且执行时需要 3000 gas。如果签名无效，则此函数不返回任何输出。公钥恢复是一种标准机制，可以从椭圆曲线密码学中的私钥推导出公钥。'
- en: 'The ECDSA recovery function is shown as follows:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: ECDSA 恢复函数如下所示：
- en: '*ECDSARECOVER(H, V, R, S) = Public Key*'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '*ECDSARECOVER(H, V, R, S) = Public Key*'
- en: 'It takes four inputs: H, which is a 32 byte hash of the message to be signed
    and *V*, *R*, and *S*, which represent the ECDSA signature with the recovery ID
    and produce a 64 byte public key. *V*, *R*, and *S* have been discussed in detail
    previously in this chapter.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受四个输入：H，它是要签名的消息的 32 字节哈希，以及 *V*、*R* 和 *S*，它们代表带有恢复 ID 的 ECDSA 签名，并产生一个 64
    字节的公钥。*V*、*R* 和 *S* 在本章中之前已经详细讨论过。
- en: The SHA-256 bit hash function
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SHA-256 位哈希函数
- en: The SHA-256 bit hash function is a precompiled contract that is available at
    address 2 and produces a SHA256 hash of the input. It is almost like a pass-through
    function. Gas requirement for SHA-256 (SHA256) depends on the input data size.
    The output is a 32 byte value.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: SHA-256 位哈希函数是一个预编译合约，位于地址 2，并产生输入的 SHA256 哈希。它几乎就像是一个传递函数。SHA-256（SHA256）的燃气需求取决于输入数据的大小。输出是一个
    32 字节值。
- en: The RIPEMD-160 bit hash function
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RIPEMD-160 位哈希函数
- en: The RIPEMD-160 bit hash function is used to provide RIPEMD 160-bit hash and
    is available at address 3\. The output of this function is a 20-byte value. Gas
    requirement, similar to SHA-256, is dependent on the amount of input data.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: RIPEMD-160 位哈希函数用于提供 RIPEMD 160 位哈希，并且位于地址 3。此函数的输出是一个 20 字节的值。与 SHA-256 类似，燃气需求取决于输入数据的量。
- en: The identity function
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份函数
- en: 'The identity function is available at address 4 and is denoted by the ID. It
    simply defines output as input; in other words, whatever input is given to the
    ID function, it will output the same value. Gas requirement is calculated by a
    simple formula: *15 + 3 [I[d]/32]* where *I[d ]*is the input data. This means
    that at a high level, the gas requirement is dependent on the size of the input
    data albeit with some calculation performed, as shown in the preceding equation.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 身份函数位于地址 4 并且由 ID 表示。它简单地将输出定义为输入；换句话说，无论输入是什么，ID 函数都会输出相同的值。燃气需求通过一个简单的公式计算：*15
    + 3 [I[d]/32]*，其中 *I[d]* 是输入数据。这意味着在高层次上，燃气需求取决于输入数据的大小，尽管进行了一些计算，如前面的方程所示。
- en: All the previously mentioned precompiled contracts can become native extensions
    and can be included in the EVM opcodes in the future.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 所有先前提到的预编译合约都可以成为本机扩展，并且将来可以包含在 EVM 操作码中。
- en: Accounts
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 账户
- en: 'Accounts are one of the main building blocks of the Ethereum blockchain. The
    state is created or updated as a result of the interaction between accounts. Operations
    performed between and on the accounts represent state transitions. State transition
    is achieved using what''s called the Ethereum state transition function, which
    works as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 账户是以太坊区块链的主要构建块之一。状态是由账户之间和账户上的交互导致的。在账户之间和账户上执行的操作代表状态转换。状态转换是通过所谓的以太坊状态转换函数实现的，其工作方式如下：
- en: Confirm the transaction validity by checking the syntax, signature validity,
    and nonce.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过检查语法、签名有效性和 nonce 来确认交易的有效性。
- en: Transaction fee is calculated and the sending address is resolved using the
    signature. Furthermore, sender's account balance is checked and subtracted accordingly
    and nonce is incremented. An error is returned if the account balance is not enough.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算交易费用，并使用签名解析发送地址。此外，检查并相应减少发送方的账户余额，并递增nonce。如果账户余额不足，则返回错误。
- en: Provide enough ether (gas price) to cover the cost of the transaction. This
    is charged per byte incrementally according to the size of the transaction.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供足够的以太（gas价格）以支付交易成本。根据交易的大小，逐字节收费增加。
- en: In this step, the actual transfer of value occurs. The flow is from the sender's
    account to receiver's account. The account is created automatically if the destination
    account specified in the transaction does not exist yet. Moreover, if the destination
    account is a contract, then the contract code is executed. This also depends on
    the amount of gas available. If enough gas is available, then the contract code
    will be executed fully; otherwise, it will run up to the point where it runs out
    of gas.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此步骤中，实际的价值转移发生。流程是从发送方账户到接收方账户。如果交易中指定的目标账户尚不存在，则会自动创建该账户。此外，如果目标账户是一个合约账户，则会执行合约代码。这也取决于可用的gas数量。如果有足够的gas，则合约代码将被完全执行；否则，它将运行到用尽gas的地方。
- en: In cases of transaction failure due to insufficient account balance or gas,
    all state changes are rolled back with the exception of fee payment, which is
    paid to the miners.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在由于账户余额不足或gas而导致交易失败的情况下，除了支付给矿工的手续费之外，所有状态更改都会被回滚。
- en: Finally, the remainder (if any) of the fee is sent back to the sender as change
    and fee is paid to the miners accordingly. At this point, the function returns
    the resulting state.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将剩余的手续费（如果有）作为找零发送回发送方，并相应地支付手续费给矿工。在这一点上，函数返回结果状态。
- en: Types of accounts
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 账户类型
- en: 'There are two types of accounts in Ethereum:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊有两种类型的账户：
- en: Externally owned accounts
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部拥有账户
- en: Contract accounts
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合约账户
- en: The first is **externally owned accounts** (**EOAs**) and the other is contract
    accounts. EOAs are similar to accounts that are controlled by a private key in
    bitcoin. Contract accounts are the accounts that have code associated with them
    along with the private key. An EOA has ether balance, is able to send transactions,
    and has no associated code, whereas a **Contract Account** (**CA**) has ether
    balance, associated code, and the ability to get triggered and execute code in
    response to a transaction or a message. It is worth noting that due to the Turing-completeness
    property of the Ethereum blockchain, the code within contract accounts can be
    of any level of complexity. The code is executed by EVM by each mining node on
    the Ethereum network. In addition, contract accounts are able to maintain their
    own permanent state and can call other contracts. It is envisaged that in the
    serenity release, the distinction between externally owned accounts and contract
    accounts may be eliminated.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是**外部拥有账户**（**EOAs**），另一个是合约账户。EOAs类似于比特币中由私钥控制的账户。合约账户是与私钥一起关联有代码的账户。EOA具有以太坊余额，能够发送交易，并且没有关联的代码，而**合约账户**（**CA**）具有以太坊余额，关联代码，并且能够在收到交易或消息时被触发并执行代码。值得注意的是，由于以太坊区块链的图灵完备性质，合约账户内的代码可以具有任何复杂程度。该代码由以太坊网络上的每个挖矿节点的EVM执行。此外，合约账户能够维护自己的永久状态并调用其他合约。预计在serenity版本中，可能会消除外部拥有账户和合约账户之间的区别。
- en: Block
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块
- en: 'As discussed earlier, blocks are the main building blocks of a blockchain.
    Ethereum blocks consist of various components, which are described as follows:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，区块是区块链的主要构建块。以太坊区块包含各种组件，描述如下：
- en: The block header
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块头
- en: The transactions list
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易列表
- en: The list of headers of Ommers or Uncles
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ommers或叔叔的头列表
- en: The transaction list is simply a list of all transactions included in the block.
    In addition, the list of headers of Uncles is also included in the block. The
    most important and complex part is the block header, which is discussed here.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 交易列表简单来说就是包含在区块中的所有交易的列表。此外，叔叔的头列表也包含在区块中。最重要且最复杂的部分是区块头，在此讨论。
- en: Block header
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区块头
- en: Block headers are the most critical and detailed components of an Ethereum block.
    The header contains valuable information, which is described in detail here.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '区块头是以太坊区块的最关键和详细的组件。头包含有价值的信息，以下将详细描述。 '
- en: Parent hash
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 父哈希
- en: This is the Keccak 256-bit hash of the parent (previous) block's header.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 这是父（上一个）区块头的Keccak 256位哈希。
- en: Ommers hash
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 祖先哈希
- en: This is the Keccak 256-bit hash of the list of Ommers (Uncles) blocks included
    in the block.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这是包含在区块中的Ommers（叔块）区块列表的Keccak 256位哈希。
- en: Beneficiary
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 受益人
- en: Beneficiary field contains the 160-bit address of the recipient that will receive
    the mining reward once the block is successfully mined.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 受益人字段包含接收采矿奖励的160位地址，一旦区块成功挖掘完成，受益人将获得奖励。
- en: State root
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 状态根
- en: The state root field contains the Keccak 256-bit hash of the root node of the
    state trie. It is calculated after all transactions have been processed and finalized.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 状态根字段包含状态trie的根节点的Keccak 256位哈希。它是在所有交易被处理和结束后计算的。
- en: Transactions root
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交易根
- en: The transaction root is the Keccak 256-bit hash of the root node of the transaction
    trie. Transaction trie represents the list of transactions included in the block.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '交易根是交易trie的根节点的Keccak 256位哈希。交易trie表示包括在区块中的交易列表。 '
- en: Receipts root
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 收据根
- en: The receipts root is the keccak 256 bit hash of the root node of the transaction
    receipt trie. This trie is composed of receipts of all transactions included in
    the block. Transaction receipts are generated after each transaction is processed
    and contain useful post-transaction information. More details on transaction receipts
    are provided in the next section.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 收据根是交易收据trie的根节点的keccak 256位哈希。这个trie由包含在区块中的所有交易的收据组成。交易收据在每笔交易处理后生成，包含有用的交易后信息。更多关于交易收据的详细信息将在下一节中提供。
- en: Logs bloom
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日志布隆
- en: The logs bloom is a bloom filter that is composed of the logger address and
    log topics from the log entry of each transaction receipt of the included transaction
    list in the block. Logging is explained in detail in the next section.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 日志布隆是一个由每个区块中包含的交易清单的每个交易收据的日志器地址和日志主题组成的布隆过滤器。日志将在下一节中详细解释。
- en: Difficulty
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 难度
- en: The difficulty level of the current block.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 当前区块的难度级别。
- en: Number
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字
- en: The total number of all previous blocks; the genesis block is block zero.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 所有先前区块的总数；起源区块是区块零。
- en: Gas limit
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 燃气限制
- en: The field contains the value that represents the limit set on the gas consumption
    per block.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段包含代表每个区块燃气消耗上限的值。
- en: Gas used
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用的燃气
- en: The field contains the total gas consumed by the transactions included in the
    block.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段包含区块中包括的交易消耗的总燃气。
- en: Timestamp
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 时间戳
- en: Timestamp is the epoch Unix time of the time of block initialization.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳是区块初始化时间的纪元Unix时间。
- en: Extra data
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 额外数据
- en: Extra data field can be used to store arbitrary data related to the block.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 额外数据字段可用于存储与区块相关的任意数据。
- en: Mixhash
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mixhash
- en: Mixhash field contains a 256-bit hash that once combined with the nonce is used
    to prove that adequate computational effort has been spent in order to create
    this block.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: Mixhash字段包含一个256位哈希，一旦与随机数结合使用，可以证明已经花费了足够的计算工作来创建这个区块。
- en: Nonce
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 随机数
- en: Nonce is a 64-bit hash (a number) that is used to prove, in combination with
    the mixhash field, that adequate computational effort has been spent in order
    to create this block.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数是一个64位哈希（一个数字），用来证明，结合Mixhash字段，已经花费了足够的计算工作来创建这个区块。
- en: 'The following figure shows the detailed structure of the block and block header:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了区块和区块头的详细结构：
- en: '![Nonce](img/B05975_07_09-2.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![随机数](img/B05975_07_09-2.jpg)'
- en: Detailed diagram of block structure with block header
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 带有区块头的区块结构详细图
- en: The genesis block
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 起源区块
- en: The genesis block varies slightly with regard to the data it contains and the
    way it has been created from a normal block. It contains 15 items that are described
    here.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 起源区块在其所包含的数据和从普通区块创建方式上略有不同。它包含了15项描述如下。
- en: 'From Etherscan.io, the actual version is shown as follows:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 从Etherscan.io，实际版本如下所示：
- en: '| **Element** | **Description** |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| **元素** | **描述** |'
- en: '| Timestamp | (Jul-30-2015 03:26:13 PM +UTC) |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| 时间戳 | （2015年7月30日下午03:26:13 +协调世界时） |'
- en: '| Transactions | 8893 transactions and 0 contract internal transactions in
    this block |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| 交易 | 该区块中包含8893笔交易和0笔合约内部交易 |'
- en: '| Hash | 0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3
    |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| 哈希 | 0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3 |'
- en: '| Parent hash | 0x0000000000000000000000000000000000000000000000000000000000000000
    |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| 父哈希 | 0x0000000000000000000000000000000000000000000000000000000000000000
    |'
- en: '| Sha3Uncles | 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
    |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| Sha3 叔眷 | 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
    |'
- en: '| Mined by | 0x0000000000000000000000000000000000000000 IN 15 secs |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| 由谁挖掘 | 0x0000000000000000000000000000000000000000 在15秒内 |'
- en: '| Difficulty | 17,179,869,184 |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| 难度 | 17,179,869,184 |'
- en: '| Total Difficulty | 17,179,869,184 |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| 总难度 | 17,179,869,184 |'
- en: '| Size | 540 bytes |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| 大小 | 540 字节 |'
- en: '| Gas Limit | 5,000 |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| Gas 限制 | 5,000 |'
- en: '| Gas Used | 0 |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| Gas 使用 | 0 |'
- en: '| Nonce | 0x0000000000000042 |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| Nonce | 0x0000000000000042 |'
- en: '| Block Reward | 5 Ether |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| 区块奖励 | 5 以太币 |'
- en: '| Uncles Reward | 0 |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| 叔眷奖励 | 0 |'
- en: '| Extra Data | »èÛN4{NŒ"&#124;ƒpäµí3­³ÛiËÛz8áå ‚ú (Hex:0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa)
    |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| 额外数据 | »èÛN4{NŒ"&#124;ƒpäµí3­³ÛiËÛz8áå ‚ú（十六进制：0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa）
    |'
- en: Transaction receipts
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交易收据
- en: Transaction receipts are used as a mechanism to store the state after a transaction
    has been executed. In other words, these structures are used to record the outcome
    of the transaction execution. It is produced after the execution of each transaction.
    All receipts are stored in an index-keyed trie. Hash (Keccak 256-bit) of the root
    of this trie is placed in the block header as the receipts root. It is composed
    of four elements that are described here.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 交易收据被用作存储交易执行后的状态的机制。换句话说，这些结构被用于记录交易执行的结果。在每次交易执行完成后产生。所有收据都存储在索引键字典树中。这个字典树的根哈希（Keccak
    256位）被放置在区块头部作为收据根。它由在这里描述的四个元素组成。
- en: The post-transaction state
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交易后状态
- en: This item is a trie structure that holds the state after the transaction has
    executed. It is encoded as a byte array.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 该项是在交易执行后保存状态的字典树结构。它被编码为一个字节数组。
- en: Gas used
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已使用的 Gas
- en: This item represents the total amount of gas used in the block that contains
    the transaction receipt. The value is taken immediately after the transaction
    execution is completed. The total gas used is expected to be a non-negative integer.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 这一项代表在包含交易收据的区块中所使用的总 Gas 数量。该值在交易执行完成后立即被取得。总 Gas 使用量预计应为非负整数。
- en: Set of logs
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日志集合
- en: This field shows the set of log entries created as a result of transaction execution.
    Log entries contain the logger's address, a series of log topics, and the log
    data.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 此字段显示作为交易执行结果创建的日志条目集合。日志条目包含记录者地址、一系列日志主题和日志数据。
- en: The bloom filter
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布隆过滤器
- en: A bloom filter is created from the information contained in the set of logs
    discussed earlier. A log entry is reduced to a hash of 256 bytes, which is then
    embedded in the header of the block as the logs bloom. Log entry is composed of
    the logger's address and log topics and log data. Log topics are encoded as a
    series of 32 byte data structures. Log data is made up of a few bytes of data.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前讨论的日志条目中所包含的信息创建了一个布隆过滤器。日志条目被简化为一个哈希值为256字节，然后作为日志布隆嵌入到区块头部。日志条目是由记录者地址、日志主题和日志数据组成的。日志主题被编码为一系列32字节的数据结构。日志数据由一些字节数据组成。
- en: 'This process can be visualized in the following diagram:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程可以在以下图表中可视化：
- en: '![The bloom filter](img/B05975_07_10.jpg)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![布隆过滤器](img/B05975_07_10.jpg)'
- en: Transaction receipts and logs bloom
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 交易收据和日志布隆
- en: Transaction validation and execution
  id: totrans-352
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交易验证和执行
- en: 'Transactions are executed after verifying the transactions for validity. Initial
    tests are listed as follows:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 交易在验证有效性后执行。初始测试如下所列：
- en: A transaction must be well-formed and RLP-encoded without any additional trailing
    bytes
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个交易必须是形式良好的，并且是没有额外的尾随字节的 RLP 编码的
- en: The digital signature used to sign the transaction is valid
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于签署交易的数字签名是有效的
- en: Transaction nonce must be equal to the sender's account's current nonce
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易 nonce 必须等于发送方账户的当前 nonce
- en: Gas limit must not be less than the gas used by the transaction
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gas 限制不能小于交易使用的 Gas
- en: The sender's account contains enough balance to cover the execution cost
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送方账户包含足够的余额来支付执行成本
- en: The transaction sub state
  id: totrans-359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交易子状态
- en: A transaction sub-state is created during the execution of the transaction that
    is processed immediately after the execution completes. This transaction sub-state
    is a tuple that is composed of three items.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行交易后立即被处理时产生了一个交易子状态。这个交易子状态是由三个项目组成的元组。
- en: Suicide set
  id: totrans-361
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自杀集合
- en: This element contains the list of accounts that are disposed of after the transaction
    is executed.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素包含在执行事务后被处置的帐户列表。
- en: Log series
  id: totrans-363
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 日志系列
- en: This is an indexed series of checkpoints that allow the monitoring and notification
    of contract calls to the entities external to the Ethereum environment, such as
    application frontends. It works like a trigger mechanism that is executed every
    time a specific function is invoked or a specific event occurs. Logs are created
    in response to events occurring in the smart contract. It can also be used as
    a cheaper form of storage. Events will be covered with practical examples in [Chapter
    8](ch08.html "Chapter 8. Ethereum Development"), *Ethereum development*.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一系列索引检查点，允许监视和通知与以太坊环境外部实体的合同调用，例如应用前端。它的工作方式类似于触发机制，每次调用特定函数或发生特定事件时执行。日志是响应智能合约中发生的事件而创建的。它还可以用作更便宜的存储形式。事件将在[第8章](ch08.html
    "Chapter 8. Ethereum Development") *以太坊开发*中通过实际示例进行讨论。
- en: Refund balance
  id: totrans-365
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 退款余额
- en: This is the total price of gas in the transaction that initiated the execution.
    Refunds are not immediately executed; instead, they are used to partially offset
    the total execution cost.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 这是发起执行的交易中的气体总价格。退款不会立即执行；相反，它们被用来部分抵消总执行成本。
- en: 'The following diagram describes the transaction sub-state tuple:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图描述了事务子状态元组：
- en: '![Refund balance](img/B05975_07_11.jpg)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![退款余额](img/B05975_07_11.jpg)'
- en: Sub-state tuple
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 子状态元组
- en: The block validation mechanism
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 块验证机制
- en: 'An Ethereum block is considered valid if it passes the following checks:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Ethereum块通过以下检查，则视为有效：
- en: Consistent with Uncles and transactions. This means that all Ommers (Uncles)
    satisfy the property that they are indeed Uncles and also if the Proof of Work
    for Uncles is valid.
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Uncles和交易一致。这意味着所有Ommers（Uncles）满足它们确实是Uncles的属性，并且Uncles的工作证明是否有效。
- en: If the previous block (parent) exists and is valid.
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果先前的块（父块）存在且有效。
- en: If the timestamp of the block is valid. This basically means that the current
    block's timestamp must be higher than the parent block's timestamp. Also, it should
    be less than 15 minutes into the future. All block times are calculated in epoch
    time (Unix time).
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果块的时间戳有效。这基本上意味着当前块的时间戳必须高于父块的时间戳。此外，它应该在未来15分钟之内。所有块时间都以纪元时间（Unix时间）计算。
- en: If any of these checks fails, the block will be rejected.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些检查中的任何一个失败，该块将被拒绝。
- en: Block finalization
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 块最终化
- en: Block finalization is a process that is run by miners in order to validate the
    contents of the block and apply rewards. It results in four steps being executed.
    These steps are described here in detail.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 块最终化是由矿工运行的过程，目的是验证块的内容并应用奖励。它导致执行四个步骤。这些步骤在此详细描述。
- en: Ommers validation
  id: totrans-378
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Ommers验证
- en: Validate Ommers (stale blocks also called Uncles). In the case of mining, determine
    Ommers. The validation process of the headers of stale blocks checks whether the
    header is valid and the relationship of the Uncle with the current block satisfies
    the maximum depth of six blocks. A block can contain a maximum of two Uncles.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 验证Ommers（也称为已过时的块Uncles）。在挖矿的情况下，确定Ommers。过时块头的验证过程检查头是否有效以及Uncle与当前块的关系是否满足最大深度为六个块。一个块最多可以包含两个Uncles。
- en: Transaction validation
  id: totrans-380
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 交易验证
- en: Validate transactions. In the case of mining, determine transactions. The process
    involves checking whether the total gas used in the block is equal to the final
    gas consumption after the final transaction.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 验证交易。在挖矿的情况下，确定交易。该过程涉及检查块中使用的总气体是否等于最终交易后的最终气体消耗。
- en: Reward application
  id: totrans-382
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 奖励申请
- en: Apply rewards, which means updating the beneficiary's account with a reward
    balance. In Ethereum, a reward is also given to miners for stale blocks, which
    is 1/32 of the block reward. Uncles that are included in the blocks also receive
    7/8 of the total block reward. The current block reward is 5 Ether. A block can
    have a maximum of two Uncles.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 应用奖励，这意味着更新受益者帐户的奖励余额。在以太坊中，矿工还为过时的块提供奖励，这是块奖励的1/32。包含在块中的Uncles还将获得总块奖励的7/8。当前块奖励为5个以太。一个块最多可以有两个Uncles。
- en: State and nonce validation
  id: totrans-384
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 状态和随机数验证
- en: Verify the state and nonce. In the case of mining, compute a valid state and
    nonce.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 验证状态和随机数。在挖矿的情况下，计算一个有效的状态和随机数。
- en: Block difficulty
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 块难度
- en: 'Block difficulty is increased if the time between two blocks decreases, whereas
    it increases if the block time between two blocks decreases. This is required
    to maintain a roughly consistent block generation time. The difficulty adjustment
    algorithm in Ethereum''s homestead release is shown as follows:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个区块之间的时间缩短，则区块难度会增加，而如果两个区块之间的时间增加，难度也会增加。这是为了保持大致一致的区块生成时间。以太坊家园版发布的难度调整算法如下所示：
- en: '[PRE2]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding algorithm means that, if the time difference between the generation
    of the parent block and the current block is less than 10 seconds, the difficulty
    goes up. If the time difference is between 10 to 19 seconds, the difficulty level
    remains the same. Finally, if the time difference is 20 seconds or more, the difficultly
    level decreases. This decrease is proportional to the time difference.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 前述算法意味着，如果父区块和当前区块生成之间的时间差小于10秒，则难度增加。如果时间差在10到19秒之间，则难度级别保持不变。最后，如果时间差为20秒或更多，则难度级别降低。这种降低与时间差成比例。
- en: In addition to timestamp-difference-based difficulty adjustment, there is also
    another part (shown in the last line of the preceding algorithm) that increases
    the difficulty exponentially after every 100,000 blocks. This is the so called
    *difficulty time bomb* or *Ice age* introduced in the Ethereum network, which
    will make it very hard to mine on the Ethereum blockchain at some point in the
    future. This will encourage users to switch to Proof of Stake as mining on the
    POW chain will eventually become prohibitively difficult. According to the latest
    update and estimates based on the algorithm, the block generation time will become
    significantly high during the second half of the year 2017 and in 2021, it will
    become so high that it will be virtually impossible to mine on the POW chain.
    This way, miners will have no choice but to switch to the Proof of Stake scheme
    proposed by Ethereum called Casper.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基于时间戳差异的难度调整外，在前述算法的最后一行还有另一部分，即在每挖出100,000个区块后难度会呈指数增长。这就是以太坊网络引入的所谓*难度时间炸弹*或*冰河时代*，它将在未来某个时间点使在以太坊区块链上的挖矿变得非常困难。这将鼓励用户转向权益证明，因为在工作量证明链上的挖矿最终将变得极其困难。根据最新的更新和基于算法的估计，区块生成时间将在2017年下半年显著增加，在2021年将变得如此之高，以至于在工作量证明链上挖矿几乎不可能。这样一来，矿工们将别无选择，只能转向以太坊提出的叫做卡斯珀的权益证明方案。
- en: Ether
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太币
- en: Ether is minted by miners as a currency reward for the computational effort
    they spend in order to secure the network by verifying and with validation transactions
    and blocks. Ether is used within the Ethereum blockchain to pay for the execution
    of contracts on the EVM. Ether is used to purchase gas as crypto fuel, which is
    required in order to perform computation on the Ethereum blockchain.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 以太币是由矿工挖矿产生的作为奖励的货币，用于支付他们在验证和验证交易和区块的过程中所花费的计算工作。以太币在以太坊区块链内用于支付在EVM上执行合约的费用。以太币用于购买作为加密燃料的Gas，这是在以太坊区块链上执行计算所需的。
- en: 'The denomination table is shown as follows:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 分数表如下所示：
- en: '![Ether](img/B05975_07_32.jpg)'
  id: totrans-394
  prefs: []
  type: TYPE_IMG
  zh: '![以太币](img/B05975_07_32.jpg)'
- en: Fees are charged for each computation performed by the EVM on the blockchain.
    A detailed fee schedule is shown in the upcoming section.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 每次EVM在区块链上执行计算都会收取费用。详细的费用表将在接下来的部分中展示。
- en: Gas
  id: totrans-396
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gas
- en: Gas is required to be paid for every operation performed on the ethereum blockchain.
    This is a mechanism that ensures that infinite loops cannot cause the whole blockchain
    to stall due to the Turing-complete nature of the EVM. A transaction fee is charged
    as some amount of Ether and is taken from the account balance of the transaction
    originator. A fee is paid for transactions to be included by miners for mining.
    If this fee is too low, the transaction may never be picked up; the more the fee,
    the higher are the chances that the transactions will be picked up by the miners
    for inclusion in the block. Conversely, if the transaction that has an appropriate
    fee paid is included in the block by miners but has too many complex operations
    to perform, it can result in an out-of-gas exception if the gas cost is not enough.
    In this case, the transaction will fail but will still be made part of the block
    and the transaction originator will not get any refund.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 每次在以太坊区块链上执行操作时都需要支付 gas。这是一种机制，它确保了由于 EVM 的图灵完备性质，无限循环不能导致整个区块链因而停滞。交易费用以一定数量的以太币收取，并从交易发起者的帐户余额中扣除。交易费用是为了让矿工将交易包含在挖掘中而收取的。如果此费用过低，则可能永远不会被挑选出来；费用越高，被矿工挑选出来并包含在区块中的机会就越大。相反，如果矿工将费用适当支付的交易包含在区块中，但要执行的操作过于复杂，则如果
    gas 成本不足，可能会导致 gas 耗尽异常。在这种情况下，交易将失败，但仍将被包含在区块中，并且交易发起者将不会获得任何退款。
- en: 'Transaction cost can be estimated using the following formula:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 交易成本可以使用以下公式估算：
- en: '*Total cost = gasUsed * gasPrice*'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '*总成本 = gasUsed * gasPrice*'
- en: Here, *gasUsed* is the total gas that is supposed to be used by the transaction
    during the execution and *gasPrice* is specified by the transaction originator
    as an incentive to the miners to include the transaction in the next block. This
    is specified in Ether. Each EVM opcode has a fee assigned to it. It is an estimate
    because the gas used can be more or less than the value specified by the transaction
    originator originally. For example, if computation takes too long or the behavior
    of the smart contract changes in response to some other factors, then the transaction
    execution may perform more or less operations than originally intended and can
    result in consuming more or fewer gas. If the execution runs out of gas, everything
    is immediately rolled back; otherwise, if the execution is successful and there
    is some remaining gas, then it is returned to the transaction originator.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，*gasUsed* 是交易在执行过程中应该使用的总 gas，*gasPrice* 是由交易发起者指定的奖励给矿工的激励，以便将交易包含在下一个区块中。这以以太币指定。每个
    EVM 操作码都分配了一个费用。这只是一个估计，因为实际使用的 gas 可能会比交易发起者最初指定的值多或少。例如，如果计算时间过长或者智能合约的行为随其他因素的变化而改变，那么交易执行可能会执行比最初预期的更多或更少的操作，从而导致消耗更多或更少的
    gas。如果执行耗尽了 gas，一切都会立即回滚；否则，如果执行成功且还有一些剩余的 gas，则会将其返回给交易发起者。
- en: 'Each operation costs some gas; a high level fee schedule of a few operations
    is shown as an example here:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 每个操作都会消耗一些 gas；以下是一些操作的高级费用计划示例：
- en: '![Gas](img/B05975_07_33.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![Gas](img/B05975_07_33.jpg)'
- en: 'Based on the preceding fee schedule and the formula discussed earlier, an example
    calculation of the SHA3 operation can be calculated as follows:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的费用计划和前面讨论的公式，可以计算 SHA3 操作的示例计算如下：
- en: SHA3 costs 30 gas
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SHA3 消耗 30 gas
- en: Current gas price is 25 GWei, which is 0.000000025 Ether
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前 gas 价格为 25 GWei，相当于 0.000000025 以太币
- en: 'Multiplying both: *0.000000025 * 30 = 0.00000075* Ether'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将两者相乘：*0.000000025 * 30 = 0.00000075* 以太币
- en: In total, 0.00000075 Ether is the total gas that will be charged.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 总共，0.00000075 以太币是将被收取的总 gas。
- en: Fee schedule
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 费用计划
- en: 'Gas is charged in three scenarios as a prerequisite to the execution of an
    operation:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 作为执行操作的先决条件，gas 在三种情况下被收取：
- en: The computation of an operation
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作的计算
- en: For contract creation or message call
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于合约创建或消息调用
- en: Increase in the usage of memory
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存使用增加
- en: A list of instructions and various operations with the gas values has been provided
    previously in the chapter.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章节之前提供了一系列指令和具有 gas 值的各种操作。
- en: Messages
  id: totrans-414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息
- en: Messages, as defined in the yellow paper, are the data and value that are passed
    between two accounts. A message is a data packet passed between two accounts.
    This data packet contains data and value (amount of ether). It can either be sent
    via a smart contract (autonomous object) or from an external actor (externally
    owned account) in the form of a transaction that has been digitally signed by
    the sender.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 消息，如黄皮书所定义，是在两个账户之间传递的数据和价值。消息是在两个账户之间传递的数据包。这个数据包包含数据和价值（以太币数量）。它可以通过智能合约（自治对象）发送，也可以通过数字签名的方式由外部参与者（外部用户账户）发出的交易方式发送。
- en: Contracts can send messages to other contracts. Messages only exist in the execution
    environment and are never stored. Messages are similar to transactions; however,
    the main difference is that they are produced by the contracts, whereas transactions
    are produced by entities external (externally owned accounts) to the Ethereum
    environment.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 合同可以向其他合同发送消息。消息只存在于执行环境中，永远不会被存储。消息类似于交易；然而，主要区别在于它们是由合同产生的，而交易是由以太坊环境外部实体（外部用户账户）产生的。
- en: 'A message consists of the components mentioned here:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 一条消息由这里提到的组件组成：
- en: Sender of the message
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 消息的发送者
- en: Recipient of the message
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 消息的接收者
- en: Amount of Wei to transfer and message to the contract address
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 欲转移的Wei数量和消息到合同地址
- en: Optional data field (Input data for the contract)
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选的数据字段（合同的输入数据）
- en: Maximum amount of gas that can be consumed
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以消耗的最大燃气数量
- en: Messages are generated when `CALL` or `DELEGATECALL` Opcodes are executed by
    the contracts.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 当合同执行`CALL`或`DELEGATECALL` 操作码时生成消息。
- en: Calls
  id: totrans-424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用
- en: A call does not broadcast anything to the blockchain; instead, it is a local
    call to a contract function and runs locally on the node. It is almost like a
    local function call. It does not consume any gas as it is a read-only operation.
    It is akin to a dry run. Calls are executed locally on a node and generally do
    not result in any state change. As defined in the yellow paper, this is the act
    of passing a message from one account to another. If the destination account has
    an associated EVM code, then the virtual machine will start upon the receipt of
    the message to perform the required operations. If the message sender is an autonomous
    object, then the call passes any data returned from the virtual machine operation.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 调用不会向区块链广播任何内容；相反，它是对合同函数的本地调用，并在节点上本地运行。它几乎像是本地函数调用。由于它是一个只读操作，因此它不会消耗任何燃气。这类似于试运行。调用在节点上本地执行，通常不会导致任何状态变化。在黄皮书中定义，这是将消息从一个账户传递到另一个账户的行为。如果目标帐户有关联的EVM代码，那么虚拟机将在接收消息后启动以执行所需的操作。如果消息发送者是一个自治对象，那么调用将传递虚拟机操作返回的任何数据。
- en: State is altered by transactions. These are created by external factors and
    are signed and then broadcasted to the Ethereum network.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 状态通过交易改变。这些交易由外部因素创建，签名然后广播到以太坊网络。
- en: Mining
  id: totrans-427
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挖矿
- en: Mining is the process by which new currency is added to the blockchain. This
    is an incentive for the miners to validate and verify blocks made up of transactions.
    The mining process helps secure the network by verifying computations.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 挖矿是向区块链添加新货币的过程。这是矿工验证和验证由交易组成的区块的激励。挖矿过程通过验证计算来帮助确保网络安全。
- en: 'At a theoretical level, a miner performs the following functions:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 在理论层面上，矿工执行以下功能：
- en: Listens for the transactions broadcasted on the Ethereum network and determines
    the transactions to be processed.
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听在以太坊网络上广播的交易，并确定要处理的交易。
- en: Determines stale blocks called Uncles or Ommers and includes them in the block.
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定过时的块，称为Uncles或Ommers，并将它们包含在块中。
- en: Updates the account balance with the reward earned from successfully mining
    the block.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新账户余额，获得成功挖矿的奖励。
- en: Finally, a valid state is computed and block is finalized, which defines the
    result of all state transitions.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，计算出一个有效状态并完成块，这定义了所有状态转换的结果。
- en: The current method of mining is based on Proof of Work, which is similar to
    that of bitcoin. When a block is deemed valid, it has to satisfy not only the
    general consistency requirements, but it must also contain the Proof of Work for
    a given difficulty.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个块被认为是有效时，它不仅必须满足一般的一致性要求，还必须包含给定难度的工作证明。
- en: The Proof of Work algorithm is due to be replaced with the Proof of Stake algorithm
    with the release of serenity. Considerable research work has been carried out
    in order to build the Proof of Stake algorithm suitable for the Ethereum Network.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 serenity 发布，工作量证明算法将被权益证明算法取代。已经进行了大量的研究工作，以构建适用于以太坊网络的权益证明算法。
- en: An Algorithm named Casper has been developed, which will replace the existing
    Proof of Work algorithm in Ethereum. This is a security deposit based on the economic
    protocol where nodes are required to place a security deposit before they can
    produce blocks. Nodes have been named bonded validators in Casper, whereas the
    act of placing the security deposit is named bonding.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 已经开发了一种名为 Casper 的算法，它将替换以太坊中现有的工作量证明算法。这是一个基于经济协议的安全押金，节点需要在它们能够产生区块之前放置一个安全押金。在
    Casper 中，节点被称为有抵押验证器，而放置押金的行为被称为绑定。
- en: Ethash
  id: totrans-437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ethash
- en: '**Ethash** is the name of the Proof of Work algorithm used in Ethereum. Originally,
    this was proposed as the Dagger-Hashimoto algorithm, but much has changed since
    the first implementation and the PoW algorithm has now evolved into what''s known
    as Ethash now. Similar to bitcoin, the core idea behind mining is to find a nonce
    that once hashed the result in a predetermined difficulty level. Initially, the
    difficulty was low when Ethereum was new and even CPU and single GPU mining was
    profitable to a certain extent, but that is no longer the case. Now either pooled
    mining is profitable, or large GPU mining farms are used for mining purposes.'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ethash** 是以太坊使用的工作量证明算法的名称。最初，这被提出为“Dagger-Hashimoto”算法，但自第一次实施以来发生了许多变化，而
    PoW 算法现在已经演变为现在所知的 Ethash。与比特币类似，挖矿背后的核心思想是找到一个一旦哈希的随机数在预定的难度级别下结果。最初，以太坊刚刚推出时的难度很低，即使是
    CPU 和单个 GPU 挖矿也是有利可图的，但现在情况已经不再如此。现在，要么是挖矿合集有利可图，要么是大型 GPU 挖矿农场被用于挖矿目的。'
- en: Ethash is a memory-hard algorithm, which makes it difficult to be implemented
    on specialized hardware. As in bitcoin, ASICs have been developed, which have
    resulted in mining centralization over the years, but memory-hard Proof of Work
    algorithms are one way of thwarting this threat and Ethereum implements Ethash
    to discourage ASIC development for mining. This algorithm requires choosing subsets
    of a fixed resource called **DAG** (**Directed Acyclic Graph**) depending on the
    nonce and block headers. DAG is around 2 GB in size and changes every 30000 blocks.
    Mining can only start when DAG is completely generated the first time a mining
    node starts. The time between every 30000 blocks is around 5.2 days and is called
    epoch. This DAG is used as a seed by the Proof of Work algorithm called Ethash.
    According to current specifications, the epoch time is defined as 30,000 blocks.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: Ethash 是一种内存硬算法，这使得在专用硬件上实施它变得困难。与比特币一样，ASIC 已经被开发出来，这多年来导致了挖矿的集中化，但内存硬工作量证明算法是阻止这种威胁的一种方式，以太坊实现了
    Ethash 来阻止 ASIC 发展用于挖矿。该算法需要根据随机数和区块头部选择一个称为**DAG**（**有向无环图**）的固定资源的子集。DAG 大约有
    2 GB 大小，并且每 30000 个区块改变一次。只有当 DAG 第一次完全生成时，挖矿才能开始。每 30000 个区块之间的时间大约为 5.2 天，称为纪元。这个
    DAG 被称为 Proof of Work 算法 Ethash 的种子。根据当前的规格，纪元时间被定义为 30000 个区块。
- en: The current reward scheme is 5 Ether for successfully finding a valid nonce.
    In addition to receiving 5 Ethers, the successful miner also receives the cost
    of the gas consumed within the block and an additional reward for including stale
    blocks (Uncles) in the block. A maximum of two Uncles are allowed per block and
    are rewarded 7/8 of the normal block reward. In order to achieve a 12 second block
    time, block difficulty is adjusted at every block. The rewards are directly proportional
    to the miner's hash rate, which basically means how fast a miner can hash.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 当成功找到有效随机数时，当前的奖励方案是 5 以太。除了获得 5 以太外，成功的矿工还会获得区块内消耗的 gas 的费用以及将陈旧区块（叔块）包含在区块中的额外奖励。每个区块最多允许两个叔块，并且以正常区块奖励的
    7/8 进行奖励。为了实现 12 秒的区块时间，每个区块都会调整难度。奖励与矿工的哈希速率成正比，这基本上意味着矿工可以有多快地进行哈希计算。
- en: Mining can be performed by simply joining the Ethereum network and running an
    appropriate client. The key requirement is that the node should be fully synced
    with the main network before mining can start.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 挖矿可以通过简单地加入以太坊网络并运行适当的客户端来进行。关键要求是节点在挖矿开始之前应完全与主网络同步。
- en: In the upcoming section, various methods of mining are mentioned.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 在即将到来的章节中，将提到各种挖矿方法。
- en: CPU mining
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CPU挖矿
- en: 'Even though not profitable on the main net, CPU mining is still valuable on
    the test network or even a private network to experiment with mining and contract
    deployment. Private and test networks will be discussed with practical examples
    in the next chapter. A geth example is shown on how to start CPU mining here.
    Geth can be started with mine switch in order to start mining:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在主网上不盈利，CPU挖矿仍然在测试网络或甚至私有网络上进行挖掘和合约部署实验中非常有价值。私有和测试网络将在下一章节中通过实际示例进行讨论。此处展示了如何启动CPU挖矿的geth示例。可以通过mine开关启动geth以开始挖矿：
- en: '[PRE3]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'CPU mining can also be started using the web 3 geth console. Geth console can
    be started by issuing the following command:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 web 3 geth 控制台也可以启动 CPU 挖矿。通过发出以下命令可以启动 geth 控制台：
- en: '[PRE4]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After this, the miner can be started by issuing the following command, which
    will return true if successful, or false otherwise. Take a look at the following
    command:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以通过发出以下命令启动挖矿程序，如果成功将返回true，否则返回false。看看下面的命令：
- en: '[PRE5]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding command will start the miner with four threads. Take a look at
    the following command:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将启动带有四个线程的挖矿程序。看看下面的命令：
- en: '[PRE6]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding command will stop the miner. The command will return true if successful.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将停止挖矿程序。如果成功，该命令将返回true。
- en: GPU mining
  id: totrans-453
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GPU挖矿
- en: 'At a basic level, GPU mining can be performed easily by running two commands:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 在基本水平上，通过运行两个命令可以轻松进行GPU挖矿：
- en: '[PRE7]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once geth is up and running and the blockchain is fully downloaded, Ethminer
    can be run in order to start mining. Ethminer is a standalone miner that can also
    be used in the farm mode to contribute to mining pools. It can be downloaded from
    [https://github.com/Genoil/cpp-ethereum/tree/master/releases](https://github.com/Genoil/cpp-ethereum/tree/master/releases):'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦geth运行起来并且区块链完全下载完成，就可以运行Ethminer以开始挖矿。Ethminer是一个独立的挖矿程序，也可以在农场模式下用于贡献到挖矿池。可以从[https://github.com/Genoil/cpp-ethereum/tree/master/releases](https://github.com/Genoil/cpp-ethereum/tree/master/releases)下载：
- en: '[PRE8]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Running with `G` switch assumes that the appropriate graphics card is installed
    and configured correctly. If no appropriate graphics cards are found, ethminer
    will return an error, as shown in the following screenshot:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`G`开关运行假设已安装并正确配置适当的显卡。如果找不到适当的显卡，ethminer会返回错误，如下图所示：
- en: '![GPU mining](img/image_07_013.jpg)'
  id: totrans-459
  prefs: []
  type: TYPE_IMG
  zh: '![GPU挖矿](img/image_07_013.jpg)'
- en: Error in case no appropriate GPUs can be found
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到适当的GPU则出现错误
- en: GPU mining requires an AMD or Nvidia graphics card and an applicable OpenCL
    SDK. For NVidia chipset, it can downloaded from [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads).
    For AMD chipsets, it is available at [http://developer.amd.com/tools-and-sdks/opencl-zone/amd-accelerated-parallel-processing-app-sdk](http://developer.amd.com/tools-and-sdks/opencl-zone/amd-accelerated-parallel-processing-app-sdk).
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: GPU挖矿需要一块AMD或Nvidia显卡和适用的OpenCL SDK。对于Nvidia芯片组，可以从[https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads)下载。对于AMD芯片组，可在[http://developer.amd.com/tools-and-sdks/opencl-zone/amd-accelerated-parallel-processing-app-sdk](http://developer.amd.com/tools-and-sdks/opencl-zone/amd-accelerated-parallel-processing-app-sdk)下载。
- en: Once the graphics cards are installed and configured correctly, the process
    can be started by issuing the `ethminer -G` command.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦显卡安装并正确配置，可以通过发出`ethminer -G`命令启动该进程。
- en: Ethminer can also be used to run benchmarking, as shown in the following screenshot.
    There are two modes that can be invoked for benchmarking. It can either be CPU
    or GPU. The commands are shown here.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: Ethminer 也可以用于运行基准测试，如下图所示。可以调用两种模式进行基准测试。可以是CPU或GPU。命令如下所示。
- en: CPU benchmarking
  id: totrans-464
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CPU基准测试
- en: '[PRE9]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: GPU benchmarking
  id: totrans-466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GPU基准测试
- en: '[PRE10]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following screenshot example is shown for CPU mining benchmarking:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 下图示例展示了CPU挖矿基准测试：
- en: '![GPU benchmarking](img/image_07_014.jpg)'
  id: totrans-469
  prefs: []
  type: TYPE_IMG
  zh: '![GPU基准测试](img/image_07_014.jpg)'
- en: CPU benchmarking
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: CPU基准测试
- en: 'The GPU device to be used can also be specified in the command line:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以在命令行中指定要使用的GPU设备：
- en: '[PRE11]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As GPU mining is implemented using OpenCL AMD, chipset-based GPUs tend to work
    faster as compared to NVidia GPUs. Due to the high memory requirements (DAG creation),
    FPGAs and ASICs will not provide any major advantage over GPUs. This is done on
    purpose in order to discourage the development of specialized hardware for mining.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 由于GPU挖矿是使用OpenCL AMD实现的，基于芯片组的GPU比NVidia GPU工作得更快。由于高内存需求（DAG创建），FPGAs和ASICs不会比GPU提供任何主要优势。这是有意为之，以阻止为挖矿开发专用硬件。
- en: Mining rigs
  id: totrans-474
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挖矿机
- en: As difficulty increased over time for mining Ether, mining rigs with multiple
    GPUs were starting to be built by the miners. A mining rig usually contains around
    five GPU cards, and all of them work in parallel for mining, thus improving the
    chances of finding valid nonces for mining.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: Mining rigs can be built with some effort and are also available commercially
    from various vendors. A typical mining rig configuration includes the components
    discussed in the upcoming sections.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: Motherboard
  id: totrans-477
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A specialized motherboard with multiple PCI-E x1 or x16 slots, for example,
    BIOSTAR Hi-Fi or ASRock H81, is required.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: SSD hard drive
  id: totrans-479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An SSD hard drive is required. The SSD drive is recommended because of its much
    faster performance over the analog equivalent. This will be mainly used to store
    the blockchain.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: GPU
  id: totrans-481
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The GPU is the most important component of the rig as it is the main workhorse
    that will be used for mining. For example, it can be a Sapphire AMD Radeon R9
    380 with 4 GB RAM.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: Linux Ubuntu's latest version is usually chosen as the operating system for
    the rig. There is also another variant of Linux available, called EthOS (available
    at [http://ethosdistro.com/](http://ethosdistro.com/)), that is especially built
    for Ethereum mining and supports mining operations natively.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: Finally, mining software such as Ethminer and geth are installed. Additionally,
    some remote monitoring and administration software is also installed so that rigs
    can be monitored and managed remotely, if required. It is also important to put
    appropriate air conditioning or cooling mechanisms in place as running multiple
    GPUs can generate a lot of heat. This also necessitates the need for using an
    appropriate monitoring software that can alert users if there are any problems
    with the hardware, for example, if the GPUs are overheating.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: '![GPU](img/image_07_015-2.jpg)'
  id: totrans-485
  prefs: []
  type: TYPE_IMG
- en: A mining rig for Ethereum for sale at eBay
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: Mining pools
  id: totrans-487
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many online mining pools that offer Ethereum mining. Ethminer can
    be used to connect to a mining pool using the following command. Each pool publishes
    its own instructions, but generally, the process of connecting to a pool is similar.
    An example from [ethereumpool.co](http://ethereumpool.co) is shown here:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Mining pools](img/image_07_016.jpg)'
  id: totrans-490
  prefs: []
  type: TYPE_IMG
- en: Screenshot of ethminer
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: Clients and wallets
  id: totrans-492
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As Ethereum is under heavy development and evolution, there are many components,
    clients, and tools that have been developed and introduced over the last few years.
    The following is a list of all main components, client software, and tools that
    are available with Ethereum. This list is provided in order to reduce the ambiguity
    around many tools and clients available for Ethereum. The list provided here also
    explains the usage and significance of various components.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: Geth
  id: totrans-494
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the Go implementation of the Ethereum client.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: Eth
  id: totrans-496
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the C++ implementation of the Ethereum client.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: Pyethapp
  id: totrans-498
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the Python implementation of the Ethereum client.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: Parity
  id: totrans-500
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This implementation is built using Rust and developed by EthCore. EthCore is
    a company that works on the development of the parity client. Parity can be downloaded
    from [https://ethcore.io/parity.html](https://ethcore.io/parity.html).
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 此实现是使用Rust构建的，并由EthCore开发。 EthCore是一家致力于开发parity客户端的公司。 Parity可以从[https://ethcore.io/parity.html](https://ethcore.io/parity.html)下载。
- en: Light clients
  id: totrans-502
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轻量级客户端
- en: SPV clients download only a small subset of the blockchain. This allows low
    resource devices, such as mobile phones, embedded devices, or tablets, to be able
    to verify the transactions. A complete ethereum blockchain and node are not required
    in this case and SPV clients can still validate the execution of transactions.
    SPV clients are also called light clients. This idea is similar to bitcoin SPV
    clients. There is a wallet available from Jaxx ([https://jaxx.io/](https://jaxx.io/)
    ), which can be installed on iOS and Android, which provides the **SPV** (**Simple
    Payment Verification**) functionality.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: SPV客户端仅下载区块链的一个小子集。这允许低资源设备，如手机、嵌入式设备或平板电脑，能够验证交易。在这种情况下，不需要完整的以太坊区块链和节点，SPV客户端仍然可以验证交易的执行。SPV客户端也称为轻量级客户端。这个想法类似于比特币SPV客户端。在iOS和Android上可以安装的Jaxx提供了一个钱包，它提供了**SPV**（**简单支付验证**）功能，网址是[https://jaxx.io/](https://jaxx.io/)。
- en: Installation
  id: totrans-504
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: The following installation procedure describes the installation of various Ethereum
    clients on Ubuntu systems. Instructions for other operating systems are available
    on Ethereum Wikis. As Ubuntu systems will be used in examples later on, only installation
    on Ubuntu has been described here.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的安装过程描述了在Ubuntu系统上安装各种以太坊客户端的过程。其他操作系统的说明可以在以太坊维基上找到。由于后面的示例将使用Ubuntu系统，因此这里仅描述了在Ubuntu上的安装。
- en: '**Geth client** can be installed by using the following command on an Ubuntu
    system:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geth客户端**可以通过在Ubuntu系统上使用以下命令安装：'
- en: '[PRE13]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After installation is completed. Geth can be launched simply by issuing the
    `geth` command at the command prompt, as it comes preconfigured with all the required
    parameters to connect to the live Ethereum network (mainnet):'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 完成安装后。只需在命令提示符处发出`geth`命令，即可启动Geth，因为它预先配置了连接到现场以太网的所有必需参数：
- en: '[PRE14]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Eth installation
  id: totrans-510
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Eth安装
- en: 'Eth is the C++ implementation of the Ethereum client and can be installed using
    the following command on Ubuntu:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: Eth是以太坊客户端的C ++实现，可以使用以下命令在Ubuntu上安装：
- en: '[PRE15]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Mist browser
  id: totrans-513
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mist浏览器
- en: Mist browser is a user-friendly interface for end users with a feature-rich
    graphical user interface that is used to browse DAPPS and for account management
    and contract management. Mist installation is covered in the next chapter.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: Mist浏览器是一个用户友好的界面，用于最终用户，具有功能丰富的图形用户界面，用于浏览DAPPS以及账户和合同管理。 Mist的安装在下一章中介绍。
- en: When Mist is launched for the first time, it will initialize geth in the background
    and will sync with the network. It can take from a few hours to a few days depending
    on the speed and type of the network to fully synchronize with the network. If
    TestNet is used, then syncing completes relatively faster as the size of TestNet
    (Ropsten) is not as big as MainNet. More information on how to connect to TestNet
    will be provided in the next chapter.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次启动Mist时，它将在后台初始化geth并与网络同步。根据网络的速度和类型，完全与网络同步可能需要几个小时到几天不等的时间。如果使用TestNet，则同步相对较快，因为TestNet（Ropsten）的大小不如MainNet大。有关如何连接到TestNet的更多信息将在下一章中提供。
- en: '![Mist browser](img/image_07_017.jpg)'
  id: totrans-516
  prefs: []
  type: TYPE_IMG
  zh: '![Mist浏览器](img/image_07_017.jpg)'
- en: Mist browser starting up and syncing with the main network
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: Mist浏览器启动并与主网络同步
- en: Mist browser is not a wallet; in fact, it is a browser of DAPPS and provides
    a user-friendly user interface for the creation and management of contracts, accounts,
    and browsing decentralized applications. Ethereum wallet is a DAPP that is released
    with Mist.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: Mist浏览器不是一个钱包; 实际上，它是一个DAPPS浏览器，并为创建和管理合同、账户和浏览去中心化应用程序提供了用户友好的用户界面。以太坊钱包是随Mist一起发布的DAPP。
- en: Wallet is a generic program that can store private keys and associated accounts
    and, based on the addresses stored within it, it can compute the existing balance
    of Ether associated with the addresses by querying the blockchain.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 钱包是一个通用程序，可以存储私钥和关联账户，并且根据其中存储的地址，可以通过查询区块链计算与这些地址相关联的以太的现有余额。
- en: Other wallets include but are not limited to MyEtherWallet, which is an open
    source ether wallet developed in JavaScript. MyEtherWallet runs in the client
    browser. This is available at [https://www.myetherwallet.com](https://www.myetherwallet.com).
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 其他钱包包括但不限于 MyEtherWallet，这是一个用 JavaScript 开发的开源以太坊钱包。MyEtherWallet 在客户端浏览器中运行。该网址为
    [https://www.myetherwallet.com](https://www.myetherwallet.com)。
- en: Icebox is developed by Consensys. This is a cold storage browser that provides
    secure storage of Ether. It depends on whether the computer on which Icebox is
    run is connected to the Internet or not.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: Icebox 由 Consensys 开发。这是一个冷存储浏览器，提供以太币的安全存储。这取决于运行 Icebox 的计算机是否连接到互联网。
- en: 'Various wallets are available for ethereum for desktop, mobile, and web platforms.
    A popular Ethereum iOS Wallet named Jaxx is shown in the following image:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊有多种钱包可供桌面、移动和 Web 平台使用。一个名为 Jaxx 的流行 Ethereum iOS 钱包如下图所示：
- en: '![Mist browser](img/image_07_018.jpg)'
  id: totrans-523
  prefs: []
  type: TYPE_IMG
  zh: '![Mist 浏览器](img/image_07_018.jpg)'
- en: Jaxx Ethereum wallet for iOS showing transactions and current balance
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: Jaxx 以太坊 iOS 钱包显示交易和当前余额
- en: 'Once the blockchain is synchronized, Mist will launch and show the following
    interface. In this example, four accounts are displayed with no balance:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链同步完成后，Mist 将启动并显示以下界面。在本示例中，显示了四个账户，但没有余额：
- en: '![Mist browser](img/image_07_019.jpg)'
  id: totrans-526
  prefs: []
  type: TYPE_IMG
  zh: '![Mist 浏览器](img/image_07_019.jpg)'
- en: Mist browser
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: Mist 浏览器
- en: A new accounts can be created in a number of ways. In the Mist browser, it can
    be created by clicking on the **Accounts** menu and selecting the **New account**
    or by clicking on the **Add account** option in the Mist Accounts Overview screen.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 新账户可以通过多种方式创建。在 Mist 浏览器中，可以通过单击**账户**菜单并选择**新建账户**，或者在 Mist 账户概览屏幕上单击**添加账户**选项来创建。
- en: '![Mist browser](img/image_07_020.jpg)'
  id: totrans-529
  prefs: []
  type: TYPE_IMG
  zh: '![Mist 浏览器](img/image_07_020.jpg)'
- en: Add new account
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新账户
- en: The account will need a password to be set, as shown in the preceding figure;
    once the account is set up, it will be displayed in the accounts overview section
    of the Mist browser.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 账户需要设置密码，如上图所示；一旦账户设置完成，它将显示在 Mist 浏览器的账户概览部分。
- en: Accounts can also be added via the command line using the geth or parity command-line
    interface. This process is shown in the next section.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过命令行使用 geth 或 parity 命令行界面添加账户。此过程在下一节中显示。
- en: Geth
  id: totrans-533
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Geth
- en: '[PRE16]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The list of accounts can be shown using geth using the following command:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令使用 geth 显示账户列表：
- en: '[PRE17]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The geth console
  id: totrans-537
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: geth 控制台
- en: The geth JavaScript console can be used to perform various functions. For example,
    an account can be created by attaching geth.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 geth JavaScript 控制台执行各种功能。例如，可以通过附加 geth 创建账户。
- en: 'Geth can be attached with the running daemon, as shown in the following figure:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将 Geth 附加到运行的守护程序中，如下图所示：
- en: '![The geth console](img/image_07_021.jpg)'
  id: totrans-540
  prefs: []
  type: TYPE_IMG
  zh: '![geth 控制台](img/image_07_021.jpg)'
- en: Once geth is successfully attached with the running instance of the ethereum
    client (in this case, parity), it will display command prompt '*>*', which provides
    an interactive command line interface to interact with the ethereum client using
    JavaScript notations.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦成功将 geth 附加到以太坊客户端的运行实例（在本例中为 parity），它将显示命令提示符'*>*'，该提示符提供了一个交互式命令行界面，以使用
    JavaScript 符号与以太坊客户端进行交互。
- en: 'For example, a new account can be added using the following command in the
    geth console:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以使用以下命令在 geth 控制台中添加新账户：
- en: '[PRE18]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The list of accounts can also be displayed similarly:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 可以类似地显示账户列表：
- en: '[PRE19]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Funding the account with bitcoin
  id: totrans-546
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用比特币为账户充值
- en: This option is available with the Mist browser by clicking on the account and
    then selecting the option to fund the account. The backend engine used for this
    operation is shapeshift.io and can be used to fund the account from bitcoin or
    other currencies, including the fiat currency option as well.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选项在 Mist 浏览器中可用，通过单击账户然后选择资助账户选项。此操作使用的后端引擎是 shapeshift.io，可以用来从比特币或其他货币（包括法定货币选项）资助账户。
- en: Once the exchange is completed, the transferred Ether will be available in the
    account.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 交易完成后，转移的以太币将出现在账户中。
- en: '![Funding the account with bitcoin](img/image_07_022.jpg)'
  id: totrans-549
  prefs: []
  type: TYPE_IMG
  zh: '![使用比特币为账户充值](img/image_07_022.jpg)'
- en: Parity installation
  id: totrans-550
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Parity 安装
- en: 'Parity is another implementation of the Ethereum client. It has been written
    using the Rust programming language. The main aim behind the development of parity
    is high performance, small footprint, and reliability. Parity can be installed
    using the following commands on an Ubuntu or Mac system:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: Parity 是以太坊客户端的另一个实现。它是使用 Rust 编程语言编写的。parity 开发的主要目标是高性能、小占地面积和可靠性。在 Ubuntu
    或 Mac 系统上可以使用以下命令安装 parity：
- en: '[PRE20]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will initiate the download and installation of the parity client. After
    the installation of parity is completed, the installer will also offer the installation
    of the netstats client. The netstat client is a daemon that runs in the background
    and collects important statistics and displays them on [stats.ethdev.com](http://stats.ethdev.com).
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动 parity 客户端的下载和安装。安装 parity 完成后，安装程序还将提供安装 netstats 客户端的选项。netstat 客户端是在后台运行的守护程序，会收集重要统计信息并在
    [stats.ethdev.com](http://stats.ethdev.com) 上显示。
- en: 'A sample installation of parity is shown in the following screenshot:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中展示了 parity 的一个示例安装情况，如下截图所示：
- en: '![Parity installation](img/image_07_023.jpg)'
  id: totrans-555
  prefs: []
  type: TYPE_IMG
  zh: '![Parity 安装](img/image_07_023.jpg)'
- en: Once the installation is completed successfully, the following message is displayed.
    Ethereum parity node can then be started using `parity -j`. If compatibility with
    geth is required in order to use Ethereum wallet (Mist browser) with parity, then
    the `parity -geth` command should be used to run parity. This will run parity
    in compatibility mode with the geth client and will consequently allow Mist to
    run on top of parity.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功后，将显示以下消息。然后可以使用 `parity -j` 启动以太坊 parity 节点。如果需要与 geth 兼容以便在 parity 中使用以太坊钱包（Mist
    浏览器），则应使用 `parity -geth` 命令运行 parity。这将以 geth 客户端的兼容模式运行 parity，并允许 Mist 在 parity
    之上运行。
- en: '![Parity installation](img/image_07_024.jpg)'
  id: totrans-557
  prefs: []
  type: TYPE_IMG
  zh: '![Parity 安装](img/image_07_024.jpg)'
- en: Parity installation
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: parity 安装
- en: 'The client can optionally be listed on [https://ethstats.net/](https://ethstats.net/).
    An example is shown as follows:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端还可以选择在 [https://ethstats.net/](https://ethstats.net/) 上列出。示例如下所示：
- en: '![Parity installation](img/image_07_025.jpg)'
  id: totrans-560
  prefs: []
  type: TYPE_IMG
  zh: '![Parity 安装](img/image_07_025.jpg)'
- en: All connected clients are listed on the ethstats.net, as shown in the following
    screenshot. These clients are listed with relevant attributes, such as the node
    name, node type, latency, mining status, number of peers, number of pending transactions,
    last block, difficultly, block transactions, and number of Uncles.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 所有连接的客户端都会显示在 ethstats.net 上，如下截图所示。这些客户端会列出相关属性，例如节点名称、节点类型、延迟、挖矿状态、对等节点数量、待处理交易数量、上一个区块、难度、区块交易量和叔块数量。
- en: '![Parity installation](img/image_07_026.jpg)'
  id: totrans-562
  prefs: []
  type: TYPE_IMG
  zh: '![Parity 安装](img/image_07_026.jpg)'
- en: Client listed on [https://ethstats.net/](https://ethstats.net/)
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端在 [https://ethstats.net/](https://ethstats.net/) 上列出。
- en: Parity also offers a user-friendly web interface from where various tasks, such
    as account management, address book management, DAPP management, contract management,
    and status and signer operations, can be managed.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: Parity 还提供了一个用户友好的 web 界面，可以在该界面上管理各种任务，如账户管理、地址簿管理、DAPP 管理、合约管理以及状态和签名者操作。
- en: 'This is accessible by issuing the following command:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过发出以下命令访问此内容：
- en: '[PRE21]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This will bring up the interface shown as follows:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出以下界面：
- en: '![Parity installation](img/image_07_027.jpg)'
  id: totrans-568
  prefs: []
  type: TYPE_IMG
  zh: '![Parity 安装](img/image_07_027.jpg)'
- en: Parity user interface.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: parity 用户界面。
- en: 'If parity is running in the geth compatibility mode, the parity UI is disabled.
    In order to enable the UI along with geth compatibility, the following command
    can be used:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 parity 正在以 geth 兼容模式运行，则会禁用 parity UI。为了同时启用 UI 和 geth 兼容性，可以使用以下命令：
- en: '[PRE22]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding command will start parity in the geth compatibility mode and also
    enable the web user interface.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将以 geth 兼容模式启动 parity，并启用 web 用户界面。
- en: Creating accounts using the parity command line
  id: totrans-573
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 parity 命令行创建账户
- en: 'The following command can be used to create a new account using parity:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令使用 parity 创建新账户：
- en: '[PRE23]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Trading and investment
  id: totrans-576
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易与投资
- en: Ether is available at various exchanges for buying and selling. The current
    market cap of Ethereum is £680,277,967 at the time of writing this, and an Ether
    is worth £7.89\. Recently, the price has been very volatile and has dropped down
    significantly due to recent Ethereum attacks and subsequent forks on the Ethereum
    network.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 以太币可在各个交易所进行买卖。撰写本文时，以太坊的当前市值为£680,277,967，一枚以太币的价值为£7.89。最近，由于最近以太坊遭受攻击以及随后在以太坊网络上进行的分叉，价格非常波动且显著下降。
- en: 'The following chart shows the historical market capitalization details:'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了历史市值的详细信息：
- en: '![Trading and investment](img/image_07_028.jpg)'
  id: totrans-579
  prefs: []
  type: TYPE_IMG
  zh: '![交易与投资](img/image_07_028.jpg)'
- en: Ether historical market capitalization (source Etherscan.io)
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 以太历史市值（来源Etherscan.io）
- en: Ether can either be purchased on various exchanges, or it can be mined. There
    are online services available, such as [shapeshift.io](http://shapeshift.io),
    that allow conversion from one currency to another.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 以太可以在各种交易所购买，也可以进行挖掘。有一些在线服务，如[shapeshift.io](http://shapeshift.io)，可以实现货币间的转换。
- en: Various online exchanges, such as kraken, coinbase, and many more, offer ether
    to be purchased for fiat currency using credit cards or another virtual currency,
    such as bitcoin.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 各种在线交易所，如kraken、coinbase等，提供以太以便用信用卡或其他虚拟货币，如比特币购买。
- en: The yellow paper
  id: totrans-583
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 黄皮书
- en: The Ethereum yellow paper has been written by *Dr. Gavin Wood* and serves as
    a formal definition of the Ethereum protocol. Anyone can implement an Ethereum
    client by following the protocol specifications defined in the paper. This paper
    can be somewhat difficult to read, especially for the readers who do not have
    a background in algebra or mathematics and are not familiar with mathematical
    notations.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊黄皮书由*加文·伍德博士*撰写，作为以太坊协议的正式定义。任何人都可以按照该论文中定义的协议规范来实现以太坊客户端。这篇论文对于那些没有代数或数学背景，不熟悉数学符号的读者来说可能有些难以理解。
- en: The list of all symbols with their meanings used in the paper is provided here
    with the anticipation that it will make reading the paper easier. Once symbol
    meanings are known, it becomes quite easy to understand and appreciate the concepts
    and specifications described in the yellow paper.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 论文中提供了所有符号及其意义的列表，以便更容易阅读论文。一旦了解了符号的含义，就会很容易理解和欣赏黄皮书中描述的概念和规范。
- en: Useful symbols
  id: totrans-586
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有用的符号
- en: '| **Symbol** | **Meaning** | **Symbol** | **Meaning** |'
  id: totrans-587
  prefs: []
  type: TYPE_TB
  zh: '| **符号** | **意义** | **符号** | **意义** |'
- en: '| ≡ | Is defined as | ≤ | Less than or equal to |'
  id: totrans-588
  prefs: []
  type: TYPE_TB
  zh: '| ≡ | 定义为 | ≤ | 小于或等于 |'
- en: '| = | Is equal to | ![Useful symbols](img/image_07_029.jpg) | Sigma, World
    state |'
  id: totrans-589
  prefs: []
  type: TYPE_TB
  zh: '| = | 等于 | ![有用的符号](img/image_07_029.jpg) | Sigma，世界状态 |'
- en: '| ≠ | Is not equal to | ![Useful symbols](img/image_07_030.jpg) | Mu, Machine
    state |'
  id: totrans-590
  prefs: []
  type: TYPE_TB
  zh: '| ≠ | 不等于 | ![有用的符号](img/image_07_030.jpg) | Mu，机器状态 |'
- en: '| ║...║ | Length of | ![Useful symbols](img/image_07_031.jpg) | Upsilon, Ethereum
    state transition function |'
  id: totrans-591
  prefs: []
  type: TYPE_TB
  zh: '| ║...║ | 长度为 | ![有用的符号](img/image_07_031.jpg) | Upsilon，以太坊状态转换函数 |'
- en: '| ![Useful symbols](img/image_07_032.jpg) | Is an element of | ![Useful symbols](img/image_07_033.jpg)
    | Block level state transition function |'
  id: totrans-592
  prefs: []
  type: TYPE_TB
  zh: '| ![有用的符号](img/image_07_032.jpg) | 是元素 | ![有用的符号](img/image_07_033.jpg) | 区块级状态转换函数
    |'
- en: '| ![Useful symbols](img/image_07_034.jpg) | Is not an element of | . | Sequence
    concatenation |'
  id: totrans-593
  prefs: []
  type: TYPE_TB
  zh: '| ![有用的符号](img/image_07_034.jpg) | 不是元素 | . | 序列连接 |'
- en: '| ![Useful symbols](img/image_07_035.jpg) | For all | ![Useful symbols](img/image_07_036.jpg)
    | There exists |'
  id: totrans-594
  prefs: []
  type: TYPE_TB
  zh: '| ![有用的符号](img/image_07_035.jpg) | 对于所有 | ![有用的符号](img/image_07_036.jpg) |
    存在 |'
- en: '| ![Useful symbols](img/image_07_037.jpg) | Union | ᴧ | Contract creation function
    |'
  id: totrans-595
  prefs: []
  type: TYPE_TB
  zh: '| ![有用的符号](img/image_07_037.jpg) | 并集 | ᴧ | 合约创建函数 |'
- en: '| ![Useful symbols](img/image_07_038.jpg) | Logical AND | ![Useful symbols](img/image_07_039.jpg)
    | Increment |'
  id: totrans-596
  prefs: []
  type: TYPE_TB
  zh: '| ![有用的符号](img/image_07_038.jpg) | 逻辑与 | ![有用的符号](img/image_07_039.jpg) | 递增
    |'
- en: '| : | Such that |  |  |'
  id: totrans-597
  prefs: []
  type: TYPE_TB
  zh: '| : | 这样的 |  |  |'
- en: '| {} | Set |  |  |'
  id: totrans-598
  prefs: []
  type: TYPE_TB
  zh: '| {} | 集合 |  |  |'
- en: '| () | Function of tuple |  |  |'
  id: totrans-599
  prefs: []
  type: TYPE_TB
  zh: '| () | 元组函数 |  |  |'
- en: '| [] | Array indexing |  |  |'
  id: totrans-600
  prefs: []
  type: TYPE_TB
  zh: '| [] | 数组索引 |  |  |'
- en: '| ![Useful symbols](img/image_07_040.jpg) | Logical OR |  |  |'
  id: totrans-601
  prefs: []
  type: TYPE_TB
  zh: '| ![有用的符号](img/image_07_040.jpg) | 逻辑或 |  |  |'
- en: '| > | Is greater than |  |  |'
  id: totrans-602
  prefs: []
  type: TYPE_TB
  zh: '| > | 大于 |  |  |'
- en: '| + | Addition |  |  |'
  id: totrans-603
  prefs: []
  type: TYPE_TB
  zh: '| + | 加法 |  |  |'
- en: '| - | Subtraction |  |  |'
  id: totrans-604
  prefs: []
  type: TYPE_TB
  zh: '| - | 减法 |  |  |'
- en: '| ∑ | Summation |  |  |'
  id: totrans-605
  prefs: []
  type: TYPE_TB
  zh: '| ∑ | 求和 |  |  |'
- en: '| { | Describing various cases of if , otherwise |  |  |'
  id: totrans-606
  prefs: []
  type: TYPE_TB
  zh: '| { | 描述if，otherwise的各种情况 |  |  |'
- en: '| ![Useful symbols](img/image_07_041.jpg) | Floor, lowest element |  |  |'
  id: totrans-607
  prefs: []
  type: TYPE_TB
  zh: '| ![有用的符号](img/image_07_041.jpg) | 下取整，最低元素 |  |  |'
- en: '| ![Useful symbols](img/image_07_042.jpg) | Ceiling, highest element |  |  |'
  id: totrans-608
  prefs: []
  type: TYPE_TB
  zh: '| ![有用的符号](img/image_07_042.jpg) | 上取整，最高元素 |  |  |'
- en: '| ![Useful symbols](img/image_07_043.jpg) | No of bytes |  |  |'
  id: totrans-609
  prefs: []
  type: TYPE_TB
  zh: '| ![有用的符号](img/image_07_043.jpg) | 字节数 |  |  |'
- en: '| ![Useful symbols](img/image_07_044.jpg) | Exclusive OR |  |  |'
  id: totrans-610
  prefs: []
  type: TYPE_TB
  zh: '| ![有用的符号](img/image_07_044.jpg) | 异或 |  |  |'
- en: '| (a,b) | Real numbers >= a and < b |  |  |'
  id: totrans-611
  prefs: []
  type: TYPE_TB
  zh: '| (a,b) | 实数 >= a 且 < b |  |  |'
- en: '| ![Useful symbols](img/image_07_045.jpg) | Empty set, null |  |  |'
  id: totrans-612
  prefs: []
  type: TYPE_TB
  zh: '| ![有用的符号](img/image_07_045.jpg) | 空集，空值 |  |  |'
- en: The Ethereum network
  id: totrans-613
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊网络
- en: The Ethereum network is a peer-to-peer network where nodes participate in order
    to maintain the blockchain and contribute to the consensus mechanism. Networks
    can be divided into three types, based on requirements and usage.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊网络是一个点对点网络，节点参与其中以维护区块链并促进共识机制。根据需求和使用情况，网络可以分为三种类型。
- en: MainNet
  id: totrans-615
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MainNet
- en: MainNet is the current live network of ethereum. The current version of MainNet
    is homestead.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: MainNet是以太坊当前的实时网络。MainNet的当前版本是Homestead。
- en: TestNet
  id: totrans-617
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TestNet
- en: TestNet is also called Ropsten and is the test network for the Ethereum blockchain.
    This blockchain is used to test smart contracts and DApps before being deployed
    to the production live blockchain. Moreover, being a test network, it allows experimentation
    and research.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: TestNet也称为Ropsten，是以太坊区块链的测试网络。该区块链用于测试智能合约和DApp，然后再部署到生产实时区块链。此外，作为测试网络，它允许实验和研究。
- en: Private net(s)
  id: totrans-619
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 私有网络
- en: As the name suggests, this is the private network that can be created by generating
    a new genesis block. This is usually the case in distributed ledger networks,
    where a private group of entities start their own blockchain and use it as a permissioned
    blockchain.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，这是可以通过生成新的创世块来创建的私有网络。这通常是分布式账本网络中的情况，在该网络中，一组私有实体启动自己的区块链并将其用作权限控制的区块链。
- en: More discussion on how to connect to test net and how to set up private nets
    will be discussed in the next chapter.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何连接测试网络和如何设置私有网络的更多讨论将在下一章中进行。
- en: Supporting protocols
  id: totrans-622
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持的协议
- en: There are various supporting protocols that are in development in order to support
    the complete decentralized ecosystem. This includes whisper and Swarm protocols.
    In addition to the contracts layer, which is the core blockchain layer, there
    are additional layers that need to be decentralized in order to achieve a complete
    decentralized ecosystem. This includes decentralized storage and decentralized
    messaging. Whisper, being developed for ethereum, is a decentralized messaging
    protocol, whereas Swarm is a decentralized storage protocol. Both of these technologies
    are being developed currently and have been envisaged to provide the basis for
    a fully decentralized web. In the following section, both technologies are discussed
    in detail.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种各样的支持协议正在开发中，以支持完全去中心化的生态系统。这包括whisper和Swarm协议。除了合同层（即核心区块链层）之外，还有其他需要去中心化的层，以实现完全去中心化的生态系统。这包括去中心化存储和去中心化消息传递。Whisper正在为以太坊开发，是一种去中心化的消息传递协议，而Swarm是一种去中心化的存储协议。这两种技术目前正在开发中，并被设想为提供完全去中心化网络的基础。在接下来的部分中，将详细讨论这两种技术。
- en: Whisper
  id: totrans-624
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Whisper
- en: Whisper provides decentralized peer-to-peer messaging capabilities to the ethereum
    network. In essence, whisper is a communication protocol that nodes use in order
    to communicate with each other. The data and routing of messages are encrypted
    within whisper communications. Moreover, it is designed to be used for smaller
    data transfers and in scenarios where real-time communication is not required.
    Whisper is also designed to provide a communication layer that cannot be traced
    and provides "dark communication" between parties. Blockchain can be used for
    communication, but that is expensive and consensus is not really required for
    messages exchanged between nodes. Therefore, whisper can be used as a protocol
    that allows
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: Whisper为以太坊网络提供了去中心化的点对点消息传递能力。实质上，whisper是一种通信协议，节点使用它来相互通信。消息的数据和路由在whisper通信中是加密的。此外，它被设计用于较小的数据传输和不需要实时通信的场景。Whisper还被设计为提供一个通信层，不能被追踪，并为各方提供“暗通信”。区块链可以用于通信，但这很昂贵，而且节点之间交换的消息并不真正需要共识。因此，whisper可以用作允许
- en: Whisper is already available with geth and can be enabled using the `--shh`
    option while running the geth ethereum client.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: Whisper已经与geth一起提供，并可以在运行geth以太坊客户端时使用`--shh`选项启用。
- en: Swarm
  id: totrans-627
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Swarm
- en: Swarm is being developed as a distributed file storage platform. It is a decentralized,
    distributed, and peer-to-peer storage network. Files in this network are addressed
    by the hash of their content. This is in contrast to the traditional centralized
    services, where storage is available at a central location only. This is developed
    as a native base layer service for the Ethereum web 3.0 stack. Swarm is integrated
    with DevP2P, which is the multiprotocol network layer of Ethereum. Swarm is envisaged
    to provide a **DDOS** (**Distributed Denial of service**)-resistant and fault-tolerant
    distributed storage layer for Ethereum Web 3.0\. Both whisper and Swarm are under
    development and, even though Proof of Concept and alpha code has been released
    for Swarm, there is no stable production version available yet.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: Swarm 正在作为一个分布式文件存储平台进行开发。它是一个去中心化、分布式和点对点的存储网络。在该网络中，文件通过其内容的哈希进行寻址。这与传统的集中式服务形成对比，其中存储仅在中央位置可用。这是作为以太坊
    Web 3.0 栈的本地基础层服务开发的。Swarm 与 Ethereum 的多协议网络层 DevP2P 集成。Swarm 设想为以太坊 Web 3.0 提供一个**DDOS**（分布式拒绝服务）-抵抗和容错的分布式存储层。尽管
    Swarm 的概念验证和 alpha 代码已发布，但尚无稳定的生产版本可用。
- en: 'The following figure gives a high level overview of how Swarm and whisper fit
    together and work with blockchain:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 下图概述了 Swarm 和 Whisper 如何结合并与区块链配合工作的高层次概述：
- en: '![Swarm](img/B05975_07_28.jpg)'
  id: totrans-630
  prefs: []
  type: TYPE_IMG
  zh: '![Swarm](img/B05975_07_28.jpg)'
- en: Diagrams shows blockchain, whisper and Swarm
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 图表展示了区块链、Whisper 和 Swarm。
- en: Applications developed on Ethereum
  id: totrans-632
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在以太坊上开发的应用程序。
- en: There are various implementations of DAOs and smart contracts in Ethereum, most
    notably, *the DAO*, which was recently hacked and required a hard fork in order
    for funds to be recovered. The DAO was created to serve as a decentralized platform
    to collect and distribute investments.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊上有各种 DAO 和智能合约的实现，其中最显著的是*DAO*，它最近被黑客攻击，需要进行硬分叉才能恢复资金。DAO 被创建为一个分散的平台，用于收集和分发投资。
- en: Augur is another DAPP that has been implemented on Ethereum, which is a decentralized
    prediction market. Various other decentralized applications are listed on [http://dapps.ethercasts.com/](http://dapps.ethercasts.com/).
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: Augur 是另一个在以太坊上实施的 DAPP，它是一个去中心化的预测市场。各种其他去中心化应用程序列在 [http://dapps.ethercasts.com/](http://dapps.ethercasts.com/)
    上。
- en: Scalability and security issues
  id: totrans-635
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可扩展性和安全性问题。
- en: Scalability in any blockchain is a fundamental issue. Security is also of paramount
    importance. Issues such as privacy and confidentiality have caused some adaptability
    issues, especially in the financial sector. However, a great deal of research
    is being conducted in these areas. A more detailed discussion regarding all blockchain-related
    issues will be carried out in [Chapter 12](ch12.html "Chapter 12. Scalability
    and Other Challenges"), *Scalability and other challenges*.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链中的可扩展性是一个基本问题。安全性也至关重要。隐私和机密性等问题已经导致了一些适应性问题，特别是在金融行业。然而，这些领域正在进行大量的研究。关于所有与区块链相关的问题的更详细讨论将在[第
    12 章](ch12.html "Chapter 12. Scalability and Other Challenges") 中进行，*可扩展性和其他挑战*。
- en: Summary
  id: totrans-637
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter started with a discussion on the history of Ethereum, the motivation
    behind Ethereum development, and Ethereum clients. Then, you were introduced to
    the core concepts of the Ethereum blockchain, such as state machine model, world
    and machine state, accounts, and types of accounts. Moreover, a detailed introduction
    to the core components of the **Ethereum virtual machine** (**EVM**) was also
    presented. Other concepts such as blocks, block structure, gas, and messages were
    also introduced and discussed in detail. The later sections of the chapter introduced
    the practical installation and management of ethereum clients. Two most popular
    clients, geth and parity, were discussed. Further development-specific discussion
    on these clients will be carried out in the next chapter, where development using
    Ethereum is discussed. Finally, supporting protocols and topics related to challenges
    faced by Ethereum were presented. Ethereum is under continuous development and
    new improvements are being made by a dedicated community of developers regularly.
    Ethereum improvement proposals, available at [https://github.com/ethereum/EIPs](https://github.com/ethereum/EIPs),
    are also an indication of the magnitude of research and keen interest by the community
    in this technology. Moreover, a recently launched initiative, **Enterprise Ethereum
    Alliance** (**EAA**) is aiming to develop enterprise grade Ethereum platform which
    will be capable of meeting enterprise level business requirements. With research
    being carried out on topics such as scalability, optimization, throughput, capacity,
    and security, it is envisaged that over time, Ethereum will evolve into a more
    robust, user-friendly, and stable blockchain ecosystem.
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 本章开始讨论了以太坊的历史，以太坊开发背后的动机以及以太坊客户端。然后，您被介绍了以太坊区块链的核心概念，如状态机模型、世界和机器状态、账户以及账户类型。此外，还详细介绍了**以太坊虚拟机**（**EVM**）的核心组件。其他概念，如区块、区块结构、Gas
    和消息也被详细介绍和讨论。本章的后续部分介绍了以太坊客户端的实际安装和管理。其中讨论了两个最流行的客户端，geth 和 parity。对这些客户端的进一步开发特定讨论将在下一章进行，该章将讨论使用以太坊进行开发。最后，还介绍了与以太坊面临的挑战相关的支持协议和主题。以太坊正在不断发展，并且由一群专注的开发者社区定期进行改进。以太坊改进提案，可在
    [https://github.com/ethereum/EIPs](https://github.com/ethereum/EIPs) 获取，也是社区对这项技术研究和浓厚兴趣的体现。此外，最近推出的**企业以太坊联盟**（**EAA**）旨在开发符合企业级业务需求的企业级以太坊平台。随着对可扩展性、优化、吞吐量、容量和安全性等主题的研究，预计以太坊将会随着时间的推移演变为更健壮、更用户友好和更稳定的区块链生态系统。
