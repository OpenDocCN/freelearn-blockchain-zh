- en: Ethereum Outside the PC/Web Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we''ve looked at using Ethereum on your own personal computers. This
    chapter takes a look at the uses of Ethereum in various other applications: smartphones,
    being the most commonly use electronic device, are one of them. The current growth
    of technology demands an automatic system that requires us to implement the **Internet
    of Things** (**IoT**). This chapter focuses on the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum outside the browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum and IoT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum and smartphone applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further steps and resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are going to have a look at how people use Ethereum outside the browser,
    how people use Ethereum as the backbone of IoT, and how you can work with physical
    components in the blockchain. In addition, we will have a look at how you can
    use Ethereum in smartphone applications. We'll also discuss some further steps
    and resources that you can use. So let's get started by looking at how you can
    use Ethereum outside the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum outside the browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will teach us to work with Ethereum outside the browser. Standard
    libraries that can be used on Java, Python, Go, or .NET have been developed by
    the Ethereum team. These are accessible directly from GitHub at [https://github.com/ethereum](https://github.com/ethereum).
  prefs: []
  type: TYPE_NORMAL
- en: One essential feature that you need in order to use Ethereum outside your browser
    is a connection to the Ethereum network. This connection can be direct—that is,
    connected directly to your application—or you can use a relay server. Even though
    using a relay server is not an optimal option, it is completely possible. To use
    a relay server, you first need to have a server of your own that is centralized
    in nature and only accepts presigned transactions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another requirement that is necessary for using Ethereum outside your browser
    is the Ethereum library of the language that you will be using to develop it.
    This is optional because we always start any transaction with raw data. To get
    a transaction going on the Ethereum network, we need to encode the raw data and
    assign a private key to it. The transaction is protected from modification because
    it is signed with a private key. After this, you can send it to the network. This
    can be done with the help of a relay server. There is some selective muting that
    takes place, and hence it is a more reliable option to make sure that you send
    the transactions to the networks by yourself. The following links can be used
    to do this, depending upon the software that you are using:'
  prefs: []
  type: TYPE_NORMAL
- en: If you are a Python user, the `Web3.py` library can be used. It is freely available
    at [https://github.com/ethereum/web3.py](https://github.com/ethereum/web3.py).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are an avid Java user, the Java library is available on the Web3J GitHub
    account, which can be found at [https://github.com/web3j/web3j](https://github.com/web3j/web3j).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For any other implementations, you can find the libraries under the Ethereum
    GitHub account at [https://github.com/ethereum/](https://github.com/ethereum/). Golem
    is a great example of using Ethereum outside your browser. We have already taken
    a look at this in the first chapter. Golem computes off-chain, but verifies all
    the computing that has been done on-chain. This allows a massive amount of distributed
    computing power. For further information, you can refer to the Golem Github page
    and check out the codes in the repository at [https://github.com/golemfactory/golem](https://github.com/golemfactory/golem).
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum and IoT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to take a look at Ethereum and how it helps propagate
    the IoT. In my personal opinion, Ethereum is the perfect backbone for IoT. This
    is because of two factors: dataflow and security. Data is spread out across the
    network, which is the most basic concept of IoT; this unhindered and smooth flow
    of data is an essential factor in using Ethereum to help build the IoT. Also,
    every device has its own private key that enhances the security factor. The combination
    of these two elements opens up a lot of new possibilities.'
  prefs: []
  type: TYPE_NORMAL
- en: Let us look at a case study involving the charging of electric vehicles. At
    this moment, they are not many electric vehicles or charging stations. There is
    a high possibility that all vehicles will run on electricity in the near future.
    This would mean that more charging stations will be placed at many more locations.
    Let us consider a scenario where there are charging stations at a supermarket.
    It wouldn't be feasible to provide this facility for free. To make this process
    easier, the car could pay for the service directly. How does one do this?
  prefs: []
  type: TYPE_NORMAL
- en: There have to be two smart meters, each with their own private keys. One is
    on the charging station while the other one is on the car. The owner/user of the
    car needs to add some ethers to the address that is associated with the private
    key of the car. When the car requests electricity at a charging station, this
    would be added to the smart contract that is in charge of this transaction. The
    smart meter at the charging station would track the charge that has been consumed
    by the car and charge it accordingly. The amount here would be paid directly.
    The owner of the charging station would then withdraw the ethers as required.
  prefs: []
  type: TYPE_NORMAL
- en: This whole scenario, though hypothetical for now, has some special considerations.
    Both the car and charging station will need a computer because they each need
    to have a private key. There also needs to be a working internet connection and
    some tamper proof smart meters. Once the data is on the blockchain, no one can
    tamper with it, as it is all a part of public records. Even if the tamper proof
    meters have a flaw, it will be displayed publicly. Another way to avoid fraud
    would be to register the car's private key with the relevant authorities.
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum and smartphone applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can make smartphone applications with Ethereum support in three ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Using a DApp browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Android or the iOS library.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doing everything in JavaScript, from key generation to key security and everything
    in-between. However, this is not recommended, as this makes you very vulnerable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a DApp browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One kind of DApp browser is Toshi. It will allow you to make use of the centralized
    application, and you can use it in pretty much the same way in which you would
    use MetaMask, but on a mobile. Another more popular option is [Status.IM](https://status.im/).
    It''s actually a secure chat, but it''s also a chat bot. You can give it commands
    such as retrieving the browser location, as shown in the following screenshot,
    and if you give it such commands, then you can trigger functions inside of the
    smart contracts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/647013bd-5118-4aa7-a4d9-6412d3e9322a.png)'
  prefs: []
  type: TYPE_IMG
- en: Status.IM home page
  prefs: []
  type: TYPE_NORMAL
- en: 'A few applications have been developed using this method. One such application
    is WhoPays. This a contract-based bot that creates groups in which users can keep
    track of their payments to a group through commands using a new chat bot. What
    this means is that you can use chat commands to set up the group. Suppose you
    bought groceries for three people and you paid for everything. Others have to
    pay you back. You can set this arrangement up, and they can agree to an amount
    and pay you back using the application. The following screenshot shows the WhoPays
    GitHub page at [https://github.com/Nielsvdiermen/WhoPays](https://github.com/Nielsvdiermen/WhoPays):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59dfb700-29d9-41d9-88c4-e543ab28a6a0.png)'
  prefs: []
  type: TYPE_IMG
- en: WhoPays
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example is [favor.network](https://github.com/karalabe/favor.network).
    Here, you can request favors from people and pay them to fulfill those favors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27347195-ec59-4e13-8347-725afb94b51e.png)'
  prefs: []
  type: TYPE_IMG
- en: Favor.network
  prefs: []
  type: TYPE_NORMAL
- en: These applications either won or were placed very high at the [Status.IM](https://status.im/)
    Hackathon. I highly recommend that you check these applications out and use them
    to learn exactly how you can work with [Status.IM](https://status.im/).
  prefs: []
  type: TYPE_NORMAL
- en: Using Android or the iOS library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In December 2016, Ethereum released a version of their desktop client that also
    works on mobile platforms so that you can just import these libraries into your
    Android application or your iOS application and use Ethereum in the same way that
    you would use it on a desktop.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the go-ethereum GitHub repository at [https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum](https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4055bee-f01e-42e1-b3f8-47f0ad9f9a52.png)'
  prefs: []
  type: TYPE_IMG
- en: Go-Ethereum GitHub repository
  prefs: []
  type: TYPE_NORMAL
- en: Further steps and resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I want to mention Infura. Infura is basically a relay server for the Ethereum
    and IPFS network that you don't have to manage yourself, making it trustless again.
    This will exist pretty much for as long as some people are not running their own
    Ethereum node. Visit [www.infura.io](http://www.infura.io) for more information.
    It is of course highly recommended that you run your own nodes, but in case you
    can't, check out Infura. You can remotely send resigned transactions to this server
    and they will propagate them into the network.
  prefs: []
  type: TYPE_NORMAL
- en: Another resource for you to check out is the Ethereum GitHub page, which we
    have mentioned before. Here, you can find all the projects, such as the Ethereum
    Improvement Protocol, the remix, and yellow paper, which has all the technical
    specifications of Ethereum. You can find out everything about the Solidity programming
    language and the different clients that have been built. You can adapt these clients
    and then use them in your own projects to connect to the Ethereum network. So
    just check it out!
  prefs: []
  type: TYPE_NORMAL
- en: Another source of information is the Ethereum Subreddit, which you can find
    at [www.reddit.com/r/ethereum/](http://www.reddit.com/r/ethereum/). You can find
    a lot of info and a lot of news here; something for you to check out if you want
    to keep up to date.
  prefs: []
  type: TYPE_NORMAL
- en: Another resource is CoinDesk you can find at [www.coindesk.com](http://www.coindesk.com).
    You probably know this one, but this has a lot of news regarding not only Ethereum,
    but everything blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Consensys is a company, which you can find at [https://new.consensys.net/](https://new.consensys.net/).
    They have been leveraging Ethereum pretty much since its inception, and they have
    a lot of projects that they are working on. They partner with a lot of very big
    companies, such as Microsoft. They are pretty much committed to making Ethereum
    enterprise-ready.
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, do check out State Of The DApps, which you can find at [www.stateofthedapps.com](http://www.stateofthedapps.com).
    Here, you can find a lot of applications that have been made. You can sort through
    them and see if they have any prototypes, or maybe some live applications. Almost
    all of these applications are open source. This is going to be by far your biggest
    resource because what better way is there to learn than from existing applications,
    right? So, if you check these out, I'm sure you will be well on your way to totally
    mastering Ethereum very soon.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we understood how Ethereum is run outside the browser. We learnt
    how Ethereum can be used for various IoT applications. Then we went on to see
    how Ethereum is implemented on smartphone devices in Android as well as iOS using
    various methods. Then you were given some links to various resources that can
    help you master Ethereum. In this book, we have covered almost everything that
    you need to build, use, and deploy your own Ethereum token, and have given you
    additional insight into what applications you can build with this knowledge of
    Ethereum.
  prefs: []
  type: TYPE_NORMAL
