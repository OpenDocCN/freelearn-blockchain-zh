- en: Cryptocurrency Wallets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will discuss cryptocurrency wallets in details. In earlier
    chapters, we have been introduced to wallets as well as the types of crypto wallets;
    in this chapter, we will further discuss wallets in detail, their source, and
    how the security of wallets can be strengthened.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Wallets are used to store private and public keys along with Bitcoin addresses.
    Coins can be sent or received using wallets. Wallets can store data either in
    databases or in structured files. For example, the Bitcoin core client wallets
    use the Berkeley DB file.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will cover in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Importance of cryptocurrency wallets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software wallets
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware wallets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paper wallets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brain wallets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key derivation methods in a cryptocurrency wallet
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mnemonic codes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to cryptocurrency wallets
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A wallet of any cryptocurrency can store multiple public and private keys. The
    cryptocurrency is itself not contained in the wallet; instead, the cryptocurrency
    is de-centrally stored and maintained in the public ledger. Every cryptocurrency
    has a private key with which it is possible to write in the public ledger, which
    makes spending in the cryptocurrency possible.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: It is important to know about the wallets, since keeping the private key secure
    is crucial in order to keep the currency safe. Wallet is a collection of public
    and private keys, and each of them is important for the security and anonymity
    of the currency holder.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Transactions in cryptocurrency wallets
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Transactions between wallets are not a transfer of value; instead, the wallets
    store the private key in them, which is used to sign a transaction. The signature
    of a transaction is generated from the combination of private and public keys.
    It is important to store the private key securely.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Wallets can store multiple private keys and also generate multiple public keys
    associated with the private key.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Hence it is important to keep the wallet secure so that the private key is safe;
    if the private key is lost the coins associated with that private key are lost
    forever, with no feasible way to recover the coins.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Types of cryptocurrency wallets
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wallets can be categorized in various types based on their traits. Wallets can
    be categorized by amount of currencies they supports, availability, software or
    hardware, key derivation method, and so on. We will look at the types of cryptocurrency
    wallets to be covered in the following subsections.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Currency support
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One primary trait on which the wallets can be distinguished is the number of
    currencies the wallets support; for example, there can be wallets with single
    currency support or multiple currency support. Each of the coins has a core client
    which includes a wallet too.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: The official wallets usually support single currencies, but nowadays, lot of
    third-party wallets have appeared support multiple wallets, these wallets performing
    the same functions as regular wallets, the only difference being the number of
    currencies they support.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the wallets that support multiple currencies are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Infinite wallet
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jaxx wallet
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Electrum
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trezor
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coinbase wallet
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the EXODUS wallet, which supports various
    currencies:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b628b271-03ec-4010-ad55-d3b45651846e.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: There are various other wallets coming up from time to time that offer multiple
    currencies. Sometimes, existing wallets that support a single currency start to
    introduce multiple currencies to increase their popularity or even to support
    another cryptocurrency.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Tenancy
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The wallets can also be differentiated based on whether they are software, hardware,
    paper, or cloud based. Let's discuss each of these wallets in detail.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Software wallets
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These wallets are based on the local computer or mobile. These can be further
    divided into desktop or mobile wallets. These wallets are confined within the
    local machine; they usually download the complete blockchain in order or keep
    record of the public ledger:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '**Desktop software**: They store the keys locally on the desktop or laptop.
    It offers complete control over the cryptocurrency, although responsibility for
    security rests with the person hosting the wallet on their machine, so, even if
    the hard drive of the machine fails without any backup being in one place, there
    is a chance of loosing the coins forever. It is not necessary to have the blockchain
    updated at every moment, hence, a machine not connected to a computer can also
    be used in such cases.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile wallets**: These wallets run via an app on the mobile phone. This
    allows users to easily access their coins. These wallets store the coins or keys
    locally on the mobile phone just like a desktop software wallet, or they are just
    an interface to a cloud wallet;, we will discuss that type of wallet later. The
    following screenshot is an example of a mobile wallet:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/76ed34f3-c9e6-4c9c-821f-81e8294cf811.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: The core clients of most of the cryptocurrencies offer software wallets to start
    with, with initial support for desktop wallets.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Hardware wallets
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The private key is to be stored in the most secure location possible. Hardware
    wallets store the private key in a custom hardware designed to store private keys.
    It is not possible to export the private key in plain text, which gives it another
    layer of security. Hardware is connected to a computer only when required, and
    at all other times the private key is kept secure. Hardware wallets were first
    introduced in 2012 by Trezor.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the popular hardware wallets currently available are Trezor, Ledger,
    and KeepKey wallets. The following snap shows an example of a hardware wallet
    connected to a computer:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7eb1562b-57d4-42b8-a64f-48381b87bfbd.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: Paper wallets
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Paper wallets, as the name suggests, are simply public and private keys printed
    together. The keys are usually printed in QR form, also serving as the address.
    Anybody can create a paper wallet by printing the keys but also making sure they
    remove the keys from the computer, or anyone could have access to the keys. Paper
    wallets are meant to be stored only on paper with no backup elsewhere. There are
    various online services that generate paper wallets such as [www.walletgenerator.net](https://walletgenerator.net/).
    The following screenshot is an example of a paper wallet, the following Image
    can be printed, to receive payments, public address is shared but the private
    key marked secret and is to be kept safe:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1a5eca4-93da-4e73-83ff-0de7dcd5af96.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: Brain wallet
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A brain wallet is a simple wallet that creates addresses by hashing passphrases
    to generate private and public keys. To generate a brain wallet, we choose a simple
    passphrase to generate a public and private key pair. The following screenshot
    shows how the Public Address and Private Key are generated. The passphrase is
    entered which is to be reminded as shown in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4984c6ab-550e-4043-bc63-55c03abdc55e.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: Usage frequency
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The wallets can also be differentiated on the basis of usage; there are primarily
    two types of wallets on this basis: cold wallet and hot wallet. In simple terms,
    cold wallets are not connected to the internet while hot wallets are connected
    to the internet, at all times and can be used for sending the respective cryptocurrency
    at any time. Cold wallets can be used to receive the currency even when not connected
    to the internet but it is not possible to send the currency to other address before
    connecting it to internet.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: A hardware wallet is not connected to the internet unless plugged-in to a device;
    they can be considered cold wallets.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Key derivation
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The private keys are generated by a wallet to be present on the blockchain,
    and there are primarily two methods by which the key can be generated. The key
    generation method is crucial for the security of the wallet and also important
    for recovery of the wallet in case the wallet is lost.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Non-deterministic wallet
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These were the initial iterations of the Bitcoin clients; the wallets had randomly
    generated private keys. This type of wallet is being discontinued due to a major
    disadvantage, that the random keys are inaccessible if the wallet is lost. Since
    it is advisable to use a different address for every transaction in order to maintain
    anonymity on the network, with so many random keys, it becomes difficult to maintain
    and, hence, addresses became prone to re-use. Even though in the Bitcoin core-client,
    there is a wallet that is implemented as a type-0 wallet, its use is widely discouraged.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Deterministic wallets
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In these wallets, the keys are derived from a single master key or one can say
    a common seed. All the private keys in this type of wallet are linked to a common
    seed. Backup of only the seed is sufficient to recover all the keys derived in
    this type of wallet.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些钱包中，密钥是从单个主密钥或一个可以说是共同种子派生的。在这种类型的钱包中，所有私钥都链接到一个共同的种子。只备份种子即可恢复在这种类型的钱包中派生的所有密钥。
- en: Hierarchical deterministic wallets
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分层确定性钱包
- en: 'This is the most advanced form of deterministic wallets. These were introduced
    in the BIP0032 of the Bitcoin Improvement Proposal system. These wallets follow
    a tree structure, that is, the seed creates a master key, which further creates
    child keys, and each of the keys can derive further grandchildren keys. Thus,
    in these types of wallets, there can be multiple branches of keys, and each key
    in the branch is capable of creating more keys as required. The following diagram
    shows the keys and the hierarchy of addresses created in such wallets:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是确定性钱包的最高级形式。这些是在比特币改进提案系统的BIP0032中引入的。这些钱包遵循树结构，也就是说，种子创建主密钥，进一步创建子密钥，每个密钥都可以派生更多的孙子密钥。因此，在这些类型的钱包中，可以有多个分支的密钥，并且分支中的每个密钥都能够按需创建更多的密钥。以下图表显示了在这种钱包中创建的密钥和地址层次结构：
- en: '![](img/0d07e4c8-baea-4871-83b9-220f7c5af608.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0d07e4c8-baea-4871-83b9-220f7c5af608.png)'
- en: Mnemonic codes
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 助记码
- en: These are English words used to represent the random number used to derive the
    seed in a deterministic wallet. The words act as a password; the words can help
    in recovering the seed and subsequently the keys derived from it. The mnemonic
    codes act as a good backup system for the wallet user.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是用于表示确定性钱包中用于派生种子的随机数的英文单词。这些单词充当密码；这些单词可以帮助恢复种子，以及随后从种子派生的密钥。助记码对钱包用户来说是一个很好的备份系统。
- en: The wallet shows a list of 12 to 24 words when creating a wallet. This sequence
    of words is used to back up the wallet and recover all the keys in the event of
    a wallet becoming inaccessible.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 创建钱包时，钱包显示一个包含12至24个单词的列表。这些单词序列用于备份钱包，并在钱包无法访问时恢复所有密钥。
- en: 'Here is the process of generation of mnemonic code and seed as per the BIP0039
    standard:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是根据BIP0039标准生成助记码和种子的过程：
- en: Initial random Entropy of ENT bits are generated between the allowed size of
    128-256 bits.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始随机熵`ENT`比特在允许的128-256比特大小之间生成。
- en: Checksum is generated by taking the first few bits of its SHA256 hash. The checksum
    length is defined by `ENT/32` formula.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 校验和是通过取其SHA256哈希的前几位生成的。校验和长度由`ENT/32`公式定义。
- en: The checksum denoted by `CS` is added at the end of initial Entropy.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由`CS`标识的校验和添加在初始熵的末尾。
- en: The sequence created is split into 11-bits; each is encoded a number between
    0 and 2,047 which acts as an index to a pre-defined wordlist.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建的序列分割成11位；每个都被编码为一个在0和2,047之间的数字，该数字充当预定义单词列表中的索引。
- en: A list of 12-24 words is created representing the mnemonic code.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建代表助记码的12-24个单词列表。
- en: 'The length mnemonic code, also known as a mnemonic sentence (`MS`), is defined
    by `MS = (ENT + CS) / 11`. The following screenshot shows the word length and
    the Entropy associated with that word length:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 助记码长度，也称为助记句(`MS`)，由`MS = (ENT + CS) / 11`定义。以下屏幕截图显示了单词长度和与其相关联的熵：
- en: '![](img/4b9f4885-39ba-4e21-81c8-0d27368a4f69.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4b9f4885-39ba-4e21-81c8-0d27368a4f69.png)'
- en: The seed that is 512 bits is generated from the mnemonic sequence using the
    `PBKDF2` function where the mnemonic sentence is used as the password and the
    *string mnemonic + passphrase* is used as a salt. The passphrase is something
    that a user can use to protect their mnemonic; if it's not set, then `""` is used.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从助记序列生成的512比特种子使用`PBKDF2`函数，其中助记句用作密码，*字符串助记句+密码*用作盐。密码是用户用来保护自己助记句的内容；如果未设置，则使用`""`。
- en: The length of the derived key from this process is 512-bits; different wallets
    can use their own process to create the wordlist and also have any desired wordlist.
    Although it is advised to use the mnemonic generation process specified in the
    BIP, wallets can use their own version of wordlist as they require.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个过程派生的密钥长度是512位；不同的钱包可以使用自己的过程来创建单词列表，并且拥有任何所需的单词列表。尽管建议使用BIP中指定的助记词生成过程，但钱包可以根据需要使用自己版本的单词列表。
- en: Key generation process in HD wallets
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HD钱包的密钥生成过程
- en: We will be discussing key generation processes in detail, starting from master
    keys through to private keys, and the various addresses a wallet creates for transaction
    purposes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: The initial process is to create the root seed which is a 128, 256, or 512 bit
    random. The root seed is represented by the mnemonic sentence, which makes it
    easier to restore the complete wallet in the case of losing access to the wallet.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Root seed is generated using the mnemonic sentences and the root seed which
    is of a chosen length between 128 and 512-bits, although 256 bits is advised.
    Generated using (P) RNG. The resultant hash is used to create the master private
    key and the master node. Generation of the master key is the depth level 0 in
    the hierarchy system; subsequent wallets or keys are denoted by depth 1, 2, and
    so on.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Child key derivation
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'HD wallets extensively use the **Child Key derivation** (**CKD**) function
    to create child keys from the parent keys. Keys are derived using a one-way hash
    function using the following elements:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Parent key
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chain code which works as a seed, 256-bits
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index number, 32-bits
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are various ways in which child keys can be generated from already present
    keys; the following are the key derivation sequences:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Generation of private child key from private parent key
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generation of public child key from public parent key
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generation of public child key from private parent key
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's discuss each of the previously mentioned sequences in detail.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Private key generation
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The parent key, chain code, and index number are combined and hashed with the
    `HMAC-SHA512` algorithm to produce a 512-bit hash using the following formula:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The resultant hash is split in two hashes, `I[L] and I[R]` The right-hand half
    of the hash output becomes the chain code for the child, and the left-hand half
    of the hash and its index number are used to produce the child private key as
    well as to derive the child public key.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: By changing the index, we can create multiple child keys in the sequence.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Extended keys
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed a number of child keys can be derived from parent key considering
    the three required inputs are available. We can also create another type of key,
    called the **extended key**, which consists of the parent key and the chain code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, there are two types of extended keys, distinguished by whether
    the parent key used is a private key or a public key. An extended key can create
    children which can further create children in the tree structure.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Extended keys are encoded using `Base58Check`, which helps to easily export
    and import between wallets. These keys are basically extensions of the parent
    keys, hence sharing any extended key gives access to entire branch in the branch.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'An extended private key has the `xprv` prefix in the key''s `Base58Check`,
    while an extended public key has the `xpub` prefix in the key''s `Base58Check`.
    The following diagram show''s how extended keys are formed:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d78e644-f557-498f-83b8-96c71724d53c.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we discussed in detail cryptocurrency wallets and various types
    of crypto wallets, we read about various characteristics based on which the crypto
    wallets can be distinguished, and we talked about the tenancy of the wallets,
    benefits of each of the wallet types, and the issues one can face while using
    the specific wallet type. We discussed key derivation methods and its importance
    with regard to security, accessibility, and other aspects of a wallet.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们详细讨论了加密货币钱包和各种类型的加密货币钱包，我们阅读了基于这些货币钱包可以区分的各种特征，并且我们谈论了钱包的使用、每种钱包类型的好处以及在使用特定钱包类型时可能会遇到的问题。我们讨论了关键派生方法及其在安全性、可访问性和钱包的其他方面的重要性。
