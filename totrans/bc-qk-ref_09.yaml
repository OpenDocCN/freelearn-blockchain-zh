- en: Cryptocurrency Wallets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密货币钱包
- en: In this chapter, we will discuss cryptocurrency wallets in details. In earlier
    chapters, we have been introduced to wallets as well as the types of crypto wallets;
    in this chapter, we will further discuss wallets in detail, their source, and
    how the security of wallets can be strengthened.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细讨论加密货币钱包。在之前的章节中，我们已经介绍了钱包以及加密货币钱包的类型；在本章中，我们将进一步详细讨论钱包、它们的来源以及如何加强钱包的安全性。
- en: Wallets are used to store private and public keys along with Bitcoin addresses.
    Coins can be sent or received using wallets. Wallets can store data either in
    databases or in structured files. For example, the Bitcoin core client wallets
    use the Berkeley DB file.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 钱包用于存储私钥、公钥以及比特币地址。可以使用钱包发送或接收货币。钱包可以将数据存储在数据库中或结构化文件中。例如，比特币核心客户端钱包使用 Berkeley
    DB 文件。
- en: 'The topics we will cover in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的主题如下：
- en: Importance of cryptocurrency wallets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密货币钱包的重要性
- en: Software wallets
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件钱包
- en: Hardware wallets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件钱包
- en: Paper wallets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纸质钱包
- en: Brain wallets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脑钱包
- en: Key derivation methods in a cryptocurrency wallet
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密货币钱包中的密钥派生方法
- en: Mnemonic codes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记忆代码
- en: Introduction to cryptocurrency wallets
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密货币钱包简介
- en: A wallet of any cryptocurrency can store multiple public and private keys. The
    cryptocurrency is itself not contained in the wallet; instead, the cryptocurrency
    is de-centrally stored and maintained in the public ledger. Every cryptocurrency
    has a private key with which it is possible to write in the public ledger, which
    makes spending in the cryptocurrency possible.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 任何加密货币的钱包都可以存储多个公钥和私钥。加密货币本身并不包含在钱包中；相反，加密货币是去中心化存储和维护在公共分类帐中的。每个加密货币都有一个私钥，用它可以在公共分类帐中写入，这使得在加密货币中进行消费成为可能。
- en: It is important to know about the wallets, since keeping the private key secure
    is crucial in order to keep the currency safe. Wallet is a collection of public
    and private keys, and each of them is important for the security and anonymity
    of the currency holder.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 了解钱包的重要性很重要，因为保护私钥安全对于保护货币安全至关重要。钱包是公钥和私钥的集合，每个都对于货币持有者的安全性和匿名性都很重要。
- en: Transactions in cryptocurrency wallets
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密货币钱包中的交易
- en: Transactions between wallets are not a transfer of value; instead, the wallets
    store the private key in them, which is used to sign a transaction. The signature
    of a transaction is generated from the combination of private and public keys.
    It is important to store the private key securely.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 钱包之间的交易不是价值转移；相反，钱包中存储着私钥，该私钥用于签署交易。交易的签名是从私钥和公钥的组合中生成的。安全存储私钥是非常重要的。
- en: Wallets can store multiple private keys and also generate multiple public keys
    associated with the private key.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 钱包可以存储多个私钥，并生成与私钥相关联的多个公钥。
- en: Hence it is important to keep the wallet secure so that the private key is safe;
    if the private key is lost the coins associated with that private key are lost
    forever, with no feasible way to recover the coins.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，保持钱包安全以保护私钥的安全非常重要；如果私钥丢失，与该私钥相关的硬币将永远丢失，没有可行的方法来恢复这些硬币。
- en: Types of cryptocurrency wallets
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密货币钱包的类型
- en: Wallets can be categorized in various types based on their traits. Wallets can
    be categorized by amount of currencies they supports, availability, software or
    hardware, key derivation method, and so on. We will look at the types of cryptocurrency
    wallets to be covered in the following subsections.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 根据其特征，钱包可以分为各种类型。钱包可以根据支持的货币数量、可用性、软件或硬件、密钥派生方法等进行分类。我们将在下面的子章节中查看要涵盖的加密货币钱包类型。
- en: Currency support
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 货币支持
- en: One primary trait on which the wallets can be distinguished is the number of
    currencies the wallets support; for example, there can be wallets with single
    currency support or multiple currency support. Each of the coins has a core client
    which includes a wallet too.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 区分钱包的一个主要特征是钱包支持的货币数量；例如，可以有支持单一货币或多货币的钱包。每种货币都有一个包含钱包的核心客户端。
- en: The official wallets usually support single currencies, but nowadays, lot of
    third-party wallets have appeared support multiple wallets, these wallets performing
    the same functions as regular wallets, the only difference being the number of
    currencies they support.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 官方钱包通常只支持单一货币，但现在，许多第三方钱包开始支持多种货币，这些钱包执行与常规钱包相同的功能，唯一的区别在于它们支持的货币种类。
- en: 'Some of the wallets that support multiple currencies are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一些支持多种货币的钱包如下所示：
- en: Infinite wallet
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无限钱包
- en: Jaxx wallet
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jaxx钱包
- en: Electrum
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Electrum
- en: Trezor
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Trezor
- en: Coinbase wallet
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Coinbase钱包
- en: 'The following is a screenshot of the EXODUS wallet, which supports various
    currencies:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是支持各种货币的EXODUS钱包的截图：
- en: '![](img/b628b271-03ec-4010-ad55-d3b45651846e.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b628b271-03ec-4010-ad55-d3b45651846e.png)'
- en: There are various other wallets coming up from time to time that offer multiple
    currencies. Sometimes, existing wallets that support a single currency start to
    introduce multiple currencies to increase their popularity or even to support
    another cryptocurrency.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，会有各种其他的钱包涌现，提供多种货币。有时，支持单一货币的现有钱包开始引入多种货币，以增加其受欢迎程度，甚至以支持另一种加密货币。
- en: Tenancy
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 租约
- en: The wallets can also be differentiated based on whether they are software, hardware,
    paper, or cloud based. Let's discuss each of these wallets in detail.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 钱包还可以根据它们是基于软件、硬件、纸质还是云的来区分。让我们详细讨论这些钱包。
- en: Software wallets
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件钱包
- en: 'These wallets are based on the local computer or mobile. These can be further
    divided into desktop or mobile wallets. These wallets are confined within the
    local machine; they usually download the complete blockchain in order or keep
    record of the public ledger:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些钱包是基于本地计算机或手机的。这些可以进一步分为桌面或移动钱包。这些钱包受限于本地机器；它们通常会按顺序下载完整的区块链或记录公共分类帐的信息：
- en: '**Desktop software**: They store the keys locally on the desktop or laptop.
    It offers complete control over the cryptocurrency, although responsibility for
    security rests with the person hosting the wallet on their machine, so, even if
    the hard drive of the machine fails without any backup being in one place, there
    is a chance of loosing the coins forever. It is not necessary to have the blockchain
    updated at every moment, hence, a machine not connected to a computer can also
    be used in such cases.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**桌面软件**：它们在桌面或笔记本电脑上本地存储密钥。这为加密货币提供了完全的控制权，尽管安全责任由托管钱包的人员承担，因此，即使机器的硬盘发生故障且没有备份，也有永久丢失货币的风险。没有必要在每时每刻都更新区块链，因此，在这种情况下，也可以使用未连接到计算机的机器。'
- en: '**Mobile wallets**: These wallets run via an app on the mobile phone. This
    allows users to easily access their coins. These wallets store the coins or keys
    locally on the mobile phone just like a desktop software wallet, or they are just
    an interface to a cloud wallet;, we will discuss that type of wallet later. The
    following screenshot is an example of a mobile wallet:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动钱包**：这些钱包通过手机上的应用程序运行。这使用户可以轻松访问他们的货币。这些钱包将货币或密钥存储在手机上，就像桌面软件钱包一样，或者它们只是一个云钱包的界面；我们稍后将讨论该类型的钱包。以下截图是移动钱包的示例：'
- en: '![](img/76ed34f3-c9e6-4c9c-821f-81e8294cf811.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76ed34f3-c9e6-4c9c-821f-81e8294cf811.png)'
- en: The core clients of most of the cryptocurrencies offer software wallets to start
    with, with initial support for desktop wallets.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数加密货币的核心客户端最初提供软件钱包，并初步支持桌面钱包。
- en: Hardware wallets
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件钱包
- en: The private key is to be stored in the most secure location possible. Hardware
    wallets store the private key in a custom hardware designed to store private keys.
    It is not possible to export the private key in plain text, which gives it another
    layer of security. Hardware is connected to a computer only when required, and
    at all other times the private key is kept secure. Hardware wallets were first
    introduced in 2012 by Trezor.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 私钥应存储在可能的最安全位置。硬件钱包将私钥存储在专为存储私钥设计的自定义硬件中。无法以纯文本形式导出私钥，这增加了另一层安全性。只有在需要时，硬件才连接到计算机，而在其他所有时候，私钥都保持安全。硬件钱包于2012年由Trezor首次推出。
- en: 'Some of the popular hardware wallets currently available are Trezor, Ledger,
    and KeepKey wallets. The following snap shows an example of a hardware wallet
    connected to a computer:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 目前可用的一些流行的硬件钱包包括Trezor、Ledger和KeepKey钱包。以下快照显示了一个连接到计算机的硬件钱包的示例：
- en: '![](img/7eb1562b-57d4-42b8-a64f-48381b87bfbd.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7eb1562b-57d4-42b8-a64f-48381b87bfbd.png)'
- en: Paper wallets
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纸钱包
- en: 'Paper wallets, as the name suggests, are simply public and private keys printed
    together. The keys are usually printed in QR form, also serving as the address.
    Anybody can create a paper wallet by printing the keys but also making sure they
    remove the keys from the computer, or anyone could have access to the keys. Paper
    wallets are meant to be stored only on paper with no backup elsewhere. There are
    various online services that generate paper wallets such as [www.walletgenerator.net](https://walletgenerator.net/).
    The following screenshot is an example of a paper wallet, the following Image
    can be printed, to receive payments, public address is shared but the private
    key marked secret and is to be kept safe:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 纸钱包，顾名思义，只是公钥和私钥一起打印出来。密钥通常以二维码形式打印，也作为地址。任何人都可以通过打印密钥来创建纸钱包，但也要确保他们将密钥从计算机中删除，否则任何人都可以访问密钥。纸钱包应只存储在纸上，没有其他地方的备份。有各种在线服务可生成纸钱包，例如 [www.walletgenerator.net](https://walletgenerator.net/)。以下屏幕截图是纸钱包的示例，以下图片可打印，以接收支付，公钥地址是共享的，但标记为秘密的私钥必须保密：
- en: '![](img/b1a5eca4-93da-4e73-83ff-0de7dcd5af96.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1a5eca4-93da-4e73-83ff-0de7dcd5af96.png)'
- en: Brain wallet
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大脑钱包
- en: 'A brain wallet is a simple wallet that creates addresses by hashing passphrases
    to generate private and public keys. To generate a brain wallet, we choose a simple
    passphrase to generate a public and private key pair. The following screenshot
    shows how the Public Address and Private Key are generated. The passphrase is
    entered which is to be reminded as shown in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 大脑钱包是一个简单的钱包，通过对口令进行哈希运算生成地址以生成私钥和公钥。要生成大脑钱包，我们选择一个简单的口令来生成公钥和私钥对。以下屏幕截图显示了如何生成公共地址和私钥。输入要记住的口令，如下图所示：
- en: '![](img/4984c6ab-550e-4043-bc63-55c03abdc55e.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4984c6ab-550e-4043-bc63-55c03abdc55e.png)'
- en: Usage frequency
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用频率
- en: 'The wallets can also be differentiated on the basis of usage; there are primarily
    two types of wallets on this basis: cold wallet and hot wallet. In simple terms,
    cold wallets are not connected to the internet while hot wallets are connected
    to the internet, at all times and can be used for sending the respective cryptocurrency
    at any time. Cold wallets can be used to receive the currency even when not connected
    to the internet but it is not possible to send the currency to other address before
    connecting it to internet.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 钱包还可以根据使用情况区分；在这个基础上，主要有两种类型的钱包：冷钱包和热钱包。简单来说，冷钱包不连接到互联网，而热钱包则始终连接到互联网，可以随时用于发送相应的加密货币。即使未连接到互联网，冷钱包也可以用于接收货币，但在将其连接到互联网之前，不可能将货币发送到其他地址。
- en: A hardware wallet is not connected to the internet unless plugged-in to a device;
    they can be considered cold wallets.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件钱包不连接到互联网，除非连接到设备；它们可以被视为冷钱包。
- en: Key derivation
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密钥派生
- en: The private keys are generated by a wallet to be present on the blockchain,
    and there are primarily two methods by which the key can be generated. The key
    generation method is crucial for the security of the wallet and also important
    for recovery of the wallet in case the wallet is lost.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 私钥由钱包生成以存在于区块链上，主要有两种方法可以生成密钥。密钥生成方法对于钱包的安全性至关重要，也对于在丢失钱包时恢复钱包至关重要。
- en: Non-deterministic wallet
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非确定性钱包
- en: These were the initial iterations of the Bitcoin clients; the wallets had randomly
    generated private keys. This type of wallet is being discontinued due to a major
    disadvantage, that the random keys are inaccessible if the wallet is lost. Since
    it is advisable to use a different address for every transaction in order to maintain
    anonymity on the network, with so many random keys, it becomes difficult to maintain
    and, hence, addresses became prone to re-use. Even though in the Bitcoin core-client,
    there is a wallet that is implemented as a type-0 wallet, its use is widely discouraged.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是比特币客户端的最初迭代版本；钱包具有随机生成的私钥。这种类型的钱包因一个主要缺点而被停用，即如果丢失钱包，则无法访问随机密钥。由于建议在网络上维护匿名性时每次交易使用不同的地址，而随机密钥过多，因此难以维护，因此地址容易被重复使用。尽管在比特币核心客户端中，有一个实现为类型-0钱包的钱包，但其使用受到普遍不鼓励。
- en: Deterministic wallets
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定性钱包
- en: In these wallets, the keys are derived from a single master key or one can say
    a common seed. All the private keys in this type of wallet are linked to a common
    seed. Backup of only the seed is sufficient to recover all the keys derived in
    this type of wallet.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些钱包中，密钥是从单个主密钥或一个可以说是共同种子派生的。在这种类型的钱包中，所有私钥都链接到一个共同的种子。只备份种子即可恢复在这种类型的钱包中派生的所有密钥。
- en: Hierarchical deterministic wallets
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分层确定性钱包
- en: 'This is the most advanced form of deterministic wallets. These were introduced
    in the BIP0032 of the Bitcoin Improvement Proposal system. These wallets follow
    a tree structure, that is, the seed creates a master key, which further creates
    child keys, and each of the keys can derive further grandchildren keys. Thus,
    in these types of wallets, there can be multiple branches of keys, and each key
    in the branch is capable of creating more keys as required. The following diagram
    shows the keys and the hierarchy of addresses created in such wallets:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是确定性钱包的最高级形式。这些是在比特币改进提案系统的BIP0032中引入的。这些钱包遵循树结构，也就是说，种子创建主密钥，进一步创建子密钥，每个密钥都可以派生更多的孙子密钥。因此，在这些类型的钱包中，可以有多个分支的密钥，并且分支中的每个密钥都能够按需创建更多的密钥。以下图表显示了在这种钱包中创建的密钥和地址层次结构：
- en: '![](img/0d07e4c8-baea-4871-83b9-220f7c5af608.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0d07e4c8-baea-4871-83b9-220f7c5af608.png)'
- en: Mnemonic codes
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 助记码
- en: These are English words used to represent the random number used to derive the
    seed in a deterministic wallet. The words act as a password; the words can help
    in recovering the seed and subsequently the keys derived from it. The mnemonic
    codes act as a good backup system for the wallet user.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是用于表示确定性钱包中用于派生种子的随机数的英文单词。这些单词充当密码；这些单词可以帮助恢复种子，以及随后从种子派生的密钥。助记码对钱包用户来说是一个很好的备份系统。
- en: The wallet shows a list of 12 to 24 words when creating a wallet. This sequence
    of words is used to back up the wallet and recover all the keys in the event of
    a wallet becoming inaccessible.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 创建钱包时，钱包显示一个包含12至24个单词的列表。这些单词序列用于备份钱包，并在钱包无法访问时恢复所有密钥。
- en: 'Here is the process of generation of mnemonic code and seed as per the BIP0039
    standard:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是根据BIP0039标准生成助记码和种子的过程：
- en: Initial random Entropy of ENT bits are generated between the allowed size of
    128-256 bits.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始随机熵`ENT`比特在允许的128-256比特大小之间生成。
- en: Checksum is generated by taking the first few bits of its SHA256 hash. The checksum
    length is defined by `ENT/32` formula.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 校验和是通过取其SHA256哈希的前几位生成的。校验和长度由`ENT/32`公式定义。
- en: The checksum denoted by `CS` is added at the end of initial Entropy.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由`CS`标识的校验和添加在初始熵的末尾。
- en: The sequence created is split into 11-bits; each is encoded a number between
    0 and 2,047 which acts as an index to a pre-defined wordlist.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建的序列分割成11位；每个都被编码为一个在0和2,047之间的数字，该数字充当预定义单词列表中的索引。
- en: A list of 12-24 words is created representing the mnemonic code.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建代表助记码的12-24个单词列表。
- en: 'The length mnemonic code, also known as a mnemonic sentence (`MS`), is defined
    by `MS = (ENT + CS) / 11`. The following screenshot shows the word length and
    the Entropy associated with that word length:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 助记码长度，也称为助记句(`MS`)，由`MS = (ENT + CS) / 11`定义。以下屏幕截图显示了单词长度和与其相关联的熵：
- en: '![](img/4b9f4885-39ba-4e21-81c8-0d27368a4f69.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4b9f4885-39ba-4e21-81c8-0d27368a4f69.png)'
- en: The seed that is 512 bits is generated from the mnemonic sequence using the
    `PBKDF2` function where the mnemonic sentence is used as the password and the
    *string mnemonic + passphrase* is used as a salt. The passphrase is something
    that a user can use to protect their mnemonic; if it's not set, then `""` is used.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从助记序列生成的512比特种子使用`PBKDF2`函数，其中助记句用作密码，*字符串助记句+密码*用作盐。密码是用户用来保护自己助记句的内容；如果未设置，则使用`""`。
- en: The length of the derived key from this process is 512-bits; different wallets
    can use their own process to create the wordlist and also have any desired wordlist.
    Although it is advised to use the mnemonic generation process specified in the
    BIP, wallets can use their own version of wordlist as they require.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个过程派生的密钥长度是512位；不同的钱包可以使用自己的过程来创建单词列表，并且拥有任何所需的单词列表。尽管建议使用BIP中指定的助记词生成过程，但钱包可以根据需要使用自己版本的单词列表。
- en: Key generation process in HD wallets
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HD钱包的密钥生成过程
- en: We will be discussing key generation processes in detail, starting from master
    keys through to private keys, and the various addresses a wallet creates for transaction
    purposes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细讨论密钥生成过程，从主密钥到私钥，以及钱包为交易目的创建的各种地址。
- en: The initial process is to create the root seed which is a 128, 256, or 512 bit
    random. The root seed is represented by the mnemonic sentence, which makes it
    easier to restore the complete wallet in the case of losing access to the wallet.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 初始过程是创建根种子，它是一个128、256或512位的随机数。根种子由助记句表示，这使得在丢失钱包访问权的情况下更容易恢复完整的钱包。
- en: Root seed is generated using the mnemonic sentences and the root seed which
    is of a chosen length between 128 and 512-bits, although 256 bits is advised.
    Generated using (P) RNG. The resultant hash is used to create the master private
    key and the master node. Generation of the master key is the depth level 0 in
    the hierarchy system; subsequent wallets or keys are denoted by depth 1, 2, and
    so on.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 根种子是使用助记句和根种子生成的，根种子的长度选择在128到512位之间，尽管建议使用256位。使用（P）RNG生成。生成的哈希值用于创建主私钥和主节点。主密钥的生成是层级系统中的深度级别0；随后的钱包或密钥由深度1、2等表示。
- en: Child key derivation
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子密钥派生
- en: 'HD wallets extensively use the **Child Key derivation** (**CKD**) function
    to create child keys from the parent keys. Keys are derived using a one-way hash
    function using the following elements:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: HD钱包广泛使用**子密钥派生**（**CKD**）函数从父密钥创建子密钥。使用以下元素使用单向哈希函数派生密钥：
- en: Parent key
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 父密钥
- en: Chain code which works as a seed, 256-bits
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为种子的链码，256位
- en: Index number, 32-bits
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引号，32位
- en: 'There are various ways in which child keys can be generated from already present
    keys; the following are the key derivation sequences:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 子密钥可以从已经存在的密钥中生成的方式有多种；以下是关键派生序列：
- en: Generation of private child key from private parent key
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从私有父密钥生成私有子密钥
- en: Generation of public child key from public parent key
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从公共父密钥生成公共子密钥
- en: Generation of public child key from private parent key
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从私有父密钥生成公共子密钥
- en: Let's discuss each of the previously mentioned sequences in detail.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细讨论前面提到的每个序列。
- en: Private key generation
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 私钥生成
- en: 'The parent key, chain code, and index number are combined and hashed with the
    `HMAC-SHA512` algorithm to produce a 512-bit hash using the following formula:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 父密钥、链码和索引号被组合并使用`HMAC-SHA512`算法进行哈希运算，生成一个512位的哈希值，使用以下公式：
- en: '[PRE0]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The resultant hash is split in two hashes, `I[L] and I[R]` The right-hand half
    of the hash output becomes the chain code for the child, and the left-hand half
    of the hash and its index number are used to produce the child private key as
    well as to derive the child public key.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的哈希值被分成两个哈希值，`I[L] 和 I[R]`。哈希输出的右半部分成为子节点的链码，哈希的左半部分及其索引号用于生成子私钥以及推导子公钥。
- en: By changing the index, we can create multiple child keys in the sequence.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更改索引，我们可以按顺序创建多个子密钥。
- en: Extended keys
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展密钥
- en: As discussed a number of child keys can be derived from parent key considering
    the three required inputs are available. We can also create another type of key,
    called the **extended key**, which consists of the parent key and the chain code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，可以从父密钥派生出许多子密钥，考虑到已有的三个必需输入。我们还可以创建另一种类型的密钥，称为**扩展密钥**，它由父密钥和链码组成。
- en: Furthermore, there are two types of extended keys, distinguished by whether
    the parent key used is a private key or a public key. An extended key can create
    children which can further create children in the tree structure.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，有两种类型的扩展密钥，区别在于所使用的父密钥是私钥还是公钥。扩展密钥可以创建子项，子项可以进一步在树结构中创建子项。
- en: Extended keys are encoded using `Base58Check`, which helps to easily export
    and import between wallets. These keys are basically extensions of the parent
    keys, hence sharing any extended key gives access to entire branch in the branch.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展密钥使用`Base58Check`进行编码，这有助于在钱包之间轻松导出和导入。这些密钥基本上是父密钥的扩展，因此共享任何扩展密钥都可以访问整个分支中的所有内容。
- en: 'An extended private key has the `xprv` prefix in the key''s `Base58Check`,
    while an extended public key has the `xpub` prefix in the key''s `Base58Check`.
    The following diagram show''s how extended keys are formed:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展私钥在密钥的`Base58Check`中具有`xprv`前缀，而扩展公钥在密钥的`Base58Check`中具有`xpub`前缀。以下图表显示了扩展密钥是如何形成的：
- en: '![](img/5d78e644-f557-498f-83b8-96c71724d53c.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5d78e644-f557-498f-83b8-96c71724d53c.png)'
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we discussed in detail cryptocurrency wallets and various types
    of crypto wallets, we read about various characteristics based on which the crypto
    wallets can be distinguished, and we talked about the tenancy of the wallets,
    benefits of each of the wallet types, and the issues one can face while using
    the specific wallet type. We discussed key derivation methods and its importance
    with regard to security, accessibility, and other aspects of a wallet.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们详细讨论了加密货币钱包和各种类型的加密货币钱包，我们阅读了基于这些货币钱包可以区分的各种特征，并且我们谈论了钱包的使用、每种钱包类型的好处以及在使用特定钱包类型时可能会遇到的问题。我们讨论了关键派生方法及其在安全性、可访问性和钱包的其他方面的重要性。
