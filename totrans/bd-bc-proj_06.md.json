["```\n    npm install -g solc\n\n```", "```\n    solcjs -help\n\n```", "```\nvar solc = require(\"solc\"); \nvar input = \"contract x { function g() {} }\"; \nvar output = solc.compile(input, 1); // 1 activates the optimiser  \nfor (var contractName in output.contracts) { \n    // logging code and ABI  \n    console.log(contractName + \": \" + output.contracts[contractName].bytecode); \n    console.log(contractName + \"; \" + JSON.parse(output.contracts[contractName].interface)); \n} \n\n```", "```\nvar solc = require(\"solc\"); \nvar input = { \n    \"lib.sol\": \"library L { function f() returns (uint) { return 7; } }\", \n    \"cont.sol\": \"import 'lib.sol'; contract x { function g() { L.f(); } }\" \n}; \nvar output = solc.compile({sources: input}, 1); \nfor (var contractName in output.contracts) \n    console.log(contractName + \": \" + output.contracts[contractName].bytecode); \n\n```", "```\nvar solc = require(\"solc\"); \nvar input = { \n    \"cont.sol\": \"import 'lib.sol'; contract x { function g() { L.f(); } }\" \n}; \nfunction findImports(path) { \n    if (path === \"lib.sol\") \n        return { contents: \"library L { function f() returns (uint) { return 7; } }\" } \n    else \n        return { error: \"File not found\" } \n} \nvar output = solc.compile({sources: input}, 1, findImports); \nfor (var contractName in output.contracts) \n    console.log(contractName + \": \" + output.contracts[contractName].bytecode); \n\n```", "```\nvar solc = require(\"solc\"); \n\nvar solcV047 = solc.useVersion(\"v0.4.7.commit.822622cf\"); \nvar output = solcV011.compile(\"contract t { function g() {} }\", 1); \n\nsolc.loadRemoteVersion('soljson-v0.4.5.commit.b318366e', function(err, solcV045) { \n    if (err) { \n        // An error was encountered, display and quit \n    } \n\n    var output = solcV045.compile(\"contract t { function g() {} }\", 1); \n}); \n\nvar solcV048 = solc.setupMethods(require(\"/my/local/0.4.8.js\")); \nvar output = solcV048.compile(\"contract t { function g() {} }\", 1); \n\nsolc.loadRemoteVersion('latest', function(err, latestVersion) { \n    if (err) { \n        // An error was encountered, display and quit \n    } \n    var output = latestVersion.compile(\"contract t { function g() {} }\", 1); \n}); \n\n```", "```\nvar solc = require(\"solc\"); \n\nvar input = { \n    \"lib.sol\": \"library L { function f() returns (uint) { return 7; } }\", \n    \"cont.sol\": \"import 'lib.sol'; contract x { function g() { L.f(); } }\" \n}; \n\nvar output = solc.compile({sources: input}, 1); \n\nvar finalByteCode = solc.linkBytecode(output.contracts[\"x\"].bytecode, { 'L': '0x123456...' }); \n\n```", "```\nvar abi = require(\"solc/abi\"); \n\nvar inputABI = [{\"constant\":false,\"inputs\":[],\"name\":\"hello\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"}]; \nvar outputABI = abi.update(\"0.3.6\", inputABI) \n\n```", "```\n[{\"constant\":false,\"inputs\":[],\"name\":\"hello\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":true,\"type\":\"function\"},{\"type\":\"fallback\",\"payable\":true}] \n\n```", "```\n    geth --dev --rpc --rpccorsdomain \"*\" --rpcaddr \"0.0.0.0\" --rpcport \"8545\" --mine --rpcapi \"eth,txpool,web3\"\n\n```", "```\nvar express = require(\"express\");   \nvar app = express();   \n\napp.use(express.static(\"public\")); \n\napp.get(\"/\", function(req, res){ \n res.sendFile(__dirname + \"/public/html/index.html\"); \n}) \n\napp.listen(8080); \n\n```", "```\nvar solc = require(\"solc\"); \n\napp.get(\"/compile\", function(req, res){ \n var output = solc.compile(req.query.code, 1); \n res.send(output); \n}) \n\n```", "```\nvar Web3 = require(\"web3\"); \nvar BigNumber = require(\"bignumber.js\"); \nvar ethereumjsUtil = require(\"ethereumjs-util\"); \nvar ethereumjsTx = require(\"ethereumjs-tx\"); \n\nvar web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\")); \n\nfunction etherSpentInPendingTransactions(address, callback) \n{ \n web3.currentProvider.sendAsync({ \n    method: \"txpool_content\", \n    params: [], \n    jsonrpc: \"2.0\", \n    id: new Date().getTime() \n }, function (error, result) { \n  if(result.result.pending) \n  { \n   if(result.result.pending[address]) \n   { \n    var txns = result.result.pending[address]; \n    var cost = new BigNumber(0); \n\n    for(var txn in txns) \n    { \n     cost = cost.add((new BigNumber(parseInt(txns[txn].value))).add((new BigNumber(parseInt(txns[txn].gas))).mul(new BigNumber(parseInt(txns[txn].gasPrice))))); \n    } \n\n    callback(null, web3.fromWei(cost, \"ether\")); \n   } \n   else \n   { \n    callback(null, \"0\"); \n   } \n  } \n  else \n  { \n   callback(null, \"0\"); \n  } \n }) \n} \n\nfunction getNonce(address, callback) \n{ \n web3.eth.getTransactionCount(address, function(error, result){ \n  var txnsCount = result; \n\n  web3.currentProvider.sendAsync({ \n     method: \"txpool_content\", \n     params: [], \n     jsonrpc: \"2.0\", \n     id: new Date().getTime() \n  }, function (error, result) { \n   if(result.result.pending) \n   { \n    if(result.result.pending[address]) \n    { \n     txnsCount = txnsCount + Object.keys(result.result.pending[address]).length; \n     callback(null, txnsCount); \n    } \n    else \n    { \n     callback(null, txnsCount); \n    } \n   } \n   else \n   { \n    callback(null, txnsCount); \n   } \n  }) \n }) \n} \n\napp.get(\"/deploy\", function(req, res){ \n var code = req.query.code; \n var arguments = JSON.parse(req.query.arguments); \n var address = req.query.address; \n\n var output = solc.compile(code, 1); \n\n var contracts = output.contracts; \n\n for(var contractName in contracts) \n { \n  var abi = JSON.parse(contracts[contractName].interface); \n  var byteCode = contracts[contractName].bytecode; \n\n  var contract = web3.eth.contract(abi); \n\n  var data = contract.new.getData.call(null, ...arguments, { \n   data: byteCode \n  }); \n\n  var gasRequired = web3.eth.estimateGas({ \n      data: \"0x\" + data \n  }); \n\n  web3.eth.getBalance(address, function(error, balance){ \n   var etherAvailable = web3.fromWei(balance, \"ether\"); \n   etherSpentInPendingTransactions(address, function(error, balance){ \n    etherAvailable = etherAvailable.sub(balance) \n    if(etherAvailable.gte(web3.fromWei(new BigNumber(web3.eth.gasPrice).mul(gasRequired), \"ether\"))) \n    { \n     getNonce(address, function(error, nonce){ \n      var rawTx = { \n             gasPrice: web3.toHex(web3.eth.gasPrice), \n             gasLimit: web3.toHex(gasRequired), \n             from: address, \n             nonce: web3.toHex(nonce), \n             data: \"0x\" + data \n         }; \n\n      var privateKey = ethereumjsUtil.toBuffer(req.query.key, 'hex'); \n      var tx = new ethereumjsTx(rawTx); \n      tx.sign(privateKey); \n\n      web3.eth.sendRawTransaction(\"0x\" + tx.serialize().toString('hex'), function(err, hash) { \n       res.send({result: { \n        hash: hash, \n       }}); \n      }); \n     }) \n    } \n    else \n    { \n     res.send({error: \"Insufficient Balance\"}); \n    } \n   }) \n  }) \n\n     break; \n } \n}) \n\n```", "```\n<!DOCTYPE html> \n<html lang=\"en\"> \n    <head> \n        <meta charset=\"utf-8\"> \n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> \n        <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"> \n        <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\"> \n        <link rel=\"stylesheet\" href=\"/css/codemirror.css\"> \n        <style type=\"text/css\"> \n            .CodeMirror \n            { \n                height: auto; \n            } \n        </style> \n    </head> \n    <body> \n        <div class=\"container\"> \n            <div class=\"row\"> \n                <div class=\"col-md-6\"> \n                    <br> \n                    <textarea id=\"editor\"></textarea> \n                    <br> \n                    <span id=\"errors\"></span> \n                    <button type=\"button\" id=\"compile\" class=\"btn btn-primary\">Compile</button> \n                </div> \n                <div class=\"col-md-6\"> \n                    <br> \n                    <form> \n                        <div class=\"form-group\"> \n                            <label for=\"address\">Address</label> \n                            <input type=\"text\" class=\"form-control\" id=\"address\" placeholder=\"Prefixed with 0x\"> \n                        </div> \n                        <div class=\"form-group\"> \n                            <label for=\"key\">Private Key</label> \n                            <input type=\"text\" class=\"form-control\" id=\"key\" placeholder=\"Prefixed with 0x\"> \n                        </div> \n                        <hr> \n                        <div id=\"arguments\"></div> \n                        <hr> \n                        <button type=\"button\" id=\"deploy\" class=\"btn btn-primary\">Deploy</button> \n                    </form> \n                </div> \n            </div> \n        </div> \n        <script src=\"img/codemirror.js\"></script> \n        <script src=\"img/main.js\"></script> \n    </body> \n</html> \n\n```", "```\nvar editor = CodeMirror.fromTextArea(document.getElementById(\"editor\"), { \n    lineNumbers: true, \n}); \n\nvar argumentsCount = 0; \n\ndocument.getElementById(\"compile\").addEventListener(\"click\", function(){ \n editor.save(); \n var xhttp = new XMLHttpRequest(); \n\n xhttp.onreadystatechange = function() { \n     if (this.readyState == 4 && this.status == 200) { \n      if(JSON.parse(xhttp.responseText).errors != undefined) \n      { \n       document.getElementById(\"errors\").innerHTML = JSON.parse(xhttp.responseText).errors + \"<br><br>\"; \n      } \n      else \n      { \n       document.getElementById(\"errors\").innerHTML = \"\"; \n      } \n\n      var contracts = JSON.parse(xhttp.responseText).contracts; \n\n      for(var contractName in contracts) \n      { \n       var abi = JSON.parse(contracts[contractName].interface); \n\n       document.getElementById(\"arguments\").innerHTML = \"\"; \n\n       for(var count1 = 0; count1 < abi.length; count1++) \n       { \n        if(abi[count1].type == \"constructor\") \n        { \n         argumentsCount = abi[count1].inputs.length; \n\n         document.getElementById(\"arguments\").innerHTML = '<label>Arguments</label>'; \n\n         for(var count2 = 0; count2 < abi[count1].inputs.length; count2++) \n         { \n          var inputElement = document.createElement(\"input\"); \n          inputElement.setAttribute(\"type\", \"text\"); \n          inputElement.setAttribute(\"class\", \"form-control\"); \n          inputElement.setAttribute(\"placeholder\", abi[count1].inputs[count2].type); \n          inputElement.setAttribute(\"id\", \"arguments-\" + (count2 + 1)); \n\n          var br = document.createElement(\"br\"); \n\n          document.getElementById(\"arguments\").appendChild(br); \n          document.getElementById(\"arguments\").appendChild(inputElement); \n         } \n\n         break; \n        } \n       } \n\n       break; \n      } \n     } \n }; \n\n xhttp.open(\"GET\", \"/compile?code=\" + encodeURIComponent(document.getElementById(\"editor\").value), true); \n xhttp.send();  \n}) \n\ndocument.getElementById(\"deploy\").addEventListener(\"click\", function(){ \n editor.save(); \n\n var arguments = []; \n\n for(var count = 1; count <= argumentsCount; count++) \n { \n  arguments[count - 1] = JSON.parse(document.getElementById(\"arguments-\" + count).value);  \n } \n\n var xhttp = new XMLHttpRequest(); \n\n xhttp.onreadystatechange = function() { \n     if (this.readyState == 4 && this.status == 200)  \n     { \n      var res = JSON.parse(xhttp.responseText); \n\n      if(res.error) \n      { \n       alert(\"Error: \" + res.error) \n      } \n      else \n      { \n       alert(\"Txn Hash: \" + res.result.hash); \n      }  \n     } \n     else if(this.readyState == 4) \n     { \n      alert(\"An error occured.\"); \n     } \n }; \n\n xhttp.open(\"GET\", \"/deploy?code=\" + encodeURIComponent(document.getElementById(\"editor\").value) + \"&arguments=\" + encodeURIComponent(JSON.stringify(arguments)) + \"&address=\" + document.getElementById(\"address\").value + \"&key=\" + document.getElementById(\"key\").value, true); \n xhttp.send();  \n}) \n\n```"]