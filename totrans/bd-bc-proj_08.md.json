["```\nnpm install -g ethereumjs-testrpc\n\n```", "```\nvar TestRPC = require(\"ethereumjs-testrpc\"); \nweb3.setProvider(TestRPC.provider());\n\n```", "```\nvar TestRPC = require(\"ethereumjs-testrpc\"); \nvar server = TestRPC.server(); \nserver.listen(port, function(err, blockchain) {});\n\n```", "```\nevent ping(string indexed a, int indexed b, uint256 indexed c, string d, int e); \n\n//invocation of event \nping(\"Random String\", 12, 23, \"Random String\", 45);\n\n```", "```\nvar filter = web3.eth.filter({ \n   fromBlock: 0, \n   toBlock: \"latest\", \n   address: \"0x853cdcb4af7a6995808308b08bb78a74de1ef899\", \n   topics: [\"0xb62a11697c0f56e93f3957c088d492b505b9edd7fb6e7872a93b41cdb2020644\", \"0x30ee7c926ebaf578d95b278d78bc0cde445887b0638870a26dcab901ba21d3f2\", null, [EthJS.Util.bufferToHex(EthJS.Util.setLengthLeft(23, 32)), EthJS.Util.bufferToHex(EthJS.Util.setLengthLeft(78, 32))]]            \n}); \n\nfilter.get(function(error, result){ \n if (!error) \n   console.log(result); \n});\n\n```", "```\nnpm install truffle-contract\n\n```", "```\nvar TruffleContract = require(\"truffle-contract\");\n\n```", "```\n<script type=\"text/javascript\" src=\"img/truffle-contract.min.js\"></script>\n\n```", "```\n<!doctype html> \n<html> \n   <body> \n         <script type=\"text/javascript\" src=\"img/web3.min.js\"></script> \n         <script type=\"text/javascript\" src=\"img/>            contract.min.js\"></script> \n         <script type=\"text/javascript\"> \n               //place your code here \n         </script> \n   </body> \n</html>\n\n```", "```\npragma Solidity ^0.4.0; \n\nimport \"github.com/pipermerriam/ethereum-string-utils/contracts/StringLib.sol\"; \n\ncontract Sample \n{ \n    using StringLib for *; \n\n    event ping(string status); \n\n    function Sample() \n    { \n        uint a = 23; \n        bytes32 b = a.uintToBytes(); \n\n        bytes32 c = \"12\"; \n        uint d = c.bytesToUInt(); \n\n        ping(\"Conversion Done\"); \n    } \n}\n\n```", "```\nvar provider = new Web3.providers.HttpProvider(\"http://localhost:8545\"); \nvar web3 = new Web3(provider); \n\nvar SampleContract = TruffleContract({ \n   abi: [{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"string\"}],\"name\":\"ping\",\"type\":\"event\"}], \n   unlinked_binary: \"6060604052341561000c57fe5b5b6000600060006000601793508373__StringLib__6394e8767d90916000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b151561008b57fe5b60325a03f4151561009857fe5b5050506040518051905092507f31320000000000000000000000000000000000000000000000000000000000009150816000191673__StringLib__6381a33a6f90916000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180826000191660001916815260200191505060206040518083038186803b151561014557fe5b60325a03f4151561015257fe5b5050506040518051905090507f3adb191b3dee3c3ccbe8c657275f608902f13e3a020028b12c0d825510439e5660405180806020018281038252600f8152602001807f436f6e76657273696f6e20446f6e65000000000000000000000000000000000081525060200191505060405180910390a15b505050505b6033806101da6000396000f30060606040525bfe00a165627a7a7230582056ebda5c1e4ba935e5ad61a271ce8d59c95e0e4bca4ad20e7f07d804801e95c60029\", \n   networks: { \n         1: { \n         links: { \n       \"StringLib\": \"0xcca8353a18e7ab7b3d094ee1f9ddc91bdf2ca6a4\" \n               }, \n        events: { \n                  \"0x3adb191b3dee3c3ccbe8c657275f608902f13e3a020028b12c0d825510439e56\": { \n                \"anonymous\": false, \n                \"inputs\": [ \n                         { \n                          \"indexed\": false, \n                          \"name\": \"status\", \n                          \"type\": \"string\" \n                         } \n                           ], \n                           \"name\": \"ping\", \n                           \"type\": \"event\" \n                     } \n               } \n         }, \n         10: { \n               events: { \n                  \"0x3adb191b3dee3c3ccbe8c657275f608902f13e3a020028b12c0d825510439e56\": { \n                           \"anonymous\": false, \n                           \"inputs\": [ \n                                 { \n                                       \"indexed\": false, \n                                       \"name\": \"status\", \n                                       \"type\": \"string\" \n                                 } \n                           ], \n                           \"name\": \"ping\", \n                           \"type\": \"event\" \n                     } \n               } \n         } \n   }, \n   contract_name: \"SampleContract\", \n}); \n\nSampleContract.setProvider(provider); \nSampleContract.detectNetwork(); \n\nSampleContract.defaults({ \n   from: web3.eth.accounts[0], \n   gas: \"900000\", \n   gasPrice: web3.eth.gasPrice, \n}) \n\nvar StringLib = TruffleContract({ \n   abi: [{\"constant\":true,\"inputs\":[{\"name\":\"v\",\"type\":\"bytes32\"}],\"name\":\"bytesToUInt\",\"outputs\":[{\"name\":\"ret\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"uintToBytes\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"}], \n   unlinked_binary: \"6060604052341561000c57fe5b5b6102178061001c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806381a33a6f1461004657806394e8767d14610076575bfe5b6100606004808035600019169060200190919050506100aa565b6040518082815260200191505060405180910390f35b61008c6004808035906020019091905050610140565b60405180826000191660001916815260200191505060405180910390f35b6000600060006000600102846000191614156100c557610000565b600090505b60208110156101355760ff81601f0360080260020a85600190048115156100ed57fe5b0416915060008214156100ff57610135565b603082108061010e5750603982115b1561011857610000565b5b600a8302925060308203830192505b80806001019150506100ca565b8292505b5050919050565b60006000821415610173577f300000000000000000000000000000000000000000000000000000000000000090506101e2565b5b60008211156101e157610100816001900481151561018e57fe5b0460010290507f01000000000000000000000000000000000000000000000000000000000000006030600a848115156101c357fe5b06010260010281179050600a828115156101d957fe5b049150610174565b5b8090505b9190505600a165627a7a72305820d2897c98df4e1a3a71aefc5c486aed29c47c80cfe77e38328ef5f4cb5efcf2f10029\", \n   networks: { \n         1: { \n               address: \"0xcca8353a18e7ab7b3d094ee1f9ddc91bdf2ca6a4\" \n         } \n   }, \n   contract_name: \"StringLib\", \n}) \n\nStringLib.setProvider(provider); \nStringLib.detectNetwork(); \n\nStringLib.defaults({ \n   from: web3.eth.accounts[0], \n   gas: \"900000\", \n   gasPrice: web3.eth.gasPrice, \n})\n\n```", "```\nweb3.version.getNetwork(function(err, network_id) { \n   if(network_id == 1) \n   { \n         var SampleContract_Instance = null; \n\n         SampleContract.new().then(function(instance){ \n               SampleContract.networks[SampleContract.network_id]\n                  [\"address\"] = instance.address; \n               SampleContract_Instance = instance; \n         }) \n   } \n   else if(network_id == 10) \n   { \n         var StringLib_Instance = null; \n         var SampleContract_Instance = null; \n\n         StringLib.new().then(function(instance){ \n               StringLib_Instance = instance; \n         }).then(function(){ \n               StringLib.networks[StringLib.network_id] = {}; \n               StringLib.networks[StringLib.network_id][\"address\"] = \n                 StringLib_Instance.address; \n               SampleContract.link(StringLib); \n         }).then(function(result){ \n               return SampleContract.new(); \n         }).then(function(instance){ \n               SampleContract.networks[SampleContract.network_id]\n                 [\"address\"] = instance.address; \n               SampleContract_Instance = instance; \n         }) \n   } \n});\n\n```", "```\nnpm install -g truffle\n\n```", "```\ntruffle init\n\n```", "```\npragma Solidity ^0.4.4; \n\nimport \"./ConvertLib.sol\"; \n\ncontract MetaCoin { \n   mapping (address => uint) balances; \n\n   event Transfer(address indexed _from, address indexed _to, uint256 _value); \n\n   function MetaCoin() { \n         balances[tx.origin] = 10000; \n   } \n\n   function sendCoin(address receiver, uint amount) returns(bool sufficient) { \n         if (balances[msg.sender] < amount) return false; \n         balances[msg.sender] -= amount; \n         balances[receiver] += amount; \n         Transfer(msg.sender, receiver, amount); \n         return true; \n   } \n\n   function getBalanceInEth(address addr) returns(uint){ \n         return ConvertLib.convert(getBalance(addr),2); \n   } \n\n   function getBalance(address addr) returns(uint) { \n         return balances[addr]; \n   } \n}\n\n```", "```\ntruffle compile \n\n```", "```\nmodule.exports = { \n  networks: { \n    development: { \n      host: \"localhost\", \n      port: 8545, \n      network_id: \"*\" // Match any network id \n    } \n  } \n};\n\n```", "```\nmodule.exports = { \n  networks: { \n    development: { \n      host: \"localhost\", \n      port: 8545, \n      network_id: \"10\" \n    }, \n    live: { \n         host: \"localhost\", \n      port: 8545, \n      network_id: \"1\" \n    } \n  } \n};\n\n```", "```\nmodule.exports = function(deployer, network) { \n  if (network != \"live\") { \n   // Perform a different step otherwise. \n  } else { \n    // Do something specific to the network named \"live\". \n  } \n}\n\n```", "```\nvar ConvertLib = artifacts.require(\"./ConvertLib.sol\"); \nvar MetaCoin = artifacts.require(\"./MetaCoin.sol\"); \n\nmodule.exports = function(deployer) { \n  deployer.deploy(ConvertLib); \n  deployer.link(ConvertLib, MetaCoin); \n  deployer.deploy(MetaCoin); \n};\n\n```", "```\ntruffle migrate --network development\n\n```", "```\n// Specifically request an abstraction for MetaCoin.sol \nvar MetaCoin = artifacts.require(\"./MetaCoin.sol\"); \n\ncontract('MetaCoin', function(accounts) { \n  it(\"should put 10000 MetaCoin in the first account\", function() { \n    return MetaCoin.deployed().then(function(instance) { \n      return instance.getBalance.call(accounts[0]); \n    }).then(function(balance) { \n      assert.equal(balance.valueOf(), 10000, \"10000 wasn't in the first account\"); \n    }); \n  }); \n  it(\"should send coin correctly\", function() { \n    var meta; \n\n    // Get initial balances of first and second account. \n    var account_one = accounts[0]; \n    var account_two = accounts[1]; \n\n    var account_one_starting_balance; \n    var account_two_starting_balance; \n    var account_one_ending_balance; \n    var account_two_ending_balance; \n\n    var amount = 10; \n\n    return MetaCoin.deployed().then(function(instance) { \n      meta = instance; \n      return meta.getBalance.call(account_one); \n    }).then(function(balance) { \n      account_one_starting_balance = balance.toNumber(); \n      return meta.getBalance.call(account_two); \n    }).then(function(balance) { \n      account_two_starting_balance = balance.toNumber(); \n      return meta.sendCoin(account_two, amount, {from: account_one}); \n    }).then(function() { \n      return meta.getBalance.call(account_one); \n    }).then(function(balance) { \n      account_one_ending_balance = balance.toNumber(); \n      return meta.getBalance.call(account_two); \n    }).then(function(balance) { \n      account_two_ending_balance = balance.toNumber(); \n\n      assert.equal(account_one_ending_balance, account_one_starting_balance - amount, \"Amount wasn't correctly taken from the sender\"); \n      assert.equal(account_two_ending_balance, account_two_starting_balance + amount, \"Amount wasn't correctly sent to the receiver\"); \n    }); \n  }); \n});\n\n```", "```\nmocha: { \n  useColors: true \n}\n\n```", "```\npragma Solidity ^0.4.2; \n\nimport \"truffle/Assert.sol\"; \nimport \"truffle/DeployedAddresses.sol\"; \nimport \"../contracts/MetaCoin.sol\"; \n\ncontract TestMetacoin { \n\n  function testInitialBalanceUsingDeployedContract() { \n    MetaCoin meta = MetaCoin(DeployedAddresses.MetaCoin()); \n\n    uint expected = 10000; \n\n    Assert.equal(meta.getBalance(tx.origin), expected, \"Owner should have 10000 MetaCoin initially\"); \n  } \n\n  function testInitialBalanceWithNewMetaCoin() { \n    MetaCoin meta = new MetaCoin(); \n\n    uint expected = 10000; \n\n    Assert.equal(meta.getBalance(tx.origin), expected, \"Owner should have 10000 MetaCoin initially\"); \n  } \n\n}\n\n```", "```\nimport \"truffle/Assert.sol\"; \n\ncontract TestHooks { \n  uint someValue; \n\n  function beforeEach() { \n    someValue = 5; \n  } \n\n  function beforeEachAgain() { \n    someValue += 1; \n  } \n\n  function testSomeValueIsSix() { \n    uint expected = 6; \n\n    Assert.equal(someValue, expected, \"someValue should have been 6\"); \n  } \n}\n\n```", "```\nimport \"truffle/Assert.sol\"; \nimport \"truffle/DeployedAddresses.sol\"; \nimport \"../contracts/MyContract.sol\"; \n\ncontract TestContract { \n  // Truffle will send the TestContract one Ether after deploying the contract. \n  public uint initialBalance = 1 ether; \n\n  function testInitialBalanceUsingDeployedContract() { \n    MyContract myContract = MyContract(DeployedAddresses.MyContract()); \n\n    // perform an action which sends value to myContract, then assert. \n    myContract.send(...); \n  } \n\n  function () { \n    // This will NOT be executed when Ether is sent. o/ \n  } \n}\n\n```", "```\ntruffle test\n\n```", "```\ntruffle test ./path/to/test/file.js\n\n```", "```\ntruffle install <package name>\n\n```", "```\ntruffle install <package name>@<version>\n\n```", "```\ntruffle install\n\n```", "```\n{ \n  \"package_name\": \"adder\", \n  \"version\": \"0.0.3\", \n  \"description\": \"Simple contract to add two numbers\", \n  \"authors\": [ \n    \"Tim Coulter <tim.coulter@consensys.net>\" \n  ], \n  \"keywords\": [ \n    \"ethereum\", \n    \"addition\" \n  ], \n  \"dependencies\": { \n    \"owned\": \"^0.0.1\" \n  }, \n  \"license\": \"MIT\" \n}\n\n```", "```\nimport \"example-truffle-library/contracts/SimpleNameRegistry.sol\";\n\n```", "```\nvar contract = require(\"truffle-contract\"); \nvar data = require(\"example-truffle-library/build/contracts/SimpleNameRegistry.json\"); \nvar SimpleNameRegistry = contract(data);\n\n```", "```\nimport \"example-truffle-library/contracts/SimpleNameRegistry.sol\"; \n\ncontract MyContract { \n  SimpleNameRegistry registry; \n  address public owner; \n\n  function MyContract { \n    owner = msg.sender; \n  } \n\n  // Simple example that uses the deployed registry from the package. \n  function getModule(bytes32 name) returns (address) { \n    return registry.names(name); \n  } \n\n  // Set the registry if you're the owner. \n  function setRegistry(address addr) { \n    if (msg.sender != owner) throw; \n\n    registry = SimpleNameRegistry(addr); \n  } \n}\n\n```", "```\nvar SimpleNameRegistry = artifacts.require(\"example-truffle-library/contracts/SimpleNameRegistry.sol\"); \n\nmodule.exports = function(deployer) { \n  // Deploy our contract, then set the address of the registry. \n  deployer.deploy(MyContract).then(function() { \n    return MyContract.deployed(); \n  }).then(function(deployed) { \n    return deployed.setRegistry(SimpleNameRegistry.address); \n  }); \n};\n\n```", "```\ntruffle console\n\n```", "```\ntruffle exec <path/to/file.js>\n\n```", "```\nmodule.exports = function(callback) { \n  // perform actions \n  callback(); \n}\n\n```", "```\ntruffle build\n\n```", "```\nmodule.exports = { \n  // This will run the &grave;webpack&grave; command on each build. \n  // \n  // The following environment variables will be set when running the command: \n  // WORKING_DIRECTORY: root location of the project \n  // BUILD_DESTINATION_DIRECTORY: expected destination of built assets \n  // BUILD_CONTRACTS_DIRECTORY: root location of your build contract files (.sol.js) \n  // \n  build: \"webpack\" \n}\n\n```", "```\nmodule.exports = { \n  build: function(options, callback) { \n     // Do something when a build is required. &grave;options&grave; contains these values: \n     // \n     // working_directory: root location of the project \n     // contracts_directory: root directory of .sol files \n     // destination_directory: directory where truffle expects the built assets (important for &grave;truffle serve&grave;) \n  } \n}\n\n```", "```\nnpm install truffle-default-builder --save\n\n```", "```\nvar DefaultBuilder = require(\"truffle-default-builder\"); \n\nmodule.exports = { \n  networks: { \n    development: { \n      host: \"localhost\", \n      port: 8545, \n      network_id: \"10\" \n    }, \n    live: { \n         host: \"localhost\", \n      port: 8545, \n      network_id: \"1\" \n    } \n  }, \n  build: new DefaultBuilder({ \n    \"index.html\": \"index.html\", \n    \"app.js\": [ \n      \"javascripts/index.js\" \n    ], \n    \"bootstrap.min.css\": \"stylesheets/bootstrap.min.css\" \n  }) \n};\n\n```", "```\n<!doctype html> \n<html> \n   <head> \n         <link rel=\"stylesheet\" type=\"text/css\" href=\"bootstrap.min.css\"> \n   </head> \n   <body> \n   <div class=\"container\"> \n         <div class=\"row\"> \n         <div class=\"col-md-6\"> \n         <br> \n         <h2>Send Metacoins</h2> \n         <hr> \n         <form id=\"sendForm\"> \n         <div class=\"form-group\"> \n               <label for=\"fromAddress\">Select Account Address</label> \n         <select class=\"form-control\" id=\"fromAddress\"> \n         </select> \n         </div> \n         <div class=\"form-group\"> \n         <label for=\"amount\">How much metacoin do you want to send?\n         </label> \n         <input type=\"text\" class=\"form-control\" id=\"amount\"> \n         </div> \n         <div class=\"form-group\"> \n         <label for=\"toAddress\">Enter the address to which you want to \n           send matacoins</label> \n         <input type=\"text\" class=\"form-control\" id=\"toAddress\"  \n             placeholder=\"Prefixed with 0x\"> \n         </div> \n         <button type=\"submit\" class=\"btn btn-primary\">Submit</button> \n         </form> \n         </div> \n         <div class=\"col-md-6\"> \n         <br> \n         <h2>Find Balance</h2> \n         <hr> \n         <form id=\"findBalanceForm\"> \n         <div class=\"form-group\"> \n               <label for=\"address\">Select Account Address</label> \n               <select class=\"form-control\" id=\"address\"> \n               </select> \n         </div> \n         <button type=\"submit\" class=\"btn btn-primary\">Check \n            Balance</button> \n         </form> \n         </div> \n         </div> \n         </div> \n         <script type=\"text/javascript\" src=\"img/app.js\"></script> \n   </body> \n</html>\n\n<!doctype html> \n <html> \n     <head> \n         <link rel=\"stylesheet\" type=\"text/css\" href=\"bootstrap.min.css\"> \n     </head> \n     <body> \n         <div class=\"container\"> \n             <div class=\"row\"> \n                 <div class=\"col-md-6\"> \n                     <br> \n                     <h2>Send Metacoins</h2> \n                     <hr> \n                     <form id=\"sendForm\"> \n                         <div class=\"form-group\"> \n                             <label for=\"fromAddress\">Select Account Address</label> \n                             <select class=\"form-control\" id=\"fromAddress\"> \n                             </select> \n                           </div> \n                           <div class=\"form-group\"> \n                             <label for=\"amount\">How much metacoin you want to send?</label> \n                             <input type=\"text\" class=\"form-control\" id=\"amount\"> \n                           </div> \n                           <div class=\"form-group\"> \n                             <label for=\"toAddress\">Enter the address to which you want to send matacoins</label> \n                             <input type=\"text\" class=\"form-control\" id=\"toAddress\" placeholder=\"Prefixed with 0x\"> \n                           </div> \n                           <button type=\"submit\" class=\"btn btn-primary\">Submit</button> \n                     </form> \n                 </div> \n                 <div class=\"col-md-6\"> \n                     <br> \n                     <h2>Find Balance</h2> \n                     <hr> \n                     <form id=\"findBalanceForm\"> \n                         <div class=\"form-group\"> \n                             <label for=\"address\">Select Account Address</label> \n                             <select class=\"form-control\" id=\"address\"> \n                             </select> \n                           </div> \n                           <button type=\"submit\" class=\"btn btn-primary\">Check Balance</button> \n                     </form> \n                 </div> \n             </div> \n         </div> \n         <script type=\"text/javascript\" src=\"img/app.js\"></script> \n     </body> \n </html>\n\n```", "```\nwindow.addEventListener(\"load\", function(){ \n   var accounts = web3.eth.accounts; \n\n   var html = \"\"; \n\n   for(var count = 0; count < accounts.length; count++) \n   { \n         html = html + \"<option>\" + accounts[count] + \"</option>\"; \n   } \n\n   document.getElementById(\"fromAddress\").innerHTML = html; \n   document.getElementById(\"address\").innerHTML = html; \n\n   MetaCoin.detectNetwork(); \n}) \n\ndocument.getElementById(\"sendForm\").addEventListener(\"submit\", function(e){ \n   e.preventDefault(); \n\n   MetaCoin.deployed().then(function(instance){ \n         return instance.sendCoin(document.getElementById(\"toAddress\").value, document.getElementById(\"amount\").value, { \n               from: document.getElementById(\"fromAddress\").options[document.getElementById(\"fromAddress\").selectedIndex].value \n         }); \n   }).then(function(result){ \n         alert(\"Transaction mined successfully. Txn Hash: \" + result.tx); \n   }).catch(function(e){ \n         alert(\"An error occured\"); \n   }) \n}) \n\ndocument.getElementById(\"findBalanceForm\").addEventListener(\"submit\", function(e){ \n   e.preventDefault(); \n\n   MetaCoin.deployed().then(function(instance){ \n         return instance.getBalance.call(document.getElementById(\"address\").value); \n   }).then(function(result){ \n         console.log(result); \n         alert(\"Balance is: \" + result.toString() + \" metacoins\"); \n   }).catch(function(e){ \n         alert(\"An error occured\"); \n   }) \n})\n\n```", "```\ntruffle serve\n\n```"]