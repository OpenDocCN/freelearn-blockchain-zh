["```\n$ multichain-util create chain1  \n```", "```\n$ multichaind chain1 -daemon \n```", "```\n$ multichaind chain1@[ip-address]:[port] \n```", "```\n$ multichain-cli chain1 grant [node-address] connect \n```", "```\n$ multichaind chain1 -daemon \n```", "```\n$ multichain-cli chain1 getinfo \n```", "```\n    {\"method\":\"getinfo\",\"params\":[],\"id\":1,\"chain_name\":\"chain1\"}\n\n    {\n      \"version\": \"1.0.2\",\n      \"nodeversion\": 10002901,\n      \"protocolversion\": 10009,\n      \"chainname\": \"chain1\",\n      \"description\": \"MultiChain chain1\",\n      \"protocol\": \"multichain\",\n      \"port\": 4273,\n      \"setupblocks\": 60,\n      \"nodeaddress\": \"chain1@192.168.0.107:4273\",\n      \"burnaddress\": \"1XXXXXXXQrXXXXXXEeXXXXXXXBXXXXXXaDTujx\",\n      \"incomingpaused\": false,\n      \"miningpaused\": false,\n      \"walletversion\": 60000,\n      \"balance\": 0,\n      \"walletdbversion\": 2,\n      \"reindex\": false,\n      \"blocks\": 59,\n      \"timeoffset\": 0,\n      \"connections\": 0,\n      \"proxy\": \"\",\n      \"difficulty\": 6e-8,\n      \"testnet\": false,\n      \"keypoololdest\": 1523352447,\n      \"keypoolsize\": 2,\n      \"paytxfee\": 0,\n      \"relayfee\": 0,\n      \"errors\": \"\"\n    }\n```", "```\nmultichain-cli chain1\n```", "```\n    create stream stream1 false \n```", "```\n    publish stream1 key1 73747265616d2064617461\n```", "```\n    subscribe stream1\n    liststreamitems stream1\n```", "```\n[ \n  { \n    \"publishers\": [ \n      \"1MpkvCWj1Z9ZYfzBQzk4QvR1qih4ZiaHfh9Dd3\" \n    ], \n    \"key\": \"key1\", \n    \"data\": \"73747265616d2064617461\", \n    \"confirmations\": 11, \n    \"blocktime\": 1523373741, \n    \"txid\": \"23ad75620539f9995eef990856090e4c016e4da46bee82905483021b68da616e\" \n  } \n] \n```", "```\nfrom Savoir import Savoir \n\nclass MultichainClient(object): \n\n    def __init__(self, **kwargs): \n\n        self.rpcuser = kwargs.get('rpcuser', 'multichainrpc') \n        self.rpcpasswd = kwargs.get('rpcpasswd', 'HFzmag67bJg2f4YuExgVDqQK5VfnvXRS5SKrByuCgiXm') \n        self.rpchost = kwargs.get('rpchost', 'localhost') \n        self.rpcport = kwargs.get('rpcport', '4416') \n        self.chainname = kwargs.get('chainname', 'chain1') \n```", "```\n    def connect(self):\n        \"\"\"connects to rpc interface\"\"\"\n\n        try: \n            api = Savoir(self.rpcuser, self.rpcpasswd, self.rpchost, self.rpcport, self.chainname) \n            return api \n\n        except Exception as e: \n            return False \n```", "```\nclass Document(object): \n\n    def __init__(self): \n        self.client = MultichainClient().connect() \n        self.stream = 'poe' \n```", "```\n    def fetch_by_key(self, key): \n        \"\"\"fetches the existence info of a document in blockchain\"\"\" \n\n        return self.client.liststreamkeyitems(self.stream, key) \n\n    def fetch_by_txid(self, tx_id): \n\n        return self.client.getwallettransaction(tx_id) \n```", "```\n    def publish(self, key, value): \n        \"\"\"publishes the existence of a document in blockchain\"\"\" \n\n        return self.client.publish(self.stream, key, value) \n```", "```\n    def verify(self, digest): \n        \"\"\"verifies the existence of a document in blockchain\"\"\" \n\n        return self.fetch_by_key(digest) \n```", "```\n    def fetch_latest(self, count): \n\n        latest_docs = [] \n        for doc in self.client.liststreamitems(self.stream)[::-1][:count]: \n             latest_docs.append({\"digest\": doc.get('key'), \n            \"blocktime\": doc.get('blocktime'), \n            \"confirmations\": doc.get('confirmations')}) \n        return latest_docs \n```", "```\nimport binascii \nimport json as JSON \n\nfrom base64 import b64encode, b64decode \nfrom datetime import datetime \nfrom sanic import Sanic \nfrom sanic.response import json \nfrom sanic_cors import CORS, cross_origin \nfrom poe_libs import Document\nport = 8000 \n```", "```\nclass Server(object): \n\n    def __init__(self): \n\n        self.app = Sanic() \n        CORS(self.app) \n        self.document = Document() \n\n        self.app.add_route(self.publish, '/publish', methods=['POST']) \n        self.app.add_route(self.verify, '/verify', methods=['GET']) \n        self.app.add_route(self.details, '/details', methods=['GET']) \n```", "```\nasync def publish(self, request): \n\n    try: \n        json_data = {'name': request.form.get('name'), \n            'email': request.form.get('email'), \n            'message': request.form.get('message'), \n            'digest': request.form.get('digest')} \n```", "```\n        json_string = JSON.dumps(json_data) \n        encoded = b64encode(json_string.encode('utf-8')) \n        hex_encoded = binascii.b2a_hex(encoded).decode() \n```", "```\n        tx_id = self.document.publish(json_data['digest'], hex_encoded) \n        tx_info = self.document.fetch_by_txid(tx_id) \n```", "```\n        response_data = { \n            'digest': json_data['digest'], \n            'transaction_id': tx_id, \n            'confirmations': tx_info.get('confirmations'), \n            'blockhash': tx_info.get('blockhash'), \n            'blocktime': tx_info.get('blocktime'), \n            'name': json_data['name'], \n            'email': json_data['email'], \n            'message': json_data['message'], \n            'timestamp': datetime.now().timestamp(), \n            'status': True} \n\n    except Exception as e: \n\n        response_data = {'status': False} \n\n    return json(response_data) \n```", "```\n    async def verify(self, request):\n        \"\"\"returns details about verified document\"\"\"    \n        digest = request.args.get('digest') \n        verified_docs = self.document.verify(digest) \n```", "```\n        response_data = [] \n        for doc in verified_docs: \n            meta_data = JSON.loads(b64decode(binascii.a2b_hex(doc.get('data'))).decode()) \n```", "```\n            doc = {\"digest\": digest, \n                   \"transaction_id\": doc.get('txid'), \n                   \"confirmations\": doc.get('confirmations'), \n                   \"blocktime\": doc.get('blocktime'), \n                   \"name\": meta_data.get('name'), \n                   \"email\": meta_data.get('email'), \n                   \"message\": meta_data.get('message'), \n                   \"recorded_timestamp_UTC\": doc.get('blocktime'), \n                   \"readable_time_UTC\": datetime.fromtimestamp(int(doc.get('blocktime'))).strftime(\"%c\")} \n            response_data.append(doc) \n        return json(response_data) \n```", "```\n    async def details(self, request): \n        \"\"\"returns details of latest inserted documents\"\"\" \n\n        latest_docs = self.document.fetch_latest(int(request.args.get('count'))) \n        return json(latest_docs) \n```", "```\nif __name__ == '__main__':\n    \"\"\"main function to serve the api\"\"\"\n    server = Server() \n    server.app.run(host='0.0.0.0', port=port, debug=True) \n```", "```\n$ sha256sum index.php \n86abfbd5f1a9e928935cdee9b2fd1bc2d43254b40d996e262026e9d668555613  index.php \n\n$ curl -X POST -F 'name=user' -F 'email=test@test.com1' -F \n 'message=some message' -F \n 'digest=86abfbd5f1a9e928935cdee9b2fd1bc2d43254b40d996e262026e9d668555613' \n http://localhost:8000/publish \n```", "```\n{ \n  \"transaction_id\": \"62eca6e6c20a4af350bd70fa3745c16de5d9a8ad70bc79cbf4c5450283424010\", \n  \"message\": \"some message\", \n  \"confirmations\": 0, \n  \"digest\": \"86abfbd5f1a9e928935cdee9b2fd1bc2d43254b40d996e262026e9d668555613\", \n  \"name\": \"user\", \n  \"email\": \"test@test.com1\", \n  \"blocktime\": null, \n  \"timestamp\": 1523467920.313183, \n  \"status\": true, \n  \"blockhash\": null \n} \n```", "```\n$ curl http://localhost:8000/verify?digest=86abfbd5f1a9e928935cdee9b2fd1bc2d43254b40d996e262026e9d668555613 \n\n[ \n  { \n    \"transaction_id\": \"62eca6e6c20a4af350bd70fa3745c16de5d9a8ad70bc79cbf4c5450283424010\", \n    \"email\": \"test@test.com1\", \n    \"recorded_timestamp_UTC\": 1523467857, \n    \"blocktime\": 1523467857, \n    \"confirmations\": 22, \n    \"message\": \"some message\", \n    \"digest\": \"86abfbd5f1a9e928935cdee9b2fd1bc2d43254b40d996e262026e9d668555613\", \n    \"name\": \"user\", \n    \"readable_time_UTC\": \"Wed Apr 11 23:00:57 2018\" \n  } \n] \n```", "```\n$ curl http://localhost:8000/details?count=3 \n[ \n  { \n    \"digest\": \"d9d7e36d0059dfab8d7ca2ddaf9e27956e96721209d3b41cd9da46942d48f77b\", \n    \"blocktime\": \"2018-04-12 00:42:38 UTC\", \n    \"confirmations\": 1 \n  }, \n  { \n    \"digest\": \"e459c629bfdf54c5849f7718dae9db2b0035f6cb21a04cf2f8e17ffe63b60710\", \n    \"blocktime\": \"2018-04-12 00:42:10 UTC\", \n    \"confirmations\": 6 \n  }, \n  { \n    \"digest\": \"86abfbd5f1a9e928935cdee9b2fd1bc2d43254b40d996e262026e9d668555613\", \n    \"blocktime\": \"2018-04-12 00:13:16 UTC\", \n    \"confirmations\": 17 \n  } \n] \n```"]