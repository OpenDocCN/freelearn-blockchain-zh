- en: Implementing Business Networks Using Hyperledger Composer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Hyperledger Composer 实现业务网络
- en: Hyperledger Composer is a high-level toolset and framework that was made to
    quickly build and run applications on top of a Hyperledger Fabric blockchain.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Composer 是一个高级工具集和框架，旨在快速构建和运行基于 Hyperledger Fabric 区块链的应用程序。
- en: We learned about Hyperledger Fabric in the previous chapter, so you already
    know that developing a Fabric-based application is quite complex as it needs to
    handle many configurations at the network level.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中我们了解了 Hyperledger Fabric，所以你已经知道开发基于 Fabric 的应用程序相当复杂，因为它需要处理许多网络级别的配置。
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Hyperledger Composer—a quick overview
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger Composer — 一个快速概述
- en: Setting up a Hyperledger Composer environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Hyperledger Composer 环境
- en: Analyzing business scenarios
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析业务场景
- en: The business network archive
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务网络存档
- en: Implementing business transaction functions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现业务交易功能
- en: Hyperledger Composer – a quick overview
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger Composer — 一个快速概述
- en: Hyperledger Composer is a set of JavaScript-based high-level toolsets and frameworks
    that simplify and quickly build and run an application on top of a Hyperledger
    Fabric blockchain. Business owners and developers can quickly create smart contracts
    and applications via the composer tool. The composer tool generates a RESTful
    endpoint to interact with fabric channels. Instead of writing chaincode using
    Golang, Composer uses model language to generate a business network archive (`.BNA`)
    file for the blockchain network.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Composer 是一组基于 JavaScript 的高级工具集和框架，可以简化并快速构建和运行基于 Hyperledger Fabric
    区块链的应用程序。业务所有者和开发人员可以通过 composer 工具快速创建智能合约和应用程序。Composer 工具生成一个 RESTful 端点，用于与
    Fabric 通道交互。与使用 Golang 编写链码不同，Composer 使用模型语言为区块链网络生成业务网络存档（`.BNA`）文件。
- en: 'Here is an example of a Hyperledger Composer solution architecture:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 Hyperledger Composer 解决方案架构的示例：
- en: '![](img/27d227e0-508b-492e-b94e-175d434871e8.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27d227e0-508b-492e-b94e-175d434871e8.png)'
- en: Hyperledger Composer contains the components that are listed in the following
    sections.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Composer 包含以下部分。
- en: Yeoman generator
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Yeoman 生成器
- en: 'The npm module generator-hyperledger-composer in Yeoman is used to make templates
    for Hyperledger Composer. It supports and generates three different types of templates:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Yeoman 中的 npm 模块 generator-hyperledger-composer 用于创建 Hyperledger Composer 的模板。它支持并生成三种不同类型的模板：
- en: CLI application
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CLI 应用程序
- en: Angular 2 application
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 2 应用程序
- en: Skeleton business network
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 骨架业务网络
- en: You can use Yeoman's generated angular skeleton to connect to the Hyperledger Composer
    REST server.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Yeoman 生成的 angular 骨架连接到 Hyperledger Composer REST 服务器。
- en: Composer REST server
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Composer REST 服务器
- en: Composer's REST server utilizes a standalone Node.js process and exposes a set
    of RESTful API endpoints from a deployed composer business network. These generated
    APIs can interact with fabric chaincode. The side code can then trigger **create**,
    **read**, **update**, **delete** (**CRUD**) for assets, participants, and transactions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Composer 的 REST 服务器利用一个独立的 Node.js 进程，并从部署的 composer 业务网络公开一组 RESTful API 端点。这些生成的
    API 可以与 fabric 链码进行交互。侧面的代码然后可以触发 **创建**、**读取**、**更新**、**删除**（**CRUD**）资产、参与者和交易。
- en: LoopBack connector
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LoopBack 连接器
- en: The LoopBack connector utilises the Node.js LoopBack framework to expose GET/POST/PUT/DELETE
    operations for the assets, participants, and transactions defined in the business
    network.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: LoopBack 连接器利用 Node.js 的 LoopBack 框架来为业务网络中定义的资产、参与者和交易暴露 GET/POST/PUT/DELETE
    操作。
- en: JavaScript SDK
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript SDK
- en: The JavaScript SDK API is used to interact with the deployed business network.
    It is comprised of the client and admin APIs.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript SDK API 用于与部署的业务网络交互。它由客户端和管理 API 组成。
- en: The client APIs provide query, create, update, and delete resources (asset and
    participant), and submit transactions from client applications.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端 API 提供了从客户端应用程序查询、创建、更新和删除资源（资产和参与者），以及提交交易的功能。
- en: The admin API is used to deploy the business network.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 管理 API 用于部署业务网络。
- en: Composer playground
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Composer playground
- en: The Hyperledger Composer playground is a browser-based interface to create and
    test business networks. You can use the playground to build and test your business
    network.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Composer playground 是一个基于浏览器的界面，用于创建和测试业务网络。你可以使用 playground 来构建和测试你的业务网络。
- en: Composer-cli
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Composer-cli
- en: Composer-cli is a command-line tool that lets you deploy and manage business
    networks.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Composer-cli 是一个命令行工具，可以让你部署和管理业务网络。
- en: 'Here is a list of some commands:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些命令的列表：
- en: '| **Command** | **Description** |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| `composer archive create` | Command to create a business network archive
    file (`nba`). |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `composer archive create` | 创建业务网络存档文件（nba）的命令。'
- en: '| `composer archive list` | Verifies the contents of a business network archive.
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `composer archive list` | 验证业务网络存档的内容。'
- en: '| `composer card create` | Creates a business network card from individual
    components. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `composer card create` | 从个别组件创建业务网络卡。'
- en: '| `composer card delete` | Deletes a business network card from individual
    components. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `composer card delete` | 从个别组件中删除业务网络卡。'
- en: '| `composer card list` | Lists all business network cards stored in the local
    wallet. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `composer card list` | 列出存储在本地钱包中的所有业务网络卡。'
- en: '| `composer network deploy` | Deploys a business network archive from local
    disk to a Hyperledger Fabric network. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `composer network deploy` | 将业务网络存档从本地磁盘部署到Hyperledger Fabric网络。'
- en: '| `composer network list` | Lists the details of the business network card.
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `composer network list` | 列出业务网络卡的详细信息。'
- en: '| `composer network ping` | Tests the connection to a deployed business network.
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `composer network ping` | 测试已部署业务网络的连接。'
- en: Setting up a Hyperledger Composer environment
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Hyperledger Composer环境
- en: We just reviewed the Hyperledger Composer solution architecture. In this section,
    we will set up the Hyperledger development environment.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚审查了Hyperledger Composer解决方案体系结构。在本节中，我们将设置Hyperledger开发环境。
- en: Installation prerequisites
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装先决条件
- en: Before we install the composer tools, make sure you have the required prerequisites
    by following the *Setup of Hyperledger Fabric environment—installing prerequisites*
    section.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装composer工具之前，请确保按照Hyperledger Fabric环境设置 - 安装先决条件一节来获取所需的先决条件。
- en: Installing the development environment
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装开发环境
- en: 'The following are the installation commands for developing the environment:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是开发环境安装命令：
- en: 'Installing the CLI tools:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装CLI工具：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Installing `composer-rest-server`:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装`composer-rest-server`：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Installing Hyperledger Composer generator:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Hyperledger Composer生成器：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Installing Yeoman:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Yeoman：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Installing playground:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装游乐场：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Installing fabric runtime:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装fabric运行时：
- en: 'Download and install fabric runtime for the composer as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并安装composer的fabric运行时如下：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: At this step, you have installed everything required for the typical composer
    development environment.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步，你已经安装了典型的composer开发环境所需的一切。
- en: Analyzing business scenarios
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析业务场景
- en: 'In *[Chapter 16](d750faf6-ca67-49d3-b78b-5837c3789633.xhtml)*, *Exploring an
    Enterprise Blockchain Application Using Hyperledger Fabric*, we discussed the
    blockchain use case for the insurance claim. It includes the following steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在*[第16章](d750faf6-ca67-49d3-b78b-5837c3789633.xhtml)*，*使用Hyperledger Fabric探索企业区块链应用程序*中，我们讨论了对保险索赔的区块链用例。它包括以下步骤：
- en: An insuree reports a claim to a broker
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保险人向经纪人报告索赔
- en: A broker provides requested information
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经纪人提供请求的信息
- en: A broker submits a claim to an issuer
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经纪人向发行者提交索赔
- en: An issuer confirms the claim
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发行者确认索赔
- en: An issuer processes and approves the claim
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发行者处理并批准索赔
- en: In this chapter, we will use the same insurance claim use case, but also build
    the end-to-end application via Hyperledger Composer.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用相同的保险索赔用例，但也通过Hyperledger Composer构建端到端应用程序。
- en: Business network archive
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务网络存档
- en: 'Composer business is comprised of four different types of files: model file
    (`.cto`), script file (`.js`), access control list (ACL) file (`.acl`), and query
    file (`.qry`).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Composer业务由四种不同类型的文件组成：模型文件（.cto）、脚本文件（.js）、访问控制列表（ACL）文件（.acl）和查询文件（.qry）。
- en: Network model file (.cto)
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络模型文件（.cto）
- en: 'A CTO file is composed of the following elements:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: CTO文件由以下元素组成：
- en: '| **Element** | **Description** |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| **元素** | **描述** |'
- en: '| A single namespace | Defines the composer model namespace; every `.cto` model
    file requires a namespace. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 单个命名空间 | 定义composer模型命名空间；每个.cto模型文件都需要一个命名空间。'
- en: '| Resources - asset | Anything of value that can be exchanged between parties.
    |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 资源 - 资产 | 可以在各方之间交换的任何有价值的东西。'
- en: '| Resources - participant | Business network member. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 资源 - 参与者 | 业务网络成员。'
- en: '| Resources - enum | A data type consisting of a set of named values. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 资源 - 枚举 | 由一组命名值组成的数据类型。'
- en: '| Resources - concept | Any object you want to model that is not one of the
    other types. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 资源 - 概念 | 你想要建模的任何对象，而不是其他类型的对象。'
- en: '| Resources - transactions | Defines the blockchain business logic. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 资源 - 交易 | 定义区块链业务逻辑。'
- en: '| Resources - events | Blockchain transaction notification. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| Resources - events | 区块链事务通知。 |'
- en: '| Import | Imports resources from other namespaces. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| Import | 从其他命名空间导入资源。 |'
- en: The composer model language, like other programming languages, has data types
    including String, Double, Integer, and so on.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Composer 模型语言，就像其他编程语言一样，具有包括 String、Double、Integer 等数据类型。
- en: Let's see some samples of assets, participants, transactions, and events.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些资产、参与者、交易和事件的示例。
- en: IBM Bluemix provides a browser version playground without installation; we can
    use this tool to do a quick prototype. Here is the link: [https://composer-playground.mybluemix.net/](https://composer-playground.mybluemix.net/).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: IBM Bluemix 提供了一个无需安装的浏览器版本 Playground；我们可以使用这个工具快速进行原型设计。这是链接：[https://composer-playground.mybluemix.net/](https://composer-playground.mybluemix.net/)。
- en: '![](img/f9a2bf09-9240-4f49-91db-595676081718.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9a2bf09-9240-4f49-91db-595676081718.png)'
- en: 'Connect to basic-sample-network. Playground will generate some default sample
    assets, participants, transactions, and events for you, for example:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到基本样本网络。 Playground 将为您生成一些默认的示例资产、参与者、交易和事件，例如：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A `namespace org.example.basic` was defined in `sample.cto.SampleAsset` and
    is an example of an `Asset` class. It defines an asset whose name is followed
    by an identifying `field.o` `String assetId`: a field of the `SampleAsset`.`-->
    SampleParticipant owner`:  field point to `SampleParticipant` `instance.SampleParticipant`
    is an example of a `Participant` class, the syntax is similar to `SampleAsset.SampleTransaction`
    is an example of a transaction `class.SampleEvent` is an example of an event class.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `sample.cto.SampleAsset` 中定义了一个 `namespace org.example.basic`，这是一个 `Asset`
    类的示例。它定义了一个资产，其名称后跟着一个标识性的 `field.o` `String assetId`：`SampleAsset` 的一个字段。`-->
    SampleParticipant owner`：字段指向 `SampleParticipant` `instance.SampleParticipant`
    是 `Participant` 类的一个示例，语法与 `SampleAsset.SampleTransaction` 是一个事务的示例 `class.SampleEvent`
    是一个事件类的示例。
- en: Script file (.js)
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本文件 (.js)
- en: 'We define transactions and events in the model file, a script file that implements
    these transaction functions. Decorators within *comments* are used to annotate
    the functions with metadata required for transaction processing, for example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在模型文件中定义了交易和事件，脚本文件实现了这些交易功能。注释中的装饰器用于用于事务处理所需的元数据注释函数，例如：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the `sampleTransaction` function, the `@param` tag is followed by the resource
    name of the transaction that triggers the transaction processor function. `@transaction`
    marks this function as a transaction processor function.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `sampleTransaction` 函数中，`@param` 标签后跟着触发事务处理器函数的事务的资源名称。 `@transaction` 将此函数标记为事务处理器函数。
- en: Access control list (ACL) file (.acl)
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问控制列表 (ACL) 文件 (.acl)
- en: 'An ACL file defines the permission of the participants in the business network,
    for example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ACL 文件定义了业务网络中参与者的权限，例如：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding ACL example, it specifies that the participant is `SampleParticipant`.
    Any instance registered as `SampleParticipant` can perform `ALL` operations on
    all instances of `org.example.SampleAsset`. This transaction is triggered when
    the `SampleAsset` owner is the same as the participant who submitted a transaction.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的 ACL 示例中，指定参与者为 `SampleParticipant`。任何注册为 `SampleParticipant` 的实例都可以对所有的
    `org.example.SampleAsset` 实例执行 `ALL` 操作。此事务在 `SampleAsset` 的所有者与提交事务的参与者相同时触发。
- en: Query file (.qry)
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询文件 (.qry)
- en: 'A query file defines the queries that are used to return data about the blockchain
    world state. The query syntax is quite similar to SQL language, for example:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 查询文件定义了用于返回关于区块链世界状态的数据的查询。查询语法与 SQL 语言非常相似，例如：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Designing business models
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计业务模型
- en: Now that we have reviewed the basic composer model language and structure, it
    is time to implement an insurance claim using Hyperledger Composer.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经审查了基本的 Composer 模型语言和结构，是时候使用 Hyperledger Composer 实现一个保险理赔了。
- en: 'For simplicity''s sake, we will allow participants to have permission to read
    and write for all resources in this example. Remove the sample resource related
    to ACL and update the rule as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为简单起见，我们将允许参与者在此示例中有权限读取和写入所有资源。删除与 ACL 相关的示例资源，并更新规则如下：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With simplified ACL, we start to work on our model file as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 简化后的 ACL，我们开始按照以下方式处理我们的模型文件：
- en: Rename `sample.cto` as `insurance-claim.cto`
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `sample.cto` 重命名为 `insurance-claim.cto`
- en: Change namespace to `com.packt.quickstart.claim` and remove the remaining code
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将命名空间更改为 `com.packt.quickstart.claim` 并删除其余代码
- en: Define the participants and assets
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义参与者和资产
- en: 'We wrote a chaincode called `claimcontract.go` in [*Chapter 16*](d750faf6-ca67-49d3-b78b-5837c3789633.xhtml), *Exploring
    an Enterprise Blockchain Application using Hyperledger Fabric*, that defines a
    struct for insuree, broker insurer, and claim. We can define participants and
    assets similar to this struct. It is quite straightforward, as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第16章*](d750faf6-ca67-49d3-b78b-5837c3789633.xhtml)中编写了一个名为`claimcontract.go`的链码，*使用Hyperledger
    Fabric探索企业区块链应用程序*，该链码定义了被保险人、经纪人、保险人和索赔的结构。我们可以类似于这个结构定义参与者和资产。如下所示，这非常简单：
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Define the transactions and events. By using the `Init` function, we onboard
    insuree, as follows:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义交易和事件。通过使用`Init`函数，我们登记被保险人，如下所示：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Composer's JavaScript API provides CRUD to create resources, including the participant.
    For the insurer and broker, we will use this approach. We will explain this in
    more detail when we do testing.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Composer的JavaScript API提供了用于创建资源（包括参与者）的CRUD。对于保险人和经纪人，我们将使用这种方法。我们在进行测试时会更详细地解释这一点。
- en: 'Define `ReportLost`: An insuree reports a claim to a broker—this starts a claim,
    as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`ReportLost`：被保险人向经纪人报告索赔—这启动了一个索赔，如下所示：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Define `RequestedInfo`: A broker provides the requested information, as follows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`RequestedInfo`：经纪人提供请求的信息，如下所示：
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Define `SubmitClaim`: A broker submits a claim to an issuer.'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`SubmitClaim`：经纪人向发行人提交索赔。
- en: 'Define `ConfirmClaimSubmission`: An issuer confirms the claim.'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`ConfirmClaimSubmission`：发行人确认索赔。
- en: 'Define `ApproveClaim`: An issuer process and approves the claim.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`ApproveClaim`：发行人处理并批准索赔。
- en: Step 8, 9, and 10 are transaction functions, and are very similar to step 7.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤8、9和10是交易函数，与步骤7非常相似。
- en: We have defined all of our transactions, participants, and assets in the model
    file. As a next step, we will implement the transaction we defined in the model
    file.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在模型文件中定义了所有的交易、参与者和资产。作为下一步，我们将实现模型文件中定义的交易。
- en: Implementing the business transaction function
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现业务交易函数
- en: We learned how to implement a transaction function in the previous section by
    reviewing `SampleTransaction`. Following a similar approach, we will implement
    an insurance claim transaction function. Rename `sample.js` to `logic.js`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过审查`SampleTransaction`在前一节学习了如何实现交易函数。按照类似的方法，我们将实现一个保险索赔交易函数。将`sample.js`重命名为`logic.js`。
- en: 'Implement the `Init` function, as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`Init`函数，如下所示：
- en: '[PRE15]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Implement `ReportLost` and, set up and create a claim, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`ReportLost`，设置并创建索赔，如下所示：
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Implement `RequestedInfo` to verify and update the claim status, as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`RequestedInfo`以验证和更新索赔状态，如下所示：
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Implement `SubmitClaim`, `ConfirmClaimSubmission`, and `ApproveClaim`. These
    functions are similar to `RequestedInfo`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`SubmitClaim`、`ConfirmClaimSubmission`和`ApproveClaim`。这些功能与`RequestedInfo`类似。
- en: Testing in the playground
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在游乐场进行测试
- en: 'We just implemented all model and logic files in the previous section, so it
    is time to test our composer application:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚在前一节中实现了所有的模型和逻辑文件，所以现在是测试我们的composer应用程序的时候了：
- en: Click on the Deploy changes button on the left bottom panel of the playground.
    This will deploy the composer code.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击游乐场左下角的部署更改按钮。这将部署composer代码。
- en: 'Click Test link on the top navigation bar. It will pop up the submit transaction
    page.  Select the  init method from the transaction type drop down. Enter the
    JSON value, as shown in the following screenshot; the input data is the same as
    what we tested in *[Chapter 16](d750faf6-ca67-49d3-b78b-5837c3789633.xhtml)*,
    *Exploring an Enterprise Blockchain Application using Hyperledger Fabric*.  Instantiate
    the fabric chaincode step. Submit the transaction, as follows:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击顶部导航栏上的测试链接。将弹出提交交易页面。从交易类型下拉菜单中选择`init`方法。输入JSON值，如下截图所示；输入数据与我们在*[第16章](d750faf6-ca67-49d3-b78b-5837c3789633.xhtml)*中测试的相同，*使用Hyperledger
    Fabric探索企业区块链应用程序*。实例化面料链码步骤。提交交易，如下所示：
- en: '![](img/ade5d17a-471c-4b00-b442-19f15a8df835.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ade5d17a-471c-4b00-b442-19f15a8df835.png)'
- en: 'If transaction submission is successful, we will be able to see that the insuree
    participant has been created, for example:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果交易提交成功，我们将能够看到被保险人参与者已创建，例如：
- en: '![](img/3e4a61dc-1d58-4057-b796-0ab40df02d0b.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e4a61dc-1d58-4057-b796-0ab40df02d0b.png)'
- en: 'Now, let''s onboard the broker and insurer. Click company in the participant
    section and click Create New Participant. Enter the broker data in, the same way
    that we did it for the `chaincodeInvokeAddBroker` step in [*Chapter 16*](d750faf6-ca67-49d3-b78b-5837c3789633.xhtml), *Exploring
    an Enterprise Blockchain Application using Hyperledger Fabric*. Click Create New, as
    follows:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们入职经纪人和保险人。在参与者部分中点击公司，然后点击创建新参与者。输入经纪人数据，方式与我们在[*第16章*](d750faf6-ca67-49d3-b78b-5837c3789633.xhtml)中的`chaincodeInvokeAddBroker`步骤相同，*使用Hyperledger
    Fabric探索企业区块链应用程序*。点击创建新，如下所示：
- en: '![](img/afef3a92-82ec-41e6-9b7e-3c0a09325620.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afef3a92-82ec-41e6-9b7e-3c0a09325620.png)'
- en: 'If the transaction submission succeeds, this will onboard the broker. Repeat
    this same step to onboard the insurer, as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果交易提交成功，这将入职经纪人。重复相同步骤以入职保险人，如下所示：
- en: '![](img/c8586ea8-2954-48ef-a5eb-bf817085a477.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8586ea8-2954-48ef-a5eb-bf817085a477.png)'
- en: 'Submit `ReportLost`, as follows:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交`ReportLost`，如下所示：
- en: '![](img/f75916ac-c3a1-4a37-86e6-f5dfb8cee350.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f75916ac-c3a1-4a37-86e6-f5dfb8cee350.png)'
- en: 'Here is the result:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '![](img/caaca3a7-320c-4f2f-a4e9-ed695393111f.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/caaca3a7-320c-4f2f-a4e9-ed695393111f.png)'
- en: 'Test `RequestedInfo` with the following result:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下结果测试`RequestedInfo`：
- en: '![](img/7ce12e84-562c-4888-9674-18aac15154d1.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ce12e84-562c-4888-9674-18aac15154d1.png)'
- en: The remaining steps (`SubmitClaim`, `ConfirmClaimSubmission`, and `ApproveClaim`)
    are very similar to `RequestedInfo`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的`SubmitClaim`，`ConfirmClaimSubmission`和`ApproveClaim`步骤与`RequestedInfo`非常相似。
- en: Deploying a business network
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署业务网络
- en: 'We have tested the composer application in the playground, so next we will
    deploy it to the blockchain:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在游乐场中测试了composer应用程序，接下来我们将把它部署到区块链上：
- en: Create a folder called `insurance-claim-network`, and navigate to the folder.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`insurance-claim-network`的文件夹，并导航到该文件夹。
- en: 'Generate a business network project template, as follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成业务网络项目模板，如下所示：
- en: '[PRE18]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'It will prompt a few questions. Enter `insurance-claim-network` as the network
    name and choose the empty template network, as shown in the following screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 它会提示几个问题。输入`insurance-claim-network`作为网络名称，并选择空模板网络，如下截图所示：
- en: '![](img/d5a8d81c-eb8e-4ed6-bc0f-8d6ab44dfecf.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5a8d81c-eb8e-4ed6-bc0f-8d6ab44dfecf.png)'
- en: This will generate a few files with a default template. Replace the contents
    of `com.packt.quickstart
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一些具有默认模板的文件。替换`com.packt.quickstart`的内容，如下所示：
- en: .claim.cto` with our earlier tested model file.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 用我们之前测试过的模型文件`.claim.cto`。
- en: Create a new folder called `lib`, under the `lib` folder, and copy the tested
    `logic.js` in here.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`lib`的新文件夹，在`lib`文件夹下，将测试过的`logic.js`复制到这里。
- en: 'Replace `permissions.acl` with the tested `acl` file, as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 用被测试过的`acl`文件替换`permissions.acl`，如下所示：
- en: '![](img/d5be1d79-2180-4395-b6e3-7c2a45192f5f.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5be1d79-2180-4395-b6e3-7c2a45192f5f.png)'
- en: 'Start Hyperledger Fabric, as follows:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Hyperledger Fabric，如下所示：
- en: '[PRE19]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will create `PeerAdminCard`, as shown in the following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建`PeerAdminCard`，如下截图所示：
- en: '![](img/219ceaff-176a-4400-bc92-f00cab9c992a.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/219ceaff-176a-4400-bc92-f00cab9c992a.png)'
- en: 'Generate a business network archive. From the `insurance-claim-network` directory,
    run the following command:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成业务网络档案。从`insurance-claim-network`目录中运行以下命令：
- en: '[PRE20]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will generate `insurance-claim-network@0.0.1.bna`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成`insurance-claim-network@0.0.1.bna`。
- en: 'Install the business network. From the `insurance-claim-network` directory,
    run the following command:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装业务网络。从`insurance-claim-network`目录中运行以下命令：
- en: '[PRE21]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Start the business network. From the `insurance-claim-network` directory, run
    the following command:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动业务网络。从`insurance-claim-network`目录中运行以下命令：
- en: '[PRE22]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Import the network admin card. From the `insurance-claim-network` in directory,
    run the following command. This will import `insurance-claim-network` to the network:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入网络管理员卡。从`insurance-claim-network`目录中运行以下命令。这将会将`insurance-claim-network`导入到网络中：
- en: '[PRE23]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Check if the business network has been deployed successfully. From the `insurance-claim-network`
    directory, run the following command:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查业务网络是否已成功部署。从`insurance-claim-network`目录中运行以下命令：
- en: '[PRE24]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The result should look as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应如下所示：
- en: '![](img/3c254c5e-e792-4b67-b58c-e23ddb966d9c.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c254c5e-e792-4b67-b58c-e23ddb966d9c.png)'
- en: Checking if the business network been deployed successfully
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 检查业务网络是否已成功部署
- en: Integrating with REST server
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与REST服务器集成
- en: We just deployed `insurance-claim-network` in the fabric network. The next step
    is to build an insurance-claim client API to interact with the smart contract
    function in the network. The Hyperledger Composer REST server can be used to generate
    a REST API. A REST client can call these end point functions and interact with
    the business network chaincode from the Fabric blockchain.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚在 fabric 网络中部署了`insurance-claim-network`。下一步是构建一个保险索赔客户端 API，与网络中的智能合约函数进行交互。Hyperledger
    Composer REST 服务器可用于生成 REST API。REST 客户端可以调用这些端点函数，并与 Fabric 区块链上的业务网络链码交互。
- en: Generating the Hyperledger Composer REST API
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成 Hyperledger Composer REST API
- en: 'Run the following command to generate a composer server API:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令生成 composer 服务器 API：
- en: '[PRE25]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Enter `admin@insurance-claim-network` from the business network card, as shown
    in the following screenshot:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 从业务网络卡中输入`admin@insurance-claim-network`，如下截图所示：
- en: '![](img/0560aa28-be3c-4859-87c6-bb1dbd231d07.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0560aa28-be3c-4859-87c6-bb1dbd231d07.png)'
- en: Entering business network card
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 输入业务网络卡
- en: This will a generate the REST API and expose it as `http://serverIP:3000` and
    `http:// serverIP:3000/explorer`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成 REST API，将其暴露为`http://serverIP:3000`和`http://serverIP:3000/explorer`。
- en: 'Open the explore URL. You will see the generated REST endpoints, as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览 URL。你会看到生成的 REST 端点，如下所示：
- en: '![](img/ed44ad1c-4331-47d1-b643-c4ab503c1b71.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed44ad1c-4331-47d1-b643-c4ab503c1b71.png)'
- en: Let's try a number of methods to demonstrate how these endpoints interact with
    the fabric network.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试多种方法来演示这些端点是如何与 fabric 网络进行交互。
- en: 'Select the `init Post` method from endpoints, provide the post JSON data, and
    click the  Try it out! button. The example of JSON data is shown as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 从端点中选择`init Post`方法，并提供 post JSON 数据，然后点击 Try it out! 按钮。JSON 数据示例如下所示：
- en: '[PRE26]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here is a screenshot that shows the result after clicking the Try it out! button:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这是点击 Try it out! 按钮后显示的结果截图：
- en: '![](img/7c0c3f7c-85ce-43b3-9c53-43395bda5c3f.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c0c3f7c-85ce-43b3-9c53-43395bda5c3f.png)'
- en: Example of JSON data
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 数据示例
- en: The API will call the `Init` chaincode in the fabric network and return the
    response to the browser.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: API 将调用 fabric 网络中的`Init`链码，并将响应返回给浏览器。
- en: 'Select a company using a post method to create an insuree. Enter this JSON
    request as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 post 方法选择一个公司来创建被保险人。输入以下 JSON 请求如下：
- en: '[PRE27]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You should see a successful response, similar to the one shown in the following
    screenshot:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到一个成功的返回，类似于下面截图中展示的：
- en: '![](img/90c1faae-273d-4137-ae1e-fbbdf8423c48.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/90c1faae-273d-4137-ae1e-fbbdf8423c48.png)'
- en: Selecting a company using a post method to create insuree, enter this JSON request
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 post 方法选择一个公司来创建被保险人，输入以下 JSON 请求
- en: Select the `ReportLost Post` method from endpoints, provide the post JSON data,
    and click **T**ry it out!**:**
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 从端点中选择`ReportLost Post`方法，并提供 post JSON 数据，然后点击**T**ry it out!**:**
- en: '[PRE28]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You should see a success response back from the blockchain.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会从区块链中得到一个成功的响应。
- en: 'To verify that the claim was successfully created in the network, you can select
    the claim get method and click Try it out! You should be able to get the claim
    result, as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证索赔是否成功在网络中创建，您可以选择索赔 get 方法并点击 Try it out! 您应该能够获取到索赔结果，如下所示：
- en: '![](img/309cda11-a8a9-469a-94b6-2413fd67ca36.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/309cda11-a8a9-469a-94b6-2413fd67ca36.png)'
- en: Verifying if the claim was sucessfully created in the network
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 验证网络中索赔是否成功创建
- en: Other insurance claims endpoint APIs will be quite similar to the ones we have
    explored.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 其他保险索赔端点 API 将会和我们探索过的很相似。
- en: Summary
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have reached the end of this chapter. In this chapter, we have overviewed
    Hyperledger Composer and installed the related tools. We used composer model language
    to develop the same insurance claim use case as in [*Chapter 16*](d750faf6-ca67-49d3-b78b-5837c3789633.xhtml), *Exploring
    an Enterprise Blockchain Application Using Hyperledger Fabric*, and deployed it
    to the fabric network. Lastly, we integrated the application with a composer REST
    server to generate a client API and interacted with these APIs from the web.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达本章末尾。在这一章中，我们概述了 Hyperledger Composer 并安装了相关工具。我们使用 composer 模型语言开发了同样的保险索赔用例，就像[*第16章*](d750faf6-ca67-49d3-b78b-5837c3789633.xhtml)中所探索过的*使用
    Hyperledger Fabric 探索企业区块链应用*，并将其部署到 fabric 网络中。最后，我们将应用与 composer REST 服务器集成，生成客户端
    API，并从 web 中与这些 API 进行交互。
- en: At this point, you should be comfortable working with Hyperledger Composer.
    Now that we're at the end of this chapter, we have learned about the two most
    popular public and enterprise blockchains. As a blockchain developer, you should
    have the basic blockchain knowledge to be able to write your blockchain application.
    In the next chapter, we will discuss the various real world blockchain use cases.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一步，你应该已经熟悉了 Hyperledger Composer 的工作方式。现在我们已经到了本章的结尾，我们已经了解了两种最流行的公共和企业级区块链。作为一名区块链开发者，你应该具备基本的区块链知识，以便能够编写你自己的区块链应用程序。在下一章中，我们将讨论各种真实世界的区块链使用案例。
