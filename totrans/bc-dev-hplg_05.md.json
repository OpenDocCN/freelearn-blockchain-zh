["```\n\"exporterorg\": {\n  \"name\": \"peerExporterOrg\",\n  \"mspid\": \"ExporterOrgMSP\",\n  \"ca\": {\n    \"url\": \"https://localhost:7054\",\n    \"name\": \"ca-exporterorg\"\n  },\n  \"peer1\": {\n    \"requests\": \"grpcs://localhost:7051\",\n    \"events\": \"grpcs://localhost:7053\",\n    \"server-hostname\": \"peer0.exporterorg.trade.com\",\n    \"tls_cacerts\": \"../network/crypto-config/peerOrganizations/exporterorg.trade.com/peers/peer0.exporterorg.trade.com/msp/tlscacerts/tlsca.exporterorg.trade.com-cert.pem\"\n  }\n},\n```", "```\nvar FOUR_ORG_MEMBERS_AND_ADMIN = [\n  { role: { name: 'member', mspId: 'ExporterOrgMSP' } },\n  { role: { name: 'member', mspId: 'ImporterOrgMSP' } },\n  { role: { name: 'member', mspId: 'CarrierOrgMSP' } },\n  { role: { name: 'member', mspId: 'RegulatorOrgMSP' } },\n  { role: { name: 'admin', mspId: 'TradeOrdererMSP' } }\n];\nvar ALL_FOUR_ORG_MEMBERS = {\n  identities: FOUR_ORG_MEMBERS_AND_ADMIN,\n  policy: {\n    '4-of': [{ 'signed-by': 0 }, { 'signed-by': 1 }, { 'signed-by': 2 }, { 'signed-by': 3 }]\n  }\n};\n```", "```\nvar Constants = require('./constants.js');\nvar tempdir = Constants.tempdir;\nmodule.exports.KVS = path.join(tempdir, 'hfc-test-kvs');\nmodule.exports.storePathForOrg = function(org) {\n  return module.exports.KVS + '_' + org;\n};\n```", "```\nvar tempdir = \"../network/client-certs\";\n```", "```\nfabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.exporterorg.trade.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/cc58284b6af2c33812cfaef9e40b8c911dbbefb83ca2e7564e8fbf5e7039c22e_sk -b admin:adminpw -d\n```", "```\nvar cryptoSuite = client.getCryptoSuite();\nif (!cryptoSuite) {\n  cryptoSuite = Client.newCryptoSuite();\n  if (userOrg) {\n    cryptoSuite.setCryptoKeyStore(Client.newCryptoKeyStore({path: module.exports.storePathForOrg(ORGS[userOrg].name)}));\n    client.setCryptoSuite(cryptoSuite);\n  }\n}\n```", "```\nvar member = new User(adminUser);\nmember.setCryptoSuite(cryptoSuite);\n```", "```\nvar copService = require('fabric-ca-client/lib/FabricCAClientImpl.js');\nvar caUrl = ORGS[userOrg].ca.url;\nvar cop = new copService(caUrl, tlsOptions, ORGS[userOrg].ca.name, cryptoSuite);\nreturn cop.enroll({\n  enrollmentID: adminUser,\n  enrollmentSecret: adminPassword\n}).then((enrollment) => {\n  console.log('Successfully enrolled admin user');\n  return member.setEnrollment(enrollment.key, enrollment.certificate, ORGS[userOrg].mspid);\n})\n```", "```\nvar enrollUser = new User(username);\nreturn cop.register({\n  enrollmentID: username,\n  role: 'client',\n  affiliation: 'org1.department1'\n}, member).then((userSecret) => {\n  userPassword = userSecret;\n  return cop.enroll({\n    enrollmentID: username,\n    enrollmentSecret: userSecret\n  });\n}).then((enrollment) => {\n  return enrollUser.setEnrollment(enrollment.key, enrollment.certificate, ORGS[userOrg].mspid);\n}).then(() => {\n  return client.setUserContext(enrollUser, false);\n}).then(() => {\n  return client.saveUserToStateStore();\n})\n```", "```\nvar client = new Client();\nvar orderer = client.newOrderer(\n  ORGS.orderer.url,\n  {\n    'pem': caroots,\n    'ssl-target-name-override': ORGS.orderer['server-hostname']\n  }\n);\n```", "```\nutils.setConfigSetting('key-value-store', 'fabric-client/lib/impl/FileKeyValueStore.js');\n```", "```\nlet envelope_bytes = fs.readFileSync(path.join(__dirname, Constants.networkLocation, Constants.channelConfig));\nconfig = client.extractChannelConfig(envelope_bytes);\n```", "```\nClientUtils.getSubmitter(client, true /*get the org admin*/, org)\n.then((admin) => {\n  var signature = client.signChannelConfig(config);\n  signatures.push(signature);\n});\n```", "```\nlet tx_id = client.newTransactionID();\nvar request = {\n  config: config,\n  signatures : signatures,\n  name : channel_name,\n  orderer : orderer,\n  txId : tx_id\n};\nreturn client.createChannel(request);\n```", "```\nvar Constants = require('./constants.js');\nvar createChannel = require('./create-channel.js');\ncreateChannel.createChannel(Constants.CHANNEL_NAME).then(() => { ...... })\n```", "```\nvar channel = client.newChannel(channel_name);\nchannel.addOrderer(\n  client.newOrderer(\n    ORGS.orderer.url,\n    {\n      'pem': caroots,\n      'ssl-target-name-override': ORGS.orderer['server-hostname']\n    }\n  )\n);\ntx_id = client.newTransactionID();\nlet request = { txId : tx_id };\nreturn channel.getGenesisBlock(request);\n```", "```\nreturn ClientUtils.getSubmitter(client, true /* get peer org admin */, org);\nfor (let key in ORGS[org])\n  if (ORGS[org].hasOwnProperty(key)) {\n    if (key.indexOf('peer') === 0) {\n      data = fs.readFileSync(path.join(__dirname, ORGS[org][key]['tls_cacerts']));\n      targets.push(\n        client.newPeer(\n          ORGS[org][key].requests,\n          {\n            pem: Buffer.from(data).toString(),\n            'ssl-target-name-override': ORGS[org][key]['server-hostname']\n          }\n        )\n      );\n    }\n  }\n}\ntx_id = client.newTransactionID();\nlet request = {\n  targets : targets,\n  block : genesis_block,\n  txId : tx_id\n};\nlet sendPromise = channel.joinChannel(request, 40000);\n```", "```\nvar joinChannel = require('./join-channel.js');\njoinChannel.processJoinChannel();\n```", "```\nvar request = {\n  targets: targets,\n  chaincodePath: chaincode_path,\n  chaincodeId: Constants.CHAINCODE_ID,\n  chaincodeVersion: chaincode_version\n};\nclient.installChaincode(request);\n```", "```\nif (proposalResponses && proposalResponses[i].response && proposalResponses[i].response.status === 200) {\n  one_good = true;\n  logger.info('install proposal was good');\n}\n```", "```\nprocess.env.GOPATH = path.join(__dirname,Constants.chaincodeLocation);\n```", "```\nvar installCC = require('./install-chaincode.js');\ninstallCC.installChaincode(Constants.CHAINCODE_PATH, Constants.CHAINCODE_VERSION);\n```", "```\nchannel.initialize();\n```", "```\nvar tx_id = client.newTransactionID();\nvar request = {\n  chaincodePath: chaincode_path,\n  chaincodeId: Constants.CHAINCODE_ID,\n  chaincodeVersion: version,\n  fcn: funcName,\n  args: argList,\n  txId: tx_id,\n  'endorsement-policy': Constants.TRANSACTION_ENDORSEMENT_POLICY\n};\nchannel.sendInstantiateProposal(request, 300000);\n```", "```\nvar proposalResponses = results[0];\nvar proposal = results[1];\nvar request = {\n  proposalResponses: proposalResponses,\n  proposal: proposal\n};\nchannel.sendTransaction(request);\n```", "```\nvar instantiateCC = require('./instantiate-chaincode.js');\ninstantiateCC.instantiateOrUpgradeChaincode(\n  Constants.IMPORTER_ORG,\n  Constants.CHAINCODE_PATH,\n  Constants.CHAINCODE_VERSION,\n  'init',\n  ['LumberInc', 'LumberBank', '100000', 'WoodenToys', 'ToyBank', '200000', 'UniversalFrieght', 'ForestryDepartment'],\n  false\n);\n```", "```\nCONTAINER ID    IMAGE    COMMAND    CREATED    STATUS    PORTS    NAMES\nb5fb71241f6d     dev-peer0.regulatororg.trade.com-tradecc-v0-cbbb0581fb2b9f86d1fbd159e90f7448b256d2f7cc0e8ee68f90813b59d81bf5    \"chaincode -peer.add...\"    About a minute ago    Up About a minute        dev-peer0.regulatororg.trade.com-tradecc-v0\n077304fc60d8    dev-peer0.importerorg.trade.com-tradecc-v0-49020d3db2f1c0e3c00cf16d623eb1dddf7b649fee2e305c4d2c3eb5603a2a9f    \"chaincode -peer.add...\"    About a minute ago    Up About a minute        dev-peer0.importerorg.trade.com-tradecc-v0\n8793002062d7    dev-peer0.carrierorg.trade.com-tradecc-v0-ec83c1904f90a76404e9218742a0fc3985f74e8961976c1898e0ea9a7a640ed2    \"chaincode -peer.add...\"    About a minute ago    Up About a minute        dev-peer0.carrierorg.trade.com-tradecc-v0\n9e5164bd8da1    dev-peer0.exporterorg.trade.com-tradecc-v0-dc2ed9ea732a90d6c5ffb0cd578dfb614e1ba14c2936b0ae785f30ea0f37da56    \"chaincode -peer.add...\"    About a minute ago    Up About a minute        dev-peer0.exporterorg.trade.com-tradecc-v0\n```", "```\ntx_id = client.newTransactionID();\nvar request = {\n  chaincodeId : Constants.CHAINCODE_ID,\n  fcn: funcName,\n  args: argList,\n  txId: tx_id,\n};\nchannel.sendTransactionProposal(request);\n```", "```\nvar request = {\n  proposalResponses: proposalResponses,\n  proposal: proposal\n};\nchannel.sendTransaction(request);\n```", "```\nvar invokeCC = require('./invoke-chaincode.js');\ninvokeCC.invokeChaincode(Constants.IMPORTER_ORG, Constants.CHAINCODE_VERSION, 'requestTrade', ['2ks89j9', '50000','Wood for Toys', 'Importer']);\n```", "```\nvar request = {\n  chaincodeId : Constants.CHAINCODE_ID,\n  fcn: funcName,\n  args: argList\n};\nchannel.queryByChaincode(request);\n```", "```\nvar queryCC = require('./query-chaincode.js');\nqueryCC.queryChaincode(Constants.EXPORTER_ORG, Constants.CHAINCODE_VERSION, 'getTradeStatus', ['2ks89j9'], 'Exporter');\n```", "```\nlet eh = client.newEventHub();\neh.setPeerAddr(\n  ORGS[org][key].events,\n  {\n    pem: Buffer.from(data).toString(),\n    'ssl-target-name-override': ORGS[org][key]['server-hostname']\n  }\n);\neh.connect();\neventhubs.push(eh);\n```", "```\nvar eventPromises = [];\neventhubs.forEach((eh) => {\n  let txPromise = new Promise((resolve, reject) => {\n    let handle = setTimeout(reject, 40000);\n    eh.registerBlockEvent((block) => {\n      clearTimeout(handle);\n      if(block.data.data.length === 1) {\n        var channel_header = block.data.data[0].payload.header.channel_header;\n        if (channel_header.channel_id === channel_name) {\n          console.log('The new channel has been successfully joined on peer '+ eh.getPeerAddr());\n          resolve();\n        }\n        else {\n          console.log('The new channel has not been succesfully joined');\n          reject();\n        }\n      }\n    });\n  });\n  eventPromises.push(txPromise);\n});\n```", "```\nlet sendPromise = channel.joinChannel(request, 40000);\nreturn Promise.all([sendPromise].concat(eventPromises));\n```", "```\neh.registerTxEvent(deployId.toString(),\n  (tx, code) => {\n    eh.unregisterTxEvent(deployId);\n    if (code !== 'VALID') {\n      console.log('The transaction was invalid, code = ' + code);\n      reject();\n    } else {\n      console.log('The transaction has been committed on peer '+ eh.getPeerAddr());\n      resolve();\n    }\n  }\n);\n```", "```\nnode createTradeApp.js\n```", "```\nnode runTradeScenarioApp.js\n```", "```\nvar express = require('express');\nvar bodyParser = require('body-parser');\nvar app = express();\nvar port = process.env.PORT || 4000;\napp.options('*', cors());\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: false\n}));\nvar server = http.createServer(app).listen(port, function() {});\n```", "```\nusername=<username>&orgName=<orgname>[&password=<password>]\n```", "```\napp.post('/login', async function(req, res) { ... });\n```", "```\nnode app.js\n```", "```\ncurl -s -X POST http://localhost:4000/login -H \"content-type: application/x-www-form-urlencoded\" -d 'username=Jim&orgName=importerorg'\n```", "```\n{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MjUwMDU4NTQsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6ImltcG9ydGVyb3JnIiwiaWF0IjoxNTI1MDAxNzE0fQ.yDX1PyKnpQAFC0mbo1uT1Vxgig0gXN9WNCwgp-1vj2g\",\"success\":true,\"secret\":\"LNHaVEXHuwUf\",\"message\":\"Registration successful\"}\n```", "```\ncurl -s -X POST http://localhost:4000/login -H \"content-type: application/x-www-form-urlencoded\" -d 'username=admin&orgName=importerorg&password=adminpw'\n```", "```\n{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MjUwMDU4OTEsInVzZXJuYW1lIjoiYWRtaW4iLCJvcmdOYW1lIjoiaW1wb3J0ZXJvcmciLCJpYXQiOjE1MjUwMDE3NTF9.BYIEBO_MZzQa52_LW2AKVhLVag9OpSiZsI3cYHI9_oA\",\"success\":true,\"message\":\"Login successful\"}\n```", "```\napp.post('/channel/create', async function(req, res) { ... });\napp.post('/channel/join', async function(req, res) { ... });\napp.post('/chaincode/install', async function(req, res) { ... });\napp.post('/chaincode/instantiate', async function(req, res) { ... });\n```", "```\ncurl -s -X POST http://localhost:4000/channel/create -H \"authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MjUwMDU4OTEsInVzZXJuYW1lIjoiYWRtaW4iLCJvcmdOYW1lIjoiaW1wb3J0ZXJvcmciLCJpYXQiOjE1MjUwMDE3NTF9.BYIEBO_MZzQa52_LW2AKVhLVag9OpSiZsI3cYHI9_oA\"\n```", "```\n{\"success\":true,\"message\":\"Channel created\"}\n```", "```\ncurl -s -X POST http://localhost:4000/chaincode/instantiate -H \"authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MjUwMDU4OTEsInVzZXJuYW1lIjoiYWRtaW4iLCJvcmdOYW1lIjoiaW1wb3J0ZXJvcmciLCJpYXQiOjE1MjUwMDE3NTF9.BYIEBO_MZzQa52_LW2AKVhLVag9OpSiZsI3cYHI9_oA\" -H \"content-type: application/json\" -d '{ \"ccpath\": \"github.com/trade_workflow\", \"ccversion\": \"v0\", \"args\": [\"LumberInc\", \"LumberBank\", \"100000\", \"WoodenToys\", \"ToyBank\", \"200000\", \"UniversalFreight\", \"ForestryDepartment\"] }'\n```", "```\n{\"success\":true,\"message\":\"Chaincode instantiated\"}\n```", "```\nif (req.username !== 'admin') {\n  res.statusCode = 403;\n  res.send('Not an admin user: ' + req.username);\n  return;\n}\n```", "```\ncurl -s -X POST http://localhost:4000/chaincode/requestTrade -H \"authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MjUwMDU4NTQsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6ImltcG9ydGVyb3JnIiwiaWF0IjoxNTI1MDAxNzE0fQ.yDX1PyKnpQAFC0mbo1uT1Vxgig0gXN9WNCwgp-1vj2g\" -H \"content-type: application/json\" -d '{ \"ccversion\": \"v0\", \"args\": [\"2ks89j9\", \"50000\",\"Wood for Toys\"] }'\n```", "```\n{\"success\":true,\"message\":\"Chaincode invoked\"}\n```", "```\ncurl -s -X GET http://localhost:4000/chaincode/getTradeStatus -H \"authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MjUwMDU4NTQsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6ImltcG9ydGVyb3JnIiwiaWF0IjoxNTI1MDAxNzE0fQ.yDX1PyKnpQAFC0mbo1uT1Vxgig0gXN9WNCwgp-1vj2g\" -H \"content-type: application/json\" -d '{ \"ccversion\": \"v0\", \"args\": [\"2ks89j9\"] }'\n```", "```\n{\"success\":true,\"message\":\"{\\\"Status\\\":\\\"REQUESTED\\\"}\"}\n```"]