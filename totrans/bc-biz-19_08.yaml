- en: 'Five Forces of Bitcoin - #5 Software Code Base'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll check out the last and probably the most core part
    of Bitcoin—its software code base. In this chapter, we''ll focus on the software
    side of things. We will learn about the protocols and functions that help Bitcoin
    function seamlessly. The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Bitcoin's software code case
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin's scripting language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin as an application platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Bitcoin's software code case
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we all know by now, the Bitcoin ecosystem consists of users, miners, software
    developers, and applications, such as exchanges, wallets, and blockchain explorers.
    Other stakeholders are expected to get increasingly involved as well. It is highly
    likely that regulators and government agencies will pay more attention to the
    ecosystem in future. The following diagram represents the Bitcoin ecosystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/417e24f3-3fc5-4b4a-b7a9-8a27c8fd355a.png)'
  prefs: []
  type: TYPE_IMG
- en: All participants in the Bitcoin network run software, which is developed and
    maintained by software engineers.
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin was first developed as a software protocol by Satoshi Nakamoto, who
    produced the initial code base. Shortly after the launch, Satoshi passed on the
    continued development and maintenance of the code to a group of software development
    enthusiasts who embraced the idea. This initial group has evolved into the core
    development team of Bitcoin. That said, Bitcoin is an open source project, and
    everyone can review the code and contribute with development proposals.
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin Core is the open source software code base that powers Bitcoin. It is
    known as the reference implementation of Bitcoin, meaning that it is the main
    point of reference of how the Bitcoin system functions. It determines all aspects
    of the system, such as wallets, transactions, block validation, node setup, and
    network protocol in the peer-to-peer network.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will move on to the key software applications used in the ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Wallets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wallets containing users' private keys are the tools necessary to store funds
    and make transactions on the blockchain. They are the most common user interface
    to the Bitcoin system. In a way, this is similar to web browsers being the most
    common user interface to the World Wide Web and its **HyperText Transfer Protocol**
    (**HTTP**) protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'All wallets contain cryptographic keys, giving access to coins on the blockchain.
    We covered cryptographic keys in detail in [Chapter 5](84ad3021-fae1-4e16-aaae-cee34e5d2bf6.xhtml),
    *Five Forces of Bitcoin – #2 Cryptography*. Wallets can be divided into several
    types, depending on the way they store and manage keys:'
  prefs: []
  type: TYPE_NORMAL
- en: We can have desktop wallets, representing software applications installed and
    run on PCs and laptops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also have mobile wallets, which are mobile applications installed on
    smartphones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, there are web wallets, which are accessed through a web browser.
    These wallets are stored on a third-party server, similar to some email account
    services, such as Gmail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Besides these software wallet applications, we can also have some wallets that
    are not software-based. These are hardware wallets and paper wallets:'
  prefs: []
  type: TYPE_NORMAL
- en: Hardware wallets are specialized hardware devices designed to securely store
    private keys. In their appearance, they are similar to USB sticks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paper wallets, on the other hand, are a surprisingly low-tech but highly effective
    solution against potential hacking attacks, as they simply store cryptographic
    keys on paper. Of course, such paper wallets must be securely physically stored
    to mitigate the risk of theft
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wallets that store keys offline are also known as cold storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll repeat this here again, as it is so important to remember: whoever controls
    the private keys, controls the funds on the blockchain, so any wallets must be
    managed, secured, and backed up with the greatest diligence.'
  prefs: []
  type: TYPE_NORMAL
- en: Wallets can be part of a full node that stores the entire blockchain, or a lightweight
    node that only stores its own transactions. Lightweight nodes rely on full nodes
    they connect to, in order to access the complete Bitcoin blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain explorer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides wallets, another commonly used software application is a blockchain
    explorer. A blockchain explorer is a tool used as a search engine for the blockchain.
    It allows us to track transactions, blocks, and address balances. In a way, this
    is similar to what Google Search does on the web.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several sites that act as blockchain explorers. One of the most frequently
    used explorer sites is [blockchain.info](http://blockchain.info). The following
    screenshot contains a quick preview of the blockchain explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e161af64-78da-4aee-9b93-708afe6e686d.png)'
  prefs: []
  type: TYPE_IMG
- en: Bitcoin's scripting language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's have a look at the programmability aspect of Bitcoin. Some blockchain
    cryptocurrencies are referred to as programmable money.
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin is indeed a programmable digital currency. It uses a programming language
    called Script in structuring and processing transactions. As the name suggests,
    this is a script type of language, which supports small programs called scripts.
    They automate the execution of a list of tasks, or commands, that otherwise could
    be executed one-by-one manually by a human operator.
  prefs: []
  type: TYPE_NORMAL
- en: Script is a high-level programming language with limited functionality, which
    is also domain-specific, meaning it's specialized to its application domain. Bitcoin's
    transaction script was specifically designed to be limited in scope, in order
    to require minimal processing and to be executable even on very simple devices.
    Its limited scope also enhances security because this leaves less space for coding
    errors. As you can imagine, any errors in a system processing money transfers
    can be quite costly.
  prefs: []
  type: TYPE_NORMAL
- en: Script is not a Turing-complete language, meaning that it is not general-purpose
    and cannot be used for programs solving just any problem. We'll talk more about
    Turing completeness when we discuss Ethereum in the coming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bitcoin''s transaction script includes functions that drive transaction execution.
    Each transaction script has the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: When a sender signs a transaction with a cryptographic key, the script locks
    the coins being sent, which are basically transaction inputs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These coins or transaction inputs can then be unlocked only by the receiver's
    private key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, the coins in the form of transaction outputs are transferred to
    the receiver's account and are controlled by the receiver's private key. Given
    these two steps of each Bitcoin transaction, the most common scripts used to validate
    transactions are a locking script and an unlocking script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is better illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79fe86d7-d03c-4b94-b288-e820b12b0a08.png)'
  prefs: []
  type: TYPE_IMG
- en: Bitcoin transaction scripts can also be a bit more complex, involving several
    conditions to unlock coins or transaction outputs. In this way, it becomes possible
    to structure multi-signature transactions requiring more than one private key
    to unlock the coins. This can be used to send money to multiple receivers in one
    transaction or to send money to an entity with multiple stakeholders who have
    joint control over the funds. For instance, a company with several partners, which
    receives Bitcoin may find multi-signature transactions a useful way to manage
    such transfers.
  prefs: []
  type: TYPE_NORMAL
- en: Another useful feature for transaction structuring are time locks. Time-bound
    conditions can be included in a script, so that funds are unlocked at a specific
    time or after a specific period of time following an event.
  prefs: []
  type: TYPE_NORMAL
- en: There are other useful logical conditions that can be included in Bitcoin transaction
    scripts. These include conditional clauses, such as `IF…THEN…ELSE`. You are probably
    familiar with the `IF` and other conditional functions, if you have used spreadsheet
    software, such as Excel, or studied any type of programming. The purpose and effect
    of such clauses in a Bitcoin script are similar. The funds are unlocked only if
    certain conditions are present.
  prefs: []
  type: TYPE_NORMAL
- en: The various programming features of the Bitcoin script language can be combined
    together to produce more complex conditional transactions than a simple payment.
    For example, the escrow account type of transaction structures can be programmed
    and automated with Bitcoin scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Traditional escrow accounts are typically created when two parties agree to
    a payment, but only if certain conditions have been met. The payer creates an
    escrow account with a respected third party (traditionally a bank) and transfers
    the funds to the escrow account. Once the necessary condition has been met, and
    the third party is able to verify that happened, it transfers the money to the
    intended recipient.
  prefs: []
  type: TYPE_NORMAL
- en: In Bitcoin, payment conditions can be programmed to automatically execute a
    transaction without any need for a third-party agent.
  prefs: []
  type: TYPE_NORMAL
- en: This logic and functionality is the basis for the smart contracts, which you
    may have heard of. We'll discuss smart contracts in more detail when we examine
    Ethereum, which takes smart contracts to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin as an application platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is another way we can look at Bitcoin—as an application platform.
  prefs: []
  type: TYPE_NORMAL
- en: The key features of the Bitcoin blockchain, such as programmability, transparency,
    immutability, integrity, accountability, auditability, decentralized consensus,
    timestamping, security, direct peer-to-peer interaction, and its open source nature,
    among others, can enable a large range of applications beyond payments.
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin was originally designed as a payment system, but the baseline technologies
    that power it and its architecture open up much broader use cases. Its building
    blocks are not accounts, balances, payments, and wallets. This is rather a user-friendly
    application interface. In a similar way, other use cases and applications can
    be built on the Bitcoin blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at a few examples.
  prefs: []
  type: TYPE_NORMAL
- en: Asset registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Digital notary and asset registers, the blockchain properties of Bitcoin, make
    it a perfect system for demonstrating proof of ownership. Blockchain technology
    can be a suitable and efficient solution for real estate property registers, shareholder
    registers, and other investment securities registers. It can be used to register
    the ownership and transfers of any kind of asset or property rights, including
    intangible property, such as trademarks, and intellectual property. Such implementations
    can be realized through separate dedicated blockchains, but the Bitcoin blockchain
    can be used as well.
  prefs: []
  type: TYPE_NORMAL
- en: The Bitcoin blockchain has some clear advantages over any alternative blockchains—it
    is the most secure, the most immutable, and decentralized one. This is the case
    because it is the first and foremost successfully operating public blockchain
    and has the largest pool of computing resources securing its decentralized consensus
    system. In this way, assets external to the blockchain can be digitalized and
    traded on it, in addition to intrinsic assets, such as Bitcoins.
  prefs: []
  type: TYPE_NORMAL
- en: Trade finance and crowdfunding campaigns are another possible use case for Bitcoin.
    Such applications are enabled by escrow, programmability, and smart contract functionality
    of a blockchain. Transaction scripts can be structured, so funds are released
    under certain conditions that can be time-bound or depending on achieving certain
    milestones.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that a retailer in Europe wants to import and sell merchandise from
    China (for example, consumer electronics, such as TVs, refrigerators, microwaves,
    and so on). The retailer orders the merchandise from the manufacturer, which then
    needs to be loaded on a cargo ship and sent to Europe. Both parties to this transaction
    need security and assurance that they will get what they expect out of it. Travel
    times for ships to deliver goods from China to Europe are around 1 month. This
    raises counterparty risk that one of the parties may not receive its fair share
    of the value exchange. From the perspective of the vendor (in this case, the Chinese
    manufacturer), they need to be confident that they will get paid, before they
    load the merchandise on the ship, because at this point shipping costs start getting
    incurred. The merchandise is also at risk of being stolen or otherwise compromised,
    while in transit. From the perspective of the buyer, the European retailer company,
    they need to be confident they will receive the merchandise safe and sound before
    they release the payment to the vendor.
  prefs: []
  type: TYPE_NORMAL
- en: 'This type of international trade transaction is currently managed by a trusted
    third party, such as a bank. International banks offer trade finance services,
    such as escrow accounts and letters of credit. The way this system works currently
    is that the buyer deposits the funds for the payment to the vendor in an escrow
    account held at a bank. The bank then issues a letter of credit to the vendor,
    guaranteeing the funds are there and will be released upon successful delivery
    and receipt of the goods. This is summarized in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f45a725-1b22-40a9-88ce-229499a89272.png)'
  prefs: []
  type: TYPE_IMG
- en: You can probably see how this process can be automated with a single smart contract
    on the blockchain. This new technological paradigm will render such transactions
    much cheaper and more efficient. A single technological interface will facilitate
    direct interaction between buyers and sellers, thus eliminating any potential
    rent-seeking behavior by intermediaries acting as gate-keepers. Moreover, this
    interface can be a public, open source technology, such as the Bitcoin blockchain,
    which is not controlled or owned by any single third party.
  prefs: []
  type: TYPE_NORMAL
- en: Crowdfunding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The crowdfunding use case can be enabled by smart contracts releasing funds
    to the project being funded upon reaching certain milestones or targets. This
    can be a viable decentralized alternative to Kickstarter or other existing start-up
    funding platforms. Again, the Bitcoin blockchain can provide the transaction protocol
    infrastructure to implement such solutions as a second-layer technology and user
    interfaces on top of it.
  prefs: []
  type: TYPE_NORMAL
- en: These are not just hypothetical use cases and applications. There are projects
    that have been developing such solutions already for a few years. One such application
    is called **colored coins**. The term comes from marking or coloring a nominal
    amount of Bitcoin to represent something more than the amount of digital currency
    itself. Colored coins can serve as a certificate of ownership of any kind of asset,
    commodity, or property, as we discussed. They use the Bitcoin transaction scripts
    to encode and store additional data related to such other assets or properties.
    This additional data is called **metadata**. When colored coins are created or
    issued by inserting the relevant piece of code in a Bitcoin transaction, this
    registers the external asset on the Bitcoin blockchain and creates an asset ID
    with a timestamp. When such colored coins are transacted on the Bitcoin blockchain,
    this effectively transfers the value and ownership of the external assets associated
    with the colored coins.
  prefs: []
  type: TYPE_NORMAL
- en: Another similar project is the Counterparty protocol. It is a secondary protocol
    layer built on top of Bitcoin. Similar to colored coins, it enables digitalization
    of ownership rights and transfer of any kind of external assets. It also features
    a decentralized asset exchange and smart contracts. The Counterparty protocol,
    in turn, can serve as a platform for other applications to be built on top of
    it, using its additional functionality and the security of the underlying Bitcoin
    blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have reached the end of this chapter! Now, you should be able to appreciate
    what a unique system Bitcoin is. It is the first and foremost implementation of
    a decentralized digital currency and peer-to-peer payment system. To recap, the
    five powers powering Bitcoin are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptography
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proof-of-Work consensus algorithm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: P2P network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software code base
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these create powerful network effects and are further reinforced with the
    growth of the Bitcoin community and ecosystem. With increased user adoption, more
    applications and use cases, the value of the network grows, which in turn creates
    incentives for further development and innovation leading to an even higher future
    growth potential.
  prefs: []
  type: TYPE_NORMAL
- en: We started our Bitcoin journey from the roots of the technology and reviewed
    its successful launch and evolution. We went on to examine more sophisticated
    concepts and related applications, such as smart contracts and digital property
    rights. We can refer to Bitcoin as Blockchain 1.0, as it is the first generation
    of this technology and it started this new industrial revolution.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to move on and see what Ethereum is all about.
  prefs: []
  type: TYPE_NORMAL
