["```\nnpm i -S web3 react-router-dom\n```", "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport MyWeb3 from 'web3'\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom'\n```", "```\nclass Main extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            products: [{\n                id: 1,\n                title: 'Clasic trendy shoes',\n                description: 'New unique shoes for sale',\n                date: Date.now(),\n                owner: '',\n                price: 12,\n                image: 'https://cdn.shopify.com/s/files/1/2494/8702/products/Bjakin-2018-Socks-Running-Shoes-for-Men-Lightweight-Sports-Sneakers-Colors-Man-Sock-Walking-Shoes-Big_17fa0d5b-d9d9-46a0-bdea-ac2dc17474ce_400x.jpg?v=1537755930'\n            }\n            productsHtml: [],\n            productDetails: [],\n            product: {},\n        }\n    }\n```", "```\n    bytes32(name) {\n        return myWeb3.utils.fromAscii(name)\n    }\n\n    render() {\n        return (\n            <div>\n                <Route path=\"/\" exact render={() => (\n                    <div>The dApp has been setup</div>\n                )} /> \n            </div>\n        )\n    }\n}\n```", "```\n// To be able to access the history in order to redirect users programmatically when opening a product\nMain = withRouter(Main)\n```", "```\nReactDOM.render(\n    <BrowserRouter>\n        <Main />\n    </BrowserRouter>,\ndocument.querySelector('#root'))\n```", "```\nnpm i -S webpack-dev-server\n```", "```\n{\n  \"name\": \"dapp\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"truffle-config.js\",\n  \"directories\": {\n    \"test\": \"test\"\n  },\n \"scripts\": {\n \"dev\": \"webpack-dev-server -d\"\n }\n}\n```", "```\nnpm run dev\n```", "```\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction Header() {\n    return (\n        <div className=\"header\">\n            <Link to=\"/\">ECOMMERCE</Link>\n            <div>\n                <Link to=\"/\">Home</Link>\n                <Link to=\"/sell\">Sell</Link>\n                <Link to=\"/orders\">Orders</Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n```", "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport MyWeb3 from 'web3'\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom'\nimport Header from './components/Header'\n```", "```\nrender() {\n    return (\n        <div>\n            <Route path=\"/\" exact render={() => (\n                <Header />\n            )} />\n        </div>\n    )\n}\n```", "```\nnpm i -S stylus stylus-loader\n```", "```\nrequire('babel-polyfill')\nconst webpack = require('webpack')\nconst html = require('html-webpack-plugin')\nconst path = require('path')\n\nmodule.exports = {\n    entry: ['babel-polyfill', './src/index.js'],\n    output: {\n        filename: 'bundle.js',\n        path: path.join(__dirname, 'dist')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                exclude: /node_modules/,\n                use: {\n                    loader: 'babel-loader'\n                }\n            }, {\n test: /\\.styl$/,\n exclude: /node_modules/,\n use: [\n {loader: 'style-loader'},\n {loader: 'css-loader'},\n {loader: 'stylus-loader'}\n ]\n }\n        ]\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin(),\n        new html({\n            title: \"dApp project\",\n            template: './src/index.ejs',\n            hash: true\n        })\n    ]\n}\n```", "```\nproductPadding = 20px\n\nbody\n    background-color: whitesmoke\n    font-family: sans-serif\n    margin: 0\n\nbutton\n    border: none\n    background-color: black\n    color: white\n    cursor: pointer\n    padding: 10px\n    width: 200px\n    height: 50px\n\n    &:hover\n        opacity: 0.9\n\ninput, textarea\n    padding: 20px\n    border: 1px solid black\n\n.header\n    background-color: black\n    color: white\n    padding: 15px\n    margin-bottom: 20px\n    text-align: center\n    display: flex\n    justify-content: space-around\n\n    a\n        color: white\n        text-decoration: none\n        margin-right: 10px\n\n        &:hover\n            color: lightgrey\n```", "```\nimport './index.styl'\n```", "```\nimport React from 'react'\nimport MyWeb3 from 'web3'\nimport Header from './Header'\n\nclass Home extends React.Component {\n    constructor() { super() }\n    render() {\n        return (\n            <div>\n                <Header />\n                <div className=\"products-container\">{this.props.productsHtml}</div>\n                <div className=\"spacer\"></div>\n            </div>\n        )\n    }\n}\n\nexport default Home\n```", "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport MyWeb3 from 'web3'\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom'\nimport Home from './components/Home'\nimport './index.styl'\n```", "```\nArray.prototype.asyncForEach = function (callback) {\n return new Promise(resolve => {\n for(let i = 0; i < this.length; i++) {\n callback(this[i], i, this)\n }\n resolve()\n })\n}\n```", "```\nconstructor(props) {\n    super(props)\n    // State object omitted for simplicity\n    this.setup()\n}\n```", "```\nasync setup() {\n    // Create the contract instance\n    window.myWeb3 = new MyWeb3(ethereum)\n    try {\n        await ethereum.enable();\n    } catch (error) {\n        console.error('You must approve this dApp to interact with it')\n    }\n    const user = (await myWeb3.eth.getAccounts())[0]\n    let products = []\n    for(let i = 0; i < this.state.products.length; i++) {\n        products[i] = this.state.products[i]\n        products[i].owner = user\n    }\n    this.setState({products})\n    this.displayProducts()\n}\n```", "```\nasync displayProducts() {\n    let productsHtml = []\n    await this.state.products.asyncForEach(product => {\n        productsHtml.push((\n            <div key={product.id} className=\"product\">\n                <img className=\"product-image\" src={product.image} />\n                <div className=\"product-data\">\n                    <h3 className=\"product-title\">{product.title}</h3>\n                    <div className=\"product-description\">{product.description.substring(0, 50) + '...'}</div>\n                    <div className=\"product-price\">{product.price} ETH</div>\n                    <button onClick={() => {\n                        this.setState({product})\n                        this.redirectTo('/product')\n                    }} className=\"product-view\" type=\"button\">View</button>\n                </div>\n            </div>\n        ))\n    })\n    this.setState({productsHtml})\n}\n```", "```\n    redirectTo(location) {\n this.props.history.push({\n pathname: location\n })\n }\n\n    render() {\n        return (\n            <div>\n                <Route path=\"/\" exact render={() => (\n <Home\n productsHtml={this.state.productsHtml}\n />\n                )} />\n            </div>\n        )\n    }\n}\n```", "```\n.products-container\n    display: grid\n    width: 80%\n    margin: auto\n    grid-template-columns: 1fr 1fr 1fr\n    justify-items: center\n    margin-top: 50px\n\n    .product\n        width: 400px\n        border: 1px solid black\n\n        .product-image\n            width: 100%\n            grid-column: 1 / 3\n            box-shadow: 0 3px 0px 0 lightgrey\n\n        .product-data\n            display: grid\n            grid-template-columns: 1fr 1fr\n            grid-template-rows: 50px 20px 40px\n            align-items: center\n            padding: 10px productPadding\n            grid-column-gap: productPadding\n            background-color: white\n\n            .product-description\n                font-size: 10pt\n\n            .product-price\n                font-size: 11pt\n\n            .product-view\n                width: 200px\n                grid-column: 2 / 3\n                margin-top: 50px\n                height: 50px\n\n.spacer\n    height: 200px\n    width: 100%\n```", "```\nimport React from 'react'\nimport Header from './Header'\n\nclass Product extends React.Component {\n    constructor() { super() }\n    render() {\n        return (\n            <div>\n                <Header />\n                <div className=\"product-details\">\n                    <img className=\"product-image\" src={this.props.product.image} />\n                    <div className=\"product-data\">\n                        <h3 className=\"product-title\">{this.props.product.title}</h3>\n                        <ul className=\"product-description\">\n                            {this.props.product.description.split('\\n').map((line, index) => (\n                                <li key={index}>{line}</li>\n                            ))}\n                        </ul>\n                        <div className=\"product-data-container\">\n                            <div className=\"product-price\">{this.props.product.price} ETH</div>\n                            <div className=\"product-quantity\">{this.props.product.quantity} units available</div>\n                        </div>\n                        <button onClick={() => {\n                            this.props.redirectTo('/buy')\n                        }} className=\"product-buy\" type=\"button\">Buy</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Product\n```", "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport MyWeb3 from 'web3'\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom'\nimport Home from './components/Home'\nimport Product from './components/Product'\nimport './index.styl'\n\nclass Main extends React.Component {\n    // Omitted previous code to keep the demonstration short \n\n    render() {\n        return (\n            <div>\n                <Route path=\"/\" exact render={() => (\n                    <Home\n                        productsHtml={this.state.productsHtml}\n                    />\n                )} />\n <Route path=\"/product\" render={() => (\n <Product\n product={this.state.product}\n />\n                )} />\n            </div>\n        )\n    }\n}\n```", "```\n.product-details\n    display: grid\n    width: 70%\n    margin: auto\n    grid-template-columns: 70% 30%\n    grid-template-rows: 1fr\n    margin-bottom: 50px\n    grid-column-gap: 40px\n\n    .product-image\n        grid-column: 1 / 2\n        justify-self: center\n\n    .product-title, .product-description, .product-price, .product-buy\n        grid-column: 2 / 3\n\n    .product-description\n        white-space: pre-wrap\n        line-height: 20pt\n\n    .product-data-container\n        display: flex\n        justify-content: space-between\n        margin-bottom: 20px\n```", "```\nimport React, { Component } from 'react'\nimport Header from './Header'\n```", "```\nclass Buy extends Component {\n    constructor() {\n        super()\n        this.state = {\n            nameSurname: '',\n            lineOneDirection: '',\n            lineTwoDirection: '',\n            city: '',\n            stateRegion: '',\n            postalCode: '',\n            country: '',\n            phone: '',\n        }\n    }\n```", "```\n    render() {\n        return (\n            <div>\n                <Header />\n                <div className=\"product-buy-page\">\n                    <h3 className=\"title\">Product details</h3>\n                    <img className=\"product-image\" src={this.props.product.image} />\n                    <div className=\"product-data\">\n                        <p className=\"product-title\">{this.props.product.title}</p>\n                        <div className=\"product-price\">{this.props.product.price} ETH</div>\n                    </div>\n                </div>\n```", "```\n                <div className=\"shipping-buy-page\">\n                    <h3>Shipping</h3>\n                    <input onChange={e => {\n                        this.setState({nameSurname: e.target.value})\n                    }} placeholder=\"Name and surname...\" type=\"text\" />\n                    <input onChange={e => {\n                        this.setState({lineOneDirection: e.target.value})\n                    }} placeholder=\"Line 1 direction...\" type=\"text\" />\n                    <input onChange={e => {\n                        this.setState({lineTwoDirection: e.target.value})\n                    }} placeholder=\"Line 2 direction...\" type=\"text\" />\n                    <input onChange={e => {\n                        this.setState({city: e.target.value})\n                    }} placeholder=\"City...\" type=\"text\" />\n                    <input onChange={e => {\n                        this.setState({stateRegion: e.target.value})\n                    }} placeholder=\"State or region...\" type=\"text\" />\n                    <input onChange={e => {\n                        this.setState({postalCode: e.target.value})\n                    }} placeholder=\"Postal code...\" type=\"number\" />\n                    <input onChange={e => {\n                        this.setState({country: e.target.value})\n                    }} placeholder=\"Country...\" type=\"text\" />\n                    <input onChange={e => {\n                        this.setState({phone: e.target.value})\n                    }} placeholder=\"Phone...\" type=\"number\" />\n                    <button>Buy now to this address</button>\n                </div>\n            </div>\n```", "```\nexport default Buy\n```", "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport MyWeb3 from 'web3'\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom'\nimport Home from './components/Home'\nimport Product from './components/Product'\nimport Buy from './components/Buy'\nimport './index.styl'\n```", "```\nclass Main extends React.Component {\n    // Omitted the other functions to keep it short\n\n    render() {\n        return (\n            <div>\n                <Route path=\"/\" exact render={() => (\n                    <Home\n                        productsHtml={this.state.productsHtml}\n                    />\n                )} />\n                <Route path=\"/product\" render={() => (\n                    <Product\n                        product={this.state.product}\n                        redirectTo={location => this.redirectTo(location)}\n                    />\n                )} />\n <Route path=\"/buy\" render={() => (\n <Buy\n product={this.state.product}\n />\n )} />\n            </div>\n        )\n    }\n}\n```", "```\n.product-buy-page\n    display: grid\n    margin: auto\n    width: 50%\n    padding: 20px\n    padding-top: 0\n    grid-template-columns: 50% 50%\n    grid-template-rows: auto 1fr\n    margin-bottom: 50px\n    grid-column-gap: 40px\n    border: 1px solid black\n    background-color: white\n\n    .title\n        grid-column: 1 / 3\n        justify-self: center\n\n    .product-image\n        grid-column: 1 / 2\n        height: 150px\n        justify-self: end\n\n    .product-title\n        margin-bottom: 25px\n\n    .product-price\n        font-size: 15pt\n        font-weight: bold\n```", "```\n.shipping-buy-page\n    display: grid\n    flex-direction: column\n    justify-items: center\n    width: 50%\n    margin: auto\n    margin-bottom: 200px\n\n    input\n        margin-bottom: 10px\n        width: 100%\n```", "```\nimport React from 'react'\nimport Header from './Header'\n```", "```\nclass Sell extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            title: '',\n            description: '',\n            price: '',\n            image: '',\n        }\n    }\n}\n```", "```\nrender() {\n    return (\n        <div>\n            <Header />\n            <div className=\"sell-page\">\n                <h3>Sell product</h3>\n                <input onChange={event => {\n                    this.setState({title: event.target.value})\n                }} type=\"text\" placeholder=\"Product title...\" />\n                <textarea placeholder=\"Product description...\" onChange={event => {\n                    this.setState({description: event.target.value})\n                }}></textarea>\n                <input onChange={event => {\n                    this.setState({price: event.target.value})\n                }} type=\"text\" placeholder=\"Product price in ETH...\" />\n                <input onChange={event => {\n                    this.setState({image: event.target.value})\n                }} type=\"text\" placeholder=\"Product image URL...\" />\n                <p>Note that shipping costs are considered free so add the shipping price to the cost of the product itself</p>\n                <button onClick={() => {\n                    this.props.publishProduct(this.state)\n                }} type=\"button\">Publish product</button>\n            </div>\n        </div>\n    )\n}\n```", "```\nexport default Sell\n```", "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport MyWeb3 from 'web3'\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom'\nimport Home from './components/Home'\nimport Product from './components/Product'\nimport Buy from './components/Buy'\nimport Sell from './components/Sell'\nimport './index.styl'\n```", "```\nclass Main extends React.Component {\n    // Omitted the other functions to keep it short\n\n async publishProduct(data) {}\n\n    render() {\n        return (\n            <div>\n                <Route path=\"/\" exact render={() => (\n                    <Home\n                        productsHtml={this.state.productsHtml}\n                    />\n                )} />\n                <Route path=\"/product\" render={() => (\n                    <Product\n                        product={this.state.product}\n                        redirectTo={location => this.redirectTo(location)}\n                    />\n                )} />\n                <Route path=\"/buy\" render={() => (\n                    <Buy\n                        product={this.state.product}\n                    />\n                )} /> <Route path=\"/sell\" render={() => (\n                    <Sell\n                        publishProduct={data => this.publishProduct(data)}\n                    />\n                )} />\n            </div>\n        )\n    }\n}\n```", "```\n.sell-page\n    display: grid\n    flex-direction: column\n    justify-items: center\n    width: 50%\n    margin: auto\n    margin-bottom: 200px\n\n    input, textarea\n        width: 100%\n        margin-bottom: 10px\n```", "```\nimport React, { Component } from 'react'\nimport Header from './Header'\n```", "```\nclass Orders extends Component {\n    constructor() {\n        super()\n\n        // We'll separate the completed vs the pending based on the order state\n        this.state = {\n            sellOrders: [{\n                id: 1,\n                title: 'Classic trendy shoes',\n                description: 'New unique shoes for sale',\n                date: Date.now(),\n                owner: '',\n                price: 12,\n                image: 'https://cdn.shopify.com/s/files/1/2494/8702/products/Bjakin-2018-Socks-Running-Shoes-for-Men-Lightweight-Sports-Sneakers-Colors-Man-Sock-Walking-Shoes-Big_17fa0d5b-d9d9-46a0-bdea-ac2dc17474ce_400x.jpg?v=1537755930',\n                purchasedAt: Date.now(),\n                state: 'completed',\n            }],\n            pendingSellOrdersHtml: [],\n            pendingBuyOrdersHtml: [],\n            completedSellOrdersHtml: [],\n            completedBuyOrdersHtml: [],\n        }\n\n        this.displayOrders()\n    }\n```", "```\n    async getUserOrders() {}\n\n    async markAsCompleted(product) {}\n```", "```\nasync displayOrders() {\n    let pendingSellOrdersHtml = []\n    let pendingBuyOrdersHtml = []\n    let completedSellOrdersHtml = []\n    let completedBuyOrdersHtml = []\n}\n```", "```\nawait this.state.sellOrders.asyncForEach(product => {\n    if(product.state == 'pending') {\n        pendingSellOrdersHtml.push(\n            <div key={product.id} className=\"product\">\n                <img className=\"product-image\" src={product.image} />\n                <div className=\"product-data\">\n                    <h3 className=\"small-product-title\">{product.title}</h3>\n                    <div className=\"product-state\">State: {product.state}</div>\n                    <div className=\"product-description\">{product.description.substring(0, 15) + '...'}</div>\n                    <div className=\"product-price\">{product.price} ETH</div>\n                    <button className=\"small-view-button\" onClick={() => {\n                        this.props.setState({product})\n                        this.props.redirectTo('/product')\n                    }} type=\"button\">View</button>\n                    <button className=\"small-completed-button\" onClick={() => {\n                        this.markAsCompleted(product)\n                    }} type=\"button\">Mark as completed</button>\n                </div>\n            </div>\n        )\n```", "```\n} else {\n        completedSellOrdersHtml.push(\n            <div key={product.id} className=\"product\">\n                <img className=\"product-image\" src={product.image} />\n                <div className=\"product-data\">\n                    <h3 className=\"product-title\">{product.title}</h3>\n                    <div className=\"product-state\">State: {product.state}</div>\n                    <div className=\"product-description\">{product.description.substring(0, 15) + '...'}</div>\n                    <div className=\"product-price\">{product.price} ETH</div>\n                    <button onClick={() => {\n                        this.props.setState({product})\n                        this.props.redirectTo('/product')\n                    }} className=\"product-view\" type=\"button\">View</button>\n                </div>\n            </div>\n        )\n    }\n})\n```", "```\nawait this.state.buyOrders.asyncForEach(product => {\n    let html = (\n        <div key={product.id} className=\"product\">\n            <img className=\"product-image\" src={product.image} />\n            <div className=\"product-data\">\n                <h3 className=\"product-title\">{product.title}</h3>\n                <div className=\"product-state\">State: {product.state}</div>\n                <div className=\"product-description\">{product.description.substring(0, 15) + '...'}</div>\n                <div className=\"product-price\">{product.price} ETH</div>\n                <button onClick={() => {\n                    this.props.setState({product})\n                    this.props.redirectTo('/product')\n                }} className=\"product-view\" type=\"button\">View</button>\n            </div>\n        </div>\n    )\n\n    if(product.state == 'pending') pendingBuyOrdersHtml.push(html)\n    else completedBuyOrdersHtml.push(html)\n})\n```", "```\nthis.setState({pendingSellOrdersHtml, pendingBuyOrdersHtml, completedSellOrdersHtml, completedBuyOrdersHtml})\n```", "```\n    render() {\n        return (\n            <div>\n                <Header />\n                <div className=\"orders-page\">\n                    <div>\n                        <h3 className=\"order-title\">PENDING ORDERS AS A SELLER</h3>\n                        {this.state.pendingSellOrdersHtml}\n                    </div>\n                    <div>\n                        <h3 className=\"order-title\">PENDING ORDERS AS A BUYER</h3>\n                        {this.state.pendingBuyOrdersHtml}\n                    </div>\n                    <div>\n                        <h3 className=\"order-title\">COMPLETED SELL ORDERS</h3>\n                        {this.state.completedSellOrdersHtml}\n                    </div>\n                    <div>\n                        <h3 className=\"order-title\">COMPLETED BUY ORDERS</h3>\n                        {this.state.completedBuyOrdersHtml}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n```", "```\nexport default Orders\n```", "```\npragma solidity ^0.5.0;\n\ncontract IERC721{\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n    function balanceOf(address owner) public view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n```", "```\npragma solidity ^0.5.0;\n\nimport './ERC721.sol';\n```", "```\npragma solidity ^0.5.0;\n\nimport './ERC721.sol';\n\n/// @notice The Ecommerce Token that implements the ERC721 token with mint function\n/// @author Merunas Grincalaitis <merunasgrincalaitis@gmail.com>\ncontract EcommerceToken is ERC721 {\n address public ecommerce;\n bool public isEcommerceSet = false;\n    /// @notice To generate a new token for the specified address\n    /// @param _to The receiver of this new token\n    /// @param _tokenId The new token id, must be unique\n function mint(address _to, uint256 _tokenId) public {\n require(msg.sender == ecommerce, 'Only the ecommerce contract can mint new tokens');\n _mint(_to, _tokenId);\n }\n\n    /// @notice To set the ecommerce smart contract address\n function setEcommerce(address _ecommerce) public {\n require(!isEcommerceSet, 'The ecommerce address can only be set once');\n require(_ecommerce != address(0), 'The ecommerce address cannot be empty');\n isEcommerceSet = true;\n ecommerce = _ecommerce;\n }\n}\n```", "```\n/// @notice The main ecommerce contract to buy and sell ERC-721 tokens representing physical or digital products because we are dealing with non-fungible tokens, there will be only 1 stock per product\n/// @author Merunas Grincalaitis <merunasgrincalaitis@gmail.com>\ncontract Ecommerce {\n    struct Product {\n        uint256 id;\n        string title;\n        string description;\n        uint256 date;\n        address payable owner;\n        uint256 price;\n        string image;\n    }\n    struct Order {\n        uint256 id;\n        address buyer;\n        string nameSurname;\n        string lineOneDirection;\n        string lineTwoDirection;\n        bytes32 city;\n        bytes32 stateRegion;\n        uint256 postalCode;\n        bytes32 country;\n        uint256 phone;\n        string state; // Either 'pending', 'completed'\n    }\n```", "```\n    // Seller address => products\n    mapping(address => Order[]) public pendingSellerOrders; // The products waiting to be fulfilled by the seller, used by sellers to check which orders have to be filled\n    // Buyer address => products\n    mapping(address => Order[]) public pendingBuyerOrders; // The products that the buyer purchased waiting to be sent\n    mapping(address => Order[]) public completedOrders;\n    // Product id => product\n    mapping(uint256 => Product) public productById;\n    // Product id => order\n    mapping(uint256 => Order) public orderById;\n    Product[] public products;\n    uint256 public lastId;\n    address public token;\n\n    /// @notice To setup the address of the ERC-721 token to use for this contract\n    /// @param _token The token address\n    constructor(address _token) public {\n        token = _token;\n    }\n}\n```", "```\n/// @notice To publish a product as a seller\n/// @param _title The title of the product\n/// @param _description The description of the product\n/// @param _price The price of the product in ETH\n/// @param _image The image URL of the product\nfunction publishProduct(string memory _title, string memory _description, uint256 _price, string memory _image) public {\n    require(bytes(_title).length > 0, 'The title cannot be empty');\n    require(bytes(_description).length > 0, 'The description cannot be empty');\n    require(_price > 0, 'The price cannot be empty');\n    require(bytes(_image).length > 0, 'The image cannot be empty');\n\n    Product memory p = Product(lastId, _title, _description, now, msg.sender, _price, _image);\n    products.push(p);\n    productById[lastId] = p;\n    EcommerceToken(token).mint(address(this), lastId); // Create a new token for this product which will be owned by this contract until sold\n    lastId++;\n}\n```", "```\n/// @notice To buy a new product, note that the seller must authorize this contract to manage the token\n/// @param _id The id of the product to buy\n/// @param _nameSurname The name and surname of the buyer\n/// @param _lineOneDirection The first line for the user address\n/// @param _lineTwoDirection The second, optional user address line\n/// @param _city Buyer's city\n/// @param _stateRegion The state or region where the buyer lives\n/// @param _postalCode The postal code of his location\n/// @param _country Buyer's country\n/// @param _phone The optional phone number for the shipping company\nfunction buyProduct(uint256 _id, string memory _nameSurname, string memory _lineOneDirection, string memory _lineTwoDirection, bytes32 _city, bytes32 _stateRegion, uint256 _postalCode, bytes32 _country, uint256 _phone) public payable {\n    // The line 2 address and phone are optional, the rest are mandatory\n    require(bytes(_nameSurname).length > 0, 'The name and surname must be set');\n    require(bytes(_lineOneDirection).length > 0, 'The line one direction must be set');\n    require(_city.length > 0, 'The city must be set');\n    require(_stateRegion.length > 0, 'The state or region must be set');\n    require(_postalCode > 0, 'The postal code must be set');\n    require(_country > 0, 'The country must be set');\n\n    Product memory p = productById[_id];\n    require(bytes(p.title).length > 0, 'The product must exist to be purchased');\n    Order memory newOrder = Order(_id, msg.sender, _nameSurname, _lineOneDirection, _lineTwoDirection, _city, _stateRegion, _postalCode, _country, _phone, 'pending');\n    require(msg.value >= p.price, \"The payment must be larger or equal than the products price\");\n\n    // Delete the product from the array of products\n    for(uint256 i = 0; i < products.length; i++) {\n        if(products[i].id == _id) {\n            Product memory lastElement = products[products.length - 1];\n            products[i] = lastElement;\n            products.length--;\n        }\n    }\n\n    // Return the excess ETH sent by the buyer\n    if(msg.value > p.price) msg.sender.transfer(msg.value - p.price);\n    pendingSellerOrders[p.owner].push(newOrder);\n    pendingBuyerOrders[msg.sender].push(newOrder);\n    orderById[_id] = newOrder;\n    EcommerceToken(token).transferFrom(address(this), msg.sender, _id); // Transfer the product token to the new owner\n    p.owner.transfer(p.price);\n}\n```", "```\n/// @notice To mark an order as completed\n/// @param _id The id of the order which is the same for the product id\nfunction markOrderCompleted(uint256 _id) public {\n    Order memory order = orderById[_id];\n    Product memory product = productById[_id];\n    require(product.owner == msg.sender, 'Only the seller can mark the order as completed');\n    order.state = 'completed';\n\n    // Delete the seller order from the array of pending orders\n    for(uint256 i = 0; i < pendingSellerOrders[product.owner].length; i++) {\n        if(pendingSellerOrders[product.owner][i].id == _id) {\n            Order memory lastElement = orderById[pendingSellerOrders[product.owner].length - 1];\n            pendingSellerOrders[product.owner][i] = lastElement;\n            pendingSellerOrders[product.owner].length--;\n        }\n    }\n    // Delete the seller order from the array of pending orders\n    for(uint256 i = 0; i < pendingBuyerOrders[order.buyer].length; i++) {\n        if(pendingBuyerOrders[order.buyer][i].id == order.id) {\n            Order memory lastElement = orderById[pendingBuyerOrders[order.buyer].length - 1];\n            pendingBuyerOrders[order.buyer][i] = lastElement;\n            pendingBuyerOrders[order.buyer].length--;\n        }\n    }\n    completedOrders[order.buyer].push(order);\n    orderById[_id] = order;\n}\n```", "```\n/// @notice Returns the product length\n/// @return uint256 The number of products\nfunction getProductsLength() public view returns(uint256) {\n    return products.length;\n}\n\n/// @notice To get the pending seller or buyer orders\n/// @param _type If you want to get the pending seller, buyer or completed orders\n/// @param _owner The owner of those orders\n/// @return uint256 The number of orders to get\nfunction getOrdersLength(bytes32 _type, address _owner) public view returns(uint256) {\n    if(_type == 'seller') return pendingSellerOrders[_owner].length;\n    else if(_type == 'buyer') return pendingBuyerOrders[_owner].length;\n    else if(_type == 'completed') return completedOrders[_owner].length;\n}\n```", "```\nconst HDWalletProvider = require('truffle-hdwallet-provider');\nconst infuraKey = \"v3/<YOUR-INFURA-KEY-HERE>;\nconst fs = require('fs');\nconst mnemonic = fs.readFileSync(\".secret\").toString().trim();\n\nmodule.exports = {\n  networks: {\n    development: {\n     host: \"127.0.0.1\", // Localhost (default: none)\n     port: 8545, // Standard Ethereum port (default: none)\n     network_id: \"*\", // Any network (default: none)\n    },\n    ropsten: {\n      provider: () => new HDWalletProvider(mnemonic, `https://ropsten.infura.io/${infuraKey}`),\n      network_id: 3, // Ropsten's id\n      gas: 5500000, // Ropsten has a lower block limit than mainnet\n      confirmations: 2, // # of confs to wait between deployments. (default: 0)\n      timeoutBlocks: 200, // # of blocks before a deployment times out (minimum/default: 50)\n      skipDryRun: true // Skip dry run before migrations? (default: false for public nets )\n    }\n  }\n}\n```", "```\nnpm i -S truffle-hdwallet-provider\n```", "```\nconst Token = artifacts.require(\"./EcommerceToken.sol\")\nconst Ecommerce = artifacts.require(\"./Ecommerce.sol\")\nlet token\n\nmodule.exports = function(deployer, network, accounts) {\n    deployer.deploy(\n        Token,\n        { gas: 8e6 }\n    ).then(tokenInstance => {\n        token = tokenInstance\n        return deployer.deploy(Ecommerce, token.address, {\n            gas: 8e6\n        })\n    }).then(async ecommerce => {\n        await token.contract.methods.setEcommerce(ecommerce.address).send({\n            from: accounts[0]\n        })\n        console.log('Is set?', await token.contract.methods.isEcommerceSet().call())\n        console.log('Deployed both!')\n    })\n}\n```", "```\ntruffle deploy --network ropsten --reset\n```", "```\ntruffle deploy --network development --reset\n```", "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport MyWeb3 from 'web3'\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom'\nimport Home from './components/Home'\nimport Product from './components/Product'\nimport Sell from './components/Sell'\nimport Header from './components/Header'\nimport Buy from './components/Buy'\nimport Orders from './components/Orders'\n\nimport './index.styl'\nimport ABI from '../build/contracts/Ecommerce.json'\n```", "```\nasync setup() {\n    // Create the contract instance\n    window.myWeb3 = new MyWeb3(ethereum)\n    try {\n        await ethereum.enable();\n    } catch (error) {\n        console.error('You must approve this dApp to interact with it')\n    }\n window.user = (await myWeb3.eth.getAccounts())[0]\n window.contract = new myWeb3.eth.Contract(ABI.abi, ABI.networks['3'].address, {\n from: user\n })\n    await this.getLatestProducts(9)\n    await this.displayProducts()\n}\n```", "```\nasync displayProducts() {\n    let productsHtml = []\n    if(this.state.products.length == 0) {\n        productsHtml = (\n            <div key=\"0\" className=\"center\">There are no products yet...</div>\n        )\n    }\n    await this.state.products.asyncForEach(product => {\n        productsHtml.push((\n            <div key={product.id} className=\"product\">\n                <img className=\"product-image\" src={product.image} />\n                <div className=\"product-data\">\n                    <h3 className=\"product-title\">{product.title}</h3>\n                    <div className=\"product-description\">{product.description.substring(0, 50) + '...'}</div>\n                    <div className=\"product-price\">{product.price} ETH</div>\n                    <button onClick={() => {\n                        this.setState({product})\n                        this.redirectTo('/product')\n                    }} className=\"product-view\" type=\"button\">View</button>\n                </div>\n            </div>\n        ))\n    })\n    this.setState({productsHtml})\n}\n```", "```\nredirectTo(location) {\n  this.props.history.push({\n    pathname: location\n  })\n}\n```", "```\nasync getLatestProducts(amount) {\n    // Get the product ids\n    const productsLength = parseInt(await contract.methods.getProductsLength().call())\n    let products = []\n    let condition = (amount > productsLength) ? 0 : productsLength - amount\n\n    // Loop through all of them one by one\n    for(let i = productsLength; i > condition; i--) {\n        let product = await contract.methods.products(i - 1).call()\n        product = {\n            id: parseInt(product.id),\n            title: product.title,\n            date: parseInt(product.date),\n            description: product.description,\n            image: product.image,\n            owner: product.owner,\n            price: myWeb3.utils.fromWei(String(product.price)),\n        }\n        products.push(product)\n    }\n    this.setState({products})\n}\n```", "```\nrender() {\n    return (\n        <div>\n            <Route path=\"/product\" render={() => (\n                <Product\n                    product={this.state.product}\n                    redirectTo={location => this.redirectTo(location)}\n                />\n            )}/>\n            <Route path=\"/sell\" render={() => (\n                <Sell\n                    publishProduct={data => this.publishProduct(data)}\n                />\n            )}/>\n            <Route path=\"/buy\" render={() => (\n                <Buy\n                    product={this.state.product}\n                />\n            )} />\n            <Route path=\"/orders\" render={() => (\n                <Orders\n                    setState={state => this.setState(state)}\n                    redirectTo={location => this.redirectTo(location)}\n                />\n            )} />\n            <Route path=\"/\" exact render={() => (\n                <Home\n                    productsHtml={this.state.productsHtml}\n                />\n            )} />\n        </div>\n    )\n}\n```", "```\nasync buyProduct() {\n    await contract.methods.buyProduct(this.props.product.id, this.state.nameSurname, this.state.lineOneDirection, this.state.lineTwoDirection, this.bytes32(this.state.city), this.bytes32(this.state.stateRegion), this.state.postalCode, this.bytes32(this.state.country), this.state.phone).send({\n        value: myWeb3.utils.toWei(this.props.product.price)\n    })\n}\n\nbytes32(name) {\n    return myWeb3.utils.fromAscii(name)\n}\n```", "```\nasync publishProduct() {\n    if(this.state.title.length == 0) return alert('You must set the title before publishing the product')\n    if(this.state.description.length == 0) return alert('You must set the description before publishing the product')\n    if(this.state.price.length == 0) return alert('You must set the price before publishing the product')\n    if(this.state.image.length == 0) return alert('You must set the image URL before publishing the product')\n\n    await contract.methods.publishProduct(this.state.title, this.state.description, myWeb3.utils.toWei(this.state.price), this.state.image).send()\n}\n```", "```\nasync getOrders(amount) {\n    const pendingSellerOrdersLength = parseInt(await contract.methods.getOrdersLength(this.bytes32('seller'), user).call())\n    const pendingBuyerOrdersLength = parseInt(await contract.methods.getOrdersLength(this.bytes32('buyer'), user).call())\n    const completedOrdersLength = parseInt(await contract.methods.getOrdersLength(this.bytes32('completed'), user).call())\n\n    const conditionSeller = (amount > pendingSellerOrdersLength) ? 0 : pendingSellerOrdersLength - amount\n    const conditionBuyer = (amount > pendingBuyerOrdersLength) ? 0 : pendingBuyerOrdersLength - amount\n    const conditionCompleted = (amount > completedOrdersLength) ? 0 : completedOrdersLength - amount\n\n    let pendingSellerOrders = []\n    let pendingBuyerOrders = []\n    let completedOrders = []\n\n    // In reverse to get the most recent orders first\n    for(let i = pendingSellerOrdersLength; i > conditionSeller; i--) {\n        let order = await contract.methods.pendingSellerOrders(user, i - 1).call()\n        pendingSellerOrders.push(await this.generateOrderObject(order))\n    }\n\n    for(let i = pendingBuyerOrdersLength; i > conditionBuyer; i--) {\n        let order = await contract.methods.pendingBuyerOrders(user, i - 1).call()\n        pendingBuyerOrders.push(await this.generateOrderObject(order))\n    }\n\n    for(let i = completedOrdersLength; i > conditionCompleted; i--) {\n        let order = await contract.methods.completedOrders(user, i - 1).call()\n        completedOrders.push(await this.generateOrderObject(order))\n    }\n\n    this.setState({pendingSellerOrders, pendingBuyerOrders, completedOrders})\n}\n```", "```\nasync generateOrderObject(order) {\n    let productAssociated = await contract.methods.productById(parseInt(order.id)).call()\n    order = {\n        id: parseInt(order.id),\n        buyer: order.buyer,\n        nameSurname: order.nameSurname,\n        lineOneDirection: order.lineOneDirection,\n        lineTwoDirection: order.lineTwoDirection,\n        city: myWeb3.utils.toUtf8(order.city),\n        stateRegion: myWeb3.utils.toUtf8(order.stateRegion),\n        postalCode: String(order.postalCode),\n        country: myWeb3.utils.toUtf8(order.country),\n        phone: String(order.phone),\n        state: order.state,\n        date: String(productAssociated.date),\n        description: productAssociated.description,\n        image: productAssociated.image,\n        owner: productAssociated.owner,\n        price: myWeb3.utils.fromWei(String(productAssociated.price)),\n        title: productAssociated.title,\n    }\n    return order\n}\n```", "```\nasync displayOrders() {\n    let pendingSellerOrdersHtml = []\n    let pendingBuyerOrdersHtml = []\n    let completedOrdersHtml = []\n```", "```\n    if(this.state.pendingSellerOrders.length == 0) {\n        pendingSellerOrdersHtml.push((\n            <div key=\"0\" className=\"center\">There are no seller orders yet...</div>\n        ))\n    }\n    if(this.state.pendingBuyerOrders.length == 0) {\n        pendingBuyerOrdersHtml.push((\n            <div key=\"0\" className=\"center\">There are no buyer orders yet...</div>\n        ))\n    }\n    if(this.state.completedOrders.length == 0) {\n        completedOrdersHtml.push((\n            <div key=\"0\" className=\"center\">There are no completed orders yet...</div>\n        ))\n    }\n```", "```\n    await this.state.pendingSellerOrders.asyncForEach(order => {\n        pendingSellerOrdersHtml.push(\n            <div key={order.id} className=\"product\">\n                <img className=\"product-image\" src={order.image} />\n                <div className=\"product-data\">\n                    <h3 className=\"small-product-title\">{order.title}</h3>\n                    <div className=\"product-state\">State: {order.state}</div>\n                    <div className=\"product-description\">{order.description.substring(0, 15) + '...'}</div>\n                    <div className=\"product-price\">{order.price} ETH</div>\n                    <button className=\"small-view-button\" onClick={() => {\n                        this.props.setState({product: order})\n                        this.props.redirectTo('/product')\n                    }} type=\"button\">View</button>\n                    <button className=\"small-completed-button\" onClick={() => {\n                        this.markAsCompleted(order.id)\n                    }} type=\"button\">Mark as completed</button>\n                </div>\n```", "```\n                <div className=\"order-address\">\n                    <div>Id</div>\n                    <div className=\"second-column\" title={order.id}>{order.id}</div>\n                    <div>Buyer</div>\n                    <div className=\"second-column\" title={order.buyer}>{order.buyer}</div>\n                    <div>Name and surname</div>\n                    <div className=\"second-column\" title={order.nameSurname}>{order.nameSurname}</div>\n                    <div>Line 1 direction</div>\n                    <div className=\"second-column\" title={order.lineOneDirection}>{order.lineOneDirection}</div>\n                    <div>Line 2 direction</div>\n                    <div className=\"second-column\" title={order.lineTwoDirection}>{order.lineTwoDirection}</div>\n                    <div>City</div>\n                    <div className=\"second-column\" title={order.city}>{order.city}</div>\n                    <div>State or region</div>\n                    <div className=\"second-column\" title={order.stateRegion}>{order.stateRegion}</div>\n                    <div>Postal code</div>\n                    <div className=\"second-column\">{order.postalCode}</div>\n                    <div>Country</div>\n                    <div className=\"second-column\" title={order.country}>{order.country}</div>\n                    <div>Phone</div>\n                    <div className=\"second-column\">{order.phone}</div>\n                    <div>State</div>\n                    <div className=\"second-column\" title={order.state}>{order.state}</div>\n                </div>\n            </div>\n        )\n    })\n```", "```\n await this.state.pendingBuyerOrders.asyncForEach(order => {\n        pendingBuyerOrdersHtml.push(\n            <div key={order.id} className=\"product\">\n                <img className=\"product-image\" src={order.image} />\n                <div className=\"product-data\">\n                    <h3 className=\"product-title\">{order.title}</h3>\n                    <div className=\"product-state\">State: {order.state}</div>\n                    <div className=\"product-description\">{order.description.substring(0, 15) + '...'}</div>\n                    <div className=\"product-price\">{order.price} ETH</div>\n                    <button onClick={() => {\n                        this.props.setState({product: order})\n                        this.props.redirectTo('/product')\n                    }} className=\"product-view\" type=\"button\">View</button>\n                </div>\n```", "```\n    await this.state.completedOrders.asyncForEach(order => {\n        completedOrdersHtml.push(\n            <div key={order.id} className=\"product\">\n                <img className=\"product-image\" src={order.image} />\n                <div className=\"product-data\">\n                    <h3 className=\"product-title\">{order.title}</h3>\n                    <div className=\"product-state\">State: {order.state}</div>\n                    <div className=\"product-description\">{order.description.substring(0, 15) + '...'}</div>\n                    <div className=\"product-price\">{order.price} ETH</div>\n                    <button onClick={() => {\n                        this.props.setState({product: order})\n                        this.props.redirectTo('/product')\n                    }} className=\"product-view\" type=\"button\">View</button>\n                </div>\n```", "```\n    this.setState({pendingSellerOrdersHtml, pendingBuyerOrdersHtml, completedOrdersHtml})\n```", "```\nbytes32(name) {\n    return myWeb3.utils.fromAscii(name)\n}\n\nasync setup() {\n    await this.getOrders(5)\n    await this.displayOrders()\n}\n```", "```\nrender() {\n    return (\n        <div>\n            <Header />\n            <div className=\"orders-page\">\n                <div>\n                    <h3 className=\"order-title\">PENDING ORDERS AS A SELLER</h3>\n                    {this.state.pendingSellerOrdersHtml}\n                </div>\n\n                <div>\n                    <h3 className=\"order-title\">PENDING ORDERS AS A BUYER</h3>\n                    {this.state.pendingBuyerOrdersHtml}\n                </div>\n\n                <div className=\"completed-orders-container\">\n                    <h3 className=\"order-title\">COMPLETED ORDERS</h3>\n                    {this.state.completedOrdersHtml}\n                </div>\n            </div>\n        </div>\n    )\n}\n```"]