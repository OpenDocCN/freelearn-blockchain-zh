["```\nPeerOrgs: \n  # ExportingEntityOrg \n  - Name: ExportingEntityOrg \n    Domain: exportingentityorg.trade.com \n    EnableNodeOUs: true \n    Template: \n      Count: 1 \n    Users: \n     Count: 1 \n```", "```\ncryptogen generate --config=./add_org/crypto-config.yaml \n```", "```\nOrganizations: \n  - &ExportingEntityOrg \n    Name: ExportingEntityOrgMSP \n    ID: ExportingEntityOrgMSP \n    MSPDir: ../crypto-config/peerOrganizations/exportingentityorg.trade.com/msp \n    AnchorPeers: \n      - Host: peer0.exportingentityorg.trade.com \n        Port: 7051\n```", "```\nFABRIC_CFG_PATH=$PWD/add_org && configtxgen -printOrg ExportingEntityOrgMSP > ./channel-artifacts/exportingEntityOrg.json \n```", "```\n./trade.sh createneworg\n```", "```\nservices: \n  exportingentity-ca: \n    image: hyperledger/fabric-ca:$IMAGE_TAG \n    environment: \n      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server \n      - FABRIC_CA_SERVER_CA_NAME=ca-exportingentityorg \n      - FABRIC_CA_SERVER_TLS_ENABLED=true \n      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.exportingentityorg.trade.com-cert.pem \n      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/fc435ccfdaf5d67251bd850a8620cde6d97a7732f89170167a02970c754e5450_sk \n    ports: \n      - \"11054:7054\" \n    command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.exportingentityorg.trade.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/fc435ccfdaf5d67251bd850a8620cde6d97a7732f89170167a02970c754e5450_sk -b admin:adminpw -d' \n    volumes: \n      - ../crypto-config/peerOrganizations/exportingentityorg.trade.com/ca/:/etc/hyperledger/fabric-ca-server-config \n    container_name: ca_peerExportingEntityOrg \n    networks: \n      - trade \n\n  peer0.exportingentityorg.trade.com: \n    container_name: peer0.exportingentityorg.trade.com \n    extends: \n      file: ../base/peer-base.yaml \n      service: peer-base \n    environment: \n      - CORE_PEER_ID=peer0.exportingentityorg.trade.com \n      - CORE_PEER_ADDRESS=peer0.exportingentityorg.trade.com:7051 \n      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.exportingentityorg.trade.com:7051 \n      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.exportingentityorg.trade.com:7051 \n      - CORE_PEER_LOCALMSPID=ExportingEntityOrgMSP \n    volumes: \n        - /var/run/:/host/var/run/ \n        - ../crypto-config/peerOrganizations/exportingentityorg.trade.com/peers/peer0.exportingentityorg.trade.com/msp:/etc/hyperledger/fabric/msp \n        - ../crypto-config/peerOrganizations/exportingentityorg.trade.com/peers/peer0.exportingentityorg.trade.com/tls:/etc/hyperledger/fabric/tls \n        - peer0.exportingentityorg.trade.com:/var/hyperledger/production \n    ports: \n      - 11051:7051 \n      - 11053:7053 \n      - 11055:6060 \n    networks: \n      - trade \n```", "```\ndocker-compose -f add_org/docker-compose-exportingEntityOrg.yaml up\n```", "```\nCONTAINER ID    IMAGE    COMMAND    CREATED    STATUS    PORTS    NAMES \n02343f585218    hyperledger/fabric-ca:latest    \"sh -c 'fabric-ca-se...\"    16 seconds ago    Up 16 seconds    0.0.0.0:11054->7054/tcp    ca_peerExportingEntityOrg \na439ea7364a8    hyperledger/fabric-peer:latest    \"peer node start\"    16 seconds ago    Up 16 seconds    0.0.0.0:11055->6060/tcp, 0.0.0.0:11051->7051/tcp, 0.0.0.0:11053->7053/tcp    peer0.exportingentityorg.trade.com \n```", "```\n./trade.sh startneworg \n```", "```\nchannel.getChannelConfigFromOrderer(); \n```", "```\nif(!fs.existsSync('./tmp/')) {\n  fs.mkdirSync('./tmp');\n}\n```", "```\nfs.writeFileSync('./tmp/config.pb', configuration_block.config.toBuffer()); \n```", "```\ncproc.execSync('configtxlator proto_decode --input ./tmp/config.pb --type common.Config | jq . > ./tmp/config.json');\n```", "```\ncproc.execSync('jq -s \\'.[0] * {\"channel_group\":{\"groups\":{\"Application\":{\"groups\": {\"ExportingEntityOrgMSP\":.[1]}}}}}\\' ./tmp/config.json ../network/channel-artifacts/exportingEntityOrg.json > ./tmp/modified_config.json');\n```", "```\ncproc.execSync('configtxlator proto_encode --input ./tmp/modified_config.json --type common.Config --output ./tmp/modified_config.pb'); \n```", "```\ncproc.execSync('configtxlator compute_update --channel_id ' + channel_name + ' --original ./tmp/config.pb --updated ./tmp/modified_config.pb --output ./tmp/exportingEntityOrg_update.pb'); \n```", "```\nconfig = fs.readFileSync('./tmp/exportingEntityOrg_update.pb'); \nvar signature = client.signChannelConfig(config); \nsignatures.push(signature); \n```", "```\nlet tx_id = client.newTransactionID(); \nvar request = { \n  config: config, \n  signatures : signatures, \n  name : channel_name, \n  orderer : orderer, \n  txId  : tx_id \n}; \nclient.updateChannel(request); \n```", "```\nnode run-upgrade-channel.js \n```", "```\n\"exportingentityorg\": { \n  \"name\": \"peerExportingEntityOrg\", \n  \"mspid\": \"ExportingEntityOrgMSP\", \n  \"ca\": { \n    \"url\": \"https://localhost:11054\", \n      \"name\": \"ca-exportingentityorg\" \n  }, \n  \"peer1\": { \n    \"requests\": \"grpcs://localhost:11051\", \n    \"events\": \"grpcs://localhost:11053\", \n    \"server-hostname\": \"peer0.exportingentityorg.trade.com\", \n    \"tls_cacerts\": \"../network/crypto-config/peerOrganizations/exportingentityorg.trade.com/peers/peer0.exportingentityorg.trade.com/msp/tlscacerts/tlsca.exportingentityorg.trade.com-cert.pem\" \n  } \n} \n```", "```\nvar Constants = require('./constants.js'); \nConstants.networkConfig = './config_upgrade.json';\n```", "```\nvar joinChannel = require('./join-channel.js'); \nClient.addConfigFile(path.join(__dirname, Constants.networkConfig)); \nvar ORGS = Client.getConfigSetting(Constants.networkId); \njoinChannel.joinChannel('exportingentityorg', ORGS, Constants); \n```", "```\nnode new-org-join-channel.js \n```", "```\n// Accept a trade agreement \nfunc (t *TradeWorkflowChaincode) acceptTrade(stub shim.ChaincodeStubInterface, creatorOrg string, creatorCertIssuer string, args []string) pb.Response { \n  // Access control: Only an Exporter Org member can invoke this transaction \n  if !t.testMode && !authenticateExporterOrg(creatorOrg, creatorCertIssuer) { \n    return shim.Error(\"Caller not a member of Exporter Org. Access denied.\") \n  } \n```", "```\n// Accept a trade agreement \nfunc (t *TradeWorkflowChaincode) acceptTrade(stub shim.ChaincodeStubInterface, creatorOrg string, creatorCertIssuer string, args []string) pb.Response { \n  // Access control: Only an Exporting Entity Org member can invoke this transaction \n  if !t.testMode && !authenticateExportingEntityOrg(creatorOrg, creatorCertIssuer) { \n    return shim.Error(\"Caller not a member of Exporting Entity Org. Access denied.\") \n  } \n```", "```\ncreatorSerializedId := &msp.SerializedIdentity{} \nerr = proto.Unmarshal(creator, creatorSerializedId) \n...... \ncertASN1, _ = pem.Decode(creatorSerializedId.IdBytes) \ncert, err = x509.ParseCertificate(certASN1.Bytes) \n...... \nreturn creatorSerializedId.Mspid, cert.Issuer.CommonName, nil \n```", "```\nimport ( \n  ...... \n  \"github.com/hyperledger/fabric/core/chaincode/lib/cid\" \n  ...... \n) \n...... \nfunc getTxCreatorInfo(stub shim.ChaincodeStubInterface) (string, string, error) { \n  ...... \n  mspid, err = cid.GetMSPID(stub) \n  ...... \n  cert, err = cid.GetX509Certificate(stub) \n  ...... \n  return mspid, cert.Issuer.CommonName, nil \n} \n```", "```\nfunc (t *TradeWorkflowChaincode) Init(stub shim.ChaincodeStubInterface) pb.Response { \n  ...... \n  // Upgrade Mode 1: leave ledger state as it was \n  if len(args) == 0 { \n    return shim.Success(nil) \n  } \n  // Upgrade mode 2: change all the names and account balances \n  if len(args) != 8 { \n    ...... \n```", "```\nvar FIVE_ORG_MEMBERS_AND_ADMIN = [{ \n  role: { \n    name: 'member', \n    mspId: 'ExporterOrgMSP' \n  } \n}, { \n  role: { \n    name: 'member', \n    mspId: 'ExportingEntityOrgMSP' \n  } \n}, { \n  role: { \n    name: 'member', \n    mspId: 'ImporterOrgMSP' \n  } \n}, { \n  role: { \n    name: 'member', \n    mspId: 'CarrierOrgMSP' \n  } \n}, { \n  role: { \n    name: 'member', \n    mspId: 'RegulatorOrgMSP' \n  } \n}, { \n  role: { \n    name: 'admin', \n    mspId: 'TradeOrdererMSP' \n  } \n}]; \n\nvar ALL_FIVE_ORG_MEMBERS = { \n  identities: FIVE_ORG_MEMBERS_AND_ADMIN, \n  policy: { \n    '5-of': [{ 'signed-by': 0 }, { 'signed-by': 1 }, { 'signed-by': 2 }, { 'signed-by': 3 }, { 'signed-by': 4 }] \n  } \n}; \n```", "```\nvar Constants = require('./constants.js'); \nvar installCC = require('./install-chaincode.js'); \nConstants.networkConfig = './config_upgrade.json'; \nConstants.TRANSACTION_ENDORSEMENT_POLICY = Constants.ALL_FIVE_ORG_MEMBERS; \ninstallCC.installChaincode(Constants.CHAINCODE_UPGRADE_PATH, Constants.CHAINCODE_UPGRADE_VERSION, Constants); \n```", "```\nvar CHAINCODE_UPGRADE_PATH = 'github.com/trade_workflow_v1'; \nvar CHAINCODE_UPGRADE_VERSION = 'v1'; \n```", "```\nvar instantiateCC = require('./instantiate-chaincode.js'); \ninstantiateCC.instantiateOrUpgradeChaincode( \n  Constants.IMPORTER_ORG, \n  Constants.CHAINCODE_UPGRADE_PATH, \n  Constants.CHAINCODE_UPGRADE_VERSION, \n  'init', \n  [], \n  true, \n  Constants \n); \n```", "```\nnode upgrade-chaincode.js \n```", "```\nnode five-org-trade-scenario.js \n```", "```\ndocker images | grep hyperledger/fabric \n```", "```\nhyperledger/fabric-peer    latest    f9224936c8c3    2 weeks ago    187MB \nhyperledger/fabric-peer    x86_64-1.1.1-snapshot-c257bb3    f9224936c8c3    2 weeks ago    187MB \nhyperledger/fabric-orderer    latest    5de53fad366a    2 weeks ago    180MB \nhyperledger/fabric-orderer    x86_64-1.1.1-snapshot-c257bb3    5de53fad366a    2 weeks ago    180MB \nhyperledger/fabric-ca    latest    39fdba61db00    2 weeks ago    299MB \nhyperledger/fabric-ca    x86_64-1.1.1-snapshot-e656889    39fdba61db00    2 weeks ago    299MB \n```", "```\nCOMPOSE_FILE=docker-compose-e2e.yaml \n...... \nCOMPOSE_FILES=\"-f $COMPOSE_FILE\" \n...... \ndocker-compose $COMPOSE_FILES stop orderer.trade.com \n...... \nfor PEER in peer0.exporterorg.trade.com peer0.importerorg.trade.com peer0.carrierorg.trade.com peer0.regulatororg.trade.com; do \n  ...... \n  docker-compose $COMPOSE_FILES stop $PEER \n  ...... \ndone \n```", "```\nLEDGERS_BACKUP=./ledgers-backup \nmkdir -p $LEDGERS_BACKUP \n...... \ndocker cp -a orderer.trade.com:/var/hyperledger/production/orderer $LEDGERS_BACKUP/orderer.trade.com \n...... \nfor PEER in peer0.exporterorg.trade.com peer0.importerorg.trade.com peer0.carrierorg.trade.com peer0.regulatororg.trade.com; do \n  ...... \n  docker cp -a $PEER:/var/hyperledger/production $LEDGERS_BACKUP/$PEER/ \n  ...... \ndone \n```", "```\nfor PEER in peer0.exporterorg.trade.com peer0.importerorg.trade.com peer0.carrierorg.trade.com peer0.regulatororg.trade.com; do \n  ...... \n  CC_CONTAINERS=$(docker ps | grep dev-$PEER | awk '{print $1}') \n  if [ -n \"$CC_CONTAINERS\" ] ; then \n    docker rm -f $CC_CONTAINERS \n  fi \n  CC_IMAGES=$(docker images | grep dev-$PEER | awk '{print $1}') \n  if [ -n \"$CC_IMAGES\" ] ; then \n    docker rmi -f $CC_IMAGES \n  fi \n  ...... \ndone \n```", "```\ndocker-compose $COMPOSE_FILES up --no-deps orderer.trade.com \n...... \nfor PEER in peer0.exporterorg.trade.com peer0.importerorg.trade.com peer0.carrierorg.trade.com peer0.regulatororg.trade.com; do \n  ...... \n  docker-compose $COMPOSE_FILES up --no-deps $PEER \n  ...... \ndone \n```", "```\n./trade.sh upgrade [-i <imagetag>] \n```", "```\nLinux 4.4.0-127-generic (ubuntu-xenial)    05/28/2018    _x86_64_    (2 CPU) \n\navg-cpu:  %user    %nice    %system    %iowait    %steal    %idle \n           0.31     0.01       0.26       0.11      0.00    99.32 \n\nDevice:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn \nsda               1.11        16.71        11.00     688675     453396 \nsdb               0.00         0.05         0.00       2014          0\n```", "```\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- \n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st \n 0  0      0 2811496 129856 779724    0    0     7     5  127  342  0  1 99  0  0 \n```", "```\ndocker inspect --format '{{ .State.Pid }}' orderer.trade.com\n```", "```\nsudo strace -T -tt -p <pid>\n```", "```\nstrace: Process 5221 attached \n18:48:49.081842 restart_syscall(<... resuming interrupted futex ...>) = -1 ETIMEDOUT (Connection timed out) <0.089393> \n18:48:49.171665 futex(0x13cd758, FUTEX_WAKE, 1) = 1 <0.000479> \n18:48:49.172253 futex(0x13cd690, FUTEX_WAKE, 1) = 1 <0.000556> \n18:48:49.174052 futex(0xc420184f10, FUTEX_WAKE, 1) = 1 <0.000035> \n18:48:49.174698 futex(0xc42002c810, FUTEX_WAKE, 1) = 1 <0.000053> \n18:48:49.175556 futex(0x13cd280, FUTEX_WAIT, 0, {1, 996752461}) = -1 ETIMEDOUT (Connection timed out) <1.999684> \n```", "```\npeer0.exporterorg.trade.com: \n  container_name: peer0.exporterorg.trade.com \n *cap_add: \n   - SYS_PTRACE \n  security_opt: \n    - seccomp:unconfined* \n```", "```\nimport \"net/http\" \nhttp.ListenAndServe(\"localhost:6060\", nil)\n```", "```\ngo tool pprof http://localhost:6060/debug/pprof/heap \n```", "```\ngo tool pprof http://localhost:6060/debug/pprof/profile \n```", "```\nservices: \n  peer-base: \n    image: hyperledger/fabric-peer:$IMAGE_TAG \n    environment: \n      ...... \n      - CORE_PEER_PROFILE_ENABLED=true \n      ...... \n```", "```\npeer0.exporterorg.trade.com: \n  ...... \n  ports: \n    ...... \n    - 7055:6060 \n    ...... \npeer0.importerorg.trade.com: \n  ...... \n  ports: \n    ...... \n    - 8055:6060 \n    ......\n```", "```\ngo tool pprof http://localhost:7055/debug/pprof/profile \n```", "```\nFetching profile over HTTP from http://localhost:7055/debug/pprof/profile \nSaved profile in /home/vagrant/pprof/pprof.peer.samples.cpu.006.pb.gz \nFile: peer \nBuild ID: 66c7be6d1f71cb816faabc48e4a498bf8052ba1b \nType: cpu \nTime: May 29, 2018 at 5:09am (UTC) \nDuration: 30s, Total samples = 530ms ( 1.77%) \nEntering interactive mode (type \"help\" for commands, \"o\" for options) \n(pprof) \n```", "```\n(pprof) top5 \nShowing nodes accounting for 340ms, 64.15% of 530ms total \nShowing top 5 nodes out of 200 \n      flat  flat%   sum%        cum   cum% \n     230ms 43.40% 43.40%      230ms 43.40%  runtime.futex /opt/go/src/runtime/sys_linux_amd64.s \n      30ms  5.66% 49.06%       30ms  5.66%  crypto/sha256.block /opt/go/src/crypto/sha256/sha256block_amd64.s \n      30ms  5.66% 54.72%       30ms  5.66%  runtime.memmove /opt/go/src/runtime/memmove_amd64.s \n      30ms  5.66% 60.38%       30ms  5.66%  runtime.usleep /opt/go/src/runtime/sys_linux_amd64.s \n      20ms  3.77% 64.15%      110ms 20.75%  runtime.findrunnable /opt/go/src/runtime/proc.go\n```", "```\n(pprof) tree \nShowing nodes accounting for 530ms, 100% of 530ms total \nShowing top 80 nodes out of 200 \n----------------------------------------------------------+------------- \n      flat  flat%   sum%        cum   cum%   calls calls% + context \n----------------------------------------------------------+------------- \n                                              70ms 30.43% |   runtime.stopm /opt/go/src/runtime/proc.go \n                                              50ms 21.74% |   runtime.notetsleep_internal /opt/go/src/runtime/lock_futex.go \n                                              40ms 17.39% |   runtime.ready /opt/go/src/runtime/proc.go \n     230ms 43.40% 43.40%      230ms 43.40%                | runtime.futex /opt/go/src/runtime/sys_linux_amd64.s \n----------------------------------------------------------+------------- \n                                              30ms   100% |   crypto/sha256.(*digest).Write /opt/go/src/crypto/sha256/sha256.go \n      30ms  5.66% 49.06%       30ms  5.66%                | crypto/sha256.block /opt/go/src/crypto/sha256/sha256block_amd64.s \n----------------------------------------------------------+------------- \n```", "```\n(pprof) png \nGenerating report in profile001.png\n```"]