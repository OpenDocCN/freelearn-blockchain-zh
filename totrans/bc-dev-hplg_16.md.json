["```\ncurl -O https://hyperledger.github.io/composer/latest/prereqs-ubuntu.sh\nchmod u+x prereqs-ubuntu.sh\n./prereqs-ubuntu.sh\n```", "```\nmkdir ~/insurance-claim && cd ~/insurance-claim\n```", "```\ncurl -sSL https://raw.githubusercontent.com/hyperledger/fabric/release-1.3/scripts/bootstrap.sh | bash\n```", "```\nexport PATH=<path to download location>/bin:$PATH\n```", "```\ntype Chaincode interface {\n    Init(stub ChaincodeStubInterface) pb.Response\n    Invoke(stub ChaincodeStubInterface) pb.Response\n}\n```", "```\ntype Insuree struct {\n         Id           string `json:\"id\"`\n         FirstName    string `json:\"firstName\"`\n         LastName     string `json:\"lastName\"`\n         SSN          string `json:\"ssn\"`\n         PolicyNumber string `json:\"policyNumber\"`\n}\n```", "```\ntype Member struct {\n  Name string `json:\"member_name\"`\n}\n```", "```\ntype Company struct {\n         Id   string `json:\"id\"`\n         Type string `json:\"type\"`\n         Name string `json:\"name\"`\n}\n```", "```\ntype Claim struct {\n         Id        string `json:\"id\"`        //the fieldtags are needed to keep case from bouncing around\n         Desc      string `json:\"desc\"`      //claim description\n         Status    string `json:\"status\"`    //status of claim\n         InsureeId string `json:\"insureeId\"` //InsureeId\n         BrokerId  string `json:\"brokerId\"`  //BrokerId\n         InsurerId string `json:\"insurerId\"` //InsurerId\n         Comment   string `json:\"comment\"`   //comment\n         ProcessAt string `json:\"processAt\"` //processAt\n}\n```", "```\nfunc (c *ClaimContract) Init(stub shim.ChaincodeStubInterface) pb.Response {\n         args := stub.GetStringArgs()\n         if len(args) != 5 {\n                 return shim.Error(\"Incorrect arguments. Expecting a key and a value\")\n         }\n         insureeId := args[0]\n         firstName := args[1]\n         lastName := args[2]\n         ssn := args[3]\n         policyNumber := args[4]\n         insureeData := Insuree{\n                 Id:           insureeId,\n                 FirstName:    firstName,\n                 LastName:     lastName,\n                 SSN:          ssn,\n                 PolicyNumber: policyNumber}\n         insureeBytes, _ := json.Marshal(insureeData)\n         err := stub.PutState(insureeId, insureeBytes)\n         if err != nil {\n                 return shim.Error(fmt.Sprintf(\"Failed to create asset: %s\", args[0]))\n         }\n         return shim.Success(nil)\n}\n```", "```\nfunc (c *ClaimContract) Invoke(stub shim.ChaincodeStubInterface) pb.Response {\n         function, args := stub.GetFunctionAndParameters()\n         if function == \"AddCompany\" {\n                 return c.AddCompany(stub, args)\n         } else if function == \"ReportLost\" {\n                 return c.ReportLost(stub, args)\n         } else if function == \"RequestedInfo\" {\n                 return c.RequestedInfo(stub, args)\n         } else if function == \"SubmitClaim\" {\n                 return c.SubmitClaim(stub, args)\n         } else if function == \"ConfirmClaimSubmission\" {\n                 return c.ConfirmClaimSubmission(stub, args)\n         } else if function == \"ApproveClaim\" {\n                 return c.ApproveClaim(stub, args)\n         } else if function == \"query\" {\n                 return c.query(stub, args)\n         } else if function == \"getHistory\" {\n                 return c.getHistory(stub, args)\n         }\n\n         return shim.Error(\"Invalid function name\")\n}\n```", "```\nfunc (c *ClaimContract) AddCompany(stub shim.ChaincodeStubInterface, args []string) pb.Response {\n         id := args[0]\n         name := args[1]\n         companyType := args[2]\n         companyData := Company{\n                 Id:   id,\n                 Type: companyType,\n                 Name: name}\n         companyBytes, _ := json.Marshal(companyData)\n         stub.PutState(id, companyBytes)\n         return shim.Success(companyBytes)\n}\n```", "```\nfunc (c *ClaimContract) ReportLost(stub shim.ChaincodeStubInterface, args []string) pb.Response {\n         claimId := args[0]\n         desc := args[1]\n         insureeId := args[2]\n         brokerId := args[3]\n         currentts := time.Now()\n         processAt := currentts.Format(\"2006-01-02 15:04:05\")\n         //initialized claim\n         claimData := Claim{\n                 Id:        claimId,\n                 Desc:      desc,\n                 Status:    \"ReportLost\",\n                 InsureeId: insureeId,\n                 BrokerId:  brokerId,\n                 InsurerId: \"\",\n                 Comment:   \"\",\n                 ProcessAt: processAt}\n         claimBytes, _ := json.Marshal(claimData)\n         stub.PutState(claimId, claimBytes)\n         return shim.Success(claimBytes)\n}\n```", "```\nfunc (c *ClaimContract) RequestedInfo(stub shim.ChaincodeStubInterface, args []string) pb.Response {\n         return c.UpdateClaim(stub, args, \"RequestedInfo\")\n}\nfunc (c *ClaimContract) UpdateClaim(stub shim.ChaincodeStubInterface, args []string, currentStatus string) pb.Response {\n         claimId := args[0]\n         comment := args[1]\n         claimBytes, err := stub.GetState(claimId)\n         claim := Claim{}\n         err = json.Unmarshal(claimBytes, &claim)\n         if err != nil {\n                 return shim.Error(err.Error())\n         }\n         if currentStatus == \"RequestedInfo\" && claim.Status != \"ReportLost\" {\n                 claim.Status = \"Error\"\n                 fmt.Printf(\"Claim is not initialized yet\")\n                 return shim.Error(err.Error())\n         } else if currentStatus == \"SubmitClaim\" && claim.Status != \"RequestedInfo\" {\n                 claim.Status = \"Error\"\n                 fmt.Printf(\"Claim must be in RequestedInfo status\")\n                 return shim.Error(err.Error())\n         } else if currentStatus == \"ConfirmClaimSubmission\" && claim.Status != \"SubmitClaim\" {\n                 claim.Status = \"Error\"\n                 fmt.Printf(\"Claim must be in Submit Claim status\")\n                 return shim.Error(err.Error())\n         } else if currentStatus == \"ApproveClaim\" && claim.Status != \"ConfirmClaimSubmission\" {\n                 claim.Status = \"Error\"\n                 fmt.Printf(\"Claim must be in Confirm Claim Submission status\")\n                 return shim.Error(err.Error())\n         }\n         claim.Comment = comment\n         if currentStatus == \"RequestedInfo\" {\n                 insurerId := args[2]\n                 claim.InsurerId = insurerId\n         }\n         currentts := time.Now()\n         claim.ProcessAt = currentts.Format(\"2006-01-02 15:04:05\")\n         claim.Status = currentStatus\n         claimBytes0, _ := json.Marshal(claim)\n         err = stub.PutState(claimId, claimBytes0)\n         if err != nil {\n                 return shim.Error(err.Error())\n         }\n         return shim.Success(claimBytes0)\n}\n```", "```\nfunc (c *ClaimContract) query(stub shim.ChaincodeStubInterface, args []string) pb.Response {\n         var ENIITY string\n         var err error\n         if len(args) != 1 {\n                 return shim.Error(\"Incorrect number of arguments. Expected ENIITY Name\")\n         }\n         ENIITY = args[0]\n         Avalbytes, err := stub.GetState(ENIITY)         if err != nil {\n                 jsonResp := \"{\\\"Error\\\":\\\"Failed to get state for \" + ENIITY + \"\\\"}\"\n                 return shim.Error(jsonResp)\n         }\n         if Avalbytes == nil {\n                 jsonResp := \"{\\\"Error\\\":\\\"Nil order for \" + ENIITY + \"\\\"}\"\n                 return shim.Error(jsonResp)\n         }\n         return shim.Success(Avalbytes)\n}\n```", "```\nfunc (c *ClaimContract) getHistory(stub shim.ChaincodeStubInterface, args []string) pb.Response {\n         type AuditHistory struct {\n                 TxId  string `json:\"txId\"`\n                 Value Claim  `json:\"value\"`\n         }\n         var history []AuditHistory\n         var claim Claim\n         if len(args) != 1 {\n                 return shim.Error(\"Incorrect number of arguments. Expecting 1\")\n         }\n         claimId := args[0]\n         fmt.Printf(\"- start getHistoryForClaim: %s\\n\", claimId)\n\n         // Get History\n         resultsIterator, err := stub.GetHistoryForKey(claimId)\n         if err != nil {\n                 return shim.Error(err.Error())\n         }\n         defer resultsIterator.Close()\n\n         for resultsIterator.HasNext() {\n                 historyData, err := resultsIterator.Next()\n                 if err != nil {\n                          return shim.Error(err.Error())\n                 }\n                 var tx AuditHistory\n                 tx.TxId = historyData.TxId\n                 json.Unmarshal(historyData.Value, &claim)\n                 tx.Value = claim              //copy claim over\n                 history = append(history, tx) //add this tx to the list\n         }\n         fmt.Printf(\"- getHistoryForClaim returning:\\n%s\", history)\n\n         //change to array of bytes\n         historyAsBytes, _ := json.Marshal(history) //convert to array of bytes\n         return shim.Success(historyAsBytes)\n}\n```", "```\nOrdererOrgs:\n  - Name: Orderer\n    Domain: ic.com\n    Specs:\n      - Hostname: orderer\n```", "```\nPeerOrgs:\n  # ---------------------------------------------------------------------------\n  # Org1\n  # ---------------------------------------------------------------------------\n  - Name: Org1\n    Domain: org1.ic.com\n    Template:\n      Count: 2\n    Users:\n      Count: 1\n  # ---------------------------------------------------------------------------\n  # Org2\n  # ---------------------------------------------------------------------------\n  - Name: Org2\n    Domain: org2.ic.com\n    Template:\n      Count: 2\n    Users:\n      Count: 1\n  # ---------------------------------------------------------------------------\n  # Org3\n  # ---------------------------------------------------------------------------\n  - Name: Org3\n    Domain: org3.ic.com\n    Template:\n      Count: 2\n    Users:\n      Count: 1\n```", "```\ncryptogen generate --config=./crypto-config.yaml\n```", "```\nProfiles:\n    ICOrgsOrdererGenesis:\n        Orderer:\n            <<: *OrdererDefaults\n            Organizations:\n                - *OrdererOrg\n        Consortiums:\n            InsuranceClaimConsortium:\n                Organizations:\n                    - *Org1\n                    - *Org2\n                    - *Org3\n    ICOrgsChannel:\n        Consortium: InsuranceClaimConsortium\n        Application:\n            <<: *ApplicationDefaults\n            Organizations:\n                - *Org1\n                - *Org2\n                - *Org3\nOrganizations:\n    - &OrdererOrg\n        Name: OrdererOrg\n        ID: OrdererMSP\n        MSPDir: crypto-config/ordererOrganizations/ic.com/msp\n    - &Org1\n        Name: Org1MSP\n        ID: Org1MSP\n        MSPDir: crypto-config/peerOrganizations/org1.ic.com/msp\n        AnchorPeers:\n            - Host: peer0.org1.ic.com\n              Port: 7051\n    - &Org2\n        Name: Org2MSP\n        ID: Org2MSP\n        MSPDir: crypto-config/peerOrganizations/org2.ic.com/msp\n        AnchorPeers:\n            - Host: peer0.org2.ic.com\n              Port: 7051         \n    - &Org3\n        Name: Org3MSP\n        ID: Org3MSP\n        MSPDir: crypto-config/peerOrganizations/org3.ic.com/msp\n\n        AnchorPeers:\n            - Host: peer0.org3.ic.com\n              Port: 7051              \nOrderer: &OrdererDefaults\n    OrdererType: solo\n    Addresses:\n        - orderer.ic.com:7050\n    BatchTimeout: 2s\n    BatchSize:\n        MaxMessageCount: 10\n        AbsoluteMaxBytes: 20 MB\n        PreferredMaxBytes: 512 KB\n    Kafka:\n        Brokers:\n            - 127.0.0.1:9092\n    Organizations:\nApplication: &ApplicationDefaults\n\n    Organizations:\n```", "```\nconfigtxgen -profile ICOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block\n```", "```\nconfigtxgen -profile ICOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID icchannel\n```", "```\nnetworks:\n  icn:\nservices:\n  orderer.ic.com:\n    extends:\n      file:   base/docker-compose-base.yaml\n      service: orderer.ic.com\n    container_name: orderer.ic.com\n    networks:\n      - icn\n  peer0.org1.ic.com:\n    container_name: peer0.org1.ic.com\n    extends:\n      file:  base/docker-compose-base.yaml\n      service: peer0.org1.ic.com\n    networks:\n      - icn\n```", "```\ncli:\n    container_name: cli\n    image: hyperledger/fabric-tools\n    tty: true\n    environment:\n      - GOPATH=/opt/gopath\n      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock\n      - CORE_LOGGING_LEVEL=DEBUG\n      - CORE_PEER_ID=cli\n      - CORE_PEER_ADDRESS=peer0.org1.ic.com:7051\n      - CORE_PEER_LOCALMSPID=Org1MSP\n      - CORE_PEER_TLS_ENABLED=true\n      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.ic.com/peers/peer0.org1.ic.com/tls/server.crt\n      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.ic.com/peers/peer0.org1.ic.com/tls/server.key\n      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.ic.com/peers/peer0.org1.ic.com/tls/ca.crt\n      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.ic.com/users/Admin@org1.ic.com/msp\n    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer\n    command: /bin/bash -c './scripts/script.sh ${CHANNEL_NAME} ${DELAY}; sleep $TIMEOUT'\n    #for mapping the directories that are being used in the environment configurations\n    volumes:\n        - /var/run/:/host/var/run/\n        - ./chaincode/:/opt/gopath/src/github.com/chaincode\n        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/\n        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/\n        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts\n    depends_on:\n      - orderer.ic.com\n      - peer0.org1.ic.com\n      - peer0.org2.ic.com\n      - peer0.org3.ic.com\n    networks:\n      - icn\n```", "```\nservices:\n  orderer.ic.com:\n    container_name: orderer.ic.com\n    image: hyperledger/fabric-orderer\n    environment:\n      - ORDERER_GENERAL_LOGLEVEL=debug\n      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0\n      - ORDERER_GENERAL_GENESISMETHOD=file\n      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block\n      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP\n      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp\n      # enabled TLS\n      - ORDERER_GENERAL_TLS_ENABLED=true\n      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key\n      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt\n      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]\n    working_dir: /opt/gopath/src/github.com/hyperledger/fabric\n    command: orderer\n    volumes:\n    - ../channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block\n    - ../crypto-config/ordererOrganizations/ic.com/orderers/orderer.ic.com/msp:/var/hyperledger/orderer/msp\n    - ../crypto-config/ordererOrganizations/ic.com/orderers/orderer.ic.com/tls/:/var/hyperledger/orderer/tls\n    ports:\n      - 7050:7050\n\n  peer0.org1.ic.com:\n    container_name: peer0.org1.ic.com\n    extends:\n      file: peer-base.yaml\n      service: peer-base\n    environment:\n      - CORE_PEER_ID=peer0.org1.ic.com\n      - CORE_PEER_ADDRESS=peer0.org1.ic.com:7051\n      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.ic.com:7051\n      - CORE_PEER_LOCALMSPID=Org1MSP\n    volumes:\n        - /var/run/:/host/var/run/\n        - ../crypto-config/peerOrganizations/org1.ic.com/peers/peer0.org1.ic.com/msp:/etc/hyperledger/fabric/msp\n        - ../crypto-config/peerOrganizations/org1.ic.com/peers/peer0.org1.ic.com/tls:/etc/hyperledger/fabric/tls\n    ports:\n      - 7051:7051\n      - 7053:7053\n…..\n```", "```\nservices:\n  peer-base:\n    image: hyperledger/fabric-peer\n    environment:\n      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock\n      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_icn\n      - CORE_LOGGING_LEVEL=DEBUG\n      - CORE_PEER_TLS_ENABLED=true\n      - CORE_PEER_GOSSIP_USELEADERELECTION=true\n      - CORE_PEER_GOSSIP_ORGLEADER=false\n      - CORE_PEER_PROFILE_ENABLED=true\n      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt\n      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key\n      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt\n    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer\n    command: peer node start\n```", "```\n      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key\n      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt\n    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer\n    command: peer node start\n```", "```\ndocker-compose -f docker-compose-cli.yaml up\n```", "```\ncommand: /bin/bash -c './scripts/script.sh\n```", "```\npeer channel create -o orderer.ic.com:7050 -c icchannel -f ./channel-artifacts/channel.tx\n```", "```\npeer channel join -b icchannel.block\n```", "```\npeer channel update -f ./channel-artifacts/Org1MSPanchors.tx -c icchannel -o orderer.ic.com:7050 --tls true --cafile $ORDERER_CA\n```", "```\npeer chaincode install -n iccc -v 1.0 -l golang -p github.com/chaincode/claimcontract\n```", "```\npeer chaincode instantiate -o orderer.ic.com:7050 -C icchannel -n iccc -l golang -v 1.0 -c '{\"Args\":[ \"user_001\",\"John\",\"Smith\", \"9999\",\"4394497111/1\"]}' -P \"OR    ('Org1MSP.member'\n```", "```\npeer chaincode query -C $CHANNEL_NAME -n iccc -c '{\"Args\":[\"query\",\"user_001\"]}'\n```", "```\npeer chaincode invoke -o orderer.ic.com:7050 -C icchannel -n iccc -c '{\"Args\":[\"AddCompany\",\"broker_001\",\"BROKER\",\"BNC Brokerage\"]}'\n```", "```\npeer chaincode invoke -o orderer.ic.com:7050 -C icchannel -n iccc -c '{\"Args\":[\"AddCompany\",\"insurer_001\",\"INSURER\",\"Western Insurance\"]}'\n```", "```\npeer chaincode invoke -o orderer.ic.com:7050 -C icchannel -n iccc -c '{\"Args\":[\"ReportLost\",\"claim_001\", \"I was in Destiny shopping center and lost my IPhone 8\", \"user_001\", \"broker_001\"]}\n```", "```\npeer chaincode invoke -o orderer.ic.com:7050 -C icchannel -n iccc -c '{\"Args\":[\"RequestedInfo\",\"claim_001\", \"Broker processsed user John Smith report and sent Requested Info to user.\", \"insurer_001\"]}'\n```", "```\npeer chaincode invoke -o orderer.ic.com:7050 -C icchannel -n iccc -c '{\"Args\":[\"SubmitClaim\",\"claim_001\", \"Broker submitted a claim\"]}'\n```", "```\npeer chaincode invoke -o orderer.ic.com:7050 -C icchannel -n iccc -c '{\"Args\":[\"ConfirmClaimSubmission\",\"claim_001\", \"Insurer received and confirmed a claim\"]}'\n```", "```\npeer chaincode invoke -o orderer.ic.com:7050 -C icchannel -n iccc -c '{\"Args\":[\"ApproveClaim\",\"claim_001\", \"Insurer processed and approved the claim.\"]}'\n```", "```\npeer chaincode query -C icchannel -n iccc -c '{\"Args\":[\"getHistory\",\"claim_001\"]}'\n```", "```\ncd ~/insurance-claim\n#change path if insurance-claim directory is different\nexport PATH=/home/ubuntu/insurance-claim/bin:$PATH \n./icn.sh -m up\n```"]