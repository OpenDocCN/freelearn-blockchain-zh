["```\nC:\\WINDOWS\\system32>truffle\n```", "```\nC:\\Windows\\System32\\my_project>truffle unbox webpack\n```", "```\nC:\\Windows\\System32\\my_project>truffle-cli compile\n```", "```\nC:\\Windows\\System32\\my_project>truffle-cli migrate\n```", "```\npragma solidity ^0.4.17;\n\nlibrary ConvertLib{\n    function convert(uint amount,uint conversionRate) public pure returns (uint convertedAmount)\n    {\n        return amount * conversionRate;\n    }\n}\n```", "```\ncontract MetaCoin {\n```", "```\nmapping (address => uint) balances;\n```", "```\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n```", "```\nfunction MetaCoin() public {\n    balances[tx.origin] = 10000;\n  }\n```", "```\nfunction sendCoin(address receiver, uint amount) public returns(bool sufficient) {\n    if (balances[msg.sender] < amount) return false;\n    balances[msg.sender] -= amount;\n    balances[receiver] += amount;\n    Transfer(msg.sender, receiver, amount);\n    return true;\n  }\n```", "```\nfunction getBalanceInEth(address addr) public view returns(uint){\n    return ConvertLib.convert(getBalance(addr),2);\n  }\n\n  function getBalance(address addr) public view returns(uint) {\n    return balances[addr];\n  }\n```", "```\nlibrary ConvertLib{\n    function convert(uint amount,uint conversionRate) public pure returns (uint convertedAmount)\n    {\n        return amount * conversionRate;\n    }\n}\n```", "```\nfunction MetaCoin() public {\n    balances[tx.origin] = 10000;\n  }\n```", "```\ncontract MetaCoin {\n  mapping (address => uint) balances;\n  address creator;\n  uint creatorFee = 1;\n  uint collectedFees = 0;\n\n  uint conversionRate = 5;\n\n  uint CURRENCY_MULTIPLIER = 10**18;\n```", "```\n  function MetaCoin() public {\n      creator = msg.sender;\n  }\n```", "```\nmodifier onlyCreator() {\n        if (msg.sender == creator || tx.origin ==creator) {\n            _;\n         } \n}\n```", "```\nfunction collectFees() public onlyCreator {\n        creator.transfer(collectedFees);\n        collectedFees = 0;\n}\n```", "```\nfunction depsoit() public payable {\n        balances[msg.sender] += msg.value * conversionRate *  \n             CURRENCY_MULTIPLIER;\n}\n```", "```\nfunction withdraw(uint amount) public {\n        amount = amount * CURRENCY_MULTIPLIER;\n\n        balances[msg.sender] -= amount;\n        msg.sender.transfer(amount / conversionRate);\n    }\n```"]