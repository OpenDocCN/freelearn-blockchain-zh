["```\n $ ./autogen.sh\n```", "```\n $ ./configure\n\n```", "```\n      $ make\n      $ make install\n```", "```\n$ bitcoind -daemon\n```", "```\n$ bitcoin-cli getblockchaininfo \n{ \n  \"chain\": \"main\", \n  \"blocks\": 519993, \n  \"headers\": 519993, \n  \"bestblockhash\": \"0000000000000000000d4715ff499c5ce23c4b355634d4b59a2fe3823387dd12\", \n  \"difficulty\": 3839316899029.672, \n  \"mediantime\": 1524733692, \n  \"verificationprogress\": 0.999994783377989, \n  \"chainwork\": \"0000000000000000000000000000000000000000019897317fc702c4837762b2\", \n  \"pruned\": false, \n... \n} \n```", "```\n$ bitcoin-cli getrawtransaction \n4289bf1e7a4295e75fcff0644c44bd1c114511b7ec5407afea64de2d280bddb802000000010e1bd74a37fa90e5e8de8e4c20ec42a26c70ef40330b5361c560d03f3c8ba7e9000000006a47304402201a62b24dcbeba9ec65478be8a12ccd31c3c984\n9813782d1ca0bcab657a88762402204897f9c9e5e99de969fd5d076d80aebbaef19493f5e273663d4727864a67295b012102b21f43b03f57e029ea43f2cec448d4ff43740af4a68607507f34fd93be97bc30feffffff028096980000000000197\n6a914523f63d0e9f8cb9519482fc6a8476689e57555e688ac59065701000000001976a91469cac07f09af880832eedbcbc7e0dea94fb68e2688acb1bb1300\n```", "```\n$ bitcoin-cli decoderawtransaction \n02000000010e1bd74a37fa90e5e8de8e4c20ec42a26c70ef40330b5361c560d03f3c8ba7e9000000006a47304402201a62b24dcbeba9ec65478be8a12ccd31c3c9849813782d1ca0bcab657a88762402204897f9c9e5e99de969fd5d076d80aebbaef19493f5e273663d4727864a67295b012102b21f43b03f57e029ea43f2cec448d4ff43740af4a68607507f34fd93be97bc30feffffff0280969800000000001976a914523f63d0e9f8cb9519482fc6a8476689e57555e688ac59065701000000001976a91469cac07f09af880832eedbcbc7e0dea94fb68e2688acb1bb1300\n```", "```\nimport bitcoin.rpc \nfrom bitcoin.core import lx \n\nbitcoin.SelectParams('testnet') \n\nproxy_connection = bitcoin.rpc.Proxy() \ntx_id = lx(input()) \nprint(proxy_connection.gettransaction(tx_id)) \n```", "```\n$ bitcoin-cli getnewaddress\n1JK1yCXbP2WkwgzbAUqpWTeo9rQkA9seNg\n$ bitcoin-cli dumpprivkey 1JK1yCXbP2WkwgzbAUqpWTeo9rQkA9seNg\nL2NAKvQsbkeQZyhfPRWw1juQ19ohxGCFbdr8izQSHEmKWYFtVjXK  \n```", "```\nH = RIPEMD160(SHA256(K)) \n```", "```\n{ \"txid\": \"4289bf1e7a4295e75fcff0644c44bd1c114511b7ec5407afea64de2d280bddb8\", \"hash\": \"4289bf1e7a4295e75fcff0644c44bd1c114511b7ec5407afea64de2d280bddb8\", \"version\": 2, \"size\": 225, \"vsize\": 225, \n  \"locktime\": 1293233, \n  \"vin\": [ \n    { \n      \"txid\": \"e9a78b3c3fd060c561530b3340ef706ca242ec204c8edee8e590fa374ad71b0e\", \n      \"vout\": 0, \n      \"scriptSig\": { \n        \"asm\": \"304402201a62b24dcbeba9ec65478be8a12ccd31c3c9849813782d1ca0bcab657a88762402204897f9c9e5e99de969fd5d076d80aebbaef19493f5e273663d4727864a67295b[ALL] 02b21f43b03f57e029ea43f2cec448d4ff43740af4a68607507f34fd93be97bc30\", \n        \"hex\": \"47304402201a62b24dcbeba9ec65478be8a12ccd31c3c\n9849813782d1ca0bcab657a88762402204897f9c9e5e99de969fd5d076d80aebbaef19493f5e273663d4727864a67295b012102b21f43b03f57e029ea43f2cec448d4ff43740af4a68607507f34fd93be97bc30\" \n  }, \n      \"sequence\": 4294967294 \n    } \n  ], \n  \"vout\": [ \n    { \n      \"value\": 0.10000000, \n      \"n\": 0, \n      \"scriptPubKey\": { \n        \"asm\": \"OP_DUP OP_HASH160 523f63d0e9f8cb9519482fc6a8476689e57555e6 OP_EQUALVERIFY OP_CHECKSIG\", \n        \"hex\": \"76a914523f63d0e9f8cb9519482fc6a8476689e57555e688ac\", \n        \"reqSigs\": 1, \n        \"type\": \"pubkeyhash\", \n        \"addresses\": [ \n          \"mo1qeC6G2cLZqeBiSeLgKL2z1QcvsG9Mu3\" \n        ] \n      } \n    },  \n    { \n      \"value\": 0.22480473, \n      \"n\": 1, \n      \"scriptPubKey\": { \n        \"asm\": \"OP_DUP OP_HASH160 69cac07f09af880832eedbcbc7e0dea94fb68e26 OP_EQUALVERIFY OP_CHECKSIG\", \n        \"hex\": \"76a91469cac07f09af880832eedbcbc7e0dea94fb68e2688ac\", \n        \"reqSigs\": 1, \n        \"type\": \"pubkeyhash\", \n        \"addresses\": [ \n          \"mqAL8eXgSE7tHGF9fdYhYnwMFW3nnNyH9z\" \n        ] \n      } \n    } \n  ] \n} \n```", "```\n \"vout\": [ \n    { \n      \"value\": 0.1, \n      \"n\": 0, \n      \"scriptPubKey\": { \n        \"asm\": \"OP_DUP OP_HASH160 523f63d0e9f8cb9519482fc6a8476689e57555e6 OP_EQUALVERIFY OP_CHECKSIG\", \n        \"hex\": \"76a914523f63d0e9f8cb9519482fc6a8476689e57555e688ac\", \n        \"reqSigs\": 1, \n        \"type\": \"pubkeyhash\", \n        \"addresses\": [ \n          \"mo1qeC6G2cLZqeBiSeLgKL2z1QcvsG9Mu3\" \n        ] \n      } \n    } \n  ] \n```", "```\n\"vin\": [ \n    { \n      \"txid\": \"e9a78b3c3fd060c561530b3340ef706ca242ec204c8edee8e590fa374ad71b0e\", \n      \"vout\": 0, \n      \"scriptSig\": { \n        \"asm\": \"304402201a62b24dcbeba9ec65478be8a12ccd31c3c9849813782d1ca0bcab657a88762402204897f9c9e5e99de969fd5d076d80aebbaef19493f5e273663d4727864a67295b[ALL] 02b21f43b03f57e029ea43f2cec448d4ff43740af4a68607507f34fd93be97bc30\", \n        \"hex\": \"47304402201a62b24dcbeba9ec65478be8a12\nccd31c3c9849813782d1ca0bcab657a88762402204897f9c9e5e99de969fd5d076d80aebbaef19493f5e273663d4727864a67295b012102b21f43b03f57e029ea43f2cec448d4ff43740af4a68607507f34fd93be97bc30\" \n      }, \n      \"sequence\": 4294967294 \n    } \n  ], \n```", "```\n2 4 OP_ADD 6 OP_EQUAL \n```", "```\n4 OP_ADD 6 OP_EQUAL \n```", "```\n2 \n```", "```\n2 4 OP_ADD 6 OP_EQUAL \n```", "```\nscriptPubKey: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY \nOP_CHECKSIG \nscriptSig: <sig> <pubKey> \n```", "```\n<sig> <pubKey> OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY \nOP_CHECKSIG \n```", "```\nRIPEMD160(SHA256(pubKey)) \n```", "```\n$ bitcoin-cli getrawtransaction fc72760e6339eb43111034d76e67ffce69f9f3a4a5aa53f29dfe7299623bbba8 \n{ \n  \"txid\": \n\"fc72760e6339eb43111034d76e67ffce69f9f3a4a5aa53f29dfe7299623bbba8\", \n  \"hash\": \n\"d06aecb12c942dfd059b0d6ef7fbb76f8310fb2cfd4159984c8dce32d3f94b8f\", \n  \"version\": 2, \n  \"size\": 243, \n  \"vsize\": 216, \n  \"locktime\": 0, \n  \"vin\": [ \n    { \n      \"coinbase\": \n\"03fcf20704ff5bea5a622f4254432e434f4d2ffabe6d6dcc95de16874f4618351fc3946c8590509f1c5b0ac2ce802d71786eaef2f0da4301000000000000006e9694143ddc55d500000000\",\n \"sequence\": 4294967295 \n    } \n  ], \n  \"vout\": [ \n    { \n      \"value\": 12.59334356, \n      \"n\": 0, \n      \"scriptPubKey\": { \n        \"asm\": \"OP_DUP OP_HASH160 \n 78ce48f88c94df3762da89dc8498205373a8ce6f OP_EQUALVERIFY \n OP_CHECKSIG\", \n        \"hex\": \n \"76a91478ce48f88c94df3762da89dc8498205373a8ce6f88ac\", \n        \"reqSigs\": 1, \n        \"type\": \"pubkeyhash\", \n        \"addresses\": [ \n          \"1C1mCxRukix1KfegAY5zQQJV7samAciZpv\" \n        ] \n      } \n    },  \n    { \n     \"value\": 0.00000000, \n      \"n\": 1, \n      \"scriptPubKey\": { \n        \"asm\": \"OP_RETURN \n aa21a9edcde65b6fb3a180d2d81bdaab66592c9c2deb778ca3b3464e31d5209737\n e67f1b\", \n        \"hex\": \n \"6a24aa21a9edcde65b6fb3a180d2d81bdaab66592c9c2deb778ca3b3464e31d52\n 09737e67f1b\", \n        \"type\": \"nulldata\" \n      } \n    } \n  ] \n} \n```", "```\n$ bitcoin-cli getblockhash 0 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f \n```", "```\n$ bitcoin-cli getblock 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f \n{ \n  \"hash\": \"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\", \n  \"confirmations\": 521239, \n  \"strippedsize\": 285, \n  \"size\": 285, \n  \"weight\": 1140, \n  \"height\": 0, \n  \"version\": 1, \n  \"versionHex\": \"00000001\", \n  \"merkleroot\": \"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\", \n  \"tx\": [ \n    \"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\" \n  ], \n  \"time\": 1231006505, \n  \"mediantime\": 1231006505, \n  \"nonce\": 2083236893, \n  \"bits\": \"1d00ffff\", \n  \"difficulty\": 1, \n  \"chainwork\": \"0000000000000000000000000000000000000000000000000000000100010001\", \n  \"nextblockhash\": \"00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048\" \n} \n```", "```\nThe Times 03/Jan/2009 Chancellor on brink of second bailout for banks\n```", "```\n$ bitcoind -testnet &\n```", "```\n$ bitcoin-cli -testnet getinfo\n```", "```\n$ bitcoind -regtest\n```", "```\n$ bitcoin-cli -regtest generate 500  \n```", "```\nclass TxOut: \n    def __init__(self, address, amount): \n        self.address = address \n        self.amount = amount \n```", "```\nclass TxIn: \n    def __init__(self, tx_out_id, tx_out_index, signature): \n        self.tx_out_id = tx_out_id \n        self.tx_out_index = tx_out_index \n        self.signature = signature \n```", "```\nclass Transaction: \n    def __init__(self, tx_ins, tx_outs, tx_id=None): \n\n        self.tx_ins = tx_ins \n        self.tx_outs = tx_outs \n        self.id = tx_id if tx_id else get_transaction_id(self) \n```", "```\ndef get_transaction_id(transaction): \n\n    tx_in_content = reduce(lambda a, b : a + b, map( \n        (lambda tx_in: str(tx_in.tx_out_id) + str(tx_in.tx_out_index)), transaction.tx_ins), '') \n\n    tx_out_content = reduce(lambda a, b : a + b, map( \n        (lambda tx_out: str(tx_out.address) + str(tx_out.amount)), transaction.tx_outs), '') \n\n    return SHA256.new((tx_in_content + tx_out_content).encode()).hexdigest() \n```", "```\nclass UnspentTxOut: \n    def __init__(self, tx_out_id, tx_out_index, address, amount): \n        self.tx_out_id = tx_out_id \n        self.tx_out_index = tx_out_index \n        self.address = address \n        self.amount = amount \n```", "```\nself.unspent_tx_outs = process_transactions([self.genesis_transaction], [], 0)\n```", "```\ndef update_unspent_tx_outs(a_transactions, a_unspent_tx_outs): \n\n    def find_utxos(t): \n        utxos = [] \n        for index, tx_out in enumerate(t.tx_outs): \n            utxos.append(UnspentTxOut(t.id, index, tx_out.address, tx_out.amount)) \n        return utxos \n\n    new_utxos = reduce((lambda a, b: a + b), map(lambda t: find_utxos(t), a_transactions), []) \n```", "```\n    consumed_utxos = list(map(lambda txin: UnspentTxOut(txin.tx_out_id, txin.tx_out_index, '', 0), \n        reduce((lambda a, b : a + b), map(lambda t: t.tx_ins, a_transactions), []))) \n```", "```\n    resulting_utxos = list(filter(lambda utxo : not find_unspent_tx_out(utxo.tx_out_id, utxo.tx_out_index, consumed_utxos), a_unspent_tx_outs)) + new_utxos \n    return resulting_utxos \n```", "```\ndef validate_transaction(transaction, a_unspent_tx_outs): \n\n    if not is_valid_transaction_structure(transaction): \n        return False \n```", "```\n    if get_transaction_id(transaction) != transaction.id: \n        print('invalid tx id: ' + transaction.id) \n        return False \n```", "```\n    has_valid_tx_ins = reduce((lambda a, b: a and b), map(lambda tx_in: validate_tx_in(tx_in, transaction, a_unspent_tx_outs), transaction.tx_ins), True) \n\n    if not has_valid_tx_ins: \n        print('some of the tx_ins are invalid in tx: ' + transaction.id) \n        return False \n```", "```\n    total_tx_in_values = reduce((lambda a, b : a + b), \n        map(lambda tx_in : get_tx_in_amount(tx_in, a_unspent_tx_outs), transaction.tx_ins), 0) \n\n    total_tx_out_values = reduce((lambda a, b : a + b), \n        map(lambda tx_out : tx_out.amount, transaction.tx_outs), 0) \n\n    if total_tx_out_values != total_tx_in_values: \n        print('total_tx_out_values !== total_tx_in_values in tx: ' + transaction.id) \n        return False \n    return True \n```", "```\nimport binascii \nfrom ecdsa import SigningKey, VerifyingKey, SECP256k1 \n```", "```\ndef sign_tx_in(transaction, tx_in_index, private_key, a_unspent_tx_outs): \n\n    tx_in = transaction.tx_ins[tx_in_index] \n    data_to_sign = str(transaction.id) \n    referenced_utxo = find_unspent_tx_out(tx_in.tx_out_id, tx_in.tx_out_index, a_unspent_tx_outs) \n    if referenced_utxo is None: \n        print('could not find referenced txOut') \n        return False \n```", "```\n    referenced_address = referenced_utxo.address \n    if get_public_key(private_key) != referenced_address: \n        print('trying to sign an input with private' + ' key that does not match the address that is referenced in tx_in') \n        return False \n```", "```\n    sk = SigningKey.from_string(private_key, curve=SECP256k1) \n    signature = binascii.b2a_hex(sk.sign(data_to_sign.encode())).decode() \n    return signature \n```", "```\nPRIV_KEY_LOC = 'private_key' \nfrom ecdsa import SigningKey \n\ndef generate_private_key(): \n    sk = SigningKey.generate(curve=SECP256k1) \n    with open(PRIV_KEY_LOC, 'wt') as file_obj: \n        file_obj.write(binascii.b2a_hex(sk.to_string()).decode()) \n```", "```\ndef get_private_from_wallet(): \n    return binascii.a2b_hex(open(PRIV_KEY_LOC).read()) \n```", "```\ndef get_public_from_wallet(): \n    sk = SigningKey.from_string(get_private_from_wallet(), \ncurve=SECP256k1) \n    vk = sk.get_verifying_key() \n    return binascii.b2a_hex(vk.to_string()).decode() \n```", "```\ndef get_balance(address, unspent_tx_outs): \n    return sum(map(lambda utxo : utxo.amount, find_unspent_tx_outs(address, unspent_tx_outs))) \n```", "```\ndef find_tx_outs_for_amount(amount, my_unspent_tx_outs): \n    current_amount = 0 \n    incl_unspent_tx_outs = [] \n    for my_unspent_tx_out in my_unspent_tx_outs: \n        incl_unspent_tx_outs.append(my_unspent_tx_out) \n        current_amount = current_amount + my_unspent_tx_out.amount \n        if current_amount >= amount: \n            left_over_amount = current_amount - amount \n            return incl_unspent_tx_outs, left_over_amount \n    e_msg = 'Cannot create transaction from the available unspent transaction outputs.' \\\n            ' Required amount:' + str(amount) + '. Available unspent_tx_outs:' +          \n            json.dumps(my_unspent_tx_outs)\n    print(e_msg)\n    return None, None \n```", "```\ndef create_transaction(receiver_address, amount, private_key,\n                                      unspent_tx_outs, tx_pool): \n\n    my_address = get_public_key(private_key) \n\n    my_unspent_tx_outs_a = list(filter(lambda utxo: utxo.address == my_address, unspent_tx_outs)) \n\n    my_unspent_tx_outs = filter_tx_pool_txs(my_unspent_tx_outs_a, tx_pool) \n```", "```\n    incl_unspent_tx_outs, left_over_amount = find_tx_outs_for_amount(amount, my_unspent_tx_outs) \n    if not incl_unspent_tx_outs: \n        return None \n```", "```\n        def to_unsigned_tx_in(unspent_tx_out): \n            tx_in = TxIn(unspent_tx_out.tx_out_id, unspent_tx_out.tx_out_index, '') \n            return tx_in \n\n        unsigned_tx_ins = list(map(to_unsigned_tx_in, incl_unspent_tx_outs)) \n```", "```\n        tx = Transaction(unsigned_tx_ins,\n            create_tx_outs(receiver_address, my_address, amount, left_over_amount))\n```", "```\n        def sign_transaction(tx, index): \n            tx.tx_ins[index].signature = sign_tx_in(tx, index, private_key, unspent_tx_outs) \n\n        for index, txIn in enumerate(tx.tx_ins): \n            sign_transaction(tx, index) \n        return tx \n```", "```\ntransaction_pool = [] \n```", "```\ndef send_transaction(self, address, amount): \n    tx = create_transaction(address, amount, get_private_from_wallet(),\n     self.get_unspent_tx_outs(), get_transaction_pool()) \n    add_to_transaction_pool(tx, self.get_unspent_tx_outs()) \n    return tx \n```", "```\ndef update_transaction_pool(unspent_tx_outs): \n    global transaction_pool \n    for tx in transaction_pool[:]: \n        for tx_in in tx.tx_ins: \n            if not has_tx_in(tx_in, unspent_tx_outs): \n                transaction_pool.remove(tx) \n                print('removing the following transactions from txPool: %s' % json.dumps(tx)) \n                break \n```", "```\nQUERY_TRANSACTION_POOL = 3 \nRESPONSE_TRANSACTION_POOL = 4 \ndef query_transaction_pool_msg(self): \n    return { \n                'type': QUERY_TRANSACTION_POOL, \n                'data': None \n    } \n\ndef response_transaction_pool_msg(self): \n    return { \n                'data': JSON.dumps(get_transaction_pool()) \n    } \n```", "```\ndef construct_next_block(self): \n    coinbase_tx = get_coinbase_transaction(get_public_from_wallet(), self.blocks[-1].index + 1) \n    block_data = [coinbase_tx] + get_transaction_pool() \n    return self.generate_next_block(block_data) \n```", "```\n[ \n  { \n    \"data\": { \n      \"id\": \"baeece2d8e57aef79ef4e693df0485ca8938ad1f27fa9a0426c8788a3802f02f\", \n      \"tx_ins\": [ \n        { \n          \"signature\": \"\", \n          \"tx_out_id\": \"\", \n          \"tx_out_index\": 0 \n        } \n      ], \n      \"tx_outs\": [ \n        { \n          \"address\": \"0ae66e6adc350ec5c7961cc59cb53372dd421447d4d1b6d11ef8637ac21972068\n 8f8019485ac751414049162f1a71c1cc86c4e58bffb836a0d2eea3f324708df\", \n          \"amount\": 50 \n        } \n      ] \n    }, \n    \"difficulty_bits\": 0, \n    \"hash\": \"816534932c2b7154836da6afc367695e6337db8a921823784c14378abed4f7d7\", \n    \"index\": 0, \n    \"nonce\": 0, \n    \"previous_hash\": \"0\", \n    \"timestamp\": 1465154705 \n  } \n] \n```", "```\n{ \n  \"data\": { \n    \"id\": \"ac3d108ebbde3b657a5875ff4237682decf530e6dd6c4b7a77711b89e23a8618\", \n    \"tx_ins\": [ \n      { \n        \"signature\": \"901ea472a28294280fb7468fbc61efa0ddc5a98e375d022b4b7724a4184325c4c\n 2182c1091b493aec69f7ef81d912648a9e29b7941651c5fd660f72764698383\", \n        \"tx_out_id\": \"baeece2d8e57aef79ef4e693df0485ca8938ad1f27fa9a0426c8788a3802f02f\", \n        \"tx_out_index\": 0 \n      } \n    ], \n    \"tx_outs\": [ \n      { \n        \"address\": \"0ae66e6adc350ec5c7961cc59cb53372dd421447d4d1b6d11ef8637ac21972068\n 8f8019485ac751414049162f1a71c1cc86c4e58bffb836a0d2eea3f324708d2\", \n        \"amount\": 20 \n      }, \n      { \n        \"address\": \"0ae66e6adc350ec5c7961cc59cb53372dd421447d4d1b6d11ef8637ac21972068\n 8f8019485ac751414049162f1a71c1cc86c4e58bffb836a0d2eea3f324708df\", \n        \"amount\": 30 \n      } \n    ] \n  } \n} \n```"]