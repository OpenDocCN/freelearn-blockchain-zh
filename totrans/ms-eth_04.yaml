- en: Ethereum Assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will be introduced to different Ethereum protocol implementations
    so that you can better understand how the blockchain can be integrated in many
    different ways. After learning about protocol implementations, we will continue
    with INFURA, wallets, and **decentralized autonomous organizations**—also known
    as **DAOs**—so that you will learn how to create business networks that live on
    the blockchain without being limited by centralized governments. We will discuss
    several block explorers to learn how to examine your transactions so that you
    can analyze what happens when you upload smart contracts on the blockchain. Finally,
    you'll learn about some of the important issues regarding blockchain implementation
    to help you solve common problems that you will most likely face at one point
    or another.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Ethereum protocol implementations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: INFURA essentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decentralized autonomous organizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellanea and concerns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own private Ethereum network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing a wallet for Ethereum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Etherscan for transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum protocol implementations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ethereum is an open source system that can be implemented in different languages
    to provide people with the option to interact using their preferred tool. Some
    of those full-node implementations are Geth and Parity. We will explore how they
    differ and what the best scenario to use them is in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Protocol implementations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you read in the preceding paragraph, the Ethereum implementations that we
    will cover are Geth, Parity, Mist, and Embark. Why these four only? It's because
    they are the most popular implementations, which give you the power to fully execute
    all the capabilities of the blockchain. Things like mining, making transactions,
    downloading the entire blockchain, interacting with your deployed contracts, and
    creating accounts are possible with all of them.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Geth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Geth, also known as Go Ethereum, is the most popular Ethereum implementation
    that allows you to do a wide variety of tasks. We will go through how to do most
    of them in the following sections to help you understand how to execute each of
    the commands that are required for every task.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install Geth easily with the following commands on macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, if you're using Windows or Linux, you can go to [geth.ethereum.org/downloads/](https://geth.ethereum.org/downloads/)
    and get an executable for your system. In either case, the `geth` command will
    be available in your Terminal or command line after installation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create unlimited accounts with Geth, as they are generated from an
    algorithm known as **Rivest Shamir Adleman** (**RSA**) that creates the public
    and private keys off-chain. The number of possible combinations is so big that
    it is nearly impossible to generate the exact same account as another user. To
    generate an account with Geth, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will ask you for a password to keep your credentials safe. You can then
    manage your accounts with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `update` command is used to change the password of a specific account so
    that you can unlock it easily if you decide to do so. You can use this command
    to remove your existing password.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also unlock your Geth account using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This essentially unlocks your Geth account so that you can send transactions
    via the console directly.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can also create accounts without a password by pressing *Enter*
    when asked, without typing anything.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the blockchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main function of Geth is to download the blockchain, so that you can have
    a full node on your device for whatever purpose you may need. To do so, execute
    this command on your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Running `geth` without parameters starts to automatically download the latest
    version of the blockchain in the default directory with a RAM default of about
    1 MB. You can change the location where the blockchain will be downloaded with
    this flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To change the portion of RAM used to download the blockchain, use this flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The number in this flag is how much RAM you want to dedicate exclusively to
    this process. The more you give it, the faster it will download each component
    of the main Ethereum chain. Nonetheless, it will take several hours to get the
    complete chain of data since it has massive amounts of information made of past
    transactions. Remember that the chain stores every single transaction permanently
    without the option to delete the past.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then visualize node metrics after downloading the chain with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Mining with your CPU
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Geth is also capable of mining Ether on its own using your CPU, which is not
    an efficient process compared to alternatives such as mining with your graphic
    cards or with **Application-specific integrated circuits** (**ASICs**). Nevertheless,
    its addition to this tool may be useful in different situations where low-resource
    mining is required, such as with IoT devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'To mine with Geth, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'It will start downloading and synchronizing your chain if it''s not synchronized
    already. You''ll be able to receive funds after you set up your `etherbase`, which
    can be easily done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The last number indicates which account will be used from your list. You can
    see your accounts with the `geth account list` command.
  prefs: []
  type: TYPE_NORMAL
- en: Parity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Parity** is one of the most developed Ethereum protocol implementations,
    since it provides you with a stunning interface from which you can use all the
    functions, including deploying contracts and interacting with the blockchain.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Parity, run this command on Linux or Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'It will automatically download the latest version, compile it, and get the
    required components to work right away. For Windows, though, you''ll have to acquire
    the executable from their official website, here: [www.parity.io/ethereum/](https://www.parity.io/ethereum/).'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the blockchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before being able to interact with Parity, you''ll have to download the blockchain,
    which can be done simply by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: After installing it, you'll then be able to access the web interface on the
    `localhost:8080` website, which will show you all the options at your disposal.
  prefs: []
  type: TYPE_NORMAL
- en: Creating accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create accounts with Parity, you simply have to click on the ACCOUNTS tab
    and select + ACCOUNT, right below the main tab, to generate a new account, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d833684-810d-43d1-a643-ce534b31df57.png)'
  prefs: []
  type: TYPE_IMG
- en: Mining with your CPU
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Parity can be used in coordination with other GPU miners that will provide
    you with better hashrates so that you can become profitable from the beginning,
    compared to mining with your CPU. Nevertheless, you can mine with your processor
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You'll then start generating a minuscule amount of ether to that address.
  prefs: []
  type: TYPE_NORMAL
- en: Best scenario for each protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Geth and Parity are both great tools that can do the same job for all kinds
    of decentralized application and smart contract development frameworks. However,
    there are specific use cases where one could be better than the other.
  prefs: []
  type: TYPE_NORMAL
- en: Smart contract development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: and both offer a simple way of deploying and interacting with your smart contracts
    after downloading the full Ethereum main chain. Nevertheless, Parity is the better
    choice given the fact that it provides you with a dedicated tab to write your
    smart contract code in an easy-to-use IDE. You can compile smart contracts to
    a specific version, save them, and deploy them to the network. What's better is
    that it will automatically highlight your code, which it quite uncommon with most
    Solidity and Vyper editors.
  prefs: []
  type: TYPE_NORMAL
- en: Geth, on the other hand, uses a command-line interface that makes smart contract
    development harder.
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I find Parity's interface a fantastic tool for any kind of Ethereum
    developer. It's fast, looks great, you have full control of your own node, it
    feels good, and it's easy to use.
  prefs: []
  type: TYPE_NORMAL
- en: Managing accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When it comes to managing several Ethereum accounts, you can either use the
    web interface that Parity provides or use the command-line tools from Geth. In
    this situation, both are great options for different purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: Use Parity if you are managing multi-signature wallets because it has a built-in
    section to administer those types of complex wallets, which is missing from Geth.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Geth if you need a simpler system based on a command-line interface that
    provides you with fewer headaches for faster operations given that you don't need
    to open the web interface to interact with them. You won't have to wait for the
    small but noticeable load times that such a UI exposes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to different situations such as mining, downloading the blockchain,
    transferring funds, and exploring your local blockchain's history, deciding which
    is the better option is up to you. Both are equivalent to one another and will
    give you the same results with small differences.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ve learned about the main features that these Ethereum implementations
    can do for you. We saw how Geth and Parity are used, how they interact with the
    blockchain, and some real-world commands that you can directly apply for your
    own personal projects. Remember to take a look at Parity''s fantastic smart contract
    code editor: you''ll love it.'
  prefs: []
  type: TYPE_NORMAL
- en: INFURA essentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**INFURA** is a popular technology for connecting to the blockchain without
    having to download the several hundred gigabytes that it contains, because it
    freely provides you with full nodes.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding INFURA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: INFURA helps millions of users get connected to the blockchain by providing
    them with ready-to-use Ethereum instances. It's one of the biggest projects that
    aims to revolutionize Ethereum's adoption, since everybody is able to connect
    to Ethereum immediately to process transactions and interact with the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'It powers popular applications such as MetaMask to make transactions from your
    browser. That''s one of the reasons ICOs became so popular—because people found
    a simple way to interact with the blockchain to make transactions that are easy
    to execute with MetaMask and INFURA''s infrastructure. You are free to use INFURA
    in your own applications by simply using a link to the right network for your
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the main network, use this link: [https://mainnet.infura.io](https://mainnet.infura.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For test networks, use the test net''s name, for instance: [https://ropsten.infura.io](https://ropsten.infura.io),
    [https://rinkeby.infura.io](https://rinkeby.infura.io) and [https://kovan.infura.io](https://kovan.infura.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, those are free URLs, but they are limited in the number of requests that
    you can make. If you want unrestricted access to the blockchain, you'll have to
    create an account on [https://infura.io](https://infura.io) and you'll get a unique
    token ID that you will be able to use for your own needs without restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: INFURA also works with IPFS, which is a protocol for decentralized storage,
    similar to torrent, so that you can upload content in a decentralized network
    without centralization.
  prefs: []
  type: TYPE_NORMAL
- en: Inner workings of INFURA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: INFURA, on the surface, provides a clean API that many blockchain developers
    can use freely for their decentralized applications to improve Ethereum adoption.
  prefs: []
  type: TYPE_NORMAL
- en: 'Behind the scenes, they have a set of computers with the latest version of
    the Ethereum blockchain downloaded and synchronized to dynamically scale the resource
    requirements whenever users are generating larger amounts of transactions. The
    following diagram shows how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0714da14-b940-4c1d-98c5-25dea374a774.png)'
  prefs: []
  type: TYPE_IMG
- en: Instead of having to download the blockchain on your own while spending countless
    gigabytes and hours downloading the latest chain, you can simply connect to INFURA,
    where you'll have immediate access to the various Ethereum chains without restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: Using INFURA's dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you register as a new user on INFURA, you''ll have access to the dashboard,
    where you can create projects to see statistics and detailed information about
    your project''s ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d40d3e8b-ba58-44d1-b28d-271a1f6afb92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first thing that you''ll want to do is create a new project by clicking
    on the Create New Project button so that you get an endpoint that''s usable by
    your dApps to connect to the right blockchain, whether it''s Ropsten, mainnet,
    Rinkeby, or Kovan. Once you click that button, you''ll be asked to name it and
    a project will be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7125cab-cd22-4141-acfd-3efb91d297d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on View Project, you''ll see a page with settings to modify the
    security of that endpoint and the name of it, and the option to delete it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1d28b60-df59-4781-a4e6-5e751032bbff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on View Stats, you''ll see a page with plenty of information about
    the number of requests and bandwidth usage, as well as statistics about the time
    of day the endpoint is used, among other valuable information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/808f1953-697a-4a36-9805-45e35c1735ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Besides those buttons, you have a few clickable links where you can quickly
    access the docs and the status of INFURA, and receive support in case you need
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6a04740-ba7b-4e9c-a1b8-13af87c6deb7.png)'
  prefs: []
  type: TYPE_IMG
- en: The infrastructure that powers INFURA is truly an interesting proposition, made
    by the guys at ConsenSys, who created a gigantic network of connected users wanting
    to participate in the blockchain revolution without the excessive demands in time
    and storage that downloading such a large blockchain would require.
  prefs: []
  type: TYPE_NORMAL
- en: It's one of the best ways to provide open access to all the new users that will
    soon take advantage of this exciting technology. It's also perfectly aligned with
    blockchain core concepts of open technology. However, it could become a problem
    in the future if too many applications and users end up depending on it, making
    it a centralized point of failure that could disable thousands of dApps if the
    service fails. To avoid such a tragic scenario, remember to set up your own Ethereum
    nodes for production applications to increase decentralization.
  prefs: []
  type: TYPE_NORMAL
- en: Decentralized autonomous organizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Decentralized autonomous organizations**, also known as **DAOs**, are some
    of the best use cases of the blockchain since they''re the perfect link between
    trust and old systems that should be updated for modern times.'
  prefs: []
  type: TYPE_NORMAL
- en: Explaining DAOs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **DAO** aims to be the main place where businesses make decisions. They are
    the decentralized version of traditional companies that reach decisions by discussing
    with stakeholders and key components of each DAO. Simply, they use the trustless
    nature of the Ethereum blockchain to form a legal company with all of its possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: They rely on smart contracts to provide hardcoded functionalities where users
    can make decisions and reach agreements with multi-signature wallets. Multi-signature
    wallets are similar to Ethereum accounts in the sense that they store ETH and
    are capable of making transfers; however, the underlying technology is made up
    of smart contracts that force members to agree on each decision by signing it
    with their own address.
  prefs: []
  type: TYPE_NORMAL
- en: They are called **autonomous** because they run by themselves on top of the
    blockchain without requiring anybody to maintain them, compared to traditional
    companies where the evolution of every component must be studied to avoid legal
    consequences and structural problems.
  prefs: []
  type: TYPE_NORMAL
- en: Operating within a DAO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The idea of creating unstoppable organizations that aren''t controlled by governments
    or external entities is simpler to understand than it may appear at first. That''s
    why I''ve prepared a simple diagram showing the process that DAOs partake in on
    a normal, day-by-day basis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d8c8bcc-b998-473b-9eba-29cd885c6a44.png)'
  prefs: []
  type: TYPE_IMG
- en: Each DAO works independently, and each user is able to create topics to vote
    on for reaching decisions. Each token holder has the option to vote with a weight
    that depends on how many tokens he or she has. The larger percentage of the total
    tokens you have, the more decision power you get in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Initially, this shouldn't be a problem, since it's expected that people will
    vote on the best outcome for the company, but later on it could cause centralization
    issues where a few hands end up controlling most of the tokens, thus being able
    to collaborate for personal benefits. This is similar to a 51% attack where a
    portion of the entire company makes all the decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Tooling for DAOs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You could code your own DAO smart contracts to give organization members functions
    to create proposals with voting mechanisms, but there are already existing solutions
    that will help you simplify the process to speed the setup times.
  prefs: []
  type: TYPE_NORMAL
- en: '**AragonOS** is one of the most used development frameworks for creating decentralized
    autonomous organizations, which gives you the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: Update your DAO smart contract to the latest version with all the improvements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limit access to specific users with permission control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add additional voting apps on top of it for extended functionalities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The idea is to simply create the DAO, configure permissions, and start building
    the components of the organization for reaching governance decisions. You can
    also use the AragonUI for interacting with your organization in a beautiful and
    simple manner. The famous ICO that was later hacked known as **The DAO** is not
    available after such impactful consequences, so you can't benefit from the options
    they gave for creating new decentralized organizations.
  prefs: []
  type: TYPE_NORMAL
- en: Miscellanea and concerns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ethereum is a complex system of tools working together to achieve a grant solution
    that helps thousands of users make decentralized transactions where they don't
    have to trust external entities with their private data and abusive rules. That's
    why it's completely normal to have questions regarding the way those internal
    sections communicate with one another. Here, we'll provide you with answers to
    some of the most common questions any user faces during development and use of
    the blockchain so that you can tie this new knowledge together with a strong foundation.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Ethereum improvement proposals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ethereum is a breathing technology that is continuously improving with new research
    being generated by all kinds of experts so that they move decentralized technology
    forward. The way new changes are included in this blockchain is via **Ethereum
    Improvement Proposals**, better known as **EIPs**.
  prefs: []
  type: TYPE_NORMAL
- en: Standards such as ERC20 and ERC721 were born from EIPs, and were identified
    by the numbers 20 and 721, respectively. Those EIPs are being created in the official
    Ethereum GitHub repository under the name EIPs, located at [https://github.com/ethereum/EIPs/issues](https://github.com/ethereum/EIPs/issues),
    where you can see people contributing to the core Ethereum innovations with improvements
    that benefit the system as a whole. In fact, the ERC20 standard was created from
    the need to generate unique cryptocurrencies based on Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: They are an essential part of Ethereum's evolution and provide very interesting
    features that make this blockchain one of the best for real-world use cases to
    solve people's problems through technology.
  prefs: []
  type: TYPE_NORMAL
- en: Differentiating the usage of Truffle and IDEs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are probably familiar with the framework known as **Truffle**, which allows
    you to write, deploy, and test contracts in a sustainable manner with minimal
    configurations once set up. It's one of the best tools for deploying advanced
    and simple projects; however, you may not want to use it for specific use cases.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, you may be working on a simple 50-line smart contract that runs
    a few basic functions for an application that you're building. In those situations
    where you know the smart contract code will be small, you are better off using
    an IDE that lets you develop your code without having to spend some precious time
    setting up a project with Truffle. Sometimes, you only need to write a smart contract
    once because you don't intend on upgrading it with new features. It's in those
    cases where you should choose an IDE such as Remix to save time and for simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: Truffle, on the other hand, should be chosen when you are working on complex
    dApps with larger smart contracts that require testing and maintainability so
    that they are secure.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding smart contract limitations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you intend to work on a new blockchain-based project, you must take into
    account the limitations that current smart contract languages face, because they
    will determine how far you can go complexity-wise in your development. Remember,
    your dApp is only as good as the smart contracts behind it, so it makes sense
    to consider what can and cannot be done in a smart contract.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the problems that you'll face as a smart contract developer will come
    from the fact that your programs are constantly being reduced in size because
    you can't create an infinitely large smart contract. There's a fixed limitation
    to how big your contracts can be, so you have to work within those limits.
  prefs: []
  type: TYPE_NORMAL
- en: Pay attention to what compilers tell you when creating complex smart contracts
    to understand when you hit a roadblock and how to solve it. You will face cases
    where programs simply can't be done the way you thought possible. It's in those
    cases that you have to understand loop limitations, function costs, and smart
    contract interoperability to successfully create larger code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own private Ethereum network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At some point or another as a blockchain developer, you'll have to create an
    Ethereum blockchain with custom properties. This is now more relevant considering
    that side-chains are starting to emerge with the famous scaling technology **plasma**.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a private blockchain on Mac
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, how do we create a custom Ethereum blockchain? These are the instructions
    for Mac. I''ve tried them and they should work for you:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install the Ethereum packet with `homebrew` by executing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: It will take some time to process, especially if it's your first time executing
    `brew`. In my case, it said `Updating Homebrew…` and after some time, it was installed.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you should have access to the `geth` and `puppeth` commands. Geth is the
    main command-line interface that's used to interact with the Ethereum blockchain
    to download the main chain among other tasks. Puppeth is a tool for setting up
    your own private blockchain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll need an Ethereum address before setting up your `genesis.json` file.
    Create an account with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: It will ask you for a password. Just type in the password and you'll see your
    account's address. Make sure to copy it somewhere safe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3299075b-e675-497c-9493-b6058c2eb50a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It may ask you for a network to administer. In that case, just type a random
    name for the new network that you want to create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7bb6ec0d-f006-473c-b3c3-99475c35d332.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, choose the second option to create a new `genesis` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a9ff9fe-0868-4c7f-b709-87c86e2cc80d.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a new `genesis` file from scratch and choose the first consensus engine,
    `proof-of-work`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, it will ask you which accounts should be pre-funded. Here''s where you''ll
    paste the account address that you copied after generating a new address with
    the `geth` command previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a50950bc-14b1-44e0-9d92-1efe77c852ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, it will ask you if the precompile-addresses should be pre-funded with
    1 wei. Say `yes` to that. It is basically a bunch of addresses that will be required
    for compiling the blockchain. After that, specify a random network ID: in my case,
    I chose `77` as the ID. The main Ethereum public network has an ID of `1`, so
    you have to choose a different number to differentiate your blockchain from theirs.
    This is important to avoid replay attacks where a malicious user could take a
    transaction from one blockchain and execute it again in another blockchain for
    their own benefit. This ID number avoids precisely that vulnerability:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07525355-bf9b-424c-b1f4-9de7617bdcd4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ve configured and created the `genesis.json` file that will be used to
    start your own private blockchain at any time. Now, you have to export it to be
    able to use it. To do so, select the second option of the already executing `puppeth`
    command – `Manage existing genesis` – then select `Export genesis configurations`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/74aab314-9140-4ea9-ac15-0b74300d42b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, it will ask you where you want to export the genesis files to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d2872d3-98e3-470d-b1cb-8ae87a56fc7e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll see your files in the selected folder. If you didn''t choose one, the
    files will be created in your user folder or wherever your Terminal''s location
    is at that moment. These are the files that you''ll find:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`genesis.json`: Or whatever name you''ve chosen for your genesis network. This
    file contains the general chain specification that we saw earlier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`genesis-aleth.json`: This is the genesis file for the Aleth Ethereum client.
    Aleth is just an Ethereum client written in C++. It was previously known as cpp-ethereum.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`genesis-harmony.json`: Harmony is another independent client written in JavaScript
    and Java. This is the genesis file compatible with their specification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`genesis-parity.json`: Parity is a well-known Ethereum client written in the
    programming language Rust. This is the genesis file that''s compatible with Parity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Great! You have now exported the genesis file for your private Ethereum blockchain.
    To initialize your blockchain, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: That will load the genesis blockchain state and start your private Ethereum
    blockchain. Make sure to add the `0x` prefix in front of your Ethereum address
    if you haven't already done so. Remember that the address is the one you created
    with the `geth` command earlier. It will ask you for your account's password,
    which you set up when you created it. Type it in and press *Enter* to unlock it.
    If you don't remember your password or your account, you'll have to go back to
    create a new account with the `geth` command and create a new genesis file with
    that address when asked.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s about it! You now have a working private Ethereum blockchain with your
    own configuration parameters. What''s interesting about this private blockchain
    is that you can connect it to the Remix IDE. This will allow you to deploy and
    test contracts at extreme speeds. To be able to connect your private blockchain
    with the remix IDE, you have to allow the remix domain in your list of allowed
    domains. Simply execute this modified command to start the blockchain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'With my Ethereum address, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, go to [https://remix.ethereum.org](https://remix.ethereum.org). Note that
    the domain must start with `https` with an s at the end for added security. Once
    there, select the Run tab and change the Environment to Web3 Provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db6af901-b66d-4518-ab77-b362ed94d0ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It will ask you if you''re sure that you want to connect to an Ethereum node.
    Click on OK and OK again when asked to confirm the Web3 Provider Endpoint without
    modifying it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3626b731-64da-4aef-a10f-f288a3a46f04.png)'
  prefs: []
  type: TYPE_IMG
- en: That will give you access to your accounts running on your private Ethereum
    instance so that you can deploy and test your smart contracts freely.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a private blockchain on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I decided to ignore Linux and other operating systems for the simple fact that
    Windows and Mac are the most used platforms for development by a large margin.
    So, in this section, you'll learn how to create a private blockchain on Windows.
    The steps are almost the same, but there are some subtle differences that need
    to be addressed so that you have a clear guide for what to do if you want to build
    this kind of custom private blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'You already understand that building a private Ethereum blockchain is useful
    because you can speed up your development times, you can configure the blockchain
    to your own preferences with faster block times, and you can attain the required
    knowledge to spin up your own Ethereum instance whenever you need. Via the following
    steps, you''ll learn how to set up a private blockchain on Windows, that''s a
    skill necessary for larger projects that you need to master:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to download Geth. Geth is the main Ethereum client that contains
    the logic needed to run a custom blockchain. You can download it by going to [geth.ethereum.org/downloads](http://geth.ethereum.org/downloads):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/79eefe25-b65e-4af8-84bb-51fee4dbb047.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Geth for Windows button to start the download. When you run the
    installer, you''ll be asked if you want to install the development tools:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7d71b0d0-6cbb-4b01-bd12-fd7b5f7fddff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Be sure to activate it. Select the preceding option because you will use the
    required tools for setting up your custom blockchain. Then, just click on Next
    and Install to complete the installation. If it was successful, you''ll be able
    to run `geth` on your command line or Windows PowerShell, which is the Terminal
    that I recommend, since it contains additional commands and looks more professional:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a63f6c20-d5ec-4fcf-863d-f9211918d3e9.png)'
  prefs: []
  type: TYPE_IMG
- en: Make sure to *Ctrl + C* if you run the `geth` command to avoid downloading hundreds
    of gigabytes of blockchain data from the main Ethereum network. The next steps
    are practically the same as the ones that you read in the previous section, but
    we'll go through them just in case to avoid potential confusion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You now need to create an Ethereum account locally, which you''ll use later
    for your blockchain. To do so, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll have to write down a password twice, so be sure to remember it. After
    that, run the `puppeth` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/364f0d9a-f8bc-4b00-b8f8-ead7e60d2450.png)'
  prefs: []
  type: TYPE_IMG
- en: If you can't execute `puppeth` or you get an error when trying to do so, it
    is because it wasn't installed when you installed `geth`. Make sure to open the
    Geth installer again and check the developer tools when asked, since that's where
    `puppeth` will be included in your system. Then, reopen your command line or Terminal
    to see the changes.
  prefs: []
  type: TYPE_NORMAL
- en: You will see that it asks you for a network to administer. Create a random name
    that you'll later use to identify your own custom blockchain. In my case, I used
    `merunas` as the network name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right after that, it will ask you for additional instructions. Select the second
    option – `Configure new genesis` – since what we want to do is create a private
    blockchain and for that, we need to create a genesis file, which is the first
    block of it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/08da0c2c-ad10-49cd-9cbd-2fed28b249ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, select the first option: `Create new genesis from scratch`. It will ask
    you for the consensus engine that you want to use. In this case, I decided to
    use `Ethash`, since it is the one used by the real Mainnet, although `Clique`
    is a good option to experiment with `proof-of-authority`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a8e4145f-a1dc-488b-ba9d-a80d256a02b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, you'll have to provide your Geth account that you just created since it
    needs a pre-funded account for initialization. Just copy and paste the address
    that you received. If you don't remember it, open another terminal and type `geth
    account new` for generating a new account before continuing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, it will ask you if the precompile-addresses should be pre-funded with
    1 wei. Say `no` because you don''t need those accounts, and they will fill your
    genesis files with unnecessary configurations. Finally, specify a network ID for
    the blockchain that you just set up. I recommend a number bigger than 10 because
    the lower numbers are being used by the main network and testnets, so you want
    to use a unique identifier to avoid replay attacks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc9719d6-75e4-45f8-ac98-54625f1123a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Congratulations! You just configured your genesis file, which is the building
    block of you own private Ethereum blockchain. Now, what you have to do is export
    it. Do this by selecting the second option – `Manage existing genesis` – and then
    the second option again: `Export genesis configurations`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9579653e-bce2-430d-a92b-5493c31c9a96.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you should have your configuration files in the selected folder. To load
    your custom blockchain on Geth, use this command with the location of your custom
    genesis file that you just exported:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, in my case, it''s as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'I have used quotes so that I can include a whitespace between the folder names,
    since the folder that I created is called `puppeth blockchains` and it was giving
    me an error when I was running the command without quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8657dce4-1e91-4916-b388-ea73ef2ea5f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you get an error saying `Failed to write genesis block: database already
    contains an incompatible genesis block`, simply execute the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: When you run `geth removedb`, you're deleting the downloaded blockchain, which
    solves the problem of incompatible genesis blocks. It's mainly caused because
    you've started to download the blockchain with a genesis file while at some point
    you decided to use a different genesis file, which is invalid because the configuration
    gets permanently stored in the first block, also known as the genesis block. You
    can't change the blockchain settings after mining the genesis block without deleting
    the previous blockchain first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to run this blockchain of yours, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'It will ask you for your account''s password. Just type it and you''ll see
    the blockchain ready to mine blocks. Now, you can use it for whatever projects
    you desire, including connecting it to the Remix IDE, as you saw previously. You
    can do so with the exact same command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can finally connect the node on the Remix IDE so that you can deploy
    your contracts on your own blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a wallet for Ethereum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ethereum wallets are as diverse as you can imagine. From software wallets, to
    hardware and even paper wallets, the choice of selecting the best wallet for your
    needs is increasingly difficult if you don't understand the differences. That's
    why in this section we'll explore the options when it comes to wallets so that
    you choose the best one for every project.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the concept of an Ethereum wallet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It seems intuitive – a wallet is a place where you store your crypto funds
    – but in reality, wallets are much more complex than they appear. Wallets connect
    to the Ethereum blockchain to find your latest balance, which is accessible via
    smart contracts, dApps, or via the blockchain client itself. Ethereum clients
    download the entire chain data, and they are able to search for the transactions
    associated with your account. Some of them will be transfers, while others can
    be smart contract executions where you pay gas. At the end, it''s possible to
    obtain your current balance just by reading the transactions contained in the
    latest block with your address, as shown in the following diagram where balances
    are being updated after several transactions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4b89893-b56a-4733-9612-08fe09aab755.png)'
  prefs: []
  type: TYPE_IMG
- en: Since security is a big issue when dealing with money, wallets have to protect
    every vulnerable area in which your credentials may be used. Your private keys,
    your seed, and your address shouldn't be easily accessible by anyone. That's the
    reason why there are different wallet implementations. They can be online or offline,
    and you can go a step further by using offline hardware wallets made specifically
    to store cryptocurrencies.
  prefs: []
  type: TYPE_NORMAL
- en: Explaining online wallets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are wallets that you can access only when you have an internet connection,
    since they are web-based and allow you to interact with your wallets from almost
    anywhere as long as you''re connected. Note that they don''t always keep your
    private keys in their servers: some do, but most require you to provide your private
    keys to them every time you want to access your wallet. Let''s take a look at
    some of them to understand how they work.'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing MyEtherWallet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MyEtherWallet is the most popular Ethereum wallet app, which you can use to
    access your wallet. It will ask you for your private keys whenever you want to
    log in; since it doesn''t store your credentials online, it''s just a platform
    to interact with your funds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/691a5964-6fad-4efb-b1d9-1c53e6919aae.png)'
  prefs: []
  type: TYPE_IMG
- en: When you open [myetherwallet.com](http://myetherwallet.com), you'll see a clear
    box, indicating that you can create a new wallet. If you already have one, just
    click on the **Send Ether & Tokens** tab, which will ask you to upload your private
    key in different format options.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t have a wallet yet, click on **Create New Wallet** to generate
    a new account after typing your password. Then, it will ask you to save your private
    key and store it somewhere safe. Remember that your private key is the main element
    of your wallet: if you lose it, you won''t be able to access it and your funds
    will be forever lost.'
  prefs: []
  type: TYPE_NORMAL
- en: Using MetaMask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**MetaMask** is another famous wallet that is mainly used as an intermediary
    wallet where people send ether to interact with decentralized applications and
    smart contracts. MetaMask uses INFURA in the backend, so the connection to the
    blockchain is immediate and you don''t have to download hundreds of blocks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'What''s interesting about this wallet is that it injects `web3.js` into whatever
    page you''re examining, meaning that you can use any dApp as long as you have
    logged into MetaMask:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6194efa5-044b-4380-9520-109b590c0633.png)'
  prefs: []
  type: TYPE_IMG
- en: Whenever you want to interact with the blockchain by making a transaction on
    a decentralized application, MetaMask will open a pop-up window, asking you how
    much it will cost you, with gas price included. Then, you'll be able to make the
    transaction straight from the browser.
  prefs: []
  type: TYPE_NORMAL
- en: What's also great about this wallet is that you can change your blockchain network
    at any point with a few clicks. This is great for developing since you can deploy
    your smart contracts to Ropsten and then to Mainnet if everything looks right.
    Overall, this is a fantastic wallet for developers and users alike who want to
    interact with decentralized applications, including ICOs.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding hardware wallets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are wallets that keep your funds offline in a small device that stores
    your cryptocurrencies safely. The interesting thing about these devices is that
    they don't interact using your private keys; they have a system to log you into
    wallets without putting your private keys at risk, since they store them internally
    and are encrypted for increased safety.
  prefs: []
  type: TYPE_NORMAL
- en: The most popular ones are Ledger and Trezor. Those companies build different
    devices that you set up with a seed and then use with your cryptocurrencies for
    as long as they work. Note that they are only as good as a printed private key,
    meaning that nobody will have access to them online and they will keep your funds
    safe if you don't lose them. Think about them as keys. If they break or if you
    lose them, you lose your funds forever. That's why I always recommend that you
    buy several copies of the same device, three or more with the same private key
    and seed, so that you can access the same wallet even if one of them breaks.
  prefs: []
  type: TYPE_NORMAL
- en: Using Ledger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Ledger** and the popular Ledger Nano look like a traditional pen drive with
    an OLED screen and two buttons on top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3c55ce0-2375-4677-a121-84df1b7dccf9.png)'
  prefs: []
  type: TYPE_IMG
- en: You use it by connecting it to your computer with a USB cable and opening a
    custom wallet application. You can use MetaMask and MyEtherWallet, among others,
    with this hardware device. It keeps your funds safely by using a 4-digit pin,
    just like a credit card, and a password if you have set up one when you created
    your wallet. You can store thousands of different cryptocurrencies, including
    Ethereum, that will stay in the same device.
  prefs: []
  type: TYPE_NORMAL
- en: Using Trezor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Trezor** is another popular hardware wallet with a distinct flat design,
    also with two buttons, and a high quality black and white display. This device
    comes in a sealed package that must be completely broken to access the wallet
    to ensure that nobody touches your Trezor before you get it in your hands for
    the first time, due to the massive damage that it could cause when used by a hacker.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll also get several small pieces of cardboard to write down your unique
    seed for recovering your account in case you lose access to the wallet. Make sure
    you don''t lose those paper wallets since they will be required whenever Trezor''s
    firmware updates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18bc2be2-00c5-4daa-af5c-55179be2722c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The two buttons are used to confirm transactions after you've checked that they
    correspond to the ones shown on your computer. This is an additional security
    layer to prevent people from sending funds to the wrong addresses. It also supports
    hundreds of cryptocurrencies and has the same security features of the Ledger
    Nano. In the end, it comes down to personal preference, since most of these hardware
    wallets function the same way and are secure enough.
  prefs: []
  type: TYPE_NORMAL
- en: Learning to use multi-signature wallets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Multi-signature wallets are a special type of wallet, in the sense that they
    are actually smart contracts that implement multi-signature functions so that
    a group of members can sign transactions when they all agree on the result. The
    only way to interact with these wallets is by using the smart contract directly
    or through Parity's application, since Parity created the biggest multi-signature
    wallet of all applications.
  prefs: []
  type: TYPE_NORMAL
- en: To interact with this type of wallet, simply open Parity's web interface and
    deploy a new multi-signature wallet from the accounts section with the addresses
    of the members that will participate in it. The way these wallets work is that
    each member can create a proposal to move a specific amount of ether out of the
    wallet to a given address. If they all agree, the funds will be transferred; otherwise,
    the transfer will be cancelled. It's a simple way for crypto startups to keep
    their funds in a group treasury.
  prefs: []
  type: TYPE_NORMAL
- en: You've just obtained a high-level overview of all the Ethereum wallet types
    that are available out there. Now, you can choose which one fits your requirements
    and you can start storing ETH safely for as long as you need. Remember that a
    wallet is as good as long as it gives you access to your funds, so be sure to
    choose a wallet that doesn't restrict your access and one that has proven to be
    secure over the years.
  prefs: []
  type: TYPE_NORMAL
- en: Using Etherscan for transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Etherscan, just like all block explorers, provides vast amounts of valuable
    information during your smart contract development journey whenever you need to
    understand how smart contracts operate on a deeper level. Knowing how to use a
    block explorer such as Etherscan is a precious skill that's required for any kind
    of Ethereum developer to be able to debug and understand real-world events in
    the form of blockchain transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding block explorers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Block explorers are a specific type of application that interacts with the blockchain
    by searching for specific information that may be relevant to the user. They are
    the bots of the blockchain that help you understand what is going on behind the
    code. They were created because people wanted a simpler way to understand transactions
    as they happen, since most of the transactions are messy and it's really hard
    to discover the things that matter when all you get are hexadecimal pieces of
    information.
  prefs: []
  type: TYPE_NORMAL
- en: The most popular ones are Etherscan, Etherchain, and Ethplorer. All of these
    block explorers are web-based, so you can use them from any internet-connected
    device with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Using Etherscan for analyzing transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Etherscan** is by far the biggest block explorer out there, for the simple
    reason that it provides you with a concise and clean interface for interacting
    with your transactions. Etherscan is mainly a place to see what your transactions
    are actually doing after you deploy them. For instance, when you send 10 ETH to
    another address, you can''t really know if it was successful or if there was some
    kind of mistake in the addresses that you used. Etherscan will show you exactly
    what happened and the reason why:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/09265476-9b8e-4163-9692-14f1c0ef9d14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s say that someone stole 1 ETH from you because they got access to your
    Ethereum account. How would you track such information? Well, you can paste your
    Ethereum address in the search box of Etherscan and see where it went:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5de2895f-70f9-4641-bcaa-c9f333319592.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Just click on TxHash to see expanded information about that particular transaction.
    You''ll see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7d82d27-1c40-4ff5-b6cf-4a29da3c9b5d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is telling you the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: The transaction was successful
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was a simple transfer for 1 Ether to the address 0x8c5a579a06fac3b723d97061e295582de2825035
    from your own address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was made on January 30, 2019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With that information, you can begin researching who's behind that address,
    and you may be able to find who stole your funds if that's the case. In the Input
    Data section, you'll see the code that was executed if this were a contract transaction.
    You can also use Etherscan to examine tokens, smart contracts, graphs, and much
    more, since they are dedicated to providing you with the best information possible
    regarding blockchain transactions.
  prefs: []
  type: TYPE_NORMAL
- en: You can also create your own blockchain explorer using web3.js and Truffle contracts!
  prefs: []
  type: TYPE_NORMAL
- en: You now know that block explorers are great tools for an Ethereum developer
    because they provide you with invaluable information in a simple-to-understand
    format, which is essential when dealing with permanent Mainnet transactions where
    hundreds of thousands of dollars may be involved.
  prefs: []
  type: TYPE_NORMAL
- en: Creating accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Accounts are the main components of every Ethereum application. If you want
    to participate in the network, you need an Ethereum account with your private
    key and address. There are many ways in which you can create Ethereum accounts,
    which is why it''s good for you to be familiar with the different tools so that
    you can become proficient in the process of creating accounts: you''ll need accounts
    for all the projects that you''ll build.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating accounts with MetaMask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MetaMask, as you already know, is one of the most popular Ethereum wallets.
    It allows you to create unlimited accounts for different Ethereum chains without
    restrictions, using the same seed word. Here''s how to use it for creating accounts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, download MetaMask for Chrome or Firefox by going to [metamask.io](http://MetaMask.io):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a897dfe8-83cd-4a08-b7b1-eb42bf4cf3d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, you can click on the fox icon that you just installed to start MetaMask,
    which will open this page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d650ad96-7f8a-4cc3-bf6d-e5756759d0db.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on CONTINUE and set up a password for your wallet, and then scroll down
    to accept the terms of use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dab16c8f-b489-4977-9c2e-9a22cb282f98.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, it will show you different windows, warning you about the risks
    of using beta software like this and that you must never give them your recovery
    seeds unless you are completely secure about the process. Then, you''ll have to
    click and store your seed phrase somewhere safe. This is a unique set of words
    that will help you recover your account if you lose it. It is your main private
    key that you can''t lose, or your wallet will be inaccessible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f9add453-d825-4f8c-834c-032c29b7908e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, it will ask you to deposit Ether using Coinbase or ShapeShift, or
    directly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d939781c-b402-4620-8e03-a3a39e131e2e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can simply ignore this and add funds later. That''s about it—you should
    now be able to use MetaMask by clicking the little orange fox on your extensions
    bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/59d66b95-1cb7-48a1-9b77-29bfa754e9ba.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating an account with Coinbase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you saw how to create your own private wallet, let's create a wallet
    hosted in an exchange such as Coinbase where you can buy and sell cryptocurrencies
    directly. Note that these types of wallets are not secure because the exchange
    keeps your private keys and seed phrases to themselves, so you can't have total
    control of your wallet, nor secure it by yourself.
  prefs: []
  type: TYPE_NORMAL
- en: One of the advantages of these type of wallets is that you can exchange your
    cryptocurrency for money almost immediately without having to wait for transfers.
    This is ideal for traders that need quick access to their funds. The major problem
    with this is the lack of control, given that you provide them with your keys and
    you're dependent on the fact that they keep them secure – which is not always
    the case. Always review the history of an exchange to see if they are trustworthy
    or if your money is at risk of possible hacks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Coinbase** is the biggest cryptocurrency exchange and is well-received because
    of the simplicity it provides when it comes to exchanging fiat currencies for
    crypto using your bank or credit card. In the following steps, you''ll learn what
    needs to be done to create an Ethereum account that''s linked to Coinbase:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open their website at [coinbase.com](http://coinbase.com):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aed5d3cc-9ceb-4d8d-9017-8225944a37a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Type your email address into that big input box and click on Get started to
    create a new Coinbase account. Then, it will ask you for more details that are
    required so that you can start:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/097cb0b6-15c1-43c4-a531-213f0f7f8ac7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Following that, it will show you some information about legality issues and
    warnings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0ff4184c-25d2-480b-81e9-8c7dacb47650.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, you''ll have to check your email to confirm your address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0127587d-468e-41f0-903a-332c9a4f56dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After confirming your email address and login, you''ll be asked to add your
    phone number for security measures, since these types of accounts deal with a
    lot of money and they want to have the largest amount of security points in place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/119d076a-7eb2-4c62-a41a-c0a6f1e8a817.png)'
  prefs: []
  type: TYPE_IMG
- en: 'They will send you a message, so be sure to use a valid number. After that,
    you''ll be asked to provide personal information, such as where you live, your
    occupation, and your ID number. Simply fill in all the boxes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/90e9fc39-2112-495d-8678-c7c9648ce770.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s important to provide valid data since they will check everything, and
    they will use that information to help you trade securely. After that, you''ll
    be asked to verify your identity with a photo of your passport or driver''s license;
    you must do so to be able to trade here. It''s annoying, but required by law,
    since they are dealing with banks and they don''t want open ends:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bfd4afca-77ad-424e-ad72-b1de3b33d004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If this doesn''t work, try again later until you have access. Finally, you''ll
    be able to trade and see your accounts in the Accounts tab after completing all
    the documents and logging in again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b28abf1e-dc13-48ac-8c59-52e99db7d9a1.png)'
  prefs: []
  type: TYPE_IMG
- en: After those steps, you should have access to a fully featured web-based wallet
    that's linked to Coinbase, which accepts many different cryptocurrencies and fiat
    currencies. You should be able to purchase crypto once you add your bank account
    details.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create Ethereum accounts for different wallets,
    some of them private, others hosted in exchanges to facilitate the process of
    acquiring new cryptocurrencies. You've learned the differences between them and
    how they can be used. You now know that MetaMask is great for interacting with
    dApps and storing your funds safely, whereas Coinbase is great for trading and
    exchanging crypto immediately using fiat currencies, among many others.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn more about dApps and how to use them at full
    speed with advanced tips that you can implement right away for creating stronger
    applications that will scale in the future.
  prefs: []
  type: TYPE_NORMAL
