- en: Decentralization Versus Distributed Systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the biggest misconceptions in the blockchain space is between distributed
    systems and decentralized systems. In this chapter, we are going to discuss both
    types of systems, why they matter, their similarities, their differences, and
    how blockchain technology can fit into both categories.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you should be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Define a distributed system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define a decentralized system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand the benefits and drawbacks of distributed systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand the benefits and drawbacks of decentralized systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributed systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **distributed system** is one in which the application and its architecture
    is distributed over a large number of machines and preferably physical locations.
    More simply, a distributed system is one where the goal of the system is spread
    out across multiple sub-systems in different locations. This means that multiple
    computers in multiple locations must coordinate to achieve the goals of the overall
    system or application. This is different than monolithic applications, where everything
    is bundled together.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take the example of a simple web application. A basic web application
    would run with processing, storage, and everything else running on a single web
    server. The code tends to run as a monolith—everything bundled together. When
    a user connects to the web application, it accepts the HTTP request, uses code
    to process the request, accesses a database, and then returns a result.
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantage is that this is very easy to define and design. The disadvantage
    is that such a system can only scale so much. To add more users, you have to add
    processing power. As the load increases, the system owner cannot just add additional
    machines because the code is not designed to run on multiple machines at once.
    Instead, the owner must buy more powerful and more expensive computers to keep
    up. If users are coming from around the globe, there is another problem—some users
    who are near the server will get fast responses, whereas users farther away will
    experience some lag. The following diagram illustrates a single, monolithic code
    base building to a single artifact:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c21e16e1-af55-45b3-9cc1-a403fb732eec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What happens if the computer running this application has a fault, a power
    outage, or is hacked? The answer is that the entire system goes down entirely.
    For these reasons, businesses and applications have become more and more distributed. Distributed
    systems typically fall into one of several basic architectures: client–server,
    three-tier, n-tier or peer-to-peer. Blockchain systems are typically peer-to-peer,
    so that is what we will discuss here.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages of a distributed system are many, and they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Resiliency**: If part of the system fails, the entire system does not fail'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Redundancy**: Each part of the system can be built to have backups so that
    if it fails another copy can be used instead, sometimes instantly'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parallelism**: Work can be divided up efficiently so that many inexpensive
    computers can be used instead of a single (very expensive) fast computer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resiliency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Resiliency is the ability of a system to adapt and keep working in response
    to changes and challenges. Resiliency can only be discussed in the context of
    the types of events that a system is resilient towards. A system might be resilient
    to a few computers getting turned off but may not be resilient to nuclear war.
  prefs: []
  type: TYPE_NORMAL
- en: 'Resiliency can be broken down into different sub-categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fault tolerance**: The ability of the system to deal with invalid states,
    bad data, and other problems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Failure isolation**: A problem in one part of the system does not infect
    other parts of the system. Bad data or system failure in one place does not result
    in problems elsewhere'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: A scalable system under heavy use is able to provide additional
    capacity and is thus resilient to load'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Complexity management**: A system that has ways of managing complexity helps
    it be resilient against human errors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will now discuss fault tolerance in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Fault tolerance and failure isolation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A system is said to be fault tolerant when it is capable of operating even
    if some of the pieces fail or malfunction. Typically, fault tolerance is a matter
    of degree: where the level of sub-component failure is either countered by other
    parts of the system or the degradation is gradual rather than an absolute shutdown.
    Faults can occur on many levels: software, hardware, or networking. A fault tolerant
    piece of software needs to continue to function in the face of a partial outage
    along any of these layers.'
  prefs: []
  type: TYPE_NORMAL
- en: In a blockchain, fault tolerance on the individual hardware level is handled
    by the existence of multiple duplicate computers for every function—the miners
    in bitcoin or proof of work systems or the validators in PoS and related systems.
    If a computer has a hardware fault, then either it will not validly sign transactions
    in consensus with the network or it will simply cease to act as a network node—the
    others will take up the slack.
  prefs: []
  type: TYPE_NORMAL
- en: Consensus and coordination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important aspects of blockchain is the concept of consensus.
    We will discuss the different ways blockchains achieve consensus in [Chapter 7](7f407309-5d34-464d-90fb-7d563834b8f8.xhtml),
    *Achieving Consensus*. For now, it is enough to understand that most blockchain
    networks have protocols that allow them to function as long as two thirds to slightly
    over one-half of the computers on the network are functioning properly, though
    each blockchain network has different ways of ensuring this which will be covered
    in future chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In most blockchains, each computer acting as a full participant in the network
    holds a complete copy of all transactions that have ever happened since the launch
    of the network. This means that even under catastrophic duress, as long as a fraction
    of the network computers remains functional, a complete backup will exist.
  prefs: []
  type: TYPE_NORMAL
- en: In PoS chains, there tends to be far fewer full participants so the number of
    backups and distribution is far less. So far, this reduced level of redundancy
    has not been an issue.
  prefs: []
  type: TYPE_NORMAL
- en: Consistency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in prior chapters, hashing and the Merkle root of all transactions
    and behaviors on the blockchain allow for an easy calculation of consistency.
    If consistency is broken on a blockchain, it will be noticed instantly. Blockchains
    are designed to never be inconsistent. However, just because data is consistent
    does not mean it is accurate. These issues will be discussed in [Chapter 21](65a43e7c-9c97-416c-8969-3cffeb93179e.xhtml), *Scalability
    and Other Challenges*.
  prefs: []
  type: TYPE_NORMAL
- en: Peer-to-peer systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most computer systems in use today are client–server. A good example is your
    web browser and typical web applications. You load up Google Chrome or another
    browser, go to a website, and your computer (the client) connects to the server.
    All communication on the system is between you and the server. Any other connections
    (such as chatting with a friend on Facebook) happen with your client connected
    to the server and the server connected to another client with the server acting
    as the go-between.
  prefs: []
  type: TYPE_NORMAL
- en: Peer-to-peer systems are about cutting out the server. In a peer-to-peer system,
    your computer and your friend's computer would connect directly, with no server
    in between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a diagram that illustrates the peer-to-peer architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd3aa559-0ef1-4c5c-82fd-8e804f0907c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Decentralized systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All decentralized systems must be distributed. But distributed systems are not
    necessarily decentralized. This is confusing to many people. If a distributed
    system is one spread across many computers, locations, and so on, how could it
    be centralized?
  prefs: []
  type: TYPE_NORMAL
- en: The difference has to do with location and redundancy versus control. Centralization
    in this context has to do with control. A good example to showcase the difference
    between distributed and decentralized systems is Facebook. Facebook is a highly
    distributed application. It has servers worldwide, running thousands of variations
    on its software for testing. Any of its data centers could experience failure
    and most of the site functionality would continue. Its systems are distributed
    with fault tolerance, extensive coordination, redundancy, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Yet, those services are still centralized because, with no input from other
    stakeholders, Facebook can change the rules. Millions of small businesses use
    and depend on Facebook for advertising. Groups that have migrated to Facebook
    could suddenly find their old messages, work, and ability to connect revoked—with
    no recourse. Facebook has become a platform others depend on but with no reciprocal
    agreement of dependability. This is a terrible situation for all those groups,
    businesses, and organizations that depend on the Facebook platform in part or
    on the whole.
  prefs: []
  type: TYPE_NORMAL
- en: The last decade has brought to the forefront a large number of highly distributed
    yet highly centralized platform companies —Facebook, Alphabet, AirBnB, Uber, and
    others—that provide a marketplace between peers but are also almost completely
    unbeholden to their users. Because of this situation, there is a growing desire
    for decentralized applications and services. In a decentralized system, there
    is no central overwhelming stakeholder with the ability to make and enforce rules
    without the permission of other network users.
  prefs: []
  type: TYPE_NORMAL
- en: Principles of decentralized systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like distributed systems, decentralization is a sliding scale more than an
    absolute state of being. To judge how decentralized a system is, there are a number
    of factors to consider. We''re going to look at factors that have particular relevance
    to blockchain and decentralized applications and organizations. They are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-hierarchy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diversity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transparency of operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By definition, any system that is practically or logically closed will be at
    least somewhat centralized. A system that is closed is automatically centralized
    to the pre-existing actors. As with all other aspects of decentralized systems,
    this is not a binary yes/no but more of a sliding scale of possibility.
  prefs: []
  type: TYPE_NORMAL
- en: The early internet was seen as revolutionary in part because of its open access
    nature and the ability for anyone (with a computer, time, and access) to get online
    and begin trading information. Similarly, blockchain technologies have so far
    been open for innovation and access.
  prefs: []
  type: TYPE_NORMAL
- en: Non-hierarchical
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A hierarchical system is the one commonly found within companies and organizations.
    People at the top of a hierarchy have overwhelming power to direct resources and
    events. A hierarchy comes in different extremes. At one extreme, you could have
    a system wherein a single arbiter holds absolute power. At the other extreme,
    you could have a system where each member of the system holds identical direct
    power and therefore control exists through influence, reputation, or some other
    form of organizational currency.
  prefs: []
  type: TYPE_NORMAL
- en: In blockchain, a few forms of non-hierarchical patterns have emerged. The first
    is in proof-of-work mining systems. All miners are fundamentally equal participants
    in the blockchain, but their influence is proportional to the computing resources
    they make available to the network.
  prefs: []
  type: TYPE_NORMAL
- en: In PoS blockchain systems, the power is distributed based on the level of investment/stake
    in the protocol of a specific. In this case, decentralization is achieved both
    through mass adoption as well as competition with other chains. If one chain becomes
    too centralized, nothing stops users from migrating to a different one.
  prefs: []
  type: TYPE_NORMAL
- en: How decentralized these systems will remain over time is an open question.
  prefs: []
  type: TYPE_NORMAL
- en: Ecosystem diversity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open access naturally leads to another trait of decentralized systems: diversity.
    A diverse system stands in opposition to monoculture. In technology, a monoculture
    is the overwhelming prevalence of a single system, such as the dominance of Windows,
    which persisted for a long time in corporate America.'
  prefs: []
  type: TYPE_NORMAL
- en: Transparency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the ways power can be centralized in a system is through information
    dominance, where one set of actors in a system has access to more or greater information
    than other actors. In most current blockchain technology, each participant on
    the chain gets the same amount of information. There are some exceptions. Hyperledger
    Fabric, for instance, has the capacity to have information hiding from participants.
  prefs: []
  type: TYPE_NORMAL
- en: The ability to have perfectly enforced transparency is one of the drivers of
    interest in blockchain systems. By creating transparent and unforgettable records,
    blockchain has an obvious utility for logistics and legal record keeping. With
    records on a blockchain, it is possible to know for certain that data was not
    altered. A transparent blockchain also ensures a level of fairness—participants
    can all be sure that at a minimum there is a shared level of truth available to
    all which will not change.
  prefs: []
  type: TYPE_NORMAL
- en: Downsides
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Decentralized systems are not without their downsides. Here are a few key issues
    with decentralized systems that have specific relevance to blockchain:'
  prefs: []
  type: TYPE_NORMAL
- en: Speed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Censorship resistance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chaos/non-determinism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Centralized systems and decentralized systems tend to be faster or slower at
    dealing with certain types of events. Blockchains are decentralized systems of
    record keeping. One way to think about a basic blockchain such as bitcoin is that
    it is an append-only database. Bitcoin can handle approximately seven transactions
    a second. By comparison, Visa and MasterCard are distributed (but not decentralized)
    transaction-handling systems that can handle more than 40,000 transactions a second.
    Blockchain systems continue to increase in speed but typically at with the trade-off
    of some amount of centralization or restrictions on access. Some PoS systems such
    as Tendermint or Waves have a theoretical throughput of over 1,000 tx/second but
    are still far from the peak capacity of their traditional counterparts.
  prefs: []
  type: TYPE_NORMAL
- en: Censorship resistance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Decentralized systems tend to be much harder to censor because of a lack of
    a central authority to do the censoring. For free-speech and free-information
    purists, this is not seen as a downside in the slightest. However, some information
    (child pornography, hate speech, bomb-making instructions) is seen as dangerous
    or immoral for public dissemination and therefore should be censored. As a technology,
    anything actually written into the blockchain is immutable once the block holding
    that information is finished. For instance, Steemit is a blockchain-based social
    blogging platform where each post is saved to the chain. Once each block is finalized,
    the data cannot be removed. Clients of the system could choose not to show information,
    but the information would still be there for those who wanted to look.
  prefs: []
  type: TYPE_NORMAL
- en: The desire for censorship extends to self-censorship. Content written to the
    change is immutable—even for its author. For instance, financial transactions
    done via bitcoin can never be hidden from authorities. While bitcoin is anonymous,
    once a person is attached to a bitcoin wallet, it is possible to easily track
    every transaction ever done since the beginning of the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this, a blockchain-based national currency would allow perfect taxation—due
    to perfect financial surveillance of the chain. Censorship resistance is thus
    a double-edged sword.
  prefs: []
  type: TYPE_NORMAL
- en: Chaos and non-determinism
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Decentralized systems tend to be much more chaotic than centralized ones by
    their nature. In a decentralized system, each actor works according to their own
    desires and not the demands of an overarching authority. Because of this, decentralized
    systems are difficult to predict.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have discussed the difference between distributed systems
    and decentralized systems and gone over some of the key features. You should now
    understand how each decentralized system is also a distributed system and some
    of the key aspects of each concept.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start looking at how these things work in practice.
  prefs: []
  type: TYPE_NORMAL
