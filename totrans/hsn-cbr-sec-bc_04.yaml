- en: Hyperledger – Blockchain for Businesses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After understanding the architecture, core components, and the process of blockchain
    technology, it is important to explore the possibilities in regards to fulfilling
    business needs. Blockchain is responsible for running distributed networks without
    third-party regulator. It is now becoming an essential component to consider and
    this will shape the next-generation financial technology and governance model.
    However, blockchains used for cryptocurrency are highly focused on rewards and
    giving incentives to their participants, such as Bitcoin and Ethereum. To overcome
    this challenge, The Linux Foundation and industry leaders have collaborated to
    form a distributed ledger-based project named the Hyperledger project. In this
    chapter, you will learn about how the Hyperledger project is different from existing
    blockchain technologies, its core components, transaction flow, and turning up
    an application with Hyperledger technology.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain as a service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architecture and core components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger Fabric model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin versus Etherum versus Hyperledger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger Fabric capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lab using the Tuna application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter consists of a lab to demonstrate the Hyperledger application to
    solve real-life challenges in supply chain management. It is required that you
    have the source code from the following link at [https://github.com/hyperledger/education.git](https://github.com/hyperledger/education.git).
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hyperledger is an open source initiative focused on covering core industry needs
    with distributed ledger technologies. It's a group program hosted by The Linux
    Foundation in collaboration with several industry giants in information technology,
    banking, logistics, transportation, finance, manufacturing, and IoT.
  prefs: []
  type: TYPE_NORMAL
- en: Although cryptocurrency is still struggling to gain trust with several government
    and corporate bodies, blockchain is being adopted as a key to secure business
    operations and management technology. Because of the rigid and static nature of
    Bitcoin, it can't be used for business application purposes. Although Ethereum
    has the capability of turning up business applications with its smart contracts,
    because of its permissionless use cases, financial institutes and other critical
    business operations have hesitated to try the Ethereum blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger is the only distributed ledger technology framework that was built
    to be granular for businesses that were in need of permissioned blockchains to
    achieve better control over an entire system. Hyperledger does not support  any
    cryptocurrency platform or related system, as it is more about solving critical
    business problems.
  prefs: []
  type: TYPE_NORMAL
- en: Founded in December 2015, Hyperledger has been appreciated and adopted by several
    industry leaders such as Accenture, Airbus, American Express, Cisco, Fujitsu,
    Hitachi, IBM, Intel, SAP, NEC, BBVA, Bitmark, Bosch, CA Technologies, Capgemini,
    EY, Factom, H3C, NSE, Oracle, PwC, Redhat, Samsung, Ripple, Thales, Wipro, the
    Cloud Security Alliance, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: The Hyperledger project is also planned for collaboration between every blockchain
    enthusiast, blockchain communities, corporates, and nonprofit organizations with
    a single and comprehensive standard of building distributed ledger applications.
    In the way that WordPress revolutionized the method and turn-up time for a website,
    Hyperledger is on its way to reducing the cost and overall time in turning up
    a distributed ledger application.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain-as-a-service (BaaS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the birth of cloud computing, one of the hottest terms that has changed
    the way a product or a service can be delivered or deployed is *X (anything) as
    a service,* where *X* is any form of software or application. After the world
    recognized the immersive power of blockchain, industry leaders began to explore
    various possibilities of using blockchain with their existing cloud infrastructure
    models such as supply chain management, identity and access control, database
    management, and many more. Hyperledger resembles to the distributed ledger technology
    however blockchain technology has been taken a special focus in the ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: With the Azure Blockchain service, Microsoft became the first software vendor
    to launch BaaS in 2015\. Microsoft, in close collaboration with ConsenSys, announced
    that it was going to develop an Ethereum BaaS on the Microsoft Azure platform.
    SAP launched its own BaaS platform and named it *Leonardo*, which is a Hyperledger-based
    cloud service.
  prefs: []
  type: TYPE_NORMAL
- en: Deloitte, the largest consulting firm, has come up with a blockchain-based business
    solution and named it Rubix Core. It is an architecture designed for building
    private and customized networks for their clients.
  prefs: []
  type: TYPE_NORMAL
- en: Program goal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Hyperledger project has been widely appreciated for its upfront effort
    to develop cross-industry frameworks for platform collaboration. The financial
    industry has been the most active in collaborating with Hyperledger platforms
    to achieve a seamless move. Let''s understand the goals of the Hyperledger project
    to get the sense of its roadmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Community-driven infrastructure**: As the Hyperledger project is supported
    by several private and government institutions, it presents a highly efficient
    and open community-driven environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enterprise-grade framework**: Unlike the cryptocurrency blockchain, Hyperledger
    was developed to support businesses to perform secure and reliable transactions
    over distributed ledger networks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Building technical communities**: The project is also aimed at building a
    more effective and larger technical community to innovate and develop blockchain
    smart contacts and other related codes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Awareness**: It''s a great way to spread awareness to businesses and other
    institutions about blockchain technology and its business use cases'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architecture and core components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hyperledger is an open source framework that allows businesses to build enterprise-grade
    solutions based on distributed ledger technology. This framework consists of the
    following building blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shared ledger**: It is an append-only ledger, and it stores the blocks in
    chronological order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consensus algorithm**: It''s a method to achieve a common agreement over
    a change in distributed ledger'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Privacy**: The main purpose of building the Hyperledger was to achieve a
    permissioned network for secure and reliable transactions in mission-critical
    business environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Smart contract**: This is a granular method to plan and process the transaction
    requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s understand the Hyperledger architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Consensus layer**: This is majorly responsible for generating an agreement
    on each order and validating transactions based on a predefined set of rules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Smart contract layer**: This takes care of transaction requests and applying
    business logic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Communication layer**: This facilitates a platform that allows nodes to communicate
    over peer-to-peer transport'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data store abstraction**: This allows various data sources to be used by
    other modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Crypto abstraction**: This allows different crypto algorithms to be used
    without impacting other modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identity services**: This enables the deployment of root of trust during
    the blockchain setup with additional authentication and authorization cover'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Policy services**: This is responsible for managing several policies, such
    as the consensus policy, endorsement policy, and the group management policy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**APIs**: This enables clients and applications to talk to blockchain modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interoperation**: This provides interoperability among different blockchain
    instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s understand various Hyperledger frameworks, which are mentioned as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f879b72-5af3-40bf-aa8a-c6b135b33859.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Iroha**: Hyperledger Iroha is a blockchain framework contributed by Soramitsu,
    Hitachi, NTT DATA, and Colu. It is designed to be used by mobile application developers
    under Android and iOS packages. It has a simple design with the C++ programming
    package along with the YAC consensus algorithm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sawtooth**: It is contributed to by Intel and is built to use several consensus
    algorithms based on the size of the network. By default, Hyperledger Sawtooth
    uses **Proof of Elapsed Time** (**PoET**) to achieve consensus among nodes. It
    is designed for versatility to support both permissioned and permissionless implementations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Indy**: Hyperledger Indy is a distributed ledger to achieve business solutions
    for decentralized identities and provides interoperability across several supporting
    **Distributed Ledger Technologies** (**DLT**). It is designed to achieve privacy
    across the nodes and throughout the transactions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Burrow**: Hyperledger Burrow is a permissionable smart contract that provides
    a modular blockchain client with a permissioned smart contract interpreter built
    with **Ethereum Virtual Machine** (**EVM**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger Fabric model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Hyperledger Fabric project is powered by the IBM blockchain platform and
    is hosted with The Linux Foundation, with its key highlight over confidential
    transactions being a permissioned network, programmable business login, and no
    need for cryptocurrency computational methods.
  prefs: []
  type: TYPE_NORMAL
- en: We're seeing great results and actively preparing for the transition to 1.1.0\.
    Our latest offering, the IBM Blockchain Platform Starter Plan, will be among one
    of the first products in the market to deliver on this new release—Jerry Cuomo,
    VP of IBM blockchain technology.
  prefs: []
  type: TYPE_NORMAL
- en: After getting an insight into Hyperledger Fabric and other projects under the
    Hyperledger project umbrella, it's time to understand the technology practically
    and also some of the challenges during its deployment steps.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledeger Fabric core components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After understanding the transaction flow, it is important to get insight into
    how communication is established and maintained among several nodes of the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nodes: **There are the following three roles in the Hyperledger network:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clients**: Clients propose the transaction request on the network. It has
    to be connected to a peer to participate in blockchain. The client has the right
    to connect the desired peer to the network.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Peers**: Peers listen to the ledger update and keep a copy of it. Based on
    their nature, there could be two further types:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Endorsing peers**: Endorsers simulate and endorse transactions'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Committing peers**: Committers validate transactions before committing transactions
    in the network'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ordering service**: The ordering service accepts endorsed transactions, arranges
    and orders them into a block, and finally delivers it to committing peers. The
    ordering service also provides a shared and secure communication channel for clients
    and peers. It acts as a medium for broadcasting transactions and helps us deliver
    this to peers.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ledger**: Just like with Bitcoin and Ethereum, Hyperledger ledger provides
    a verified list of all valid and invalid transactions throughout the system''s
    operation. It is created by an ordering service and is kept with all the peers
    in the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Channel**: The Hyperledger Fabric channel is a restricted communication medium
    for nodes to conduct confidential transactions. A channel is specific for a member,
    a shared ledger, a chaincode application, and the ordering service node. Each
    peer who joins the channel has to get a grant from the **Membership Service Provider**
    (**MSP**), which verifies each peer to its respective channel peers and services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The world state: **This reflects the current state of data about all the
    assets in the network. The data is securely stored in the following format:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LevelDB**: This is the default database for Hyperledger Fabric, and it simply
    stores key/value pairs.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CouchDB**: This is best suited for web and native applications and it speaks
    JSON natively. It supports binary for all data storage needs.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chaincode: **Chaincode manages the business logic agreed and created by members
    in the network. It is a program written in GO—Node.js:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LevelDB**: This is a default programming language that runs over a secured
    Docker container and manages the ledger state.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CouchDB**: This is another database programming language that stores JSON
    objects. It also supports key range, composite, and full data-rich queries.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consensus: **Consensus is the process of achieving an agreement on a set
    of transactions to be added to the ledger. In Hyperledger Fabric, consensus is
    achieved with the following three steps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction endorsement
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ordering
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation and commitment
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's understand these consensus components and how they work with Hyperledger
    and its transaction processing methods.
  prefs: []
  type: TYPE_NORMAL
- en: Working of Hyperledger and transaction processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The working of Hyperledger and transaction processing can be explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Transaction proposal**: In Hyperledger Fabric, the process starts with the
    client application sending transaction proposals:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fed4bbc4-2f6b-48a9-bedf-77b9fb7de204.png)'
  prefs: []
  type: TYPE_IMG
- en: Each client application proposes transactions to endorse peers for the simulation
    and endorsement process.
  prefs: []
  type: TYPE_NORMAL
- en: '**Endorsers send RW sets to the client**: Each endorsing peer simulates the
    proposed transaction and stores the set of read and written data named **RW sets**.
    These sets are signed by endorsing peers and are returned to the client application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/013da4e5-5aee-408e-b563-8685516477fe.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Transaction endorsement**: This is a signed response which results from the
    simulated transaction. There are several ways a transaction endorsement can be
    defined through policy chaincode, which is similar to a smart contract. One transaction
    endorsement policy resembles one defined chaincode.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Client application service**: Once a client application receives the RW set
    and endorsed transactions, it has to submit these to the ordering service. This
    method keeps working, regardless of the transaction endorsement and RW set submitted
    by other client applications:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c8d6a9b-41a4-41c8-8386-965a2f8f4bcd.png)'
  prefs: []
  type: TYPE_IMG
- en: '**An orderer sends transactions in blocks to committing peers**: The ordering
    service accepts both RW sets and endorsed transactions and arranges them into
    blocks and forwards them to committing peers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/73e84167-f6be-43b1-8d7e-88ef7b41fb17.png)'
  prefs: []
  type: TYPE_IMG
- en: The ordering service is responsible for organizing all the transactions and
    then commits them to the ledger. By default, the ordering service for Hyperledger
    Fabric is Kafka, which is an open source, stream-processing platform developed
    by the **Apache Software Foundation** (**ASF**).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s understand the workings of the ordering service in more detail.
    It is important to divide this into core parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 1 of the ordering service**: A block is created once a certain number
    of transactions is ready in a specified time frame and these transactions are
    committed in chronological order. Unlike the Bitcoin blockchain, Hyperledger Fabric
    provides the best-suited ordering mechanism, and this helps organizations to design
    a granular, flexible, and scalable decentralized network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Part 2 of the ordering service**: Hyperledger Fabric supports three ordering
    service mechanisms—SOLO, Kafka, and **Simplified Byzantine Fault Tolerance** (**SBFT**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SOLO**: This is best suited for software developers for research and testing
    purposes, and this has only one ordering node.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kafka**: This is another Hyperledger Fabric ordering mechanism that is production
    ready. It is developed by ASF and provides a unified, highly efficient, and low-latency
    software platform to handle real-time feeds. In Hyperledger Fabric, Kafka handles
    RW sets and endorsed transactions.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SBFT**: This is similar to the PoW consensus mechanism of the Bitcoin blockchain.
    This solution is designed to overcome Byzantine failure, allowing the system to
    work even if there is a malicious node or a group of malicious nodes in the network.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Committing peers validates each transaction in the block**: The committing
    peer validates the transactions to ensure the RW set is matching with the current
    world state. Once the committing peer validates the transaction, the transaction
    is updated to the ledger and the world state is automatically updated with write
    data from the RW set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a2bbd034-ba15-4339-89ff-00fce399722c.png)'
  prefs: []
  type: TYPE_IMG
- en: In the end, the committing peer has to notify the client application on the
    success or failure of the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ident****i****ty verification**: At each step of the transaction flow, from
    endorsement to version check, identity verification remains a continuous process.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bitcoin versus Ethereum versus Hyperledger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Blockchain is the most exciting innovation, and it is still popular in the
    cryptocurrency space. In the past few years, the industry has also recognized
    the impact of blockchain on their business model''s operation and management.
    Although blockchain technology works seamlessly in its native form, most of its
    business needs never fit the one-stop-shop solution. Hence, we have several versions
    of the blockchain network. Let''s first understand the characteristics so that
    we can understand the comparison among some of the popular blockchain models in
    detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Permission restrictions**: This defines the eligibility of transaction processors
    to create or block the existing ledger. In this context, the following two models
    exist:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Permissioned blockchain**: In this model, transactions processing can only
    be performed by preselected users. Hyperledger Fabric is an example of this.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Permissionless blockchain**: This model doesn''t restrict the transaction
    processor from creating or adding a new block. Ethereum and Bitcoin are some of
    the most popular examples of the same.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Restricted access to data**: This specifies about the read rights across
    the blockchain network. There are the two following models:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Public blockchain**: There is no restriction while reading the ongoing transactions.
    Anyone can download the updated blockchain ledger with the blockchain node client.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private blockchain**: In this model, access to the blockchain ledger is restricted
    to only preselected users.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The consensus mechanism**: In the distributed network, it is critical to
    achieve trustless networks and determine consensus for all the transactions. This
    ensures that only valid and legitimate transactions are added to the blockchain.
    PoW, PoS, and PBFT are some examples of the consensus algorithm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: Scalability depends on two factors—**nodes** and **performance**.
    Node scalability is the extent that nodes that can be added in the network without
    impacting the overall performance, and scalability depends on the number of transactions
    per seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Anonymity**: This refers to the identity of users in the blockchain that
    are made open or hidden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Governance**: This is the level of decision-making power distributed in the
    blockchain community. The blockchain platform has to be maintained by either the
    core developer team or other stakeholders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Native currency**: This refers to the currency valid within the blockchain
    such as Bitcoin with the Bitcoin blockchain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scripting**: This refers to the level of programming supported by the **decentralized
    application** (**dApp**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Characteristics** | **Bitcoin** | **Ethereum** | **Hyperledger** |'
  prefs: []
  type: TYPE_TB
- en: '| Permission restrictions | Permissionless | Permissionless | Permissioned
    |'
  prefs: []
  type: TYPE_TB
- en: '| Restricted public access to data | Public | Public or private | Private |'
  prefs: []
  type: TYPE_TB
- en: '| Consensus | PoW | PoW | PBFT |'
  prefs: []
  type: TYPE_TB
- en: '| Scalability | High node scalability, low performance scalability | High node
    scalability, low performance scalability | Low node scalability, high performance
    scalability |'
  prefs: []
  type: TYPE_TB
- en: '| Centralized regulation (governance) | Low, decentralized decision making
    by community/miners | Medium, core developer group, but EIP process | Low, open
    governance model based on the Linux model |'
  prefs: []
  type: TYPE_TB
- en: '| Anonymity | Pseudonymity, no encryption of transaction data | Pseudonymity,
    no encryption of transaction of data | Pseudonymity, encryption of transaction
    data |'
  prefs: []
  type: TYPE_TB
- en: '| Native currency | Yes, Bitcoin | Yes, ether | No |'
  prefs: []
  type: TYPE_TB
- en: '| Scripting | Limited possibility stack-based scripting | High possibility,
    tuning complete virtual machine, high-level language support—Solidarity | High
    possibility, tuning complete scripting of chaincode, high-level Go language |'
  prefs: []
  type: TYPE_TB
- en: Hyperledger Fabric capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hyperledger has come with a full-stack, enterprise-grade business solution
    to deliver secure and scalable value with added security, confidentiality, and
    performance. Hyperledger Fabric delivers the following functionalities and core
    capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Identity management**: To turn a permissioned network, Hyperledger Fabric
    provides a membership identity service that maintains user IDs and then authenticates
    each of one of them in the network. One user ID can be allowed to invoke a chaincode
    application, but can be blocked to turn up a new chaincode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Efficient processing**: Hyperledger assigns a role for each node based on
    transaction ordering and commitment. The overall performance improves as the concurrent
    execution increases and improves the time to deliver each order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Privacy and confidentiality**: Private channels restrict the messaging paths
    to provide transaction privacy and confidentiality for specific network members.
    The entire data, including member information, transactions, and channel details,
    remains invisible and inaccessible to other network members.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chaincode functionality:** This regards chaincode applications and is the
    business logic of the Hyperledger Fabric. Chaincode ensures that all transactions
    that transfer ownership are subject to its rules and requirements. The operating
    parameters of the channel are usually defined by the system chaincode, whereas
    validation system chaincode defines the requirements for endorsing and validating
    transactions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After understanding the insights of Hyperledger Fabric with its architecture,
    components, transaction flow, and chaincode, it is now time to arrange each of
    these pieces to perform a lab. In order to keep the lab accessible, we are going
    to run a lab environment from GitHub hosted under: [https://fabric-sdk-node.github.io/](https://fabric-sdk-node.github.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Tuna application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The tuna application is about the transfer of tuna fish shipments between different
    parties in the supply chain. This entire application is written in Node.js, and
    gRPC is used to interact with the chaincode:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Aim**: Using Fabric Node SDK, establish a connection with the Hyperledger
    blockchain. The peer will be configured to communicate to its application-specific
    chaincode container. By the end of this exercise, we will get familiar with how
    to use the Node.js SDK to communicate with the network. We will also gather an
    understanding of how an application chaincode network and ledger all interact
    with one another.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Basic installation**: In case you haven''t downloaded the `education` repository
    for this course, follow these directions in your Terminal window:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that you have Docker running on your machine before you run the next
    command. We need to make sure that we have completed the installation of the Hyperledger
    Fabric section in this chapter before moving on to this application section, as
    we will likely experience errors. First, remove any pre-existing containers, as
    they may conflict with commands in this tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s start the Hyperledger Fabric network with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Troubleshooting**: If after running the previous command you are getting
    an error similar to the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then try running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the required libraries from the `package.json` file, register the admin
    and user components of our network, and start the client application with the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the client by simply opening `localhost:8000` in any browser window of
    your choice, and you should see the user interface for our simple application
    at this URL, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0bbd400-95c5-4e18-a2b1-5ba97230b948.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Troubleshooting**: If the client fails to connect the Tuna server, we need
    to execute following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Try running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the previous commands starting with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the chaincode file that contains all our business logic for the sample
    tuna app:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tuna-app/app.js`: This is a JavaScript client code in `app.js` that manipulates
    HTML elements for the user interface'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tuna-app/index.html`: This is an HTML file containing the UI for the client
    application'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src`: This is a folder containing code that uses **Software Development Kit**
    (**SDK**) to connect a client request to network and chaincode functions'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tuna-app/src/controller.js`: This contains functions that perform operations
    and interrogates data'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tuna-app/src/server.js`: `server.js` is used to view the UI at `localhost:8000`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Verification**: Now, let’s query our database, where there should be some
    sample entries, since our chaincode smart contract initiated the ledger with 10
    previous catches this function takes no arguments. As we can see on line 6, it
    takes an empty array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The code comes from `..src/queryAllTuna.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s query our database, where there should be some sample entries already,
    since our chaincode smart contract initiated the ledger with the ten previous
    catches. This function takes no arguments, as we can see on Line 6 in the preceding
    code. Instead, it takes an empty array. The query response that can be seen in
    the user interface is ten prepopulated entries with the attributes for each catch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef1bd04e-218d-4388-9e2b-67e923c0bd81.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following code is to query a specific tuna that''s been recorded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The code comes from `..src/queryTuna.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s query for a specific tuna catch. This function takes one argument,
    as you can see in Line 6 of the code. An example would be `[''1'']`. In this example,
    we are using the key to query for catches. You should see the following query
    response, detailing the attributes recorded for one particular catch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36b1fde4-563f-40cd-a943-a9a6ff63cbba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following code is to change the tuna holder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The code comes from `..src/changeHolder.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s change the name of the person in possession of a given tuna. This
    function takes two arguments—the key for the particular catch and the new holder
    as we can see on Line 5 in the preceding code. For example, `args: [''1'', ''Alex'']`.
    You may be able to see a similar success response in your Terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This indicates that we have sent a proposal from our application through the
    SDK, and that the peer has been endorsed and committed and the ledger has been
    updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/70fb0c60-f82b-416c-bcbe-3a2049bd3039.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should see that the holder has indeed been changed by querying for key
    `1` again. Now, the holder attribute has been changed from `Miriam` to `Alex`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c636d74d-221b-4140-a197-49874899a7c2.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Finishing up**: Remove all the Docker containers and images that we created
    in this tutorial with the following commands in the `tuna-app` folder:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We explored a new breed of blockchain Hyperledger project, built to focus on
    business challenges and overcoming the distributed ledger technology. Hyperledger
    is the only group project led and hosted by The Linux Foundation that is on a
    continuous roadmap to revolutionize the business with the distributed ledger-as-a-service
    model. This project helps the industry to avoid difficulties in deploying blockchains,
    just like WordPress solved the difficulty of turning up a website and Apache solved
    the problem of turning up a database.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will understand how blockchain technology can impact
    on the existing and traditional security models named **Confidentiality, Integrity,
    and Availability** (**CIA**) triad models.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the tuna application, we have been successful enough to understand the
    working and testing of Hyperledger Fabric. However, to solve the cyber security
    challenges, it is important that we explore the existing solutions and how they
    can be made much better with distributed ledger technology or generic blockchains,
    or maybe even with Hyperledger projects. Therefore, it is important to cover the
    following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Can Hyperledger Fabric be considered for public blockchain ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can Hyperledger be connected with traditional database?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
