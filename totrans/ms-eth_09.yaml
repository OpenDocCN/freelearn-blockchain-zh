- en: Deployment on Testnet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing smart contracts is a complex task in which you have to move between
    different environments to efficiently test the quality of your applications. That's
    why there are many different testnets in which you can deploy your code, to experiment
    with how your contracts behave with different rules and mining algorithms for
    improving their quality. In this chapter, you'll discover the differences between
    the main Ethereum networks by understanding where Ropsten, Rinkeby, Kovan, and
    the Mainnet fit into the world of securing smart contracts.
  prefs: []
  type: TYPE_NORMAL
- en: You'll learn about the core mining algorithm changes that each network provides
    so that you can become aware of how your application behaves in different environments.
    You'll also see how to get Ether for each of those networks so that you can start
    developing right away with a free testnet.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Ropsten for smart contract development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Rinkeby with PoA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Kovan for smart contract development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the Mainnet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Ropsten for smart contract development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each Ethereum network has a unique identifier that numerically represents the
    network chosen so that Ethereum clients and frameworks such as Truffle can quickly
    select a new testnet network. Ropsten, identified by the ID 3, is the name of
    the most used test network in Ethereum, because it provides the most similar technology
    stack to the real Mainnet, which is used by real-world dApps.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that each testnet is a separate blockchain with its own set of rules
    and limitations to help people decide on the place to test their dApps, simulating
    real-world situations.
  prefs: []
  type: TYPE_NORMAL
- en: Initially, the Ropsten blockchain was named **Morden** and it was deployed right
    when Ethereum launched in 2015\. After a year, the core Ethereum team decided
    to rename Morden to **Ropsten** to indicate that it was an upgraded version with
    better security features and faster performing transactions.
  prefs: []
  type: TYPE_NORMAL
- en: It has been continuously improved with hard forks in order to include the latest
    Ethereum releases so that this blockchain is up to date with the latest innovations.
    What's interesting is that one of the largest Ethereum upgrades, known as **Constantinople**,
    was released first on this testnet to verify how it would work before risking
    such changes on the Mainnet. It's common practice to publish breaking Ethereum
    changes on testnets via hard forks before upgrading the main network to guarantee
    the security of the upgrades.
  prefs: []
  type: TYPE_NORMAL
- en: Because this network is based on **p****roof-of-work** (**PoW**), it is susceptible
    to spam attacks, where a few powerful computers can rewrite the block history
    with their own transactions via a 51% attack. That's why this is one of the most
    unstable networks for testing, although it's been improving consistently. In fact,
    it was attacked in 2017 with a spam attack where unknown users generated massive
    quantities of slow blocks that caused the entire blockchain to collapse, blocking
    new transactions from ever reaching the miners, effectively destroying the network.
  prefs: []
  type: TYPE_NORMAL
- en: After such an event, the Ethereum foundation received a donation of GPUs from
    external groups that wanted to support their efforts. With this improved hashrate,
    Ropsten revived and is stronger than before, and is still running without a problem.
  prefs: []
  type: TYPE_NORMAL
- en: Features of Ropsten
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ropsten is the blockchain that is most similar to the Mainnet because it implements
    the same PoW mining algorithm where everybody is free to generate new blocks in
    exchange for Ropsten Ether, which holds no real-world value. Its block rate is
    about 30 seconds per block, and it's accepted by all the major Ethereum clients,
    including Geth and Parity.
  prefs: []
  type: TYPE_NORMAL
- en: The Ether in this network can be mined freely, just like in the Mainnet, and
    it has several open faucets to get free Ether from. This network is best used
    in those situations where you want to simulate an environment as close as possible
    to the Mainnet, where Ether holds real value, so that your contracts behave with
    a very similar block rate and mining performance. In fact, the gas limit is usually
    the same on this blockchain and the Mainnet.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ropsten Ether
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process of getting Ether for this network is pretty straightforward if
    you''re a current user of Ethereum. Here are the steps that you must follow:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download MetaMask if you haven''t done so already and change your network to
    Ropsten by clicking on the button at the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8d1d96ff-209c-45b7-a7b6-37a725f80d52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, click on the Deposit button, scroll down, and click on GET ETHER to open
    up the faucet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f5e9726-9e72-450d-aaf5-d571e51863a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s how the MetaMask faucet looks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4254eb49-f26b-409f-97c9-9a902d09b068.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By clicking on request 1 ether from faucet, you''ll receive a MetaMask notification
    to approve the use of your account on their website so that they can send you
    one Ether per click and up to about five Ropsten Ether. You can analyze your Ropsten
    transactions with Etherscan in the dedicated subdomain: [https://ropsten.etherscan.io](https://ropsten.etherscan.io).'
  prefs: []
  type: TYPE_NORMAL
- en: 'After getting Ropsten Ether, you should be able to connect to that particular
    network with your framework or IDE. Here are the steps to deploy a contract to
    this testnet, along with a few modifications to your Truffle configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To deploy smart contracts to this testnet, you can modify your `truffle-config.js`
    file with a configuration like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can deploy your contracts with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Remember to get a valid INFURA key for Ropsten by creating a new project without
    restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can deploy to Ropsten with the Remix IDE by changing your
    MetaMask network to Ropsten, that is, as long as you have Ether in it. Remix will
    reload automatically with the new testnet selected.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Rinkeby with proof-of-authority
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rinkeby is one of the most secure networks for testing your applications because
    it uses **proof-of-authority** (**PoA**) to securely generate blocks. In fact,
    it is so secure and stable that many use this network for prototypes, MVPs, and
    demos because developers know that their dApps will continue running without a
    problem on this chain.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is identified by the ID 4 and it was created in 2017 by the Ethereum team
    to provide an alternative solution to developers that want to experiment with
    a different mining algorithm. This testnet is lightning fast: it generates blocks
    every 15 seconds consistently. The supply of Ether is controlled by `puppeth`
    so that people don''t generate Ether with abusive mining practices.'
  prefs: []
  type: TYPE_NORMAL
- en: The only supported client is Geth, although you can use it for most applications
    with MetaMask and Truffle.
  prefs: []
  type: TYPE_NORMAL
- en: Describing proof-of-authority
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are already familiar with PoA from [Chapter 3](8f93512c-8a39-4030-aa79-7e5ca832412b.xhtml),
    *Ethereum Assets*, where you went through a basic introduction of how to use Puppeth
    to generate a Clique network. **Clique** is the name of the PoA algorithm used
    by Rinkeby. It is very similar to PoS and consists of selecting a small portion
    of miners, around 25, which act as validators for creating new blocks that will
    be proposed to the chain.
  prefs: []
  type: TYPE_NORMAL
- en: Each validator places a stake to the block they want to be accepted as the next
    one and, after a period of a few seconds, the block with the largest amount of
    staked ETH is chosen. Validators don't lose their staked ETH if they behave within
    the rules, but if they become **Byzantine**, they risk losing their stake as a
    punishment.
  prefs: []
  type: TYPE_NORMAL
- en: This consensus algorithm works because the identities of the validators are
    public so that others know when a miner is acting maliciously. To become a validator,
    each user has to make some sensitive data public to protect the network.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Rinkeby Ether
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get Ether in this network, you must go to [https://faucet.rinkeby.io](https://faucet.rinkeby.io)
    or [https://www.rinkeby.io/#faucet](https://www.rinkeby.io/#faucet), where you'll
    be able to provide a social media link with your address.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process is a bit confusing, so here''s the breakdown in steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy your Rinkeby Ethereum address by opening MetaMask and clicking on your
    address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ba74239f-b9b6-44fe-8a65-3b70638d64bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to your Twitter or Facebook and create a new tweet or post with your address
    and nothing more; although you can add text, it''s just better to leave only your
    address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/143290a7-81c3-45fc-b917-9dc564bcf3dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Publish the tweet, click on it, and copy the URL of that location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b45b502c-2a04-4661-ae44-00132689bbb5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Paste that URL into the input box of Rinkeby''s faucet page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5c817570-b0e7-4879-bc62-a897448fe9b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Give me Ether to select how much Ether you wish to receive. The quantities
    are limited to up to 18.75 Ether every three days. You''ll receive the Ether instantly,
    but you''ll have to wait until that time is reached to get more Ether in the future.
    If everything went correctly, you''ll see a green confirmation message. If not,
    it''s probably because the URL that you provided is not valid. Be sure to copy
    the URL of the tweet itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ee04796-bee9-4da7-b7e5-7bb0f9f7094c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Confirm that you''ve received your Ether in MetaMask:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3e338272-ef4b-4453-90ec-c2f8d7789aac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you should be able to play around with Rinkeby and deploy your contracts
    whenever you have to. Remember that there''s a version of Etherscan dedicated
    to exploring Rinkeby transactions here: [https://rinkeby.etherscan.io](https://rinkeby.etherscan.io).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to use this testnet for your Truffle project, you''ll need to make
    the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To deploy smart contracts to this testnet, you can modify your `truffle-config.js`
    file with a configuration such as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving the configuration file, deploy your contracts with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Remember to get a valid INFURA key for Rinkeby by creating a new project.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can deploy to Rinkeby with the Remix IDE by changing your
    MetaMask network to Rinkeby as long as you have Ether in it. The Remix IDE will
    reload automatically with the new testnet that's been selected.
  prefs: []
  type: TYPE_NORMAL
- en: Using Kovan for smart contract development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kovan is a testnet that was created by the guys at Parity, who wanted a new
    type of PoA network where developers could deploy their smart contracts, knowing
    that they will stay running endlessly given that this network is highly secure.
    This network is the fastest of them all because it has a 4-second block time,
    which makes testing a breeze, since you don't have to wait for long confirmation
    times.
  prefs: []
  type: TYPE_NORMAL
- en: It was born because of the attack conducted on Ropsten in 2017 when Parity realized
    that developers were losing an important tool in their arsenal, given that they
    need to test their smart contracts on the most realistic scenarios possible to
    emulate blockchain limitations.
  prefs: []
  type: TYPE_NORMAL
- en: Kovan is one of the most active networks, since they provide **Kovan Improvement
    Proposals**, known as **KIPs**, where users can submit GitHub issues on the repository
    ([https://github.com/kovan-testnet/kips](https://github.com/kovan-testnet/kips))
    with changes they wish to introduce to this network.
  prefs: []
  type: TYPE_NORMAL
- en: 'This blockchain can''t be mined because it relies on a group of trusted verifiers
    that consistently generate blocks at optimal speeds instead of relying on public
    algorithms with higher variability of nodes. You can learn more about the validators
    that were approved to generate blocks for this testnet in the official Kovan whitepaper
    here: [https://github.com/kovan-testnet/proposal](https://github.com/kovan-testnet/proposal).'
  prefs: []
  type: TYPE_NORMAL
- en: The identifier of this network is the ID 42 because they decided to leave plenty
    of identifiers available for new testnets that people may want to create. This
    network is also immune to attacks like DDoSing, with an overflow of slow blocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to connect to this network, you can use INFURA or the following
    `parity` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To deploy smart contracts to this testnet, you can modify your `truffle-config.js`
    file with a configuration such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploy your contracts to `kovan` with this simple command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Do the same thing with Remix: change the MetaMask network to Kovan and the
    IDE will refresh itself.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting Kovan Ether
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two main ways to get Ether for the Kovan network: by requesting it
    in the public chat of the project or by using an automated tool that connects
    to your GitHub accounts and gives you one Ether every 24 hours.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To request Ether via the public chat hosted in Gitter, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by going to the public Gitter chat website of Kovan, available at [https://gitter.im/kovan-testnet/faucet](https://gitter.im/kovan-testnet/faucet),
    which looks similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2abc61ff-1863-4e75-b778-3f5fab0f6bda.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Join that Gitter chat with your account and paste your Ethereum address by
    copying it from MetaMask, just as we did for Rinkeby, at the bottom of the website,
    in the chat box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7a5980ca-6e7e-4cad-86e7-f7e655ca2771.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Press *Ente**r* to send your address, and you''ll receive 1 Kovan Ether after
    a few minutes. If you don''t want to wait, you can get Ether with a tool called
    **Icarus** (available here: [https://faucet.kovan.network/](https://faucet.kovan.network/)),
    which provides you with Ether automatically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a9cafad6-2839-4bab-a4c2-b4a2ec4feed4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Login with GitHub to log in so that they know who''s requesting Ether.
    Then, you''ll be greeted with a simple input to request one Ether every 24 hours:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2ccc3a55-145e-4c7f-9982-6bebeb880fd3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If everything went successfully, you''ll see a green message with your transaction
    on Etherscan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/476a18c4-1c41-4780-b44e-71ef560edf9a.png)'
  prefs: []
  type: TYPE_IMG
- en: In general, you should use this network if you want extremely fast block times
    and you are concerned about security. The main issue is that you can't get Ether
    as easily as with Rinkeby or Ropsten since the user must have a GitHub profile
    or have access to the Gitter chat and even then, the faucet is limited to one
    Ether every 24 hours.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Mainnet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ethereum Main Network is the key component in which all the technologies
    meet for creating a platform in which you can deploy smart contracts and run decentralized
    applications. Although it's the main network, some developers prefer to leave
    their dApps running on testnets to avoid expensive costs. In any case, it's better
    to deploy your final application in the Mainnet, where more users will be able
    to use your decentralized applications with real Ether and the latest updates.
  prefs: []
  type: TYPE_NORMAL
- en: Mainnet is also known as **Homestead**, and it was released in 2015 with the
    creation of Ethereum as the production release where all the real-world use cases
    are deployed. It features a 15-second block generation that varies depending on
    miners, and it runs PoW, which depends on having a strong network of nodes sustaining
    the network with their mining efforts, otherwise it risks becoming vulnerable
    by allowing 51% attacks.
  prefs: []
  type: TYPE_NORMAL
- en: To get Ether for Homestead, you'll have to buy it from an exchange such as Coinbase,
    Kraken, Bittrex, or an equivalent that accepts fiat money. Then, you'll have to
    store your Ether in a wallet, which can either be a hardware wallet such as Trezor
    or a software wallet such as the one provided by [btc.com](https://btc.com), MetaMask,
    Mist, or [myetherwallet.com](https://myetherwallet.com).
  prefs: []
  type: TYPE_NORMAL
- en: If you're paranoid about security, you can go as far as creating a paper wallet
    that you'll have to maintain to keep it secure. In general, you want to be careful
    when dealing with real Ether, since it contains valuable money that can be exchanged
    for fiat and real-world resources, so security is a must.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned to understand testnets. First, you went through
    the history of Ropsten, how it started, and the unique characteristics that make
    it the most used testnet for Ethereum developers. Then, you discovered how strong
    and secure the Rinkeby testnet is for projects that want to depend on a testnet
    for the long term. You saw how to deploy your contracts by making simply modifications
    to the Truffle configuration file for every testnet. After that, you learned how
    fast the Kovan network is for those developers that need quick confirmations for
    user-intensive application, and it's actually one of the best solutions for fast
    development, although you already know that getting Ether for Kovan is a bit more
    complicated than in other networks. Finally, you explored how the Homestead network
    works with valuable Ether that can only be received after purchase in exchanges.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn more about some of the most elaborate and
    valuable development tricks that you can employ right now to create better, faster,
    and more efficient dApps for higher quality projects—exclusive information that
    you won't find anywhere else!
  prefs: []
  type: TYPE_NORMAL
