["```\nfrom Crypto.Cipher import AES \nfrom Crypto.Random import get_random_bytes \n```", "```\nwith open(\"aes.key\", \"wb\") as file_out: \n    key = get_random_bytes(16) \n    file_out.write(key) \n```", "```\ndata = \"plaintext for AES\" \ncipher = AES.new(key, AES.MODE_EAX) \ncipher_text, tag = cipher.encrypt_and_digest(data.encode()) \nwith open(\"encrypted.bin\", \"wb\") as file_out: \n    [file_out.write(x) for x in (cipher.nonce, tag, cipher_text)] \nprint(\"Data is encrypted and stored in a file\") \n```", "```\nwith open(\"aes.key\", \"rb\") as file_in: \n    key = file_in.read(16) \nwith open(\"encrypted.bin\", \"rb\") as file_in: \n    nonce, tag, cipher_text = [file_in.read(x) for x in (16, 16, -1)] \n\ncipher = AES.new(key, AES.MODE_EAX, nonce) \ndata = cipher.decrypt_and_verify(cipher_text, tag) \nprint(\"Decrypted data is : \\\"{}\\\"\".format(data.decode())) \n```", "```\nData is encrypted and stored in a file\nDecrypted data is : \"plaintext for AES\"  \n```", "```\n33 mod 5 = 2\n```", "```\nfrom Crypto.PublicKey import RSA \nfrom Crypto.Cipher import PKCS1_OAEP \n```", "```\nmessage = \"plaintext for RSA\" \nkey = RSA.generate(2048) \npublic = key.publickey() \n\ncipher = PKCS1_OAEP.new(public) \ncipher_text = cipher.encrypt(message.encode()) \nprint(\"Data is encrypted\")\n```", "```\ncipher = PKCS1_OAEP.new(key) \nmessage = cipher.decrypt(cipher_text) \nprint(\"Decrypted data is : \\\"{}\\\"\".format(message.decode())) \n```", "```\nData is encrypted\nDecrypted data is : \"plaintext for RSA\"\n```", "```\nfrom Crypto.Hash import SHA256 \nfrom Crypto.PublicKey import ECC \nfrom Crypto.Signature import DSS \n```", "```\nkey = ECC.generate(curve='P-256') \nwith open('ecc.pub', 'wt') as f: \n    f.write(key.public_key().export_key(format='PEM')) \nwith open('ecc.pem', 'wt') as f: \n    f.write(key.export_key(format='PEM')) \n```", "```\nmessage = b'ECDSA message for signature' \nkey = ECC.import_key(open('ecc.pem').read()) \nh = SHA256.new(message) \nsigner = DSS.new(key, 'fips-186-3') \nsignature = signer.sign(h) \n```", "```\nh = SHA256.new(message) \nkey = ECC.import_key(open('ecc.pub').read()) \nverifier = DSS.new(key, 'fips-186-3') \ntry: \n    verifier.verify(h, signature) \n    print(\"The message is authentic.\") \nexcept ValueError: \n    print(\"The message is not authentic.\") \n```", "```\nfrom Crypto.Hash import SHA256 \n\nhash_object = SHA256.new(data=b'First') \nprint(hash_object.hexdigest()) \n\nhash_object.update(b'd') \nprint(hash_object.hexdigest()) \n```", "```\na151ceb1711aad529a7704248f03333990022ebbfa07a7f04c004d70c167919f\n18902d9ed3b47effdb6faf90ea69b2ef08ef3d25c60a13454ccaef7e60d1cfe1  \n```"]