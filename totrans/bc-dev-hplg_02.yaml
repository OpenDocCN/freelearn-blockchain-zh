- en: Exploring Hyperledger Fabric
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The focus of this chapter is the Hyperledger Fabric project—its components,
    design, reference architecture, and overall enterprise readiness. We will also
    discuss the broader aim of **Linux Foundation** (**LF**) hosted Hyperledger projects
    and the importance of open source and open standards. The goal is to build an
    understanding of the diversity of various Hyperledger projects, and what frameworks
    and tools may be suitable for particular enterprise use cases and software consumption
    models. While the blockchain technology landscape is constantly in flux, Hyperledger
    projects represent a structure that supports a mature and peer-reviewed technology
    geared toward enterprise consumption and fueled by a diverse set of talent and
    community interests.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger frameworks, tools, and building blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger Fabric component design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger Fabric – the journey of a sample transaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Hyperledger Fabric
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding governance in business networks powered by blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger frameworks, tools, and building blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've looked at Hyperledger's foundations in the open computing movement,
    as well as its benefits for industry, let's talk about the frameworks, tools,
    and building blocks of Hyperledger.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are five blockchain frameworks, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hyperledger Iroha**: Iroha, designed for mobile development projects, is
    based on Hyperledger Fabric and was contributed by Soramitsu, Hitachi, NTT Data,
    and Colu. It features modern, domain-driven C++ design as well as a new chain-based
    Byzantine fault tolerant consensus algorithm called **Sumeragi**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hyperledger Sawtooth**: Sawtooth was contributed by Intel and includes a
    novel consensus algorithm that Intel came up with that''s called **Proof of Elapsed
    Time** (**PoET**). PoET aims to achieve distributed consensus as efficiently as
    possible. Hyperledger Sawtooth has potential in many areas, with support for both
    permissioned and permissionless deployments and recognition of diverse requirements.
    Sawtooth is designed for versatility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hyperledger Burrow**: Hyperledger Burrow, which was contributed by Monax
    and Intel initially, is a modular blockchain that was client-built to the specification
    of the **Ethereum Virtual Machine** (**EVM**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hyperledger Fabric** (**HLF**): Hyperledger Fabric, contributed by IBM, is
    designed to be a foundation for developing applications or solutions with a modular
    architecture. It allows for plug-and-play components, such as consensus and membership
    services, and leverages containers to host smart contracts called **chaincode**
    that comprise the application logic of the system. The remainder of this chapter
    will focus on Hyperledger Fabric and its design, components, architecture, and
    overall enterprise design.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hyperledger Indy**: Contributed initially by the Sovrin Foundation, Indy
    is a Hyperledger project made to support independent identity on distributed ledgers.
    Hyperledger Indy provides tools, libraries, and reusable components for providing
    digital identities rooted on blockchains or other distributed ledgers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1a1c2579-96b3-40b4-85f4-1f96732284df.png)'
  prefs: []
  type: TYPE_IMG
- en: Hyperledger tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are also five tools currently in the Hyperledger project—all of which
    are hosted by the LF. These tools are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hyperledger explorer**: Hyperledger explorer, which was originally contributed
    by IBM, Intel, and DTCC, can view, invoke, deploy or query blocks, transactions
    and associated data, network information (name, status, list of nodes), chain
    codes and transaction families, as well as other relevant information stored in
    the ledger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hyperledger cello**: Cello was also contributed by IBM. It seeks to bring
    the on demand as-a-service deployment model into the blockchain ecosystem in order
    to reduce the effort required to create, manage, and terminate blockchains. Cello
    efficiently and automatically provides a multi-tenant chain service on top of
    various infrastructures, such as bare metal, virtual machine, and other container
    platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hyperledger composer**: Hyperledger composer (contributed by IBM and Oxchains)
    is a set of collaboration tools for building blockchain business networks that
    accelerate the development of smart contracts and blockchain applications, as
    well as their deployment across a distributed ledger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hyperledger quilt**: Hyperledger quilt, from NTT data and Ripple, is a Java
    implementation of the interledger protocol by ripple, which is designed to transfer
    values across distributed and non-distributed ledgers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hyperledger caliper**: Caliper, a blockchain benchmark tool that allows users
    to measure performance of a specific implementation with predefined use cases,
    is in incubation status and was contributed by developers from numerous organizations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The building blocks of blockchain solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As noted in [Chapter 1](ccf97c50-561e-41ae-99fa-784b3217619d.xhtml), *Blockchain
    – Enterprise and Industry Perspective*, blockchain promises to fundamentally solve
    the issues of *time *and *trust *in industries such as financial services, supply
    chain, logistics, and healthcare. It seeks to streamline business processes and
    thereby address inefficiencies. It''s a technology for a new generation of transactional
    applications built on trust, accountability, and transparency. There are several
    characteristics shared by every industrial blockchains, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A shared single source of truth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure and tamper-proof
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private unlinkable identity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalable architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confidential
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auditable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The diagram that follows summarizes these characteristics into four tenets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94d10bb4-0a2a-4572-a7a4-9d0c26b9819e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Blockchain solutions are comprised of four building blocks—a shared ledger,
    privacy, trust, and smart contracts. Allow me to elaborate a bit on each of these
    building blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shared ledger**: With bitcoin blockchain, the intent was to democratize visibility;
    however, enterprise blockchain requires a different approach due to the regulation
    of consumer data. Append-only distributed transaction records can be achieved
    by SQL or no-SQL distributed databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Privacy through cryptography**: Privacy through cryptography is essential
    for ensuring that transactions are authenticated and verified. It is imperative
    to include cryptography in blockchain design for the sake of hardening security
    and making it more difficult to breach the distributed system. Considerations
    about cryptography change when you''re working with a less democratic or permissioned
    ledger network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trust systems or consensus**: Trust means using the power of the network
    to verify a transaction. Trust is essential in any blockchain system or application,
    and I prefer the term *trust* system over *consensus* system since trust is the
    foundational element that dictates a stakeholder''s investment in any blockchain
    infrastructure. The trust system is modified whenever new entrants come into the
    blockchain space and apply blockchain technology to a new use case or specialization.
    The trust model is truly the heart of blockchain—it''s what delivers the tenets
    of *trust*, *trade*, and *ownership*. Trust is what enables blockchain to displace
    the transaction system, but this can only happen when trade and ownership are
    addressed by distributed/shared ledgers. There''s still much work needed to define
    an optimized trust system for various use cases. Database solutions are in the
    works to address scale and mobile use cases, but more work is require around P2P
    and sharing economy models, as well as B2B models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Smart contracts**: In the context of blockchain, a smart contract is a business
    agreement embedded into the transaction database and executed with transactions.
    Rules are needed in business to define the flow of value and state of a transaction,
    so that''s the function of the contract here. The contract is smart because it''s
    a computerized protocol to execute the terms of the contract. Various contractual
    clauses (such as collateral, bonding, delineation of property rights, and so forth)
    can be codified so as to enforce compliance with the terms of the contract and
    ensure a successful transaction—this is the basic idea behind smart contracts.
    Smart contracts are designed to reassure one party that the other will fulfill
    their promise. Part of the objective of such contracts is to reduce the costs
    of verification and enforcement. Smart contracts must be observable (meaning that
    participants can see or prove each other''s actions pertaining to the contract),
    verifiable (meaning that participants can prove to other nodes that a contract
    has been performed or breached), and private (meaning that knowledge of the contents/performance
    of the contract should involve only the necessary participants required to execute
    it). Bitcoin made provisions for smart contracts; however, it lacked some capabilities
    such as Turing-completeness, lack of state, and so on. Ethereum improved upon
    bitcoin''s limitations by building a blockchain with a built-in Turing-complete
    programming language, so that anyone can write smart contracts and decentralized
    applications by creating their own arbitrary rules for ownership, transaction
    formats, and state transition functions. These advances made it possible for complex
    contracts to be codified in a blockchain, such as instant transfer of credit to
    a traveler''s bank account when a flight is delayed beyond a certain duration
    or payment of employee compensation if performance goals are achieved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How does this work practically? Well, smart contracts are deployed as code
    on the blockchain nodes, which we might more appropriately call smart contract
    code. This code is a way of using blockchain technology to complement, or replace,
    existing legal contracts. This smart contract code is deployed on the blockchain
    node in a programming language such as Solidity or Golang. Deploying the code
    on the blockchain provides three important properties:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Permanence and censorship resistance inherited from the blockchain,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability of the program itself to control blockchain assets, such as by transferring
    ownership or quantities of an asset among participants
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Execution of the program by the blockchain, ensuring that it will always execute
    as written and no-one can interfere
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the enterprise world, smart contracts would probably involve blockchain's
    smart contract code, accompanied by a more traditional legal contract. For example,
    a smart contract code may execute on a land registry blockchain network to transfer
    ownership of a house from one party to another, so that land registry records
    are updated in real time and all participants such as the city, realtors, lawyers,
    and banks can all update their own records upon completion of the sale. However,
    the home buyer will insist on a legal contract with indemnity clauses to cover
    any undiscovered liens.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric component design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's discuss various components that facilitate the blockchain technology tenets
    of shared ledger, encryption, the trusts system, and smart contracts. The components
    represent the Hyperledger Fabric infrastructure components and provide isolation
    from chain code or smart contract development constructs. Chain code or smart
    contract development details will be discussed in detail in a separate chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram depicts the Hyperledger Fabric infrastructure components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/49d61d1e-ea29-40e6-a810-ff5a94d001a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Hyperledger Fabric infrastructure components
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are the infrastructure components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hyperledger Fabric CA** is an implementation of membership services but is
    not required to be used (that is, any X509-based PKI infrastructure that can issue
    EC certificates can be used)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dedicated orderer nodes**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implements atomic broadcast API
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Orders and batches transactions and signs each batch (block) to create a hash
    chain
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger Fabric provides two implementations—Solo (for dev/test) and a Kafka-based
    implementation for production/fault tolerance
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The ordering service is pluggable—the implementer needs to only provide an atomic
    broadcast API based on the gRPC interface definition
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Peers** are now responsible for existing smart logic (chaincode) and maintaining
    the ledger'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Endorsement simulates transactions (that is, it executes them, but does not
    commit them)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Peers receive batches of endorsed transactions from the orderer nodes and then
    validate and commit transactions (this eliminates non-determinism)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Principles of Hyperledger design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hyperledger Fabric, again, is a blockchain implementation that is designed for
    deploying a modular and extensible architecture. It has a modular subsystem design
    so that different implementations can be plugged in and implemented over time.
    This section covers the Hyperledger Fabric reference architecture and describes
    the details on the various components/modules and their interactions and functions.
    Understanding the reference architecture facilitates better solution and technology
    design decisions, especially around scalability, security, and performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'While in this book we will discuss the reference architecture of Hyperledger
    Fabric, please note that all the Hyperledger projects (the frameworks referred
    to previously) follow a design philosophy that includes the following principles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Modular and extensible approach**: This implies modularity in all components
    of all frameworks. Components defined by Hyperledger for all projects include
    (but are not limited to) the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consensus layer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart contract (chain code) layer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication (gossip) layer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Data store (persistent, log, and ledger data)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity services (root of trust—to identify the participants)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: APIs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pluggable cryptography
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interoperability**: This principle is around backward interoperability and
    NOT the interoperability between the various Hyperledger project-powered blockchain
    systems or business networks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Focus on secure solutions**: Enterprise and therefore business network security
    is paramount, hence the focus on security-and not just of the crypto abstraction-but
    the interaction between components and the structure that governs the permissioning
    nature of permissioned blockchains. Most industries embarking on the permissioned
    blockchain are established and regulated industries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Token (or coin or crypto-asset) agnostic approach**: This is discussed in
    great length in the governance section, but Hyperledger projects do not use crypto-assets,
    cryptocurrency, tokens, or coin-like constructs as incentive mechanics to establish
    trust systems. While there is a notion of asset tokenization that represents a
    physical, virtual, or dematerialized asset, tokenization of assets is a vastly
    different concept than a systemic token that is generated in the system as a virtualization
    of incentive economics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Focus on rich and easy-to-use APIs**: The focus here is to ensure that blockchain
    systems have not only enterprise middleware access, but access to business networks,
    existing participants, and new systems without exposing the details of blockchain
    powered business networks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CAP Theorem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The CAP Theorem as postulated by Eric Brewer in 2000 at ACM Symposium on Principles
    of distributed computing (PODC) ([https://dl.acm.org/citation.cfm?id=343502](https://dl.acm.org/citation.cfm?id=343502))
    states that in a distributed data store it is impossible to guarantee more than
    any two of the following three properties: Consistency (C), Availability (A),
    and Partition Tolerance (P). A distributed data store thus can be characterized
    on the two properties it guarantees namely  CA, CP or AP.'
  prefs: []
  type: TYPE_NORMAL
- en: More specifically, the theorem is aimed at distributed systems deployed across
    unreliable networks (networks with faults and delays such as the Internet) leading
    to a partitioning of the system components. According to CAP, in these environments,
    the system design must focus on the balance between availability and consistency.
    For example, the ACID (Atomicity, Consistency, Isolation, Durability) approach
    typically provided by RDBMS (Relational Database Management Systems) guarantees
    consistency on a single node on the expense of availability across multiple nodes
    (CP type of systems). However, note that, different configurations may yield different
    combinations namely CA or AP as well.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, Fabric is designed similarly as many other Blockchain platforms
    as AP type of system with Eventual Consistency also referred to as BASE (Basically
    Available, Soft state, Eventual consistency).
  prefs: []
  type: TYPE_NORMAL
- en: 'In context of blockchain CAP properties can be defined as following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Consistency:** The blockchain network avoids any forks of the ledger'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Availability:** Transactions submitted by clients are permanently committed
    into the ledger and available on all the network peers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partition tolerance:** The blockchain network continues to operate despite
    an arbitrary number of transaction proposals or blocks are being dropped (or delayed)
    by the physical network medium between the peers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fabric achieves the CAP properties as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Consistency:** By a total order of transactions and version control using
    MVCC'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Availability:** By hosting a copy of the ledger on each of the peers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partition tolerance:** By maintaining operation despite failed nodes (up
    to a threshold)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, availability and partition tolerance (AP properties of the CAP
    theorem) are guaranteed by default in most blockchain systems. However, consistency
    is harder to provide.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fabric achieves consistency by combining the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: The transaction processing is split into a sequence of steps across multiple
    components of the network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clients connect to a communication channel and submit transaction proposals
    to endorsing peers and then to the ordering service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ordering service orders transactions into blocks with a total order i.e.
    the order of the transactions is guaranteed to be consistent across the whole
    network. The blocks once created are broadcasted to each member peer of the channel.
    The broadcasting protocol guarantees reliable delivery of the blocks to the peers
    in a correct order namely total-order broadcast.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we will explain in Multiversion concurrency control, upon reception of the
    block on the peer, the peer uses MVCC to validate each transaction based on the
    key versions stored in the transaction ReadSet. The MVCC validation guarantees
    consistency of the resulting ledger and of the Worldstate and prevents attacks
    such as double spending. However, it can also lead to elimination of otherwise
    valid transactions, which have been submitted in an order violating the `ReadSet`
    version validation check. The transactions are then marked either valid or invalid
    in the ledger.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ledger then contains a sequence of totally ordered blocks, where each block
    contains a sequence of totally ordered transactions (either valid or invalid),
    yielding a ledger imposing a total order across all transactions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger Fabric reference architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hyperledger Fabric follows a modular design, and the following are some of
    the possible components or modules that can be plugged in and implemented. Note
    that this list is not exhaustive:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Membership services**: This module is essentially a permissioning module
    and acts as a vehicle to establish a root of trust during network creation, but
    this is also instrumental in ensuring and managing the identity of members. Membership
    services are essentially a certificate authority as well as utilized elements
    of the **public key infrastructure** (**PKI**) for things such as key distribution,
    management, and establishing federated trust as the network grows. The membership
    services module provides a specialized digital certificate authority for issuing
    certificates to members of the blockchain network, and it leverages cryptographic
    functions provided by Hyperledger Fabric.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transactions**: A transaction is a request to the blockchain to execute a
    function on the ledger. The function is implemented by a chaincode. Cryptography
    ensures integrity of transactions by linking the transaction to previous blocks
    and ensuring the transactional integrity, if protected, by linking the cryptogram
    or hash from previously linked blocks. Each channel in Hyperledger Fabric is its
    own blockchain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Smart contract or chaincode services**: Chaincode is an application-level
    code stored on the ledger as a part of a transaction. Chaincode runs transactions
    that may modify the world state. Transaction logic is written as chaincode (in
    the Go or JavaScript languages), and executes in secure Docker containers. The
    transaction transforms data, scoped by chaincode on the channel from which it
    operates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are the smart contract or chaincode elements enabled by chaincode services.
    Chaincode is installed on peers, which require access to the asset states to perform
    reads and writes. The chaincode is then instantiated on specific channels for
    specific peers. Ledgers within a channel can be shared across entire networks
    of peers or include only a specific set of participants. Peers are able to participate
    in multiple channels:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Events**: The process of validating peers and chaincodes can produce events
    (pre-defined events and custom events generated by chaincode) on the network that
    applications may listen for and take actions on. These events are consumed by
    event adapters, which may further deliver events using vehicles such as WebHooks
    or Kafka. Fabric-committing peers provide an event stream to publish events to
    registered listeners. As of v1.0, the only events that get published are Block
    events. A Block event gets published whenever the committing peer adds a validated
    block to the ledger:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/9294abae-c80f-4783-9ce8-92c0c7772a30.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Consensus**: Consensus is at the heart of any blockchain system. It also
    enables a trust system. In general, the consensus service enables digitally signed
    transactions to be proposed and validated by network members. In Hyperledger Fabric,
    the consensus is pluggable and tightly linked to the endorse-order-validation
    model that Hyperledger proposes. The ordering services in Hyperledger Fabric represent
    the consensus system. The ordering service batches multiple transactions into
    blocks and outputs a hash-chained sequence of blocks containing transactions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ledger**: Another component is a distributed encrypted ledger, including
    an append-only data store. This provides the ability to query and write data across
    distributed ledgers. There are two options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Level DB (default embedded KV DB) supports keyed queries, composite key queries,
    and key range queries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Couch DB (external option) supports keyed queries, composite key queries, key
    range queries, plus full data rich queries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client SDK**: A client SDK enables the creation of applications that deploy
    and invoke transactions atop a shared ledger. The Hyperledger Fabric Reference
    Architecture supports both Node.js and Java SDK. A software developer kit is like
    a programming kit or set of tools that provide developers with the environment
    of libraries to write and test chaincode applications. SDKs are critical in blockchain
    application development and will be discussed in detail in further chapters. Specific
    capabilities included in the SDK are the application client, chaincode, users,
    events, and crypto suite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger Fabric runtime architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve looked at the reference architecture, let''s consider the runtime
    architecture for Hyperledger Fabric:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73fd6b03-d170-4c8d-9caa-915e683e2973.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following outline demonstrates a Hyperledger Fabric runtime transaction
    processing flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Transaction proposal (application SDK)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction proposal is submitted by application SDK
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It receives a transaction proposal response back (includes ReadWrite set) post
    endorsement
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It submits the transaction (includes ReadWrite set) to the ordering service
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Transaction endorsement**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The transaction is sent to the counter-parties represented by endorsing peers
    on their channel
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Each peer executes the transaction by calling the specified chaincode function
    and signs the result, which becomes the read-write-set of the transaction
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Each peer may participate in multiple channels, allowing concurrent execution
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Transaction submitted to the ordering service**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ordering service accepts endorsed transactions and orders them according
    to the plug-in consensus algorithm, and then delivers them on the channel
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Peers on the channel receive transactions and validate before committing to
    the ledger
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Transaction validation**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validates each transaction and commit block
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Validates the endorsement policy
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Validates ReadSet versions in state DB
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Commits the block to blockchain
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Commits the valid transaction to state DB
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Strengths and advantages of a componentized design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hyperledger Fabric's component design offers several advantages. Many of these
    strengths relate to business network governance, which is an important compliance
    and costs consideration for Hyperledger Fabric in the enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: 'These benefits include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Delineates development design from runtime design**: Separating development
    and runtime design is important because the delineation is important from development
    best practices and infrastructure/hybrid cloud variations, and ensuring adherence
    to the current enterprise and their connectivity to the business network''s application
    development, as well as DevOps practices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Discerning between design imperatives and infrastructure/deployment capabilities**:
    Componentized design allows us to separate infrastructure design, which includes
    things such as network connections, security, permissioning, and contractual vehicles,
    from the overall application design of the business network blueprint that dictates
    the technology blueprint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Incorporates network design principles**: The modularity of Hyperledger Fabric
    can address infrastructure scaling issues, such as the number of connections,
    co-location, security, container deployment practices, and so on. There are various
    considerations when it comes to network design, such as cloud deployment, hybrid
    and/or on premises, and a combination of any of the available options, which are
    dependent on the requirements of individual members in a business network. Network
    design also addresses the business challenges of network growth and the resulting
    performance and security driven **Service Level Agreements** (**SLA**) to its
    members.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Addresses channel design principles**: Modularity, or componentized design,
    can also address isolation, data privacy, and confidentiality between participants
    and controlled/permissioned access with robust audit capability. Channel constructs
    in Hyperledger Fabric enable us to address the business blueprint requirements
    around implementing business-defined transactions that may be bilateral, trilateral,
    or event multilateral. Channels also provide an avenue to limit the visibility
    of transaction data to a few participants or provide full access when required,
    such as to a regulator. Channel design also addresses critical business requirements
    around transaction processing, data visibility, business rules enforcement, and
    so on. It also has technology implications, such as a scalability, security, and
    the costs of the infrastructure that supports the business network. Finally, channel
    design addresses the business challenges of network growth and the resulting performance
    and security-driven SLAs to members.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adopts Hyperledger Fabric composer model-driven development**: Hyperledger
    Composer, one of the tools discussed previously under Hyperledger tools, provides
    an avenue to modular development with a portable, standardized vehicle to add
    governance and control, similar to JEE constructs such as JAR/WAR/RAR, and so
    on. **Business network archive** (**BNA**) is an archive that can be integrated
    into DevOps practices for cross-enterprise team development and collaborative
    life cycle management capabilities. The idea is to separate chaincode development
    from infrastructure design and separate the competencies needed to maintain the
    two facets of enterprise or business network application technology practices.
    More details around Hyperledger Fabric composer will be discussed in a separate
    chapter dedicated to the composer and tooling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of the advantages of componentized design described previously have cost
    implications in terms of runtime/infrastructure design (that is, use of resources
    and resulting costs), flexible design (such as products and relationships morphs),
    and the longevity of the solution (the global footprint of the enterprise cloud
    infrastructure, including robust access to technical and business SMEs in the
    form of maintenance and support)—all of which are essential for compliance, governance,
    and longevity of the solution, and resulting business networks powered by blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Fabric – the journey of a sample transaction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s look at the journey of a sample transaction with Hyperledger Fabric.
    This section will help lay the foundation of Hyperledger Fabric concepts and components
    in order to facilitate a better understanding of the layers involved in transaction
    processing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b3e3f96-0cbd-491c-ab72-fb6509941709.png)'
  prefs: []
  type: TYPE_IMG
- en: Hyperledger Fabric walkthrough
  prefs: []
  type: TYPE_NORMAL
- en: Fabric introduces a newly designed blockchain, preserving the transaction processing
    architecture and aiming at a secure, scalable, resilient, modular, and confidential
    design. Hyperledger Fabric (at the time of writing this book, the current version
    is 1.1) supports the execution of distributed applications supporting enterprise-friendly
    programming models. The components in Hyperledger Fabric provide a modular design,
    optimally suited for a business network made of various enterprises. Hyperledger
    Fabric introduces a model based on three steps, an *endorse-order-validate* architecture,
    designed for the distributed execution of untrusted code in an untrusted environment.
    This separation not only allows for provisioning at scale, but also ensures security
    by separation at every layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The transaction flow is separated into three steps, which may be run on different
    entities in the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Endorsement of a transaction and checking its validity** (**validation step**):
    This step includes members of a channel to  inspect and adhere to  endorsement
    policies which  define the acceptable agreed upon approach to validate a transaction
    proposal. Since peers need to update the ledger ( upon transaction finality) the
    peers ( that are subscribed to a channel) review the proposal and provide their
    ledgers version of (R)ead and (W)rite set. This validation step is vital as it
    provides the first step on transaction validation. This check also acts as a gate
    and prevents form  erroneous downstream processing of transaction, which can be
    computationally expensive.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Ordering through an ordering service**: This is a consensus protocol which
    is meant to be pluggable, irrespective of transaction semantics. The pluggability
    of the consensus provides enterprise and business networks with tremendous flexibility,
    as there are consensus mechanism considerations for various types of industries,
    use cases, and interactions between network participants.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Validation or transaction commitment**: This implies committing a transaction
    and therefore going through a final set of validations per application-specific
    trust assumptions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A Hyperledger Fabric transaction involves three types of nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The committing peer** is the node that maintains the ledger and state. The
    committing peer is the party that *commits* transactions and may hold the smart
    contract or chaincode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The endorsing peer** is a specialized committing peer that can grant or deny
    endorsement of a transaction proposal. The endorsing peer has to hold the smart
    contract.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The ordering nodes** (service) communicate with the committing and peer nodes;
    their main function is to approve the inclusion of transaction blocks into the
    ledger. Unlike the committing peer and endorsing peer, the ordering nodes do not
    hold the smart contract or the ledger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Validation can be divided into two roles, endorsement and ordering:'
  prefs: []
  type: TYPE_NORMAL
- en: Endorsing a transaction means verifying that it obeys a smart contract; endorsers
    sign the contract to complete this aspect of validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ordering verifies transactions for inclusion in the ledger; this form of validation
    helps to control what goes in the ledger and ensure its consistency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What about chain code invocation? In a Hyperledger Fabric transaction, simulation
    (chaincode execution) and block validation/commit are separate.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three phases involved in carrying out a chaincode operation (in other
    words, a business transaction) with Hyperledger Fabric:'
  prefs: []
  type: TYPE_NORMAL
- en: The first phase is chaincode operation execution through simulation on endorsing
    peers. It's possible to enable parallel simulation on endorsers to help improve
    concurrency and scalability since simulation won't update the blockchain state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, simulation determines the business transaction proposal, that is, the
    read set/write set, and broadcasts this to the ordering service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A transaction proposal is then ordered in regard to others and broadcasts to
    committing peers (includes endorsing peers) who validate that its read set has
    not been modified since simulation and applies its write set automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Channels are also an important aspect of the transaction journey, since peers
    exchange messages using consensus by way of channels, and they ensure privacy
    between different ledgers. The following are a few notes regarding channels:'
  prefs: []
  type: TYPE_NORMAL
- en: They don't have to be connected to by all nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peers connect to channels through an access control policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ordering services orders a transaction broadcast to a channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peers receive transactions in exactly the same order for a channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transactions are delivered in cryptographically linked blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every peer validates the delivered blocks and commits them to the ledger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperledger Fabric explored
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Actors in the blockchain network**: A blockchain is a network-based infrastructure
    where network-centric design, development, deployment, management, and support
    constructs apply. It is therefore vital to understand various actors and their
    roles that interact with the blockchain network for various purposes such as management,
    support, business users, regulator, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df899e8f-20df-44c2-8061-896f674ce597.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Each actor has a role and entry point and defines a governance structure that
    aids in network governance, audit, and compliance requirements. Business network
    governance (covered in detail in the following points) is an important compliance
    and costs consideration. Users are the parties who are users of the blockchain.
    They create and distribute blockchain applications and perform operations using
    the blockchain. These actors are consistent, and are based on cloud computing
    actors and roles from ISO/IEC 17788:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Developers**: Blockchain developers are the actors who create applications
    for users (client-side) and develop the smart contracts (server-side) that interact
    with the blockchain, which are then used by blockchain users to initiate transactions.
    They also write code to enable the blockchain to interact with legacy applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Administrators**: Blockchain administrators perform administrative activities,
    such as deployment and configuration of the blockchain network or application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operators**: Blockchain operators are responsible for defining, creating,
    managing, and monitoring the blockchain network and application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auditors**: Blockchain auditors have the responsibility of reviewing blockchain
    transactions and validating their integrity from a business, legal, audit, and
    compliance perspective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business users**: This term refers to users operating in a business network.
    They interact with the blockchain using an application, but may not be aware of
    the blockchain since it will be an invisible transactional system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components in a blockchain network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In general, a blockchain system consists of a number of nodes, each of which
    has a local copy of a ledger. In most systems, the nodes belong to different organizations.
    The nodes communicate with each other in order to gain agreement on what should
    be in the ledger.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process of gaining this agreement is called **consensus**, and there are
    a number of different algorithms that have been developed for this purpose. Users
    send transactionrequests to the blockchain in order to perform the operations
    the chain is designed to provide. Once a transaction is completed, a record of
    the transaction is added to one or more of the ledgers and can never be altered
    or removed. This property of the blockchain is called **immutability**. Cryptography
    is used to secure the blockchain itself and the communications between the elements
    of the blockchain system. It ensures that the ledger cannot be altered, except
    by the addition of new transactions. Cryptography provides integrity on messages
    from users or between nodes and ensures operations are only performed by authorized
    entities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae5a8eed-daaa-4bc0-a7d2-82e0be23192a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The authority to perform transactions on a blockchain can use one of two models:
    permissioned or permissionless. In a permissioned blockchain, users must be enrolled
    in the blockchain before they are allowed to perform transactions. The enrollment
    process gives the user credentials that are used to identify the user when they
    perform transactions. In a permissionless blockchain, any person can perform transactions,
    but they are usually restricted from performing operations on any data but their
    own. Blockchain owners developed an executable software module called a **smart
    contract**, which is installed into the blockchain itself. When a user sends a
    transaction to the blockchain, it can invoke a smart contract module, which performs
    functions defined by the creator of the smart contract module.'
  prefs: []
  type: TYPE_NORMAL
- en: Developer interaction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed in the introduction of *Hyperledger Fabric Explored* section,
    blockchain developers can have many roles including creating applications for
    users (client-side) and developing smart contracts. Developers also write code
    to enable the blockchain to interact with legacy applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d25b8f8-2745-4590-a4be-016a8e63b251.png)'
  prefs: []
  type: TYPE_IMG
- en: A blockchain developer's primary role is to create an application (and integration)
    and Smart Contracts and their respective interaction with ledgers and other enterprise
    systems of the business network and their participants. Due to the separation
    of the Hyperledger Fabric infrastructure, there is a clear separation between
    infrastructure constructs, such as peers, consensus, security, channels, policies,
    and developer-led activities, such as smart contract development, deployment,
    enterprise integration, API management, and front end application development.
  prefs: []
  type: TYPE_NORMAL
- en: 'From a developer''s point of view, the following outline represents an example
    of developer interaction with Hyperledger Fabric constructs:'
  prefs: []
  type: TYPE_NORMAL
- en: The developer creates an application and a smart contract
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application can invoke calls within the smart contract through an SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The calls are processed by the business logic built into the smart contract
    through various commands and protocols:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `put` or `delete` command will go through the selected consensus protocol
    and will be added to the blockchain
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A `get` command can only read from the world state but is not recorded on the
    blockchain
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An application can access block information using rest APIs such as `get block
    height`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note the use of delete here—delete can delete keys from the world state database,
    but not transactions from the blockchain, which we've already established are
    immutable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram summarizes all key roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9424939-cb18-403e-9fbd-e9f5f262042c.png)'
  prefs: []
  type: TYPE_IMG
- en: Understanding governance in business networks powered by blockchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Governance can be defined as the centralized or decentralized body whose sole
    responsibility is establishing a set of rules or laws in a given system to make
    binding decisions. Governance in blockchain networks comes with a set of challenges
    and, in this section, we want to discuss those challenges along with governance
    structures in blockchain networks. Within the context of blockchain, the topic
    of governance presents an interesting paradox.
  prefs: []
  type: TYPE_NORMAL
- en: When a blockchain network is created, the governance structure is generally
    distributed, with input from the various stakeholders. Blockchain networks are
    characterized by decentralization and self-governance, with built-in control points
    and incentives to help maintain the right balance. Transactions go through a series
    of decentralized processing steps, with a decision that offers transaction finality
    as the output. This governance structure is based on incentive economics and consensus.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain began with largely permissionless networks (for example, crypo-asset-based
    networks such as bitcoin, litecoin, and so on) that relied on technology-based
    systemic governance through incentives and coordination. This kind of systemic
    governance poses several challenges in the business world when it attempts to
    apply the tenets of blockchain. The enterprise world is highly regulated and therefore
    relies on permissioned blockchain models with checks and balances; this can become
    rather complicated given the various data regulations, fiduciary responsibilities,
    and the potential conflicts of interest among competing entities that are transacting
    together. There can't necessarily be the same kinds of incentives or coordination,
    due to confidentiality and privacy concerns.
  prefs: []
  type: TYPE_NORMAL
- en: The enterprise focus has often been on understanding blockchain technology and
    its potential impacts on business. Governance has now become an interesting emerging
    discipline in the enterprise blockchain world—and an important one. As you can
    see from the discussion of blockchain business models, there's a range of possible
    governance structures, from full decentralization and quasi-decentralization to
    fully centralized blockchain networks. The governance structure actually determines
    many other aspects of the blockchain adoption, from design to operations to the
    growth model. Business models and governance structures are close-knit and mutually
    dependent; both direct various facets of how a blockchain network operates.
  prefs: []
  type: TYPE_NORMAL
- en: Governance structure and landscape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The kind of systemic governance that relies on incentives and coordination among
    network participants is inadequate for addressing more regulated industries and
    their use cases. So, I'm attempting to define a governance structure and landscape
    for the more traditional enterprise, which is a modular approach that leverages
    existing best practices.
  prefs: []
  type: TYPE_NORMAL
- en: This model aims to facilitate progress and growth, but provide the necessary
    separation of participants in a network. The simplified governance structure I'll
    outline is built upon the core tenets of blockchain as well as principles of incentive,
    penalties, flexibility, delegation, and coordination. Keep in mind that the goal
    of leveraging blockchain is to develop networks of trust while enforcing certain
    rules of engagement. Generally, blockchain projects aim to motivate upgrades to
    technology and security and to penalize non-compliance, with the hope of ensuring
    continued participation and shared business benefits for the network powered by
    blockchain. The business governance model I again describe aids not only fair
    participation in such networks but also an equitable cost structure.  This section
    provides a high level context. We have discussed additional details in a chapter
    dedicated to Governance.
  prefs: []
  type: TYPE_NORMAL
- en: Information technology governance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The discipline of IT governance focuses on IT infrastructure, performance, cost
    structure, and risk. This creates some challenges in a decentralized blockchain
    network, since the governance framework should establish accountability to encourage
    desirable behavior and optimal functioning of the network's IT infrastructure.
    The technical design and infrastructure choices of the blockchain network ought
    to be able to adapt to the needs of its participants. Because blockchain networks
    thrive on at least some level of decentralization, IT governance should include
    distributed flexibility and distributed control.
  prefs: []
  type: TYPE_NORMAL
- en: 'IT governance should provide at least the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A distributed IT management structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A model for distributed maintenance, upgrades, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilization of industry standards — COBIT, ITIL, ISO, CMMI, FAIR, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resource optimization—this includes technology procurement, supplier-vendor
    relations, SLA management, skills, and talent management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technology adoption and evaluation to keep up with technology evolution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network deployment strategy to encourage and enforce regular updates and upgrades
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network support services — IT SLA enforcement and membership services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Risk optimization — **operational support services** (**OSSs**) and **business
    support services** (**BSSs**), IT infrastructure continuity services/planning,
    technology alignment to legal and regulatory requirements, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain network governance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Governance can involve the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing participation in the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forming an equitable cost structure that's distributed fairly based on the activity
    of the participants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing for like-minded participating entities to engage in transactions and
    value creation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing rules of engagement and social contracts with the aim of promoting
    fairness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Governance of the blockchain network''s governance includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Onboarding and offboarding members
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establishing a fair cost structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detailing how data ownership works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regulatory oversight and compliance reporting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing a permissioning structure with central management and a voting process,
    a federated structure, and a delegated structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing business operations and SLAs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network support services (the same as for IT governance)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Risk optimization (the same as for IT governance)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business network governance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Governing blockchain powered business networks will require a model that is,
    again, specific to the use case and industry, factoring in the evolution and particularities
    of that industry. This governance structure will be multi-organizational, and
    participating organizations need to have a wide understanding of how the network
    functions through their collective contributions in order to achieve the best
    outcomes. As new participants are added or removed, and the blockchain network
    evolves, its dynamics change, too.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of co-creation implies bringing parties together to produce a mutually
    advantageous and valuable outcome. One example could be uniting a company with
    a group of customers to generate new ideas and hear fresh perspectives.
  prefs: []
  type: TYPE_NORMAL
- en: 'What follows is a non-exhaustive list of what business network governance might
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: Formulating business models, rules for how the network will operate, and legal
    charters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service management that is common/shared in the network, such as knowing your
    customer processes, audits, reporting, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication related to the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quality assurance and performance measurement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring and managing network security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plans for product and business network evolution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Legal and regulatory framework enforcement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strategies for ensuring compliance with industry-specific requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establishing stewards of the technology and network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The governance structure in a blockchain network can be an interesting challenge.
    As I've shown, there remains considerable debate about full decentralization,
    quasi-decentralization, and full centralization of blockchain networks, and this
    really hinges on the governance structure. By this, I mean that the governance
    structure of a blockchain network helps decide what kind of interaction, growth,
    technology choices, and operations are the best fit for that network. Blockchain,
    as I've stated before, is a platform that enables co-creation, and the new synergies
    that are generated from it will require some management through SLAs and a robust
    governance structure. Governance will be covered in detail in *[Chapter 10](e5d2a492-ff3d-494b-bb36-cee75a52a832.xhtml)*,
    *Governance, Necessary Evil of Regulated Industries*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of this helps you attract new participants to the network, as well as sustain
    the confidence of founding and existing participants, all while maintaining business
    benefits and value.
  prefs: []
  type: TYPE_NORMAL
- en: The business models and governance structures depend on each other to properly
    govern the operation of blockchain networks. A carefully planned governance model
    will ensure harmony between the involved entities, who may function as competitors,
    co-creators, or collaborators at different times.
  prefs: []
  type: TYPE_NORMAL
