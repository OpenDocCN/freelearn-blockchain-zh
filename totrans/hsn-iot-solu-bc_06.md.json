["```\napk del make gcc g++ python git\n```", "```\nsu -c \"npm install -g passport-ldapauth\" - composer && \\\n```", "```\nexport COMPOSER_CARD=admin@interbancario\nexport COMPOSER_NAMESPACES=require\nexport COMPOSER_AUTHENTICATION=true\nexport COMPOSER_MULTIUSER=true\n```", "```\nexport COMPOSER_PROVIDERS='{\n    \"ldap\": {\n    \"provider\": \"ldap\",\n    \"authScheme\": \"ldap\",\n    \"module\": \"passport-ldapauth\",\n    \"authPath\": \"/auth/ldap\",\n    \"successRedirect\": “<redirection URL. will be overwritten by the property 'json: true'>”,\n \"failureRedirect\": \"/?success=false\",\n \"session\": true,\n    \"json\": true,\n    \"LdapAttributeForLogin\": “< CHANGE TO LOGIN ATTRIBUTE >\",\n    \"LdapAttributeForUsername\": \"<CHANGE TO USERNAME ATTRIBUTE>\",\n      \"server\": {\n      \"url\": “<URL DO LDAP>\",\n      \"bindDN\": “<DISTINGUISHED USER NAME FOR A SEARCH>\",\n      \"bindCredentials\": “<USER PASSWORD FOR A SEARCH>\", \n      \"searchBase\": “<PATH WITH USERS LIST WILL BE STORED>\",\n      \"searchFilter\": \"(uid={{username}})\"\n    }\n  }\n}'\n```", "```\nTestValideteLastProcess:A Transaction named TestValideteLastProcess\nUpdateOpportunityStatus: A Transaction named UpdateOpportunityStatus\nWallet:Business network cards for the authenticated user\n```", "```\ncurl -v http://localhost:3000/api/system/ping?access_token=xxxxx\n```", "```\ncurl -v -H 'X-Access-Token: xxxxx' http://localhost:3000/api/system/ping\n```", "```\n// **\n  * Sample business network definition.\n  */\n namespace org.example.basic\n```", "```\n\n asset SampleAsset identified by assetId {\n   o String assetId\n   --> SampleParticipant owner\n   o Double value\n }\n\n participant SampleParticipant identified by participantId {\n   o String participantId\n   o String firstName\n   o String lastName\n }\n```", "```\ntransaction SampleTransaction {\n   --> SampleAsset origin\n   --> SampleAsset target\n     o Double txTransferAmount\n }\n\n event SampleEvent {\n   --> SampleAsset origin\n   --> SampleAsset target\n     o Double txTransferAmount\n }\n```", "```\nrule networkControlPermission {\n  description:  \"networkControl can access network commands\"\n  participant: \"org.acme.foodchain.auction.networkControl\"\n  operation: READ, CREATE, UPDATE\n  resource: \"org.hyperledger.composer.system.Network\"\n  action: ALLOW  \n}\n```", "```\nrule SampleConditionalRuleWithTransaction {\n    description: \"Description of the ACL rule\"\n    participant(m): \"org.foodchain..SampleParticipant\"\n    operation: ALL\n    resource(v): \"org.example.SampleAsset\"\n    transaction(tx): \"org.example.SampleTransaction\"\n    condition: (v.owner.getIdentifier() == m.getIdentifier())\n    action: ALLOW\n}\n```", "```\nSample transaction processor function.\n  * @param {org.example.basic.SampleTransaction} tx The sample transaction instance.\n  * @transaction\n  */\n async function sampleExchange(tx) {\n // Get the asset registry for the asset.\n     const assetRegistry = await getAssetRegistry('org.example.basic.SampleAsset');\n\n       //Ensure the balance is greather than the amount to be transfered\n       if(tx.origin.value > tx.txTransferAmount) {\n\n     //charge from receiver account\n     tx.origin.value = (tx.origin.value - tx.txTransferAmount);\n\n     //add to receiver account\n     tx.target.value = (tx.target.value +  tx.txTransferAmount);\n\n     // Update the asset in the asset registry.\n     await assetRegistry.update(tx.origin);\n     await assetRegistry.update(tx.target);\n\n     // Emit an event for the modified asset.\n     let event = getFactory().newEvent('org.example.basic', 'SampleEvent');\n\n     event.origin = tx.origin;\n event.target = tx.target;\n event.txTransferAmount = tx.txTransferAmount;\n\n emit(event);\n\n }else{\n throw Error(`You do not have enough balance for this transaction:\n Balance US$: ${tx.origin.value} \n Transfer Amount: ${tx.txTransferAmount}`);\n }\n }\n```"]