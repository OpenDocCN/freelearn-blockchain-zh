- en: Building a Consortium Blockchain
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建联盟区块链
- en: Consortiums (an association, typically of several participants such as banks,
    e-commerce sites, government entities, hospitals, and so on) can use blockchain technology
    to solve many problems and make things faster and cheaper. Although they figure
    out how blockchain can help them, an Ethereum implementation of blockchain doesn't
    specifically fit them for all cases. Although there are other implementations
    of blockchain (for example, Hyperledger) that are built specially for consortium,
    as we learned Ethereum throughout the book, we will see how we can hack Ethereum
    to build a consortium blockchain. Basically, we will be using parity to build
    a consortium blockchain. Although there are other alternatives to parity, such
    as J.P. Morgan's quorum, we will use parity as at the time of writing this book,
    it has been in existence for some time, and many enterprises are already using
    it, whereas other alternatives are yet to be used by any enterprises. But for
    your requirements, parity may not be the best solution; therefore, investigate
    all the others too before deciding which one to use.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 联盟（通常由多个参与者组成，如银行、电子商务网站、政府实体、医院等）可以利用区块链技术解决许多问题，并使事情变得更快更便宜。尽管他们找出了区块链如何帮助他们，以太坊的区块链实现并不完全适合他们的所有情况。虽然有其他区块链实现（例如
    Hyperledger）专门为联盟而构建，但正如我们在整本书中学到的以太坊一样，我们将看到如何使用以太坊构建联盟区块链。基本上，我们将使用 Parity 来构建联盟区块链。虽然
    Parity 还有其他替代方案，例如 J.P. Morgan 的 quorum，但在撰写本书时，Parity 已经存在一段时间，许多企业已经在使用它，而其他替代方案尚未被任何企业使用。但根据您的需求，Parity
    可能不是最佳解决方案；因此，在决定使用哪种解决方案之前，请先调查所有其他解决方案。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Why is Ethereum unfit for consortium blockchain?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么以太坊不适合联盟区块链？
- en: What is parity node and what are its features?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 Parity 节点以及其特点？
- en: What is the Proof-of-Authority consensus protocol and what types of PoA are
    supported by parity?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是权威证明共识协议，以及 Parity 支持哪些类型的 PoA？
- en: How does the Aura consensus protocol work?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Aura 共识协议是如何工作的？
- en: Downloading and installing parity
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并安装 Parity
- en: Building a consortium blockchain using parity
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Parity 构建联盟区块链
- en: What is a consortium blockchain?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是联盟区块链？
- en: 'To understand what a consortium blockchain is, or, in other words, what kind
    of blockchain implementation consortiums need, let''s check out an example. Banks
    want to build a blockchain to make money transfers easier, faster, and cheaper.
    In this case, here are the things they need:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解什么是联盟区块链，或者换句话说，联盟需要什么样的区块链实现，让我们来看一个例子。银行希望建立一个区块链来使资金转账更加简单、快速和便宜。在这种情况下，以下是他们需要的东西：
- en: '**Speed**: They need a blockchain network that can confirm transactions in
    near-real time. Currently, the Ethereum blockchain network block time is 12 seconds,
    and clients usually wait for a couple of minutes before confirming a transaction.'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**速度**：他们需要一个能够在几乎实时确认交易的区块链网络。目前，以太坊区块链网络的出块时间为12秒，客户通常需要等待几分钟才能确认一笔交易。'
- en: '**Permissioned**: They want the blockchain to be permissioned. Permissioning
    itself means various different things. For example: permissioning can include
    taking permission to join the network, it can include taking permission to to
    be able create blocks, it can also be taking permission to be able to send specific
    transactions and so on.'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**有权限**：他们希望区块链是有权限的。权限本身意味着各种不同的事情。例如：权限可能包括获得加入网络的许可，可能包括获得创建区块的许可，也可能包括获得发送特定交易的许可等等。'
- en: '**Security**: PoW isn''t secure enough for private networks as there is a limited
    number of participants; therefore, there isn''t enough hash power produced to
    make it secure. So, there is a need for a consensus protocol that can keep the
    blockchain secure and immutable.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安全性**：对于私有网络来说，PoW 并不足够安全，因为参与者数量有限；因此，没有足够的算力来保证其安全性。因此，需要一种能够保持区块链安全和不可变的共识协议。'
- en: '**Privacy**: Although the network is private, there is still a need for privacy
    in the network itself. There are two kinds of privacy:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**隐私性**：尽管网络是私有的，但网络本身仍然需要隐私。有两种隐私形式：'
- en: '**Identity privacy**: Identity privacy is the act of making the identity untraceable.
    The solution we saw earlier to gain identity privacy was to use multiple Ethereum
    account addresses. But if multiple Ethereum accounts are used, then smart contracts
    will fail ownership validation as there is no way to know whether all of these
    accounts actually belong to the same user.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**身份隐私：** 身份隐私是使身份无法追踪的行为。我们先前看到的获得身份隐私的解决方案是使用多个以太坊账户地址。但是，如果使用多个以太坊账户，则智能合约将无法通过所有这些账户是否实际属于同一用户的所有权验证而失败。'
- en: '**Data privacy:** Sometimes, we don''t want the data to be visible to all the
    nodes in the network, but to specific nodes only.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据隐私：** 有时，我们不希望数据对网络中的所有节点可见，而是只对特定节点可见。'
- en: Overall, in this chapter, we will learn how to solve these issues in Ethereum.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，在本章中，我们将学习如何解决以太坊中的这些问题。
- en: What is Proof-of-Authority consensus?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是权威证明共识？
- en: PoA is a consensus mechanism for blockchain in which consensus is achieved by
    referring to a list of validators (referred to as authorities when they are linked
    to physical entities). Validators are a group of accounts/nodes that are allowed
    to participate in the consensus; they validate the transactions and blocks.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: PoA 是区块链的一种共识机制，其共识是通过参考验证者列表（当它们与实体联系在一起时称为权威）来实现的。验证者是允许参与共识的一组账户/节点；它们验证交易和区块。
- en: Unlike PoW or PoS, there is no mining mechanism involved. There are various
    types of PoA protocols, and they vary depending on how they actually work. Hyperledger
    and Ripple are based on PoA. Hyperledger is based on PBFT, whereas ripple uses
    an iterative process.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与 PoW 或 PoS 不同，它不涉及挖矿机制。有各种类型的 PoA 协议，它们根据它们的实际工作方式而有所不同。Hyperledger 和 Ripple
    基于 PoA。Hyperledger 基于 PBFT，而 Ripple 使用迭代过程。
- en: Introduction to parity
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Parity 简介
- en: Parity is an Ethereum node written from the ground up for correctness/verifiability,
    modularization, low footprint, and high performance. It is written in Rust programming
    language, a hybrid imperative/OO/functional language with an emphasis on efficiency.
    It is professionally developed by Parity Technologies. At the time of writing
    this book, the latest version of parity is 1.7.0, and we will be using this version.
    We will learn as much as is required to build a consortium blockchain. To learn
    parity in depth, you can refer to the official documentation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Parity 是一款专为正确性/可验证性、模块化、低占用空间和高性能而编写的以太坊节点。它是用 Rust 编程语言编写的，这是一种以效率为重点的混合命令式/OO/函数式语言。它是由
    Parity Technologies 专业开发的。在撰写本书时，Parity 的最新版本是 1.7.0，我们将使用此版本。我们将学习构建联盟区块链所需的所有内容。要深入学习
    Parity，您可以参考官方文档。
- en: It has a lot more features than go-ethereum, such as web3 dapp browser, much
    more advanced account management, and so on. But what makes it special is that
    it supports **Proof-of-Authority** (**PoA**) along with PoW. Parity currently
    su+-pports Aura and Tendermint PoA protocols. In future, it may support some more
    PoA protocols. Currently, parity recommends the use of Aura instead of Tendermint
    as Tendermint is still under development.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它比 go-ethereum 有更多的功能，例如 web3 dapp 浏览器，更先进的账户管理等等。但它之所以特别之处在于，它支持**权威证明**（**PoA**）以及
    PoW。Parity 目前支持 Aura 和 Tendermint PoA 协议。未来，它可能支持更多的 PoA 协议。当前，Parity 推荐使用 Aura
    而不是 Tendermint，因为 Tendermint 仍在开发中。
- en: Aura is a much better solution for permissioned blockchains than PoW as it has
    better block time and provides much better security in private networks.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Aura 对于权限区块链比 PoW 是一个更好的解决方案，因为它具有更好的区块时间，并在私有网络中提供了更好的安全性。
- en: Understanding how Aura works
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Aura 工作原理
- en: Let's see at a high level how Aura works. Aura requires the same list of validators
    to be specified in each node. This is a list of account addresses that participate
    in the consensus. A node may or may not be a validating node. Even a validating
    node needs to have this list so that it can itself reach a consensus.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们高层次地看一下 Aura 是如何工作的。Aura 要求在每个节点中指定相同的验证者列表。这是参与共识的账户地址列表。一个节点可能是一个验证节点，也可能不是。即使是验证节点也需要拥有此列表，以便它自己能够达成共识。
- en: This list can either be provided as a static list in the genesis file if the
    list of validators is going to remain the same forever, or be provided in a smart
    contract so that it can be dynamically updated and every node knows about it.
    In a smart contract, you can configure various strategies regarding who can add
    new validators.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果验证者列表永远不会改变，此列表可以在创世文件中提供为静态列表；或者可以在智能合约中提供，以便可以动态更新，并且每个节点都知道它。在智能合约中，你可以配置各种关于谁可以添加新验证者的策略。
- en: The block time is configurable in the genesis file. It's up to you to decide
    the block time. In private networks, a block time as low as three seconds works
    well. In Aura, after every three seconds, one of the validators is selected and
    this validator is responsible for creating, verifying, signing, and broadcasting
    the block. We don't need to understand much about the actual selection algorithm
    as it won't impact our dapp development. But this is the formula to calculate
    the next validator, `(UNIX_TIMESTAMP / BLOCK_TIME % NUMBER_OF_TOTAL_VALIDATORS)`.
    The selection algorithm is smart enough to give equal chances to everyone When
    other nodes receive a block, they check whether it's from the next valid validator
    or not; and if not, they reject it. Unlike PoW, when a validator creates a block,
    it is not rewarded with ether. In Aura, it's up to us to decide whether to generate
    empty blocks or not when there are no transactions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 区块时间在创世文件中是可配置的。由你决定区块时间。在私有网络中，低至三秒的区块时间效果良好。在 Aura 中，每隔三秒钟选择一个验证者，该验证者负责创建、验证、签名和广播区块。我们不需要太多了解实际的选择算法，因为这不会影响我们的
    dapp 开发。但这是计算下一个验证者的公式，`(UNIX_TIMESTAMP / BLOCK_TIME % NUMBER_OF_TOTAL_VALIDATORS)`。选择算法足够智能，给每个人平等的机会。当其他节点接收到一个区块时，它们会检查它是否来自下一个有效的验证者；如果不是，它们会拒绝它。与
    PoW 不同，当一个验证者创建一个区块时，它不会获得以太币奖励。在 Aura 中，当没有交易时，是否生成空区块由我们决定。
- en: 'You must be wondering what will happen if the next validator node, due to some
    reason, fails to create and broadcast the next block. To understand this, let''s
    take an example: suppose A is the validator for the next block, which is the fifth
    block, and B is the validator for the sixth block. Assume block time is five seconds.
    If A fails to broadcast a block, then after five seconds when B''s turn arrives,
    it will broadcast a block. So nothing serious happens actually. The block timestamp
    will reveal these details.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你一定在想，如果由于某种原因，下一个验证节点无法创建和广播下一个区块会发生什么。为了理解这一点，让我们举个例子：假设 A 是下一个区块（即第五个区块）的验证者，B
    是第六个区块的验证者。假设区块时间为五秒。如果 A 未能广播一个区块，那么五秒后当 B 轮到时，它将广播一个区块。所以实际上并没有发生什么严重的事情。区块时间戳将显示这些细节。
- en: 'You might also be wondering whether there are chances of networks ending up
    with multiple different blockchains as it happens in PoW when two miners mine
    at the same time. Yes, there are many ways this can happen. Let''s take an example
    and understand one way in which this can happen and how the network resolves it
    automatically. Suppose there are five validators: A, B, C, D, and E. Block time
    is five seconds. Suppose A is selected first and it broadcasts a block, but the
    block doesn''t reach D and E due to some reason; so they will think A didn''t
    broadcast the block. Now suppose the selection algorithm selects B to generate
    the next block; then B will generate the next block on top of A''s block and broadcast
    to all the nodes. D and E will reject it because the previous block hash will
    not match. Due to this, D and E will form a different chain, and A, B, and C will
    form a different chain. A, B, and C will reject blocks from D and E, and D and
    E will reject blocks from A, B, and C. This issue is resolved among the nodes
    as the blockchain that is with A, B and C is more accurate than the blockchain
    with D and E; therefore D and E will replace their version of blockchain with
    the blockchain held with A, B, and C. Both these versions of the blockchain will
    have different accuracy scores, and the score of the first blockchain will be
    more than the second one. When B broadcasts its block, it will also provide the
    score of its blockchain, and as its score is higher, D and E will have replaced
    their blockchain with B''s blockchain. This is how conflicts are resolved. The
    chain score of blockchain is calculated using `(U128_max * BLOCK_NUMBER_OF_LATEST_BLOCK
    - (UNIX_TIMESTAMP_OF_LATEST_BLOCK / BLOCK_TIME))`. Chains are scored first by
    their length (the more blocks, the better). For chains of equal length, the chain
    whose last block is older is chosen.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也想知道是否有可能出现网络以多个不同的区块链结束的情况，就像在PoW中两个矿工同时挖矿的情况一样。是的，这种情况可能有很多种。让我们举一个例子，了解一种可能发生的情况以及网络如何自动解决它。假设有五个验证者：A、B、C、D和E。区块时间为五秒。假设首先选择A，并且它广播了一个区块，但由于某种原因，该区块未到达D和E；因此他们会认为A没有广播该区块。现在假设选择算法选择B来生成下一个区块；那么B将在A的区块之上生成下一个区块并广播给所有节点。D和E将拒绝它，因为前一个区块的哈希值不匹配。因此，D和E将形成不同的链，而A、B和C将形成不同的链。A、B和C将拒绝来自D和E的区块，而D和E将拒绝来自A、B和C的区块。这个问题在节点之间解决，因为A、B和C持有的区块链比D和E持有的区块链更准确；因此D和E将用A、B和C持有的区块链替换他们的区块链版本。这两个版本的区块链将具有不同的准确度分数，第一个区块链的分数将比第二个区块链的分数更高。当B广播它的区块时，它还将提供其区块链的分数，由于其分数更高，D和E将用B的区块链替换他们的区块链。这就是冲突是如何解决的。区块链的链分数是使用`(U128_max
    * BLOCK_NUMBER_OF_LATEST_BLOCK - (UNIX_TIMESTAMP_OF_LATEST_BLOCK / BLOCK_TIME))`来计算的。首先按长度对链进行评分（区块越多，越好）。对于长度相等的链，选择最后一个区块更老的链。
- en: You can learn more about Aura in depth at [https://github.com/paritytech/parity/wiki/Aura](https://github.com/paritytech/parity/wiki/Aura).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以深入了解Aura在[https://github.com/paritytech/parity/wiki/Aura](https://github.com/paritytech/parity/wiki/Aura)。
- en: Getting parity running
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让parity运行起来
- en: Parity requires Rust version 1.16.0 to build. It is recommended to install Rust
    through rustup.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Parity需要Rust版本1.16.0来构建。推荐通过rustup安装Rust。
- en: Installing rust
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装rust
- en: If you don't already have rustup, you can install it like this.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装rustup，你可以像这样安装它。
- en: Linux
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux
- en: 'On Linux-based operating systems, run this command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于Linux的操作系统上，运行此命令：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parity also requires the `gcc`, `g++`, `libssl-dev`/`openssl`, `libudev-dev`,
    and `pkg-config` packages to be installed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Parity还需要安装`gcc`、`g++`、`libssl-dev`/`openssl`、`libudev-dev`和`pkg-config`软件包。
- en: OS X
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OS X
- en: 'On OS X, run this command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在OS X上，运行此命令：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Parity also requires clang. Clang comes with Xcode command-line tools or can
    be installed with Homebrew.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Parity还需要clang。Clang随Xcode命令行工具一起提供，或者可以使用Homebrew安装。
- en: Windows
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows
- en: 'Make sure you have Visual Studio 2015 with C++ support installed. Next, download
    and run the rustup installer from [https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe](https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe),
    start "VS2015 x64 Native Tools Command Prompt", and use the following command
    to install and set up the `msvc` toolchain:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你安装了带有C++支持的Visual Studio 2015。接下来，从[https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe](https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe)下载并运行rustup安装程序，启动"VS2015
    x64 Native Tools Command Prompt"，并使用以下命令安装和设置`msvc`工具链：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Downloading, installing and running parity
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载、安装和运行parity
- en: 'Now, once you have rust installed on your operating system, you can run this
    simple one-line command to install parity:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在您的操作系统上安装了 rust 之后，您可以运行以下简单的单行命令来安装 parity：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To check whether parity is installed or not, run this command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查是否安装了 parity，运行以下命令：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If parity is installed successfully, then you will see a list of sub-commands
    and options.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功安装了 parity，则会看到一个子命令和选项的列表。
- en: Creating a private network
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建私人网络
- en: Now it's time to set up our consortium blockchain. We will create two validating
    nodes connected to each other using Aura for consensus. We will set up both on
    the same computer.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候设置我们的联合区块链了。我们将使用 Aura 来创建两个互相连接的验证节点进行共识。我们会在同一台计算机上设置它们。
- en: Creating accounts
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建账户
- en: First, open two shell windows. The first one is for the first validator and
    the second one is for the second validator. The first node will contain two accounts
    and the second node will contain one account. The second account of first node
    will be assigned to some initial ether so that the network will have some ether.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开两个 shell 窗口。其中一个是给第一个验证者，另一个是给第二个验证者。第一个节点将包含两个账户，第二个节点将包含一个账户。第一个节点的第二个账户将被分配一些初始
    ether，这样网络就会有一些 ether。
- en: 'In the first shell, run this command twice:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个 shell 中，运行以下命令两次：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Both the times it will ask you to enter a password. For now just put the same
    password for both accounts.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 两次都会要求您输入密码。现在只需为两个账户设置相同的密码。
- en: 'In the second shell, run this command once only:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个 shell 中，只运行一次以下命令：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Just as before, enter the password.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 就像以前一样，输入密码。
- en: Creating a specification file
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个规范文件
- en: 'Nodes of every network share a common specification file. This file tells the
    node about the genesis block, who the validators are, and so on. We will create
    a smart contract, which will contain the validators list. There are two types
    of validator contracts: non-reporting contract and reporting contract. We have
    to provide only one.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网络的节点共享一个通用的规范文件。该文件告诉节点关于创世块，谁是验证者等信息。我们将创建一个智能合约，其中将包含验证者列表。有两种类型的验证器合约：非报告合约和报告合约。我们只需要提供一个。
- en: The difference is that non-reporting contract only returns a list of validators,
    whereas reporting contract can take action for benign (benign misbehaviour may
    be simply not receiving a block from a designated validator) and malicious misbehavior
    (malicious misbehaviour would be releasing two different blocks for the same step).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 区别在于非报告合同只返回验证器列表，而报告合同可以对良性（良性的不端行为可能只是未从指定验证者那里接收到一个块）和恶意不端行为（恶意的不端行为是发布了两个不同的块来同一个步骤）采取行动。
- en: 'The non-reporting contract should have at least this interface:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 非报告合同至少应该具有以下接口：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `getValidators` function will be called on every block to determine the
    current list. The switching rules are then determined by the contract implementing
    that method.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`getValidators` 函数将在每个块上被调用以确定当前列表。然后，切换规则由实施该方法的合同确定。'
- en: 'A reporting contract should have at least this interface:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 报告合同至少应该具有以下接口：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When there is benign or malicious behavior, the consensus engine calls the `reportBenign`
    and `reportMalicious` functions respectively.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当存在良性或恶意行为时，共识引擎分别调用 `reportBenign` 和 `reportMalicious` 函数。
- en: 'Let''s create a reporting contract. Here is a basic example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个报告合同。下面是一个基本示例：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This code is self-explanatory. Make sure that in the validators array replaces
    the addresses with the first address of validator 1 and validator 2 nodes as we
    will be using those addresses for validation. Now compile the preceding contract
    using whatever you feel comfortable with.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是不言而喻的。确保在验证器数组中用第一个验证者 1 和验证者 2 节点的第一个地址替换地址，因为我们将使用这些地址进行验证。现在使用您感到舒适的任何方法编译前述合同。
- en: 'Now let''s create the specification file. Create a file named `spec.json`,
    and place this code in it:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来创建规范文件。创建一个名为 `spec.json` 的文件，并将以下代码放入其中：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is how the preceding file works:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是之前文件的工作原理：
- en: The `engine` property is used to set the consensus protocol and the protocol-specific
    parameters. Here, the engine is `authorityRound`, which is aura. `gasLimitBoundDivisor`
    determines gas limit adjustment and has the usual `ethereum` value. In the `validators`
    property, we have a `contract` property, which is the address of the reporting
    contract. `stepDuration` is the block time in seconds.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`engine` 属性用于设置共识协议和协议特定参数。在这里，引擎是 `authorityRound`，即 aura。`gasLimitBoundDivisor`
    确定了 gas 限制调整，具有通常的 `ethereum` 值。在 `validators` 属性中，我们有一个 `contract` 属性，这是报告合约的地址。`stepDuration`
    是以秒为单位的区块时间。'
- en: In the `params` property, only the network ID is what matters; others are standard
    for all chains.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `params` 属性中，只有网络 ID 是重要的；其他的对所有链都是标准的。
- en: '`genesis` has some standard values for the `authorityRound` consensus.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`genesis` 对于 `authorityRound` 共识有一些标准值。'
- en: '`accounts` is used to list the initial accounts and contracts that exist in
    the network. The first four are standard Ethereum built-in contracts; these should
    be included to use the Solidity contract writing language. The fifth one is the
    reporting contract. Make sure you replace the byte code with your byte code in
    the `constructor` param. The last account is the second account we generated in
    the validator 1 shell. It is used to supply ether to the network. Replace this
    address with yours.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accounts` 用于列出网络中存在的初始帐户和合约。前四个是标准的以太坊内置合约；这些应该包括以使用 Solidity 合约编写语言。第五个是报告合约。确保将字节码替换为您的字节码，在
    `constructor` 参数中使用。最后一个帐户是验证器 1 shell 中生成的第二个帐户。它用于向网络提供以太。将此地址替换为您自己的地址。'
- en: Before we proceed further, create another file called as `node.pwds`. In that
    file, place the password of the accounts you created. This file will be used by
    the validators to unlock the accounts to sign the blocks.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，创建另一个名为 `node.pwds` 的文件。在该文件中，放置您创建的帐户的密码。这个文件将被验证者用来解锁帐户以签署区块。
- en: Launching nodes
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动节点
- en: 'Now we have all basic requirements ready to launch our validating nodes. In
    the first shell, run this command to launch the first validating node:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好启动我们的验证节点所需的所有基本要求。在第一个 shell 中，运行以下命令来启动第一个验证节点：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is how the preceding command works:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的工作原理：
- en: '`--chain` is used to specify the path of the specification file.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--chain` 用于指定规范文件的路径。'
- en: '`-d` is used to specify the data directory.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-d` 用于指定数据目录。'
- en: '`--force-sealing` ensures that blocks are produced even if there are no transactions.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--force-sealing` 确保即使没有交易，也会产生区块。'
- en: '`--engine-signer` is used to specify the address using which the node will
    sign blocks, that is, the address of the validator. If malicious authorities are
    possible, then `--force-sealing` is advised; this will ensure that the correct
    chain is the longest. Make sure you change the address to the one you generated,
    that is, the first address generated on this shell.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--engine-signer` 用于指定节点将用于签名区块的地址，即验证者的地址。如果存在恶意权限，则建议使用 `--force-sealing`；这将确保正确的链是最长的。确保将地址更改为您生成的地址，即在此
    shell 中生成的第一个地址。'
- en: '`--password` is used to specify the password file.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--password` 用于指定密码文件。'
- en: 'In the second shell, run this command to launch second validating node:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个 shell 中，运行以下命令来启动第二个验证节点：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, make sure you change the address to the one you generated that is, the
    address generated on this shell.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，请确保将地址更改为您在此 shell 中生成的地址。
- en: Connecting nodes
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接节点
- en: 'Now finally, we need to connect both the nodes. Open a new shell window and
    run this command to find the URL to connect to the second node:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要连接这两个节点。打开一个新的 shell 窗口，并运行以下命令来查找连接到第二个节点的 URL：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You will get this sort of output:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您将会得到这样的输出：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now run this command by replacing the encode URL and IP address in the `enode`
    URL to 127.0.0.1:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行以下命令，将 `enode` URL 和 IP 地址中的编码 URL 替换为 127.0.0.1：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You should get this output:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到这个输出：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The nodes should indicate 0/1/25 peers in the console, which means they are
    connected to each other. Here is a reference image:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 节点应该在控制台中指示 0/1/25 对等节点，这意味着它们彼此连接。这是一个参考图像：
- en: '![](img/image_09_001.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_09_001.png)'
- en: Permissioning and privacy
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 许可和隐私
- en: 'We saw how parity solves the issues of speed and security. Parity currently
    doesn''t provide anything specific to permissioning and privacy. Let''s see how
    to achieve this in parity:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了 parity 如何解决速度和安全性的问题。Parity 目前没有提供任何特定于许可和隐私的内容。让我们看看如何在 parity 中实现这一点：
- en: '**Permissioning**: A parity network can implement permissioning to decide who
    can join and who cannot by configuring each node''s server to allow connections
    from only specific IP addresses. Even if IP addresses aren''t blocked, to connect
    to a node in the network, a new node will needs an enode address, which we saw
    earlier, and that''s not guessable. So by default, there is a basic protection.
    But there is nothing to enforce this. Every node in the network has to take care
    about this at its end. Similar permissioning for who can create blocks and who
    cannot can be done through a smart contract. Finally what kind of transactions
    a node can send is not configurable at the moment.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**权限管理**：Parity 网络可以通过配置每个节点的服务器，仅允许特定 IP 地址的连接，来实现权限管理，决定谁可以加入，谁不可以加入。即使 IP
    地址没有被阻止，要连接网络中的一个节点，新节点也需要一个我们之前看到的 enode 地址，而这个地址是无法猜测的。因此，默认情况下存在基本的保护。但是没有强制执行这一点。网络中的每个节点都必须自行处理此问题。类似的权限管理，可以通过智能合约来确定谁可以创建区块，谁不可以创建。最后，节点可以发送什么样的交易目前是不可配置的。'
- en: '**Identity privacy**: There is a technique to achieve identity privacy by still
    enabling ownership checks. At the time of setting ownership, the owner needs to
    specify a public key of an un-deterministic asymmetric cryptography. Whenever
    it wants ownership checks to pass, it will provide an encrypted form of common
    text, which will be decrypted by the contract and see whether the account is owner
    or not. The contract should make sure the same encrypted data is not checked twice.'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**身份隐私**：通过仍然启用所有权检查的技术，可以实现身份隐私。在设置所有权时，所有者需要指定一个不确定的非对称加密的公钥。每当它想要通过所有权检查时，它将提供常见文本的加密形式，合约将解密它并查看账户是否为所有者。合约应确保相同的加密数据不会被检查两次。'
- en: '**Data privacy**: If you are using blockchain to just store data, you can use
    symmetric encryption to encrypt data and store and share the key with people who
    you want to see the data. But operations on encrypted data is not possible. And
    if you need operations on input data and still gain privacy, then the parties
    have to set up a different blockchain network completely.'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据隐私**：如果您只是使用区块链来存储数据，可以使用对称加密来加密数据，并与您想要查看数据的人共享密钥。但无法对加密数据进行操作。如果需要对输入数据进行操作并仍然保护隐私，则各方必须完全建立一个不同的区块链网络。'
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: Overall in this chapter, we learned how to use parity and how aura works and
    some techniques to achieve permissioning and privacy in parity. Now you must be
    confident enough to at least build a proof-of-concept for a consortium using blockchain.
    Now you can go ahead and explore other solutions, such as Hyperledger 1.0 and
    quorum for building consortium blockchains. Currently, Ethereum is officially
    working on making more suitable for consortiums; therefore, keep a close eye on
    various blockchain information sources to learn about anything new that comes
    in the market.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，在本章中，我们学习了如何使用 Parity 以及 aura 的工作原理，以及在 Parity 中实现权限管理和隐私的一些技巧。现在，您至少应该有足够的信心为使用区块链的联盟构建一个概念验证。现在，您可以继续探索其他解决方案，例如
    Hyperledger 1.0 和 Quorum，用于构建联盟区块链。目前，以太坊正式致力于使其更适合联盟；因此，请密切关注各种区块链信息来源，了解市场上的新动态。
