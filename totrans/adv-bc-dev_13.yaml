- en: Hyperledger
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger
- en: Hyperledger is not a blockchain, but it is a project that was initiated by the
    Linux Foundation in December 2015 to advance blockchain technology. This project
    is a collaborative effort by its members to build an open source distributed ledger
    framework that can be used to develop and implement cross-industry blockchain
    applications and systems. The principal focus is to develop and run platforms
    that support global business transactions. The project also focuses on improving
    the reliability and performance of blockchain systems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger 不是一个区块链，而是一个由 Linux 基金会于 2015 年 12 月发起的项目，旨在推进区块链技术。这个项目是其成员的合作努力，旨在构建一个开源的分布式账本框架，可用于开发和实施跨行业的区块链应用和系统。主要关注点是开发和运行支持全球业务交易的平台。该项目还专注于提高区块链系统的可靠性和性能。
- en: Projects under Hyperledger undergo various stages of development, starting from
    proposal to incubation and graduating to an active state. Projects can also be
    deprecated or in end-of-life state where they are no longer actively developed.
    For a project to be able to move into the incubation stage, it must have a fully
    working code base along with an active community of developers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger 旗下的项目经历了从提案到孵化再到转入活跃状态的各个阶段。项目也可能被弃用或处于生命周期结束状态，不再积极开发。要使项目能够进入孵化阶段，必须具有完全可工作的代码库以及活跃的开发人员社区。
- en: Projects under Hyperledger
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger 旗下的项目
- en: There are two categories of projects under Hyperledger. The first is **blockchain
    projects** and the second category is **relevant tools or modules that support
    these blockchains**.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger 旗下有两类项目。第一类是 **区块链项目**，第二类是 **支持这些区块链的相关工具或模块**。
- en: 'Currently, there are five blockchain framework projects under the Hyperledger
    umbrella: **Fabric**, **Sawtooth Lake**, **Iroha**, **Burrow**, and **Indy**.
    Under modules, there are the **Hyperledger Cello**, **Hyperledger Composer**,
    **Hyperledger Explorer**, and **Hyperledger Quilt**. The Hyperledger project currently
    has more than 200-member organizations and is very active with many contributors,
    with regular meet-ups and talks organized around the globe.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Hyperledger 旗下有五个区块链框架项目：**Fabric**、**Sawtooth Lake**、**Iroha**、**Burrow**
    和 **Indy**。在模块下，有 **Hyperledger Cello**、**Hyperledger Composer**、**Hyperledger
    Explorer** 和 **Hyperledger Quilt**。Hyperledger 项目目前拥有超过 200 个成员组织，非常活跃，有许多贡献者，并在全球范围内组织定期的见面会和讲座。
- en: A brief introduction of all these projects follows, after which we will see
    more details around the design, architecture, and implementation of Fabric and
    Sawtooth Lake.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来简要介绍所有这些项目，之后我们将看到有关 Fabric 和 Sawtooth Lake 的设计、架构和实施的更多详细信息。
- en: Fabric
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fabric
- en: The fabric is a blockchain project that was proposed by **IBM** and **DAH**
    (**Digital Asset Holdings**). This blockchain framework implementation is intended
    to provide a foundation for the development of blockchain solutions with a modular
    architecture. It is based on a pluggable architecture where various components,
    such as consensus engine and membership services, can be plugged into the system
    as required. It also makes use of container technology which is used to run smart
    contracts in an isolated contained environment. Currently, its status is *active*
    and it's the first project to graduate from incubation to active state.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric 是由 **IBM** 和 **DAH** (**Digital Asset Holdings**) 提出的一个区块链项目。该区块链框架实现旨在为具有模块化架构的区块链解决方案的开发提供基础。它基于可插拔架构，各种组件，如共识引擎和成员服务，可以根据需要插入系统。它还利用容器技术，在隔离的容器化环境中运行智能合约。目前，它的状态是
    *活跃*，是第一个从孵化阶段毕业到活跃状态的项目。
- en: The source code is available at [https://github.com/hyperledger/fabric](https://github.com/hyperledger/fabric).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可在 [https://github.com/hyperledger/fabric](https://github.com/hyperledger/fabric)
    获得。
- en: Sawtooth Lake
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锯齿湖
- en: The Sawtooth Lake is a blockchain project proposed by Intel in April 2016 with
    some key innovations focusing on the decoupling of ledgers from transactions,
    flexible usage across multiple business areas using transaction families, and
    pluggable consensus.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Sawtooth Lake 是由英特尔于 2016 年 4 月提出的一个区块链项目，它具有一些关键创新，重点是将分类账与交易解耦，使用交易家族在多个业务领域灵活使用，并提供可插拔的共识机制。
- en: Decoupling can be explained more precisely by saying that the transactions are
    decoupled from the consensus layer by making use of a new concept called **transaction
    families**. Instead of transactions being individually coupled with the ledger,
    transaction families are used, which allows for more flexibility, rich semantics,
    and open design of business logic. Transactions follow the patterns and structures
    defined in the transaction families.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 解耦可以更精确地解释为通过使用称为**事务族**的新概念将事务与共识层解耦。不再单独将事务与分类帐耦合，而是使用事务族，这允许更灵活、更丰富的语义和业务逻辑的开放设计。事务遵循事务族中定义的模式和结构。
- en: Some of the innovative elements Intel has introduced include a novel consensus
    algorithm abbreviated as **PoET**, **Proof of Elapsed Time**, which makes use
    of **Trusted Execution Environment** (**TEE**) provided by **Intel Software Guard
    Extensions** (**Intel's SGX**) to provide a safe and random leader election process.
    It also supports permissioned and permission-less setups.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔引入的一些创新元素包括一种名为**PoET**的新型共识算法，即**Proof of Elapsed Time**，它利用英特尔提供的**受信执行环境**（**TEE**）提供的**英特尔软件保护扩展**（**Intel's
    SGX**）来提供安全和随机的领导者选举过程。它还支持有权限和无权限的设置。
- en: This project is available at [https://github.com/hyperledger/sawtooth-core](https://github.com/hyperledger/sawtooth-core).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目可在 [https://github.com/hyperledger/sawtooth-core](https://github.com/hyperledger/sawtooth-core)
    上找到。
- en: Iroha
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Iroha
- en: Iroha was contributed by Soramitsu, Hitachi, NTT Data, and Colu in September
    2016\. Iroha is aiming to build a library of reusable components that users can
    choose to run on their own Hyperledger-based distributed ledgers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Iroha 由 Soramitsu、Hitachi、NTT Data 和 Colu 在 2016 年 9 月贡献。Iroha 的目标是构建一个可重复使用的组件库，用户可以选择在自己的基于
    Hyperledger 的分布式分类帐上运行。
- en: Iroha's primary goal is to complement other Hyperledger projects by providing
    reusable components written in C++ with an emphasis on mobile development. This
    project has also proposed a novel consensus algorithm called **Sumeragi**, which
    is a chain-based Byzantine fault tolerant consensus algorithm.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Iroha 的主要目标是通过提供用 C++ 编写的重复使用的组件，重点放在移动开发上，来补充其他 Hyperledger 项目。该项目还提出了一种称为**Sumeragi**的新型共识算法，这是一种基于链的拜占庭容错共识算法。
- en: Iroha is available at [https://github.com/hyperledger/iroha](https://github.com/hyperledger/iroha).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Iroha 可在 [https://github.com/hyperledger/iroha](https://github.com/hyperledger/iroha)
    上找到。
- en: Various libraries have been proposed and are being worked on by Iroha, including
    but not limited to a digital signature library (ed25519), a SHA-3 hashing library,
    a transaction serialization library, a P2P library, an API server library, an
    iOS library, an Android library, and a JavaScript library.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Iroha 已提出并正在研究各种库，包括但不限于数字签名库（ed25519）、SHA-3 哈希库、事务序列化库、P2P 库、API 服务器库、iOS 库、Android
    库和 JavaScript 库。
- en: Burrow
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Burrow
- en: This project is currently in the incubation state. Hyperledger Burrow was contributed
    by Monax, who develop blockchain development and deployment platforms for business.
    Hyperledger Burrow introduces a modular blockchain platform and an **Ethereum
    Virtual Machine** (**EVM**) based smart contract execution environment. Burrow
    uses proof of stake, Byzantine fault tolerant Tendermint consensus mechanism.
    As a result, Burrow provides high throughput and transaction finality.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目目前处于孵化状态。Hyperledger Burrow 由 Monax 贡献，他们为企业开发区块链开发和部署平台。Hyperledger Burrow
    引入了一个模块化的区块链平台和基于**以太坊虚拟机**（**EVM**）的智能合约执行环境。Burrow 使用权益证明、拜占庭容错 Tendermint 共识机制。因此，Burrow
    提供了高吞吐量和交易最终性。
- en: The source code is available at [https://github.com/hyperledger/burrow](https://github.com/hyperledger/burrow).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可在 [https://github.com/hyperledger/burrow](https://github.com/hyperledger/burrow)
    上找到。
- en: Indy
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Indy
- en: This project is under incubation under Hyperledger. Indy is a distributed ledger
    developed for building a decentralized identity. It provides tools, utility libraries,
    and modules which can be used to build blockchain-based digital identities. These
    identities can be used across multiple blockchains, domains, and applications.
    Indy has its own distributed ledger and uses **Redundant Byzantine Fault Tolerance**
    (**RBFT**) for consensus.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目正在 Hyperledger 的孵化过程中。Indy 是为构建去中心化身份而开发的分布式分类帐。它提供了用于构建基于区块链的数字身份的工具、实用库和模块。这些身份可以跨多个区块链、域和应用程序使用。Indy
    有自己的分布式分类帐，并使用**冗余拜占庭容错**（**RBFT**）进行共识。
- en: The source code is available at [https://github.com/hyperledger/indy-node](https://github.com/hyperledger/indy-node).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可在此处找到：[https://github.com/hyperledger/indy-node](https://github.com/hyperledger/indy-node)。
- en: Explorer
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Explorer
- en: This project aims to build a blockchain explorer for Hyperledger Fabric that
    can be used to view and query the transactions, blocks, and associated data from
    the blockchain. It also provides network information and the ability to interact
    with chain code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目旨在为 Hyperledger Fabric 构建一个区块链浏览器，可用于查看和查询来自区块链的交易、区块和相关数据。它还提供网络信息和与链码交互的能力。
- en: Currently, there are few other projects that are in incubation under Hyperledger.
    These projects are aimed to provide tools and utilities to support blockchain
    networks. These projects are introduced in the following section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，还有其他几个项目正在 Hyperledger 的孵化中。这些项目旨在提供支持区块链网络的工具和实用程序。这些项目将在接下来的章节中介绍。
- en: The source code is available at [https://github.com/hyperledger/blockchain-explorer](https://github.com/hyperledger/blockchain-explorer).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可在此处找到：[https://github.com/hyperledger/blockchain-explorer](https://github.com/hyperledger/blockchain-explorer)。
- en: Cello
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cello
- en: The aim behind Cello is to allow easy deployment of blockchains. This will provide
    an ability to allow "as a service" deployments of blockchain service. Currently,
    this project is in the incubation stage.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Cello 的目标是允许轻松部署区块链。这将提供一种能力，允许区块链服务的“即服务”部署。目前，该项目处于孵化阶段。
- en: The source code of Cello is available at [https://github.com/hyperledger/cello](https://github.com/hyperledger/cello).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Cello 的源代码可在此处找到：[https://github.com/hyperledger/cello](https://github.com/hyperledger/cello)。
- en: Composer
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Composer
- en: This utility makes the development of blockchain solutions easier by allowing
    business processes to be described in a business language, while abstracting away
    the low-level smart contract development details.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该实用工具使区块链解决方案的开发变得更加容易，它允许使用业务语言描述业务流程，同时将低级智能合约开发细节抽象化。
- en: Hyperledger composer is available at [https://hyperledger.github.io/composer/](https://hyperledger.github.io/composer/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[Hyperledger composer](https://hyperledger.github.io/composer/) 可在此处找到。'
- en: Quilt
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Quilt
- en: This utility implements the Interledger protocol, which facilitates interoperability
    across different distributed and non-distributed ledger networks.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 该实用工具实现了跨不同分布式和非分布式账本网络的互操作性的 Interledger 协议。
- en: Quilt is available at [https://github.com/hyperledger/quilt](https://github.com/hyperledger/quilt).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Quilt 可在此处找到：[https://github.com/hyperledger/quilt](https://github.com/hyperledger/quilt)。
- en: Currently, all the mentioned projects are in various stages of development.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，所有提及的项目都处于不同阶段的开发中。
- en: This list is expected to grow as more and more members are joining Hyperledger
    project and contributing to the development of blockchain technology. Now in the
    next section, we will see the reference architecture of Hyperledger, which provides
    general principles and design philosophy which can be followed to build new Hyperledger
    projects.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的成员加入 Hyperledger 项目并为区块链技术的发展做出贡献，此列表预计会不断增长。现在，在下一节中，我们将看到 Hyperledger
    的参考架构，该架构提供了可以遵循以构建新的 Hyperledger 项目的一般原则和设计理念。
- en: Hyperledger as a protocol
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超级账本协议
- en: Hyperledger is aiming to build new blockchain platforms that are driven by industry
    use cases. As there have been many contributions made to the Hyperledger project
    by the community, Hyperledger blockchain platform is evolving into a protocol
    for business transactions. Hyperledger is also evolving into a specification that
    can be used as a reference to build blockchain platforms as compared to earlier
    blockchain solutions that address only a specific type of industry or requirement.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本旨在构建由行业用例驱动的新区块链平台。由于社区对 Hyperledger 项目做出了许多贡献，因此 Hyperledger 区块链平台正在演变为一种用于业务交易的协议。Hyperledger
    还正在演变为可用作参考的规范，以构建区块链平台，与早期仅解决特定行业或需求的区块链解决方案相比。
- en: In the following section, a reference architecture is presented that has been
    published by the Hyperledger project. As this work is under continuous and rigorous
    development, some changes are expected in this, but core services are expected
    to remain unchanged.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍一个由 Hyperledger 项目发布的参考架构。由于这项工作正在不断而严格地发展，因此其中可能会有一些变化，但核心服务预计将保持不变。
- en: The reference architecture
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考架构
- en: Hyperledger has published a white paper which is available at [https://docs.google.com/document/d/1Z4M_qwILLRehPbVRUsJ3OF8Iir-gqS-ZYe7W-LE9gnE/edit#heading=h.m6iml6hqrnm2](https://docs.google.com/document/d/1Z4M_qwILLRehPbVRUsJ3OF8Iir-gqS-ZYe7W-LE9gnE/edit#heading=h.m6iml6hqrnm2).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger已经发表了一份白皮书，可在[https://docs.google.com/document/d/1Z4M_qwILLRehPbVRUsJ3OF8Iir-gqS-ZYe7W-LE9gnE/edit#heading=h.m6iml6hqrnm2](https://docs.google.com/document/d/1Z4M_qwILLRehPbVRUsJ3OF8Iir-gqS-ZYe7W-LE9gnE/edit#heading=h.m6iml6hqrnm2)获取。
- en: 'This document presents a reference architecture that can serve as a guideline
    to build permissioned distributed ledgers. The reference architecture consists
    of various components that form a business blockchain. These high-level components
    are shown in the reference architecture diagram shown here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本文提供了一个参考架构，可作为构建许可分布式分类账的指南。这个参考架构由形成业务区块链的各种组件组成。这些高级组件在以下这个参考架构图中显示：
- en: '![](img/e33420fd-cbc4-438a-b342-4eec50f34eea.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e33420fd-cbc4-438a-b342-4eec50f34eea.jpg)'
- en: 'Reference architecture - source: Hyperledger whitepaper'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 参考架构 - 来源：Hyperledger白皮书
- en: Starting from the left we see that we have five top-level components which provide
    various services. We will explore all these components in detail.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从左边开始，可以看到我们有五个顶层组件，它们提供各种服务。我们将详细探讨所有这些组件。
- en: First is identity, that provides authorization, identification, and authentication
    services under membership services.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是身份，它在成员服务下提供授权、识别和认证服务。
- en: Then is the policy component, which provides policy services.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接着是策略组件，它提供策略服务。
- en: After this, ledger and transactions come, which consists of the distributed
    ledger, ordering service, network protocols, and endorsement and validation services.
    This ledger is updateable only via consensus among the participants of the blockchain
    network.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 随后是分类账和交易，其中包括分布式分类账、排序服务、网络协议，以及认可和验证服务。分类账只能通过区块链网络参与者之间的共识来更新。
- en: Finally, we have the smart contracts layer, which provides chaincode services
    in Hyperledger and makes use of secure container technology to host smart contracts.
    We will see all these in more detail in the *Hyperledger Fabric* section shortly.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有智能合约层，它在Hyperledger中提供链码服务，并利用安全容器技术来托管智能合约。我们稍后将更详细地看到*Hyperledger Fabric*部分中的所有这些内容。
- en: 'Generally, from a components point of view Hyperledger contains various elements
    described here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，从组件的角度来看，Hyperledger包含了这里描述的各种元素：
- en: '**Consensus layer**: These services are responsible for facilitating the agreement
    process between the participants on the blockchain network. The consensus is required
    to make sure that the order and state of transactions is validated and agreed
    upon in the blockchain network.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共识层**：这些服务负责促进区块链网络参与者之间的协议达成过程。共识是必须的，以确保交易的顺序和状态在区块链网络中得到验证和达成一致。'
- en: '**Smart contract layer**: These services are responsible for implementing business
    logic as per the requirements of the users. Transaction are processed based on
    the logic defined in the smart contracts that reside on the blockchain.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**智能合约层**：这些服务负责根据用户的需求实现业务逻辑。交易是基于区块链上的智能合约中定义的逻辑来处理的。'
- en: '**Communication layer**: This layer is responsible for message transmission
    and exchange between the nodes on the blockchain network.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通信层**：这一层负责在区块链网络中的节点之间进行消息传输和交换。'
- en: '**Security and crypto layer**: These services are responsible for providing
    a capability to allow various cryptographic algorithms or modules to provide privacy,
    confidentiality and non-repudiations services.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全和加密层**：这些服务负责提供能力，允许使用各种加密算法或模块来提供隐私、保密和不可抵赖的服务。'
- en: '**Data stores**: This layer provides an ability to use different data stores
    for storing state of the ledger. This means that data stores are also pluggable
    and allows usage of any database backend.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据存储**：这一层提供了使用不同数据存储来存储分类账状态的能力。这意味着数据存储也是可插拔的，并允许使用任何数据库后端。'
- en: '**Policy services**: This set of services provide the ability to manage different
    policies required for the blockchain network. This includes endorsement policy
    and consensus policy.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**策略服务**：这组服务提供管理区块链网络所需的不同策略的能力。这包括认可策略和共识策略。'
- en: '**APIs and SDKs**: This layer allows clients and applications to interact with
    the blockchain. An SDK is used to provide mechanisms to deploy and execute chaincode,
    query blocks and monitor events on the blockchain.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**APIs和SDKs**：该层允许客户端和应用程序与区块链进行交互。SDK用于提供机制来部署和执行链码，查询区块并监视区块链上的事件。'
- en: There are certain requirements of a blockchain service. In the next section,
    we are going to discuss the design goals of Hyperledger Fabric.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链服务有一定的要求。在下一节中，我们将讨论Hyperledger Fabric的设计目标。
- en: Requirements and design goals of Hyperledger Fabric
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger Fabric的需求和设计目标
- en: There are certain requirements of a blockchain service. The reference architecture
    is driven by the needs and requirements raised by the participants of the Hyperledger
    project and after studying the industry use cases. There are several categories
    of requirements that have been deduced from the study of industrial use cases
    and are discussed in the following sections.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链服务有一定的要求。参考架构是由Hyperledger项目的参与者提出的需求和要求驱动的，并在研究行业用例后进行了讨论。从对工业用例的研究中推导出了几类需求，这些需求将在以下部分进行讨论。
- en: The modular approach
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块化方法
- en: The main requirement of Hyperledger is a modular structure. It is expected that
    as a cross-industry fabric (blockchain), it will be used in many business scenarios.
    As such, functions related to storage, policy, chaincode, access control, consensus,
    and many other blockchain services should be modular and pluggable. The specification
    suggests that the modules should be plug and play and users should be able to
    easily remove and add a different module that meets the requirements of the business.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger的主要要求是模块化结构。预计作为跨行业面料（区块链），它将在许多业务场景中使用。因此，与存储、策略、链码、访问控制、共识等其他区块链服务相关的功能应该是模块化和可插拔的。规范建议模块应该是即插即用的，用户应该能够轻松地移除和添加满足业务需求的不同模块。
- en: Privacy and confidentiality
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐私和保密性
- en: This requirement is one of the most critical factors. As traditional blockchains
    are permissionless, in the permissioned model like Hyperledger Fabric, it is of
    utmost importance that transactions on the network are visible to only those who
    are allowed to view it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此需求是最关键的因素之一。传统的区块链是无许可的，而在Hyperledger Fabric这样的许可模型中，网络上的交易对于只有被允许查看的人可见非常重要。
- en: Privacy and confidentiality of transactions and contracts are of absolute importance
    in a business blockchain. As such, Hyperledger's vision is to provide support
    for a full range of cryptographic protocols and algorithms. We discussed cryptography
    in [Chapter 5](5e44a805-fb66-4135-b59e-4e03367aaed5.xhtml), *Symmetric Cryptography*
    and [Chapter 6](c49f1747-2096-4ab6-a1e1-334e092ef2be.xhtml), *Public Key Cryptography*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在业务区块链中，交易和合同的隐私和保密性至关重要。因此，Hyperledger的愿景是支持全面的加密协议和算法。我们在[第5章](5e44a805-fb66-4135-b59e-4e03367aaed5.xhtml)和[第6章](c49f1747-2096-4ab6-a1e1-334e092ef2be.xhtml)中讨论了密码学，*对称密码学*和*公钥密码学*。
- en: It is expected that users will be able to choose appropriate modules according
    to their business requirements. For example, if a business blockchain needs to
    be run only between already trusted parties and performs very basic business operations,
    then perhaps there is no need to have advanced cryptographic support for confidentiality
    and privacy. Therefore, users should be able to remove that functionality (module)
    or replace that with a more appropriate module that suits their needs.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 预计用户将能够根据其业务需求选择适当的模块。例如，如果业务区块链只需要在已经信任的各方之间运行并执行非常基本的业务操作，则可能无需为保密性和隐私提供先进的加密支持。因此，用户应该能够移除该功能（模块）或将其替换为更合适的模块以满足其需求。
- en: Similarly, if users need to run a cross-industry blockchain, then confidentiality
    and privacy can be of paramount importance. In this case, users should be able
    to plug an advanced cryptographic and access control mechanism (module) into the
    blockchain (fabric), which can even allow usage of **hardware of security modules**
    (**HSMs**).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果用户需要运行跨行业区块链，则保密性和隐私可能非常重要。在这种情况下，用户应该能够将先进的加密和访问控制机制（模块）插入到区块链（面料）中，甚至可以允许使用**安全模块的硬件**（HSMs）。
- en: Also, the blockchain should be able to handle sophisticated cryptographic algorithms
    without compromising performance. In addition to the previously mentioned scenarios,
    due to regulatory requirements in business, there should also be a provision to
    allow implementation of privacy and confidentiality policies in conformance with
    regulatory and compliance requirements.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，区块链应能够处理复杂的加密算法，而不会影响性能。除了上述场景外，由于业务中的监管要求，还应该能够按照监管和合规要求的隐私和保密政策来执行。
- en: Scalability
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可扩展性
- en: This is another major requirement which once met will allow reasonable transaction
    throughput, which will be sufficient for all business requirements and also a
    large number of users.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个重要的需求，一旦满足，将允许合理的交易吞吐量，这将足以满足所有业务需求，也足够为大量用户提供服务。
- en: Deterministic transactions
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定性交易
- en: This is a core requirement in any blockchain because if transactions do not
    produce the same result every time they are executed regardless of who and where
    the transaction is executed, then achieving consensus is impossible. Therefore,
    deterministic transactions become a key requirement in any blockchain network.
    We discussed these concepts in [Chapter 4](12eebfe5-f775-4550-a8df-d9578dd08980.xhtml),
    *Smart Contracts*.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是任何区块链的核心需求，因为如果交易无论何时执行产生相同的结果，无论交易由谁在何处执行，共识都是不可能实现的。因此，在任何区块链网络中，确定性交易成为关键要求。我们在[第四章](12eebfe5-f775-4550-a8df-d9578dd08980.xhtml)
    *智能合同* 中讨论了这些概念。
- en: Identity
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份
- en: In order to provide privacy and confidentiality services, a flexible PKI model
    that can be used to handle the access control functionality is also required.
    The strength and type of cryptographic mechanisms is also expected to vary according
    to the needs and requirements of the users. In certain scenarios, it might be
    required for a user to hide their identity, and as such, the Hyperledger is expected
    to provide this functionality.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供隐私和保密服务，还需要一个灵活的PKI模型来处理访问控制功能。加密机制的强度和类型也预计会根据用户的需求和要求而变化。在某些场景中，可能需要用户隐藏他们的身份，因此，期望Hyperledger提供这一功能。
- en: Auditability
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审计性
- en: Auditability is another requirement of Hyperledger Fabric. It is expected that
    an immutable audit trail of all identities, related operations, and any changes
    is kept.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 审计性是Hyperledger Fabric的另一个需求。预期保留所有身份、相关操作和任何更改的不可变审计跟踪。
- en: Interoperability
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互操作性
- en: Currently, there are many blockchain platforms available, but they cannot communicate
    with each other and this can be a limiting factor in the growth of a blockchain-based
    global business ecosystem. It is envisaged that many blockchain networks will
    operate in the business world for specific needs, but it is important that they
    are able to communicate with each other. There should be a common set of standards
    that all blockchains can follow in order to allow communication between different
    ledgers. It is expected that a protocol will be developed that will allow the
    exchange of information between many fabrics.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有许多可用的区块链平台，但它们之间无法进行通信，这可能限制了区块链全球业务生态系统的发展。预计许多区块链网络将在业务世界中为特定需求而运行，但它们能够相互通信非常重要。应该有一套所有区块链都可以遵循的共同标准，以便允许不同分类账之间的通信。预计将开发一个协议，允许在多个链之间交换信息。
- en: Portability
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可移植性
- en: The portability requirement is concerned with the ability to run across multiple
    platforms and environments without the need to change anything at code level.
    Hyperledger Fabric is envisaged to be portable, not only at infrastructure level
    but also at code, libraries, and API levels, so that it can support uniform development
    across various implementations of Hyperledger.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 可移植性要求关注的是在不需要在代码级别更改任何内容的情况下能够在多个平台和环境中运行。预期Hyperledger Fabric在基础设施级别以及代码、库和API级别都是可移植的，这样可以支持在各种Hyperledger实现中进行统一开发。
- en: Rich data queries
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 丰富的数据查询
- en: The blockchain network should allow rich queries to be run on the network. This
    can be used to query the current state of the ledger using traditional query languages,
    which will allow for wider adoption and ease of use.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链网络应允许在网络上运行丰富的查询。这可以用于使用传统查询语言查询总账的当前状态，从而实现更广泛的采用和使用便利。
- en: All aforementioned points describe the requirements, which need to be met to
    develop blockchain solutions that are in line with the Hyperledger design philosophy.
    In the next section, we will have a look at Hyperledger Fabric, which is the first
    project to graduate to active status under Hyperledger.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述点描述了开发符合 Hyperledger 设计理念的区块链解决方案所需满足的要求。在接下来的部分中，我们将看一下 Hyperledger Fabric，这是首个在
    Hyperledger 下获得活跃状态的项目。
- en: Fabric
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fabric
- en: To understand various projects that are under development in the Hyperledger
    project, it is essential to understand the foundations of Hyperledger first. A
    few terminologies that are specific to Hyperledger need some clarification before
    readers are introduced to the more in-depth material.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 Hyperledger 项目中正在开发的各种项目，首先需要了解 Hyperledger 的基础知识是很重要的。在向读者介绍更深入的材料之前，需要对一些特定于
    Hyperledger 的术语进行一些澄清。
- en: First, there is the concept of fabric. Fabric can be defined as a collection
    of components providing a foundation layer that can be used to deliver a blockchain
    network. There are various types and capabilities of a fabric network, but all
    fabrics share common attributes such as immutability and are consensus-driven.
    Some fabrics can provide a modular approach towards building blockchain networks.
    In this case, the blockchain network can have multiple pluggable modules to perform
    a various function on the network.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，有一个“fabric”的概念。Fabric 可以定义为提供基础层的组件集合，可用于交付区块链网络。Fabric 网络有各种类型和功能，但所有 fabric
    都共享诸如不可变性和共识驱动等共同属性。一些 fabric 可以提供一种模块化方法来构建区块链网络。在这种情况下，区块链网络可以具有多个可插拔模块，用于在网络上执行各种功能。
- en: For example, consensus algorithms can be a pluggable module in a blockchain
    network where, depending on the requirements of the network, an appropriate consensus
    algorithm can be chosen and plugged into the network. The modules can be based
    on some particular specification of the fabric and can include APIs, access control,
    and various other components.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，共识算法可以是区块链网络中的可插拔模块，根据网络的要求，可以选择适当的共识算法并将其插入网络中。这些模块可以基于 fabric 的某些特定规范，并且可以包括
    API、访问控制和各种其他组件。
- en: Fabrics can also be designed either to be private or public and can allow the
    creation of multiple business networks. As an example, Bitcoin is an application
    that runs on top of its fabric (blockchain network). As discussed earlier in [Chapter
    1](76e4e401-30ba-44f9-832f-333ba6c12cbc.xhtml), *Blockchain 101*, blockchain can
    either be permissioned or permission-less. However, the aim of Hyperledger Fabric
    is to develop a permissioned distributed ledger.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric 也可以设计为私有或公开的，并且可以允许创建多个业务网络。例如，比特币就是在其 fabric（区块链网络）上运行的应用程序。正如前文[第一章](76e4e401-30ba-44f9-832f-333ba6c12cbc.xhtml)讨论的那样，*区块链
    101*，区块链可以是许可的或无许可的。然而，Hyperledger Fabric 的目标是开发一个许可的分布式分类账。
- en: Fabric is also the name given to the code contribution made by IBM to the Hyperledger
    foundation and is formally called Hyperledger Fabric. IBM also offers blockchain
    as a service (IBM Blockchain) via its *IBM Cloud service*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric 也是 IBM 向 Hyperledger 基金会提供的代码贡献的名称，正式称为 Hyperledger Fabric。IBM 还通过其*IBM
    云服务*提供区块链即服务（IBM Blockchain）。
- en: It is available at [https://www.ibm.com/cloud/](https://www.ibm.com/cloud/).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以在[https://www.ibm.com/cloud/](https://www.ibm.com/cloud/)找到。
- en: Now let's have a detailed look at Hyperledger Fabric.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们详细看一下 Hyperledger Fabric。
- en: Hyperledger Fabric
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger Fabric
- en: The fabric is the contribution made initially by IBM and Digital Assets to the
    Hyperledger project. This contribution aims to enable a modular, open, and flexible
    approach towards building blockchain networks.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架最初是由 IBM 和 Digital Assets 对 Hyperledger 项目的贡献。这一贡献旨在实现一种模块化、开放和灵活的方法，用于构建区块链网络。
- en: Various functions in the fabric are pluggable, and it also allows the use of
    any language to develop smart contracts. This functionality is possible because
    it is based on container technology (Docker), which can host any language.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric 中的各种功能都是可插拔的，并且它还允许使用任何语言来开发智能合约。这种功能是可能的，因为它基于容器技术（Docker），可以托管任何语言。
- en: Chaincode is sandboxed in a secure container, which includes a secure operating
    system, chaincode language, runtime environment, and SDKs for Go, Java, and Node.js.
    Other languages can be supported too in future, if required, but needs some development
    work. Smart contracts are called chaincode in the fabric. This ability is a compelling
    feature compared to domain-specific languages in Ethereum, or the limited scripted
    language in Bitcoin. It is a permissioned network that aims to address issues
    such as scalability, privacy, and confidentiality. The fundamental idea behind
    this is modularization, which would allow for flexibility in design and implementation
    of the business blockchain. This can then result in achieving scalability, privacy,
    and other desired attributes and fine tune them according to the requirements.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Chaincode 在安全容器中进行沙盒化处理，其中包括安全操作系统、chaincode 语言、运行时环境以及用于 Go、Java 和 Node.js
    的 SDK。如果需要，将来还可以支持其他语言，但需要进行一些开发工作。智能合约在 Fabric 中被称为 chaincode。与以太坊中的领域特定语言或比特币中的有限脚本语言相比，这种能力是一个引人注目的特性。这是一个有权限的网络，旨在解决可扩展性、隐私和机密性等问题。其背后的基本思想是模块化，这将允许在业务区块链的设计和实现中灵活性。这样可以实现可扩展性、隐私和其他所需特性，并根据要求对其进行微调。
- en: Transactions in the fabric are private, confidential, and anonymous for general
    users, but they can still be traced and linked to the users by authorized auditors.
    As a permissioned network, all participants are required to be registered with
    the membership services to access the blockchain network. This ledger also provided
    auditability functionality to meet the regulatory and compliance needs required
    by the user.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric 中的交易对于普通用户是私有的、保密的和匿名的，但它们仍然可以被授权的审计员追踪和与用户关联。作为一个有权限的网络，所有参与者都需要在成员服务中注册才能访问区块链网络。此分类帐还提供了审计功能，以满足用户所需的监管和合规性需求。
- en: Membership services
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成员服务
- en: 'These services are used to provide access control capability for the users
    of the fabric network. The following list shows the functions that membership
    services perform:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务用于为 Fabric 网络的用户提供访问控制功能。以下列出了成员服务执行的功能：
- en: User identity verification
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户身份验证
- en: User registration
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户注册
- en: Assign appropriate permissions to the users depending on their roles
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据用户角色分配适当的权限
- en: Membership services make use of **a certificate authority** in order to support
    identity management and authorization operations. This CA can be internal (Fabric
    CA), which is a default interface in Hyperledger Fabric or organization can opt
    to use an external certificate authority. Fabric CA issues **enrollment certificates**
    (**E-Certs**), which are produced by **enrollment certificate authority** (**E-CA**).
    Once peers are issued with an identity, they are allowed to join the blockchain
    network. There are also temporary certificates issued called T-Certs, which are
    used for one-time transactions.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 成员服务利用**证书机构**来支持身份管理和授权操作。这个 CA 可以是内部的（Fabric CA），它是 Hyperledger Fabric 中的默认接口，或者组织可以选择使用外部证书机构。Fabric
    CA 发布**注册证书**（**E-Certs**），这些证书由**注册证书机构**（**E-CA**）生成。一旦对等体被授予身份，它们就被允许加入区块链网络。还有临时证书称为
    T-Certs，用于一次性交易。
- en: All peers and applications are identified using certificate authority. Authentication
    service is provided by the certificate authority. MSPs can also interface with
    existing identity services like LDAP.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 所有对等体和应用程序都使用证书机构进行识别。证书机构提供认证服务。MSP 还可以与现有的身份服务（如 LDAP）进行接口。
- en: Blockchain services
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块链服务
- en: Blockchain services are at the core of the Hyperledger Fabric. Components within
    this category are as follows.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链服务是 Hyperledger Fabric 的核心。此类别中的组件如下。
- en: Consensus services
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共识服务
- en: A consensus service is responsible for providing the interface to the consensus
    mechanism. This serves as a module that is pluggable and receives the transaction
    from other Hyperledger entities and executes them under criteria according to
    the type of mechanism chosen.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 共识服务负责提供与共识机制的接口。这充当了一个可插拔的模块，接收来自其他 Hyperledger 实体的交易，并根据选择的机制类型执行它们的标准。
- en: 'Consensus in Hyperledger V1 is implemented as a peer called **orderer**, which
    is responsible for ordering the transactions in sequence into a block. Orderer
    does not hold smart contracts or ledgers. Consensus is pluggable and currently,
    there are two types of ordering services available in Hyperledger Fabric:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger V1 中的共识是作为一个称为**订购者**的节点实现的，负责将交易按顺序组成一个区块。订购者不持有智能合约或账本。共识是可插拔的，目前
    Hyperledger Fabric 中有两种类型的排序服务可用：
- en: '**SOLO**: This is a basic ordering service intended to be used for development
    and testing purposes.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SOLO**：这是一个基本的排序服务，用于开发和测试目的。'
- en: '**Kafka**: This is an implementation of Apache Kafka, which provides ordering
    service. It should be noted that currently Kafka only provides crash fault tolerance
    but does not provide byzantine fault tolerance. This is acceptable in a permissioned
    network where chances of malicious actors are almost none.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kafka**：这是 Apache Kafka 的一种实现，提供排序服务。需要注意的是，目前 Kafka 只提供了崩溃容错性，但并没有提供拜占庭容错性。这在准许网络中是可以接受的，因为恶意行为的可能性几乎为零。'
- en: In addition to these mechanisms, the **Simple Byzantine Fault Tolerance** (**SBFT**)
    based mechanism is also under development, which will become available in the
    later releases of Hyperledger Fabric.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些机制之外，基于**简单拜占庭容错**（**SBFT**）的机制也正在开发中，将在后续版本的 Hyperledger Fabric 中提供。
- en: Distributed ledger
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式账本
- en: Blockchain and world state are two main elements of the distributed ledger.
    Blockchain is simply a cryptographically linked list of blocks (as introduced
    in [Chapter 1](76e4e401-30ba-44f9-832f-333ba6c12cbc.xhtml), *Blockchain 101*)
    and world state is a key-value database. This database is used by smart contracts
    to store relevant states during execution by the transactions. The blockchain
    consists of blocks that contain transactions. These transactions contain chaincode,
    which runs transactions that can result in updating the world state. Each node
    saves the world state on disk in LevelDB or CouchDB depending on the implementation.
    As Fabric allows pluggable data store, you can choose any data store for storage.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链和世界状态是分布式账本的两个主要元素。区块链简单来说是一个由区块构成的加密链接列表（如[第一章](76e4e401-30ba-44f9-832f-333ba6c12cbc.xhtml)介绍的，*区块链
    101*），而世界状态是一个键值数据库。这个数据库被智能合约用来在执行过程中存储相关状态。区块链由包含交易的区块组成。这些交易包含链码，运行这些交易可以导致更新世界状态。每个节点将世界状态保存在硬盘上，使用的是
    LevelDB 或 CouchDB，具体取决于实现。由于 Fabric 允许可插拔的数据存储，你可以选择任何数据存储方式进行存储。
- en: A block consists of three main components called Block header, Transactions
    (Data) and block metadata.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 区块由三个主要组件组成，称为区块头、交易（数据）和区块元数据。
- en: 'The following diagram shows a typical block in the Hyperledger Fabric 1.0 with
    the relevant fields:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了 Hyperledger Fabric 1.0 中典型区块的相关字段：
- en: '![](img/3ed05257-7915-4eeb-a12f-b59d391c7754.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ed05257-7915-4eeb-a12f-b59d391c7754.png)'
- en: Block structure
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 区块结构
- en: '**Block Header** consists of three fields, namely Number, Previous hash, and
    Data hash.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**区块头** 包括三个字段，即编号、前一个哈希和数据哈希。'
- en: '**Transaction** is made up of multiple fields such as transaction type, version,
    timestamp, channel ID, transaction ID, epoch, payload visibility, chaincode path,
    chaincode name, chaincode version, creator identity, signature, chaincode type,
    input, timeout, endorser identities and signatures, proposal hash, chaincode events,
    response status, namespace, read set, write set, start key, end key, list of read,
    and Merkle tree query summary.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**交易** 由多个字段组成，例如交易类型、版本、时间戳、通道 ID、交易 ID、时代、有效载荷可见性、链码路径、链码名称、链码版本、创建者身份、签名、链码类型、输入、超时、背书者身份和签名、建议哈希、链码事件、响应状态、命名空间、读集、写集、起始键、结束键、读取列表和
    Merkle 树查询摘要。'
- en: '**Block Metadata** consists of creator identity, relevant signatures, last
    configuration block number, flag for each transaction included in the block, and
    last offset persisted (kafka).'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**区块元数据** 包括创建者身份、相关签名、最后配置区块编号、每个包含在区块中的交易的标志，以及最后持久化的偏移量（kafka）。'
- en: The peer to peer protocol
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点对点协议
- en: The P2P protocol in the Hyperledger Fabric is built using **google RPC** (**gRPC**).
    It uses protocol buffers to define the structure of the messages.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric 中的 P2P 协议是使用 **Google RPC**（**gRPC**）构建的。它使用协议缓冲区来定义消息的结构。
- en: 'Messages are passed between nodes in order to perform various functions. There
    are four main types of messages in Hyperledger Fabric: **discovery**, **transaction**,
    **synchronization**, and **consensus**. Discovery messages are exchanged between
    nodes when starting up in order to discover other peers on the network. Transaction
    messages are used to deploy, invoke, and query transactions, and consensus messages
    are exchanged during consensus. Synchronization messages are passed between nodes
    to synchronize and keep the blockchain updated on all nodes.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 节点之间传递消息以执行各种功能。Hyperledger Fabric 中有四种主要类型的消息：**发现**、**交易**、**同步** 和 **共识**。发现消息在启动时在节点之间交换，以发现网络上的其他对等节点。交易消息用于部署、调用和查询交易，共识消息在共识期间交换。同步消息在节点之间传递以保持区块链在所有节点上同步更新。
- en: Ledger storage
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分类账存储
- en: In order to save the state of the ledger, by default, LevelDB is used which
    is available at each peer. An alternative is to use CouchDB which provides the
    ability to run rich queries.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保存分类账的状态，默认情况下使用 LevelDB，该数据库在每个对等节点上都可用。另一种选择是使用 CouchDB，它提供了运行丰富查询的能力。
- en: Chaincode services
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chaincode 服务
- en: 'These services allow the creation of secure containers that are used to execute
    the chaincode. Components in this category are as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务允许创建用于执行链码的安全容器。此类别中的组件如下：
- en: '![](img/c79da003-2239-46db-bf53-6a9084d272b2.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c79da003-2239-46db-bf53-6a9084d272b2.png)'
- en: '**Secure container**: Chaincode is deployed in Docker containers that provide
    a locked down sandboxed environment for smart contract execution. Currently, Golang
    is supported as the main smart contract language, but any other mainstream languages
    can be added and enabled if required.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全容器**：Chaincode 部署在提供锁定的沙箱环境以供智能合约执行的 Docker 容器中。目前，Golang 被支持为主要的智能合约语言，但如果需要，可以添加和启用任何其他主流语言。'
- en: '**Secure registry:** This provides a record of all images containing smart
    contracts.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全注册表：** 这提供了包含智能合约的所有映像的记录。'
- en: '**Events**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件**'
- en: Events on the blockchain can be triggered by endorsers and smart contracts.
    External applications can listen to these events and react to them if required
    via event adapters.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链上的事件可以由背书者和智能合约触发。外部应用程序可以通过事件适配器监听这些事件，并在需要时做出反应。
- en: '**APIs and CLIs**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**API 和 CLI**'
- en: An application programming interface provides an interface into the fabric by
    exposing various REST APIs. Additionally, command-line interfaces that provide
    a subset of REST APIs and allow for quick testing and limited interaction with
    the blockchain are also available.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序编程接口通过公开各种 REST API 提供了与织物的接口。此外，还提供了提供一组 REST API 子集并允许快速测试和与区块链有限交互的命令行界面。
- en: Components of the fabric
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组成部分的织物
- en: There are various components that can be part of the Hyperledger Fabric blockchain.
    These components include but are not limited to the ledger, chaincode, consensus
    mechanism, access control, events, system monitoring and management, wallets,
    and system integration components.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种各样的组件可以成为 Hyperledger Fabric 区块链的一部分。这些组件包括但不限于分类账、链码、共识机制、访问控制、事件、系统监控和管理、钱包以及系统集成组件。
- en: Peers
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对等节点
- en: 'Peers participate in maintaining the state of the distributed ledger. They
    also hold a local copy of the distributed ledger. Peers communicate via gossip
    protocol. There are three types of peers in the Hyperledger Fabric network:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对等节点参与维护分布式分类账的状态。它们还持有分布式分类账的本地副本。对等节点通过八卦协议进行通信。在 Hyperledger Fabric 网络中有三种类型的对等节点：
- en: '**Endorsing peers** or endorsers which simulate the transaction execution and
    generate a read-write set. Read is a simulation of transaction''s reading of data
    from the ledger and write is the set of updates that would be made to the ledger
    if and when the transaction is executed and committed to the ledger. Endorses
    execute and endorse transactions. It should be noted that an endorser is also
    a committer too. Endorsement policies are implemented with chaincode and specify
    the rules for transaction endorsement.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**背书对等节点** 或背书者模拟交易执行并生成读写集。读取是模拟交易从分类账中读取数据，写入是在交易执行和提交到分类账时将要对分类账进行的更新集。背书者执行和背书交易。值得注意的是，背书者也是提交者。背书策略是用链码实现的，并指定交易背书的规则。'
- en: '**Committing peers** or committers which receives transaction endorsed by endorsers,
    verify them and then update the ledger with the read-write set. A committer verifies
    the read-write set generated by the endorsers along with transaction validation.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交对等方**或提交者接收由背书者背书的交易，对其进行验证，然后使用读写集更新分类帐。提交者验证背书者生成的读写集以及交易验证。'
- en: '**Submitters** is the third type of peers which has not been implemented yet.
    It is on the development roadmap and will be implemented'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交者**是尚未实现的第三种类型的对等方。它在开发路线图上，并将被实现。'
- en: Orderer nodes
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 订购节点
- en: Ordering nodes receive transactions from endorsers along with read-write sets,
    arrange them in a sequence, and send those to committing peers. Committing peers
    then perform validation and committing to the ledger.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 订购节点从背书者那里接收交易以及读写集，将它们按顺序排列，并将其发送给提交对等方。提交对等方随后执行验证并将其提交到分类帐。
- en: All peers make use of certificates issued by membership services.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 所有对等方都使用成员服务发放的证书。
- en: Clients
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端
- en: Clients are software that makes use of APIs to interact with the Hyperledger
    Fabric and propose transactions.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端是利用 API 与 Hyperledger Fabric 进行交互并提出交易的软件。
- en: Channels
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通道
- en: Channels allow the flow of confidential transactions between different parties
    on the network. They allow using the same blockchain network but with separate
    blockchains. Channels allow only members of the channel to view the transaction
    related to them, all other members of the network will not be able to view the
    transactions.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 通道允许网络上不同方之间的保密交易流动。它们允许在相同的区块链网络中使用不同的区块链。通道只允许通道成员查看与他们相关的交易，网络的所有其他成员将无法查看这些交易。
- en: World state database
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 世界状态数据库
- en: World state reflects all committed transaction on the blockchain. This is basically
    a key-value store which is updated as a result of transactions and chaincode execution.
    For this purpose, either LevelDB or CouchDB is used. LevelDB is a key-value store
    whereas CouchDB stores data as JSON objects which allows rich queries to run against
    the database.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 世界状态反映了区块链上所有已提交的交易。这基本上是一个键值存储，随着交易和链码执行的结果而更新。为此，通常使用 LevelDB 或 CouchDB。LevelDB
    是一个键值存储，而 CouchDB 将数据存储为 JSON 对象，允许对数据库运行丰富的查询。
- en: Transactions
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易
- en: 'Transaction messages can be divided into two types: **deployment transactions**
    and **invocation transactions**. The former is used to deploy new chaincode to
    the ledger, and the latter is used to call functions from the smart contract.
    Transactions can be either public or confidential. Public transactions are open
    and available to all participants whilst confidential transactions are visible
    only in a channel open to its participants.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 交易消息可分为两种类型：**部署交易**和**调用交易**。前者用于将新的链码部署到分类帐上，而后者用于从智能合约调用函数。交易可以是公开的或保密的。公开交易对所有参与者开放并可用，而保密交易仅在对其参与者开放的频道中可见。
- en: Membership Service Provider (MSP)
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成员服务提供商（MSP）
- en: MSP is a modular component that is used to manage identities on the blockchain
    network. This provider is used to authenticate clients who want to join the blockchain
    network. We have discussed certificate authority is some detail earlier in this
    chapter. CA is used in MSP to provide identity verification and binding service.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: MSP 是用于管理区块链网络上身份的模块化组件。此提供程序用于验证想要加入区块链网络的客户端的身份。我们在本章前面已经详细讨论了证书颁发机构。CA 在
    MSP 中用于提供身份验证和绑定服务。
- en: Smart contracts
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能合约
- en: We discussed smart contracts in good detail in [Chapter 4](12eebfe5-f775-4550-a8df-d9578dd08980.xhtml),
    *Smart Contracts*. In Hyperledger Fabric same concept of smart contracts is implemented
    but they are called chain code instead of smart contracts. They contain conditions
    and parameters to execute transactions and update the ledger. Chaincode is usually
    written in Golang and Java.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第 4 章](12eebfe5-f775-4550-a8df-d9578dd08980.xhtml)中详细讨论了智能合约，*智能合约*。在 Hyperledger
    Fabric 中，实现了相同的智能合约概念，但称为链代码而不是智能合约。它们包含条件和参数以执行交易并更新分类帐。链代码通常用 Golang 和 Java
    编写。
- en: Crypto service provider
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密服务提供商
- en: As the name suggests this is a service that provides cryptographic algorithms
    and standards for usage in the blockchain network. This service provides key management,
    signature and verification operations, and encryption-decryption mechanisms. This
    service is used with the membership service to provide support for cryptographic
    operations for elements of blockchain such as endorsers, clients, and other nodes
    and peers.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，这是一个提供加密算法和标准以供区块链网络使用的服务。此服务提供密钥管理、签名和验证操作以及加密解密机制。此服务与成员服务一起使用，为区块链的元素（如认可者、客户端和其他节点和对等体）提供加密操作支持。
- en: After this introduction to this component of Hyperledger Fabric, in the next
    section, we will see what an application looks like when on a Hyperledger network.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了 Hyperledger Fabric 的这个组件之后，在下一节中，我们将看到在 Hyperledger 网络上运行的应用程序是什么样子的。
- en: Applications on blockchain
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块链上的应用程序
- en: 'A typical application on Fabric is simply composed of a user interface, usually
    written in JavaScript/HTML, that interacts with the backend chaincode (smart contract)
    stored on the ledger via an API layer:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric 上的典型应用程序通常仅由一个用户界面组成，通常使用 JavaScript/HTML 编写，该用户界面通过 API 层与存储在账本上的后端链码（智能合约）进行交互：
- en: '![](img/13ff6419-cbdc-45f7-b5bc-2afcbbd63f75.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13ff6419-cbdc-45f7-b5bc-2afcbbd63f75.png)'
- en: A typical Fabric application
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的 Fabric 应用程序
- en: Hyperledger provides various APIs and command-line interfaces to enable interaction
    with the ledger. These APIs include interfaces for identity, transactions, chaincode,
    ledger, network, storage, and events.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger 提供了各种 API 和命令行接口，以实现与账本的交互。这些 API 包括身份、交易、链码、账本、网络、存储和事件接口。
- en: Chaincode implementation
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链码实现
- en: Chaincode is usually written in Golang or Java. Chaincode can be public (visible
    to all on the network), confidential, or access controlled. These code files serve
    as a smart contract that users can interact with via APIs. Users can call functions
    in the chaincode that result in a state change, and consequently updates the ledger.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 链码通常是用 Golang 或 Java 编写的。链码可以是公共的（在网络上对所有人可见）、机密的或受访控制的。这些代码文件充当了用户可以通过 API
    与之交互的智能合约。用户可以调用链码中的函数来导致状态更改，从而更新账本。
- en: There are also functions that are only used to query the ledger and do not result
    in any state change. Chaincode implementation is performed by first creating the
    chaincode shim interface in the code. Shim provides APIs for accessing state variables
    and transaction context of chain code. It can either be in Java or Golang code.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些仅用于查询账本且不会导致任何状态更改的函数。链码实现是通过首先在代码中创建链码 shim 接口来完成的。Shim 提供了用于访问链码的状态变量和事务上下文的
    API。它可以是 Java 或 Golang 代码。
- en: 'The following four functions are required in order to implement the chaincode:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现链码，需要以下四个函数：
- en: '`Init()`: This function is invoked when chaincode is deployed onto the ledger.
    This initializes the chaincode and results in making a state change, which accordingly
    updates the ledger.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Init()`: 当链码部署到账本上时，将调用此函数。这会初始化链码并导致状态更改，相应地更新账本。'
- en: '`Invoke()`: This function is used when contracts are executed. It takes a function
    name as parameters along with an array of arguments. This function results in
    a state change and writes to the ledger.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Invoke()`: 当执行合约时使用此函数。它将一个函数名称和参数数组作为参数。此函数会导致状态更改并写入账本。'
- en: '`Query()`: This function is used to query the current state of a deployed chaincode.
    This function does not make any changes to the ledger.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Query()`: 此函数用于查询已部署链码的当前状态。此函数不会对账本进行任何更改。'
- en: '`4()`**:** This function is executed when a peer deploys its own copy of the
    chaincode. The chaincode is registered with the peer using this function.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4()`**:** 当对等体部署自己的链码副本时执行此函数。使用此函数向对等体注册链码。'
- en: The following diagram illustrates the general overview of Hyperledger Fabric,
    note that peers cluster at the top includes all types of nodes such as endorsers,
    committers, Orderers, and so on.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示了 Hyperledger Fabric 的一般概述，请注意，顶部的对等体集群包括各种类型的节点，如认可者、提交者、Orderers 等。
- en: '![](img/502f40d5-83b4-4493-a8e9-6ce824b44ba8.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/502f40d5-83b4-4493-a8e9-6ce824b44ba8.png)'
- en: A high-level overview of Hyperledger Fabric
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric 的高层概述
- en: The preceding diagram shows that peers shown at the top middle communicate with
    each and each node has a copy of blockchain. On the top-right corner, the membership
    services are shown which validate and authenticate peers on the network by using
    a **certificate authority** (**CA**). At the bottom of the image, a magnified
    view of blockchain is shown where by existing systems can produce events for the
    blockchain and also can listen for the blockchain events, which then can optionally
    trigger an action. At the bottom right-hand side, a user's interaction is shown
    with the application which talks to the smart contract via the `invoice()` method,
    and smart contracts can query or update the state of the blockchain.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表显示，位于顶部中间的对等体相互通信，每个节点都有区块链的副本。在图像的右上角，显示了成员服务，通过**证书颁发机构**（**CA**）对网络上的对等方进行验证和认证。在图像的底部，放大了区块链的视图，现有系统可以为区块链产生事件，也可以监听区块链的事件，然后可以选择性地触发操作。在图像的右下方，显示了用户与应用程序的交互，该应用程序通过`invoice()`方法与智能合约交互，并且智能合约可以查询或更新区块链的状态。
- en: The application model
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序模型
- en: 'Any blockchain application for Hyperledger Fabric follows the MVC-B architecture.
    This is based on the popular MVC design pattern. Components in this model are
    Model, View, Control, and Blockchain:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本 Fabric 的任何区块链应用程序都遵循 MVC-B 架构。这是基于流行的 MVC 设计模式。该模型中的组件包括模型、视图、控制和区块链：
- en: '**View logic**: This is concerned with the user interface. It can be a desktop,
    web application, or mobile frontend.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图逻辑**：与用户界面有关。可以是桌面、Web 应用程序或移动前端。'
- en: '**Control logic**: This is the orchestrator between the user interface, data
    model, and APIs.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制逻辑**：这是用户界面、数据模型和 API 之间的协调者。'
- en: '**Data model**: This model is used to manage the off-chain data.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据模型**：该模型用于管理链下数据。'
- en: '**Blockchain logic**: This is used to manage the blockchain via the controller
    and the data model via transactions.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区块链逻辑**：这用于通过控制器管理区块链和通过交易管理数据模型。'
- en: The IBM cloud service offers sample applications for blockchain under its blockchain
    as a service offering. It is available at [https://www.ibm.com/blockchain/platform/](https://www.ibm.com/blockchain/platform/). [This
    service allows users to create their own blockchain networks in an easy-to-use
    environment.](https://www.ibm.com/blockchain/platform/)
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: IBM 云服务提供区块链示例应用，作为其区块链即服务的一部分。该服务可在[https://www.ibm.com/blockchain/platform/](https://www.ibm.com/blockchain/platform/)获取。[该服务允许用户在易于使用的环境中创建自己的区块链网络](https://www.ibm.com/blockchain/platform/)。
- en: Consensus in Hyperledger Fabric
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超级账本 Fabric 中的共识
- en: 'The consensus mechanism in Hyperledger Fabric consists of three steps:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本 Fabric 中的共识机制包括三个步骤：
- en: '**Transaction endorsement**: This process endorses the transactions by simulating
    the transaction execution process.'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**交易认可**：这个过程通过模拟交易执行过程对交易进行认可。'
- en: '**Ordering**: This is a service provided by the cluster of orderers which takes
    endorsed transactions and decide on a sequence in which the transactions will
    be written to the ledger.'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**排序**：这是由订购者集群提供的服务，它接受认可的交易并决定交易将被写入分类帐的顺序。'
- en: '**Validation and commitment**: This process is executed by committing peers
    which first validates the transactions received from the orderers and then commit
    that transaction to the ledger.'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**验证和承诺**：这个过程由提交对等方执行，首先验证来自订购者的交易，然后将该交易提交到分类帐上。'
- en: 'These steps are shown in the following flowchart:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤在下面的流程图中显示：
- en: '![](img/bfa08f66-dc5e-49c1-9b55-dc7baa2bfded.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bfa08f66-dc5e-49c1-9b55-dc7baa2bfded.jpg)'
- en: The consensus flow
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 共识流程
- en: The transaction life cycle in Hyperledger Fabric
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超级账本 Fabric 中的交易生命周期
- en: There are several steps that are involved in a transaction flow in Hyperledger
    Fabric. These steps are shown in the following diagram below
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在超级账本 Fabric 中，交易流程涉及几个步骤。这些步骤在下面的图表中显示如下
- en: 'A quick summary of the process can be visualized in the following diagram:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 过程的快速概述可以在下面的图表中看到：
- en: '![](img/c7a1a70d-b05d-4c42-be94-bf099a30baa9.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7a1a70d-b05d-4c42-be94-bf099a30baa9.png)'
- en: The transaction life cycle
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 交易生命周期
- en: 'The steps are described below in detail:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是详细描述的步骤：
- en: Transaction proposal by clients. This is the first step where a transaction
    is proposed by the clients and sent to endorsing peers on the distributed ledger
    network. All clients need to be enrolled via membership services before they can
    propose transactions.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端提出交易建议。这是第一步，客户端提出交易并将其发送到分布式分类帐网络上的背书节点。所有客户端在提出交易之前都需要通过成员服务进行注册。
- en: The transaction is simulated by endorsers which generates a read-write (RW)
    set. This is achieved by executing the chaincode but instead of updating the ledger,
    only a read-write set depicting any reads or updates to the ledger is created.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 背书者模拟交易，生成读写（RW）集。这是通过执行链码来实现的，但是不是更新分类帐，而是仅创建一个读写集，其中包含对分类帐的任何读取或更新。
- en: The endorsed transaction is sent back to the application.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 背书的交易发送回应用程序。
- en: Submission of endorsed transactions and read-write (RW) sets to the ordering
    service by the application.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序将背书的交易和读写（RW）集提交给排序服务。
- en: The ordering service assembles all endorsed transactions and read-write sets
    in order into a block, and sorts them by channel ID.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 排序服务将所有背书交易和读写集按照通道ID排序，组装成一个区块。
- en: Ordering service broadcasts the assembled block to all committing peers.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 排序服务将组装好的区块广播给所有提交节点。
- en: Committing peers validate the transactions.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交节点验证交易。
- en: Committing peers update the ledger.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交节点更新分类帐。
- en: Finally, notification of success or failure of the transaction by committing
    peers is sent back to the clients/applications.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，提交节点向客户端/应用程序发送交易成功或失败的通知。
- en: 'The following diagram represents the above-mentioned steps and Fabric architecture
    from transaction flow point of view:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表代表了上述步骤和超级账本架构从交易流程的角度：
- en: '![](img/f80ff2d9-b1b3-4b43-b7f6-343fff8ef019.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f80ff2d9-b1b3-4b43-b7f6-343fff8ef019.png)'
- en: The transaction flow architecture
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 交易流程架构
- en: As seen in the preceding diagram, the first step is to propose transactions
    which a client does via an SDK. Before this, it is assumed that all clients and
    peers are registered with the Membership service provider.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，第一步是提出交易，客户端通过SDK执行此操作。在此之前，假设所有客户端和节点都已在成员服务提供商那里注册。
- en: With this topic, our introduction to Hyperledger Fabric is complete. In the
    next section, we will see another Hyperledger project named Sawtooth Lake.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个主题，我们对超级账本（Hyperledger Fabric）的介绍已经完成。在下一节中，我们将看到另一个名为Sawtooth Lake的超级账本项目。
- en: Sawtooth Lake
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sawtooth Lake
- en: 'Sawtooth Lake can run in both permissioned and non-permissioned modes. It is
    a distributed ledger that proposes two novel concepts: the first is the introduction
    of a new consensus algorithm called **Proof of Elapsed Time** (**PoET**); and
    the second is the idea of **transaction families**.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Sawtooth Lake可以在受控和非受控模式下运行。它是一个分布式账本，提出了两个新颖的概念：第一个是介绍了一种称为**Proof of Elapsed
    Time**（**PoET**）的新型共识算法；第二个是**事务家族**的概念。
- en: A description of these novel proposals is given in the following sections.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新提议的描述在以下部分给出。
- en: PoET
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PoET
- en: PoET is a novel consensus algorithm that allows a node to be selected randomly
    based on the time that the node has waited before proposing a block. This concept
    is in contrast to other leader election and lottery-based proof of work algorithms,
    such as the PoW used in Bitcoin where an enormous amount of electricity and computer
    resources are used in order be elected as a block proposer; for example in the
    case of Bitcoin. PoET is a type of Proof of Work algorithm but, instead of spending
    computer resources, it uses a trusted computing model to provide a mechanism to
    fulfill the Proof of Work requirements. PoET makes use of Intel's SGX architecture
    (Software Guard Extensions) to provide a trusted execution environment (TEE) to
    ensure randomness and cryptographic security of the process.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: PoET是一种新颖的共识算法，允许根据节点在提出区块之前等待的时间随机选择节点。这个概念与其他基于领导者选举和抽奖的工作证明算法相反，例如比特币中使用的PoW，其中使用了大量的电力和计算资源来选举区块提议者；例如在比特币的情况下。
    PoET是一种工作证明算法，但是，它不是使用计算机资源，而是使用可信计算模型来提供一种满足工作证明要求的机制。 PoET利用Intel的SGX架构（软件保护扩展）提供受信任的执行环境（TEE）以确保进程的随机性和密码学安全性。
- en: It should be noted that the current implementation of Sawtooth Lake does not
    require real hardware SGX-based TEE, as it is simulated for experimental purposes
    only and as such should not be used in production environments. The fundamental
    idea in PoET is to provide a mechanism of leader election by waiting randomly
    to be elected as a leader for proposing new transactions.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，Sawtooth Lake的当前实现不需要真实的硬件SGX基于TEE，因为它仅为实验目的模拟，并且因此不应在生产环境中使用。 PoET的基本理念是通过随机等待的方式来提供领导者选举的机制，以便被选举为提议新交易的领导者。
- en: PoET, however, has a limitation which has been highlighted by Ittay Eyal. This
    limitation is called the *stale chips* problem.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，PoET存在一个被Ittay Eyal强调的限制。 这个限制被称为*陈旧芯片*问题。
- en: The research paper is available at [https://eprint.iacr.org/2017/179.pdf](https://eprint.iacr.org/2017/179.pdf).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 研究论文可在[https://eprint.iacr.org/2017/179.pdf](https://eprint.iacr.org/2017/179.pdf)上获得。
- en: This limitation results in hardware wastage, which can result in the waste of
    resources. There is also a possibility of hacking the chip's hardware, which could
    result in system compromise and undue incentivizing to miners.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这种限制导致硬件浪费，可能导致资源的浪费。 也存在黑客攻击芯片硬件的可能性，这可能导致系统妥协和给矿工不当的激励。
- en: Transaction families
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易家族
- en: A traditional smart contract paradigm provides a solution that is based on a
    general-purpose instruction set for all domains. For example, in the case of Ethereum,
    a set of opcodes has been developed for the EVM that can be used to build smart
    contracts to address any type of requirements for any industry.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的智能合约范式提供了一个基于通用指令集的解决方案，适用于所有领域。 例如，在以太坊的情况下，已经开发了一组用于EVM的操作码，可以用来构建智能合约以满足任何行业的任何类型需求。
- en: While this model has its merits, it is becoming clear that this approach is
    not very secure as it provides a single interface into the ledger with a powerful
    and expressive language, which potentially offers a larger attack surface for
    malicious code. This complexity and generic virtual machine paradigm have resulted
    in several vulnerabilities that were found and exploited recently by hackers.
    A recent example is the **DAO hack** and further **Denial of Services** (**DoS**)
    attacks that exploited limitations in some EVM opcodes. The DAO hack was discussed
    in [Chapter 4](12eebfe5-f775-4550-a8df-d9578dd08980.xhtml), *Smart Contracts*.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个模型有其优点，但显然这种方法不太安全，因为它为账本提供了一个单一接口，使用了一个强大且富有表现力的语言，这可能为恶意代码提供了更大的攻击面。 这种复杂性和通用虚拟机范式导致了一些漏洞的发现和最近黑客攻击的利用。
    一个最近的例子是**DAO hack**和进一步的**拒绝服务**（**DoS**）攻击，这些攻击利用了一些EVM操作码的限制。 DAO hack在[第4章](12eebfe5-f775-4550-a8df-d9578dd08980.xhtml)“智能合约”中进行了讨论。
- en: 'A model shown in the following figure describes the traditional smart contract
    model, where a generic virtual machine has been used to provide the interface
    into the blockchain for all domains:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 下图中显示的模型描述了传统的智能合约模型，其中使用了通用虚拟机提供了所有领域的区块链接口：
- en: '![](img/c614fdef-8123-4aaa-b00f-f8ca2254016d.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c614fdef-8123-4aaa-b00f-f8ca2254016d.png)'
- en: The traditional smart contract paradigm
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的智能合约范式
- en: In order to address this issue, Sawtooth Lake has proposed the idea of transaction
    families. A transaction family is created by decomposing the logic layer into
    a set of rules and a composition layer for a specific domain. The key idea is
    that business logic is composed within transaction families, which provides a
    more secure and powerful way to build smart contracts. Transaction families contain
    the domain-specific rules and another layer that allows for creating transactions
    for that domain. Another way of looking at it is that transaction families are
    a combination of a data model and a transaction language that implements a logic
    layer for a specific domain. The data model represents the current state of the
    blockchain (ledger) whereas the transaction language modifies the state of the
    ledger. It is expected that users will build their own transaction families according
    to their business requirements.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 为解决这个问题，Sawtooth Lake提出了交易族的概念。交易族通过将逻辑层分解为特定领域的一组规则和一个组合层来创建。关键思想是业务逻辑嵌入在交易族中，从而提供了一种更安全、更强大的构建智能合约的方式。交易族包含特定领域的规则和另一层，允许为该领域创建交易。另一种看待它的方式是，交易族是实施特定领域逻辑层的数据模型和交易语言的组合。数据模型代表区块链（分类帐）的当前状态，而交易语言修改了分类帐的状态。预计用户将根据其业务需求构建自己的交易族。
- en: 'The following diagram represents this model, where each specific domain, like
    financial services, **digital rights management** (**DRM**), supply chain, and
    the health industry, has its own logic layer comprised of operations and services
    specific to that domain. This makes the logic layer both restrictive and powerful
    at the same time. Transaction families ensure that operations related to only
    the required domain are present in the control logic, thus removing the possibility
    of executing needless, arbitrary and potentially harmful operations:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表表示了该模型，其中每个特定领域，如金融服务、**数字版权管理**（**DRM**）、供应链和医疗行业，都有自己的逻辑层，包括特定于该领域的操作和服务。这使逻辑层同时具有限制性和强大性。交易族确保只有与所需领域相关的操作存在于控制逻辑中，从而消除了执行不必要的、任意的和潜在有害的操作的可能性：
- en: '![](img/fb76e9a8-6986-409e-bab8-130c6b81292e.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb76e9a8-6986-409e-bab8-130c6b81292e.png)'
- en: The Sawtooth (transaction families) smart contract paradigm
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Sawtooth（交易族）智能合约范式
- en: 'Intel has provided three transaction families with Sawtooth: Endpoint registry,
    Integerkey, and MarketPlace.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔为Sawtooth提供了三个交易族：端点注册表、Integerkey和MarketPlace。
- en: '**Endpoint registry** is used for registering ledger services'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端点注册表**用于注册分类帐服务'
- en: '**Integerkey** is used for testing deployed ledgers'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Integerkey**用于测试已部署的分类帐'
- en: '**MarketPlace** is used for selling, buying, and trading operations and services'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MarketPlace**用于销售、购买和交易操作和服务'
- en: '**Sawtooth_bond** has been developed as a proof of concept to demonstrate a
    bond trading platform.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sawtooth_bond**已开发为证明概念，演示了债券交易平台。'
- en: It is available at [https://github.com/hyperledger/sawtooth-core/tree/master/extensions/bond](https://github.com/hyperledger/sawtooth-core/tree/master/extensions/bond).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 可在[https://github.com/hyperledger/sawtooth-core/tree/master/extensions/bond](https://github.com/hyperledger/sawtooth-core/tree/master/extensions/bond)找到。
- en: Consensus in Sawtooth
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sawtooth中的共识
- en: Sawtooth has two types of consensus mechanisms based on the choice of network.
    PoET, as discussed previously, is a trusted executed environment-based lottery
    function that elects a leader randomly based on the time a node has waited for
    block proposal.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Sawtooth有两种基于网络选择的共识机制。正如之前讨论的那样，PoET是一种基于可信执行环境的抽奖功能，根据节点等待区块提案的时间随机选举领袖。
- en: There is another consensus type called **quorum voting**, which is an adaptation
    of consensus protocols built by Ripple and Stellar. This consensus algorithm allows
    instant transaction finality, which is usually desirable in permissioned networks.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种名为**quorum voting**的共识类型，这是由Ripple和Stellar构建的共识协议的一种改编。该共识算法允许即时的交易最终性，通常在获准网络中是可取的。
- en: The development environment – Sawtooth Lake
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发环境 - Sawtooth Lake
- en: In this section, a quick introduction is given on how to set up a development
    environment for Sawtooth Lake. There are a few prerequisites that are required
    in order to set up the development environment.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将简要介绍如何为Sawtooth Lake设置开发环境。设置开发环境需要满足一些先决条件。
- en: 'Examples in this section assume a running Ubuntu system and the following:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分中的示例假定正在运行Ubuntu系统并具有以下内容：
- en: Vagrant, at least version 1.9.0, available at [h](https://www.vagrantup.com/downloads.html)[t](https://www.vagrantup.com/downloads.html)[t](https://www.vagrantup.com/downloads.html)[p](https://www.vagrantup.com/downloads.html)[s](https://www.vagrantup.com/downloads.html)[://w](https://www.vagrantup.com/downloads.html)[w](https://www.vagrantup.com/downloads.html)[w](https://www.vagrantup.com/downloads.html)[.](https://www.vagrantup.com/downloads.html)[v](https://www.vagrantup.com/downloads.html)[a](https://www.vagrantup.com/downloads.html)[g](https://www.vagrantup.com/downloads.html)[r](https://www.vagrantup.com/downloads.html)[a](https://www.vagrantup.com/downloads.html)[n](https://www.vagrantup.com/downloads.html)[t](https://www.vagrantup.com/downloads.html)[u](https://www.vagrantup.com/downloads.html)[p](https://www.vagrantup.com/downloads.html)[.](https://www.vagrantup.com/downloads.html)[c](https://www.vagrantup.com/downloads.html)[o](https://www.vagrantup.com/downloads.html)[m](https://www.vagrantup.com/downloads.html)[/d](https://www.vagrantup.com/downloads.html)[o](https://www.vagrantup.com/downloads.html)[w](https://www.vagrantup.com/downloads.html)[n](https://www.vagrantup.com/downloads.html)[l](https://www.vagrantup.com/downloads.html)[o](https://www.vagrantup.com/downloads.html)[a](https://www.vagrantup.com/downloads.html)[d](https://www.vagrantup.com/downloads.html)[s](https://www.vagrantup.com/downloads.html)[.](https://www.vagrantup.com/downloads.html)[h](https://www.vagrantup.com/downloads.html)[t](https://www.vagrantup.com/downloads.html)[m](https://www.vagrantup.com/downloads.html)[l](https://www.vagrantup.com/downloads.html).
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少版本为1.9.0的[Vagrant](https://www.vagrantup.com/downloads.html)可在[h](https://www.vagrantup.com/downloads.html)[t](https://www.vagrantup.com/downloads.html)[t](https://www.vagrantup.com/downloads.html)[p](https://www.vagrantup.com/downloads.html)[s](https://www.vagrantup.com/downloads.html)[://w](https://www.vagrantup.com/downloads.html)[w](https://www.vagrantup.com/downloads.html)[w](https://www.vagrantup.com/downloads.html)[.](https://www.vagrantup.com/downloads.html)[v](https://www.vagrantup.com/downloads.html)[a](https://www.vagrantup.com/downloads.html)[g](https://www.vagrantup.com/downloads.html)[r](https://www.vagrantup.com/downloads.html)[a](https://www.vagrantup.com/downloads.html)[n](https://www.vagrantup.com/downloads.html)[t](https://www.vagrantup.com/downloads.html)[u](https://www.vagrantup.com/downloads.html)[p](https://www.vagrantup.com/downloads.html)[.](https://www.vagrantup.com/downloads.html)[c](https://www.vagrantup.com/downloads.html)[o](https://www.vagrantup.com/downloads.html)[m](https://www.vagrantup.com/downloads.html)[/d](https://www.vagrantup.com/downloads.html)[o](https://www.vagrantup.com/downloads.html)[w](https://www.vagrantup.com/downloads.html)[n](https://www.vagrantup.com/downloads.html)[l](https://www.vagrantup.com/downloads.html)[o](https://www.vagrantup.com/downloads.html)[a](https://www.vagrantup.com/downloads.html)[d](https://www.vagrantup.com/downloads.html)[s](https://www.vagrantup.com/downloads.html)[.](https://www.vagrantup.com/downloads.html)[h](https://www.vagrantup.com/downloads.html)[t](https://www.vagrantup.com/downloads.html)[m](https://www.vagrantup.com/downloads.html)[l](https://www.vagrantup.com/downloads.html)。
- en: VirtualBox, at least 5.0.10 r104061, available at [h](https://www.virtualbox.org/wiki/Downloads)[t](https://www.virtualbox.org/wiki/Downloads)[t](https://www.virtualbox.org/wiki/Downloads)[p](https://www.virtualbox.org/wiki/Downloads)[s](https://www.virtualbox.org/wiki/Downloads)[://w](https://www.virtualbox.org/wiki/Downloads)[w](https://www.virtualbox.org/wiki/Downloads)[w](https://www.virtualbox.org/wiki/Downloads)[.](https://www.virtualbox.org/wiki/Downloads)[v](https://www.virtualbox.org/wiki/Downloads)[i](https://www.virtualbox.org/wiki/Downloads)[r](https://www.virtualbox.org/wiki/Downloads)[t](https://www.virtualbox.org/wiki/Downloads)[u](https://www.virtualbox.org/wiki/Downloads)[a](https://www.virtualbox.org/wiki/Downloads)[l](https://www.virtualbox.org/wiki/Downloads)[b](https://www.virtualbox.org/wiki/Downloads)[o](https://www.virtualbox.org/wiki/Downloads)[x](https://www.virtualbox.org/wiki/Downloads)[.](https://www.virtualbox.org/wiki/Downloads)[o](https://www.virtualbox.org/wiki/Downloads)[r](https://www.virtualbox.org/wiki/Downloads)[g](https://www.virtualbox.org/wiki/Downloads)[/w](https://www.virtualbox.org/wiki/Downloads)[i](https://www.virtualbox.org/wiki/Downloads)[k](https://www.virtualbox.org/wiki/Downloads)[i](https://www.virtualbox.org/wiki/Downloads)[/D](https://www.virtualbox.org/wiki/Downloads)[o](https://www.virtualbox.org/wiki/Downloads)[w](https://www.virtualbox.org/wiki/Downloads)[n](https://www.virtualbox.org/wiki/Downloads)[l](https://www.virtualbox.org/wiki/Downloads)[o](https://www.virtualbox.org/wiki/Downloads)[a](https://www.virtualbox.org/wiki/Downloads)[d](https://www.virtualbox.org/wiki/Downloads)[s](https://www.virtualbox.org/wiki/Downloads).
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VirtualBox，至少是5.0.10 r104061，可在[h](https://www.virtualbox.org/wiki/Downloads)[t](https://www.virtualbox.org/wiki/Downloads)[t](https://www.virtualbox.org/wiki/Downloads)[p](https://www.virtualbox.org/wiki/Downloads)[s](https://www.virtualbox.org/wiki/Downloads)[://w](https://www.virtualbox.org/wiki/Downloads)[w](https://www.virtualbox.org/wiki/Downloads)[w](https://www.virtualbox.org/wiki/Downloads)[.](https://www.virtualbox.org/wiki/Downloads)[v](https://www.virtualbox.org/wiki/Downloads)[i](https://www.virtualbox.org/wiki/Downloads)[r](https://www.virtualbox.org/wiki/Downloads)[t](https://www.virtualbox.org/wiki/Downloads)[u](https://www.virtualbox.org/wiki/Downloads)[a](https://www.virtualbox.org/wiki/Downloads)[l](https://www.virtualbox.org/wiki/Downloads)[b](https://www.virtualbox.org/wiki/Downloads)[o](https://www.virtualbox.org/wiki/Downloads)[x](https://www.virtualbox.org/wiki/Downloads)[.](https://www.virtualbox.org/wiki/Downloads)[o](https://www.virtualbox.org/wiki/Downloads)[r](https://www.virtualbox.org/wiki/Downloads)[g](https://www.virtualbox.org/wiki/Downloads)[/w](https://www.virtualbox.org/wiki/Downloads)[i](https://www.virtualbox.org/wiki/Downloads)[k](https://www.virtualbox.org/wiki/Downloads)[i](https://www.virtualbox.org/wiki/Downloads)[/D](https://www.virtualbox.org/wiki/Downloads)[o](https://www.virtualbox.org/wiki/Downloads)[w](https://www.virtualbox.org/wiki/Downloads)[n](https://www.virtualbox.org/wiki/Downloads)[l](https://www.virtualbox.org/wiki/Downloads)[o](https://www.virtualbox.org/wiki/Downloads)[a](https://www.virtualbox.org/wiki/Downloads)[d](https://www.virtualbox.org/wiki/Downloads)[s](https://www.virtualbox.org/wiki/Downloads).
- en: Once both of the prerequisites are downloaded and installed successfully, the
    next step is to clone the repository.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦两个前提条件都成功下载并安装，下一步是克隆存储库。
- en: '[PRE0]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will produce an output similar to the one shown in the following screenshot:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '这将产生类似以下屏幕截图所示的输出： '
- en: '![](img/fb1a4de1-d855-4de1-b39b-728903ad3b85.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb1a4de1-d855-4de1-b39b-728903ad3b85.png)'
- en: The GitHub Sawtooth clone
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Sawtooth克隆
- en: 'Once Sawtooth is cloned correctly, the next step is to start up the environment.
    First, run the following command to change the directory to the correct location
    and then start the vagrant box:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Sawtooth正确克隆，下一步是启动环境。首先，运行以下命令将目录更改为正确的位置，然后启动vagrant虚拟机：
- en: '[PRE1]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will produce an output similar to the following screenshot:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生类似以下屏幕截图的输出：
- en: '![](img/6fb96efa-699f-440f-9055-33c1bdf94f13.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6fb96efa-699f-440f-9055-33c1bdf94f13.png)'
- en: The vagrant up command
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: vagrant up命令
- en: 'If at any point vagrant needs to be stopped, the following command can be used:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在任何时候需要停止vagrant，则可以使用以下命令：
- en: '[PRE2]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Or:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE3]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`halt` will stop the vagrant machine, whereas `destroy` will stop and delete
    vagrant machines.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`halt`将停止vagrant虚拟机，而`destroy`将停止并删除vagrant虚拟机。'
- en: 'Finally, the transaction validator can be started by using the following commands.
    First `ssh` into the vagrant Sawtooth box:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以使用以下命令启动事务验证器。首先`ssh`进入vagrant Sawtooth虚拟机：
- en: '[PRE4]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When the vagrant prompt is available, run the following commands. First build
    the Sawtooth Lake core using following command:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 当出现vagrant提示时，运行以下命令。首先使用以下命令构建Sawtooth Lake核心：
- en: '[PRE5]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When the build has completed successfully, in order to run the transaction
    validator, issue the following commands:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建成功完成时，为了运行事务验证器，请执行以下命令：
- en: '[PRE6]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will create the genesis block and clear any existing data files and keys.
    This command should show an output similar to the following screenshot:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建创世区块并清除任何现有的数据文件和密钥。此命令应显示类似以下屏幕截图的输出：
- en: '![](img/f31597d8-25d6-4cb1-b05b-059068c01e53.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f31597d8-25d6-4cb1-b05b-059068c01e53.png)'
- en: Genesis block and keys generation
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 创世区块和密钥生成
- en: 'The next step is to run the transaction validator, and change the directory
    as shown follows:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是运行交易验证器，并按照如下更改目录：
- en: '[PRE7]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the transaction validator:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 运行交易验证器：
- en: '[PRE8]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](img/b106baee-8113-49d6-ad85-e93067ebfb16.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b106baee-8113-49d6-ad85-e93067ebfb16.png)'
- en: Running transaction validator
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 运行交易验证器
- en: The validator node can be stopped by pressing *Ctrl* + *C*. Once the validator
    is up and running, various clients can be started up in another terminal window
    to communicate with the transaction validator and submit transactions.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按 *Ctrl* + *C* 停止验证器节点。一旦验证器启动并运行，各种客户端可以在另一个终端窗口中启动，以与交易验证器通信并提交交易。
- en: 'For example, in the following screenshot, the market client is started up to
    communicate with the transaction validator. Note that keys under `/keys/mkt.wif` are
    created by using the following command:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在以下屏幕截图中，市场客户端被启动以与交易验证器通信。注意，使用以下命令创建了位于`/keys/mkt.wif`下的密钥：
- en: '[PRE9]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/b597d1bc-3ec0-44f0-b0ff-faaef110b370.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b597d1bc-3ec0-44f0-b0ff-faaef110b370.png)'
- en: mktclient for marketplace transaction family
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 用于市场交易家族的 mktclient
- en: This completes our basic introduction to Sawtooth. The example shown above is
    also quite basic but demonstrates that how Sawtooth Lake works.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们对 Sawtooth 的基本介绍。上面显示的示例也相当基本，但演示了 Sawtooth Lake 的工作原理。
- en: Sawtooth Lake is also under continuous development and therefore, it is recommended
    that readers keep an eye on documentation available at [http://intelledger.github.io/](http://intelledger.github.io/)
    to keep up with the latest developments.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Sawtooth Lake 也在不断发展，因此建议读者留意[http://intelledger.github.io/](http://intelledger.github.io/)上可用的文档，以了解最新的发展。
- en: There is an excellent online page where official Sawtooth lake examples are
    provided. The page is available at [https://sawtooth.hyperledger.org/examples/](https://sawtooth.hyperledger.org/examples/). Readers
    are encouraged to visit this page and explore these sample projects.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个非常好的在线页面，提供了官方的 Sawtooth Lake 示例。该页面可在[https://sawtooth.hyperledger.org/examples/](https://sawtooth.hyperledger.org/examples/)访问。鼓励读者访问此页面，并探索这些样本项目。
- en: Now in the next section we will see an introduction to Corda. It should be noted
    that Corda is not yet an official project under Hyperledger; however, it may become
    a member very soon. Therefore, for now, this is being discussed under Hyperledger,
    but in the future, it may not become part of Hyperledger.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在下一节中，我们将看到对 Corda 的介绍。需要注意的是，Corda 还不是 Hyperledger 的官方项目；但是，它可能很快就成为成员。因此，目前正在在
    Hyperledger 下讨论这个问题，但将来可能不会成为 Hyperledger 的一部分。
- en: Corda
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Corda
- en: Corda is not a blockchain by definition because it does not contain blocks of
    bundled transactions, but it falls under the category of distributed ledgers.
    It provides all benefits that a blockchain can. Traditional blockchain solutions,
    as discussed before, have the concept of transactions that are bundled together
    in a block and each block is linked back cryptographically to its parent block,
    which provides an immutable record of transactions. This is not the case with
    Corda.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 根据定义，Corda 不是区块链，因为它不包含打包交易的区块，但它属于分布式分类账。它提供了区块链能提供的所有好处。传统的区块链解决方案，如前所述，具有将交易捆绑在一起形成区块的概念，每个区块都与其父区块在密码学上链接在一起，从而提供不可变的交易记录。Corda
    与此不同。
- en: Corda has been designed entirely from scratch with a new model for providing
    all blockchain benefits, but without a traditional blockchain. It has been developed
    purely for the financial industry to solve issues arising from the fact that each
    organization manages their own ledgers and thus have their own view of *truth*,
    which leads to contradictions and operational risk. Moreover, data is also duplicated
    at each organization, which results in an increased cost of managing individual
    infrastructures and complexity. These are the types of problems within the financial
    industry that Corda aims to resolve by building a decentralized database platform.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 是完全从头开始设计的，采用了一种新的模型来提供所有区块链的优点，但没有传统的区块链。它纯粹是为金融行业而开发的，以解决每个组织管理自己的分类账的问题，因此它们对*真相*有自己的看法，这导致矛盾和运营风险。此外，数据也在每个组织中重复，这导致管理个别基础设施的成本和复杂性增加。这些是
    Corda 旨在通过构建分布式数据库平台解决的金融行业中的问题类型。
- en: The Corda source code is available at [https://github.com/corda/corda](https://github.com/corda/corda).
    It is written in a language called Kotlin, which is a statically typed language
    targeting the **Java Virtual Machine** (**JVM**).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 源代码可在 [https://github.com/corda/corda](https://github.com/corda/corda)
    获取。它是用一种称为 Kotlin 的语言编写的，这是一种针对**Java 虚拟机**（**JVM**）的静态类型语言。
- en: Architecture
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构
- en: The main components of the Corda platform include state objects, contract code,
    legal prose, transactions, consensus, and flows. We will now explore them in more
    detail.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 平台的主要组件包括状态对象、合同代码、法律文本、交易、共识和流程。我们现在将对它们进行更详细的探讨。
- en: State objects
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态对象
- en: State objects represent the smallest unit of data that represent a financial
    agreement. They are created or deleted as a result of a transaction execution.
    They refer to **contract code** and **legal prose.** Legal prose is optional and
    provides legal binding to the contract. However, contract code is mandatory in
    order to manage the state of the object. It is required in order to provide a
    state transition mechanism for the node according to the business logic defined
    in the contract code. State objects contain a data structure that represents the
    current state of the object. A state object can be either current (live) or historic
    (no longer valid).
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 状态对象代表表示财务协议的最小数据单元。它们是作为交易执行的结果而创建或删除的。它们参考**合同代码**和**法律文本**。法律文本是可选的，并为合同提供法律约束。但是，合同代码是强制性的，以便管理对象的状态。根据在合同代码中定义的业务逻辑，它是必需的，以为节点提供状态转换机制。状态对象包含表示对象当前状态的数据结构。状态对象可以是当前的（活动的）或历史的（不再有效）。
- en: For example, in the following diagram, a state object represents the current
    state of the object. In this case, it is a simple mock agreement between **Party
    A** and **Party B** where **Party ABC** has paid **Party XYZ 1,000 GBP**. This
    represents the current state of the object; however, the referred contract code
    can change the state via transactions. State objects can be thought of as a state
    machine, which are consumed by transactions in order to create updated state objects.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，在下图中，状态对象代表对象的当前状态。在这种情况下，它是**甲方**和**乙方**之间的简单模拟协议，其中**甲方 ABC**已支付**乙方
    XYZ 1,000 英镑**。这代表了对象的当前状态；然而，引用的合同代码可以通过交易改变状态。状态对象可以被看作是一个状态机，交易消耗它们以创建更新的状态对象。
- en: '![](img/eaa1bff2-31ef-4612-ab6c-e58cab09a902.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eaa1bff2-31ef-4612-ab6c-e58cab09a902.jpg)'
- en: An example state object
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 一个状态对象示例
- en: Transactions
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易
- en: Transactions are used to perform transitions between different states. For example,
    the state object shown in the preceding diagram is created as a result of a transaction.
    Corda uses a Bitcoin-style UTXO-based model for its transaction processing. The
    concept of state transition by transactions is same as in Bitcoin. Similar to
    Bitcoin, transactions can have none, single, or multiple inputs, and single or
    multiple outputs. All transactions are digitally signed.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 交易用于在不同状态之间执行过渡。例如，前面图表中显示的状态对象是作为交易的结果创建的。Corda 使用基于比特币的 UTXO 模型进行交易处理。与比特币类似，交易的状态转换概念相同。与比特币类似，交易可以有零个、单个或多个输入，以及单个或多个输出。所有交易都经过数字签名。
- en: Moreover, Corda has no concept of mining because it does not use blocks to arrange
    transactions in a blockchain. Instead, notary services are used in order to provide
    temporal ordering of transactions. In Corda, new transaction types can be developed
    using JVM bytecode, which makes it very flexible and powerful.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Corda 没有挖矿的概念，因为它不使用区块来安排区块链中的事务。而是使用公证服务来提供事务的时间顺序。在 Corda 中，可以使用 JVM 字节码开发新的事务类型，这使得它非常灵活和强大。
- en: Consensus
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共识
- en: The consensus model in Corda is quite simple and is based on notary services
    that are discussed in a later section of this chapter. The general idea is that
    the transactions are evaluated for their uniqueness by the notary service and,
    if they are unique (that is, unique transaction inputs), they are signed by consensus
    services as valid. There can be single or multiple clustered notary services running
    on a Corda network. Various consensus algorithms like PBFT or Raft can be used
    by notaries to reach consensus.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 中的共识模型非常简单，基于稍后在本章讨论的公证服务。一般的想法是通过公证服务对事务的唯一性进行评估，如果它们是唯一的（即唯一的事务输入），则由共识服务签署为有效。在
    Corda 网络上可以运行单个或多个集群化的公证服务。公证人可以使用各种共识算法，如 PBFT 或 Raft，来达成共识。
- en: 'There are two main concepts regarding consensus in Corda: **consensus over
    state validity** and **consensus over state uniqueness**. The first concept is
    concerned with the validation of the transaction, ensuring that all required signatures
    are available and states are appropriate. The second concept is a means to detect
    double-spend attacks and ensures that a transaction has not already been spent
    and is unique.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 中关于共识的两个主要概念是**状态有效性共识**和**状态唯一性共识**。第一个概念关注事务的验证，确保所有必需的签名都可用且状态适当。第二个概念是一种检测双重支付攻击的手段，确保事务尚未被花费且是唯一的。
- en: Flows
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流程
- en: Flows in Corda are a novel idea that allows the development of decentralized
    workflows. All communication on the Corda network is handled by these flows. These
    are transaction-building protocols that can be used to define any financial flow
    of any complexity using code. Flows run as an asynchronous state machine and they
    interact with other nodes and users. During the execution, they can be suspended
    or resumed as required.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 中的流程是一种新颖的概念，允许开发分散式工作流。Corda 网络上的所有通信都由这些流程处理。这些是可以使用代码定义任何复杂性的任何金融流动的事务构建协议。流程作为异步状态机运行，并与其他节点和用户交互。在执行过程中，它们可以根据需要暂停或恢复。
- en: Components
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件
- en: The Corda network has multiple components. All these components are described
    in the upcoming sections.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 网络有多个组件。所有这些组件将在接下来的部分中描述。
- en: Nodes
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 节点
- en: Nodes in a Corda network operated under a trust-less model and run by different
    organizations. Nodes run as part of an authenticated peer-to-peer network. Nodes
    communicate directly with each other using the **Advanced Message Queuing Protocol**
    (**AMQP**), which is an approved international standard (ISO/IEC 19464) and ensures
    that messages across different nodes are transferred safely and securely. AMQP
    works over **Transport Layer Security** (**TLS**) in Corda, thus ensuring privacy
    and integrity of data communicated between nodes.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 网络中的节点采用了无信任模型，并由不同的组织运行。节点作为经过身份验证的点对点网络的一部分运行。节点使用**Advanced Message
    Queuing Protocol** (**AMQP**)直接相互通信，这是一个经过批准的国际标准（ISO/IEC 19464），确保不同节点之间的消息安全传输。在
    Corda 中，AMQP 在**Transport Layer Security** (**TLS**) 上运行，因此确保节点之间传输的数据的隐私和完整性。
- en: 'Nodes also make use of a local relational database for storage. Messages on
    the network are encoded in a compact binary format. They are delivered and managed
    by using the **Apache Artemis message broker** (**Active MQ**). A node can serve
    as a network map service, notary, Oracle, or a regular node. The following diagram
    shows a high-level view of two nodes communicating with each other:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 节点还利用本地关系数据库进行存储。网络上的消息以紧凑的二进制格式编码。它们通过**Apache Artemis message broker** (**Active
    MQ**)进行交付和管理。节点可以作为网络映射服务、公证人、Oracle 或普通节点。下图展示了两个节点之间通信的高级视图：
- en: '![](img/f6804328-cfc4-4a35-9786-39cb4d49847b.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6804328-cfc4-4a35-9786-39cb4d49847b.jpg)'
- en: Two nodes communicating in a Corda network
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 网络中两个节点的通信
- en: In the preceding diagram, **Node 1** is communicating with **Node 2** over a
    TLS communication channel using the AMQP protocol, and the nodes have a local
    relational database for storage.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在前图中，**节点 1**通过 TLS 通信频道使用 AMQP 协议与**节点 2**进行通信，并且节点具有用于存储的本地关系数据库。
- en: The permissioning service
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 许可服务
- en: A permissioning service is used to provision TLS certificates for security.
    In order to participate in the network, participants are required to have a signed
    identity issued by a root certificate authority. Identities are required to be
    unique on the network and the permissioning service is used to sign these identities.
    The naming convention used to recognize participants is based on the X.500 standard.
    This ensures the uniqueness of the name.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 许可服务用于提供 TLS 证书以保障安全。为了参与网络，参与者需要有由根证书颁发机构签发的身份证明。在网络上，身份必须是唯一的，并且许可服务用于签署这些身份。用于识别参与者的命名约定基于
    X.500 标准。这确保了名称的唯一性。
- en: Network map service
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络地图服务
- en: This service is used to provide a network map in the form of a document of all
    nodes on the network. This service publishes IP addresses, identity certificates,
    and a list of services offered by nodes. All nodes announce their presence by
    registering to this service when they first startup, and when a connection request
    is received by a node, the presence of the requesting node is checked on the network
    map first. Put another way, this service resolves the identities of the participants
    to physical nodes.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 此服务用于以文档形式提供网络地图，其中包含网络上所有节点的信息。该服务发布IP地址、身份证书以及节点提供的服务列表。所有节点在首次启动时通过注册到此服务来宣布自己的存在，当节点收到连接请求时，首先在网络地图上检查请求节点的存在。换句话说，该服务解析参与者的身份到物理节点。
- en: Notary service
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公证服务
- en: In a traditional blockchain, mining is used to ascertain the order of blocks
    that contain transactions. In Corda, notary services are used to provide transaction
    ordering and timestamping services. There can be multiple notaries in a network
    and they are identified by composite public keys. Notaries can use different consensus
    algorithms like BFT or Raft depending on the requirements of the applications.
    Notary services sign the transactions to indicate validity and finality of the
    transaction which is then persisted to the database.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统区块链中，挖矿用于确定包含交易的区块的顺序。在 Corda 中，公证服务用于提供交易排序和时间戳服务。网络中可以有多个公证人，并且它们由复合公钥标识。公证人可以使用不同的共识算法，如
    BFT 或 Raft，具体取决于应用程序的要求。公证服务签署交易以指示交易的有效性和最终性，然后将其持久化到数据库中。
- en: Notaries can be run in a load-balanced configuration in order to spread the
    load across the nodes for performance reasons; and, in order to reduce latency,
    the nodes are recommended to be run physically closer to the transaction participants.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 为了性能原因，公证人可以以负载平衡配置运行，以在节点之间分散负载；为了减少延迟，建议节点在物理上距离交易参与者更近。
- en: Oracle service
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Oracle 服务
- en: Oracle services either sign a transaction containing a fact, if it is true,
    or can themselves provide factual data. They allow real-world feed into the distributed
    ledgers. Oracles were discussed in [Chapter 4](12eebfe5-f775-4550-a8df-d9578dd08980.xhtml),
    *Smart Contracts*.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 服务要么签署包含事实的交易（如果它是真实的），要么可以自己提供事实数据。它们允许真实世界的信息输入到分布式分类帐中。关于 Oracle 的讨论可以在[第四章](12eebfe5-f775-4550-a8df-d9578dd08980.xhtml)中找到，即*智能合约*。
- en: Transactions
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易
- en: Transactions in a Corda network are never transmitted globally but in a semi-private
    network. They are shared only between a subset of participants who are related
    to the transaction. This is in contrast to traditional blockchain solutions like
    Ethereum and Bitcoin, where all transactions are broadcasted to the entire network
    globally. Transactions are digitally signed and either consume state(s) or create
    new state(s).
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 网络中的交易永远不会全局传输，而是在半私有网络中进行。它们只在与交易相关的参与者子集之间共享。这与传统的区块链解决方案（如以太坊和比特币）形成对比，其所有交易都会全局广播给整个网络。交易经过数字签名，要么消耗状态，要么创建新状态。
- en: 'Transactions on a Corda network are composed of the following elements:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 网络上的交易由以下元素组成：
- en: '**Input references**: This is a reference to the states the transaction is
    going to consume and use as an input.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入参考**: 这是交易将要使用和消耗的状态的参考。'
- en: '**Output states**: These are new states created by the transaction.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出状态**: 这些是交易创建的新状态。'
- en: '**Attachments**: This is a list of hashes of attached ZIP files. ZIP files
    can contain code and other relevant documentation related to the transaction.
    Files themselves are not made part of the transaction, instead, they are transferred
    and stored separately.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附件**：这是附加的 ZIP 文件哈希列表。ZIP 文件可以包含与交易相关的代码和其他相关文档。文件本身不作为交易的一部分，而是单独传输和存储。'
- en: '**Commands**: A command represents the information about the intended operation
    of the transaction as a parameter to the contract. Each command has a list of
    public keys, which represents all parties that are required to sign a transaction.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令**：命令代表交易的预期操作信息，作为合同的参数。每个命令都有一个公钥列表，表示需要对交易进行签名的所有方。'
- en: '**Signatures**: This represents the signature required by the transaction.
    The total number of signatures required is directly proportional to the number
    of public keys for commands.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**签名**：这表示交易所需的签名。所需签名总数与命令的公钥数量成正比。'
- en: '**Type**: There are two types of transactions namely, normal or notary changing.
    Notary changing transactions are used for reassigning a notary for a state.'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**：交易有两种类型，即普通或变更公证。变更公证交易用于重新分配状态的公证。'
- en: '**Timestamp**: This field represents a bracket of time during which the transaction
    has taken place. These are verified and enforced by notary services. Also, it
    is expected that if strict timings are required, which is desirable in many financial
    services scenarios, notaries should be synced with an atomic clock.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间戳**：此字段表示交易发生的时间段。这些由公证服务进行验证和强制执行。此外，如果需要严格的时间，这在许多金融服务方案中是可取的，公证应与原子钟同步。'
- en: '**Summaries:** This is a text description that describes the operations of
    the transaction.'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**摘要**：这是描述交易操作的文本描述。'
- en: Vaults
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保险库
- en: Vaults run on a node and are akin to the concept of wallets in bitcoin. As the
    transactions are not globally broadcasted, each node will have only that part
    of data in their vaults that is considered relevant to them. Vaults store their
    data in a standard relational database and as such can be queried by using standard
    SQL. Vaults can contain both on ledger and off ledger data, meaning that it can
    also have some part of data that is not on ledger.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 保险库在节点上运行，类似于比特币中钱包的概念。由于交易不会全球广播，因此每个节点的保险库只会包含对他们而言相关的数据部分。保险库将其数据存储在标准关系数据库中，因此可以使用标准
    SQL 进行查询。保险库可以包含在账本上和账本之外的数据，这意味着它也可以具有一些不在账本上的数据部分。
- en: CorDapp
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CorDapp
- en: The core model of Corda consists of state objects, transactions, and transaction
    protocols, which when combined with contract code, APIs, wallet plugins, and user
    interface components results in constructing a **Corda distributed application**
    (**CorDapp**).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 的核心模型由状态对象、交易和交易协议组成，当与合同代码、API、钱包插件和用户界面组件结合使用时，结果是构建了一个**Corda 分布式应用程序**（**CorDapp**）。
- en: Smart contracts in Corda are written using Kotlin or Java. The code is targeted
    for JVM.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 中的智能合约是使用 Kotlin 或 Java 编写的。代码面向 JVM。
- en: 'JVM has been modified slightly in order to achieve deterministic results of
    execution of JVM bytecode. There are three main components in a Corda smart contract
    as follows:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现 JVM 字节码执行结果的确定性，对 JVM 进行了轻微修改。 Corda 智能合约的三个主要组成部分如下：
- en: Executable code that defines the validation logic to validate changes to the
    state objects.
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义验证逻辑以验证对状态对象的更改的可执行代码。
- en: State objects represent the current state of a contract and either can be consumed
    by a transaction or produced (created) by a transaction.
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态对象表示合同的当前状态，可以由交易消耗，或者由交易生成（创建）。
- en: Commands are used to describe the operational and verification data that defines
    how a transaction can be verified.
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令用于描述操作和验证数据，以定义如何验证交易的方式。
- en: The development environment – Corda
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发环境 - Corda
- en: 'The development environment for Corda can be set up easily using the following
    steps. Required software includes the following:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤可以轻松设置 Corda 的开发环境。所需软件包括以下内容：
- en: JDK 8 (8u131), which is available at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDK 8（8u131），可在 [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
    获取。
- en: IntelliJ IDEA Community edition, which is free and available at [https://www.jetbrains.com/idea/download](https://www.jetbrains.com/idea/download)[.](https://www.jetbrains.com/idea/download)
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IntelliJ IDEA Community版本，免费可在[https://www.jetbrains.com/idea/download](https://www.jetbrains.com/idea/download)[.](https://www.jetbrains.com/idea/download)获取。
- en: H2 database platform independent ZIP, and is available at [http://www.h2database.com/html/download.html](http://www.h2database.com/html/download.html).
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: H2数据库平台独立的ZIP，在[http://www.h2database.com/html/download.html](http://www.h2database.com/html/download.html)获取。
- en: Git, which is available at [https://git-scm.com/downloads](https://git-scm.com/downloads).
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git，可在[https://git-scm.com/downloads](https://git-scm.com/downloads)获取。
- en: Kotlin language, which is available for IntelliJ, and more information can be
    found at [https://kotlinlang.org/](https://kotlinlang.org/).
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin语言，可在IntelliJ中使用，更多信息请参见[https://kotlinlang.org/](https://kotlinlang.org/)。
- en: Gradle is another component that is used to build Corda. It is available at
    [https://gradle.org](https://gradle.org).
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle是用于构建Corda的另一个组件。它可以在[https://gradle.org](https://gradle.org)获取。
- en: Once all these tools are installed, smart contract development can be started.
    CorDapps can be developed by utilizing an example template available at [https://github.com/corda/cordapp-template](https://github.com/corda/cordapp-template).
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了所有这些工具后，可以开始智能合约开发。可以使用[https://github.com/corda/cordapp-template](https://github.com/corda/cordapp-template)中提供的示例模板来开发CorDapps。
- en: Detailed documentation on how to develop contract code is available at [https://docs.corda.net/](https://docs.corda.net/).
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何开发合同代码的详细文档可在[https://docs.corda.net/](https://docs.corda.net/)获取。
- en: 'Corda can be cloned locally from GitHub using the following command:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: Corda可以使用以下命令从GitHub本地克隆：
- en: '[PRE10]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When the cloning is successful, you should see output similar to the following:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆成功后，您应该看到类似以下的输出：
- en: '[PRE11]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Once the repository is cloned, it can be opened in IntelliJ for further development.
    There are multiple samples available in the repository, such as a bank of Corda,
    interest rate swaps, demo, and traders demo. Readers can find them under the `/samples`
    directory under `corda` and they can be explored using IntelliJ IDEA IDE.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦存储库被克隆，就可以在IntelliJ中进一步开发。存储库中提供了多个示例，如Corda银行、利率互换、演示和交易者演示。读者可以在`/samples`目录下的`corda`下找到它们，并可使用IntelliJ
    IDEA IDE进行探索。
- en: Summary
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have gone through an introduction to the Hyperledger project.
    Firstly, the core ideas behind the Hyperledger project were discussed, and a brief
    introduction to all projects under Hyperledger was provided. Three main Hyperledger
    projects were discussed in detail, namely Hyperledger Fabric, Sawtooth lake, and
    Corda. All these projects are continuously improving and changes are expected
    in the next releases. However, the core concepts of all the projects mentioned
    above are expected to remain unchanged or change only slightly. Readers are encouraged
    to visit the relevant links provided within the chapter to see the latest updates.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Hyperledger项目的概述。首先，讨论了Hyperledger项目背后的核心思想，并提供了Hyperledger下所有项目的简要介绍。详细讨论了三个主要的Hyperledger项目，即Hyperledger
    Fabric、Sawtooth Lake和Corda。所有这些项目都在不断改进，预计下一个版本会有变化。然而，上述所有项目的核心概念预计都将保持不变，或者只会轻微变化。鼓励读者访问章节中提供的相关链接，以了解最新动态。
- en: It is evident that a lot is going on in this space and projects like Hyperledger
    from the Linux Foundation are playing a pivotal role in the advancement of blockchain
    technology. Each of the projects discussed in this chapter has novel approaches
    towards solving the issues faced in various industries, and any current limitations
    within the blockchain technology are also being addressed, such as scalability
    and privacy. It is expected that more projects will soon be proposed to the Hyperledger
    project, and it is envisaged that with this collaborative and open effort blockchain
    technology will advance tremendously and will benefit the community as a whole.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这个领域正在发生很多事情，像来自Linux基金会的Hyperledger项目发挥着推动区块链技术发展的关键作用。本章讨论的每个项目都对解决各行业面临的问题有新颖的方法，还在解决区块链技术的当前限制，如可扩展性和隐私等。预计很快将有更多项目提议给Hyperledger项目，预计随着这种合作和开放努力，区块链技术将得到极大发展，并将惠及整个社区。
- en: In the next chapter, alternative blockchain solutions and platforms will be
    introduced. As blockchain technology is growing very fast and has attracted lot
    of research interest there are many new projects that have emerged recently. We
    will discuss those projects in the next chapter.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍替代的区块链解决方案和平台。由于区块链技术发展得非常迅速，并且吸引了许多研究兴趣，因此最近出现了许多新项目。我们将在下一章讨论这些项目。
