- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quantum-Safe Blockchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The thesis of this book revolves around exploring two technologies: quantum
    computing and Blockchain. I have touched upon the key concepts and the history
    of these two technologies. There were a few interviews and industry-focused chapters
    where I brought to light the practical applications of these technologies. This
    was to establish that, despite several challenges, these technologies have fundamental
    use cases.'
  prefs: []
  type: TYPE_NORMAL
- en: We have established that these two technologies are here to stay. They may go
    through winters, where their relevance may be challenged. Yet, the most impactful
    technologies weather such storms and resurface as soon as they become relevant.
    Technologies could see low points due to limitations or a lack of ecosystem maturity.
    In the case of Blockchain, we touched upon the trilemma that highlighted that
    the technology is yet to scale. For instance, a completely decentralized ledger
    often struggles to demonstrate the throughput that today's payments infrastructure
    can accommodate easily.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of quantum computing, there are challenges such as decoherence,
    where data is lost due to interactions between the qubits and their environment.
    It is early days for both these technologies and more needs to be done for mainstream
    adoption. However, the capability that lies beyond the limitations is what we
    highlighted earlier.
  prefs: []
  type: TYPE_NORMAL
- en: The "*so whats's*?" of both these technologies can't be disputed. They have
    use cases across different industries that could potentially create leapfrog moments.
    Technologies creating leapfrog effects impact the lives of millions of people
    in their target market. The invention of the PC, the internet, and smartphones
    to applications such as PayPal, M-Pesa, and Alipay have all affected lives of
    billions of people across the developed and the developing world.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed how the use cases between these two technologies are complementary.
    Quantum computing is mostly focused on the computing infrastructure and can also
    provide intelligence capabilities that are beyond today's classical computers.
    Blockchain on the other hand is a data integrity layer.
  prefs: []
  type: TYPE_NORMAL
- en: In a largely data-driven world, we need an infrastructure that can offer intelligence
    and simulation capabilities that can tap into the richness of the data. However,
    without a framework to ensure that the data being stored and used by these machines
    is of high data quality and integrity, all the intelligence would be of little use.
    Without the intelligence, high-integrity data can sit on a computer without being
    of much use too.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we need both technologies to go mainstream to deal with the data
    challenges in the future. However, there is a catch. The two technologies are
    on a collision course. Cryptography is an integral part of both quantum computing
    and Blockchain. There is a potential scenario where the Blockchain solutions we
    have today will be obsolete as soon as quantum computers scale and become mainstream.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, despite the business case for these technologies, we may only see
    one of the two technologies being relevant in the future. That is a scenario that
    we could overcome though. Blockchain can still be relevant if it can overcome
    another technology barrier. This chapter is all about discussing the collision
    course between the technologies and exploring the solution to this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: A race against time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The internet, despite its challenges, has largely worked well for us. It has
    been a major building block in helping economies across the world prosper. The
    cost of accessing the internet has fallen drastically across the world. For instance,
    in India alone, the number of people accessing mobile internet has grown from
    about 242 million in 2015 to 451 million at the end of 2019\. Source: [https://www.statista.com/statistics/558610/number-of-mobile-internet-user-in-india/](https://www.statista.com/statistics/558610/number-of-mobile-internet-user-in-india/)'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile penetration has created leapfrog moments across the world in the past.
    Mobile internet penetration has taken it one step further. For instance, Africa
    was able to see mobile payments scale like never before through M-Pesa. This wouldn't
    have happened without mobile penetration. China took it one step further as mobile
    internet penetration led to a payments boom with Alipay and WeChat. These two
    firms contributed over 90% of the $40 trillion worth of mobile transactions in
    China.
  prefs: []
  type: TYPE_NORMAL
- en: In India, on the other hand, several new business models are being launched
    due to the spread of mobile internet. There are innovative apps that allow users
    in rural areas to perform day-to-day transactions using their regional language
    in a voice-based interface. These models are unheard of, especially in emerging
    markets. However, this growth comes at a cost. The explosion of the internet brings
    with it risks to cyber security.
  prefs: []
  type: TYPE_NORMAL
- en: Many parts of the world where the internet has managed to penetrate in the past
    few years have a massive lack of understanding and awareness of data privacy and
    data security. As a result, the growth we are seeing today might actually be a
    fertile land for the cyber wars of tomorrow. Most data on the internet that sits
    on servers and is locked down by today's security mechanisms is vulnerable to
    cyber-attacks.
  prefs: []
  type: TYPE_NORMAL
- en: This threat becomes a ticking time bomb when we introduce quantum computers
    into the mix. Quantum computers could spell disaster for data stored on the internet.
    Information exchange on the internet as we know today uses the **Rivest–Shamir–Adleman**
    (**RSA**) algorithm and **Elliptic-Curve Cryptography** (**ECC**). These algorithms
    are used to encode and decode information transmitted on the internet. These algorithms
    are public-key cryptographic techniques where the encryption key used to encode
    data is public, and the encryption key used to decode data is private.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a brief look at what each of these cryptography techniques involve,
    and touch upon the vulnerabilities they have in the quantum world.
  prefs: []
  type: TYPE_NORMAL
- en: The RSA algorithm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a scenario where a message needs to be sent from Party A to Party B, A could
    just write the message on a piece of paper, and send it over to Party B. If the
    information is confidential and needs to be protected, Party A could jumble the
    message using an encryption key. As long as Party A and Party B have exchanged
    the keys beforehand, Party B can use the key to decrypt the message and read it.
    The method of encrypting and decrypting a message using the same private key is called
    symmetric key encryption.
  prefs: []
  type: TYPE_NORMAL
- en: But what if Party A and Party B haven't exchanged the key to decrypt the message
    beforehand? That is a scenario where asymmetric key encryption techniques like
    the RSA algorithm are quite relevant. In the RSA technique, A and B will have
    a key-pair each constituting a public and private key. The public keys are exchanged
    between A and B. Party A will use B's public key to encrypt their message and
    send it over to B. This encrypted message that's sent to the Party B can be decrypted
    only by using Party B's private key.
  prefs: []
  type: TYPE_NORMAL
- en: This has allowed RSA to be used in scenarios where the private key couldn't
    be shared between A and B beforehand. The RSA algorithm has been used in emails
    and **Virtual Private Networks** (**VPNs**) and can be seen in many browsers too.
    Despite several use cases on the internet, the RSA algorithm has been in the spotlight
    only recently.
  prefs: []
  type: TYPE_NORMAL
- en: The RSA algorithm was first developed by Ron Rivest, Adi Shamir, and Leonard
    Adleman in 1977 and is even named after them (Rivest, Shamir, Adleman). However,
    it was shelved then, as it was hard to understand the real-world applications
    at that time. In 1997, as the dot-com boom was taking shape, the RSA algorithm
    suddenly became relevant as internet-based businesses, emails, social media, and
    micro messages became commonplace.
  prefs: []
  type: TYPE_NORMAL
- en: The RSA algorithm fundamentally relies on the principle where an operation is
    relatively easy to compute in one direction, but the reverse is extremely resource-intensive.
    One of the key examples of such calculations is prime factoring. If I took two
    prime numbers, 997 and 667, we can easily arrive at 997*667 equals 674,969\. However,
    the reverse is extremely hard. If we were asked to find the prime factors of 674,969,
    we would struggle to do it within reasonable time bounds due to the difficulty
    involved in the calculation and the amount of trial and error involved.
  prefs: []
  type: TYPE_NORMAL
- en: Algorithms that exhibit this property are called trapdoor functions. Identifying
    such algorithms is fundamental to creating a secure public key cryptography technique.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, if you were given one of the two factors and the result
    of 674,969, it would again make the operation simpler. In real-world RSA implementations,
    prime numbers are extremely long. For instance, RSA 1024 has 1,024 bits and could
    have numbers with up to 309 digits.
  prefs: []
  type: TYPE_NORMAL
- en: In a public-key cryptography technique, the difference between the ease of solving
    the problem in one direction to solving the problem in the other direction is
    important. For instance, with RSA the challenge has been that as prime factors
    have increased in size, the difficulty difference between computing the multiple
    on one end, and the difficulty in identifying the factors at the other end, has
    reduced. Due to the explosion of mobile internet, security mechanisms have had
    to get more resource-intensive too.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, RSA is not viewed as a scalable solution, as it becomes more resource
    intensive as the prime factors become bigger. Apart from that, algorithms such
    as the quadratic sieve and general number field sieve have made it relatively
    easier to crack the prime number factoring challenge. We need other alternatives
    to RSA to have a scalable security solution. Let''s now look at one of those,
    in the form of ECC. Source: [https://www.comparitech.com/blog/information-security/rsa-encryption/](https://www.comparitech.com/blog/information-security/rsa-encryption/
    )'
  prefs: []
  type: TYPE_NORMAL
- en: ECC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ECC is an alternative that is starting to gain popularity recently. It is based
    on discrete logarithms in groups of points on an elliptic curve. The elliptic-curve
    algorithm can be explained using the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: Y² = X³ + aX +b
  prefs: []
  type: TYPE_NORMAL
- en: 'When we map the elliptic curve using the preceding equation, we get a chart
    that looks like a variant of the following curve:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B13910_15_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: A plotted elliptic curve'
  prefs: []
  type: TYPE_NORMAL
- en: The curve has a few special features, one of them being its horizontal symmetricity.
    The half of the curve that lies below the *x* axis can be described as the mirror
    image of the half that lies above the *x* axis. However, there is another property
    that is more relevant from a trapdoor function perspective.
  prefs: []
  type: TYPE_NORMAL
- en: The property can be explained by imagining a game of billiards played on a board
    with this curve on. If we were to shoot the ball between two points on the curve,
    it will necessarily strike the curve at a third point. The third point can be
    visually predicted using the shape of the curve.
  prefs: []
  type: TYPE_NORMAL
- en: However, if after a few (*n*) such shots from starting point A, the ball arrives
    at point B, for a new person who hasn't seen the game, it is hard to understand
    the number of shots even if point B and the starting point of the ball are known.
    Therefore, it would easy to get from point A to B if we knew *n*. However, it
    is hard to find *n* even if we knew A and B. This is a unique property of the
    elliptic-curve algorithm that makes it a good trapdoor function.
  prefs: []
  type: TYPE_NORMAL
- en: In a real-world representation of ECC, the general idea is to assign messages
    as values of *X* in the preceding equation to find *Y*. That would give us (*X,Y*)
    as the points on the curve. Therefore, a security mechanism using ECC will need
    a curve equation, a public point in the curve, and a prime number. The public
    point can be visualized in the billiards example as being shot to itself *n* times,
    where *n* becomes the private key.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to a recent paper published done by European researchers, ECC provides
    better security compared to RSA. The paper considers the energy needed to break
    cryptographic algorithms and compares it with the energy required to boil water.
    In the comparison between RSA and ECC, to break the RSA 228-bit algorithm, we
    would need an amount of energy equivalent to that needed to boil a spoon of water.
    On the other hand, to break the 228-bit ECC key, we will need enough energy needed
    to boil all the water on earth. Source: [https://eprint.iacr.org/2013/635.pdf](https://eprint.iacr.org/2013/635.pdf
    )'
  prefs: []
  type: TYPE_NORMAL
- en: ECC is seen as a more energy-efficient alternative to RSA even for the encoders.
    The CPU and memory usage is more optimal too. However, RSA is more widely adopted.
    This is primarily due to the complexity involved in understanding ECC. ECC, when
    not understood well enough, can be implemented wrongly, which in effect could
    become a security vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: The potential applications of ECC are many. The US government has started deploying
    this security mechanism for internal communications. Apple iMessage, the WhatsApp
    messenger, and the Tor anonymity network use the **Elliptic-Curve Digital Signature
    Algorithm** (**ECDSA**) for secure interactions. The more relevant usage of elliptic
    curves in the context of this book is found in Bitcoin and Ethereum.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have briefly touched upon the RSA and ECC techniques to protect
    our data, let's examine why they become insecure when quantum computers become
    viable and mainstream.
  prefs: []
  type: TYPE_NORMAL
- en: Does quantum computing mean chaos?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So why is internet security, as it stands today, a ticking time bomb? Would
    there be chaos if quantum computing became mainstream, and what are the chances
    of that happening? These are the questions that have largely been troubling nation
    states worried about cyber warfare. CEOs of top banks and healthcare firms dealing
    with sensitive client data are also worried about data security.
  prefs: []
  type: TYPE_NORMAL
- en: Let's quickly look at where the quantum computing world is and why it might
    be a threat to global data security. In 1994, Peter Shor presented two quantum
    algorithms. One that could factor large prime numbers and another that could compute
    discrete logarithms in a finite field of prime order. The former could be a threat
    to the RSA method, and the latter would address elliptic curves.
  prefs: []
  type: TYPE_NORMAL
- en: Shor essentially showed that almost all public key encryption techniques we
    use today can be cracked using a quantum Fourier attack. He used quantum Fourier
    sampling to find the periodicity of the mathematical object. This in turn allowed
    him to solve the factorization problem.
  prefs: []
  type: TYPE_NORMAL
- en: The threat of quantum computers has been there for the past 25 years. Therefore,
    theoretically, quantum computing algorithms could indeed cause havoc to the world of
    data security as we know it today.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, in 2015 researchers identified that it would take a billion qubits
    to crack the RSA 2,048-bit signatures. This number (1 billion qubits) was revised
    to 20 million in 2019\. The number of qubits was attributed to the disproportionate
    number of qubits that were needed for error correction in a quantum computer.
    The noise in a quantum computer is a difficult problem that must be overcome before
    we can start thinking of it going mainstream. Source: [https://cacm.acm.org/news/237303-how-quantum-computer-could-break-2048-bit-rsa-encryption-in-8-hours/fulltext](https://cacm.acm.org/news/237303-how-quantum-computer-could-break-2048-bit-rsa-encryption-in-8-hours/fulltext
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Despite that, in 2012 a 4-qubit quantum computer was used to factor the number
    143, and two years later a similar-sized quantum computer was able to factor the
    number 56,153\. Therefore, the capabilities of quantum computers are getting better
    at a very fast pace. In December 2019, Craig Gidney from Google and Martin Ekera
    from the KTH Royal Institute of Technology published a paper titled *How to factor
    2,048-bit RSA integers in 8 hours using 20 million qubits*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suddenly, the problem of cracking the RSA 2,048-bit numbers became 5 times
    easier. The previous estimated requirement to solve the problem using quantum
    computers was 1 billion qubits. Gidney and Ekera used a mathematical technique
    called modular exponentiation and demonstrated that it was a more efficient way
    to perform factorization. They show in their research paper that when factoring
    2,048-bit RSA integers, their construction''s space-time volume is a hundredfold
    less than previous implementations. Source: [https://arxiv.org/abs/1905.09749](https://arxiv.org/abs/1905.09749
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Some of Google's quantum supremacy claims may have to be taken with a pinch
    of salt. Google's paper on quantum supremacy was leaked by NASA in 2019 and was
    later followed by an official Google press release. During that release, Google
    claimed that their 53 qubit Sycamore chip can perform calculations that would
    take 10,000 years for the most powerful classical computer to compute.
  prefs: []
  type: TYPE_NORMAL
- en: IBM refuted this with a scientific response. They calculated that the entire
    quantum state vector of Google's Sycamore chip can be stored within Summit – the
    world's largest supercomputer, which has 250 petabytes of storage. The fact that
    classical computers have to resort to disk storage to come close to the abilities
    of basic quantum computers is illustrative of the gulf between the two technologies.
  prefs: []
  type: TYPE_NORMAL
- en: IBM also showed that the classical supercomputer could simulate the Sycamore
    chip in approximately 2.5 days and not 10,000 years as Google claimed. The resource
    efficiency that Google had managed to achieve was indeed great, but perhaps quantum
    computers are yet to become as great as they are hyped to be.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another recent publication by Microsoft''s Quantum team claimed that implementing
    Shor''s algorithm with the right mix of algorithmic tricks could break RSS and
    ECC more efficiently. They implemented their algorithms for ECC standards set
    by the **National Institute of Standards and Technology** (**NIST**), a unit of
    the US Commerce Department. Source: [https://www.microsoft.com/en-us/research/wp-content/uploads/2017/09/1706.06752.pdf](https://www.microsoft.com/en-us/research/wp-content/uploads/2017/09/1706.06752.pdf
    )'
  prefs: []
  type: TYPE_NORMAL
- en: The publication revealed that their algorithms could use 2,330 logical qubits
    and Toffoli gates to break the NIST standardized curve P-256\. Similarly, they
    were able to show that Shor's factoring algorithm needed 6,146 qubits to break
    the 3,072-bit RSA keys.
  prefs: []
  type: TYPE_NORMAL
- en: Toffoli gates are ideal for building up large-scale reversible circuits that
    have thousands of qubits and billions of gates, as they work in both classical
    and quantum environments. The gates sit between the high-level, abstract algorithm
    and the low-level, assembler-like instruction set that will ultimately drive the
    quantum computer. You can find out more at [https://cloudblogs.microsoft.com/quantum/2018/05/02/the-quantum-computing-effect-on-public-key-encryption/](https://cloudblogs.microsoft.com/quantum/2018/05/02/the-quantum-computing-effect-on-public-key-encryption/).
  prefs: []
  type: TYPE_NORMAL
- en: As a result of efforts from Google, IBM, and Microsoft, there is a good possibility
    that quantum computers will become more practical in the near future. Error correction
    could become more efficient, and we will need fewer qubits for computation. With
    the advent of better algorithms making quantum computers more real, there is a
    genuine threat to RSA and ECC-based security. Both these cryptography techniques
    are the fundamental security mechanisms that the internet, governments, and many
    financial services firms currently rely on.
  prefs: []
  type: TYPE_NORMAL
- en: I hope that addresses the point that the security mechanisms we currently use
    with the internet, bank accounts, credit cards, governments' confidential data,
    and messaging could all be put under great threat with the emergence of quantum
    computing. A hacker could record message today, and in 10 years or so, when quantum
    computers could decrypt the message, read it. It may not be a major risk for credit
    card information, but government and defense secrets are more sensitive to such
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: The threat is amplified by the fact that many key nation states that are hoping
    to use quantum breakthroughs for cyber wars and wouldn't necessarily want to reveal
    their advances in quantum technology. Therefore, they may be ahead of our benchmark
    information from IBM, Google or Microsoft. Let's now look at the different quantum-safe
    cryptography techniques that could potentially go mainstream to make our data
    quantum-proof.
  prefs: []
  type: TYPE_NORMAL
- en: Quantum-Safe Cryptography
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every problem is an opportunity to innovate. Shor's algorithm was based on quantum
    Fourier sampling to crack asymmetric cryptography algorithms. Therefore, cryptographic
    systems that would be quantum-safe need to be immune to quantum Fourier sampling
    as well as other classical and quantum attacks. In April 2016, NIST launched the
    **Post-Quantum Cryptography** (**PQC**) Standardization challenge. The mission
    is to find a PQC technique that could potentially protect our data from the threat
    of quantum computers.
  prefs: []
  type: TYPE_NORMAL
- en: Out of 69 applications accepted to the challenge, 26 were chosen as semi-finalists
    in Jan 2019\. The objective of NIST's efforts is not just to find a PQC technique
    that works on paper. They also want to make sure that the technique is practical
    in the world of mobile and tablet devices and **Internet of Things** (**IoT**)
    networks. In the world where machines transmit data to one another, securing them
    with low resource consumption is essential.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the different categories of cryptographic techniques that have
    been submitted to NIST. It is important to ensure that these techniques are not
    just theoretically immune to quantum computing but are also practically feasible
    at scale. As discussed, these protocols have to be capable of dealing with Shor's
    algorithms. Let's look at lattice-based cryptography and code-based cryptography
    techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Lattice-Based Cryptography
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Lattice-Based Cryptography** (**LBC**) is perhaps the most researched type
    of PQC. A lattice is nothing but a grid of points that stretches out to infinity.
    It is not possible to represent a lattice using a computer due to its finite resources.
    Therefore, we use something called a basis that is a collection of points or vectors
    that help represent a lattice.'
  prefs: []
  type: TYPE_NORMAL
- en: LBC relies on the difficulty in solving a geometric problem in a multi-dimensional
    lattice. For instance, the geometric problem to solve could be the **Shortest
    Vector Problem** (**SVP**) where we need to identify a good basis with short vectors.
    This unfortunately is not easy in lattices where we could have thousands of dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: The other common LBC problem to solve is the **Closest Vector Problem** (**CVP**) where
    a point *P* is given and the closest point needs to be identified. LBC techniques
    seem to be the most popular PQC techniques for several reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Lattices have been researched for over 200 years. As a result, their mathematical
    properties are well understood. The mathematicians who were instrumental in developing
    the understanding of lattices had no idea about quantum computers. Despite that,
    their work offers insights that can help with LBC.
  prefs: []
  type: TYPE_NORMAL
- en: Lattices offer a versatile method of developing cryptography protocols like
    never before. As a result, they are the most studied and researched cryptographic
    field. Of the 82 applications that the NIST received for the PQC standardization
    challenge, 28 of them were lattice-based.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike RSA encryption, which can be categorized as a worst-case reduction technique,
    LBC has average case reduction. This means that on average the LBC techniques
    are secure unless every instance of the lattice problem is easily solvable. In
    an RSA encryption technique, if the numbers used have certain number-theoretical
    properties, they are easy to crack. Therefore, we need to ensure that is not the
    case during key generation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of LBC, we only need to choose the parameter size and generate
    the keys. On top of being more secure, they are less resource hungry. For instance,
    the encryption process of an LBC-based technique (R-LWE) on an 8-bit IoT device
    finishes in 2 million cycles. RSA 1024 takes 23 million cycles more to run the
    encryption. Source: [https://arxiv.org/pdf/1805.04880.pdf](https://arxiv.org/pdf/1805.04880.pdf
    )'
  prefs: []
  type: TYPE_NORMAL
- en: This makes LBC quite relevant for the IoT world we live in. It can also be useful
    for mobile and tablet devices that need resource-efficient encryption techniques
    that are quantum-proof. While the LBC algorithms can run faster than RSA encryption,
    they are still slower than **Code-Based Cryptography** (**CBC**). Let's review
    this category of post-quantum cryptography.
  prefs: []
  type: TYPE_NORMAL
- en: Code-Based Cryptography
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CBC relies on the difficulty of decoding a general linear block code. The code
    could belong to families such as Goppa codes or quasi-cyclic codes. The McEliece
    algorithm, which is an asymmetric encryption scheme, was shown to be insolvable
    using quantum Fourier sampling. No polynomial-time quantum algorithm has been
    known to decode a linear block code.
  prefs: []
  type: TYPE_NORMAL
- en: The McEliece algorithm was first developed over 40 years ago but wasn't as popular
    as RSA or ECC. This was largely due to the key size being huge (0.5 MB vs 0.1
    for RSA and 0.02 for ECC typically). However, it has come to spotlight now due
    to the need to make cryptography quantum-proof.
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of CBC is that it is typically more performant than the LBC method
    from a computational efficiency perspective. However, when choosing the right
    cryptographic technique for a platform or an application, it is important to look
    at factors such as key size, resource consumption, computational efficiency, signature
    length, and confidence of security.
  prefs: []
  type: TYPE_NORMAL
- en: Both these techniques (CBC and LBC) have their pros and cons. Their applications
    will vary based on the context of usage. For instance, in an IoT environment,
    where we will need to have smaller keys and relatively better resource efficiencies,
    lattice-based cryptography may be a better solution. Therefore, a "horses for
    courses" approach (the right tool for the right job) needs to be adopted, rather
    than viewing one technique as a silver bullet to keep our data safe in a post-quantum
    world.
  prefs: []
  type: TYPE_NORMAL
- en: 'Much like the NIST challenge, the European Commission has funded a research
    consortium of eleven universities and firms with 3.9 million euros. The initiative
    is called PQCrypto. The ambition is to identify PQC techniques over three years.
    Out of the 69 submissions to NIST, 22 were designed or co-designed by members
    of PQCrypto. Source: [https://pqcrypto.eu.org/nist.html](https://pqcrypto.eu.org/nist.html
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Despite all these hopeful efforts, there is also the realization that any new
    cryptosystem takes 15 to 20 years to be ready for scalable industrial application.
    Therefore, the scientific community is up against this challenge to ensure all
    our data is protected. While there is a wider problem around data security on
    the internet in a post-quantum world, we also have a specific security concern
    with Blockchain applications.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain Cryptography
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many Blockchain use public key cryptography. They are asymmetric in nature as
    the sender and the receiver each have a public and a private key. As discussed
    earlier, in an asymmetric encryption scheme the message encrypted with the receiver's
    public key can be decrypted with their private key. For someone without the private
    key, it is extremely hard to decrypt the message, therefore creating a trapdoor
    encryption mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: The Blockchain security mechanism depends on the hardness of this trapdoor mathematical
    function. Many cryptocurrencies and Blockchain use ECC. This includes the Ethereum
    and Bitcoin blockchains, as the 256-bit elliptic-curve key is as secure as a 3,072-bit
    RSA key. Smaller keys of the elliptic curves are more resource efficient as they
    need less storage.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed how Blockchain cryptography works in detail in *Chapter 1*, *Introduction
    to Quantum Computing and Blockchain*. Therefore, I will just briefly touch upon
    this topic to refresh your memory. The trapdoor functions, otherwise called **One-Way
    Functions** (**OWF**), are fundamental to Blockchain security. Users of the Blockchain
    create digital signatures using these functions that can be easily checked with
    the right key.
  prefs: []
  type: TYPE_NORMAL
- en: A cryptocurrency could be viewed as a chain of digital signatures. Every digital
    signature has a backward and a forward link, in that it signs the hash of the
    previous block and the public key of the new block. This can be treated as a handshake
    mechanism as ownership of a coin is transferred from one person to another all
    using digital signatures.
  prefs: []
  type: TYPE_NORMAL
- en: The transaction history on the Bitcoin network, for instance, is represented
    in blocks. Every block can hold multiple transactions. To add a block to the ledger,
    a mathematical condition needs to be met. The entire network keeps calculating
    to arrive at the solution for the mathematical condition (as per ECC), and once
    that is met, the block is added to the network.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, when someone wants to hack the Blockchain, it is not just a single
    transaction that they need to hack, but a whole chain of signatures. The brute
    force methods to hack these signatures would just not be a viable solution due
    to the resources needed to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various methods that have been tried to hack a Blockchain, and some
    have been successful too. We discussed this in *Chapter 1*, *Introduction to Quantum
    Computing and Blockchain*. Some of the key types of Blockchain attacks are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Smart contract attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction verification attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mining pool attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wallet attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these types of attacks on Blockchains are well-documented. More types
    of attacks are being identified and understood. As per GitHub, there are over
    30 different types of smart contract vulnerabilities that can be exploited by
    hackers of Blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Sybil attacks and Finney attacks are types of transaction verification attacks.
    Sybil attacks occur when an entire network is hacked by the attacker. In a Finney
    attack, the attacker mines a block, send the coins to someone willing to buy unconfirmed
    transactions for some goods, and then goes back to the network to confirm the
    transaction and gets the money back.
  prefs: []
  type: TYPE_NORMAL
- en: Network attacks involves a standard **Distributed Denial of Service** (**DDoS**),
    where a server is brought down by multiple requests taking its resources. A wallet
    attack involves using social engineering against the victim to attack their wallet.
    Blockchain hackers have already identified several ways to tap into the vulnerabilities
    of the framework.
  prefs: []
  type: TYPE_NORMAL
- en: However, most of them do not involve solving the encryption with the ease that
    the receiver of the transaction would. This is where quantum computing could prove
    to be lethal to Blockchain networks that rely on encryption techniques like ECC.
    Cracking ECC in Blockchains using quantum technologies could result in broken
    keys that keep assets safe. Therefore, hackers have higher incentives to target Blockchain
    networks, as they have economic value stored digitally.
  prefs: []
  type: TYPE_NORMAL
- en: There are Blockchains such as **QRL** (**Quantum-Resistant Ledger**) and IOTA
    that were developed using PQC. However, the majority of Blockchain applications
    still use ECC, which is not quantum-safe. Very much like the efforts of NIST to
    identify a quantum-proof cryptographic technique for the internet, we will need
    an industry-wide upgrade of Blockchains to keep the quantum threat at bay.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now look at some of the techniques that can make Blockchains more secure
    in the post-quantum world. Some of the techniques being used or explored by Blockchain
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**eXtended Merkle Signature Scheme** (**XMSS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blockchain Post-Quantum Signatures** (**BPQS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Winternitz One-Time Signatures** (**W-OTA**), as used by IOTA'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As I explain these three methods, it may become obvious that these are all interrelated
    techniques and have a lot in common. However, each of these techniques have their
    own applications they are more suitable for.
  prefs: []
  type: TYPE_NORMAL
- en: Security in a post-quantum world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cryptographic schemes are more secure as the hardness of the problem to be solved
    increases. In a post-quantum world, the ECC method becomes easily solvable for
    reasons we saw earlier. One of the alternatives that can be used to make encryption
    quantum-proof is using hash-based signature schemes. Let's look at XMSS, which
    uses hash functions.
  prefs: []
  type: TYPE_NORMAL
- en: eXtended Merkle Signature Scheme (XMSS)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: XMSS is one of the hash-based signature schemes that is being explored by QRL.
    There are two key aspects of XMSS that makes it a good candidate for post-quantum
    encryption. It uses a hash function, and it follows a **One-Time Signature** (**OTS**)
    system. It is also based on the Merkle signature scheme. The Merkle signature
    scheme was developed by Relph Merkle in 1970s and is quantum-resistant. As the
    Merkle signature scheme relies on secure hash functions, they can be categorized
    as PQC.
  prefs: []
  type: TYPE_NORMAL
- en: The public key in the Merkle signature scheme can only be used to sign a limited
    number of messages. In the case of the OTS methodology, it will typically be used
    to sign only one message. Therefore, on a Blockchain that follows OTS using the
    Merkle signature scheme, a public and a private key-pair needs to be generated
    for every signature. The public key in XMSS is generated by a **Pseudo Random
    Function** (**PRF**).
  prefs: []
  type: TYPE_NORMAL
- en: The following diagram of a Merkle tree should be able to bring its workings
    to life. In a Merkle tree there are typically *n* key-pairs generated, where *n*
    is a power of two. The top node compresses all the public keys through a concatenation
    of hash functions applied on to its child nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this scheme, when a sender sends a signature, it would contain the signature,
    the public key at the leaf node of the tree, the index of the leaf node sent,
    and an authentication path. This detail will prove that the key-pair sent is part
    of the Merkle tree. For instance, in the following tree diagram, if we were to
    use the key-pair with the leaf node *pk*[2], the sender will publish the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The signature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The leaf node (public key) – *pk*[2]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The index of the published key-pair – 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An authentication path of hash functions – *h*[3], *h*[8], and *h*[13] in this
    case
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The receiver will use this information to then compute the path from *pk*[2]
    to *h*[14]. Source: [https://pdfs.semanticscholar.org/f38c/562c21fa1a94871e5f577669f7c4b9520632.pdf](https://pdfs.semanticscholar.org/f38c/562c21fa1a94871e5f577669f7c4b9520632.pdf
    )'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B13910_15_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: A Merkle tree with 2³ OTS key pairs'
  prefs: []
  type: TYPE_NORMAL
- en: The OTS scheme combined with the hashing function makes the Blockchain more
    secure. Even if the hacker finds the private key, they are not able to break into
    the Blockchain as the previous transactions can't be forged. This is because the
    previous transactions would have used a different key-pair.
  prefs: []
  type: TYPE_NORMAL
- en: The private key in XMSS holds an index that is updated every time a signature
    is generated. In effect it holds information about the next unused OTS key-pair.
    A signature in this scheme holds the index of the OTS key-pair and the path on
    the Merkle tree. By holding the position of the nodes in the tree, the verifier
    can identify the root node. From the root node, the verifier can then compute
    the public key. If the public key matches, then signature is valid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Despite the secure hash function and using the OTS to make it even more secure,
    XMSS has its downsides. The keys are large, and if the trees grow in size, it
    can be resource intensive for small devices to use this technique. Source: [https://eprint.iacr.org/2018/658.pdf](https://eprint.iacr.org/2018/658.pdf
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Let's now take a look at the BPQS technique, which is being explored as an alternative
    for XMSS.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain Post Quantum Signatures (BPQS)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BPQS has been specifically designed to make it resource efficient while generating
    the key and signature and performing verification. These were all pain points
    in XMSS. BPQS is a variant of XMSS and it uses one authentication path instead
    of a tree. Therefore, it can be visualized as a chain of hash functions instead
    of a tree.
  prefs: []
  type: TYPE_NORMAL
- en: The BPQS can behave like an OTS scheme but can easily scale to multiple signatures
    too. Although the OTS scheme is viewed as secure, the applications of Blockchain
    can often necessitate the use of a key-pair for multiple signatures. For instance,
    if a charity is publishing its public key to receive funds, it may want to keep
    it for at least as long as a given fund-raising campaign runs. Therefore, despite
    the fact that BPQS is a variant of XMSS, it can theoretically support few time
    signatures.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, BPQS is seen as subset of XMSS that focuses on fast signatures. It
    still uses an OTS methodology (W-OTS) like XMSS. Therefore, instead of visualizing
    it as a full-fledged Merkle tree like in XMSS, we can perhaps visualize it as
    a chain of 2-leaf Merkle trees. The following diagram helps to visualize the XMSS
    tree chain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B13910_15_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Visualization of the XMSS tree chain. Source: [https://eprint.iacr.org/2018/658.pdf](https://eprint.iacr.org/2018/658.pdf
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Due to its properties, the BPQS method can be used in applications that sit
    at the convergence of Blockchain and the IoT. Let's now look at the W-OTS scheme
    that is being used by IOTA.
  prefs: []
  type: TYPE_NORMAL
- en: Winternitz One-Time Signatures (W-OTS)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We discussed that the XMSS uses an OTS scheme that is a variant of the W-OTS
    scheme. BPQS on the other hand uses W-OTS. The W-OTS is being used in one of the
    better known Blockchain applications, IOTA. IOTA is a distributed ledger technology
    developed by the IOTA foundation that uses the W-OTS methodology to make itself
    quantum-robust.
  prefs: []
  type: TYPE_NORMAL
- en: IOTA bundles up its transactions that are related or linked. The bundle hash
    is normalized to create a private key and a part of the key is revealed. Therefore,
    a key can be used only once to withdraw a given value. The private key goes through
    several operations to break it down into several fragments and is then processed
    through a hash function. A hash function called the kerl hash function is used
    to create the signature.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the other end, validation of the signature of a transaction is performed
    by using the bundle hash and the signature that is sent. The signature is processed
    in the reverse order to arrive at the fragments of the private key. This is then
    put through the hash function to arrive at the address. Source: [https://docs.iota.org/docs/getting-started/0.1/clients/signatures?q=QUantum&highlights=quantum](https://docs.iota.org/docs/getting-started/0.1/clients/signatures?q=QUantum&highlights=quantum
    )'
  prefs: []
  type: TYPE_NORMAL
- en: IOTA claim that their method is quantum-proof, and the complexity involved in
    the creation of the signature and validating it perhaps reflects this. To me,
    however, all this highlights the fact that we need real sophistication to combat
    the quantum threat.
  prefs: []
  type: TYPE_NORMAL
- en: We have now looked at three different types of quantum-proof cryptography that
    are used by Blockchain applications. However, these are the exceptions. The typical
    Blockchain developer creating an application using the Ethereum developer's framework
    wouldn't really have any idea of the quantum threat.
  prefs: []
  type: TYPE_NORMAL
- en: This needs to change. Every Blockchain developer needs to understand the impact
    that quantum computers could have on the value network they are creating for the
    world to use. Unlike the internet, which is more of an information network, a
    Blockchain can be used to hold assets and valuables. If it gets hacked, there
    is more at stake. Therefore, an understanding of network security is a basic aspect
    that every person designing and developing a Blockchain application must have.
  prefs: []
  type: TYPE_NORMAL
- en: It also goes to show that, much like the internet, where data security will
    need to be upgraded for post-quantum period, we will need Blockchains to be quantum-proof.
    This is especially true for ecosystems like Ethereum, which are used to build
    Blockchain applications across the world.
  prefs: []
  type: TYPE_NORMAL
- en: Every organization that is evaluating a Blockchain suite to create applications
    for their customers will need to ensure that they are quantum-proof. All these
    efforts will ensure that only the quantum-proof Blockchain platforms gain traction
    for industrial purposes. This will cause some attrition initially, but platforms
    that quickly adapt would soon be winners as a result of the course correction.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not just Blockchain that is on a collision course with quantum computing.
    It is almost the entire internet that is at risk. Quantum computing is a serious
    threat, not just to Blockchain platforms, but to all platforms using techniques
    like RSA and ECC. However, there are solutions in the form of quantum-proof cryptography
    for both the internet and the Blockchain industry. Adopting these techniques would
    necessitate careful consideration of the application and context in which these
    techniques will be deployed.
  prefs: []
  type: TYPE_NORMAL
- en: I must admit that this chapter has been quite a technical one. However, I have
    tried to simplify the narrative around cryptography as much as possible. I have
    covered the key cryptographic techniques, RSA and ECC, and their applications
    across the internet and Blockchain solutions.
  prefs: []
  type: TYPE_NORMAL
- en: I then touched upon how and why they are at risk once quantum computers go mainstream.
    There is still a lot of hype around when that will be. Some say it is 2027, some
    argue it could be 2031\. Google, IBM, and Microsoft have their own takes on how
    soon quantum supremacy could happen. Google is also known to be experimenting
    with LBC in their Chrome browser in preparation for the quantum era.
  prefs: []
  type: TYPE_NORMAL
- en: I have discussed the various techniques including LBC and CBC that can offer
    quantum-proofing for the internet. It is essential that the outcomes from the
    NIST challenge are not taken lightly and that there is a top-down global initiative
    to move to a quantum-proof internet.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed the Blockchain vulnerabilities in a post-quantum world, and why
    it is imperative for Blockchain applications to be quantum-proof. The Blockchain
    industry is going through a winter at the moment. I believe the industry needs
    to move toward quantum-proofing before it can re-emerge and start being relevant
    again. There are solutions such as XMSS and BPQS that Blockchain platforms can
    leverage to become more secure.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, despite the threat from quantum computers, there are solutions that
    the Blockchain industry can and should adopt to stay relevant. Despite the possibility
    of a collision between the two technologies, there are genuine opportunities for
    them to co-exist. The Blockchain industry needs to adapt to stay relevant in the
    post-quantum era.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we delved into the details of how information and value networks
    need to adapt to the post-quantum era. In the next chapter, we will look at how
    nation states are positioning themselves to tap into the informational advantage
    that quantum technologies could give them.
  prefs: []
  type: TYPE_NORMAL
