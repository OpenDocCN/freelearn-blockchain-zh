["```\noraclize_setProof(proofType_NONE)\n```", "```\noraclize_setProof(proofType_TLSNotary | proofStorage_IPFS)\n```", "```\noraclize_query(\"WolframAlpha\", \"random number between 0 and 100\"); \n\noraclize_query(\"URL\", \"https://api.kraken.com/0/public/Ticker?pair=ETHXBT\"); \n\noraclize_query(\"IPFS\", \"QmdEJwJG1T9rzHvBD8i69HHuJaRgXRKEQCP7Bh1BVttZbU\"); \n\noraclize_query(\"URL\", \"https://xyz.io/makePayment\", '{\"currency\": \"USD\", \"amount\": \"1\"}');\n```", "```\noraclize_query(60, \"WolframAlpha\", \"random number between 0 and 100\");\n```", "```\noraclize_query(\"WolframAlpha\", \"random number between 0 and 100\", 500000);\n```", "```\nfunction __callback(bytes32 myid, string result) { \n    if (msg.sender != oraclize_cbAddress()) throw; // just to be sure the calling address is the Oraclize authorized one \n\n    //now doing something with the result.. \n}\n```", "```\n    python encrypted_queries_tools.py -e -p 044992e9473b7d90ca54d2886c7addd14a61109af202f1c95e218b0c99eb060c7134c4ae46345d0383ac996185762f04997d6fd6c393c86e4325c469741e64eca9 \"YOUR DATASOURCE or INPUT\"\n```", "```\npragma Solidity ^0.4.0; \n\nimport \"github.com/Arachnid/Solidity-stringutils/strings.sol\"; \n\ncontract Contract \n{ \n    using strings for *; \n\n    function Contract() \n    { \n        //convert string to slice \n        var slice = \"xyz abc\".toSlice(); \n\n        //length of string \n        var length = slice.len(); \n\n        //split a string \n        //subslice = xyz \n        //slice = abc \n        var subslice = slice.split(\" \".toSlice()); \n\n        //split a string into an array \n        var s = \"www.google.com\".toSlice(); \n        var delim = \".\".toSlice(); \n        var parts = new string[](s.count(delim)); \n        for(uint i = 0; i < parts.length; i++) { \n            parts[i] = s.split(delim).toString(); \n        } \n\n        //Converting a slice back to a string \n        var myString = slice.toString(); \n\n        //Concatenating strings \n        var finalSlice = subslice.concat(slice); \n\n        //check if two strings are equal \n        if(slice.equals(subslice)) \n        { \n\n        } \n    } \n}\n```", "```\nvar slice1 = \"abc\".toSlice(); \n\n//moves the string pointer of slice1 to point to the next rune (letter) \n//and returns a slice containing only the first rune \nvar slice2 = slice1.nextRune(); \n\nvar slice3 = \"abc\".toSlice(); \nvar slice4 = \"\".toSlice(); \n\n//Extracts the first rune from slice3 into slice4, advancing the slice to point to the next rune and returns slice4\\. \nvar slice5 = slice3.nextRune(slice4);\n```", "```\npragma Solidity ^0.4.0; \n\nimport \"github.com/Oraclize/Ethereum-api/oraclizeAPI.sol\"; \nimport \"github.com/Arachnid/Solidity-stringutils/strings.sol\"; \n\ncontract Betting is usingOraclize \n{ \n    using strings for *; \n\n    string public matchId; \n    uint public amount; \n    string public url; \n\n    address public homeBet; \n    address public awayBet; \n\n    function Betting(string _matchId, uint _amount, string _url)  \n    { \n        matchId = _matchId; \n        amount = _amount; \n        url = _url; \n\n        oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS); \n    } \n\n    //1 indicates home team \n    //2 indicates away team \n    function betOnTeam(uint team) payable \n    { \n\n        if(team == 1) \n        { \n            if(homeBet == 0) \n            { \n                if(msg.value == amount) \n                { \n                    homeBet = msg.sender;    \n                    if(homeBet != 0 && awayBet != 0) \n                    { \n                        oraclize_query(\"URL\", url); \n                    } \n                } \n                else \n                { \n                    throw; \n                } \n            } \n            else \n            { \n                throw; \n            } \n        } \n        else if(team == 2) \n        { \n            if(awayBet == 0) \n            { \n                if(msg.value == amount) \n                { \n                    awayBet = msg.sender;           \n\n                    if(homeBet != 0 && awayBet != 0) \n                    { \n                        oraclize_query(\"URL\", url); \n                    } \n                } \n                else \n                { \n                    throw; \n                } \n            } \n            else \n            { \n                throw; \n            } \n        } \n        else \n        { \n            throw; \n        } \n    } \n\n    function __callback(bytes32 myid, string result, bytes proof) { \n        if (msg.sender != oraclize_cbAddress()) \n        { \n            throw;     \n        } \n        else \n        { \n            if(result.toSlice().equals(\"home\".toSlice())) \n            { \n                homeBet.send(this.balance); \n            } \n            else if(result.toSlice().equals(\"away\".toSlice())) \n            { \n                awayBet.send(this.balance); \n            } \n            else if(result.toSlice().equals(\"draw\".toSlice())) \n            { \n                homeBet.send(this.balance / 2); \n                awayBet.send(this.balance / 2); \n            } \n            else \n            { \n                if (Oraclize.getPrice(\"URL\") < this.balance)  \n                { \n                    oraclize_query(86400, \"URL\", url); \n                } \n            } \n        } \n    } \n}\n```", "```\ngeth --testnet --rpc --rpccorsdomain \"*\" --rpcaddr \"0.0.0.0\" --rpcport \"8545\"\n```", "```\nvar express = require(\"express\"); \nvar app = express(); \n\napp.set(\"view engine\", \"ejs\"); \n\napp.use(express.static(\"public\")); \n\napp.listen(8080); \n\napp.get(\"/\", function(req, res) { \n    res.sendFile(__dirname + \"/public/html/index.html\"); \n})\n```", "```\nvar request = require(\"request\"); \nvar moment = require(\"moment\"); \n\napp.get(\"/matches\", function(req, res) { \n    request(\"https://api.crowdscores.com/v1/matches?api_key=7b7a988932de4eaab4ed1b4dcdc1a82a\", function(error, response, body) { \n        if (!error && response.statusCode == 200) { \n            body = JSON.parse(body); \n\n            for (var i = 0; i < body.length; i++) { \n             body[i].start = moment.unix(body[i].start / \n               1000).format(\"YYYY MMM DD hh:mm:ss\"); \n            } \n\n            res.render(__dirname + \"/public/html/matches.ejs\", { \n                matches: body \n            }); \n        } else { \n            res.send(\"An error occured\"); \n        } \n    }) \n})\n```", "```\nvar PythonShell = require(\"python-shell\"); \n\napp.get(\"/getURL\", function(req, res) { \n    var matchId = req.query.matchId; \n\n    var options = { \n        args: [\"-e\", \"-p\", \"044992e9473b7d90ca54d2886c7addd14a61109af202f1c95e218b0c99eb060c7134c4ae46345d0383ac996185762f04997d6fd6c393c86e4325c469741e64eca9\", \"json(https://api.crowdscores.com/v1/matches/\" + matchId + \"?api_key=7b7a988932de4eaab4ed1b4dcdc1a82a).outcome.winner\"], \n        scriptPath: __dirname \n    }; \n\n    PythonShell.run(\"encrypted_queries_tools.py\", options, function \n      (err, results) { \n        if(err) \n        { \n            res.send(\"An error occured\"); \n        } \n        else \n        { \n            res.send(results[0]); \n        } \n    }); \n})\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head> \n         <meta charset=\"utf-8\"> \n         <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> \n         <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"> \n         <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\"> \n     </head> \n     <body> \n         <div class=\"container\"> \n             <br> \n             <div class=\"row m-t-1\"> \n                 <div class=\"col-md-12\"> \n                     <a href=\"/\">Home</a> \n                 </div> \n             </div> \n             <br> \n             <div class=\"row\"> \n                 <div class=\"col-md-12\"> \n                     <table class=\"table table-inverse\"> \n                           <thead> \n                             <tr> \n                                 <th>Match ID</th> \n                                 <th>Start Time</th> \n                                 <th>Home Team</th> \n                                 <th>Away Team</th> \n                                 <th>Winner</th> \n                             </tr> \n                           </thead> \n                           <tbody> \n                               <% for(var i=0; i < matches.length; i++) { %> \n                                   <tr> \n                                       <td><%= matches[i].dbid %></td> \n                                       <% if (matches[i].start) { %> \n                                        <td><%= matches[i].start %></td> \n                                     <% } else { %> \n                                         <td>Time not finalized</td> \n                                     <% } %> \n                                       <td><%= matches[i].homeTeam.name %></td> \n                                       <td><%= matches[i].awayTeam.name %></td> \n                                       <% if (matches[i].outcome) { %> \n                                        <td><%= matches[i].outcome.winner %></td> \n                                     <% } else { %> \n                                         <td>Match not finished</td> \n                                     <% } %> \n                                 </tr> \n                             <% } %> \n                           </tbody> \n                     </table> \n                 </div> \n             </div> \n         </div> \n     </body> \n </html>\n```", "```\n<!DOCTYPE html> \n <html lang=\"en\"> \n     <head> \n         <meta charset=\"utf-8\"> \n         <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> \n         <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"> \n         <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\"> \n     </head> \n     <body> \n         <div class=\"container\"> \n             <br> \n             <div class=\"row m-t-1\"> \n                 <div class=\"col-md-12\"> \n                     <a href=\"/matches\">Matches</a> \n                 </div> \n             </div> \n             <br> \n             <div class=\"row\"> \n                 <div class=\"col-md-4\"> \n                     <h3>Deploy betting contract</h3> \n                     <form id=\"deploy\"> \n                         <div class=\"form-group\"> \n                             <label>From address: </label> \n                             <input type=\"text\" class=\"form-control\" id=\"fromAddress\"> \n                         </div> \n                         <div class=\"form-group\"> \n                             <label>Private Key: </label> \n                             <input type=\"text\" class=\"form-control\" id=\"privateKey\"> \n                         </div> \n                         <div class=\"form-group\"> \n                             <label>Match ID: </label> \n                             <input type=\"text\" class=\"form-control\" id=\"matchId\"> \n                         </div> \n                         <div class=\"form-group\"> \n                             <label>Bet Amount (in ether): </label> \n                             <input type=\"text\" class=\"form-control\" id=\"betAmount\"> \n                         </div> \n                         <p id=\"message\" style=\"word-wrap: break-word\"></p> \n                         <input type=\"submit\" value=\"Deploy\" class=\"btn btn-primary\" /> \n                     </form> \n                 </div> \n                 <div class=\"col-md-4\"> \n                     <h3>Bet on a contract</h3> \n                     <form id=\"bet\"> \n                         <div class=\"form-group\"> \n                             <label>From address: </label> \n                             <input type=\"text\" class=\"form-control\" id=\"fromAddress\"> \n                         </div> \n                         <div class=\"form-group\"> \n                             <label>Private Key: </label> \n                             <input type=\"text\" class=\"form-control\" id=\"privateKey\"> \n                         </div> \n                         <div class=\"form-group\"> \n                             <label>Contract Address: </label> \n                             <input type=\"text\" class=\"form-control\"\nid=\"contractAddress\"> \n                         </div> \n                         <div class=\"form-group\"> \n                             <label>Team: </label> \n                             <select class=\"form-control\" id=\"team\"> \n                                 <option>Home</option> \n                                 <option>Away</option> \n                             </select> \n                         </div> \n                         <p id=\"message\" style=\"word-wrap: break-word\"></p> \n                         <input type=\"submit\" value=\"Bet\" class=\"btn btn-primary\" /> \n                     </form> \n                 </div> \n                 <div class=\"col-md-4\"> \n                     <h3>Display betting contract</h3> \n                     <form id=\"find\"> \n                         <div class=\"form-group\"> \n                             <label>Contract Address: </label> \n                             <input type=\"text\" class=\"form-control\"  \n d=\"contractAddress\"> \n                         </div> \n                         <p id=\"message\"></p> \n                         <input type=\"submit\" value=\"Find\" class=\"btn btn-primary\" /> \n                     </form> \n                 </div> \n             </div> \n         </div> \n\n         <script type=\"text/javascript\" src=\"img/web3.min.js\"></script> \n         <script type=\"text/javascript\" src=\"img/ethereumjs-tx.js\"></script> \n         <script type=\"text/javascript\" src=\"img/main.js\"></script> \n     </body> \n</html>\n```", "```\nvar bettingContractByteCode = \"6060604...\"; \nvar bettingContractABI = [{\"constant\":false,\"inputs\":[{\"name\":\"team\",\"type\":\"uint256\"}],\"name\":\"betOnTeam\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"matchId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"homeBet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"awayBet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_matchId\",\"type\":\"string\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_url\",\"type\":\"string\"}],\"payable\":false,\"type\":\"constructor\"}]; \n\nvar web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\")); \n\nfunction getAJAXObject() \n{ \n   var request; \n   if (window.XMLHttpRequest) { \n       request = new XMLHttpRequest(); \n   } else if (window.ActiveXObject) { \n       try { \n           request = new ActiveXObject(\"Msxml2.XMLHTTP\"); \n       } catch (e) { \n           try { \n               request = new ActiveXObject(\"Microsoft.XMLHTTP\"); \n           } catch (e) {} \n       } \n   } \n\n   return request; \n} \n\ndocument.getElementById(\"deploy\").addEventListener(\"submit\", function(e){ \n   e.preventDefault(); \n\n   var fromAddress = document.querySelector(\"#deploy #fromAddress\").value; \n   var privateKey = document.querySelector(\"#deploy #privateKey\").value; \n   var matchId = document.querySelector(\"#deploy #matchId\").value; \n   var betAmount = document.querySelector(\"#deploy #betAmount\").value; \n\n   var url = \"/getURL?matchId=\" + matchId; \n\n   var request = getAJAXObject(); \n\n   request.open(\"GET\", url); \n\n   request.onreadystatechange = function() { \n       if (request.readyState == 4) { \n           if (request.status == 200) { \n               if(request.responseText != \"An error occured\") \n               { \n           var queryURL = request.responseText; \n\n           var contract = web3.eth.contract(bettingContractABI); \n           var data = contract.new.getData(matchId, \n             web3.toWei(betAmount, \"ether\"), queryURL, { \n               data: bettingContractByteCode \n                }); \n\n           var gasRequired = web3.eth.estimateGas({ data: \"0x\" + data\n             }); \n\n      web3.eth.getTransactionCount(fromAddress, function(error, nonce){ \n\n       var rawTx = { \n            gasPrice: web3.toHex(web3.eth.gasPrice), \n             gasLimit: web3.toHex(gasRequired), \n              from: fromAddress, \n               nonce: web3.toHex(nonce), \n                data: \"0x\" + data, \n                 }; \n\n      privateKey = EthJS.Util.toBuffer(privateKey, \"hex\"); \n\n       var tx = new EthJS.Tx(rawTx); \n       tx.sign(privateKey); \n\n      web3.eth.sendRawTransaction(\"0x\" + \n       tx.serialize().toString(\"hex\"), function(err, hash) { \n            if(!err) \n                {document.querySelector(\"#deploy #message\").\n                   innerHTML = \"Transaction Hash: \" + hash + \". \n                     Transaction is mining...\"; \n\n            var timer = window.setInterval(function(){ \n            web3.eth.getTransactionReceipt(hash, function(err, result){ \n            if(result) \n             {window.clearInterval(timer); \n       document.querySelector(\"#deploy #message\").innerHTML = \n         \"Transaction Hash: \" + hash + \" and contract address is: \" + \n             result.contractAddress;} \n               }) \n                }, 10000) \n                 } \n             else \n           {document.querySelector(\"#deploy #message\").innerHTML = err; \n             } \n           }); \n          }) \n\n          } \n           } \n       } \n   }; \n\n   request.send(null); \n\n}, false) \n\ndocument.getElementById(\"bet\").addEventListener(\"submit\", function(e){ \n   e.preventDefault(); \n\n   var fromAddress = document.querySelector(\"#bet #fromAddress\").value; \n   var privateKey = document.querySelector(\"#bet #privateKey\").value; \n   var contractAddress = document.querySelector(\"#bet #contractAddress\").value; \n   var team = document.querySelector(\"#bet #team\").value; \n\n   if(team == \"Home\") \n   { \n         team = 1; \n   } \n   else \n   { \n         team = 2; \n   }  \n\n   var contract = web3.eth.contract(bettingContractABI).at(contractAddress); \n   var amount = contract.amount(); \n\n   var data = contract.betOnTeam.getData(team); \n\n   var gasRequired = contract.betOnTeam.estimateGas(team, { \n         from: fromAddress, \n         value: amount, \n         to: contractAddress \n   }) \n\n   web3.eth.getTransactionCount(fromAddress, function(error, nonce){ \n\n         var rawTx = { \n           gasPrice: web3.toHex(web3.eth.gasPrice), \n           gasLimit: web3.toHex(gasRequired), \n           from: fromAddress, \n           nonce: web3.toHex(nonce), \n           data: data, \n           to: contractAddress, \n           value: web3.toHex(amount) \n       }; \n\n       privateKey = EthJS.Util.toBuffer(privateKey, \"hex\"); \n\n       var tx = new EthJS.Tx(rawTx); \n         tx.sign(privateKey); \n\n         web3.eth.sendRawTransaction(\"0x\" + tx.serialize().toString(\"hex\"), function(err, hash) { \n               if(!err) \n               { \n    document.querySelector(\"#bet #message\").innerHTML = \"Transaction \n      Hash: \" + hash; \n        } \n      else \n       { \n       document.querySelector(\"#bet #message\").innerHTML = err; \n      } \n     }) \n   }) \n    }, false) \n\ndocument.getElementById(\"find\").addEventListener(\"submit\", function(e){ \n   e.preventDefault(); \n\n   var contractAddress = document.querySelector(\"#find \n     #contractAddress\").value; \n   var contract =  \n      web3.eth.contract(bettingContractABI).at(contractAddress); \n\n   var matchId = contract.matchId(); \n   var amount = contract.amount(); \n   var homeAddress = contract.homeBet(); \n   var awayAddress = contract.awayBet(); \n\n   document.querySelector(\"#find #message\").innerHTML = \"Contract balance is: \" + web3.fromWei(web3.eth.getBalance(contractAddress), \"ether\") + \", Match ID is: \" + matchId + \", bet amount is: \" + web3.fromWei(amount, \"ether\") + \" ETH, \" + homeAddress + \" has placed bet on home team and \" + awayAddress + \" has placed bet on away team\"; \n}, false)\n```"]