- en: Introducing Blockchain and Ethereum
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once in several years, we see the birth of revolutionary technologies with
    the capability to disrupt a wide range of business models. In this chapter, the
    blockchain will be introduced with an insight into the technology and its business
    use cases. Blockchain is a concept that originated to avoid third-party involvement
    in any financial transaction in a whitepaper named *Bitcoin: A Peer-to-Peer Electronic
    Cash System,* by *Satoshi Nakamoto*. We will also be discussing the types of blockchain-based
    business needs, cryptography, and consensus, which mitigate the risk of fraud.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: What is blockchain?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet versus blockchain
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The building blocks of blockchain
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum blockchain
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private versus public blockchains
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business adaptation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is blockchain?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like every other day, you are enjoying your morning with a cup of coffee
    and newsfeeds. At the same time, somewhere, a financially motivated hacker is
    finding all of the possible ways to compromise millions of users accounts for
    a widely used social networking site. The hacker is successful in gaining access
    to the database and exfiltrated a large amount of credentials.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'After around 180 days, this massive credential theft is revealed publicly,
    and you find out that you are also one of the people who has been targeted. Just
    like you, millions of other users also have a good reason to be worried about
    their attached trust and privacy. The examples range from the latest Equifax 2017
    Data Breach case (143 million credentials compromised) to the Adult Friend Finder
    2016 case (413 million account thefts), the Anthem 2015 case (78 million accounts
    were hacked), and many more. None of the preventive solutions can be 100 % secure,
    but finding out what the problem was at the right time could have saved the misuse
    of these accounts. What if a technology can do the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Detect who looks at a person's account and change it?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that data concerning the person is not misused?
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This sounds like a smart thing to use, but it's not that difficult to implement.
    This is what a blockchain does. In a nutshell, it's nothing but a smart, safe,
    and a constantly growing database. Blockchain is a chronological ledger that records
    transactions of any value or asset securely. The blockchain network provides the
    ability to transfer any type of value or asset between independent parties using
    a peer-to-peer network. The initial objective of the blockchain technology was
    to establish trusted financial transactions between two independent parties without
    any involvement of third-parties such as a bank; however, later, several industries
    adopted blockchain to streamline their supply-chain process, KYC system, data
    management, and so on. With the growing use of online services and a growing number
    of online transactions, users have to trust and depend on third parties such as
    banks and payment gateway providers. This led to the birth of the blockchain.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: A brief history
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In 2009, a whitepaper called *Bitcoin: A Peer-to-Peer Electronic Cash System* was
    released by *Satoshi Nakamoto* to solve the existing financial market challenges.
    This whitepaper focused on developing a platform to allow online payments from
    one party to another without going through financial institutions. One of the
    major addressed challenges was about the double method, which is used to avoid
    the double spending (a unique problem with digital currency is the risk of reproducing
    the same amount, even after spending it) of Bitcoin. As Bitcoin is digital money
    and it isn''t difficult to copy digital data and announce it, double-spending
    occurred and a solution was proposed to prevent this—this was blockchain. However,
    Nakamoto''s original paper does not mention the word blockchain; it first appeared
    as *block chain* in a Bitcoin source code comment.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentals of the blockchain
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Blockchain is a decentralized database that keeps records of all transactions
    secure and in an append-only fashion. Blockchain became rapidly popular among
    numerous industries because of its decentralized nature regarding its database.
    For an organization that can''t afford a single point of failure, the blockchain
    database makes it practically impossible for sensitive information to be compromised
    by cyber criminals. Also, blockchain isn''t just managed by trusted administrators
    or developers; it is well-managed by anyone who can be either trusted or from
    a known or unknown party. The following diagram is a graphical representation
    of the blockchain network:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d94344d4-231c-485f-af82-90f5a61dc608.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: Each internet-connected computer needs to have blockchain node software and
    run application specific to blockchain ecosystem. Depending on the use cases,
    participation of these computers can be restricted. For example, blockchain based
    ecosystem bankchain only permits banks to run the bankchain node client application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Who is using blockchain and how?
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the current era of technology, other than any buzz technology, blockchain
    has the capability to enter any industry as a disrupter. This could be to reduce
    operational expenditure, overcome cyber security-related issues, to deliver identity
    and access management solutions, to facilitate a collaboration from private to
    public institutions, to achieve a better data management system, to enhance and
    simplify logistic and supply-chain management, to allow a seamless insurance sale
    and management system, or to deploy a better health-record database system to
    protect people against any data theft or espionage attempt.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Internet versus blockchain
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The internet is a more than 30-year-old technology with the purpose of sharing
    information over TCP/IP and the **Open Systems Interconnection** (**OSI**) model
    stack. From the birth of the internet, every new technology had disrupted an existing
    one, whether it was email or the web, or even e-commerce. The internet is one
    of the strongest technologies that has been powerful enough to spread out ideas
    to impact and create illusions for reality.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: TCP/IP was the first internet protocol suite built to standardize the communication
    between similar networks; however, the OSI model was developed by the **International
    Standard Organization** (**ISO**) to provide a framework to standardize communication
    between systems, irrespective of the vendors, models, and technologies. Organizations
    preferred both models for client/server communication because client/server networks
    tend to be much more reliable and stable in nature. It was important to have to
    a better control over what data customers were using and how they were using it.
    In a client/server model, a client manages their own local resources, such as
    hardware and software components of a workstation or any device, whereas a server
    is a highly powerful system that manages shared resources such as hardware, network
    communication channels, and databases. With a peer-to-peer network, there is no
    central authority to monitor, control, and enforce. Although small businesses
    used to prefer this for their internal needs, big organizations have always been
    away from peer-to-peer networks because of the risk of losing control over their
    business operation and management.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are a few moments in this journey of connecting worlds that
    redefined innovation and facilitated mediums for every businesses needs. It was
    blockchain, a peer-to-peer network of independent nodes to share any kind of value
    without any third-party involvement. The evolution of computing was first started
    with mainframe computing, and, after a decade, the internet came into existence.
    Cloud computing was generally defined by Professor *Ramnath Chellappa* in 1997,
    and Amazon launched its **Elastic Compute Cloud** (**EC2**) service in 2006\.
    We are now in the era of a new breed of computing that has changed the way data''s
    stored safely and securely. Take a look at the following diagram:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb701234-a63a-4151-9752-66b842adb3a8.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: IP packet versus block
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Everything we do over the internet goes through IP packets over the TCP/IP model.
    An IP packet is the smallest unit of data that can be sent over the internet.
    An IP packet has two components—an **IP header** and a **payload**.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: To send this information, it needs a source and a destination IP addresses.
    A block is the integral element for this process; it is chained together to form
    a blockchain. Block also has two components—**block header** and **block body**.
    To send any type of value or transaction, it adds its own digital signature as
    the source identifier and public key, which resembles the destination's identity
    in the peer-to-peer network.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Web app versus dApp
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A web app is simply a web-based application, which is widely used in client-server
    models to serve users. However, **d****ecentralized application** (**dApp**) is
    an application that runs on a peer-to-peer network of computers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The traditional web application uses CSS, HTML, and JavaScript to render a front
    end page. It fetches the data from a database through an API call. dApp's frontend
    uses the exact same technique to render the page but instead of calling the API,
    dApp uses a smart contract that connects to the blockchain.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: How it works?
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s understand the workings of the blockchain ledger in its simplest form.
    To understand the system in its generic form, it is important to use several states
    of blockchain and explore them further:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '**Transaction preparation:** At this stage, party *A* creates a transaction
    that includes information including the public address of the receiver, a source
    digital signature, and a transaction message. Now this transaction is made available
    to all of the nodes in the blockchain.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Transaction verification: **The blockchain nodes work in a trustless model,
    where each node (the machine running the blockchain client software) receives
    this transaction, and verifies the digital signature with party *A''s* public
    key. After successful verification, this authenticated transaction is parked in
    the ledger queue and waits until all the nodes successfully verify the same transaction.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Block generation: **The queued transactions are arranged together and a block
    is created by one of the nodes in the network. In the Bitcoin blockchain, Bitcoins
    are rewarded when a Bitcoin node, also known as a **miner**, creates a block by
    solving some mathematically complex problem.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Block validation: **After a successful block generation, nodes in the network
    are processed for an iterative validation process where the majority of the nodes
    have to acquire consensus. There are four popular ways to achieve consensus, such
    as **Proof of Work** (**PoW**), **Proof of Stack** (**PoS**), **Delegated Proof
    of Stack** (**DPoS**), and **Practical Byzantine Fault Tolerance** (**PBFT**).
    Bitcoin uses PoW to achieve consensus; however, Ethereum uses PoS for consensus.
    This mechanism impacts financial aspects and ensures the security of entire transaction
    operations.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Block chained**: After a successful consensus mechanism, the blocks are verified
    and are added to the blockchain.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The several states of the blockchain can be seen in the following diagram:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51f537df-1cb7-45c2-a84c-61a47f6e2dbe.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: The building blocks of blockchain
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blockchain technology is built over a group of existing technologies that have
    been widely used across the industry. Let's go through each component of blockchain
    that makes the entire system distributed, immutable, and reliable in nature.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Block
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A distributed ledger is stored in a database and updated by each participant
    in the blockchain network. A ledger is represented in a series of units called
    blocks. To understand the block, lets start with the under traditional data model
    and then jump to blockchain network to understand how the block is getting chained
    together.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first understand the regular way of information exchange over the internet.
    In the world of the TCP/IP stack, information is transferred through a client/server
    model where the client can store and modify the data on a centralized server.
    However, the control of the database remains with a designated administrator.
    If the security of the administrator is compromised, the entire database can be
    altered or deleted. Theoretically, a server is no different from a user machine;
    however, in practice, the purpose of a server is to serve several end users concurrently.
    Take a look at the following diagram:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f3295b5-9583-4a2e-beee-10a7db9c72cf.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: 'The blockchain network consists of a network of several independent machines
    named **nodes**. Unlike traditional databases that store entire information on
    a centralized database server, Blockchain nodes keep the copy of the entire database
    with an administrative role. Even if one node goes down, the information will
    remain available for the nodes, as shown in the following diagram:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9445a9d0-c11d-422d-983f-70145833b543.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: 'The moment a node joins the blockchain network, it downloads the updated blockchain
    ledger. Each node is responsible for managing and updating its ledger with validated
    blocks. The node maintains the ledger and organizes it in the form blocks connected
    to the hashing algorithm, as shown in the following diagram:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5b4bf59-e0ee-4539-875a-7f85f91986f9.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: 'Multiple transactions are bundled together to form a block, and in its simplest
    way, it''s a data structure. Every cryptocurrency has its own blockchain with
    its own customized properties. For example, a block in a Bitcoin blockchain is
    generated every 10 minutes and the size of each block is 1 MB, whereas a block
    in an Ethereum blockchain is generated every 12-14 seconds, and the size of each
    block is 2 KB. Take a look at the following diagram:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12e626d9-db35-4a93-b390-c54ed69581e4.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: 'Let''s understand more about blocks. A block consists of a block header and
    a block body:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '**Block header**: A block header helps us identify a specific block in the
    blockchain. It contains set of metadata:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3a4b026f-9146-4a24-b532-d6371a8d5c2f.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: 'The components of the block are explained as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '**Version**: It''s a 4-byte field that''s used to track software or protocol
    grades.'
  id: totrans-60
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timestamp**: This is a 4-byte field that indicates the creation time of the
    block in seconds.'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hash of the previous block**: This is a 32-byte field that indicates the
    hash of the previous block in the chain.'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nonce**: This is a 4-byte field that''s used to track the PoW algorithm counter.'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hash of Merkle root**: This is a 32-byte field that is a hash of the root
    of the Merkle tree of the block transaction.'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Block body**: This part of the block consists of a list of transactions.
    In the Bitcoin world, one block consists of more than 500 transactions on average.
    Each transaction has to be digitally signed; otherwise, it is treated as invalid.
    To do that, a hashing function is used to apply the algorithm over an actual transaction
    with a private key/secret key.'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptography – digital signature and hashing algorithm
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cryptographic hashing is a way to generate a fixed-length output against any
    given length of input string. The output is named hash or message digest, and
    is designed to protect the integrity of any kind of data, such as a file, media,
    or text. Only one message digest is assigned to protect a specific input or sensitive
    information. A small change made to the input data results in a drastic difference
    in the result, which makes it almost impossible to predict the data either in-motion
    or even at-rest. There are various ways to produce the hash or the message digest.
    In the world of cryptocurrency, and Bitcoin being a popular one, the SHA-265 algorithm
    is used to produce a fixed-length 256 bit hash or message digest against each
    block.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Let's understand how the SHA-256 algorithm works. There are several free web
    tools available to generate a SHA-256 hash. We are using the following website
    for demonstration purposes at [https://passwordsgenerator.net/sha256-hash-generator/](https://passwordsgenerator.net/sha256-hash-generator/).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by generating a Hash:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'The first input message is this:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The second input message is this:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Third, in the context of cryptocurrency, the input message is this:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To ensure that the transferred file is not corrupted, the receiver can always
    compare the calculated hash with a given hash to know the author of the file or
    any of its content. In the world of blockchain, hashing is the backbone of its
    immutability characteristic. The hashing process ensures that none of the blocks
    in the ledger are altered or tampered with. Instead of keeping track of each transaction's
    details such as `Mike pays $20 to John on July 20, 2017`, `Kevin Legal document
    has been received dated September 21, 2017`, and `Tom has completed a trip from
    Houston to Dallas on November 22, 2017`, blockchain and nodes just have to remember
    and keep a track of its respective hash.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s understand how the blockchain makes use of the hashing algorithm. In
    blockchain, a node arranges the entire ledger in the form of chronologically connected
    blocks. To ensure that the ledger remains tamper-proof, each block is made dependable
    on the previous block. In other words, a new block can''t be produced without
    having the hash of a previous block. Before adding a new block in the ledger,
    this has to be approved and verified by every node in the blockchain. This allows
    anyone to tamper or alter the ledger except in the case of a hacker, who is capable
    enough of infecting and compromising all of the millions of nodes in the blockchain
    at the same time. Only the first block called the *genesis block* is produced
    itself and points to itself. The following diagram shows the simplified Bitcoin
    blockchain:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/099234e5-d229-4201-abe4-9b4c4e58ccd9.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: 'Every block points to the hash of previous hash block, and this becomes the
    backbone of the blockchain''s immutable system. Now, even if a block in-between
    is altered or disturbed by any means, a hacker can never achieve the same blockchain
    as a small change in the block can result in a drastic change in the resulting
    hash. With thousands upon thousands of transactions in every block, it becomes
    extremely difficult to find one transaction that won''t be time-consuming and
    process-sensitive. To avoid this complex work, a comprehensive hash tree has been
    developed named the Merkle tree. The following diagram shows the Merkle tree:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9817a7e2-ed95-4267-8a78-6827d27e4050.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: The purpose of the hash arrangement is to simplify the process of locating a
    single transaction hash out of thousands.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Digital signatures already work in the core of many organization's security
    controls by providing authenticity of transmitted data and preventing forgery.
    Digital signatures ensure that the transactions are happened between two validated
    and authenticated parties. In the physical world, everyone is identified by their
    unique and permanent national identity number, such as a **social security number**
    (**SSN**) in the US, a **National Registration Identity Card** (**NRIC**) in Singapore,
    a **National Insurance Number** (**NINO**) in the UK, a **Unique Identification
    Authority of India** (**UIDAI**) in India, and many more. Government bodies keep
    track of every financial transaction, property transaction, and legal transaction
    among citizens and the government itself, based on their unique identification
    numbers that carry information regarding their personal details and even biometric
    details, which is then verified when they complete a transaction. In the digital
    world, digital signatures play a critical role in ensuring transactions between
    two authenticated parties. Now let's understand why blockchain needs a digital
    signature.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 数字签名已经在许多组织的安全控制核心中起着作用，确保传输数据的真实性并防止伪造。数字签名确保交易发生在两个经过验证和认证的当事人之间。在现实世界中，每个人都是通过其独特和永久的国民身份号码进行身份验证，例如美国的**社会安全号码**（SSN），新加坡的**国民登记身份证**（NRIC），英国的**国民保险号码**（NINO），印度的**印度独特身份机构**（UIDAI）等。政府机构根据其唯一身份号码进行财务交易、财产交易和公民与政府之间的法律交易的跟踪，其中包含有关其个人详细信息甚至生物特征信息的信息，在完成交易时将进行验证。在数字世界中，数字签名对于确保两个经过验证的当事人之间的交易至关重要。现在让我们了解为什么区块链需要数字签名。
- en: 'In the blockchain technology, each node maintains a blockchain ledger with
    an administrative role. Anyone can add their transaction into the ledger with
    its own digital identity. The good and the bad news related to the blockchain
    technology is as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链技术中，每个节点都保持着一个具有行政角色的区块链总账。任何人都可以使用自己的数字身份将其交易添加到总账中。与区块链技术相关的好消息和坏消息如下所示：
- en: '**Bad news**: Digital identity is all about 1s and 0s, which makes for a higher
    probability of forgery. Any of the parties can attempt a fraud entry to the ledger
    by simply copying the digital identity of the victim node.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**坏消息**：数字身份全部由1和0组成，这增加了伪造的可能性。任何一方都可以通过简单地复制受害节点的数字身份来尝试在总账中进行欺诈性记录。'
- en: '**Good news**: The blockchain network makes use of private and public key pairs.
    Each node will have its own private and public key pair. Digital signatures and
    hashing work together with blockchain to understand how both fundamental technologies
    work hand-in-hand to keep blockchain working with high-grade security.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**好消息**：区块链网络利用私钥和公钥对。每个节点都有自己的私钥和公钥对。数字签名和哈希与区块链共同工作，以了解这两种基本技术如何携手保持区块链具有高级别的安全性。'
- en: Let's say that party *A* wants to send a transaction information to party *B*.
    To keep our focus on blockchain, Bitcoin mining has been removed, though performing
    a financial transaction needs to have a successful mining process. Party *A* has
    a transaction due, and it is ready to announce it. The message is `Party A sends
    $200 to Party B on July 23, 2017 at 03:00 EST`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 假设甲方想要向乙方发送交易信息。为了保持我们对区块链的关注，已经移除了比特币挖掘，尽管进行财务交易仍然需要成功的挖掘过程。甲方有一笔交易，准备宣布。消息是`Party
    A sends $200 to Party B on July 23, 2017 at 03:00 EST`。
- en: 'To avoid any kind of forgery, party *A* has to use an asymmetric key-pair,
    also known as a private/public key pair. The information is signed by the private
    key, and this remains private with party *A*.  Let''s assume that  party *A* has
    a  private key or a secret key of `Blockchain#123`, and the message is  `Party
    A sends $200 to Party B on July 23, 2017 at 03:00 EST`. Signing the message with
    the SHA256 message digest algorithm would look as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免任何伪造，甲方必须使用非对称密钥对，也称为私钥/公钥对。信息由私钥签名，并且这仍然是甲方的私人信息。假设甲方有一个私钥或秘钥`Blockchain#123`，消息是`Party
    A sends $200 to Party B on July 23, 2017 at 03:00 EST`。使用SHA256消息摘要算法签名消息将如下所示：
- en: '![](img/1495295a-8cad-439d-a548-39628098dfb5.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1495295a-8cad-439d-a548-39628098dfb5.png)'
- en: 'Readers can also perform the same operation with the tool mentioned in the
    link at [https://www.freeformatter.com/hmac-generator.html](https://www.freeformatter.com/hmac-generator.html). The
    following is the computed **Hash-based Message Authentication Code** (**HMAC**):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/501432e2-616b-4813-a9e6-ca6e5d371e87.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: Now, each transaction consists of three important elements—the digital signature
    that resembles the source address, the public key that indicates the destination,
    and finally the transaction's information.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: This transaction reaches party *B* as well as the other participants who verified
    this transaction with a public key. After successful validation, the transaction
    is confirmed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Consensus – the core of blockchain
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consensus is an integral component of the blockchain system and is responsible
    for achieving agreement in a distributed environment. The open and trustless nature
    of blockchain is the heart of blockchain; however, it is also important to pay
    attention to the additional care and the strict process. As anyone can participate
    and submit information, it is critical to evaluate each participant''s agenda,
    and making everyone agree to a desired policy is beneficial in avoiding any fraud
    attempts. This gave birth to the consensus mechanism, which is similar to the
    signaling process, to ensure that everything has been considered before actual
    communication is started. The following are four key methods that are used to
    achieve consensus with blockchain:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '**PoW**: One of the most popular methods to achieve consensus in blockchain
    was invented by Satoshi Nakamoto, the founder of Bitcoin. In this type of consensus,
    fraud attempt is avoided based on the fundamentals of trusting a particular node
    that has been created to do maximum computational work. The block owner, also
    known as a **miner** in the world of cryptocurrency, knows that having powerful
    computational resources can achieve a better hash rate, and the chances of getting
    rewarded with Bitcoin increases. A new transaction is broadcast to all the nodes
    in the network, and each node keeps listening to these transactions. Nodes that
    want to gain incentives through bitcoin are known as miners, but they don''t just
    listen, they collect transactions. Miners have to solve some complex mathematical
    problems with a PoW algorithm. The one who solves it first gets rewarded with
    Bitcoin. Finally, verified blocks are added to the blockchain of every miner.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This mathematical problem is nothing but the process of achieving a desired
    hash with hashing applied to a set of transactions and a nonce (a 32-bit random
    number). If the output results in a hash that is smaller than the target hash,
    the miner wins the block and achieves the consensus. When a miner wins the block,
    each block carries a set of **bitcoin** (**BTC**), which they then receive:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '`Jan 2009-Nov 2012`: It was 50 BTC per block'
  id: totrans-97
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Nov 2012-Jul 2016`: It was 25 BTC per block'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Jul 2016-Feb 2020`: It is 12.5 BTC per block'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Feb 2020-Sep 2023`: It is going to be 6.25 BTC per block'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PoS**: This is another method to achieve consensus in the blockchain among
    nodes and to validate transactions. Unlike PoW, with PoS, the block generator
    will not be selected based on its current stack of wealth. Blocks are never rewarded
    in this mechanism, and the miner in PoS is called a **forger**. Ethereum uses
    PoS, and the purpose of choosing this was to avoid any environmental pressures
    that come with a huge amount of electricity consumption. According to the Digiconomist
    report 2017, the power consumed by an entire Bitcoin network was estimated to
    be more than that of the Republic of Ireland. Bitcoin uses the PoW mechanism,
    and it is all based on miners with powerful resources, which results in more consumption
    of electricity. With the PoS mechanism, nodes have to join a validator pool to
    be selected as a forger. **Casper**, an Ethereum consensus PoS protocol, works
    as a hybrid version with an existing PoW mechanism. An Ethereum runs every 100th
    block. PoS is well-suited for a platform with a static coin supply, and many use
    this to distribute tokens against investment.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DPoS**: This is another consensus protocol and is known to be a faster and
    more efficient model. DPoS uses a democratic way to solve consensus problems.
    It takes around one second to elect the block generator in the network and confirm
    the transaction. This way, you don''t just solve the consensus issue, but you
    also eliminate unwanted regulatory interference.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PBFT**: Byzantine failure is the state of appearing both failed and functioning
    to fault-detection systems and showing a different pattern to different detectors.
    If some of the node members send inconsistent information to others about transactions,
    it may lead to a huge dilemma for an entire network. PBFT is a solution to protect
    the network against Byzantine Faults.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethereum
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ethereum is one of the oldest blockchain flavors that has provided platforms
    with a way to customize a system. Bitcoin aims to disrupt the current payment
    system and online banking with its own consensus mechanism whereas Ethereum is
    in the midst of decentralizing the existing computer system since it works heavily
    on the client-server model.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: History
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2013, Vitalik Buterin, a 22-year-old programmer involved in Bitcoin, first
    described Ethereum on whitepaper. In early 2014, a Swiss company called Ethereum
    Switzerland GmbH developed the first Ethereum software. In June 2016, **decentralized
    autonomous organization** (**DAO**) was hacked by an anonymous group, sparkling
    significant debate in the crypto-community and resulted into the network being
    split into two groups— **Ethereum** (**ETH**) and **Ethereum Classic** (**ETC**).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: What is Ethereum?
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ethereum is a decentralized network that has the capability of running applications
    in a distributed environment. The idea is simply to avoid complete dependency
    over a single entity to store and manage a user's personal and business data.
    In the current database system, once data is stored online, the client has no
    information about how the data has been stored, what security prevention measures
    have been taken, who can read the data, and so on. Ethereum provides a platform
    to build distributed applications that connect each stack holder or party directly
    to achieve better transparency and zero-dependency. Even with the fundamental
    similarities between both Bitcoin and Ethereum, both notably differ in the purposes
    and capabilities. With Ethereum, any centralized services can be transformed to
    decentralized services with its unique programming capability. There are basically
    three layers of Ethereum—The **Ethereum Virtual Machine** (**EVM**), the cryptocurrency
    ether, and gas.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Smart contract
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Smart contracts, in their simplest forms, are programs that are written to perform
    specific execution by their creator. Although contracts can be encoded on any
    blockchain flavors, Ethereum is the most preferred option since it provides scalable
    processing capabilities.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'Ethereum allows developers to code their own smart contracts. Smart contracts
    can be used to:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Streamline the process of claim settlements by automatically triggering a claim
    when certain events occur
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage agreements between users
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store information about application such as health records and KYC information
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Ethereum, each contract is given an address so that it can be uniquely identified.
    This address is calculated by the hashing creator's address and the number of
    transactions that have been performed.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: When we deploy a smart contract into a public blockchain environment, we get
    an address for our smart contract. We can now write code to interact with a specific
    instance in the smart contract. Contracts have standards such as ERC20 standards
    and it also important to implement the required methods.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Let's try and build our first smart contract. We will use Solidity to write
    the smart contract. The programming language Solidity is similar to JavaScript.
    To start the process, we first have to set up the environment with the Ganache
    package, which will be used to create a private blockchain. Secondly, we need
    access to MyEtherWallet online, which can be found at [https://github.com/kvhnuke/etherwallet/releases](https://github.com/kvhnuke/etherwallet/releases)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the package has been installed, we can get started by going to Ethereum
    IDE by using the link at [https://remix.ethereum.org/](https://remix.ethereum.org/).
    The following screenshot shows the Ethereum IDE:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34aed3ae-d53a-47c3-a2e7-3552f7380bbd.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: '**Remix** is an online compiler for Solidity and used to write our smart contract
    code. This code is for our counter. As we can see in the following screenshot,
    it has one variable and two functions. The variable `c` is an integer and is private,
    which means that it can''t be accessed by anyone outside of the contract. The
    first function, `plusbyone()`, changes  the value of `c` by incrementing its value
    and the second function, `getC()`, accesses `c` and return its value to whoever
    or whatever called the function.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'When the counter code is pasted into the remix, it will look like the following
    screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8965110c-0016-412a-9607-b039835240c3.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s open Ganache and we''ll get to see something like this. At the top
    of the screen, we can see that it says RPC SERVER:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93f0b6fc-c86d-4e62-a463-d380e0c5e1a1.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s try to visit MyEtherWallet in a browser to see the result of this.
    In the top-right corner, you will see a drop-down that shows that MyEtherWallet
    is connected to Ethereum. By default, it connects to Ethereum''s main network.
    We have to change this option by clicking the drop-down. Click on Add Custom Network
    / Node option, as shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d749d7f-964e-4a4d-9bd3-22df548159bc.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
- en: 'Now we can input the RPC server information that Ganache has ready for use.
    We can name the node as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d45526bf-6d6b-41a8-bbaa-610db4effbc3.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
- en: 'MyEtherWallet is now connected to our self-hosted blockchain through Ganache.
    Let''s use MyEtherWallet to upload our counter smart contract. To perform this,
    we will click on the Contracts tab, which is at the top of MyEtherWallet''s navigation
    bar, and select Deploy Contract option:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b92fc417-dc83-4057-adb4-92216a1ef646.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, MyEtherWallet is asking us for the contract''s byte code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/141a2179-08ca-4302-8edd-658041db2966.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
- en: 'To locate this, we''ll go back to our Remix IDE and click on the Details button:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/399f09fe-992f-4e67-b8ab-c9c8a89607e6.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
- en: 'We will now see a dialog with information about our counter smart contract.
    To copy the byte code, we''ll click the clipboard icon next to the BYTECODE section:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9652231c-c8e7-44e9-9e86-dabdb4173891.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: 'Now we will go back to MyEtherWallet and paste the byte code into the Byte
    Code text area:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/855a77ae-8ebc-4344-82a4-e4e209359433.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: 'Now we can scroll down and import an account address to upload the contract.
    By default, Ganache turns up with five addresses that we can use to interact with
    our private blockchain. We will go back to Ganache and click on the key icon so
    that we can access any of the addresses:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0270f668-63d6-44f3-902d-6e5e581377e7.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
- en: 'Now we will see the private key bind with the account:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ff3d4d9-0b3d-45ad-81cf-39f6301a2fb7.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
- en: 'We now have to copy this private key and paste it into MyEtherWallet:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f729c572-3af7-46dc-a976-f542dac91053.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
- en: 'Now we can click on the Unlock button, and MyEtherWallet will ask us if we
    want to sign this transaction and deploy our contract:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65f392fa-0014-4d58-a916-f61e2e2585e6.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we will see a successful prompt, as shown in the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23f07126-ad06-4b4f-bb52-c922833ab061.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
- en: 'After a successful transaction, Ganache will increment its CURRENT BLOCK value,
    and the transaction count of the account that we used to deploy the contract will
    also be incremented:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5cce6ffe-0f56-4492-ab00-5993a1d0d63d.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: 'Our smart contract is now uploaded to our blockchain. To interact with it by
    incrementing and decrementing the counter, we now have to go back to MyEtherWallet
    and select the Interact with Contract option:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/489e4a83-898a-492d-a328-3cd2e34c771e.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: 'MyEtherWallet will now ask us for the address at which our newly deployed smart
    contract resides, as well as the **application binary interface** (**ABI**) of
    our contract. We can view our transaction log as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48e3c967-bfa8-47ef-b85e-1395fbf068e7.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, Ganache tells us the address we used to deploy the contract.
    Let''s click the transaction, copy the created contract address, and paste it
    into MyEtherWallet:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cfa78bc3-0b1a-424e-86fd-9c3bb1d342c0.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows us that MyEtherWallet knows how to interact
    with our contract. We will go back to Remix and click the clipboard icon next
    to the interface ABI to copy it:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3fa2006d-7eab-4337-be9c-feaa556ff212.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
- en: 'Now we have to go back to MyEtherWallet, paste the ABI into its text box, and
    click the Access button. We can interact with our contract by clicking the Select
    a function drop-down:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7af56dc0-1014-478c-86b8-e18a28541b9d.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
- en: 'In our code, we set count `c`s initial value to `0`. To confirm that the smart
    contract is working, we need to call the `getC()` function:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf734132-06cc-44a6-b618-acf14aa3e4b9.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the contract was returned, but we also made other function,
    `plusbyone()`. Let''s call `plusbyone()` to test it. We will do this by selecting
    the function drop-down again, selecting `plusbyone`, and creating a new transaction:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af505797-1fbe-4e77-9373-886fb4ebd4ad.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
- en: 'This just incremented the value of `c`. Now, we can call `getcount()` again
    to confirm whether the value changed:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ab6c24e-e228-4d21-8f54-2483b2203123.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we can see that the `c` variable is now equal to `1`. So, this clarifies
    that our `plusbyone()` function works:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5d2a60e-e4c5-4064-93b2-cef162da140f.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: EVM
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: EVM is a decentralized runtime environment for building and managing smart contracts.
    In Ethereum, with every program, a network of thousands of computers processes
    it.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Smart contracts are complied into bytecode, which a feature called EVM can read
    and execute. All of the nodes execute this contract using their EVMs. By the fundamental
    definition, every node in the network holds a copy of the transaction and the
    smart contract's history of the network. EVM is responsible for executing a contract
    with the rules preprogrammed by the developer. EVM computes this data through
    a stack-based bytecode, whereas a developer writes the smart contract in a high-level
    language, such as Solidity or Serpent.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Gas
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It costs a lot of energy when a smart contract is executed by every single node
    in the Ethereum network. Because consumption of more energy costs more money,
    it is also dependent on the level of smart contract programming. In other words,
    each low-level opcode in the EVM costs a specific amount of *gas* to perform its
    desired output.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Gas just indicates the cost of performing a computation and helps developers
    understand energy consumption against their smart contract code. Like the bitcoin
    market, the value of  gas is determined by the market. If a higher gas price is
    paid, the node will prioritize the transactions for profit.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: dApp
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: dApp uses incentives such as crypto-tokens and inbuilt consensus mechanisms.
    A distributed application does not need to store all of its states; however, an
    Ethereum-based distributed application does store trusted states, and this results
    in an economical solution for end users.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: The dApp client is required to program the frontend, except the client interfaces
    with the Ethereum blockchain. The clients are often written in JavaScript because
    they can be run in a web browser, which most of us have.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: The dApp browser makes use of the dApp client, which is usually written in JavaScript,
    to interface with an Ethereum node that then communicates with a smart contract.
    dApp ensures a connection with the Ethereum node and provides easy process to
    change the connection. It also provides an account interface for the user so that
    they can easily interface with these dApps.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have covered some of the core components of Ethereum and looked
    at the real world workings of a smart contract. In the upcoming chapters, we will
    start building a distributed application on an Ethereum blockchain.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Private versus public blockchain
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many flavors of blockchain have evolved over the years, and several iterations
    have been performed to achieve business values. There are more than a thousand
    startups launching their products with distributed blockchain applications. When
    it is about business, it is important to know best-fit solutions.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: From its birth, blockchain has been permissionless, open to public without exception.
    You can download the node software and view the entire history of blockchain,
    initiate transactions, and store information. This makes life for end users easy;
    however, businesses interested in deploying blockchain may see this as a big challenge.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Public blockchains do carry some critical disadvantages when it comes to business.
    Businesses are usually more interested in private blockchains to create blockchain
    solutions with better privacy and security.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Public blockchain
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the public blockchain, the process of chaining a block is always with nodes
    that can be independent, untrusted, or even unknown, and can participate in the
    consensus process to validate a block. In a public blockchain, anyone can simply
    download the blockchain node client in their system and transact with anyone,
    and anyone can read the transactions over the block explorer. Bitcoin and Ethereum
    are some of the major examples of public blockchains.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin is the first decentralized platform to transfer money safely and securely.
    However, Ethereum is innovated with a different purpose—a purpose to provide a
    platform for anybody to develop their own decentralized application that won't
    be limited to the transfer of just currency, but any kind of value. Ethereum uses
    smart contracts to achieve a set of self-operating programs that execute when
    certain conditions are satisfied.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Private blockchain
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An organization that sets up a private blockchain configures it to work as a
    permissioned network. It is built to provide better privacy over transactions
    and is suited for banking and other financial institutions. Unlike a public blockchain,
    just connecting to the internet with a blockchain node client will not be enough
    to initiate transactions; however, a consortium blockchain allows only specific
    and preverified people to access and transfer any type of value over the network.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: In this system, the consensus mechanism is controlled and managed by preselected
    groups of nodes. This way, even though the blockchain works in a public network,
    it still remains restricted and can only be controlled and maintained by specific
    groups of nodes, or maybe even a single node. Private blockchains can also be
    called **consortium blockchains** based on their restrictions and control levels.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: One of the most popular implementations of this is Hyperledger Fabric, a permissioned
    blockchain framework hosted by The Linux Foundation.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Business adaptation
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Industry leaders are spending millions of dollars on **r****esearch and development**
    (**R&D**) to evaluate emerging platforms over blockchain. In any sector, the cost
    of intermediaries are unavoidable and this is growing with the number of transactions,
    and may based on subscription plans.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explore blockchain use cases:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '**FinTech**: Financial organizations are always in need of adapting an emerging
    technology to solve the key security challenges and enhancing user experience.
    Because of the risk of downtime (service disruption) involved in technology refreshes,
    organizations prefer to wait till they get feedback and use cases from the majority
    of their industry players. More than 50 of the largest banking organizations have
    already recognized and appreciated blockchain for enhancing security at the foundation
    layer. Every successful transaction is saved in the distributed ledger chronologically
    with a hashing algorithm in the form of blocks. This means that records cannot
    be tempered with and thereby mitigate risks of financial fraud attempt.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**InsurTech**: In general, to fill up an insurance policy, there is a need
    for a third-party such as a broker, an insurance company sales person, or maybe
    a lawyer. With blockchain, citizens can directly fill up their file without the
    involvement of a third person. Many insurance-critical tasks and subtasks can
    be covered as follows:'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Claim management
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing policies of national and foreign clients
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: eKYC
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking policy status
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing multiple portfolios
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Healthcare**: Healthcare operations are more than just a standard business
    operation. With increasing data breaches and ransomware incidents in healthcare
    industries, it is critical that they come up with a technology that facilitates
    security from the foundation layer. Some of the most effective use cases are as
    follows:'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Health record data management, such as images, lab reports, and genomics
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing a complete indexed history of each patient with a proper timestamp
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Patients will be notified when this is shared or modified
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Medicine inventory management
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cyber security**: Cyber criminals are becoming more and more sophisticated,
    and organizations are in a race with them to defend critical assets, such as trade
    secrets, intellectual property, and customer information. Every organization uses
    some form of cybersecurity solution, and yet billions of dollars are lost every
    year. Blockchain is designed to be decentralized, immutable, and traceable, and
    it solves most of the security challenges at the core. Some of its use cases are
    as follows:'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity and access management
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DDoS protection
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Decentralized storage
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Protection against **man-in-the-middle** (**MITM**) attacks
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about how blockchain can solve many business challenges
    from the foundation layer. With the Ethereum blockchain, organizations can now
    easily leverage the benefits of distributed applications, similar to the efforts
    needed to turn-up traditional web applications. We also learned about the systematic
    programming of smart contracts and integrating them with the Ethereum blockchain.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about **Hyperledger**, a project hosted by
    the Linux Foundation. We will also understand how Hyperledger solves several business
    needs.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After exploring the blockchain technology with its integral components and
    immutable chaining process, we still need to understand even more flavors of blockchain:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Can Bitcoin blockchain be used for business applications in near future?
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the future of Ethereum?
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand even more about the blockchain's architecture and the consensus
    model, refer to the link at [https://www.researchgate.net/publication/318131748_An_Overview_of_Blockchain_Technology_Architecture_Consensus_and_Future_Trends](https://www.researchgate.net/publication/318131748_An_Overview_of_Blockchain_Technology_Architecture_Consensus_and_Future_Trends).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
