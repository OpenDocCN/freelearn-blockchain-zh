- en: Introducing Blockchain and Ethereum
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍区块链和以太坊
- en: 'Once in several years, we see the birth of revolutionary technologies with
    the capability to disrupt a wide range of business models. In this chapter, the
    blockchain will be introduced with an insight into the technology and its business
    use cases. Blockchain is a concept that originated to avoid third-party involvement
    in any financial transaction in a whitepaper named *Bitcoin: A Peer-to-Peer Electronic
    Cash System,* by *Satoshi Nakamoto*. We will also be discussing the types of blockchain-based
    business needs, cryptography, and consensus, which mitigate the risk of fraud.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 几年一次，我们会见证到具有颠覆性能力的革命性技术的诞生，它们有能力颠覆广泛的商业模式。本章将介绍区块链技术及其商业应用案例。区块链是一个概念，起源于一篇名为《比特币：一种点对点的电子现金系统》的白皮书，作者是*Satoshi
    Nakamoto*，目的是避免第三方介入任何金融交易。我们还将讨论基于区块链的业务需求、密码学和共识，以减少欺诈风险。
- en: 'You will learn the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节内容包括以下主题：
- en: What is blockchain?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是区块链？
- en: Internet versus blockchain
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网与区块链
- en: How it works?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: The building blocks of blockchain
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块链的构建模块
- en: Ethereum blockchain
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊区块链
- en: Private versus public blockchains
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有与公有区块链
- en: Business adaptation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务适应
- en: What is blockchain?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是区块链？
- en: Just like every other day, you are enjoying your morning with a cup of coffee
    and newsfeeds. At the same time, somewhere, a financially motivated hacker is
    finding all of the possible ways to compromise millions of users accounts for
    a widely used social networking site. The hacker is successful in gaining access
    to the database and exfiltrated a large amount of credentials.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 就像每天的其他日子一样，你正在享受早晨的咖啡和新闻。与此同时，某处，一个财务动机的黑客正在寻找所有可能的方法来攻击一个广泛使用的社交网站上数百万用户的帐户。黑客成功地访问了数据库并窃取了大量的凭据。
- en: 'After around 180 days, this massive credential theft is revealed publicly,
    and you find out that you are also one of the people who has been targeted. Just
    like you, millions of other users also have a good reason to be worried about
    their attached trust and privacy. The examples range from the latest Equifax 2017
    Data Breach case (143 million credentials compromised) to the Adult Friend Finder
    2016 case (413 million account thefts), the Anthem 2015 case (78 million accounts
    were hacked), and many more. None of the preventive solutions can be 100 % secure,
    but finding out what the problem was at the right time could have saved the misuse
    of these accounts. What if a technology can do the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 大约180天后，这一大规模的凭证盗窃事件被公开揭露，你发现自己也是被攻击目标之一。和你一样，数百万其他用户也有充分的理由担心他们的信任和隐私。例子包括最新的2017年信用档案公司数据泄露案（1.43亿凭证被泄露）、2016年Adult
    Friend Finder案（4.13亿账户被盗）、2015年Anthem案（7.8千万帐户被黑客攻击），等等。没有一个预防性解决方案可以百分之百安全，但是在正确的时间找出问题可能会拯救这些账户的滥用。如果有一种技术可以做到以下几点：
- en: Detect who looks at a person's account and change it?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测谁查看了一个人的账户并更改它？
- en: Ensure that data concerning the person is not misused?
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保与个人相关的数据不被滥用？
- en: This sounds like a smart thing to use, but it's not that difficult to implement.
    This is what a blockchain does. In a nutshell, it's nothing but a smart, safe,
    and a constantly growing database. Blockchain is a chronological ledger that records
    transactions of any value or asset securely. The blockchain network provides the
    ability to transfer any type of value or asset between independent parties using
    a peer-to-peer network. The initial objective of the blockchain technology was
    to establish trusted financial transactions between two independent parties without
    any involvement of third-parties such as a bank; however, later, several industries
    adopted blockchain to streamline their supply-chain process, KYC system, data
    management, and so on. With the growing use of online services and a growing number
    of online transactions, users have to trust and depend on third parties such as
    banks and payment gateway providers. This led to the birth of the blockchain.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来像是一个明智的选择，但实施起来并不难。这就是区块链的作用。简而言之，它只是一个智能、安全且不断增长的数据库。区块链是一个按时间顺序记录任何价值或资产交易的分类账。区块链网络提供了使用点对点网络在独立方之间传输任何类型价值或资产的能力。区块链技术最初的目标是在两个独立方之间建立值得信赖的金融交易，而无需任何第三方，比如银行；然而，后来，几个行业采用了区块链来简化其供应链流程、KYC系统、数据管理等。随着在线服务的增加和在线交易数量的增加，用户必须信任并依赖于诸如银行和支付网关提供商等第三方。这导致了区块链的诞生。
- en: A brief history
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简史
- en: 'In 2009, a whitepaper called *Bitcoin: A Peer-to-Peer Electronic Cash System* was
    released by *Satoshi Nakamoto* to solve the existing financial market challenges.
    This whitepaper focused on developing a platform to allow online payments from
    one party to another without going through financial institutions. One of the
    major addressed challenges was about the double method, which is used to avoid
    the double spending (a unique problem with digital currency is the risk of reproducing
    the same amount, even after spending it) of Bitcoin. As Bitcoin is digital money
    and it isn''t difficult to copy digital data and announce it, double-spending
    occurred and a solution was proposed to prevent this—this was blockchain. However,
    Nakamoto''s original paper does not mention the word blockchain; it first appeared
    as *block chain* in a Bitcoin source code comment.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年，*比特币：一种点对点电子现金系统*的白皮书由*Satoshi Nakamoto*发布，旨在解决现有金融市场面临的挑战。这份白皮书着眼于开发一个平台，允许一方向另一方进行在线支付，而无需经过金融机构。其中一个主要解决的问题是双重支付方法，该方法用于避免比特币的双重花费（数字货币的一个独特问题是在花费后复制相同金额的风险）。由于比特币是数字货币，复制数字数据并宣布它并不困难，因此发生了双重支付，并提出了一个解决方案来防止这种情况发生——这就是区块链。然而，Nakamoto的原始论文并没有提到区块链一词；它首次出现在比特币源代码的注释中，被称为*block
    chain*。
- en: Fundamentals of the blockchain
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块链的基础知识
- en: 'Blockchain is a decentralized database that keeps records of all transactions
    secure and in an append-only fashion. Blockchain became rapidly popular among
    numerous industries because of its decentralized nature regarding its database.
    For an organization that can''t afford a single point of failure, the blockchain
    database makes it practically impossible for sensitive information to be compromised
    by cyber criminals. Also, blockchain isn''t just managed by trusted administrators
    or developers; it is well-managed by anyone who can be either trusted or from
    a known or unknown party. The following diagram is a graphical representation
    of the blockchain network:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链是一个分散式数据库，以追加方式安全记录所有交易。由于其分散式数据库的特性，区块链迅速在许多行业中流行起来。对于一个不能承受单点故障的组织来说，区块链数据库使得敏感信息几乎不可能被网络犯罪分子攻击。此外，区块链不仅仅由受信任的管理员或开发人员管理；它是由任何可以被信任的人或来自已知或未知方的人管理的。下图是区块链网络的图形表示：
- en: '![](img/d94344d4-231c-485f-af82-90f5a61dc608.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d94344d4-231c-485f-af82-90f5a61dc608.png)'
- en: Each internet-connected computer needs to have blockchain node software and
    run application specific to blockchain ecosystem. Depending on the use cases,
    participation of these computers can be restricted. For example, blockchain based
    ecosystem bankchain only permits banks to run the bankchain node client application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每台连接到互联网的计算机都需要具有区块链节点软件，并运行特定于区块链生态系统的应用程序。根据使用情况，这些计算机的参与可以受到限制。例如，基于区块链的生态系统银行链只允许银行运行银行链节点客户端应用程序。
- en: Who is using blockchain and how?
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谁在使用区块链以及如何使用？
- en: In the current era of technology, other than any buzz technology, blockchain
    has the capability to enter any industry as a disrupter. This could be to reduce
    operational expenditure, overcome cyber security-related issues, to deliver identity
    and access management solutions, to facilitate a collaboration from private to
    public institutions, to achieve a better data management system, to enhance and
    simplify logistic and supply-chain management, to allow a seamless insurance sale
    and management system, or to deploy a better health-record database system to
    protect people against any data theft or espionage attempt.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前技术时代，除了任何热门技术外，区块链有能力以颠覆者的身份进入任何行业。这可能是为了降低运营支出，克服与网络安全相关的问题，提供身份和访问管理解决方案，促进私人和公共机构的合作，实现更好的数据管理系统，增强和简化物流和供应链管理，实现无缝的保险销售和管理系统，或者部署更好的健康记录数据库系统以保护人们免受任何数据窃取或间谍企图的威胁。
- en: Internet versus blockchain
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互联网与区块链
- en: The internet is a more than 30-year-old technology with the purpose of sharing
    information over TCP/IP and the **Open Systems Interconnection** (**OSI**) model
    stack. From the birth of the internet, every new technology had disrupted an existing
    one, whether it was email or the web, or even e-commerce. The internet is one
    of the strongest technologies that has been powerful enough to spread out ideas
    to impact and create illusions for reality.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网是一个拥有30多年历史的技术，其目的是通过TCP/IP和**开放系统互联**（**OSI**）模型栈共享信息。从互联网诞生开始，每一项新技术都颠覆了现有的技术，无论是电子邮件、网络还是电子商务。互联网是最强大的技术之一，足以将思想传播到影响和创造现实的幻觉。
- en: TCP/IP was the first internet protocol suite built to standardize the communication
    between similar networks; however, the OSI model was developed by the **International
    Standard Organization** (**ISO**) to provide a framework to standardize communication
    between systems, irrespective of the vendors, models, and technologies. Organizations
    preferred both models for client/server communication because client/server networks
    tend to be much more reliable and stable in nature. It was important to have to
    a better control over what data customers were using and how they were using it.
    In a client/server model, a client manages their own local resources, such as
    hardware and software components of a workstation or any device, whereas a server
    is a highly powerful system that manages shared resources such as hardware, network
    communication channels, and databases. With a peer-to-peer network, there is no
    central authority to monitor, control, and enforce. Although small businesses
    used to prefer this for their internal needs, big organizations have always been
    away from peer-to-peer networks because of the risk of losing control over their
    business operation and management.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: TCP/IP是第一个用于标准化类似网络之间通信的互联网协议套件；然而，OSI模型是由**国际标准化组织**（**ISO**）开发的，旨在提供一个框架来标准化系统之间的通信，无论供应商、模型和技术如何。组织偏好这两种模型用于客户端/服务器通信，因为客户端/服务器网络往往在性质上更可靠和稳定。重要的是要对客户使用的数据以及他们如何使用数据有更好的控制。在客户端/服务器模型中，客户端管理其自己的本地资源，例如工作站或任何设备的硬件和软件组件，而服务器是一个管理共享资源的高度强大的系统，例如硬件、网络通信渠道和数据库。在对等网络中，没有中央机构来监视、控制和强制执行。尽管小型企业过去偏爱此类网络用于其内部需求，但由于失去对业务操作和管理的控制的风险，大型组织一直远离对等网络。
- en: 'However, there are a few moments in this journey of connecting worlds that
    redefined innovation and facilitated mediums for every businesses needs. It was
    blockchain, a peer-to-peer network of independent nodes to share any kind of value
    without any third-party involvement. The evolution of computing was first started
    with mainframe computing, and, after a decade, the internet came into existence.
    Cloud computing was generally defined by Professor *Ramnath Chellappa* in 1997,
    and Amazon launched its **Elastic Compute Cloud** (**EC2**) service in 2006\.
    We are now in the era of a new breed of computing that has changed the way data''s
    stored safely and securely. Take a look at the following diagram:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在连接世界的这段旅程中，有一些时刻重新定义了创新并为每个企业的需求提供了媒介。这就是区块链，一个由独立节点组成的对等网络，可共享任何类型的价值，无需任何第三方参与。计算的演变首先是从大型机计算开始的，十年后互联网诞生。云计算通常是由*Ramnath
    Chellappa*教授在1997年定义的，亚马逊于2006年推出了其**弹性计算云**（**EC2**）服务。我们现在处于一种新型计算的时代，它改变了数据安全存储的方式。请看下图：
- en: '![](img/fb701234-a63a-4151-9752-66b842adb3a8.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb701234-a63a-4151-9752-66b842adb3a8.png)'
- en: IP packet versus block
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IP数据包与块
- en: Everything we do over the internet goes through IP packets over the TCP/IP model.
    An IP packet is the smallest unit of data that can be sent over the internet.
    An IP packet has two components—an **IP header** and a **payload**.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在互联网上进行的所有操作都通过TCP/IP模型上的IP数据包进行。IP数据包是可以通过互联网发送的最小数据单位。一个IP数据包有两个组成部分——**IP头部**和**有效载荷**。
- en: To send this information, it needs a source and a destination IP addresses.
    A block is the integral element for this process; it is chained together to form
    a blockchain. Block also has two components—**block header** and **block body**.
    To send any type of value or transaction, it adds its own digital signature as
    the source identifier and public key, which resembles the destination's identity
    in the peer-to-peer network.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了发送这些信息，它需要源和目的地IP地址。一个块是这个过程的重要元素；它被链接在一起形成一个区块链。块也有两个组成部分——**块头部**和**块体**。为了发送任何类型的值或交易，它添加自己的数字签名作为源标识符和公钥，这类似于点对点网络中目的地的身份。
- en: Web app versus dApp
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网页应用程序与 dApp
- en: A web app is simply a web-based application, which is widely used in client-server
    models to serve users. However, **d****ecentralized application** (**dApp**) is
    an application that runs on a peer-to-peer network of computers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 网页应用程序（web app）简单来说就是一个基于Web的应用程序，广泛用于客户-服务器模型以为用户提供服务。然而，**去中心化应用程序**（**dApp**）是一种运行在点对点计算机网络上的应用程序。
- en: The traditional web application uses CSS, HTML, and JavaScript to render a front
    end page. It fetches the data from a database through an API call. dApp's frontend
    uses the exact same technique to render the page but instead of calling the API,
    dApp uses a smart contract that connects to the blockchain.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的Web应用程序使用CSS、HTML和JavaScript来渲染前端页面。它通过API调用从数据库中获取数据。dApp的前端使用完全相同的技术来渲染页面，但是不同于调用API，dApp使用一个智能合约连接到区块链。
- en: How it works?
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: 'Let''s understand the workings of the blockchain ledger in its simplest form.
    To understand the system in its generic form, it is important to use several states
    of blockchain and explore them further:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以最简单的形式了解区块链账本的工作原理。为了以通用形式理解系统，重要的是使用几种区块链的状态并进一步探索：
- en: '**Transaction preparation:** At this stage, party *A* creates a transaction
    that includes information including the public address of the receiver, a source
    digital signature, and a transaction message. Now this transaction is made available
    to all of the nodes in the blockchain.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**交易准备：** 在这个阶段，甲方创建了一个交易，其中包括接收者的公共地址、源数字签名和交易消息等信息。现在这个交易对所有区块链中的节点都是可用的。'
- en: '**Transaction verification: **The blockchain nodes work in a trustless model,
    where each node (the machine running the blockchain client software) receives
    this transaction, and verifies the digital signature with party *A''s* public
    key. After successful verification, this authenticated transaction is parked in
    the ledger queue and waits until all the nodes successfully verify the same transaction.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**交易验证：** 区块链节点在一个无需信任的模型中工作，其中每个节点（运行区块链客户端软件的机器）接收到这个交易，并使用甲方的公钥验证数字签名。验证成功后，这个经过身份验证的交易被停放在账本队列中，等待所有节点成功验证相同的交易。'
- en: '**Block generation: **The queued transactions are arranged together and a block
    is created by one of the nodes in the network. In the Bitcoin blockchain, Bitcoins
    are rewarded when a Bitcoin node, also known as a **miner**, creates a block by
    solving some mathematically complex problem.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**块生成：** 排队的交易被排列在一起，一个节点在网络中创建了一个块。在比特币区块链中，当比特币节点，也称为**矿工**，通过解决一些数学上复杂的问题创建一个块时，会获得比特币奖励。'
- en: '**Block validation: **After a successful block generation, nodes in the network
    are processed for an iterative validation process where the majority of the nodes
    have to acquire consensus. There are four popular ways to achieve consensus, such
    as **Proof of Work** (**PoW**), **Proof of Stack** (**PoS**), **Delegated Proof
    of Stack** (**DPoS**), and **Practical Byzantine Fault Tolerance** (**PBFT**).
    Bitcoin uses PoW to achieve consensus; however, Ethereum uses PoS for consensus.
    This mechanism impacts financial aspects and ensures the security of entire transaction
    operations.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**区块验证：** 在成功生成区块后，网络中的节点将进行迭代验证过程，其中大多数节点必须达成共识。有四种流行的实现共识的方式，例如**工作量证明**（**PoW**），**权益证明**（**PoS**），**委托权益证明**（**DPoS**）和**实用拜占庭容错**（**PBFT**）。比特币使用PoW来实现共识；然而，以太坊使用PoS进行共识。这种机制影响了金融方面，并确保了整个交易操作的安全性。'
- en: '**Block chained**: After a successful consensus mechanism, the blocks are verified
    and are added to the blockchain.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**区块链技术**：在成功的共识机制之后，区块将经过验证并添加到区块链中。'
- en: 'The several states of the blockchain can be seen in the following diagram:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链的几种状态如下图所示：
- en: '![](img/51f537df-1cb7-45c2-a84c-61a47f6e2dbe.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51f537df-1cb7-45c2-a84c-61a47f6e2dbe.png)'
- en: The building blocks of blockchain
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块链的构建模块
- en: Blockchain technology is built over a group of existing technologies that have
    been widely used across the industry. Let's go through each component of blockchain
    that makes the entire system distributed, immutable, and reliable in nature.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链技术是建立在一组现有技术之上的，这些技术已被广泛应用于整个行业。让我们逐个查看构成整个系统分布式、不可变和可靠性质的区块链的每个组件。
- en: Block
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块
- en: A distributed ledger is stored in a database and updated by each participant
    in the blockchain network. A ledger is represented in a series of units called
    blocks. To understand the block, lets start with the under traditional data model
    and then jump to blockchain network to understand how the block is getting chained
    together.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式分类帐存储在数据库中，并由区块链网络中的每个参与者更新。分类帐以一系列单位块表示。为了理解区块，让我们从传统数据模型开始，然后跳到区块链网络，了解如何将区块链接在一起。
- en: 'Let''s first understand the regular way of information exchange over the internet.
    In the world of the TCP/IP stack, information is transferred through a client/server
    model where the client can store and modify the data on a centralized server.
    However, the control of the database remains with a designated administrator.
    If the security of the administrator is compromised, the entire database can be
    altered or deleted. Theoretically, a server is no different from a user machine;
    however, in practice, the purpose of a server is to serve several end users concurrently.
    Take a look at the following diagram:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们了解互联网上常规的信息交换方式。在TCP/IP协议栈的世界中，信息是通过客户端/服务器模型进行传输的，其中客户端可以在集中式服务器上存储和修改数据。然而，数据库的控制仍然由指定的管理员管理。如果管理员的安全性受到威胁，整个数据库可以被更改或删除。理论上，服务器与用户机器没有什么区别；然而，在实际中，服务器的目的是同时为多个终端用户提供服务。请看以下图示：
- en: '![](img/4f3295b5-9583-4a2e-beee-10a7db9c72cf.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f3295b5-9583-4a2e-beee-10a7db9c72cf.png)'
- en: 'The blockchain network consists of a network of several independent machines
    named **nodes**. Unlike traditional databases that store entire information on
    a centralized database server, Blockchain nodes keep the copy of the entire database
    with an administrative role. Even if one node goes down, the information will
    remain available for the nodes, as shown in the following diagram:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链网络由名为**节点**的多台独立机器组成。与将整个信息存储在集中式数据库服务器上的传统数据库不同，区块链节点保留了整个数据库的副本，并具有管理角色。即使一个节点宕机，信息仍将对其他节点可用，如下图所示：
- en: '![](img/9445a9d0-c11d-422d-983f-70145833b543.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9445a9d0-c11d-422d-983f-70145833b543.png)'
- en: 'The moment a node joins the blockchain network, it downloads the updated blockchain
    ledger. Each node is responsible for managing and updating its ledger with validated
    blocks. The node maintains the ledger and organizes it in the form blocks connected
    to the hashing algorithm, as shown in the following diagram:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个节点加入区块链网络时，它会下载更新后的区块链分类帐。每个节点负责管理和更新其带有验证区块的分类帐。该节点维护分类帐并以块的形式组织它，连接到哈希算法，如下图所示：
- en: '![](img/c5b4bf59-e0ee-4539-875a-7f85f91986f9.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5b4bf59-e0ee-4539-875a-7f85f91986f9.png)'
- en: 'Multiple transactions are bundled together to form a block, and in its simplest
    way, it''s a data structure. Every cryptocurrency has its own blockchain with
    its own customized properties. For example, a block in a Bitcoin blockchain is
    generated every 10 minutes and the size of each block is 1 MB, whereas a block
    in an Ethereum blockchain is generated every 12-14 seconds, and the size of each
    block is 2 KB. Take a look at the following diagram:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 多个交易被捆绑在一起形成一个区块，以最简单的方式，它是一种数据结构。每种加密货币都有自己的区块链和自定义属性。例如，在比特币区块链中，每10分钟生成一个区块，每个区块的大小为1
    MB，而在以太坊区块链中，每12-14秒生成一个区块，每个区块的大小为2 KB。看一下以下图表：
- en: '![](img/12e626d9-db35-4a93-b390-c54ed69581e4.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12e626d9-db35-4a93-b390-c54ed69581e4.png)'
- en: 'Let''s understand more about blocks. A block consists of a block header and
    a block body:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入了解区块。一个区块由区块头和区块主体组成：
- en: '**Block header**: A block header helps us identify a specific block in the
    blockchain. It contains set of metadata:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区块头**：区块头帮助我们识别区块链中的特定区块。它包含一组元数据：'
- en: '![](img/3a4b026f-9146-4a24-b532-d6371a8d5c2f.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a4b026f-9146-4a24-b532-d6371a8d5c2f.png)'
- en: 'The components of the block are explained as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 区块的各个组成部分解释如下：
- en: '**Version**: It''s a 4-byte field that''s used to track software or protocol
    grades.'
  id: totrans-60
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本**：这是一个4字节的字段，用于跟踪软件或协议版本。'
- en: '**Timestamp**: This is a 4-byte field that indicates the creation time of the
    block in seconds.'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间戳**：这是一个4字节的字段，表示区块创建时间（秒）。'
- en: '**Hash of the previous block**: This is a 32-byte field that indicates the
    hash of the previous block in the chain.'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上一个区块的哈希**：这是一个32字节的字段，表示链中上一个区块的哈希。'
- en: '**Nonce**: This is a 4-byte field that''s used to track the PoW algorithm counter.'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nonce**：这是一个4字节的字段，用于跟踪PoW算法计数器。'
- en: '**Hash of Merkle root**: This is a 32-byte field that is a hash of the root
    of the Merkle tree of the block transaction.'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Merkle根哈希**：这是一个32字节的字段，是该区块交易Merkle树根的哈希值。'
- en: '**Block body**: This part of the block consists of a list of transactions.
    In the Bitcoin world, one block consists of more than 500 transactions on average.
    Each transaction has to be digitally signed; otherwise, it is treated as invalid.
    To do that, a hashing function is used to apply the algorithm over an actual transaction
    with a private key/secret key.'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区块主体**：区块的这部分包含一系列交易。在比特币世界中，一个区块平均包含500多笔交易。每个交易都必须经过数字签名；否则，将被视为无效。为此，使用哈希函数对实际交易和私钥/密钥进行算法运算。'
- en: Cryptography – digital signature and hashing algorithm
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密学 – 数字签名和哈希算法
- en: Cryptographic hashing is a way to generate a fixed-length output against any
    given length of input string. The output is named hash or message digest, and
    is designed to protect the integrity of any kind of data, such as a file, media,
    or text. Only one message digest is assigned to protect a specific input or sensitive
    information. A small change made to the input data results in a drastic difference
    in the result, which makes it almost impossible to predict the data either in-motion
    or even at-rest. There are various ways to produce the hash or the message digest.
    In the world of cryptocurrency, and Bitcoin being a popular one, the SHA-265 algorithm
    is used to produce a fixed-length 256 bit hash or message digest against each
    block.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 密码哈希是一种根据任何给定长度的输入字符串生成固定长度输出的方法。输出被称为哈希值或消息摘要，旨在保护任何类型的数据的完整性，例如文件、媒体或文本。只分配一个消息摘要来保护特定输入或敏感信息。对输入数据进行轻微更改会导致结果的巨大差异，使得几乎不可能预测数据的传输或静止。有各种方法来生成哈希值或消息摘要。在加密货币世界中，比特币等热门货币使用SHA-256算法对每个区块生成一个固定长度的256位哈希值或消息摘要。
- en: Let's understand how the SHA-256 algorithm works. There are several free web
    tools available to generate a SHA-256 hash. We are using the following website
    for demonstration purposes at [https://passwordsgenerator.net/sha256-hash-generator/](https://passwordsgenerator.net/sha256-hash-generator/).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解SHA-256算法的工作原理。有几个免费的网络工具可用来生成SHA-256哈希值。我们在[https://passwordsgenerator.net/sha256-hash-generator/](https://passwordsgenerator.net/sha256-hash-generator/)上演示。
- en: 'Let''s start by generating a Hash:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始生成一个哈希：
- en: 'The first input message is this:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个输入消息如下：
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The second input message is this:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个输入消息如下：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Third, in the context of cryptocurrency, the input message is this:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三，在加密货币的背景下，输入消息如下：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To ensure that the transferred file is not corrupted, the receiver can always
    compare the calculated hash with a given hash to know the author of the file or
    any of its content. In the world of blockchain, hashing is the backbone of its
    immutability characteristic. The hashing process ensures that none of the blocks
    in the ledger are altered or tampered with. Instead of keeping track of each transaction's
    details such as `Mike pays $20 to John on July 20, 2017`, `Kevin Legal document
    has been received dated September 21, 2017`, and `Tom has completed a trip from
    Houston to Dallas on November 22, 2017`, blockchain and nodes just have to remember
    and keep a track of its respective hash.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保传输的文件没有损坏，接收者可以始终将计算得出的哈希与给定的哈希进行比较，以了解文件或其任何内容的作者。在区块链世界中，哈希是其不可变性特性的支柱。哈希过程确保了分类账中的任何区块都没有被修改或篡改。区块链和节点不必记住每笔交易的详细信息，例如`Mike在2017年7月20日支付$20给John`，`Kevin在2017年9月21日收到了法律文件`和`Tom在2017年11月22日完成了从休斯顿到达拉斯的行程`，而只需记住并跟踪其相应的哈希。
- en: 'Let''s understand how the blockchain makes use of the hashing algorithm. In
    blockchain, a node arranges the entire ledger in the form of chronologically connected
    blocks. To ensure that the ledger remains tamper-proof, each block is made dependable
    on the previous block. In other words, a new block can''t be produced without
    having the hash of a previous block. Before adding a new block in the ledger,
    this has to be approved and verified by every node in the blockchain. This allows
    anyone to tamper or alter the ledger except in the case of a hacker, who is capable
    enough of infecting and compromising all of the millions of nodes in the blockchain
    at the same time. Only the first block called the *genesis block* is produced
    itself and points to itself. The following diagram shows the simplified Bitcoin
    blockchain:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一下区块链如何利用哈希算法。在区块链中，一个节点将整个分类账以按时间顺序连接的区块形式排列。为了确保分类账保持不可篡改，每个区块都依赖于前一个区块。换句话说，新区块无法在没有前一个区块的哈希的情况下产生。在将新区块添加到分类账之前，这必须得到区块链中每个节点的批准和验证。这使得任何人都无法篡改或修改分类账，除非是黑客，他有能力同时感染和妥协区块链中的数百万个节点。只有第一个区块称为*创世区块*是自己生成的并指向自己。下图显示了简化的比特币区块链：
- en: '![](img/099234e5-d229-4201-abe4-9b4c4e58ccd9.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/099234e5-d229-4201-abe4-9b4c4e58ccd9.png)'
- en: 'Every block points to the hash of previous hash block, and this becomes the
    backbone of the blockchain''s immutable system. Now, even if a block in-between
    is altered or disturbed by any means, a hacker can never achieve the same blockchain
    as a small change in the block can result in a drastic change in the resulting
    hash. With thousands upon thousands of transactions in every block, it becomes
    extremely difficult to find one transaction that won''t be time-consuming and
    process-sensitive. To avoid this complex work, a comprehensive hash tree has been
    developed named the Merkle tree. The following diagram shows the Merkle tree:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 每个区块都指向上一个哈希区块的哈希，这成为区块链不可变系统的支柱。现在，即使中间的一个区块被改变或受到任何方式的干扰，黑客也永远无法获得相同的区块链，因为区块的微小变化可能导致结果哈希的重大变化。在每个区块中有成千上万的交易，要找到一个不耗时且处理敏感的交易变得极其困难。为了避免这种复杂的工作，开发了一种名为默克尔树的综合哈希树。下图显示了默克尔树：
- en: '![](img/9817a7e2-ed95-4267-8a78-6827d27e4050.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9817a7e2-ed95-4267-8a78-6827d27e4050.png)'
- en: The purpose of the hash arrangement is to simplify the process of locating a
    single transaction hash out of thousands.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希排列的目的是简化在数千个中定位单个交易哈希的过程。
- en: Digital signatures already work in the core of many organization's security
    controls by providing authenticity of transmitted data and preventing forgery.
    Digital signatures ensure that the transactions are happened between two validated
    and authenticated parties. In the physical world, everyone is identified by their
    unique and permanent national identity number, such as a **social security number**
    (**SSN**) in the US, a **National Registration Identity Card** (**NRIC**) in Singapore,
    a **National Insurance Number** (**NINO**) in the UK, a **Unique Identification
    Authority of India** (**UIDAI**) in India, and many more. Government bodies keep
    track of every financial transaction, property transaction, and legal transaction
    among citizens and the government itself, based on their unique identification
    numbers that carry information regarding their personal details and even biometric
    details, which is then verified when they complete a transaction. In the digital
    world, digital signatures play a critical role in ensuring transactions between
    two authenticated parties. Now let's understand why blockchain needs a digital
    signature.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 数字签名已经在许多组织的安全控制核心中起着作用，确保传输数据的真实性并防止伪造。数字签名确保交易发生在两个经过验证和认证的当事人之间。在现实世界中，每个人都是通过其独特和永久的国民身份号码进行身份验证，例如美国的**社会安全号码**（SSN），新加坡的**国民登记身份证**（NRIC），英国的**国民保险号码**（NINO），印度的**印度独特身份机构**（UIDAI）等。政府机构根据其唯一身份号码进行财务交易、财产交易和公民与政府之间的法律交易的跟踪，其中包含有关其个人详细信息甚至生物特征信息的信息，在完成交易时将进行验证。在数字世界中，数字签名对于确保两个经过验证的当事人之间的交易至关重要。现在让我们了解为什么区块链需要数字签名。
- en: 'In the blockchain technology, each node maintains a blockchain ledger with
    an administrative role. Anyone can add their transaction into the ledger with
    its own digital identity. The good and the bad news related to the blockchain
    technology is as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链技术中，每个节点都保持着一个具有行政角色的区块链总账。任何人都可以使用自己的数字身份将其交易添加到总账中。与区块链技术相关的好消息和坏消息如下所示：
- en: '**Bad news**: Digital identity is all about 1s and 0s, which makes for a higher
    probability of forgery. Any of the parties can attempt a fraud entry to the ledger
    by simply copying the digital identity of the victim node.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**坏消息**：数字身份全部由1和0组成，这增加了伪造的可能性。任何一方都可以通过简单地复制受害节点的数字身份来尝试在总账中进行欺诈性记录。'
- en: '**Good news**: The blockchain network makes use of private and public key pairs.
    Each node will have its own private and public key pair. Digital signatures and
    hashing work together with blockchain to understand how both fundamental technologies
    work hand-in-hand to keep blockchain working with high-grade security.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**好消息**：区块链网络利用私钥和公钥对。每个节点都有自己的私钥和公钥对。数字签名和哈希与区块链共同工作，以了解这两种基本技术如何携手保持区块链具有高级别的安全性。'
- en: Let's say that party *A* wants to send a transaction information to party *B*.
    To keep our focus on blockchain, Bitcoin mining has been removed, though performing
    a financial transaction needs to have a successful mining process. Party *A* has
    a transaction due, and it is ready to announce it. The message is `Party A sends
    $200 to Party B on July 23, 2017 at 03:00 EST`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 假设甲方想要向乙方发送交易信息。为了保持我们对区块链的关注，已经移除了比特币挖掘，尽管进行财务交易仍然需要成功的挖掘过程。甲方有一笔交易，准备宣布。消息是`Party
    A sends $200 to Party B on July 23, 2017 at 03:00 EST`。
- en: 'To avoid any kind of forgery, party *A* has to use an asymmetric key-pair,
    also known as a private/public key pair. The information is signed by the private
    key, and this remains private with party *A*.  Let''s assume that  party *A* has
    a  private key or a secret key of `Blockchain#123`, and the message is  `Party
    A sends $200 to Party B on July 23, 2017 at 03:00 EST`. Signing the message with
    the SHA256 message digest algorithm would look as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免任何伪造，甲方必须使用非对称密钥对，也称为私钥/公钥对。信息由私钥签名，并且这仍然是甲方的私人信息。假设甲方有一个私钥或秘钥`Blockchain#123`，消息是`Party
    A sends $200 to Party B on July 23, 2017 at 03:00 EST`。使用SHA256消息摘要算法签名消息将如下所示：
- en: '![](img/1495295a-8cad-439d-a548-39628098dfb5.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1495295a-8cad-439d-a548-39628098dfb5.png)'
- en: 'Readers can also perform the same operation with the tool mentioned in the
    link at [https://www.freeformatter.com/hmac-generator.html](https://www.freeformatter.com/hmac-generator.html). The
    following is the computed **Hash-based Message Authentication Code** (**HMAC**):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 读者也可以在[https://www.freeformatter.com/hmac-generator.html](https://www.freeformatter.com/hmac-generator.html)链接中提到的工具执行相同的操作。以下是计算得到的**基于哈希的消息认证代码**（**HMAC**）：
- en: '![](img/501432e2-616b-4813-a9e6-ca6e5d371e87.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/501432e2-616b-4813-a9e6-ca6e5d371e87.png)'
- en: Now, each transaction consists of three important elements—the digital signature
    that resembles the source address, the public key that indicates the destination,
    and finally the transaction's information.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每个交易由三个重要元素组成—类似于源地址的数字签名，指示目的地的公钥，以及最后的交易信息。
- en: This transaction reaches party *B* as well as the other participants who verified
    this transaction with a public key. After successful validation, the transaction
    is confirmed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个交易到达*B*方以及其他通过公钥验证了这个交易的参与者。在成功验证后，交易被确认。
- en: Consensus – the core of blockchain
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共识 – 区块链的核心
- en: 'Consensus is an integral component of the blockchain system and is responsible
    for achieving agreement in a distributed environment. The open and trustless nature
    of blockchain is the heart of blockchain; however, it is also important to pay
    attention to the additional care and the strict process. As anyone can participate
    and submit information, it is critical to evaluate each participant''s agenda,
    and making everyone agree to a desired policy is beneficial in avoiding any fraud
    attempts. This gave birth to the consensus mechanism, which is similar to the
    signaling process, to ensure that everything has been considered before actual
    communication is started. The following are four key methods that are used to
    achieve consensus with blockchain:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 共识是区块链系统的一个组成部分，负责在分布式环境中达成一致。区块链的开放和无信任性质是区块链的核心；然而，同样也需要注意额外的注意和严格的流程。由于任何人都可以参与并提交信息，评估每个参与者的议程是至关重要的，并且让每个人同意一项理想政策有助于避免任何欺诈企图。这催生了类似信令过程的共识机制，以确保在实际通信开始之前已经考虑到所有事项。以下是用于实现区块链共识的四种主要方法：
- en: '**PoW**: One of the most popular methods to achieve consensus in blockchain
    was invented by Satoshi Nakamoto, the founder of Bitcoin. In this type of consensus,
    fraud attempt is avoided based on the fundamentals of trusting a particular node
    that has been created to do maximum computational work. The block owner, also
    known as a **miner** in the world of cryptocurrency, knows that having powerful
    computational resources can achieve a better hash rate, and the chances of getting
    rewarded with Bitcoin increases. A new transaction is broadcast to all the nodes
    in the network, and each node keeps listening to these transactions. Nodes that
    want to gain incentives through bitcoin are known as miners, but they don''t just
    listen, they collect transactions. Miners have to solve some complex mathematical
    problems with a PoW algorithm. The one who solves it first gets rewarded with
    Bitcoin. Finally, verified blocks are added to the blockchain of every miner.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PoW**：在区块链中实现共识的最流行方法之一是由比特币创始人中本聪发明的。在这种共识类型中，基于信任特定节点可以避免欺诈企图，该节点旨在执行最大的计算工作。区块所有者，也被称为加密货币世界中的**矿工**，知道拥有强大的计算资源可以实现更好的哈希率，并且获得比特币奖励的几率增加。新交易广播到网络中的所有节点，并且每个节点都在监听这些交易。想要通过比特币获取激励的节点被称为矿工，但他们不仅仅是监听，他们收集交易。矿工必须用PoW算法解决一些复杂的数学问题。首先解决的人将获得比特币奖励。最终，验证的区块被添加到每个矿工的区块链中。'
- en: 'This mathematical problem is nothing but the process of achieving a desired
    hash with hashing applied to a set of transactions and a nonce (a 32-bit random
    number). If the output results in a hash that is smaller than the target hash,
    the miner wins the block and achieves the consensus. When a miner wins the block,
    each block carries a set of **bitcoin** (**BTC**), which they then receive:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '这个数学问题就是通过对一组交易和一个随机数（一个32位随机数）应用哈希来实现一个期望哈希的过程。如果输出得到一个比目标哈希更小的哈希，矿工就赢得了该区块并实现了共识。当一个矿工赢得一个区块时，每个区块都携带一定数量的**比特币**（**BTC**），然后他们收到:'
- en: '`Jan 2009-Nov 2012`: It was 50 BTC per block'
  id: totrans-97
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2009年1月至2012年11月`：每个区块是50 BTC'
- en: '`Nov 2012-Jul 2016`: It was 25 BTC per block'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2012年11月至2016年7月`：每个区块是25 BTC'
- en: '`Jul 2016-Feb 2020`: It is 12.5 BTC per block'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2016年7月至2020年2月`：每个区块是12.5 BTC'
- en: '`Feb 2020-Sep 2023`: It is going to be 6.25 BTC per block'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Feb 2020-Sep 2023`: 每个区块将会有 6.25 BTC'
- en: '**PoS**: This is another method to achieve consensus in the blockchain among
    nodes and to validate transactions. Unlike PoW, with PoS, the block generator
    will not be selected based on its current stack of wealth. Blocks are never rewarded
    in this mechanism, and the miner in PoS is called a **forger**. Ethereum uses
    PoS, and the purpose of choosing this was to avoid any environmental pressures
    that come with a huge amount of electricity consumption. According to the Digiconomist
    report 2017, the power consumed by an entire Bitcoin network was estimated to
    be more than that of the Republic of Ireland. Bitcoin uses the PoW mechanism,
    and it is all based on miners with powerful resources, which results in more consumption
    of electricity. With the PoS mechanism, nodes have to join a validator pool to
    be selected as a forger. **Casper**, an Ethereum consensus PoS protocol, works
    as a hybrid version with an existing PoW mechanism. An Ethereum runs every 100th
    block. PoS is well-suited for a platform with a static coin supply, and many use
    this to distribute tokens against investment.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PoS**：这是区块链中另一种节点之间达成共识和验证交易的方法。与 PoW 不同，使用 PoS，区块生成器不会根据其当前的财富来选择。在这种机制下，区块不会被奖励，PoS
    中的矿工被称为**铸造者**。以太坊使用 PoS，选择这种方法的目的是避免因大量耗电而产生的环境压力。根据 Digiconomist 2017 年的报告，整个比特币网络消耗的电力估计超过了爱尔兰共和国。比特币使用
    PoW 机制，完全依赖于拥有强大资源的矿工，这导致了更多的电力消耗。使用 PoS 机制，节点必须加入验证者池才能被选为铸造者。**Casper**，一种以太坊共识
    PoS 协议，作为一个混合版本与现有的 PoW 机制一起运行。PoS 适用于具有静态币量的平台，并且许多人使用它来分发代币进行投资。'
- en: '**DPoS**: This is another consensus protocol and is known to be a faster and
    more efficient model. DPoS uses a democratic way to solve consensus problems.
    It takes around one second to elect the block generator in the network and confirm
    the transaction. This way, you don''t just solve the consensus issue, but you
    also eliminate unwanted regulatory interference.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DPoS**：这是另一种共识协议，被认为是更快、更高效的模型。DPoS 使用民主方式解决共识问题。在网络中选举区块生成器并确认交易大约需要一秒钟。这样，你不仅解决了共识问题，还消除了不受欢迎的监管干预。'
- en: '**PBFT**: Byzantine failure is the state of appearing both failed and functioning
    to fault-detection systems and showing a different pattern to different detectors.
    If some of the node members send inconsistent information to others about transactions,
    it may lead to a huge dilemma for an entire network. PBFT is a solution to protect
    the network against Byzantine Faults.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PBFT**：拜占庭容错是一种既失败又在故障检测系统中起作用，并且对不同检测器显示不同模式的状态。如果一些节点成员向其他人发送关于交易的不一致信息，可能会给整个网络带来巨大的困境。PBFT
    是一种解决方案，可保护网络免受拜占庭错误的侵害。'
- en: Ethereum
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊
- en: Ethereum is one of the oldest blockchain flavors that has provided platforms
    with a way to customize a system. Bitcoin aims to disrupt the current payment
    system and online banking with its own consensus mechanism whereas Ethereum is
    in the midst of decentralizing the existing computer system since it works heavily
    on the client-server model.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊是最古老的区块链之一，它为平台提供了一种自定义系统的方式。比特币旨在通过自己的共识机制颠覆当前的支付系统和在线银行业，而以太坊正处于去中心化现有计算机系统的中间状态，因为它在客户端-服务器模型上大量运作。
- en: History
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 历史
- en: In 2013, Vitalik Buterin, a 22-year-old programmer involved in Bitcoin, first
    described Ethereum on whitepaper. In early 2014, a Swiss company called Ethereum
    Switzerland GmbH developed the first Ethereum software. In June 2016, **decentralized
    autonomous organization** (**DAO**) was hacked by an anonymous group, sparkling
    significant debate in the crypto-community and resulted into the network being
    split into two groups— **Ethereum** (**ETH**) and **Ethereum Classic** (**ETC**).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 2013年，22岁的程序员维塔利克·布特林首次在白皮书中描述了以太坊，他曾参与比特币的开发。2014年初，一家名为以太坊瑞士有限责任公司的瑞士公司开发了第一个以太坊软件。2016年6月，一个匿名团体攻击了**DAO**（去中心化自治组织），引发了加密社区的重大争论，并导致网络分裂成两个派别——**以太坊**（**ETH**）和**以太经典**（**ETC**）。
- en: What is Ethereum?
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊是什么？
- en: Ethereum is a decentralized network that has the capability of running applications
    in a distributed environment. The idea is simply to avoid complete dependency
    over a single entity to store and manage a user's personal and business data.
    In the current database system, once data is stored online, the client has no
    information about how the data has been stored, what security prevention measures
    have been taken, who can read the data, and so on. Ethereum provides a platform
    to build distributed applications that connect each stack holder or party directly
    to achieve better transparency and zero-dependency. Even with the fundamental
    similarities between both Bitcoin and Ethereum, both notably differ in the purposes
    and capabilities. With Ethereum, any centralized services can be transformed to
    decentralized services with its unique programming capability. There are basically
    three layers of Ethereum—The **Ethereum Virtual Machine** (**EVM**), the cryptocurrency
    ether, and gas.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊是一个分散网络，具有在分布式环境中运行应用程序的能力。其简单的理念是避免完全依赖单一实体来存储和管理用户的个人和业务数据。在当前的数据库系统中，一旦数据存储在线，客户端就无法获取有关数据的存储方式、采取了哪些安全防范措施、谁能读取数据等信息。以太坊提供了一个平台，可以构建分布式应用程序，将每个利益相关方或参与方直接连接起来，以实现更好的透明度和零依赖性。尽管比特币和以太坊之间存在基本的相似之处，但它们在目的和能力上显著不同。通过以太坊，任何集中式服务都可以通过其独特的编程能力转变为分散式服务。以太坊基本上有三个层面——以太坊虚拟机（**EVM**）、加密货币以太币和
    gas。
- en: Smart contract
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能合约
- en: Smart contracts, in their simplest forms, are programs that are written to perform
    specific execution by their creator. Although contracts can be encoded on any
    blockchain flavors, Ethereum is the most preferred option since it provides scalable
    processing capabilities.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约，在其最简单的形式中，是由其创建者编写的用于执行特定任务的程序。尽管合约可以编码在任何区块链中，但以太坊是最受欢迎的选择，因为它提供了可扩展的处理能力。
- en: 'Ethereum allows developers to code their own smart contracts. Smart contracts
    can be used to:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊允许开发人员编写他们自己的智能合约。智能合约可以用于：
- en: Streamline the process of claim settlements by automatically triggering a claim
    when certain events occur
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在发生特定事件时自动触发索赔，简化索赔解决流程
- en: Manage agreements between users
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理用户之间的协议
- en: Store information about application such as health records and KYC information
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储有关应用程序的信息，例如健康记录和 KYC 信息
- en: In Ethereum, each contract is given an address so that it can be uniquely identified.
    This address is calculated by the hashing creator's address and the number of
    transactions that have been performed.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊中，每个合约都被赋予一个地址，以便可以唯一识别。该地址是通过对创建者地址和已执行的交易数进行哈希计算得到的。
- en: When we deploy a smart contract into a public blockchain environment, we get
    an address for our smart contract. We can now write code to interact with a specific
    instance in the smart contract. Contracts have standards such as ERC20 standards
    and it also important to implement the required methods.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将智能合约部署到公共区块链环境中时，我们会为我们的智能合约获得一个地址。我们现在可以编写代码与智能合约中的特定实例进行交互。合约有标准，如 ERC20
    标准，重要的是实现所需的方法。
- en: Let's try and build our first smart contract. We will use Solidity to write
    the smart contract. The programming language Solidity is similar to JavaScript.
    To start the process, we first have to set up the environment with the Ganache
    package, which will be used to create a private blockchain. Secondly, we need
    access to MyEtherWallet online, which can be found at [https://github.com/kvhnuke/etherwallet/releases](https://github.com/kvhnuke/etherwallet/releases)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试构建我们的第一个智能合约。我们将使用 Solidity 编写智能合约。Solidity 编程语言类似于 JavaScript。要开始该过程，我们首先必须使用
    Ganache 软件包设置环境，该软件包将用于创建私有区块链。其次，我们需要访问在线的 MyEtherWallet，该网址为 [https://github.com/kvhnuke/etherwallet/releases](https://github.com/kvhnuke/etherwallet/releases)。
- en: 'Once the package has been installed, we can get started by going to Ethereum
    IDE by using the link at [https://remix.ethereum.org/](https://remix.ethereum.org/).
    The following screenshot shows the Ethereum IDE:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以通过以下链接进入以太坊 IDE 开始。以下截图显示了以太坊 IDE：
- en: '![](img/34aed3ae-d53a-47c3-a2e7-3552f7380bbd.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34aed3ae-d53a-47c3-a2e7-3552f7380bbd.png)'
- en: '**Remix** is an online compiler for Solidity and used to write our smart contract
    code. This code is for our counter. As we can see in the following screenshot,
    it has one variable and two functions. The variable `c` is an integer and is private,
    which means that it can''t be accessed by anyone outside of the contract. The
    first function, `plusbyone()`, changes  the value of `c` by incrementing its value
    and the second function, `getC()`, accesses `c` and return its value to whoever
    or whatever called the function.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**Remix** 是用于 Solidity 的在线编译器，用于编写我们的智能合约代码。此代码是为我们的计数器所写。正如我们在以下截图中所看到的，它有一个变量和两个函数。变量
    `c` 是一个整数且是私有的，这意味着它不能被合约之外的任何人访问。第一个函数 `plusbyone()` 通过增加其值来改变 `c` 的值，第二个函数 `getC()`
    访问 `c` 并将其值返回给调用该函数的人或物。'
- en: 'When the counter code is pasted into the remix, it will look like the following
    screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当计数器代码被粘贴到 Remix 中，它将看起来像以下截图：
- en: '![](img/8965110c-0016-412a-9607-b039835240c3.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8965110c-0016-412a-9607-b039835240c3.png)'
- en: 'Now let''s open Ganache and we''ll get to see something like this. At the top
    of the screen, we can see that it says RPC SERVER:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '现在让我们打开 Ganache，我们将会看到类似于这样的内容。在屏幕顶部，我们可以看到它写着 RPC SERVER:'
- en: '![](img/93f0b6fc-c86d-4e62-a463-d380e0c5e1a1.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93f0b6fc-c86d-4e62-a463-d380e0c5e1a1.png)'
- en: 'Now let''s try to visit MyEtherWallet in a browser to see the result of this.
    In the top-right corner, you will see a drop-down that shows that MyEtherWallet
    is connected to Ethereum. By default, it connects to Ethereum''s main network.
    We have to change this option by clicking the drop-down. Click on Add Custom Network
    / Node option, as shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试在浏览器中访问 MyEtherWallet，以查看结果。在右上角，您将看到一个下拉菜单，显示 MyEtherWallet 正连接到以太坊。默认情况下，它连接到以太坊的主网络。我们必须通过单击下拉菜单来更改此选项。如以下截图所示，单击“添加自定义网络
    / 节点”选项：
- en: '![](img/7d749d7f-964e-4a4d-9bd3-22df548159bc.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d749d7f-964e-4a4d-9bd3-22df548159bc.png)'
- en: 'Now we can input the RPC server information that Ganache has ready for use.
    We can name the node as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以输入 Ganache 准备好使用的 RPC 服务器信息。我们可以将节点命名为以下内容：
- en: '![](img/d45526bf-6d6b-41a8-bbaa-610db4effbc3.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d45526bf-6d6b-41a8-bbaa-610db4effbc3.png)'
- en: 'MyEtherWallet is now connected to our self-hosted blockchain through Ganache.
    Let''s use MyEtherWallet to upload our counter smart contract. To perform this,
    we will click on the Contracts tab, which is at the top of MyEtherWallet''s navigation
    bar, and select Deploy Contract option:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: MyEtherWallet 现在通过 Ganache 连接到了我们自己托管的区块链。让我们使用 MyEtherWallet 来上传我们的计数器智能合约。为此，我们将点击位于
    MyEtherWallet 导航栏顶部的“合约”选项卡，然后选择“部署合约”选项：
- en: '![](img/b92fc417-dc83-4057-adb4-92216a1ef646.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b92fc417-dc83-4057-adb4-92216a1ef646.png)'
- en: 'As we can see, MyEtherWallet is asking us for the contract''s byte code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，MyEtherWallet 正要求我们提供合约的字节码：
- en: '![](img/141a2179-08ca-4302-8edd-658041db2966.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/141a2179-08ca-4302-8edd-658041db2966.png)'
- en: 'To locate this, we''ll go back to our Remix IDE and click on the Details button:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要定位此信息，我们将返回到我们的 Remix IDE 并点击“详细信息”按钮：
- en: '![](img/399f09fe-992f-4e67-b8ab-c9c8a89607e6.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/399f09fe-992f-4e67-b8ab-c9c8a89607e6.png)'
- en: 'We will now see a dialog with information about our counter smart contract.
    To copy the byte code, we''ll click the clipboard icon next to the BYTECODE section:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将看到一个包含有关我们计数器智能合约信息的对话框。要复制字节码，我们将点击 BYTECODE 部分旁边的复制图标：
- en: '![](img/9652231c-c8e7-44e9-9e86-dabdb4173891.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9652231c-c8e7-44e9-9e86-dabdb4173891.png)'
- en: 'Now we will go back to MyEtherWallet and paste the byte code into the Byte
    Code text area:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将回到 MyEtherWallet 并将字节码粘贴到字节码文本区域里：
- en: '![](img/855a77ae-8ebc-4344-82a4-e4e209359433.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/855a77ae-8ebc-4344-82a4-e4e209359433.png)'
- en: 'Now we can scroll down and import an account address to upload the contract.
    By default, Ganache turns up with five addresses that we can use to interact with
    our private blockchain. We will go back to Ganache and click on the key icon so
    that we can access any of the addresses:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以滚动下去并导入一个账户地址来上传合约。默认情况下，Ganache 提供了五个地址，我们可以用它们来与我们的私有区块链交互。我们将返回到 Ganache
    并点击钥匙图标，以便我们可以访问任何地址：
- en: '![](img/0270f668-63d6-44f3-902d-6e5e581377e7.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0270f668-63d6-44f3-902d-6e5e581377e7.png)'
- en: 'Now we will see the private key bind with the account:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到私钥与账户绑定：
- en: '![](img/3ff3d4d9-0b3d-45ad-81cf-39f6301a2fb7.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ff3d4d9-0b3d-45ad-81cf-39f6301a2fb7.png)'
- en: 'We now have to copy this private key and paste it into MyEtherWallet:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须复制这个私钥并将其粘贴到 MyEtherWallet 中：
- en: '![](img/f729c572-3af7-46dc-a976-f542dac91053.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f729c572-3af7-46dc-a976-f542dac91053.png)'
- en: 'Now we can click on the Unlock button, and MyEtherWallet will ask us if we
    want to sign this transaction and deploy our contract:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以点击解锁按钮，MyEtherWallet会问我们是否要签署此交易并部署我们的合同：
- en: '![](img/65f392fa-0014-4d58-a916-f61e2e2585e6.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65f392fa-0014-4d58-a916-f61e2e2585e6.png)'
- en: 'Finally, we will see a successful prompt, as shown in the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将会看到一个成功的提示，如下截图所示：
- en: '![](img/23f07126-ad06-4b4f-bb52-c922833ab061.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23f07126-ad06-4b4f-bb52-c922833ab061.png)'
- en: 'After a successful transaction, Ganache will increment its CURRENT BLOCK value,
    and the transaction count of the account that we used to deploy the contract will
    also be incremented:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的交易后，Ganache将增加其当前区块值，并且我们用来部署合同的帐户的交易计数也会增加：
- en: '![](img/5cce6ffe-0f56-4492-ab00-5993a1d0d63d.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5cce6ffe-0f56-4492-ab00-5993a1d0d63d.png)'
- en: 'Our smart contract is now uploaded to our blockchain. To interact with it by
    incrementing and decrementing the counter, we now have to go back to MyEtherWallet
    and select the Interact with Contract option:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的智能合约现在已经上传到我们的区块链上。要通过增加和减少计数来与它交互，我们现在必须返回到MyEtherWallet并选择与合同互动选项：
- en: '![](img/489e4a83-898a-492d-a328-3cd2e34c771e.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/489e4a83-898a-492d-a328-3cd2e34c771e.png)'
- en: 'MyEtherWallet will now ask us for the address at which our newly deployed smart
    contract resides, as well as the **application binary interface** (**ABI**) of
    our contract. We can view our transaction log as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: MyEtherWallet现在要求我们输入我们新部署的智能合约所在的地址，以及合同的**应用二进制接口**（**ABI**）。我们可以按照以下方式查看我们的交易日志：
- en: '![](img/48e3c967-bfa8-47ef-b85e-1395fbf068e7.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48e3c967-bfa8-47ef-b85e-1395fbf068e7.png)'
- en: 'As you can see, Ganache tells us the address we used to deploy the contract.
    Let''s click the transaction, copy the created contract address, and paste it
    into MyEtherWallet:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，Ganache告诉我们我们用来部署合同的地址。让我们点击该交易，复制创建的合同地址，并粘贴到MyEtherWallet中：
- en: '![](img/cfa78bc3-0b1a-424e-86fd-9c3bb1d342c0.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cfa78bc3-0b1a-424e-86fd-9c3bb1d342c0.png)'
- en: 'The following screenshot shows us that MyEtherWallet knows how to interact
    with our contract. We will go back to Remix and click the clipboard icon next
    to the interface ABI to copy it:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '下面的截图显示了MyEtherWallet如何与我们的合同进行交互。我们将回到Remix并点击接口ABI旁边的剪贴板图标进行复制： '
- en: '![](img/3fa2006d-7eab-4337-be9c-feaa556ff212.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3fa2006d-7eab-4337-be9c-feaa556ff212.png)'
- en: 'Now we have to go back to MyEtherWallet, paste the ABI into its text box, and
    click the Access button. We can interact with our contract by clicking the Select
    a function drop-down:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要返回MyEtherWallet，将ABI粘贴到文本框中，并点击访问按钮。我们可以通过点击选择函数下拉菜单与我们的合同进行交互：
- en: '![](img/7af56dc0-1014-478c-86b8-e18a28541b9d.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7af56dc0-1014-478c-86b8-e18a28541b9d.png)'
- en: 'In our code, we set count `c`s initial value to `0`. To confirm that the smart
    contract is working, we need to call the `getC()` function:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中，我们将计数`c`的初始值设置为`0`。为了确认智能合约工作正常，我们需要调用`getC（）`函数：
- en: '![](img/cf734132-06cc-44a6-b618-acf14aa3e4b9.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf734132-06cc-44a6-b618-acf14aa3e4b9.png)'
- en: 'We can see that the contract was returned, but we also made other function,
    `plusbyone()`. Let''s call `plusbyone()` to test it. We will do this by selecting
    the function drop-down again, selecting `plusbyone`, and creating a new transaction:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到合同已经返回，但我们还创建了其他函数`plusbyone（）`。让我们调用`plusbyone（）`来测试它。我们可以通过再次选择函数下拉菜单，选择`plusbyone`，并创建一个新的交易来实现这个目的：
- en: '![](img/af505797-1fbe-4e77-9373-886fb4ebd4ad.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af505797-1fbe-4e77-9373-886fb4ebd4ad.png)'
- en: 'This just incremented the value of `c`. Now, we can call `getcount()` again
    to confirm whether the value changed:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这刚刚增加了`c`的值。现在，我们可以再次调用`getcount（）`来确认值是否改变：
- en: '![](img/9ab6c24e-e228-4d21-8f54-2483b2203123.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ab6c24e-e228-4d21-8f54-2483b2203123.png)'
- en: 'Finally, we can see that the `c` variable is now equal to `1`. So, this clarifies
    that our `plusbyone()` function works:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以看到`c`变量现在等于`1`。所以，这澄清了我们的`plusbyone（）`函数是有效的：
- en: '![](img/e5d2a60e-e4c5-4064-93b2-cef162da140f.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5d2a60e-e4c5-4064-93b2-cef162da140f.png)'
- en: EVM
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EVM
- en: EVM is a decentralized runtime environment for building and managing smart contracts.
    In Ethereum, with every program, a network of thousands of computers processes
    it.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: EVM是一个用于构建和管理智能合约的去中心化运行时环境。在以太坊中，每个程序都会被数千台计算机网络处理。
- en: Smart contracts are complied into bytecode, which a feature called EVM can read
    and execute. All of the nodes execute this contract using their EVMs. By the fundamental
    definition, every node in the network holds a copy of the transaction and the
    smart contract's history of the network. EVM is responsible for executing a contract
    with the rules preprogrammed by the developer. EVM computes this data through
    a stack-based bytecode, whereas a developer writes the smart contract in a high-level
    language, such as Solidity or Serpent.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约被编译成字节码，具有一个称为 EVM 的特性可以读取和执行。所有节点都使用他们的 EVMs 执行此合约。从根本定义上，网络中的每个节点都持有交易的副本以及智能合约在网络中的历史记录。EVM
    负责执行开发人员预先编程的合同规则。EVM通过基于堆栈的字节码计算这些数据，而开发者则使用高级语言（如 Solidity 或 Serpent）编写智能合约。
- en: Gas
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gas
- en: It costs a lot of energy when a smart contract is executed by every single node
    in the Ethereum network. Because consumption of more energy costs more money,
    it is also dependent on the level of smart contract programming. In other words,
    each low-level opcode in the EVM costs a specific amount of *gas* to perform its
    desired output.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约在以太坊网络中被每个节点执行时会消耗大量能量。因为能源消耗越多，造成的费用也就越高，这也取决于智能合约编程的水平。换句话说，EVM 中的每个低级操作码执行其期望输出都需要消耗特定数量的*gas*。
- en: Gas just indicates the cost of performing a computation and helps developers
    understand energy consumption against their smart contract code. Like the bitcoin
    market, the value of  gas is determined by the market. If a higher gas price is
    paid, the node will prioritize the transactions for profit.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Gas 只是指执行计算的成本，并帮助开发人员了解其智能合约代码的能源消耗。与比特币市场类似，gas 的价值是由市场决定的。如果支付了更高的 gas 价格，节点将优先处理交易以获取利润。
- en: dApp
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: dApp
- en: dApp uses incentives such as crypto-tokens and inbuilt consensus mechanisms.
    A distributed application does not need to store all of its states; however, an
    Ethereum-based distributed application does store trusted states, and this results
    in an economical solution for end users.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: dApp 利用加密代币和内置共识机制等激励措施。一个分布式应用程序并不需要存储其所有状态；然而，基于以太坊的分布式应用程序确实存储了可信状态，这为最终用户提供了经济解决方案。
- en: The dApp client is required to program the frontend, except the client interfaces
    with the Ethereum blockchain. The clients are often written in JavaScript because
    they can be run in a web browser, which most of us have.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: dApp 客户端需要为前端编程，但除此之外，客户端还与以太坊区块链进行交互。客户端经常用 JavaScript 编写，因为它们可以在网页浏览器中运行，这是我们大多数人都拥有的。
- en: The dApp browser makes use of the dApp client, which is usually written in JavaScript,
    to interface with an Ethereum node that then communicates with a smart contract.
    dApp ensures a connection with the Ethereum node and provides easy process to
    change the connection. It also provides an account interface for the user so that
    they can easily interface with these dApps.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: dApp 浏览器利用通常用 JavaScript 编写的 dApp 客户端与一个与智能合约通信的以太坊节点进行交互。dApp 确保与以太坊节点的连接并提供了轻松更改连接的过程。它还为用户提供了一个账户界面，让他们可以轻松与这些
    dApps 进行交互。
- en: With this, we have covered some of the core components of Ethereum and looked
    at the real world workings of a smart contract. In the upcoming chapters, we will
    start building a distributed application on an Ethereum blockchain.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些，我们已经涵盖了以太坊的一些核心组件，并研究了智能合约的实际运作。在接下来的章节中，我们将开始在以太坊区块链上构建一个分布式应用程序。
- en: Private versus public blockchain
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 私有与公共区块链
- en: Many flavors of blockchain have evolved over the years, and several iterations
    have been performed to achieve business values. There are more than a thousand
    startups launching their products with distributed blockchain applications. When
    it is about business, it is important to know best-fit solutions.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 多种区块链技术已经在过去几年中发展，并进行了多次迭代以实现商业价值。有超过一千家初创企业正在推出他们的产品，其中包括分布式区块链应用。在商业领域，了解最适合的解决方案很重要。
- en: From its birth, blockchain has been permissionless, open to public without exception.
    You can download the node software and view the entire history of blockchain,
    initiate transactions, and store information. This makes life for end users easy;
    however, businesses interested in deploying blockchain may see this as a big challenge.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 从诞生开始，区块链就是无需许可的，向公众开放的。你可以下载节点软件并查看整个区块链的历史，发起交易并存储信息。这让最终用户的生活变得更加轻松；然而，有意部署区块链的企业可能会将此视为一个巨大的挑战。
- en: Public blockchains do carry some critical disadvantages when it comes to business.
    Businesses are usually more interested in private blockchains to create blockchain
    solutions with better privacy and security.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Public blockchain
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the public blockchain, the process of chaining a block is always with nodes
    that can be independent, untrusted, or even unknown, and can participate in the
    consensus process to validate a block. In a public blockchain, anyone can simply
    download the blockchain node client in their system and transact with anyone,
    and anyone can read the transactions over the block explorer. Bitcoin and Ethereum
    are some of the major examples of public blockchains.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin is the first decentralized platform to transfer money safely and securely.
    However, Ethereum is innovated with a different purpose—a purpose to provide a
    platform for anybody to develop their own decentralized application that won't
    be limited to the transfer of just currency, but any kind of value. Ethereum uses
    smart contracts to achieve a set of self-operating programs that execute when
    certain conditions are satisfied.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Private blockchain
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An organization that sets up a private blockchain configures it to work as a
    permissioned network. It is built to provide better privacy over transactions
    and is suited for banking and other financial institutions. Unlike a public blockchain,
    just connecting to the internet with a blockchain node client will not be enough
    to initiate transactions; however, a consortium blockchain allows only specific
    and preverified people to access and transfer any type of value over the network.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: In this system, the consensus mechanism is controlled and managed by preselected
    groups of nodes. This way, even though the blockchain works in a public network,
    it still remains restricted and can only be controlled and maintained by specific
    groups of nodes, or maybe even a single node. Private blockchains can also be
    called **consortium blockchains** based on their restrictions and control levels.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: One of the most popular implementations of this is Hyperledger Fabric, a permissioned
    blockchain framework hosted by The Linux Foundation.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Business adaptation
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Industry leaders are spending millions of dollars on **r****esearch and development**
    (**R&D**) to evaluate emerging platforms over blockchain. In any sector, the cost
    of intermediaries are unavoidable and this is growing with the number of transactions,
    and may based on subscription plans.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explore blockchain use cases:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '**FinTech**: Financial organizations are always in need of adapting an emerging
    technology to solve the key security challenges and enhancing user experience.
    Because of the risk of downtime (service disruption) involved in technology refreshes,
    organizations prefer to wait till they get feedback and use cases from the majority
    of their industry players. More than 50 of the largest banking organizations have
    already recognized and appreciated blockchain for enhancing security at the foundation
    layer. Every successful transaction is saved in the distributed ledger chronologically
    with a hashing algorithm in the form of blocks. This means that records cannot
    be tempered with and thereby mitigate risks of financial fraud attempt.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金融科技**：金融机构始终需要适应新兴技术来解决关键安全挑战并提升用户体验。由于技术更新涉及到停机（服务中断）的风险，组织更倾向于等待从其行业主要参与者那里获得反馈和用例。超过50家最大的银行机构已经认识到并赞赏区块链在提高基础层安全性方面的作用。每笔成功交易都按照时间顺序保存在分布式账本中，以散列算法的形式以区块形式保存。这意味着记录不能被篡改，从而减少了金融欺诈尝试的风险。'
- en: '**InsurTech**: In general, to fill up an insurance policy, there is a need
    for a third-party such as a broker, an insurance company sales person, or maybe
    a lawyer. With blockchain, citizens can directly fill up their file without the
    involvement of a third person. Many insurance-critical tasks and subtasks can
    be covered as follows:'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保险科技**：一般来说，填写保险单需要第三方，如经纪人、保险公司销售人员或可能是律师。通过区块链，公民可以直接填写自己的文件，而无需第三方参与。许多与保险相关的任务和子任务可以如下覆盖：'
- en: Claim management
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理赔管理
- en: Managing policies of national and foreign clients
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理国内外客户的政策
- en: eKYC
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子身份认证
- en: Tracking policy status
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪政策状态
- en: Managing multiple portfolios
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理多个投资组合
- en: '**Healthcare**: Healthcare operations are more than just a standard business
    operation. With increasing data breaches and ransomware incidents in healthcare
    industries, it is critical that they come up with a technology that facilitates
    security from the foundation layer. Some of the most effective use cases are as
    follows:'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**医疗保健**：医疗保健运营不仅仅是标准的业务运营。随着医疗行业数据泄露和勒索软件事件的增加，关键是他们要提出一种从基础层面促进安全的技术。一些最有效的用例如下：'
- en: Health record data management, such as images, lab reports, and genomics
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 健康记录数据管理，如图像、实验室报告和基因组学
- en: Storing a complete indexed history of each patient with a proper timestamp
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储每个病人的完整索引历史记录，并附有适当的时间戳
- en: Patients will be notified when this is shared or modified
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 病人在分享或修改时会收到通知
- en: Medicine inventory management
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 药品库存管理
- en: '**Cyber security**: Cyber criminals are becoming more and more sophisticated,
    and organizations are in a race with them to defend critical assets, such as trade
    secrets, intellectual property, and customer information. Every organization uses
    some form of cybersecurity solution, and yet billions of dollars are lost every
    year. Blockchain is designed to be decentralized, immutable, and traceable, and
    it solves most of the security challenges at the core. Some of its use cases are
    as follows:'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络安全**：网络罪犯变得越来越复杂，组织正在与他们竞争，保卫关键资产，如商业机密、知识产权和客户信息。每个组织都使用某种形式的网络安全解决方案，然而每年仍然会损失数十亿美元。区块链设计为分散、不可变和可追溯，它解决了大多数核心安全挑战。一些其用例如下：'
- en: Identity and access management
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份和访问管理
- en: DDoS protection
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DDoS防护
- en: Decentralized storage
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分散式存储
- en: Protection against **man-in-the-middle** (**MITM**) attacks
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防范**中间人攻击（MITM）**攻击
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about how blockchain can solve many business challenges
    from the foundation layer. With the Ethereum blockchain, organizations can now
    easily leverage the benefits of distributed applications, similar to the efforts
    needed to turn-up traditional web applications. We also learned about the systematic
    programming of smart contracts and integrating them with the Ethereum blockchain.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解到了区块链如何从基础层解决许多业务挑战。通过以太坊区块链，组织现在可以轻松利用分布式应用程序的好处，类似于启动传统Web应用程序所需的工作。我们还了解了智能合约的系统化编程，并将其与以太坊区块链集成。
- en: In the next chapter, we will learn about **Hyperledger**, a project hosted by
    the Linux Foundation. We will also understand how Hyperledger solves several business
    needs.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解由Linux基金会主持的**Hyperledger**项目。我们还将了解Hyperledger如何解决几个业务需求。
- en: Questions
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'After exploring the blockchain technology with its integral components and
    immutable chaining process, we still need to understand even more flavors of blockchain:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索了区块链技术及其组成部分和不可变的链接过程后，我们仍然需要更多地了解区块链的不同类型：
- en: Can Bitcoin blockchain be used for business applications in near future?
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比特币区块链能否在不久的将来用于商业应用？
- en: What is the future of Ethereum?
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以太坊的未来如何？
- en: Further reading
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: To understand even more about the blockchain's architecture and the consensus
    model, refer to the link at [https://www.researchgate.net/publication/318131748_An_Overview_of_Blockchain_Technology_Architecture_Consensus_and_Future_Trends](https://www.researchgate.net/publication/318131748_An_Overview_of_Blockchain_Technology_Architecture_Consensus_and_Future_Trends).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要更深入了解区块链的架构和共识模型，请参考链接：[https://www.researchgate.net/publication/318131748_An_Overview_of_Blockchain_Technology_Architecture_Consensus_and_Future_Trends](https://www.researchgate.net/publication/318131748_An_Overview_of_Blockchain_Technology_Architecture_Consensus_and_Future_Trends)。
