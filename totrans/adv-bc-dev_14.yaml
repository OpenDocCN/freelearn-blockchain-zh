- en: Alternative Blockchains
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替代区块链
- en: This chapter is intended to provide an introduction to alternative blockchain
    solutions. With the success of Bitcoin and subsequent realization of the potential
    of blockchain technology, a Cambrian explosion started that resulted in the development
    of various blockchain protocols, applications, and platforms. Some projects did
    not gain much traction, for example as an estimate 46% of ICOs have failed this
    year, but many have succeeded in creating a solid place in this space.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在介绍替代的区块链解决方案。随着比特币的成功以及对区块链技术潜力的逐渐认识，出现了一场寒武纪大爆发，导致了各种区块链协议、应用和平台的发展。一些项目并没有得到很大的发展，例如估计今年有46%的ICO项目失败了，但许多项目已经成功在这一领域确立了自己的地位。
- en: In this chapter, readers will be introduced to alternative blockchains and platforms
    such as Kadena, Ripple, and Stellar. We will explore the projects that either
    are new blockchains on their own or provide support to other existing blockchains
    by providing SDKs, frameworks, and tools to make development and deployment of
    blockchain solutions easier. The success of Ethereum and Bitcoin has resulted
    in various projects that spawned into existence by leveraging the underlying technologies
    and concepts introduced by them. These new projects add value by addressing the
    limitations in the current blockchains such as scalability and or enhancing the
    existing solutions by providing an additional layer of user-friendly tools on
    top of them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，读者将被介绍到像Kadena、Ripple和Stellar这样的替代区块链和平台。我们将探索那些要么是独立的新区块链，要么通过提供SDK、框架和工具来支持其他现有区块链的项目，使得区块链解决方案的开发和部署变得更加容易。以太坊和比特币的成功导致了各种项目的出现，它们通过利用它们引入的底层技术和概念，通过增加用户友好的工具层来解决当前区块链的局限性或增强现有解决方案的价值。
- en: Blockchains
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块链
- en: In this section, an introduction to new blockchain solutions will be given,
    and later sections will cover various platforms and development kits that complement
    existing blockchains. For example, Kadena is a new private blockchain with novel
    ideas such as Scalable BFT. Various concepts such as sidechains, drivechains,
    and pegging have also been introduced with this growth of blockchain technologies.
    This chapter will cover all these technologies and related concepts in detail.
    Of course, it's not possible to cover all **alternative chains** (**altchains**)
    and platforms, but all those platforms have been included in this chapter that
    is related to blockchains, covered in the previous chapters, or are expected to
    gain traction soon.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '在本节中，将介绍新的区块链解决方案，后续章节将涵盖各种平台和开发工具包，以补充现有的区块链。例如，Kadena是一个具有创新理念的新私有区块链，其中引入了诸如可扩展BFT之类的概念。随着区块链技术的发展，也引入了诸如侧链、驱动链和挂钩等概念。本章将详细介绍所有这些技术和相关概念。当然，不可能涵盖所有的**替代链**（altchains）和平台，但本章包括了所有与区块链相关的、前几章涵盖的，或者预计很快会获得成功的平台。 '
- en: We will explore Kadena, Ripple, Stellar, Quorum and various other blockchains
    in the section.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中探讨Kadena、Ripple、Stellar、Quorum和其他各种区块链。
- en: Kadena
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kadena
- en: Kadena is a private blockchain that has successfully addressed scalability and
    privacy issues in blockchain systems. A new Turing incomplete language, called
    Pact, has also been introduced with Kadena that allows the development of smart
    contracts. A key innovation in Kadena is its Scalable BFT consensus algorithm,
    which has the potential to scale to thousands of nodes without performance degradation.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kadena是一个私有区块链，成功解决了区块链系统中的可扩展性和隐私问题。Kadena还引入了一种名为Pact的新的图灵不完备语言，允许智能合约的开发。Kadena的一个关键创新是其可扩展的BFT共识算法，有潜力在不影响性能的情况下扩展到数千个节点。
- en: Scalable BFT is based on the original Raft algorithm and is a successor of Tangaroa
    and Juno. Tangaroa, which is a name given to an implementation of Raft with fault
    tolerance (a BFT Raft), was developed to address the availability and safety issues
    that arose from the behavior of Byzantine nodes in the Raft algorithm, and Juno
    was a fork of Tangaroa that was developed by JPMorgan. Consensus algorithms are
    discussed in [Chapter 1](76e4e401-30ba-44f9-832f-333ba6c12cbc.xhtml), *Blockchain
    101* in more detail.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展 BFT 基于原始的 Raft 算法，是 Tangaroa 和 Juno 的后继者。Tangaroa 是 Raft 的一个实现，具有容错性（即 BFT
    Raft），旨在解决 Raft 算法中拜占庭节点行为引起的可用性和安全性问题，而 Juno 则是 JPMorgan 开发的 Tangaroa 的分支。共识算法在[第一章](76e4e401-30ba-44f9-832f-333ba6c12cbc.xhtml)的*区块链
    101*中更详细地讨论。
- en: Both of these proposals have a fundamental limitation—they cannot scale while
    maintaining a high level of high performance. As such, Juno could not gain much
    traction. Private blockchains have the more desirable property of maintaining
    high performance as the number of nodes increase, but the aforementioned proposals
    lack this feature. Kadena solves this issue with its proprietary Scalable BFT
    algorithm, which is expected to scale up to thousands of nodes without any performance
    degradation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个提案都有一个根本性的限制——在保持高性能的同时无法扩展。因此，Juno 无法获得太多的关注。私有区块链具有更理想的特性，即在节点数量增加时保持高性能，但上述提案缺乏这一特性。Kadena
    通过其专有的可扩展 BFT 算法解决了这个问题，该算法预计能够在不降低性能的情况下扩展到数千个节点。
- en: Moreover, confidentiality is another significant aspect of Kadena that enables
    privacy of transactions on the blockchain. This security service is achieved by
    using a combination of key rotation, symmetric on-chain encryption, incremental
    hashing, and Double Ratchet protocol.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，保密性是 Kadena 的另一个重要方面，它能够在区块链上保护交易的隐私。这种安全服务通过使用密钥轮换、对称链上加密、增量哈希和双扳手协议的组合来实现。
- en: Key rotation is used as a standard mechanism to ensure the security of the private
    blockchain. It is used as a best practice to thwart any attacks if the keys have
    been compromised, by periodically changing the encryption keys. There is native
    support for key rotation in Pact smart contract language.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥轮换是确保私有区块链安全性的标准机制。它作为一种最佳实践，通过定期更改加密密钥来防范任何攻击，如果密钥被泄露，则会被用来防范任何攻击。Pact 智能合约语言原生支持密钥轮换。
- en: Symmetric on-chain encryption allows encryption of transaction data on the blockchain.
    These transactions can be automatically decrypted by the participants of a particular
    private transaction. Double Ratchet protocol is used to provide key management
    and encryption functions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对称链上加密允许在区块链上加密交易数据。这些交易可以由特定私有交易的参与者自动解密。双扳手协议用于提供密钥管理和加密功能。
- en: Scalable BFT consensus protocol ensures that adequate replication and consensus
    has been achieved before smart contract execution. The consensus is achieved by
    following the process described here.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展 BFT 共识协议确保在执行智能合约之前已经实现了足够的复制和共识。共识是通过以下流程实现的。
- en: 'This is how a transaction originates and flows in the network:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是交易在网络中的起源和流动方式：
- en: First, a new transaction is signed by the user and broadcasted over the blockchain
    network, which is picked up by a leader node that adds it to its immutable log.
    At this point, an incremental hash is also calculated for the log. Incremental
    hash is a type of hash function that allows computation of hash messages in the
    scenario where, if a previous original message which is already hashed is slightly
    changed, then the new hash message is computed from the already existing hash.
    This scheme is quicker and less resource intensive compared to a conventional
    hash function where an altogether new hash message is required to be generated
    even if the original message has only changed very slightly.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，用户签署并广播一个新的交易到区块链网络，然后由一个领导节点接收并将其添加到其不可变日志中。在此时，还会为日志计算一个增量哈希。增量哈希是一种哈希函数，它允许在已经哈希过的原始消息稍微更改时计算哈希消息的情况下进行计算，这种方案比传统哈希函数更快且资源消耗更少，因为即使原始消息只有轻微更改，也需要生成一个全新的哈希消息。
- en: Once the transaction is written to the log by the leader node, it signs the
    replication and incremental hash and broadcasts it to other nodes.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦交易被领导节点写入日志，它就会对复制和增量哈希进行签名，并将其广播给其他节点。
- en: Other nodes after receiving the transaction, verify the signature of the leader
    node, add the transaction into their own logs, and broadcast their own calculated
    incremental hashes (quorum proofs) to other nodes. Finally, the transaction is
    committed to the ledger permanently after an adequate number of proofs are received
    from other nodes.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他节点在接收到交易后，验证领导节点的签名，将交易添加到自己的日志中，并将自己计算得到的增量哈希（法定证明）广播给其他节点。 最后，在收到其他节点的足够数量的证明后，交易将永久提交到分类帐中。
- en: 'A simplified version of this process is shown in the following diagram, where
    the leader node is recording the new transactions and then replicating them to
    the follower nodes:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了这个过程的简化版，领导节点记录新交易然后复制到追随节点：
- en: '![](img/696b0e26-3b57-4f65-8a91-cf02e92b9197.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/696b0e26-3b57-4f65-8a91-cf02e92b9197.png)'
- en: Consensus mechanism in Kadena
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Kadena 中的共识机制
- en: 'Once the consensus is achieved, a smart contract execution can start and takes
    a number of steps, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦达成共识，智能合同执行就可以开始，并经过一系列步骤，如下：
- en: First, the signature of the message is verified.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，验证消息的签名。
- en: Pact smart contract layer takes over.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pact 智能合同层接管。
- en: Pact code is compiled.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pact 代码经过编译。
- en: The transaction is initiated and executes any business logic embedded within
    the smart contract. In case of any failures, an immediate rollback is initiated
    that reverts that state back to what it was before the execution started.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动交易并执行嵌入在智能合同中的任何业务逻辑。 如果出现任何失败，将立即启动回滚，将状态恢复为执行开始之前的状态。
- en: Finally, the transaction completes and relevant logs are updated.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，交易完成并更新相关日志。
- en: Pact has been open sourced by Kadena and is available for download at [http://kadena.io/pact/downloads.html](http://kadena.io/pact/downloads.html).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Pact 已经被 Kadena 开源，并可在[http://kadena.io/pact/downloads.html](http://kadena.io/pact/downloads.html)下载。
- en: 'This can be downloaded as a standalone binary that provides a REPL for Pact
    language. An example is shown here where Pact is run by issuing the `./pact` command
    in Linux console:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以作为独立的二进制文件下载，提供 Pact 语言的 REPL。 这里显示了一个示例，Pact 在 Linux 控制台上通过发出`./pact`命令来运行：
- en: '![](img/1022abfa-5814-479a-93fc-86c6b43fb29c.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1022abfa-5814-479a-93fc-86c6b43fb29c.png)'
- en: Pact REPL, showing sample commands and error output
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Pact REPL，显示示例命令和错误输出
- en: 'A smart contract in Pact language is usually composed of three sections: keysets,
    modules, and tables. These sections are described here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Pact 语言中的智能合同通常由三部分组成：密钥集、模块和表格。 这些部分在这里描述：
- en: '**Keysets**: This section defines relevant authorization schemes for tables
    and modules.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密钥集：** 这个部分定义了表格和模块的相关授权方案。'
- en: '**Modules**: This section defines the smart contract code encompassing the
    business logic in the form of functions and pacts. Pacts within modules are composed
    of multiple steps and are executed sequentially.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块：** 这个部分定义了智能合同代码，以函数和契约的形式包含业务逻辑。 模块内的契约由多个步骤组成，并按顺序执行。'
- en: '**Tables:** This section is an access-controlled construct defined within modules.
    Only administrators defined in the admin keyset have direct access to this table.
    Code within the module is granted full access, by default to the tables.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表格：** 这个部分是在模块内定义的受访问控制的结构。只有在 admin keyset 中定义的管理员才能直接访问这个表格。 默认情况下，模块中的代码被授予对表格的完全访问权限。'
- en: 'Pact also allows several execution modes. These modes include contract definition,
    transaction execution, and querying. These execution modes are described here:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Pact 也允许多种执行模式。 这些模式包括合同定义、交易执行和查询。 这些执行模式在这里描述：
- en: '**Contract definition:** This mode allows a contract to be created on the blockchain
    via a single transaction message.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合同定义：** 这种模式允许通过单个交易消息在区块链上创建合同。'
- en: '**Transaction execution:** This mode entails the execution of modules of smart
    contract code that represent business logic.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交易执行：** 这种模式涉及执行代表业务逻辑的智能合同代码的模块。'
- en: '**Querying**: This mode is concerned with simply probing the contract for data
    and is executed locally on the nodes for performance reason. Pact uses LISP-like
    syntax and represents in the code exactly what will be executed on the blockchain,
    as it is stored on the blockchain in human-readable format. This is in contrast
    to Ethereum''s EVM, which compiles into bytecode for execution, which makes it
    difficult to verify what code is in execution on the blockchain. Moreover, it
    is Turing incomplete, supports immutable variables, and does not allow null values,
    which improves the overall safety of the transaction code execution.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询**：此模式仅用于简单地探测合约数据，出于性能考虑在节点上本地执行。Pact使用类似LISP的语法，并且在代码中准确表示将在区块链上执行的内容，因为它以人类可读的格式存储在区块链上。这与以太坊的EVM相反，后者将代码编译成字节码进行执行，这使得验证正在区块链上执行的代码变得困难。此外，它是图灵不完备的，支持不可变变量，并且不允许空值，这提高了交易代码执行的整体安全性。'
- en: It is not possible to cover the complete syntax and functions of Pact in this
    limited length chapter; however, a small example is shown here, that shows the
    general structure of a smart contract written in Pact. This example shows a simple
    addition module that defines a function named `addition` that takes three parameters.
    When the code is executed it adds all three values and displays the result.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的有限长度内无法涵盖Pact的完整语法和功能；但是，这里展示了一个小例子，显示了使用Pact编写的智能合约的一般结构。此示例显示了一个简单的加法模块，定义了一个名为`addition`的函数，该函数接受三个参数。当执行代码时，它将添加所有三个值并显示结果。
- en: The following example has been developed using the online Pact compiler available
    at [http://kadena.io/try-pact/](http://kadena.io/try-pact/).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例是使用在线Pact编译器开发的，可在[http://kadena.io/try-pact/](http://kadena.io/try-pact/)上找到。
- en: '![](img/db8f3d02-8361-4fa0-a744-238322a38ac9.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图](img/db8f3d02-8361-4fa0-a744-238322a38ac9.png)'
- en: Sample Pact code
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Pact示例代码
- en: 'When the code is run, it produces the output shown as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码时，会产生如下所示的输出：
- en: '![](img/3d6d61cf-fc7a-4877-b373-196721d1388d.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图](img/3d6d61cf-fc7a-4877-b373-196721d1388d.png)'
- en: The output of the code
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的输出
- en: As shown in the preceding example, the execution output matches exactly with
    the code layout and structure, which allows for greater transparency and limits
    the possibility of malicious code execution.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的示例所示，执行输出与代码布局和结构完全匹配，这样可以实现更大的透明度，并限制了恶意代码执行的可能性。
- en: Kadena is a new class of blockchains introducing the novel concept of **pervasive
    determinism** where, in addition to standard public/private key-based data origin
    security, an additional layer of fully deterministic consensus is also provided.
    It provides cryptographic security at all layers of the blockchain including transactions
    and consensus layer.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Kadena是一种新型的区块链，引入了**普遍确定性**的新概念，在标准的基于公钥/私钥的数据来源安全性之外，还提供了另一层完全确定性的共识。它在区块链的所有层面，包括交易和共识层，提供了加密安全性。
- en: Relevant documentation and source code for Pact can be found here [https://github.com/kadena-io/pact](https://github.com/kadena-io/pact).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Pact的相关文档和源代码可以在[https://github.com/kadena-io/pact](https://github.com/kadena-io/pact)找到。
- en: Kadena has also introduced a public blockchain in January, 2018 which is another
    leap forward in building blockchains with massive throughput. The novel idea in
    this proposal is to build a PoW parallel chain architecture. This scheme works
    by combining individually mined chains on peers into a single network. The result
    is massive throughput capable of processing more than 10,000 transactions per
    second.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Kadena还于2018年1月推出了一种公共区块链，这是构建具有大规模吞吐量的区块链的又一重大进步。该提案的新颖之处在于建立了一种PoW并行链架构。该方案通过将节点上的单独开采的链组合成单一网络来工作。结果是具有超过10,000笔交易处理能力的大规模吞吐量。
- en: The original research paper is available at [http://kadena.io/docs/chainweb-v15.pdf](http://kadena.io/docs/chainweb-v15.pdf).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 原始研究论文可在[http://kadena.io/docs/chainweb-v15.pdf](http://kadena.io/docs/chainweb-v15.pdf)找到。
- en: Ripple
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ripple
- en: Introduced in 2012, Ripple is a currency exchange and real-time gross settlement
    system. In Ripple, the payments are settled without any waiting as opposed to
    traditional settlement networks, where it can take days for settlement.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 2012年推出的Ripple是一种货币交换和实时毛额结算系统。在Ripple中，支付结算无需等待，与传统结算网络相比，传统结算网络可能需要数天时间才能完成结算。
- en: It has a native currency called **Ripples** (**XRP**). It also supports non-XRP
    payments. This system is considered similar to an old traditional money transfer
    mechanism known as *Hawala*. This system works by making use of agents who take
    the money and a password from the sender, then contact the payee's agent and instruct
    them to release funds to the person who can provide the password. The payee then
    contacts the local agent, tells them the password and collects the funds. An analogy
    to the agent is gateway in Ripple. This is just a very simple analogy; the actual
    protocol is rather complex but principally it is the same.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 它有一个称为**瑞波币**（**XRP**）的本地货币。它还支持非 XRP 支付。这个系统被认为类似于一个被称为*哈瓦拉*的传统老款转账机制。这个系统通过代理人接收汇款和密码，然后联系收款人的代理人，并指示他们向提供密码的人释放资金来运作。然后收款人联系当地代理人，告诉他们密码，并收取资金。代理人类比于瑞波中的网关。这只是一个非常简单的类比；实际的协议相当复杂，但原则上是相同的。
- en: 'The Ripple network is composed of various nodes that can perform different
    functions based on their type:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 瑞波网络由各种节点组成，这些节点根据其类型可以执行不同的功能：
- en: '**User nodes**: These nodes use in payment transactions and can pay or receive
    payments.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户节点**：这些节点用于支付交易，可以支付或接收支付。'
- en: '**Validator nodes**: These nodes participate in the consensus mechanism. Each
    server maintains a set of unique nodes, which it needs to query while achieving
    consensus. Nodes in the **Unique Node List** (**UNL**) are trusted by the server
    involved in the consensus mechanism and will accept votes only from this list
    of unique nodes.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证节点**：这些节点参与共识机制。每个服务器维护一组唯一节点，它在实现共识时需要查询这些节点。**唯一节点列表**（**UNL**）中的节点受到参与共识机制的服务器的信任，并且只会接受来自这个唯一节点列表的投票。'
- en: Ripple is sometimes not considered a truly decentralized network as there are
    network operators and regulators involved. However, it can be considered decentralized
    due to the fact that anyone can become part of the network by running a validator
    node. Moreover, the consensus process is also decentralized because any changes
    proposed to make on the ledger have to be decided by following a scheme of super
    majority voting. However, this is a hot topic among researchers and enthusiasts
    and there are arguments against and in favor of each school of thought. There
    are some discussions online that readers can refer to for further exploration
    of these ideas.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于涉及网络运营商和监管机构，有时不认为瑞波是一个真正去中心化的网络。然而，它可以被认为是去中心化的，因为任何人都可以通过运行验证节点成为网络的一部分。此外，共识过程也是去中心化的，因为对账本提出的任何更改都必须遵循超级多数投票的方案来决定。然而，这是研究人员和爱好者之间的热门话题，对于每种思想流派都有支持和反对的论点。读者可以参考一些在线讨论进一步探索这些想法。
- en: 'You can find these online discussions at the following links:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接找到这些在线讨论：
- en: '[https://www.quora.com/Why-is-Ripple-centralized](https://www.quora.com/Why-is-Ripple-centralized)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.quora.com/Why-is-Ripple-centralized](https://www.quora.com/Why-is-Ripple-centralized)'
- en: '[https://thenextweb.com/hardfork/2018/02/06/ripple-report-bitmex-centralized/](https://thenextweb.com/hardfork/2018/02/06/ripple-report-bitmex-centralized/)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://thenextweb.com/hardfork/2018/02/06/ripple-report-bitmex-centralized/](https://thenextweb.com/hardfork/2018/02/06/ripple-report-bitmex-centralized/)'
- en: '[https://www.reddit.com/r/Ripple/comments/6c8j7b/is_ripple_centralized_and_other_related_questions/?st=jewkor7b&amp;sh=e39bc635](https://www.reddit.com/r/Ripple/comments/6c8j7b/is_ripple_centralized_and_other_related_questions/?st=jewkor7b&sh=e39bc635)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.reddit.com/r/Ripple/comments/6c8j7b/is_ripple_centralized_and_other_related_questions/?st=jewkor7b&amp;sh=e39bc635](https://www.reddit.com/r/Ripple/comments/6c8j7b/is_ripple_centralized_and_other_related_questions/?st=jewkor7b&sh=e39bc635)'
- en: Ripple maintains a globally distributed ledger of all transactions that are
    governed by a novel low-latency consensus algorithm called **Ripple Protocol Consensus
    Algorithm** (**RPCA**). The consensus process works by achieving an agreement
    on the state of an open ledger containing transactions by seeking verification
    and acceptance from validating servers in an iterative manner until an adequate
    number of votes are achieved. Once enough votes are received (a super majority,
    initially 50% and gradually increasing with each iteration up to at least 80%)
    the changes are validated and the ledger is closed. At this point, an alert is
    sent to the whole network indicating that the ledger is closed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Ripple维护着一个由一种名为**Ripple协议共识算法**（**RPCA**）的新型低延迟共识算法所管理的全球分布式账本，共识过程通过迭代地寻求验证服务器的验证和接受，直到获得足够数量的投票来就交易所在的开放账本的状态达成一致。一旦收到足够的投票（最初为50%，随着每次迭代逐渐增加至至少80%），变化就会被验证并且账本被关闭。在这一点上，会向整个网络发送警报，指示账本已关闭。
- en: Original research paper for RPCA is available at [https://ripple.com/files/ripple_consensus_whitepaper.pdf](https://ripple.com/files/ripple_consensus_whitepaper.pdf).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: RPCA的原始研究论文可在[https://ripple.com/files/ripple_consensus_whitepaper.pdf](https://ripple.com/files/ripple_consensus_whitepaper.pdf)中找到。
- en: 'In summary, the consensus protocol is a three-phase process:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，共识协议是一个三阶段的过程：
- en: '**Collection phase**: In this phase validating nodes gather all transactions
    broadcasted on the network by account owners and validate them. Transactions,
    once accepted, are called candidate transactions and can be accepted or rejected
    based on the validation criteria.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**收集阶段**：在此阶段，验证节点收集所有由账户所有者在网络上广播的交易并验证它们。一旦被接受，交易被称为候选交易，并根据验证标准接受或拒绝。'
- en: '**Consensus phase**: After the collection phase the consensus process starts,
    and after achieving it the ledger is **closed**.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共识阶段**：在收集阶段之后，共识过程开始，共识达成后账本被**关闭**。'
- en: '**Ledger closing phase**: This process runs asynchronously every few seconds
    in rounds and, as result, the ledger is opened and closed (updated) accordingly:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**账本关闭阶段**：该过程每隔几秒钟异步运行一次，在轮次中，账本会相应地被打开和关闭（更新）：'
- en: '![](img/a34f40d1-80d3-48fe-b720-cdc59e9dc6cd.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a34f40d1-80d3-48fe-b720-cdc59e9dc6cd.png)'
- en: Ripple consensus protocol phases
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Ripple共识协议阶段
- en: 'In a Ripple network, there are a number of components that work together in
    order to achieve consensus and form a payment network. These components are discussed
    individually here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ripple网络中，有许多组件共同工作，以实现共识并形成支付网络。这些组件在这里分别讨论：
- en: '**Server**: This component serves as a participant in the consensus protocol.
    Ripple server software is required in order to be able to participate in consensus
    protocol.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器**：该组件作为共识协议的参与者。为了能够参与共识协议，需要Ripple服务器软件。'
- en: '**Ledger**: This is the main record of balances of all accounts on the network.
    A ledger contains various elements such as ledger number, account settings, transactions,
    timestamp, and a flag that indicates the validity of the ledger.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**账本**：这是网络上所有账户余额的主要记录。账本包含各种元素，如账本编号、账户设置、交易、时间戳以及指示账本有效性的标志。'
- en: '**Last closed ledger**: A ledger is closed once consensus is achieved by validating
    nodes.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上一个关闭的账本**：一旦验证节点达成共识，账本就会关闭。'
- en: '**Open ledger**: This is a ledger that has not been validated yet and no consensus
    has been reached about its state. Each node has its own open ledger, which contains
    proposed transactions.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开放账本**：这是尚未验证且尚未就其状态达成共识的账本。每个节点都有自己的开放账本，其中包含了提议的交易。'
- en: '**Unique Node List:** This is a list of unique trusted nodes that a validating
    server uses in order to seek votes and subsequent consensus.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**唯一节点列表**：这是验证服务器使用的一组唯一的受信任节点，以便寻求投票和随后的共识。'
- en: '**Proposer**: As the name suggests, this component proposes new transactions
    to be included in the consensus process. It is usually a subset of nodes (UNL
    defined in the previous point) that can propose transactions to the validating
    server.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提议者**：顾名思义，该组件提出要包含在共识过程中的新交易。通常是一个节点的子集（在前面的点中定义的UNL），可以向验证服务器提议交易。'
- en: Transactions
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易
- en: Transactions are created by the network users in order to update the ledger.
    A transaction is expected to be digitally signed and valid in order for it to
    be considered as a candidate in the consensus process. Each transaction costs
    a small amount of XRP, which serves as a protection mechanism against denial of
    service attacks caused by spamming.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 交易由网络用户创建以更新账本。为了被视为共识过程中的候选项，交易预期是数字签名和有效的。每个交易都需要支付少量XRP，这充当了防止因垃圾邮件而导致的拒绝服务攻击的保护机制。
- en: 'There are different types of transaction in the Ripple network. A single field
    within the Ripple transaction data structure called `TransactionType` is used
    to represent the type of the transaction. Transactions are executed by using a
    four-step process:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Ripple网络中有不同类型的交易。Ripple交易数据结构中的一个字段称为`TransactionType`，用于表示交易的类型。交易通过四个步骤执行：
- en: First, transactions are prepared whereby an unsigned transaction is created
    by following the standards
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过遵循标准创建未签名的交易，准备交易
- en: The second step is signing, where the transaction is digitally signed to authorize
    it
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二步是签名，交易被数字签名以授权它
- en: After this, the actual submission to the network occurs via the connected server
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过连接的服务器实际提交到网络
- en: Finally, the verification is performed to ensure that the transaction is validated
    successfully
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，执行验证以确保交易成功验证
- en: Roughly, the transactions can be categorized into three types, namely payments
    related, order related, and account and security related. All these types are
    described in the following section.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 大致而言，交易可以分为三种类型，即与支付相关的、与订单相关的和与帐户和安全相关的。所有这些类型都在下一节中描述。
- en: Payments related
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与支付相关的
- en: 'There are several fields in this category that result in certain actions. All
    these fields are described as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此类别中有几个字段会导致某些操作。所有这些字段如下所述：
- en: '`Payment`: This transaction is most commonly used and allows one user to send
    funds to another.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Payment`: 此交易最常用，允许一个用户向另一个用户发送资金。'
- en: '`PaymentChannelClaim`: This is used to claim Ripples (XRP) from a payment channel.
    A payment channel is a mechanism that allows recurring and unidirectional payments
    between parties. This can also be used to set the expiration time of the payment
    channel.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PaymentChannelClaim`: 该操作用于从支付通道中索取瑞波币（XRP）。支付通道是一种允许各方进行重复且单向支付的机制。它还可用于设置支付通道的过期时间。'
- en: '`PaymentChannelCreate`: This transaction creates a new payment channel and
    adds XRP to it in *drops*. A single drop is equivalent to 0.000001 of an XRP.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PaymentChannelCreate`: 此交易创建一个新的支付通道，并以*滴*的形式添加XRP。一个滴相当于0.000001个XRP。'
- en: '`PaymentChannelFund`: This transaction is used to add more funds to an existing
    channel. Similar to the `PaymentChannelClaim` transaction, this can also be used
    to modify the expiration time of the payment channel.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PaymentChannelFund`: 此交易用于向现有通道添加更多资金。与`PaymentChannelClaim`交易类似，这也可用于修改支付通道的过期时间。'
- en: Order related
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与订单相关的
- en: 'This type of transaction includes following two fields:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型的交易包括以下两个字段：
- en: '`OfferCreate`: This transaction represents a limit order, which represents
    an intent for the exchange of currency. It results in creating an offer node in
    the consensus ledger if it cannot be completely fulfilled.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OfferCreate`: 该交易表示限价订单，代表了货币交换的意向。如果订单无法完全执行，则会在共识账本中创建一个报价节点。'
- en: '`OfferCancel`: This is used to remove a previously created offer node from
    the consensus ledger, indicating withdrawal of the order.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OfferCancel`: 用于从共识账本中删除先前创建的报价节点，表示撤销订单。'
- en: Account and security-related
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帐户和安全相关
- en: 'This type of transaction includes the fields listed as follows. Each field
    is responsible for performing a certain function:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型的交易包括以下列出的字段。每个字段负责执行特定的功能：
- en: '`AccountSet`: This transaction is used to modify the attributes of an account
    in the Ripple consensus ledger.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AccountSet`: 此交易用于修改Ripple共识账本中帐户的属性。'
- en: '`SetRegularKey`: This is used to change or set the transaction signing key
    for an account. An account is identified using a base-58 Ripple address derived
    from the account''s master public key.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SetRegularKey`: 用于更改或设置帐户的交易签名密钥。帐户是使用从帐户的主公钥派生的Base-58 Ripple地址来识别的。'
- en: '`SignerListSet`: This can be used to create a set of signers for use in multisignature
    transactions.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SignerListSet`: 可用于创建用于多重签名交易的签名者集合。'
- en: '`TrustSet`: This is used to create or modify a trust line between accounts.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TrustSet`: 这用于创建或修改账户之间的信任线。'
- en: 'A transaction in Ripple is composed of various fields that are common to all
    transaction types. These fields are listed as follows with a description:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Ripple中的交易由各种对所有交易类型通用的字段组成。这些字段如下所示，并附有描述：
- en: '`Account`: This is the address of the initiator of the transaction.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Account`: 这是交易发起者的地址。'
- en: '`AccountTxnID`: This is an optional field which contains the hash of another
    transaction. It is used to chain the transaction together.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AccountTxnID`: 这是一个可选字段，包含另一个交易的哈希值。它用于将交易链接在一起。'
- en: '`Fee`: This is the amount of XRP.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fee`: 这是XRP的金额。'
- en: '`Flags`: This is an optional field specifying the flags for the transaction.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Flags`: 这是一个可选字段，用于指定交易的标志。'
- en: '`LastLedgerSequence`: This is the highest sequence number of the ledger in
    which the transaction can appear.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LastLedgerSequence`: 这是交易可以出现的账本中的最高序列号。'
- en: '`Memos`: This represents optional arbitrary information.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Memos`: 这代表可选的任意信息。'
- en: '`SigningPubKey`: This represents the public key.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SigningPubKey`: 这代表公钥。'
- en: '`Signers`: This represent signers in a multisig transaction.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Signers`: 这代表多重签名交易中的签名者。'
- en: '`SourceTag`: This represents either sender or reason of the transaction.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SourceTag`: 这代表交易的发送方或原因。'
- en: '`SourceTag`: This represents either sender or reason of the transaction.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SourceTag`: 这代表交易的发送方或原因。'
- en: '`TxnSignature`: This is the verification digital signature for the transaction.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TxnSignature`: 这是交易的验证数字签名。'
- en: Interledger
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Interledger
- en: 'Interledger is a simple protocol that is composed of four layers: Application,
    Transport, Interledger, and Ledger. Each layer is responsible for performing various
    functions under certain protocols. These functions and protocols are described
    in the following section.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Interledger是一个由四层组成的简单协议：应用层、传输层、Interledger层和账本层。每一层负责在某些协议下执行各种功能。这些功能和协议在以下部分描述。
- en: 'The specifications of this protocol are available at: [https://interledger.org/rfcs/0003-interledger-protocol/draft-9.html](https://interledger.org/rfcs/0003-interledger-protocol/draft-9.html)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此协议的规范可在以下链接找到：[https://interledger.org/rfcs/0003-interledger-protocol/draft-9.html](https://interledger.org/rfcs/0003-interledger-protocol/draft-9.html)
- en: Application layer
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用层
- en: Protocols running on this layer govern the key attributes of a payment transaction.
    Examples of application layer protocols include **Simple Payment Setup Protocol**
    (**SPSP**) and **Open Web Payment Scheme** (**OWPS**). SPSP is an Interledger
    protocol that allows secure payment across different ledgers by creating connectors
    between them. OWPS is another scheme that allows consumer payments across different
    networks.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 运行在这一层上的协议管理支付交易的关键属性。应用层协议的示例包括**简单支付设置协议**（**SPSP**）和**开放网络支付方案**（**OWPS**）。SPSP是一种Interledger协议，通过在它们之间创建连接器，允许在不同账本之间进行安全支付。OWPS是另一种方案，允许在不同网络之间进行消费者支付。
- en: Once the protocols on this layer have run successfully, protocols from the transport
    layer will be invoked in order to start the payment process.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这一层上的协议成功运行，将按顺序调用传输层的协议以启动支付流程。
- en: Transport layer
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传输层
- en: This layer is responsible for managing payment transactions. Protocols such
    as **Optimistic Transport Protocol** (**OTP**), **Universal Transport Protocol**
    (**UTP**) and **Atomic Transport Protocol** (**ATP**) are available currently
    for this layer. OTP is the simplest protocol, which manages payment transfers
    without any escrow protection, whereas UTP provides escrow protection. ATP is
    the most advanced protocol, which not only provides an escrowed transfer mechanism
    but in addition, makes use of trusted notaries to further secure the payment transactions.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这一层负责管理支付交易。目前可用的协议有**乐观传输协议**（**OTP**）、**通用传输协议**（**UTP**）和**原子传输协议**（**ATP**）。OTP是最简单的协议，它在没有任何托管保护的情况下管理支付转账，而UTP则提供托管保护。ATP是最先进的协议，它不仅提供托管传输机制，还利用可信的公证人进一步确保了支付交易的安全性。
- en: Interledger layer
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Interledger层
- en: This layer provides interoperability and routing services. This layer contains
    protocols such as **Interledger Protocol** (**ILP**), **Interledger Quoting Protocol**
    (**ILQP**), and **Interledger Control Protocol** (**ILCP**). ILP packet provides
    the final target (destination) of the transaction in a transfer. ILQP is used
    in making quote requests by the senders before the actual transfer. ILCP is used
    to exchange data related to routing information and payment errors between connectors
    on the payment network.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 该层提供互操作性和路由服务。该层包含诸如**Interledger协议**（**ILP**）、**Interledger报价协议**（**ILQP**）和**Interledger控制协议**（**ILCP**）等协议。ILP数据包提供了传输中的最终目标（目的地）。ILQP用于在实际转账之前由发送方发起的报价请求。ILCP用于在支付网络上的连接器之间交换与路由信息和支付错误相关的数据。
- en: Ledger layer
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分类帐层
- en: This layer contains protocols that enable communication and execution of payment
    transactions between connectors. **Connectors** are basically objects that implement
    the protocol for forwarding payments between different ledgers. It can support
    various protocols such as simple ledger protocol, various blockchain protocols,
    legacy protocols, and different proprietary protocols.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 该层包含了使连接器之间进行通信和支付交易执行的协议。**连接器**基本上是实现在不同分类帐之间转发支付的协议的对象。它可以支持各种协议，如简单分类帐协议、各种区块链协议、传统协议和不同的专有协议。
- en: Ripple connect consists of various Plug and Play modules that allow connectivity
    between ledgers by using the ILP. It enables the exchange of required data between
    parties before the transaction, visibility, fee management, delivery confirmation,
    and secure communication using transport layer security. A third-party application
    can connect to the Ripple network via various connectors that forward payments
    between different ledgers.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Ripple连接由各种即插即用的模块组成，通过使用ILP实现分类帐之间的连接。它使各方在交易之前交换所需数据成为可能，包括可见性、费用管理、交付确认和使用传输层安全性进行安全通信。第三方应用程序可以通过各种连接器连接到Ripple网络，这些连接器在不同分类帐之间转发支付。
- en: All layers described in the preceding sections make up the architecture of Interledger
    Protocol. Overall, Ripple is a solution that is targeted for the financial industry
    and makes real-time payments possible without any settlement risk. As this is
    a very feature-rich platform, covering all aspects of it are not possible in this
    chapter.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述章节中描述的所有层构成了Interledger协议的架构。总的来说，Ripple是一个针对金融行业的解决方案，使实时支付成为可能，而无需任何结算风险。由于这是一个非常功能丰富的平台，在本章节中无法覆盖所有方面。
- en: Ripple documentation for the platform are available at [https://ripple.com/](https://ripple.com/).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Ripple平台的文档可在[https://ripple.com/](https://ripple.com/)找到。
- en: Stellar
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 星际
- en: Stellar is a payment network based on blockchain technology and a novel consensus
    model called **Federated Byzantine Agreement** (**FBA**). FBA works by creating
    quorums of trusted parties. **Stellar Consensus Protocol** (**SCP**) is an implementation
    of FBA.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Stellar是基于区块链技术的支付网络，采用了一种新颖的共识模型称为**联邦拜占庭协议**（**FBA**）。FBA通过创建信任方的法定人数来工作。**Stellar共识协议**（**SCP**）是FBA的一种实现。
- en: Key issues identified in the Stellar whitepaper are the cost and complexity
    of current financial infrastructure. This limitation warrants the need for a global
    financial network that addresses these issues without compromising the integrity
    and security of the financial transaction. This requirement has resulted in the
    invention of SCP which is a provably safe consensus mechanism.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Stellar白皮书中指出的关键问题是当前金融基础设施的成本和复杂性。这种限制需要一个全球金融网络，解决这些问题而不损害金融交易的完整性和安全性。这一要求导致了SCP的发明，这是一种可证明安全的共识机制。
- en: Original research paper for SCP is available at [https://www.stellar.org/papers/stellar-consensus-protocol.pdf](https://www.stellar.org/papers/stellar-consensus-protocol.pdf).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: SCP的原始研究论文可在[https://www.stellar.org/papers/stellar-consensus-protocol.pdf](https://www.stellar.org/papers/stellar-consensus-protocol.pdf)找到。
- en: 'It has four main properties, which are described here:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下四个主要属性：
- en: '**Decentralized control**: This allows participation by anyone without any
    central party'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**去中心化控制**：这允许任何人参与，没有中央方'
- en: '**Low latency**: This addresses the much-desired requirement of fast transaction
    processing'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低延迟**：这解决了快速交易处理的迫切要求'
- en: '**Flexible trust**: This allows users to choose which parties they trust for
    a specific purpose'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活信任**：这使用户可以选择他们信任的特定目的方'
- en: '**Asymptotic security**: This makes use of digital signatures and hash functions
    for providing the required level of security on the network'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渐进式安全性**：这利用数字签名和哈希函数来为网络提供所需的安全级别。'
- en: The Stellar network allows transfer and representation of the value of an asset
    by its native digital currency, called **Lumens,** abbreviated as **XLM**. Lumens
    are consumed when a transaction is broadcasted on the network, which also serves
    as a deterrent against denial of service attacks.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Stellar 网络允许通过其原生数字货币来传输和表示资产的价值，称为**Lumens**，缩写为**XLM**。当交易在网络上广播时，Lumens 会被消耗，这也作为阻止服务拒绝攻击的一种威慑手段。
- en: At its core, the Stellar network maintains a distributed ledger that records
    every transaction and is replicated on each Stellar server (node). The consensus
    is achieved by verifying transactions between servers and updating the ledger
    with updates. The Stellar ledger can also act as a distributed exchange order
    book by allowing users to store their offers to buy or sell currencies.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，Stellar 网络维护着一个分布式分类账，记录着每一笔交易，并在每个 Stellar 服务器（节点）上复制。共识是通过验证服务器之间的交易并使用更新更新分类账来实现的。Stellar
    分类账也可以充当分布式交易所订单簿，允许用户存储他们的购买或出售货币的报价。
- en: There are various tools, SDKs, and software that make up the Stellar network.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种工具、SDK 和软件构成了 Stellar 网络。
- en: The core software is available at [https://github.com/stellar/stellar-core](https://github.com/stellar/stellar-core).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 核心软件可在 [https://github.com/stellar/stellar-core](https://github.com/stellar/stellar-core)
    获取。
- en: Rootstock
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rootstock
- en: Before discussing **Rootstock** (**RSK**) in detail, it's important to define
    and introduce some concepts that are fundamental to the design of Rootstock. These
    concepts include sidechains, drivechains, and two-way pegging. The concept of
    the sidechain was originally developed by Blockstream.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细讨论**Rootstock**（**RSK**）之前，重要的是定义并介绍一些对 Rootstock 设计至关重要的概念。这些概念包括侧链、驱动链和双向锚定。侧链的概念最初是由
    Blockstream 开发的。
- en: Blockstream's online presence is at [https://blockstream.com](https://blockstream.com).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Blockstream 的在线存在位于 [https://blockstream.com](https://blockstream.com)。
- en: '**Two-way pegging** is a mechanism by which value (coins) can transfer between
    one blockchain to another and vice versa. There is no real transfer of coin between
    chains. The idea revolves around the concept of locking the same amount and value
    of coins in a bitcoin blockchain (main chain) and unlocking the equivalent number
    of tokens in the secondary chain.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**双向锚定**是一种机制，通过该机制价值（硬币）可以在一个区块链之间传输到另一个区块链，反之亦然。实际上没有硬币在链之间转移。这个想法围绕着在比特币区块链（主链）中锁定相同数量和价值的硬币，并在次要链中解锁等值的令牌的概念。'
- en: Bearing this definition in mind, sidechains can be defined as described in the
    following section.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这个定义，侧链可以如下部分所述定义。
- en: Sidechain
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 侧链
- en: This is a blockchain that runs in parallel with a main blockchain and allows
    transfer of value between them. This means that tokens from one blockchain can
    be used in the sidechain and vice versa. This is also called a pegged sidechain
    because it supports two-way pegged assets.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个与主区块链并行运行的区块链，允许在它们之间传输价值。这意味着一个区块链中的代币可以在侧链中使用，反之亦然。这也被称为锚定侧链，因为它支持双向锚定资产。
- en: Drivechain
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Drivechain
- en: This is a relatively new concept, where control on unlocking the locked bitcoins
    (in main chain) is given to the miners who can vote when to unlock them. This
    is in contrast to sidechains, where consensus is validated though simple payment
    verification mechanism in order to transfer the coins back to the main chain.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相对较新的概念，其中对于解锁在主链中的锁定比特币的控制被给予了矿工，他们可以投票何时解锁它们。这与侧链相反，在侧链中，共识是通过简单支付验证机制来验证的，以便将硬币转回主链。
- en: Rootstock is a smart contract platform which has a two-way peg into bitcoin
    blockchain. The core idea is to increase the scalability and performance of the
    bitcoin system and enable it to work with smart contracts. Rootstock runs a Turing
    complete deterministic virtual machine called **Rootstock Virtual Machine** (**RVM**).
    It is also compatible with the EVM and allows solidity-compiled contracts to run
    on Rootstock. Smart contracts can also run under the time-tested security of bitcoin
    blockchain. The Rootstock blockchain works by merge mining with bitcoins. This
    allows Rootstock blockchain to achieve the same security level as Bitcoin. This
    is especially true for preventing double spends and achieving settlement finality.
    It allows scalability, up to 400 transactions per second due to faster block times
    and other design considerations.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Rootstock是一个智能合约平台，它在比特币区块链中具有双向钉住。其核心思想是增加比特币系统的可扩展性和性能，并使其能够与智能合约一起使用。Rootstock运行一个名为**Rootstock虚拟机**（**RVM**）的图灵完备确定性虚拟机。它还兼容EVM，并允许以太坊智能合约在Rootstock上运行。智能合约也可以在比特币区块链的经过时间测试的安全性下运行。Rootstock区块链通过与比特币合并挖矿来工作。这使得Rootstock区块链能够实现与比特币相同的安全级别。特别是防止双重支付和实现结算终局性。由于更快的区块时间和其他设计考虑因素，它可以实现可扩展性，每秒高达400笔交易。
- en: The research paper is available at, should you want to explore it further [https://uploads.strikinglycdn.com/files/ec5278f8-218c-407a-af3c-ab71a910246d/RSK%20White%20Paper%20-%20Overview.pdf](https://uploads.strikinglycdn.com/files/ec5278f8-218c-407a-af3c-ab71a910246d/RSK%20White%20Paper%20-%20Overview.pdf).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想进一步探索，可在[https://uploads.strikinglycdn.com/files/ec5278f8-218c-407a-af3c-ab71a910246d/RSK%20White%20Paper%20-%20Overview.pdf](https://uploads.strikinglycdn.com/files/ec5278f8-218c-407a-af3c-ab71a910246d/RSK%20White%20Paper%20-%20Overview.pdf)上查阅研究论文。
- en: RSK has released the main network called Bamboo, RSK MainNet which is a beta
    currently.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: RSK已发布了名为Bamboo的主网络，RSK MainNet目前还处于测试阶段。
- en: It is available at [http://www.rsk.co/](http://www.rsk.co/).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 可在[http://www.rsk.co/](http://www.rsk.co/)上找到。
- en: Quorum
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Quorum
- en: This is a blockchain solution built by enhancing the existing Ethereum blockchain.
    There are several enhancements such as transaction privacy and a new consensus
    mechanism that has been introduced in Quorum. Quorum has introduced a new consensus
    model known as QuorumChain, which is based on a majority voting and time-based
    mechanism. Another feature called Constellation is also introduced which is a
    general-purpose mechanism for submitting information and allows encrypted communication
    between peers. Furthermore, permissions at node level is governed by smart contracts.
    It also provides a higher level of performance compared to public Ethereum blockchains.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过增强现有以太坊区块链构建的区块链解决方案。Quorum引入了几项改进，如交易隐私和新的共识机制。Quorum引入了一种名为QuorumChain的新共识模型，它基于大多数投票和基于时间的机制。另一个名为“星座”（Constellation）的功能也被引入，它是一个通用机制，用于提交信息并允许节点之间的加密通信。此外，节点级别的权限受智能合约的管理。与公共以太坊区块链相比，它还提供了更高层次的性能。
- en: Several components make up the Quorum blockchain ecosystem. These are listed
    in the following subsections.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 几个组件构成了Quorum区块链生态系统。这些列在以下小节中。
- en: Transaction manager
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易管理器
- en: This component enables access to encrypted transaction data. It also manages
    local storage on nodes and communication with other transaction managers on the
    network.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件可访问加密的交易数据。它还管理节点上的本地存储，并与网络上的其他交易管理器进行通信。
- en: Crypto Enclave
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密飞地
- en: As the name suggests, this component is responsible for providing cryptographic
    services to ensure transaction privacy. It is also responsible for performing
    key management functions.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，该组件负责提供加密服务以确保交易隐私。它还负责执行密钥管理功能。
- en: QuorumChain
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QuorumChain
- en: This is the key innovation in Quorum. It is a BFT consensus mechanism which
    allows verification and circulation of votes via transactions on the blockchain
    network. In this scheme, a smart contract is used to manage the consensus process
    and nodes can be given voting rights to vote on which new block should be accepted.
    Once an appropriate number of votes is received by the voters, the block is considered
    valid. Nodes can have two roles, namely Voter or Maker. The **Voter** node is
    allowed to vote, whereas the **Maker** node is the one that creates a new block.
    By design, a node can have either right, none, or only one.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Quorum 的关键创新。这是一种 BFT 共识机制，允许通过区块链网络上的交易验证和流通投票。在这个方案中，使用智能合约来管理共识过程，并且节点可以被赋予投票权来投票哪个新区块应该被接受。一旦投票者收到了足够数量的选票，该区块被视为有效。节点可以担任两种角色，即投票者或制造者。**投票者**节点有权投票，而**制造者**节点是创建新区块的节点。按设计，一个节点可以具有权利、无权利或只有一种。
- en: Network manager
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络管理器
- en: This component provides an access control layer for the permissioned network.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件为权限网络提供了访问控制层。
- en: A node in the quorum network can take several roles, for example, a Maker node
    that is allowed to create new blocks. Transaction privacy is provided using cryptography
    and the concept that certain transactions are meant to be viewable only by their
    relevant participants. This idea is similar to Corda's idea of private transactions
    that was discussed in [Chapter 13](b4884f75-b110-4bb3-b30e-950551706409.xhtml),
    *Hyperledger*. As it allows both public and private transactions on the blockchain,
    the state database has been divided into two databases representing private and
    public transactions. As such, there are two separate Patricia-Merkle trees that
    represent the private and public state of the network. A private contract state
    hash is used to provide consensus evidence in private transactions between transacting
    parties.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 网络中的节点可以担任多种角色，例如，允许创建新区块的制造者节点。使用密码学和某些交易仅供相关参与者查看的概念提供交易隐私。这个想法类似于
    Corda 在 [第 13 章](b4884f75-b110-4bb3-b30e-950551706409.xhtml)中讨论过的私有交易的概念，*Hyperledger*。由于它允许在区块链上进行公共和私有交易，因此状态数据库已分为代表私有和公共交易的两个数据库。因此，有两个单独的
    Patricia-Merkle 树来表示网络的私有状态和公共状态。私有合同状态哈希用于在交易参与方之间的私有交易中提供共识证据。
- en: Transaction in a Quorum network consists of various elements such as the recipient,
    the digital signature of the sender, which is used to identify the transaction
    originator, optional Ether amount, the optional list of participants that are
    allowed to see the transaction, and a field that contains a hash in case of private
    transactions.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 网络中的交易包括多种元素，如收件人、发送者的数字签名（用于识别交易发起者）、可选的以太数量、允许查看交易的参与者的可选列表，以及在私有交易情况下包含哈希的字段。
- en: 'A transaction goes through several steps before it can reach its destination.
    These steps are described as follows in detail:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 交易在达到目的地之前要经过几个步骤。这些步骤如下所述：
- en: User applications (DApps) send the transaction to the Quorum node via an API
    exposed by the blockchain network. This also contains the recipient address and
    transaction data.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户应用程序（DApps）通过区块链网络提供的 API 将交易发送到 Quorum 节点。这还包括接收地址和交易数据。
- en: The API then encrypts the payload and applies any other necessary cryptographic
    algorithm in order to ensure the privacy of the transaction and is sent to the
    transaction manager. The hash of the encrypted payload is also calculated at this
    step.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，API 加密有效负载并应用任何其他必要的加密算法，以确保交易的隐私，并发送给交易管理器。此步骤还计算了加密有效负载的哈希值。
- en: After receiving the transaction, the transaction manager validates the signature
    of the transaction sender and stores the message.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接收到交易后，交易管理器验证交易发送者的签名并存储消息。
- en: The hash of the previously encrypted payload is sent to the Quorum node.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 先前加密的有效负载的哈希被发送到 Quorum 节点。
- en: Once the Quorum node starts to validate a block that contains the private transaction,
    it requests more relevant data from the transaction manager.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Quorum 节点开始验证包含私有交易的区块，它会从交易管理器请求更多相关数据。
- en: Once this request is received by the transaction manager, it sends the encrypted
    payload and relevant symmetric keys to the requestor Quorum node.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦交易管理器收到此请求，它将加密的有效负载和相关的对称密钥发送给请求者的 Quorum 节点。
- en: Once the Quorum node has all the data, it decrypts the payload and sends it
    to the EVM for execution. This is how Quorum achieves privacy with symmetric encryption
    on the blockchain, while it is able to use native Ethereum protocol and EVM for
    message transfer and execution respectively.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Quorum 节点拥有所有数据，它就会解密有效负载并将其发送到 EVM 进行执行。这就是 Quorum 如何在区块链上使用对称加密实现隐私，同时能够使用原生以太坊协议和
    EVM 分别进行消息传输和执行的方式。
- en: A similar concept, but quite different in a few aspects, has been proposed before
    in the form of **HydraChain**, which is based on Ethereum blockchain and allows
    the creation of permissioned distributed ledgers.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类似的概念，在几个方面有所不同，之前以**HydraChain**的形式提出过，它基于以太坊区块链，并允许创建许可的分布式账本。
- en: Quorum is available for download at [https://github.com/jpmorganchase/quorum](https://github.com/jpmorganchase/quorum).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Quorum 可以在 [https://github.com/jpmorganchase/quorum](https://github.com/jpmorganchase/quorum)
    下载。
- en: Tezos
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tezos
- en: Tezos is a generic self-amending cryptographic ledger, which means that it not
    only allows decentralized consensus on the state of the blockchain but also allows
    consensus on how the protocol and nodes are evolved over time. Tezos has been
    developed to address limitations in the Bitcoin protocol such as issues arising
    from hard forks, cost, and mining power centralization due to PoW, limited scripting
    ability, and security issues. It has been developed in a purely functional language
    called OCaml.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Tezos 是一个通用的自修改的加密账本，这意味着它不仅允许就区块链状态达成分散共识，还允许就协议和节点随时间演变达成共识。Tezos 已经开发出来解决比特币协议的局限性，比如由于
    PoW 导致的硬分叉问题、成本问题和挖矿算力集中问题、脚本能力有限和安全问题。它是用一种纯函数语言 OCaml 开发的。
- en: The original research paper is available at [https://www.tezos.com/static/papers/white_paper.pdf](https://www.tezos.com/static/papers/white_paper.pdf).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 原始研究论文可在 [https://www.tezos.com/static/papers/white_paper.pdf](https://www.tezos.com/static/papers/white_paper.pdf)
    获取。
- en: 'The architecture of Tezos distributed ledger is divided into three layers:
    the network layer, consensus layer, and transaction layer. This decomposition
    allows the protocol to be evolved in a decentralized fashion. For this purpose,
    a generic network shell is implemented in Tezos that is responsible for maintaining
    the blockchain, which is represented by a combination of consensus and transaction
    layer. This shell provides an interface layer between the network and the protocol.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Tezos 分布式账本的架构分为三层：网络层、共识层和交易层。这种分解允许协议以去中心化的方式演变。为此，在 Tezos 中实现了一个通用网络外壳，负责维护区块链，该区块链由共识层和交易层的组合表示。该外壳提供了网络和协议之间的接口层。
- en: A concept of seed protocol has also been introduced, which is used as a mechanism
    to allow stakeholders on the network to approve any changes to the protocol.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 也引入了种子协议的概念，用作允许网络上的利益相关者批准协议的任何更改的机制。
- en: Tezos blockchain starts from a seed protocol compared to a traditional blockchain
    that starts from a genesis block.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Tezos 区块链从一个种子协议开始，而传统区块链是从创世区块开始的。
- en: This seed protocol is responsible for defining procedures for amendments in
    the blockchain and even the amendment protocol itself. The reward mechanism in
    Tezos is based on a PoS algorithm, therefore there is no mining requirement.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这个种子协议负责定义区块链中的修正程序，甚至修正协议本身。Tezos 的奖励机制基于 PoS 算法，因此没有挖矿需求。
- en: Contract script language has been developed in Tezos for writing smart contracts,
    which is a stack-based Turing complete language. Smart contracts in Tezos are
    formally verifiable, which allows the code to be mathematically proven for its
    correctness.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Tezos 开发了一个合约脚本语言用于编写智能合约，这是一种基于堆栈的图灵完备语言。Tezos 中的智能合约是经过形式验证的，这允许对代码进行数学上的正确性验证。
- en: Tezos has recently completed crowdfunding via ICO of 232 million USD. Their
    public network is due to be released in Q1 2018.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Tezos 最近通过 ICO 完成了 2.32 亿美元的众筹。他们的公共网络预计将于 2018 年第一季度发布。
- en: Tezos code is available at [https://github.com/tezos/tezos](https://github.com/tezos/tezos).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Tezos 代码可以在 [https://github.com/tezos/tezos](https://github.com/tezos/tezos)
    获取。
- en: Storj
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Storj
- en: Existing models for cloud-based storage are all centralized solutions, which
    may or may not be as secure as users expect them to be. There is a need to have
    a cloud storage system that is secure, highly available, and above all decentralized.
    Storj aims to provide blockchain based, decentralized, and distributed storage.
    It is a cloud shared by the community instead of a central organization. It allows
    execution of storage contracts between nodes that act as autonomous agents. These
    agents (nodes) execute various functions such as data transfer, validation, and
    perform data integrity checks.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 云存储的现有模型都是集中式解决方案，可能或可能不像用户期望的那样安全。需要一个安全、高度可用且最重要的是分散化的云存储系统。Storj旨在提供基于区块链的、分散化的和分布式存储。它是由社区共享的云，而不是一个中央组织。它允许在充当自治代理的节点之间执行存储合同。这些代理（节点）执行各种功能，如数据传输、验证和执行数据完整性检查。
- en: The core concept is based on **Distributed Hash Tables** (**DHTs**) called **Kademlia**,
    however this protocol has been enhanced by adding new message types and functionalities
    in Storj. It also implements a peer to peer **publish/subscribe** (**pub/sub**)
    mechanism known as **Quasar**, which ensures that messages successfully reach
    the nodes that are interested in storage contracts. This is achieved via a bloom
    filter-based storage contract parameters selection mechanism called **topics**.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 核心概念基于称为**分布式哈希表**（**DHTs**）的**Kademlia**，但是在 Storj 中通过添加新的消息类型和功能来增强此协议。它还实现了点对点的**发布/订阅**（**pub/sub**）机制，称为**Quasar**，该机制确保消息成功到达对存储合同感兴趣的节点。这是通过称为**topics**的基于布隆过滤器的存储合同参数选择机制来实现的。
- en: Storj stores files in an encrypted format spread across the network. Before
    the file is stored on the network, it is encrypted using AES-256-CTR symmetric
    encryption and is then stored piece by piece in a distributed manner on the network.
    This process of dissecting the file into pieces is called **sharding** and results
    in increased availability, security, performance, and privacy of the network.
    Also, if a node fails the shard is still available because by default a single
    shard is stored at three different locations on the network.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Storj 在网络中以加密格式存储文件。在文件存储在网络上之前，它会使用 AES-256-CTR 对称加密进行加密，然后以分布式方式逐片存储在网络上。将文件分解为片段的过程称为**sharding**，这会增加网络的可用性、安全性、性能和隐私。此外，如果节点失败，则该片段仍然可用，因为默认情况下，在网络上的三个不同位置存储单个片段。
- en: It maintains a blockchain, which serves as a shared ledger and implements standard
    security features such as public/private key cryptography and hash functions similar
    to any other blockchain. As the system is based on hard drive sharing between
    peers, anyone can contribute by sharing their extra space on the drive and get
    paid with Storj's own cryptocurrency called **Storjcoin X** (**SJCX**). SJCX was
    developed as a *Counterparty* asset and makes use of Counterparty (Bitcoin blockchain
    based) for transactions. This has been migrated to Ethereum now.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 它维护了一个区块链，作为一个共享账本，并实现了标准的安全功能，如公钥/私钥加密和哈希函数，类似于任何其他区块链。由于该系统基于节点之间的硬盘共享，任何人都可以通过共享其额外的硬盘空间并使用
    Storj 的加密货币**Storjcoin X**（**SJCX**）获得报酬。SJCX 被开发为 *Counterparty* 资产，并使用 Counterparty（基于比特币区块链）进行交易。这已经迁移到了以太坊。
- en: A detailed discussion is available at [https://blog.storj.io/post/158740607128/migration-from-counterparty-to-ethereum](https://blog.storj.io/post/158740607128/migration-from-counterparty-to-ethereum).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 [https://blog.storj.io/post/158740607128/migration-from-counterparty-to-ethereum](https://blog.storj.io/post/158740607128/migration-from-counterparty-to-ethereum)
    中找到详细的讨论。
- en: Storj code is available at [https://github.com/Storj/](https://github.com/Storj/).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Storj 代码可在 [https://github.com/Storj/](https://github.com/Storj/) 获取。
- en: MaidSafe
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MaidSafe
- en: This is another distributed storage system similar to Storj. Users are paid
    in Safecoin for their storage space contribution to the network. This mechanism
    of payment is governed by *proof of resource*, which ensures that the disk space
    committed by a user to the network is available, if not then the payment of Safecoin
    will drop accordingly. The files are encrypted and divided into small portions
    before being transmitted on to the network for storage.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个类似于 Storj 的分布式存储系统。用户通过为网络贡献存储空间而获得 Safecoin 报酬。支付机制受到 *资源证明* 的管理，该机制确保用户提交给网络的磁盘空间可用，如果不可用，则相应的
    Safecoin 支付将下降。文件在传输到网络进行存储之前会被加密和分割成小部分。
- en: Another concept of **opportunistic caching** has been introduced with MaidSafe,
    which is a mechanism to create copies of frequently accessed data physically closer
    to where the access requests are coming from, which results in high performance
    of the network. Another novel feature of the SAFE network is that it automatically
    removes any duplicate data on the network, thus resulting in reduced storage requirements.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 与MaidSafe一起引入了**机会性缓存**的概念，这是一种创建经常访问数据的副本物理上更接近访问请求来源的机制，这导致了网络的高性能。SAFE网络的另一个新颖特性是，它会自动删除网络上的任何重复数据，从而减少存储需求。
- en: Moreover, the concept of **churning** has also been introduced, which basically
    means that data is constantly moved across the network so that the data cannot
    be targeted by malicious adversaries. It also keeps multiple copies of data across
    the network to provide redundancy in case a node goes offline or fails.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，还引入了**翻本**的概念，基本上意味着数据不断在网络中移动，以便恶意对手无法针对数据。它还在网络中保留了数据的多个副本，以提供冗余备份，以防节点离线或失败。
- en: BigchainDB
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BigchainDB
- en: This is a scalable blockchain database. It is not strictly a blockchain itself
    but complements blockchain technology by providing a decentralized database. At
    its core it's a distributed database but with the added attributes of a blockchain
    such as decentralization, immutability, and handling of digital assets. It also
    allows usage of NoSQL for querying the database.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可扩展的区块链数据库。它本身并不严格算是一个区块链，而是通过提供一个分散式数据库来补充区块链技术。从本质上说，它是一个分布式数据库，但具有区块链的附加属性，例如分散化、不可变性和处理数字资产。它还允许使用NoSQL来查询数据库。
- en: It is intended to provide a database in a decentralized ecosystem where not
    only processing is decentralized (blockchain) or the filesystem is decentralized
    (for example, IPFS) but the database is also decentralized. This makes the whole
    application ecosystem decentralized.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 它旨在在分散式生态系统中提供数据库，其中不仅处理是分散的（区块链）或文件系统是分散的（例如IPFS），而且数据库也是分散的。这使整个应用生态系统变得分散。
- en: This is available at [https://www.bigchaindb.com/](https://www.bigchaindb.com/).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在[https://www.bigchaindb.com/](https://www.bigchaindb.com/)找到。
- en: MultiChain
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MultiChain
- en: MultiChain has been developed as a platform for the development and deployment
    of private blockchains. It is based on bitcoin code and addresses security, scalability,
    and privacy issues. It is a highly configurable blockchain platform that allows
    users to set different blockchain parameters. It supports control and privacy
    via a granular permissioning layer. Installation of MultiChain is very quick.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: MultiChain已经作为私有区块链的开发和部署平台而开发。它基于比特币代码，解决了安全性、可扩展性和隐私问题。它是一个高度可配置的区块链平台，允许用户设置不同的区块链参数。它支持通过细粒度许可层进行控制和隐私保护。MultiChain的安装非常快捷。
- en: Link to installation files are available at [http://www.multichain.com/download-install/](http://www.multichain.com/download-install/).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 安装文件的链接可在[http://www.multichain.com/download-install/](http://www.multichain.com/download-install/)找到。
- en: Tendermint
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tendermint
- en: Tendermint is a software that provides a BFT consensus mechanism and state machine
    replication functionality to an application. Its main motivation is to develop
    a general purpose, secure, and high-performance replicated state machine.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Tendermint是一个为应用程序提供BFT共识机制和状态机复制功能的软件。它的主要动机是开发一个通用、安全和高性能的复制状态机。
- en: There are two components in Tendermint, which are described in the following
    section.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Tendermint有两个组件，在下一节描述。
- en: Tendermint Core
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tendermint Core
- en: This is a consensus engine that enables secure replication of transactions on
    each node in the network.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个共识引擎，可以在网络中的每个节点上安全地复制交易。
- en: Tendermint Socket Protocol (TMSP)
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tendermint Socket Protocol (TMSP)
- en: This is an application interface protocol that allows interfacing with any programming
    language to process transactions.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个应用程序接口协议，允许与任何编程语言进行接口，以处理交易。
- en: Tendermint allows decoupling of the application process and consensus process,
    which allows any application to benefit from the consensus mechanism.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Tendermint允许应用程序过程和共识过程解耦，这使得任何应用都可以从共识机制中受益。
- en: The Tendermint consensus algorithm is a round-based mechanism where validator
    nodes propose new blocks in each round. A locking mechanism is used to ensure
    protection against a scenario where two different blocks are selected for committing
    at the same height of the blockchain. Each validator node maintains a full local
    replicated ledger of blocks that contain transactions. Each block contains a header,
    which consists of the previous block hash, timestamp of the proposal of block,
    the current block height, and the Merkle root hash of all transactions present
    in the block.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Tendermint共识算法是一种基于轮次的机制，其中验证节点在每个轮次提出新的区块。使用锁定机制来确保防止在同一高度的区块链上选择了两个不同的区块用于提交的情况。每个验证节点维护一个包含交易的完整本地复制的区块账本。每个区块包含一个标头，其中包括前一个区块哈希、区块提议的时间戳、当前区块高度和区块中所有交易的Merkle根哈希。
- en: Tendermint has recently been used in **Cosmos** ([https://cosmos.network](https://cosmos.network))
    which is a network of blockchains that allows interoperability between different
    chains running on BFT consensus algorithm. Blockchains on this network are called
    zones. The first zone in Cosmos is called Cosmos hub, which is, in fact, a public
    blockchain and is responsible for providing connectivity service to other blockchains.
    For this purpose, the hub makes use of **Inter Blockchain Communication** (**IBC**)
    protocol. IBC protocol supports two types of transactions called `IBCBlockCimmitTx`
    and `IBCPacketTx`. The first type is used to provide proof of the most recent
    block hash in a blockchain to any party, whereas the latter type is used to provide
    data origin authentication. A packet from one blockchain to another is published
    by first posting a proof to the target chain. The receiving (target) chain checks
    this proof in order to verify that the sending chain has indeed published the
    packet. In addition, it has its own native currency called Atom. This scheme addresses
    scalability and interoperability issues by allowing multiple blockchains to connect
    to the hub.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，Tendermint已经被用于**Cosmos**（[https://cosmos.network](https://cosmos.network)），这是一个区块链网络，允许不同链之间在BFT共识算法上运行的互操作性。这个网络上的区块链被称为区域。Cosmos中的第一个区域称为Cosmos
    Hub，实际上是一个公共区块链，负责为其他区块链提供连接服务。为此，Hub使用了**跨区块链通信**（**IBC**）协议。IBC协议支持两种类型的交易，称为`IBCBlockCimmitTx`和`IBCPacketTx`。第一种类型用于向任何一方提供区块链中最新块哈希的证明，而后一种类型用于提供数据原始认证。从一个区块链到另一个区块链的数据包首先通过向目标链发布证明来发布。接收（目标）链检查此证明以验证发送链是否确实发布了数据包。此外，它有自己的本地货币叫做Atom。这个方案通过允许多个区块链连接到Hub来解决可扩展性和互操作性问题。
- en: Tendermint is available at [https://tendermint.com/](https://tendermint.com/).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Tendermint可以在[https://tendermint.com/](https://tendermint.com/)找到。
- en: Platforms and frameworks
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台和框架
- en: This section covers various platforms that have been developed to enhance the
    experience of existing blockchain solutions.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涵盖了各种已开发的平台，旨在增强现有区块链解决方案的体验。
- en: Eris
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eris
- en: Eris is not a single blockchain, it is an open modular platform developed by
    Monax for development of blockchain-based ecosystem applications. It offers various
    frameworks, SDKs, and tools that allow accelerated development and deployment
    of blockchain applications.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Eris不是单一的区块链，它是由Monax开发的用于开发基于区块链的生态系统应用程序的开放模块化平台。它提供了各种框架、SDK和工具，可以加速区块链应用程序的开发和部署。
- en: The core idea behind the Eris application platform is to enable development
    and management of ecosystem applications with a blockchain backend. It allows
    integration with multiple blockchains and enables various third-party systems
    to interact with various other systems.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: Eris应用平台背后的核心思想是通过区块链后端实现生态系统应用程序的开发和管理。它允许与多个区块链集成，并使各种第三方系统能够与其他各种系统交互。
- en: This platform makes use of smart contracts written in Solidity language. It
    can interact with blockchains such as Ethereum or Bitcoin. The interaction can
    include connectivity commands, start, stop, disconnection, and creation of new
    blockchains. Complexity related to setup and interaction with blockchains have
    been abstracted away in Eris. All commands are standardized for different blockchains,
    and the same commands can be used across the platform regardless of the blockchain
    type being targeted.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 'An ecosystem application can consist the Eris platform, enabling the API gateway
    to allow legacy applications to connect to key management systems, consensus engines,
    and application engines. The Eris platform provides various toolkits that are
    used to provide various services to the developers. These modules are described
    as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '**Chains**: This allows the creation of and interaction with blockchains.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Packages**: This allows the development of smart contracts.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keys**: This is used for key management and signing operations.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Files**: This allows working with distributed data management systems. It
    can be used to interact with filesystems such as IPFS and data lakes.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Services**: This exposes a set of services that allows the management and
    integration of ecosystem applications.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several SDKs has also been developed by Eris that allow the development and
    management of ecosystem applications. These SDKs contain smart contracts that
    have been fully tested and address specific needs and requirements of business.
    For example, a finance SDK, insurance SDK, and logistics SDK. There is also a
    base SDK that serves as a basic development kit to manage the life cycle of an
    ecosystem application.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 'Monax has developed its own permissioned blockchain client called `eris:db`.
    It is a PoS-based blockchain system that allows integration with a number of different
    blockchain networks. The `eris:db` client consists of four components:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '**Consensus**: This is based on the Tendermint consensus mechanism, discussed
    before'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual machine**: Eris uses EVM, as such it supports Solidity compiled contracts'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Permissions layer**: Being a permissioned ledger, Eris provides an access
    control mechanism that can be used to assign specific roles to different entities
    on the network'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interface**: This provides various command-line tools and RPC interfaces
    to enable interaction with the backend blockchain network'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The key difference between Ethereum blockchain and `eris:db` is that `eris:db`
    makes use of a **Practical Byzantine Fault-Tolerance** (**PBFT**) algorithm, which
    is implemented as a deposit-based Proof of Stake (DPOS system) whereas Ethereum
    uses PoW. Moreover, `eris:db` uses the ECDSA `ed22519` curve scheme whereas Ethereum
    uses the `secp256k1` algorithm. Finally, it is permissioned with an access control
    layer on top whereas Ethereum is a public blockchain.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Eris is a feature-rich application platform that offers a large selection of
    toolkits and services to develop blockchain-based applications.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Eris 是一个功能丰富的应用平台，提供了大量的工具包和服务来开发基于区块链的应用程序。
- en: It is available at [https://monax.io/](https://monax.io/).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以在[https://monax.io/](https://monax.io/)上找到。
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter started with the introduction of alternative blockchains and is
    divided into two main sections discussing blockchains and platforms. Blockchain
    technology is a very thriving area, as such changes are quite rapid in existing
    solutions and new relevant technologies or tools are being introduced almost every
    day. In this chapter, a careful selection of platforms and blockchains was introduced.
    Several solutions were considered that complement material covered in previous
    chapters, for example, Eris, which supports blockchain development. New blockchains
    such as Kadena, various new protocols such as Ripple, and concepts such as sidechains
    and drivechains were also discussed.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 本章以替代区块链的介绍开始，分为讨论区块链和平台两个主要部分。区块链技术是一个非常繁荣的领域，因此现有解决方案的变化非常迅速，几乎每天都会引入新的相关技术或工具。在本章中，介绍了精心挑选的平台和区块链。考虑了一些与前几章涵盖的材料相辅相成的解决方案，例如支持区块链开发的
    Eris。还讨论了新的区块链，如 Kadena，各种新的协议，如 Ripple，以及侧链和驱动链等概念。
- en: The material covered in this chapter is intended to provide a strong foundation
    for more in-depth research into areas that readers are interested in. As said
    before, blockchain is a very fast-moving field, and there are many other blockchain
    proposals projects such as Tau-Chain, HydraChain, Elements, CREDITS, and many
    more that have not been discussed in this chapter. Readers are encouraged to keep
    an eye on the developments in this field to keep themselves up to date with advancement
    in this rapidly growing area.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的材料旨在为读者感兴趣的领域提供更深入研究的坚实基础。正如前面所说，区块链是一个发展迅猛的领域，还有许多其他区块链提议项目，如 Tau-Chain、HydraChain、Elements、CREDITS等等，本章未涉及。鼓励读者关注该领域的发展，以及迅速增长的区块链技术的进步，以保持自己的更新。
- en: In the next chapter, we will explore that how blockchain can be used out of
    its original usage, that is, cryptocurrencies. We will cover various use cases
    and especially usage of blockchain in IoT.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨区块链如何在其原始用途之外使用，即加密货币。我们将涵盖各种用例，特别是区块链在物联网中的使用。
