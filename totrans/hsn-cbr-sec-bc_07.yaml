- en: Two-Factor Authentication with Blockchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every organization has hundreds of applications and databases, and its employees
    access them every day using their credentials (that is, their username and password).
    An attacker with such valid credentials can bypass the existing security solutions,
    as they look like a legitimate user. As per the Verizon Data Breach report in
    2016, more than 63% of successful breaches involved compromised credentials. **Two-factor
    authentication** (**2FA**) provides an added layer to the existing credential-based
    system protection as a solution to this drastically growing problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is 2FA?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain for 2FA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is 2FA?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With several data-breach incidents, we've witnessed a massive increase in the
    number of social and professional website accounts being hacked. Sometimes, even
    a simple human error can cause huge trouble globally. Sometimes, it's easy to
    predict the password of a user based on their daily activity, behavior, or even
    name. Users still tend to use plain text passwords to protect their account, and
    among the worst are `password`, `123456`, and `abcde`.
  prefs: []
  type: TYPE_NORMAL
- en: '2FA is an extra layer of security that''s used to ensure that only the legitimate
    owner can access to their account. In this method, the user will first enter a
    combination of a username and password, and, instead of directly getting into
    their account, the user will be required to provide other information. This other
    piece of information can come in the form of one of the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Something that the user knows**: This could be information such as a password,
    an answer to a secret question, or maybe a **personal identification number**
    (**PIN**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Something that the user has**: This method includes the second level of authentication
    based on card details, through smartphones, other hardware, or a software token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Something that the user is**: This is one the most effective ways to verify
    the user on the second step, and this is accomplished with biometric data such
    as keystroke dynamics and mouse behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evolution of user authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Several organizations constantly struggle to find a better way to achieve more
    effective and reliable authentication systems. From the birth of the internet
    to the expansion of the public and hybrid cloud, authentication factors have been
    moving hand in hand. It is important to select a solution that supports robust
    authentication solutions. Organizations ensure that the system is future-proof
    and inter-operable. The following diagram explain how the authentication system
    has been evolved from a **single-factor authentication** (**SFA**) to a **multi-factor
    authentication** (**MFA**) system:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SFA**: It is based on the user''s pre-shared information of a PIN or a password,
    or, most likely, a security question. However, this is sometimes disturbed, as
    a user may forget this preshared information if the user is not regularly accessing
    the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2FA**: This is to overcome the user''s tendency of forgetting the preshared
    information based on what they know. It has methods such as smartphone, key-card,
    or **one-time password** (**OTP**) verification. In this factor, the second step
    of authentication is dynamic in nature, and users don''t have to share anything
    with the application''s owner. This also avoids the risk of the account being
    compromised due to stolen credentials.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MFA**: This has several methods to authenticate users on the second level
    such as voice biometrics, facial recognition, hand geometry, ocular-based methodology,
    fingerprint scanning, geographical location, thermal image recognition, and many
    more. However, this chapter is limited to only exploring 2FA.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows the evolution of authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d9ca8b1-d2fc-4fc2-ac1f-db1724482767.png)'
  prefs: []
  type: TYPE_IMG
- en: Why 2FA?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '2FA helps both end users and business security, and there are several benefits  of
    using it, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Better security**: By integrating a second level of authentication, SMS-based
    OTP reduces the risk of attackers impersonating legitimate users. This reduces
    the risk of account theft and data breaches. Even if the hacker gets the user''s
    credentials from the dark web, they won''t have the second piece of information
    required to completely authenticate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increase in productivity**: Mobile 2FA helps global businesses to use the
    second level of authentication seamlessly. Employees can securely access corporate
    applications, documents, and third-party systems from any device or location without
    sharing any confidential information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reduction in fraud and increase in trust**: Most of the fraud victims avoid
    going to certain retailers, even if the merchant wasn''t responsible for the data
    breach. 2FA builds a greater layer of trust with the user and also reduces fraud
    attempts on merchant sites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does it work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '2FA can be deployed in two modes—a **cloud-based solution** and an **on-premise
    solution**. We will understand both solutions and understand which fits better
    for what kind of deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cloud-based solution**: This is heavily used by E-commerce, online banking,
    and other online service-related web applications. Take a look at the following
    diagram:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d819aec2-2ee4-429d-9afa-573c458c8c51.png)'
  prefs: []
  type: TYPE_IMG
- en: '**On-premise solution**: Organizations hesitate to allow cloud-based security
    solutions and tend to prefer on-premise solutions where an employee accessing
    the web applications puts in a combination of a username and password. Now this
    information goes to the internal VPN integrator, which handles credentials and
    exchanges a key between organizations and third-party 2FA providers. The third-party
    2FA provider will generate the OTP and share this with the employee over SMS or
    through mobile applications. This model helps achieve privacy for an organization,
    as it doesn''t have to share the credentials with a third-party 2FA provider.
    Take a look at the following diagram:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/36881310-e39e-4823-9add-1c77cbe3485e.png)'
  prefs: []
  type: TYPE_IMG
- en: Challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2FA, the first level of authentication is a combination of a username and
    a password, but for the second level of authentication, this piece of information
    is provided from a central repository. This central repository is responsible
    for storing all necessary information to authenticate the user. Although 2FA increases
    the level of security with the second layer of authentication, it still encounters
    the drawback of having the centralized database storing a list of secret user
    information. The central database can be tampered with or corrupted by targeted
    threats, and this can lead to massive data breaches.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain for 2FA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blockchain is being hailed as one of the most revolutionary and disruptive technologies
    out there. Blockchain has been disrupting the cyber security solutions-based CIA
    security triad principal. 2FA have been critical in security measures for several
    years; however, attackers sometimes manage to compromise these systems. We will
    understand how blockchain can transform the 2FA system to achieve an improved
    security method.
  prefs: []
  type: TYPE_NORMAL
- en: How blockchain can transform 2FA?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By design, blockchain is a decentralized technology that allows transactions
    of any kind of value among multiple participants without the involvement of a
    third-party. By leveraging blockchain, we can ensure that this sensitive information
    never remains on one database; however, it can be within blockchain nodes that
    have immutability and can't be modified or deleted. The following diagram shows
    the blockchain-based 2FA.
  prefs: []
  type: TYPE_NORMAL
- en: In this user devices will be authenticated by third party 2FA provider through
    blockchain network. Each party in the blockchain network will hold the endpoint
    information securely and will activate 2FA system to generate the second-level
    password.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can either be deployed in the public domain or even the private network
    with third party API call:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97fcd830-efcb-44b7-8689-f30d3c2b3249.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Being the latest technology, blockchain is still in its testing phase with
    several organizations. For this chapter, we will be using the Ethereum blockchain
    to turn up the 2FA system. Ethereum allows an application to be programmed with
    a smart contract. In the following diagram, the basic flow between the user, the
    web application, and the Ethereum-based repository is depicted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e528135-1e55-4dc0-837b-99aa8ad575db.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A user accesses the web portal and enters the first level of credentials. A
    web application will communicate to the Ethereum-based repository to generate
    the OTP and shares this with the user. Finally, the user enters the same OTP and
    gains access to the web application. Let''s gain some more insight into the Ethereum
    blockchain through the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1d434ca-683e-4976-a9f0-0fac87266a75.png)'
  prefs: []
  type: TYPE_IMG
- en: Lab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To turn up the entire project, we will have to deploy the subcomponent of this
    project. The source has been taken from GitHub, which can be found at the following
    link at [https://github.com/hoxxep/Ethereum-2FA.](https://github.com/hoxxep/Ethereum-2FA)
  prefs: []
  type: TYPE_NORMAL
- en: 'This has the following files in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cde78e84-6b59-43ad-a9a0-2b78aa50996e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The files in the preceding screenshot are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`contracts`: This folder include our smart contract, `TwoFactorAuth.sol`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`migrations`: This folder consists of migration files to deploy the contract
    to the blockchain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test`: This folder consists of `server.js`, which is responsible for event
    authentication in our contract.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`node_modules`: This folder include all the libraries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`truffle.js`: This configuration file consists of a set of configurations to
    connect to the blockchain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`: This is where we specify a configuration of our project, such
    as name and scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the three core components of this project as shown in the
    following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: A blockchain network (which we will develop by Ganache CLI)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart contract
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A server communicating with blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Take a look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68b40ffb-549e-468c-810d-b24d79cda621.png)'
  prefs: []
  type: TYPE_IMG
- en: Preparation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is important to develop the blockchain network before we even start configuring
    any other parameter. First, let's start by developing our **decentralized applications**
    (**dApps**) on a local Ethereum called `testrpc`. In our case, we are using the
    Ganache CLI, and it uses EthereumJS to simulate full client behavior and make
    Ethereum development easier and safer. It also includes all well-known RPC functions
    and features.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will first install the Node.js package on to our local system. The code
    can be downloaded from the following link: [https://nodejs.org/uk/download/package-manager/#arch-linux](https://nodejs.org/uk/download/package-manager/#arch-linux).'
  prefs: []
  type: TYPE_NORMAL
- en: Turning up Ethereum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps for turning up Ethereum are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to install the `ganache-cli` on our system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, run the entire suite with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After the previously mentioned command execution, we will get 10 default accounts
    and 10 default private keys. Now we will have a local Ethereum, `testrpc`, running
    on `http://localhost:8545`, as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3f4d354-1994-4e70-a569-97f17a9a94e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Turning up the smart contract
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now run `server.js` with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After the execution of the previous command, we will see the following screen
    that also shows the web address of 2FA:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8ac53a1-81ce-4104-911a-b42eba6bc29b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s open Google Chrome and access the localhost on port `3000`, as mentioned
    in the previous screenshot. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a927870c-fcec-4a39-b10d-94aacd91f0d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing and verification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Testing and verification is done by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Calling the authentication function**: We need to run the smart contract
    code on the Ethereum IDE, which is accessible with [https://remix.ethereum.org](https://remix.ethereum.org).
    The following process adds the Solidity code to the remix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the + sign in the upper left corner, and add a new filename called `TwoFactorAuth.sol`
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the code to our remix instance file
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, choose TwoFactorAuth and click on the Compile option
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, go to the Run tab
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to call the `authenticate()` function to authenticate the contract,
    as shown in the following screenshot :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3985c339-d8b1-4de6-b7af-2884ed5a5551.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Verifying authentication**: In this step, we need to verify whether the authentication
    worked. To accomplish this, follow these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to set the environment field to the Web3 Provider option.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now choose the TwoFactorAuth option, provide the contract address in the placeholder
    with Load contract and then click at the At Address button, as shown in the following
    screenshot:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/75707a8e-3d91-40e9-a06a-ef9f80b8f546.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Successful authentication**: Our server subscribes to the contract, and when
    we call the `authenticate()` method, the server reads that from the blockchain
    and returns with a successful authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1d98020a-1d63-4c11-be03-5058b1131ece.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how 2FA is one of the most vital security measurements.
    However, the central repository can be at risk of being compromised by sophisticated
    cyber attacks. We studied how blockchain helps decentralize the database between
    multiple nodes and reduces the chance of being a victim of a data breach. The
    Ethereum smart contract is a truly great component of accomplishing a 2FA system,
    which provides the flexibility to program the entire system.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have topics regarding understanding 2FA, types, and methods to authenticate,
    and a lab to demonstrate how Ethereum can be used to create a 2FA infrastructure.
    There are some questions that are important to explore, such as these:'
  prefs: []
  type: TYPE_NORMAL
- en: Can we also achieve MFA with Ethereum and if so, how?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we integrate SMS-based 2FA with the Ethereum smart contract?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To explore more about the NIST *multi-factor authentication (MFA)* guidelines,
    look at the following link at [https://www.nist.gov/itl/tig/back-basics-multi-factor-authentication](https://www.nist.gov/itl/tig/back-basics-multi-factor-authentication).
  prefs: []
  type: TYPE_NORMAL
