["```\n npm install -g composer-cli@0.20\n```", "```\n npm install -g composer-rest-server@0.20\n```", "```\n npm install -g generator-hyperledger-composer@0.20\n```", "```\n npm install -g yo\n```", "```\n npm install -g composer-playground\n```", "```\n mkdir ~/fabric-devserver && cd ~/fabric-devserver\n curl -O https://raw.githubusercontent.com/hyperledger/composer- tools/master/packages/fabric-dev-servers/fabric-dev-servers.zip\n unzip fabric-dev-servers.zip\n export FABRIC_VERSION=hlfv12\n ./downloadFabric.sh\n```", "```\nsample.cto\n/**\n* Sample business network definition.\n */\nnamespace org.example.basic\nasset SampleAsset identified by assetId {\n  o String assetId\n  --> SampleParticipant owner\n  o String value\n}\nparticipant SampleParticipant identified by participantId {\n  o String participantId\n  o String firstName\n  o String lastName\n}\ntransaction SampleTransaction {\n  --> SampleAsset asset\n  o String newValue\n}\nevent SampleEvent {\n  --> SampleAsset asset\n  o String oldValue\n  o String newValue\n}\n```", "```\n/**\n * Sample transaction processor function.\n * @param {org.example.basic.SampleTransaction} tx The sample transaction instance.\n * @transaction\n */\nasync function sampleTransaction(tx) {  // eslint-disable-line no-unused-vars\n..\n    emit(event);\n}\n```", "```\nrule OwnerHasFullAccessToTheirAssets {\n    description: \"Allow all participants full access to their assets\"\n    participant(p): \"org.example.basic.SampleParticipant\"\n    operation: ALL\n    resource(r): \"org.example.basic.SampleAsset\"\n    condition: (r.owner.getIdentifier() === p.getIdentifier())\n    action: ALLOW\n}\n```", "```\nquery queryName {\n    description: \"Select SampleAsset by assetId \"\n    statement:\n        SELECT org.example.basic.SampleAsset\n            WHERE (_$assetId = assetId)\n}\n```", "```\nrule EverybodyCanReadEverything {\n    description: \"Allow all participants read access to all resources\"\n    participant: \"**\"\n    operation: READ\n    resource: \"com.packt.quickstart.claim.*\"\n    action: ALLOW\n}\nrule EverybodyCanSubmitTransactions {\n    description: \"Allow all participants to submit transactions\"\n    participant: \"**\"\n    operation: CREATE\n    resource: \"**\"\n    action: ALLOW\n}\n```", "```\n      namespace com.packt.quickstart.claim\n      participant Insuree identified by id {\n        o String id\n        o String firstName\n        o String lastName\n        o String ssn\n        o String policyNumber\n      }\n      participant Company identified by id {\n        o String id\n        o String type\n        o String name\n      }\n      asset Claim identified by id {\n        o String id\n        o String desc\n        o Integer status\n        o String insureeId\n        o String brokerId\n        o String insurerId\n        o String comment\n        o String processAt\n      }\n```", "```\n      transaction Init {\n        o String insureeId\n        o String firstName\n        o String lastName\n        o String ssn\n        o String policyNumber\n      }\n      event InitEvent {\n        --> Insuree insuree\n      }\n```", "```\n      transaction ReportLost {\n        o String claimId\n        o String desc\n        o String insureeId\n        o String brokerId\n      }\n      event ReportLostEvent {\n         --> Claim claim\n      }\n```", "```\n      transaction RequestedInfo {\n        --> Claim claim\n      }\n      event RequestedInfoEvent {\n        --> Claim claim\n      }\n```", "```\nInit() function is used to register insuree person information.\n/** \n  * Create the insuree\n  * @param {com.packt.quickstart.claim.Init} initalAppliation - the InitialApplication transaction\n  * @transaction\n  */\n async function Init(application) { // eslint-disable-line no-unused-vars\n     const factory = getFactory();\n     const namespace = 'com.packt.quickstart.claim';\n     const insuree = factory.newResource(namespace, 'Insuree', application.insureeId);\n     insuree.firstName = application.firstName;;     insuree.lastName = application.lastName\n\n     insuree.ssn = application.ssn;;\n     insuree.policyNumber = application.policyNumber;;\n     const participantRegistry = await\ngetParticipantRegistry(insuree.getFullyQualifiedType());\n     await participantRegistry.add(insuree);\n     // emit event\n     const initEventEvent = factory.newEvent(namespace, 'InitEvent');\n     initEventEvent.insuree = insuree;\n     emit(initEventEvent);\n }\n```", "```\n/**\n  * insuree report lost item\n  * @param {com.packt.quickstart.claim.ReportLost} ReportLost - the ReportLost transaction\n  * @transaction\n  */\n async function ReportLost(request) {\n     const factory = getFactory();\n     const namespace = 'com.packt.quickstart.claim';\n     let claimId = request.claimId;\n     let desc = request.desc;\n     let insureeId = request.insureeId;\n     let brokerId = request.brokerId;\n     const claim = factory.newResource(namespace, 'Claim', claimId);\n     claim.desc = desc;\n     claim.status = \"ReportLost\";\n     claim.insureeId = insureeId;\n     claim.brokerId = brokerId;\n     claim.insurerId = \"\";\n     claim.comment = \"\";\n     claim.processAt = (new Date()).toString();\n     const claimRegistry = await getAssetRegistry(claim.getFullyQualifiedType());\n     await claimRegistry.add(claim);\n     // emit event\n     const reportLostEvent = factory.newEvent(namespace, 'ReportLostEvent');\n     reportLostEvent.claim = claim;\n     emit(reportLostEvent); }\n```", "```\n/**\n  * broker send Requested Info to insuree\n  * @param {com.packt.quickstart.claim.RequestedInfo} RequestedInfo - the RequestedInfo transaction\n  * @transaction\n  */\n async function RequestedInfo(request) { // eslint-disable-line no-unused-vars\n     const factory = getFactory();\n     const namespace = 'com.packt.quickstart.claim';\n     let claim = request.claim;\n     if (claim.status !== 'ReportLost') {\n         throw new Error ('This claim should be in ReportLost status');\n     }\n     claim.status = 'RequestedInfo';\n     claim.processAt = (new Date()).toString();\n     const assetRegistry = await getAssetRegistry(request.claim.getFullyQualifiedType());\n     await assetRegistry.update(claim);\n     // emit event\n     const requestedInfoEventEvent = factory.newEvent(namespace, 'RequestedInfoEvent');\n     requestedInfoEventEvent.claim = claim;\n     emit(requestedInfoEventEvent); }\n```", "```\n yo hyperledger-composer:businessnetwork\n```", "```\n cd ~/fabric-devservers\n export FABRIC_VERSION=hlfv12\n ./startFabric.sh\n ./createPeerAdminCard.sh\n```", "```\n composer archive create -t dir -n \n```", "```\n composer network install --card PeerAdmin@hlfv1 --archiveFile \n      insurance-claim-network@0.0.1.bna\n```", "```\n composer network start --networkName insurance-claim-network --\n      networkVersion 0.0.1 --networkAdmin admin --networkAdminEnrollSecret \n      adminpw --card PeerAdmin@hlfv1 --file networkadmin.card\n```", "```\n composer card import --file networkadmin.card\n```", "```\n composer network ping --card admin@insurance-claim-network\n```", "```\ncomposer-rest-server\n```", "```\n{\n  \"$class\": \"com.packt.quickstart.claim.Init\",\n  \"insureeId\": \"user-001\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"ssn\": \"9999\",\n  \"policyNumber\": \"string\"\n}\n```", "```\n{\n  \"$class\": \"com.packt.quickstart.claim.Init\",\n  \"insureeId\": \"user-001\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"ssn\": \"9999\",\n  \"policyNumber\": \"string\"\n}\n```", "```\n{\n  \"$class\": \"com.packt.quickstart.claim.ReportLost\",\n  \"claimId\": \"claim_001\",\n  \"desc\": \"I was in Destiny shopping center and lost my IPhone 8\",\n  \"insureeId\": \"user_001\",\n  \"brokerId\": \"broker_001\"\n}\n```"]