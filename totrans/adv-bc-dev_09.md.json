["```\nvar provider = new HookedWeb3Provider({ \n host: \"http://localhost:8545\", \n transaction_signer: { \n  hasAddress: function(address, callback){ \n   callback(null, true); \n  }, \n  signTransaction: function(tx_params, callback){ \n   var rawTx = { \n          gasPrice: web3.toHex(tx_params.gasPrice), \n          gasLimit: web3.toHex(tx_params.gas), \n          value: web3.toHex(tx_params.value) \n          from: tx_params.from, \n          to: tx_params.to, \n          nonce: web3.toHex(tx_params.nonce) \n      }; \n\n   var privateKey = EthJS.Util.toBuffer('0x1a56e47492bf3df9c9563fa7f66e4e032c661de9d68c3f36f358e6bc9a9f69f2', 'hex'); \n   var tx = new EthJS.Tx(rawTx); \n   tx.sign(privateKey); \n\n   callback(null, tx.serialize().toString('hex')); \n  } \n } \n}); \n\nvar web3 = new Web3(provider); \n\nweb3.eth.sendTransaction({ \n from: \"0xba6406ddf8817620393ab1310ab4d0c2deda714d\", \n to: \"0x2bdbec0ccd70307a00c66de02789e394c2c7d549\", \n value: web3.toWei(\"0.1\", \"ether\"), \n gasPrice: \"20000000000\", \n gas: \"21000\" \n}, function(error, result){ \n console.log(error, result) \n})\n```", "```\n    geth --dev --rpc --rpccorsdomain \"*\" --rpcaddr \"0.0.0.0\" --rpcport \"8545\" --mine --unlock=0\n```", "```\nvar express = require(\"express\");   \nvar app = express();   \n\napp.use(express.static(\"public\")); \n\napp.get(\"/\", function(req, res){ \n res.sendFile(__dirname + \"/public/html/index.html\"); \n}) \n\napp.listen(8080);\n```", "```\n<!DOCTYPE html> \n <html lang=\"en\"> \n     <head> \n         <meta charset=\"utf-8\"> \n         <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> \n         <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"> \n         <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\"> \n     </head> \n     <body> \n         <div class=\"container\"> \n             <div class=\"row\"> \n                 <div class=\"col-md-6 offset-md-3\"> \n                     <br> \n                     <div class=\"alert alert-info\" id=\"info\" role=\"alert\"> \n                           Create or use your existing wallet. \n                     </div> \n                     <form> \n                         <div class=\"form-group\"> \n                             <label for=\"seed\">Enter 12-word seed</label> \n                             <input type=\"text\" class=\"form-control\" id=\"seed\"> \n                         </div> \n                         <button type=\"button\" class=\"btn btn-primary\" onclick=\"generate_addresses()\">Generate Details</button> \n                         <button type=\"button\" class=\"btn btn-primary\" onclick=\"generate_seed()\">Generate New Seed</button> \n                     </form> \n                     <hr> \n                     <h2 class=\"text-xs-center\">Address, Keys and Balances of the seed</h2> \n                     <ol id=\"list\"> \n                     </ol> \n                     <hr> \n                     <h2 class=\"text-xs-center\">Send ether</h2> \n                     <form> \n                         <div class=\"form-group\"> \n                             <label for=\"address1\">From address</label> \n                             <input type=\"text\" class=\"form-control\" id=\"address1\"> \n                         </div> \n                         <div class=\"form-group\"> \n                             <label for=\"address2\">To address</label> \n                             <input type=\"text\" class=\"form-control\" id=\"address2\"> \n                         </div> \n                         <div class=\"form-group\"> \n                             <label for=\"ether\">Ether</label> \n                             <input type=\"text\" class=\"form-control\" id=\"ether\"> \n                         </div> \n                         <button type=\"button\" class=\"btn btn-primary\" onclick=\"send_ether()\">Send Ether</button> \n                     </form> \n                 </div> \n             </div> \n         </div> \n\n            <script src=\"img/web3.min.js\"></script> \n            <script src=\"img/hooked-web3-provider.min.js\"></script> \n         <script src=\"img/lightwallet.min.js\"></script> \n         <script src=\"img/main.js\"></script> \n     </body> \n </html>\n```", "```\nfunction generate_seed() \n{ \n var new_seed = lightwallet.keystore.generateRandomSeed(); \n\n document.getElementById(\"seed\").value = new_seed; \n\n generate_addresses(new_seed); \n}\n```", "```\nvar totalAddresses = 0; \n\nfunction generate_addresses(seed) \n{ \n if(seed == undefined) \n { \n  seed = document.getElementById(\"seed\").value; \n } \n\n if(!lightwallet.keystore.isSeedValid(seed)) \n { \n  document.getElementById(\"info\").innerHTML = \"Please enter a valid seed\"; \n  return; \n } \n\n totalAddresses = prompt(\"How many addresses do you want to generate\"); \n\n if(!Number.isInteger(parseInt(totalAddresses))) \n { \n  document.getElementById(\"info\").innerHTML = \"Please enter valid number of addresses\"; \n  return; \n } \n\n var password = Math.random().toString(); \n\n lightwallet.keystore.createVault({ \n  password: password, \n    seedPhrase: seed \n }, function (err, ks) { \n    ks.keyFromPassword(password, function (err, pwDerivedKey) { \n      if(err) \n      { \n       document.getElementById(\"info\").innerHTML = err; \n      } \n      else \n      { \n       ks.generateNewAddress(pwDerivedKey, totalAddresses); \n       var addresses = ks.getAddresses();  \n\n       var web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\")); \n\n       var html = \"\"; \n\n       for(var count = 0; count < addresses.length; count++) \n       { \n     var address = addresses[count]; \n     var private_key = ks.exportPrivateKey(address, pwDerivedKey); \n     var balance = web3.eth.getBalance(\"0x\" + address); \n\n     html = html + \"<li>\"; \n     html = html + \"<p><b>Address: </b>0x\" + address + \"</p>\"; \n     html = html + \"<p><b>Private Key: </b>0x\" + private_key + \"</p>\"; \n     html = html + \"<p><b>Balance: </b>\" + web3.fromWei(balance, \"ether\") + \" ether</p>\"; \n        html = html + \"</li>\"; \n       } \n\n       document.getElementById(\"list\").innerHTML = html; \n      } \n    }); \n }); \n}\n```", "```\nfunction send_ether() \n{ \n var seed = document.getElementById(\"seed\").value; \n\n if(!lightwallet.keystore.isSeedValid(seed)) \n { \n  document.getElementById(\"info\").innerHTML = \"Please enter a valid seed\"; \n  return; \n } \n\n var password = Math.random().toString(); \n\n lightwallet.keystore.createVault({ \n  password: password, \n    seedPhrase: seed \n }, function (err, ks) { \n    ks.keyFromPassword(password, function (err, pwDerivedKey) { \n      if(err) \n      { \n       document.getElementById(\"info\").innerHTML = err; \n      } \n      else \n      { \n       ks.generateNewAddress(pwDerivedKey, totalAddresses); \n\n       ks.passwordProvider = function (callback) { \n          callback(null, password); \n       }; \n\n       var provider = new HookedWeb3Provider({ \n       host: \"http://localhost:8545\", \n       transaction_signer: ks \n    }); \n\n       var web3 = new Web3(provider); \n\n       var from = document.getElementById(\"address1\").value; \n    var to = document.getElementById(\"address2\").value; \n       var value = web3.toWei(document.getElementById(\"ether\").value, \"ether\"); \n\n       web3.eth.sendTransaction({ \n        from: from, \n        to: to, \n        value: value, \n        gas: 21000 \n       }, function(error, result){ \n        if(error) \n        {  \n         document.getElementById(\"info\").innerHTML = error; \n        } \n        else \n        { \n         document.getElementById(\"info\").innerHTML = \"Txn hash: \" + result; \n        } \n       }) \n      } \n    }); \n }); \n}\n```"]