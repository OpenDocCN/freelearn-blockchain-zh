["```\nconst http = require('http');\n\nconst name = 'node-hello-world';\nconst port = '8888';\n\nconst app = new http.Server();\n\napp.on('request', (req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.write('Hello World');\n  res.end('\\n');\n});\n\napp.listen(port, () => {\n  console.log(`${name} is listening on port ${port}`);\n});\n```", "```\nFROM node:carbon\n\nWORKDIR /usr/src/app\n\nCOPY . ./\n\nEXPOSE 8888\n\nCMD [ \"node\", \"app.js\" ]\n```", "```\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-hyperkit \\\n&& chmod +x docker-machine-driver-hyperkit \\\n&& sudo mv docker-machine-driver-hyperkit /usr/local/bin/ \\\n&& sudo chown root:wheel /usr/local/bin/docker-machine-driver-hyperkit \\\n&& sudo chmod u+s /usr/local/bin/docker-machine-driver-hyperkit\n```", "```\nbrew install kubectl\n```", "```\ncurl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.26.1/minikube-darwin-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/\n```", "```\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-hyperkit \\\n&& chmod +x docker-machine-driver-hyperkit \\\n&& sudo mv docker-machine-driver-hyperkit /usr/local/bin/ \\\n&& sudo chown root:wheel /usr/local/bin/docker-machine-driver-hyperkit \\\n&& sudo chmod u+s /usr/local/bin/docker-machine-driver-hyperkit\n```", "```\nsudo snap install kubectl --classic\n```", "```\ncurl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.26.1/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/\n```", "```\nminikube start --vm-driver=hyperkit\n```", "```\nminikube start --vm-driver=virtualbox\n```", "```\nminikube stop\n```", "```\nminukube delete\n```", "```\nminikube status\n```", "```\nminikube: Running\ncluster: Running\nkubectl: Correctly Configured: pointing to minikube-vm at 192.168.64.7\n```", "```\nminikube dashboard\n```", "```\ndocker login\n```", "```\ndocker tag nodejs-hello-world:latest narayanprusty/nodejs-hello-world\n```", "```\ndocker push narayanprusty/nodejs-hello-world\n```", "```\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-world\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello-world\n    spec:\n      containers:\n      - name: nodejs-hello-world\n        image: narayanprusty/nodejs-hello-world\n        command: [ 'node', 'app.js']\n        workingDir: /usr/src/app\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 8888\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: hello-world\nspec:\n  ports:\n    - name: api\n      port: 8888\n  selector:\n      app: hello-world\n  type: NodePort\n```", "```\nkubectl apply -f helloWorld.yaml\n```", "```\nFROM ubuntu:16.04\n\n#Install Utilities\nRUN apt-get update\nRUN apt-get install -y --no-install-recommends vim less net-tools inetutils-ping wget curl git telnet nmap socat dnsutils netcat tree htop unzip sudo software-properties-common jq psmisc iproute python ssh rsync gettext-base\n\n# Install QNM\nRUN mkdir -p workspace && cd workspace && wget https://raw.githubusercontent.com/ConsenSys/QuorumNetworkManager/v0.7.5-beta/setup.sh && chmod +x setup.sh && ./setup.sh\nENV LANGUAGE=en_US.UTF-8 LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nRUN apt-get install -y locales && locale-gen en_US.UTF-8\n\nWORKDIR /workspace/QuorumNetworkManager\nENTRYPOINT [\"/bin/bash\", \"-i\", \"-c\"]\n```", "```\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n  name: coordinator\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: coordinator\n    spec:\n      containers:\n      - name: qnm\n        image: narayanprusty/qnm\n        args: ['node setupFromConfig.js']\n        workingDir: /workspace/QuorumNetworkManager\n        imagePullPolicy: Always\n        env: \n        - name: IP\n          value: 0.0.0.0\n        ports:\n        - containerPort: 50000\n        - containerPort: 50010\n        - containerPort: 50020\n        - containerPort: 20000\n        - containerPort: 20010\n        - containerPort: 20020\n        - containerPort: 40000\n        - containerPort: 30303\n        - containerPort: 9000\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: coordinator\nspec:\n  ports:\n    - name: remote-communication-node\n      port: 50000\n    - name: communication-node-rpc\n      port: 50010\n    - name: communication-node-ws-rpc\n      port: 50020\n    - name: geth-node\n      port: 20000\n    - name: geth-node-rpc\n      port: 20010\n    - name: geth-node-ws-rpc\n      port: 20020\n    - name: raft-http\n      port: 40000\n    - name: devp2p\n      port: 30303\n    - name: constellation\n      port: 9000\n  selector:\n      app: coordinator\n  type: NodePort\n```", "```\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n  name: non-coordinator\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: non-coordinator\n    spec:\n      containers:\n      - name: qnm\n        image: narayanprusty/qnm\n        args: ['node setupFromConfig.js']\n        workingDir: /workspace/QuorumNetworkManager\n        imagePullPolicy: Always\n        env:\n        - name: COORDINATING_IP\n          value: 10.97.145.237\n        - name: ROLE\n          value: dynamicPeer \n        - name: IP\n          value: 0.0.0.0\n        ports:\n        - containerPort: 50000\n        - containerPort: 50010\n        - containerPort: 50020\n        - containerPort: 20000\n        - containerPort: 20010\n        - containerPort: 20020\n        - containerPort: 40000\n        - containerPort: 30303\n        - containerPort: 9000\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: non-coordinator\nspec:\n  ports:\n    - name: remote-communication-node\n      port: 50000\n    - name: communication-node-rpc\n      port: 50010\n    - name: communication-node-ws-rpc\n      port: 50020\n    - name: geth-node\n      port: 20000\n    - name: geth-node-rpc\n      port: 20010\n    - name: geth-node-ws-rpc\n      port: 20020\n    - name: raft-http\n      port: 40000\n    - name: devp2p\n      port: 30303\n    - name: constellation\n      port: 9000\n  selector:\n      app: non-coordinator\n  type: NodePort\n\n```", "```\nkubectl proxy --address=\"0.0.0.0\" -p 8000\n```", "```\nvar request = require(\"request\");\n\nvar options = {\n    method: 'POST',\n    url: 'http://127.0.0.1:8000/apis/apps/v1beta1/namespaces/\n      default/deployments',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: {\n        apiVersion: 'apps/v1beta1',\n        kind: 'Deployment',\n        metadata: {\n            name: 'coordinator'\n        },\n        spec: {\n            replicas: 1,\n            template: {\n                metadata: {\n                    labels: {\n                        app: 'coordinator'\n                    }\n                },\n                spec: {\n                    containers: [{\n                        name: 'qnm',\n                        image: 'narayanprusty/qnm',\n                        args: ['node setupFromConfig.js'],\n                        workingDir: '/workspace/QuorumNetworkManager',\n                        imagePullPolicy: 'Always',\n                        env: [{\n                            name: 'IP',\n                            value: '0.0.0.0'\n                        }],\n                        ports: [{\n                                containerPort: 50000\n                            },\n                            {\n                                containerPort: 50010\n                            },\n                            {\n                                containerPort: 50020\n                            },\n                            {\n                                containerPort: 20000\n                            },\n                            {\n                                containerPort: 20010\n                            },\n                            {\n                                containerPort: 20020\n                            },\n                            {\n                                containerPort: 40000\n                            },\n                            {\n                                containerPort: 30303\n                            },\n                            {\n                                containerPort: 9000\n                            }\n                        ]\n                    }]\n                }\n            }\n        }\n    },\n    json: true\n};\n\nrequest(options, function(error, response, body) {\n    if (error) throw new Error(error);\n\n    console.log(body);\n});\n```", "```\nvar request = require(\"request\");\n\nvar options = {\n    method: 'POST',\n    url: 'http://127.0.0.1:8000/api/v1/namespaces/default/services',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: {\n        kind: 'Service',\n        apiVersion: 'v1',\n        metadata: {\n            name: 'coordinator'\n        },\n        spec: {\n            ports: [{\n                    name: 'remote-communication-node',\n                    port: 50000\n                },\n                {\n                    name: 'communication-node-rpc',\n                    port: 50010\n                },\n                {\n                    name: 'communication-node-ws-rpc',\n                    port: 50020\n                },\n                {\n                    name: 'geth-node',\n                    port: 20000\n                },\n                {\n                    name: 'geth-node-rpc',\n                    port: 20010\n                },\n                {\n                    name: 'geth-node-ws-rpc',\n                    port: 20020\n                },\n                {\n                    name: 'raft-http',\n                    port: 40000\n                },\n                {\n                    name: 'devp2p',\n                    port: 30303\n                },\n                {\n                    name: 'constellation',\n                    port: 9000\n                }\n            ],\n            selector: {\n                app: 'coordinator'\n            },\n            type: 'NodePort'\n        }\n    },\n    json: true\n};\n\nrequest(options, function(error, response, body) {\n    if (error) throw new Error(error);\n\n    console.log(body);\n});\n```"]