- en: Hyperledger and Enterprise Blockchains
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger和企业区块链
- en: Unlike most of the other blockchain systems discussed in this book, Hyperledger
    never had an **Initial** **Coin Offer** (**ICO**) and has no tokens that are publicly
    traded. This is because Hyperledger isn't a blockchain itself, but instead a collection
    of technologies used for the creation of new blockchains. Moreover, these blockchain
    technologies were explicitly designed and built for enterprise use cases and not
    the public markets.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书讨论的大多数其他区块链系统不同，Hyperledger从未进行**首次** **代币发行**（ICO），也没有公开交易的代币。这是因为Hyperledger本身并不是一个区块链，而是一组用于创建新区块链的技术。此外，这些区块链技术专门设计和构建用于企业用例，而不是公共市场。
- en: 'In this chapter, we will cover the following items:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: The history of Hyperledger
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger的历史
- en: Critical details about each of the six current Hyperledger projects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六个当前Hyperledger项目的关键细节
- en: An overview of the Hyperledger tools used to support the ecosystem
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持生态系统使用的Hyperledger工具概述
- en: Suggestions on how to select Hyperledger technologies for a project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何选择项目中的Hyperledger技术的建议
- en: The Hyperledger name doesn't apply to a single technology, but rather a collection
    of blockchain technologies all donated to the Linux Foundation under the Hyperledger
    name.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger的名称不适用于单一技术，而是适用于所有捐赠给Linux基金会的区块链技术的集合。
- en: Members of the Hyperledger project include major blockchain companies such as
    Consensys, R3, and Onchain, as well as a large number of enterprise-focused technology
    companies such as Baidu, Cisco, Fujitsu, Hitachi, IBM, Intel NEC, Red Hat, and
    VMware. In addition to these companies, a number of financial services firms have
    come on board due to the clear application of blockchain in fintech. Financial
    services members include ANZ Bank, BYN Mellon, JP Morgan, SWIFT, and Wells Fargo.
    Seeing the opportunity to be on the next wave of business software consulting,
    major integrators joined as well—Accenture, CA Technology, PWC, and Wipro, along
    with many others.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger项目成员包括Consensys、R3和Onchain等主要区块链公司，以及百度、思科、富士通、日立、IBM、英特尔、NEC、红帽和VMware等许多企业技术公司。除了这些公司，许多金融服务公司也加入了，因为区块链在金融科技领域的明显应用。金融服务成员包括澳新银行、美林银行、摩根大通、SWIFT和富国银行。为了成为下一波商业软件咨询机会的一部分，主要的整合商也加入了——例如安永、CA科技、普华永道和Wipro，以及其他许多公司。
- en: Recently, Amazon, IBM, and Microsoft have all revealed blockchain-as-a-service
    offerings featuring Hyperledger technology.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，亚马逊、IBM和微软都发布了基于Hyperledger技术的区块链即服务产品。
- en: History of Hyperledger
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger的历史
- en: 'The Hyperledger project was founded in 2015, when the Linux Foundation announced
    the creation of the Hyperledger project. It was founded in conjunction with a
    number of enterprise players, including IBM, Intel, Fujitsu, and JP Morgan. The
    goal was to improve and create industry collaboration around blockchain technology
    so that it would be usable for complex enterprise use cases in the key industries
    most suitable to blockchain disruption: technology, finance, and supply chain.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger项目成立于2015年，当时Linux基金会宣布了创建Hyperledger项目。它是与IBM、英特尔、富士通和摩根大通等许多企业玩家合作成立的。其目标是改进并在技术、金融和供应链等主要适合区块链颠覆行业的领域，促进区块链技术的行业合作，使其适用于复杂的企业用例。
- en: The project gained substance in 2016, when the first technology donations were
    made. IBM donated what was to become known as **Hyperledger Fabric**, and Intel
    donated the code base that became Hyperledger Sawtooth.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目在2016年获得实质性进展，当时进行了首次技术捐赠。IBM捐赠了后来成为著名的**Hyperledger Fabric**的内容，而英特尔捐赠了成为Hyperledger
    Sawtooth的代码库。
- en: Unlike most projects in the blockchain space, Hyperledger has never issued its
    own cryptocurrency. In fact, the executive director of Hyperledger has publicly
    stated that there never will be one.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与区块链领域的大多数项目不同，Hyperledger从未发行自己的加密货币。事实上，Hyperledger的执行董事公开表示永远不会发行加密货币。
- en: Hyperledger projects
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger项目
- en: As mentioned, a hyperledger isn't a single blockchain technology, but rather
    a collection of technologies donated by member companies. While there is a long-term
    goal of greater integration between projects, currently most of the Hyperledger
    projects function independently. Each project's core code base was donated by
    one or more of the Hyperledger member organizations, based on problems they were
    trying to solve internally before open sourcing the code and handing ownership
    to the Linux Foundation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，超级账本并不是单一的区块链技术，而是由成员公司捐赠的技术集合。虽然有更好的集成长期目标，但目前大多数超级账本项目都是独立运行的。每个项目的核心代码库是由一个或多个超级账本成员组织捐赠的，基于他们在向Linux基金会开放源代码和移交所有权之前正在试图解决的问题。
- en: Hyperledger Burrow
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超级账本Burrow
- en: Hyperledger Burrow is a re-implementation of the **Ethereum Virtual Machine**
    (**EVM**) and blockchain technology, but with a few key changes. First, instead
    of using the proof-of-work consensus algorithm used by the public Ethereum chain,
    Burrow is designed around the Tendermint consensus algorithm (See [Chapter 7](7f407309-5d34-464d-90fb-7d563834b8f8.xhtml), *Achieving
    Consensus*). This means there are no miners and no mining to be done on Burrow-based
    projects.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本Burrow是以太坊虚拟机（**EVM**）和区块链技术的重新实现，但有一些关键变化。首先，Burrow不使用公共以太坊链使用的工作量证明共识算法，而是设计围绕Tendermint共识算法（参见[第7章](7f407309-5d34-464d-90fb-7d563834b8f8.xhtml)，*实现共识*）。这意味着在基于Burrow的项目中没有矿工，也没有挖矿活动。
- en: Second, Hyperledger Burrow is permissioned—the computers allowed to participate
    in a Hyperledger Burrow network are known and granted access, and the computers
    signing blocks (called **validators**, as in Tendermint) are all known. This is
    very different than Ethereum, where anyone can anonymously download the Ethereum
    software and join the network.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，超级账本Burrow是许可的——允许参与超级账本Burrow网络的计算机是已知的并获得授权的，而签署块的计算机（称为**验证者**，如Tendermint中的）也都是已知的。这与以太坊非常不同，任何人都可以匿名下载以太坊软件并加入网络。
- en: Smart contracts written for the EVM will still mostly work. Due to the change
    in consensus, there are also changes in the way Gas is used. In the public Ethereum
    blockchain, each transaction costs Gas, depending on the complexity of the transaction,
    and each block has a Gas limit. Depending on the network load, participants have
    to pay a variable cost in Ether for the Gas needed for their transactions. In
    Burrow, these complexities are mostly dispensed with. Each transaction is gifted
    a basic amount of Gas automatically. Because the Gas is still limited, Burrow
    is able to guarantee that all transactions eventually complete—either by succeeding
    or failing—because they run out of Gas.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为EVM编写的智能合约仍然大部分能够工作。由于共识的改变，Gas的使用方式也有所改变。在公共以太坊区块链中，每笔交易都要根据交易的复杂性付出Gas的代价，并且每个区块都有一个Gas限制。根据网络负载的不同，参与者必须支付Ether的可变成本来获取所需的Gas。在Burrow中，这些复杂性大多被摒弃了。每笔交易都自动获得一定数量的Gas。由于Gas仍然是有限的，Burrow能够保证所有交易最终完成——要么成功，要么因为Gas耗尽而失败。
- en: For more on the EVM, solidity language, and other aspects of Ethereum shared
    with Hyperledger Burrow, please see [Chapter 12](9a6789a7-5c2f-4735-868e-4a13275dd6ed.xhtml),
    *Ethereum 101*, to [Chapter 15](588b84f6-baef-4ea3-895e-bd66f523452b.xhtml), *Ethereum
    Development*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有关EVM、solidity语言以及与超级账本Burrow分享的以太坊的其他方面，请参见[第12章](9a6789a7-5c2f-4735-868e-4a13275dd6ed.xhtml)，*以太坊101*，直至[第15章](588b84f6-baef-4ea3-895e-bd66f523452b.xhtml)，*以太坊开发*。
- en: Hyperledger Sawtooth
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超级账本锯齿状
- en: Hyperledger Sawtooth, like the rest of the Hyperledger family, is built for
    permissioned (private) networks rather than public networks, such as Ethereum,
    Bitcoin, and so on. As an enterprise-oriented blockchain system, it is designed
    around allowing different companies to coordinate using a blockchain and smart
    contracts. Originally developed by Intel, Sawtooth uses a unique consensus algorithm
    called **Proof of Elapsed Time**, or **PoET**.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本锯齿状，与超级账本家族的其他成员一样，是为许可（私有）网络而建立的，而不是公共网络，例如以太坊、比特币等。作为面向企业的区块链系统，它旨在允许不同公司使用区块链和智能合约进行协调。最初由英特尔开发，Sawtooth使用一种称为**时间逝去的证明**或**PoET**的独特共识算法。
- en: PoET uses a lottery-based system for leader election. Using special Intel technology
    called the **Trusted Execution Environment** (**TEE**), along with **Software
    Guard Extensions** (**SGX**), available on some Intel chipsets, the leader is
    elected by each node generating a random wait time, with the shortest wait time
    going first. Because the code to generate the wait time is in the TEE, it can
    be verified that each node is running appropriate code and not skipping in line
    to become leader by not waiting the amount of time generated by the random time
    generator. Therefore, the election of the leader (and block issuer) is very fast,
    which in turn allows the blockchain to operate quickly.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: PoET 使用基于抽奖的系统进行领导者选举。使用特殊的英特尔技术，称为 **可信执行环境**（**TEE**），以及一些英特尔芯片组上可用的 **软件保护扩展**（**SGX**），每个节点通过生成随机等待时间来选择领导者，最短等待时间优先。由于生成等待时间的代码位于
    TEE 中，因此可以验证每个节点是否运行适当的代码，并且没有通过跳过由随机时间生成器生成的时间来成为领导者。因此，领导者（和区块发行者）的选举非常快速，从而使区块链能够快速运行。
- en: Sawtooth architecture
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锯齿状架构
- en: '**Sawtooth** has a pluggable architecture, comprised of the Sawtooth core,
    the application-level and transaction families, and the consensus mechanism (typically
    PoET, but hypothetically pluggable with others). We will study them in detail
    in the following sections.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sawtooth** 具有可插拔的架构，由 Sawtooth 核心、应用级别和事务族以及共识机制（通常是 PoET，但理论上可以插拔其他机制）组成。我们将在以下章节中详细研究它们。'
- en: Transaction families
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事务族
- en: Because Sawtooth is meant to be a pluggable, enterprise-oriented architecture,
    the application layer is highly configurable. Each Sawtooth-based blockchain allows
    transactions to be made based on what are called **transaction families**. Transaction
    families determine what sorts of operations are permissible on the Sawtooth blockchain.
    For instance, it is possible to allow smart contracts, such as with Ethereum,
    using the **Seth** transaction family. Under Seth, all possible Ethereum-based
    contracts and Ethereum contract-based transactions would be permissible, along
    with all the possible mistakes and issues such freedom creates.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 Sawtooth 旨在成为可插拔的企业级架构，所以应用层是高度可配置的。每个基于 Sawtooth 的区块链都允许根据所谓的**事务族**进行交易。事务族确定了在
    Sawtooth 区块链上允许进行的操作类型。例如，可以使用 **Seth** 事务族允许智能合约，就像在以太坊中一样。在 Seth 下，所有可能的基于以太坊的合约和基于以太坊的合约交易都是可允许的，以及由此自由带来的所有可能的错误和问题。
- en: A Sawtooth-based blockchain can have multiple transaction families operating
    at once. In fact, this is common, as one of the transaction families that ships
    with Sawtooth is the settings family, which stores system-wide configuration settings
    directly on to the blockchain. In most cases, this transaction family and a few
    others, comprised of business use cases, will be operating in parallel. Furthermore,
    because multiple transaction families can be running at the same time, this means
    that business logic can be isolated and reused as an independent transaction family
    across multiple blockchain implementations.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Sawtooth 的区块链可以同时运行多个事务族。事实上，这是常见的，因为 Sawtooth 随附的其中一个事务族是设置族，它直接将系统范围的配置设置存储到区块链上。在大多数情况下，这个事务族和其他几个由业务用例组成的事务族将同时运行。此外，由于可以同时运行多个事务族，这意味着业务逻辑可以被隔离并在多个区块链实现中作为独立的事务族被重用。
- en: 'Because many businesses have only a few valid business rules and business outcomes,
    it is possible to customize the available operations on the blockchain through
    the creation of a custom transaction family. For instance, a shipping company
    may use Sawtooth to track the location of packages, and the only valid transactions
    might be new package, package accepted, package released, package in transit,
    update package location, and package delivered. By restricting the available transactions,
    the number of errors and mistakes can be reduced. Using the shipping company example,
    network participants could be trucking companies, warehouses, and so on. For a
    package to move between a truck and a warehouse, the two network participants
    would issue package released and package accepted transactions, respectively,
    in a batch on to the blockchain. This brings us to the next concept in Sawtooth:
    **Transaction Batches**.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于许多企业只有少数有效的业务规则和业务结果，因此可以通过创建自定义事务系列来定制区块链上的可用操作。例如，一个运输公司可以使用 Sawtooth 来跟踪包裹的位置，而唯一有效的事务可能是新包裹、包裹已接收、包裹已释放、包裹在运输中、更新包裹位置和包裹已交付。通过限制可用事务，可以减少错误和失误的数量。以运输公司为例，网络参与者可能是卡车公司、仓库等。为了使包裹在卡车和仓库之间移动，这两个网络参与者将分别在区块链上的一批中发行包裹已释放和包裹已接收的事务。这引出了
    Sawtooth 中的下一个概念：**事务批处理**。
- en: Transactions and batches
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事务和批处理
- en: 'In Sawtooth, transactions are always part of batches. A *batch* is a set of
    transactions that come together and either all succeed or all fail. If a transaction
    needs to process by itself, then it would be in a single batch containing only
    that one transaction. Using the shipping company example, the transactions package
    released and package accepted may be programmed so that they only succeed if their
    counter-transaction is part of the same batch, forcing a successful handoff or
    throwing an error. The following diagram shows the data structure of a transaction
    batch:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Sawtooth 中，事务始终是批处理的一部分。*批处理*是一组一起到达并且要么全部成功要么全部失败的事务。如果某个事务需要单独处理，则它将位于仅包含该事务的单个批处理中。使用运输公司的示例，事务包裹已释放和包裹已接收可以被编程为只有在它们的对应事务也在同一批处理中时才成功，从而强制执行成功的交接或抛出错误。下图显示了事务批处理的数据结构：
- en: '![](img/b311ee2e-5621-4686-b80b-4612cee15e85.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b311ee2e-5621-4686-b80b-4612cee15e85.png)'
- en: 'Transactions and batches in Sawtooth are abstracted at a high level so that
    they can be created by custom transaction families and by arbitrary programming
    languages. Because of this, it is possible to program smart contracts and transaction
    families in Java, Python, Go, C++, and JavaScript. To code in any language, there
    is another restriction on transactions: serialization, or the transition from
    an in-memory structure on a computer to a fixed binary that can be sent across
    the network. No matter what the language is, the approach to serialization must
    have the same output. In Sawtooth, all transactions and batches are encoded in
    a format called **protocol buffers**, a format created by Google internally, and
    released in 2008\. Protocol buffers are a solution to having a fixed and high-performance
    method of data-exchange between computers that is programming language and computer
    architecture independent.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Sawtooth 中的事务和批处理在高层次上进行抽象，以便可以由自定义事务系列和任意编程语言创建。由于这一点，可以使用 Java、Python、Go、C++
    和 JavaScript 编程智能合约和事务系列。对于任何语言，事务还有另一个限制：序列化，或者从计算机上的内存结构转换为可以通过网络发送的固定二进制。无论使用哪种语言，序列化方法的输出都必须相同。在
    Sawtooth 中，所有事务和批处理都以一种称为**协议缓冲区**的格式进行编码，这是 Google 在内部创建的一种格式，于 2008 年发布。协议缓冲区是在计算机之间具有固定且高性能的数据交换方法，不受编程语言和计算机体系结构的限制。
- en: The key pieces
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键要点
- en: 'Transaction families and transactions in Sawtooth require a few things to be
    created by developers. Consider the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Sawtooth 中，事务系列和事务需要开发人员创建一些东西。考虑以下内容：
- en: First, you need the protocol buffer definitions for each transaction the data
    model of what will be stored
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，您需要为将存储的每个事务的数据模型定义协议缓冲区。
- en: Secondly, you need a transaction handler that will handle incoming transactions
    that are part of the transaction family
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，您需要一个事务处理程序来处理属于事务系列的传入事务。
- en: Lastly, it is necessary to register the handler using the core SDK with the
    transaction processor
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，需要使用核心 SDK 将处理程序注册到事务处理器中。
- en: Sawtooth includes Python-based sources to serve as examples in both the settings
    and identity-based transaction families on GitHub. Next, we'll cover Hyperledger
    Fabric, another enterprise-oriented blockchain technology.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Sawtooth 包括基于 Python 的示例源，用于在 GitHub 上的设置和基于身份的交易族。接下来，我们将介绍另一种面向企业的区块链技术 Hyperledger
    Fabric。
- en: Hyperledger Fabric
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger Fabric
- en: Hyperledger Fabric, like Sawtooth, is designed to be an enterprise-oriented
    blockchain solution that is highly modular and customizable. Hyperledger Fabric
    is both private and permissioned. This means that, like Sawtooth, by default Hyperledger
    blockchains are not observable to the public at large and are not and will not
    have tokens that are tradeable on exchanges. Users of the blockchain must have
    validated identities and join the blockchain by using a **Membership Service Provider**
    (**MSP**). These MSPs are configured on the system, and there can be more than
    one, but all members must successfully be granted access by one or more MSPs.
    Fabric also has a number of special tools that make it particularly full-featured,
    which we will cover later.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric，像 Sawtooth 一样，旨在成为高度模块化和可定制的面向企业的区块链解决方案。Hyperledger Fabric
    既是私有的又是许可的。这意味着，默认情况下，Hyperledger 区块链不会对公众开放，也不会在交易所上有可交易的代币。区块链的用户必须具有经过验证的身份，并通过使用**成员服务提供商**（**MSP**）加入区块链。这些
    MSP 在系统上配置，并且可以有多个，但所有成员必须通过一个或多个 MSP 成功获得访问权限。Fabric 还有许多特殊工具，使其功能特别齐全，我们稍后会进行介绍。
- en: Architecture choices and features
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构选择和特性
- en: Hyperledger Fabric was designed around a few key features and use cases that
    were seen as critical for enterprise users.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric 是围绕着几个关键特性和用例设计的，被视为企业用户至关重要。
- en: At the core is the ledger itself. The ledger is a set of blocks, and each block
    holds a set of transactions. A transaction is anything that updates the state
    of the blockchain. Transactions, in turn, are performed by smart contract code
    installed on to the blockchain (called **Chaincode**). Let's look at how blocks
    and transactions are formed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在核心是账本本身。账本是一组区块，每个区块包含一组交易。交易是更新区块链状态的任何事物。交易是通过安装在区块链上的智能合约代码（称为 **链码**）执行的。让我们看看区块和交易是如何形成的。
- en: 'Each block is ordered in sequence, and inside each block is a set of transactions.
    Those transactions are also stored as happening in a specific sequence. Unlike
    other blockchains, the creation of the transaction and the sequence it is eventually
    given are not necessarily performed at the same time or on the same computer.
    This is because the ordering of transactions and the execution of transactions
    are separated. In Hyperledger Fabric, computers being used to operate the blockchain
    can run in three different modes (node types); these are as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 每个区块按顺序排序，每个区块内部都包含一组交易。这些交易也按照特定顺序存储。与其他区块链不同，交易的创建和最终给予的顺序不一定在同一时间或在同一台计算机上执行。这是因为交易的排序和执行是分开的。在
    Hyperledger Fabric 中，用于操作区块链的计算机可以运行三种不同模式的节点；它们如下：
- en: '**Client**: A client acts on behalf of users of the blockchain and submits
    actions and events to the network as part of an application.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Client**：客户端代表区块链用户提交操作和事件到网络，作为应用程序的一部分。'
- en: '**Peer**: Peers process the incoming transactions for validating and handle
    updating state changes as a result of transactions and chain-code execution. Once
    they have executed a transaction, they broadcast the result to the network so
    that the transaction can be handled by an orderer (see the next role).'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Peer**：对等节点处理传入的交易以进行验证，并处理由于交易和链代码执行而引起的状态更改。一旦他们执行了交易，他们就会将结果广播给网络，以便交易可以由一个排序者处理（参见下一个角色）。'
- en: '**Orderer**: While peer nodes execute the transactions, orderer nodes take
    a look at all the executed transactions and decide on the final order in which
    they are considered to have occurred in the blockchain. The ordering service nodes
    decide the final order of events, and thus decide the final set of events that
    will be written on to the next block of the blockchain.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Orderer**：虽然对等节点执行交易，但排序节点查看所有已执行的交易，并决定它们在区块链中被视为发生的最终顺序。排序服务节点决定事件的最终排序，从而决定将写入下一个区块的事件的最终集合。'
- en: 'It is important to note that a single computer can act as up to all three of
    these node types on a Fabric blockchain, but this is not necessary. While it is
    possible for the same computer on a Hyperledger network to both execute transactions
    and order their sequence, Hyperledger is able to scale more by providing these
    as distinct services. To illustrate, look at the following diagram (from the Hyperledger
    documentation):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，单个计算机可以在 Fabric 区块链上扮演这三种节点类型中的任意一种，但这并非必须。在 Hyperledger 网络上，同一台计算机可以执行交易并排序它们的顺序，但
    Hyperledger 可以通过提供这些作为不同服务来实现更好的扩展性。为了说明这一点，请看下面的图表（摘自 Hyperledger 文档）：
- en: '![](img/e5575d17-5957-4f77-aedd-f0b469be8777.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5575d17-5957-4f77-aedd-f0b469be8777.png)'
- en: As you can see, incoming transaction first go to peers, who execute transactions
    using chaincode/smart contracts and then broadcast successful transactions to
    the ordering service. Once accepted, the ordering service decides on a final order
    of transactions, and the resulting transactions sets are re-transmitted to peer
    nodes, which write the final block on to the chain.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，进入的交易首先发送到对等体，对等体使用链码/智能合约执行交易，然后将成功的交易广播到排序服务。一旦被接受，排序服务决定交易的最终顺序，然后将结果交易集重新传输给对等节点，对等节点将最终区块写入链上。
- en: Organizational focus
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织重点
- en: 'As an enterprise-oriented system, Fabric distinguishes between peers and orderers
    (nodes on a blockchain network) and the organization that owns them. Fabric is
    meant to create networks between organizations, and the nodes running the blockchain
    do so as agents of that organization. In this way, each node and its permissions
    are related to the organization it helps represent. Here is another diagram from
    Hyperledger:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 作为面向企业的系统，Fabric 在对等体和排序者（区块链网络上的节点）以及拥有它们的组织之间进行了区分。Fabric 旨在在组织之间创建网络，运行区块链的节点代表该组织。通过这种方式，每个节点及其权限都与其代表的组织相关联。以下是来自
    Hyperledger 的另一个图表：
- en: '![](img/a47f3b3a-fff2-49c8-ba59-6427ffd878e0.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a47f3b3a-fff2-49c8-ba59-6427ffd878e0.png)'
- en: 'As you can see, each network node operates the blockchain network on behalf
    of the contributing organization. This is different than networks such as Ethereum
    and Bitcoin, where the network is created by a set of computers that contribute
    resources to the network independently, or at least are perceived by the network
    as doing so independently, no matter who owns them. In Hyperledger Fabric, it
    is the organizations that create the shared ledger that contribute to the network
    by contributing resources in the form of peers and ordering nodes. The distinction
    is subtle but crucial. In most public networks, the idea is to allow computers
    to coordinate, but in Fabric the idea is to allow companies to coordinate. Owning
    organizations provides each of their peers a signed digital certificate proving
    their membership of a certain organization. This certificate then allows each
    node to connect to the network through an MSP, granting access to network resources.
    The organizations versus private computers focus brings us to another enterprise-oriented
    feature of Hyperledger Fabric, one that is necessary for a number of corporate
    requirements: **Private Channels**.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，每个网络节点代表贡献组织运行区块链网络。这与以太坊和比特币等网络不同，在这些网络中，网络由一组独立贡献资源的计算机创建，或者至少在网络看来是独立贡献资源的计算机创建，无论谁拥有它们。在
    Hyperledger Fabric 中，是组织创建了共享账本，并通过提供对等体和排序节点的资源来为网络做出贡献。这种区别微妙但至关重要。在大多数公共网络中，想法是让计算机协调，但在
    Fabric 中，想法是让公司协调。拥有组织为每个对等体提供了签名的数字证书，证明其是某个组织的成员。然后，该证书允许每个节点通过 MSP 连接到网络，从而获得对网络资源的访问权限。组织与私有计算机的区别将我们带到了
    Hyperledger Fabric 的另一个面向企业的特性，这是满足许多公司要求所必需的一个特性：**私有通道**。
- en: Private channels
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 私有通道
- en: Hyperledger Fabric has a critical and unique functionality called *private channels*.
    A private channel allows a subset of members on a Fabric-based blockchain to create
    a new blockchain that is observable and intractable only for them. This means
    that, while Fabric is already private and permissioned, members of that private
    blockchain can create a smaller, yet more exclusive, chain to trade information
    that cannot be traded across the full membership network. As a result, Fabric
    is able to support critical use cases (such as legal communications) that would
    be impossible or inappropriate to broadcast, even on a relatively exclusive network.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric具有一个关键且独特的功能，称为*私有渠道*。私有渠道允许基于Fabric的区块链上的成员子集创建一个新的区块链，该区块链只对他们可见且可互操作。这意味着，虽然Fabric已经是私有且有权限的，但私有区块链的成员可以创建一个更小、更独特的链来交换信息，这些信息在整个成员网络上无法交换。因此，Fabric能够支持关键的用例（例如法律通信），即使在相对独特的网络上也无法广播。
- en: For instance, if Hyperledger Fabric were used to set up a logistics network,
    the primary blockchain could be used for the tracking of packages, but pricing
    bids could be done on private channels. The participants of the network would
    be a number of shipping providers, materials providers, and a set of buyers. A
    buyer could issue to the blockchain a notice that they were accepting bids for
    a transfer of some supplies, and they could then create private channels between
    themselves and all transporters and suppliers. The suppliers and shipping companies
    could give the buyer time and cost prices, without making that information public
    to their competitors. While private, all of these exchanges would be encoded on
    to the blockchain for record keeping, legal compliance, and so on. Moreover, if
    corporate policy were something like taking the second-lowest bid, the entire
    process could be automateable through smart contracts.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果Hyperledger Fabric被用于建立一个物流网络，主要的区块链可以用于跟踪包裹，但定价竞标可以在私有渠道上进行。网络的参与者将包括许多运输提供商、材料提供商和一组买家。买家可以向区块链发出通知，表示他们接受竞标进行某些物资的转移，然后他们可以在自己和所有运输商和供应商之间创建私有渠道。供应商和运输公司可以向买家提供时间和成本价格，而不将这些信息公开给竞争对手。虽然是私有的，但所有这些交易都会被编码到区块链上进行记录、法律遵从等。此外，如果公司政策是类似于接受第二低价的竞标，整个过程可以通过智能合约自动化。
- en: Assets
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资产
- en: In Hyperledger Fabric, assets are defined as anything that can be given a value.
    While this could be used to exchange different fiat currencies, an asset could
    be designed to denote something abstract, such as intellectual property, or something
    more tangible, such as a shipment of fresh fish.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Hyperledger Fabric中，资产被定义为可以赋予价值的任何东西。虽然这可以用来交换不同的法定货币，但资产也可以被设计为表示一些抽象的东西，比如知识产权，或者更具体的东西，比如一批新鲜鱼的运输。
- en: In Fabric, assets are processed internally as simple key-value pairs, with their
    state stored on the ledger and modifiable via the chaincode. Assets in Hyperledger
    can fulfill all the duties performed in Ethereum by ERC-20 and ERC-721 tokens,
    and beyond. Anything that can be described in a token format can be stored as
    an asset in Hyperledger Fabric.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在Fabric中，资产在内部被处理为简单的键值对，其状态存储在分类账上，并可通过链码进行修改。Hyperledger中的资产可以完成以太坊中由ERC-20和ERC-721代币执行的所有职责，甚至更多。任何可以以代币格式描述的东西都可以作为资产存储在Hyperledger
    Fabric中。
- en: Smart contracts
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能合约
- en: In Hyperledger Fabric, **Smart Contracts** are called **chaincode**. Unlike
    Ethereum, chaincode is not embedded directly inside the ledger itself. Instead,
    chaincode is installed on each peer node and interacts with the ledger to read
    and update state information about the assets the chaincode controls. Because
    the chaincode is signed and approved by all peers, and because each peer that
    uses a piece of chaincode must validate any state changes on the ledger, this
    system still allows distributed and trusted consensus, using smart contracts.
    To provide consistency, chaincode itself runs in an isolated Docker container.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在Hyperledger Fabric中，**智能合约**被称为**链码**。与以太坊不同，链码不直接嵌入在分类账中。相反，链码安装在每个对等节点上，并与分类账交互，读取和更新链码控制的资产的状态信息。因为链码被所有对等方签名和批准，并且因为使用链码的每个对等方必须验证分类账上的任何状态变化，所以这个系统仍然允许分布式和可信的共识，使用智能合约。为了提供一致性，链码本身在隔离的Docker容器中运行。
- en: Because of the modular nature of both the distributed ledger and the chaincode,
    multiple programming languages can be used to develop smart contracts; however,
    currently, the supported options are limited. There are full-featured SDK packages
    only for Go and Node.js, with eventual plans to add Java.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于分布式分类帐和链代码的模块化性质，可以使用多种编程语言来开发智能合约；但是，目前支持的选项有限。只有Go和Node.js有全功能的SDK包，但最终计划添加Java支持。
- en: Advantages of Fabric
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fabric的优势
- en: Fabric is one of the most popular of the Hyperledger projects for good reason.
    It's highly modular, designed for coordination across companies, and the private
    channel feature enables secure functionality that's impossible on public chains,
    and even most private ones. Moreover, Hyperledger Fabric has **Composer**—a visual
    tool for architecting blockchain applications. We'll discuss Composer later in
    the section on Hyperledger tools.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric是最受欢迎的Hyperledger项目之一，原因很多。它高度模块化，设计用于跨公司协调，并且私有通道功能使得在公共链上、甚至大多数私有链上都不可能实现的安全功能成为可能。此外，Hyperledger
    Fabric还有**Composer**—一个用于构建区块链应用程序的可视化工具。我们将在后面的Hyperledger工具部分讨论Composer。
- en: Next, we'll cover **Iroha**, a Hyperledger project aimed at bringing blockchain
    to mobile devices.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍**Iroha**，这是一个旨在将区块链带入移动设备的Hyperledger项目。
- en: Hyperledger Iroha
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger Iroha
- en: '**Hyperledger Iroha** is a project written in C++ and contributed to by Sorimitsu.
    The goals of the project were to provide a portable C++ based blockchain implementation
    that could be used in mobile devices. Both iOS and Android operating systems,
    along with small computers such as Raspberry Pi, are all capable of efficiently
    running tightly written C++ code efficiently. To make things even easier, Iroha
    provides iOS, Android, and JavaScript libraries for developers.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hyperledger Iroha**是一个由Soramitsu贡献的用C++编写的项目。该项目的目标是提供一个基于可移植C++的区块链实现，可用于移动设备。iOS和Android操作系统以及诸如树莓派等小型计算机都能够高效地运行紧密编写的C++代码。为了使事情更加简单，Iroha为开发人员提供了iOS、Android和JavaScript库。'
- en: One major difference from Ethereum, in particular, is that Hyperledger Iroha
    allows users to perform common functions, such as creating and transferring digital
    assets, by using prebuilt commands that are in the system. This negates the need
    to write cumbersome and hard-to-test smart contracts for the most common functionalities,
    enabling developers to complete simple tasks faster and with less risk. For instance,
    to create a new token type on Iroha, it takes just a single command—`crt_ast`.
    To make things even easier, Iroha has a command-line interface that will guide
    a new user through creating the asset, without writing code at all.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 与以太坊相比，Hyperledger Iroha的一个主要区别在于允许用户通过使用系统中预先构建的命令执行常见功能，例如创建和转移数字资产。这消除了编写繁琐且难以测试的智能合约以完成最常见功能的需求，使开发人员能够更快地完成简单任务并减少风险。例如，在Iroha上创建新的令牌类型只需一个命令—`crt_ast`。为了使事情更加简单，Iroha还有一个命令行界面，将指导新用户在完全不编写代码的情况下创建资产。
- en: If the goals of Sawtooth and Fabric are completeness, Iroha is oriented more
    towards ease of use and device compatibility.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Sawtooth和Fabric的目标是完整性，那么Iroha更倾向于易用性和设备兼容性。
- en: Hyperledger Indy
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger Indy
- en: One of the more common use cases for blockchain technology is identity verification
    and authorization. You have probably experienced the issues around the web, where
    you either need to remember many usernames and passwords to confirm your identity
    to another provider, such as Google or Facebook. The problem here is that you
    must trust Google, Facebook, or other providers to manage your identity and keep
    it safe. This creates a single point of failure and allows a centralized authority
    to control whose identities are valid and what rights they have. This ecosystem
    is an obvious target for disruption and decentralization.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链技术的更常见的用例之一是身份验证和授权。您可能已经在网络上遇到了问题，您需要记住许多用户名和密码来向其他提供商（例如Google或Facebook）确认您的身份。这里的问题是您必须信任Google、Facebook或其他提供商来管理您的身份并保护它。这会造成单点故障，并允许集中式机构控制哪些身份是有效的以及他们拥有什么权限。这个生态系统是显而易见的分散和去中心化的目标。
- en: '**Hyperledger Indy** is a blockchain project built around decentralized, self-declared
    identity. The goal of Indy is to provide tools and libraries for creating digital
    identities that can be managed on a blockchain and made interoperable with other
    applications and use cases that require identity verification.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hyperledger Indy** 是围绕分散、自我声明的身份构建的区块链项目。Indy 的目标是提供用于创建可在区块链上管理并与其他应用程序和需要身份验证的用例互操作的数字身份的工具和库。'
- en: While Fabric, Sawtooth, and Iroha all have some level of identity mechanism
    built in, Indy is specifically oriented around identity management and for use
    by applications that may not run on a blockchain. Thus, Indy could be used to
    provide identity services to web applications, company resources, and so on. Existing
    companies include Sovrin (who donated the original Indy codebase) and Every.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Fabric、Sawtooth 和 Iroha 都内置了一定程度的身份机制，但 Indy 是专门围绕身份管理而设计的，并且可供不运行在区块链上的应用程序使用。因此，Indy
    可用于为 Web 应用程序、公司资源等提供身份服务。现有公司包括 Sovrin（捐赠了原始 Indy 代码库）和 Every。
- en: Tools in Hyperledger
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger 中的工具
- en: An often overlooked aspect of any application is the need for helpful tools
    to manage the life cycle of that application. Tools, such as software to ease
    deployment, debugging, and design, can make a tremendous difference in the ease
    of use of a system, for developers and users alike. Most public blockchains are
    severely hampered by the lack of high-quality tools and support. The Hyperledger
    ecosystem, however, continues to invest in building excellent support tools.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 任何应用程序常被忽视的一个方面是需要有助于管理该应用程序生命周期的有用工具。诸如用于简化部署、调试和设计的软件工具可以极大地提高系统的易用性，对开发人员和用户都是如此。大多数公共区块链严重受限于缺乏高质量的工具和支持。然而，Hyperledger
    生态系统继续投资于构建优秀的支持工具。
- en: Hyperledger Caliper
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger Caliper
- en: One of the common needs for any system is benchmarking. **Hyperledger Caliper**
    is a blockchain-oriented benchmarking tool, designed to help blockchain architects
    ensure that the system can perform fast enough to meet the needs of the hosting
    organizations. Using a set of pre-defined, common use cases, Hyperledger Caliper
    will report an assortment of critical performance measurements, such as resource
    usage, **Transactions Per Second** (**TPS**), transaction latency, and so on.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 任何系统的常见需求之一是基准测试。**Hyperledger Caliper** 是一个面向区块链的基准测试工具，旨在帮助区块链架构师确保系统性能足够快，以满足托管组织的需求。使用一组预定义的常见用例，Hyperledger
    Caliper 将报告一系列关键性能指标，例如资源使用情况、**每秒交易数**（**TPS**）、交易延迟等。
- en: Using Caliper, a team working on blockchain applications can take continuous
    measurements as they build out smart contracts and transaction logic and use those
    measurements to monitor performance changes. Caliper is compatible with Sawtooth,
    Indy, and Fabric blockchain systems.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Caliper，一个致力于区块链应用程序的团队可以在构建智能合约和交易逻辑时持续进行测量，并使用这些测量结果监控性能变化。Caliper 可与 Sawtooth、Indy
    和 Fabric 区块链系统兼容。
- en: Hyperledger Composer
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger Composer
- en: '**Hyperledger Composer** is a design tool for building smart contracts and
    business applications on the blockchain. It is designed for rapid prototyping
    of chaincode and asset data models for use with Hyperledger Fabric. As a Fabric-specific
    tool (so far), it is primarily designed around helping with Hyperledger Fabric
    specific concepts, such as assets, identity management, transactions, and the
    resultant chaincode used to power the business rules between all these items.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hyperledger Composer** 是一个用于在区块链上构建智能合约和业务应用程序的设计工具。它旨在快速原型化用于 Hyperledger
    Fabric 的链码和资产数据模型。作为一个 Fabric 特定的工具（到目前为止），它主要设计用于帮助理解 Hyperledger Fabric 特定的概念，例如资产、身份管理、交易以及用于驱动所有这些项之间业务规则的链码。'
- en: It is not designed as a "fire-and-forget" tool, where someone can build an entire
    ecosystem from scratch to production, rather it is designed for rapid visual prototyping
    to get testable applications up and running quickly, with finer details iterated
    directly in the codebase. IBM hosts a demo online at [https://composer-playground.mybluemix.net/editor](https://composer-playground.mybluemix.net/editor).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 它不是设计成一个“建立完整生态系统并投入生产”的工具，而是设计成用于快速可视化原型制作，以便快速启动可测试的应用程序，并在代码库中直接迭代细节。IBM
    在 [https://composer-playground.mybluemix.net/editor](https://composer-playground.mybluemix.net/editor)
    上提供在线演示。
- en: The primary users of Composer will be blockchain developers (especially new
    developers) and some technical business users. It sits well as part of an agile
    process to developing blockchain applications, allowing developers, network administrators,
    and technical business users to visualize the network and the code operating on
    it.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Composer 的主要用户将是区块链开发人员（特别是新开发人员）和一些技术业务用户。它作为开发区块链应用程序的敏捷流程的一部分，可以让开发人员、网络管理员和技术业务用户可视化网络和在其上运行的代码。
- en: Hyperledger Cello
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超级账本 Cello
- en: If Composer is used to assist with building aspects of a Fabric-based blockchain,
    then **Cello** is a tool to assist with the deployment of that blockchain to various
    servers and cloud services. Cello can be used to manage the blockchain infrastructure
    or launch new blockchains in a blockchain-as-a-service approach. Common life cycle
    and deployment tasks include starting, stopping, and deleting a blockchain, deploying
    new nodes to an existing blockchain, and abstracting the blockchain operation
    so that it can run on local machines, in the cloud, in a virtual machine, and
    so on. Cello also allows monitoring and analytics.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Composer 用于辅助构建基于 Fabric 的区块链的某些方面，那么 **Cello** 就是用于将该区块链部署到各种服务器和云服务的工具。Cello
    可用于管理区块链基础设施或以区块链即服务的方式启动新的区块链。常见的生命周期和部署任务包括启动、停止和删除区块链，将新节点部署到现有区块链中，并将区块链操作抽象化，以便在本地机器、云中、虚拟机中等运行。Cello
    还允许监视和分析。
- en: Cello is primarily a tool for what is called **DevOps**, or the connection between
    development teams and production operations. It is primarily aimed at the Hyperledger
    Fabric project, but support for Sawtooth and Iroha is intended for future development.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**Cello** 主要是用于所谓的 **DevOps**，或者说是开发团队和生产运营之间的连接工具。它主要针对 Hyperledger Fabric
    项目，但是未来的发展也将支持 Sawtooth 和 Iroha。'
- en: Hyperledger Explorer
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超级账本资源管理器
- en: '**Hyperledger Explorer** is a blockchain module and one of the Hyperledger
    projects hosted by the Linux Foundation. Designed to create a user-friendly web
    application, Hyperledger Explorer can view, invoke, deploy, or query blocks, transactions,
    and associated data, network information (name, status, list of nodes), chain
    codes and transaction families, as well as any other relevant information stored
    in the ledger. Hyperledger Explorer was initially contributed by IBM, Intel and
    DTCC.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**超级账本资源管理器**是一个区块链模块，是由 Linux 基金会托管的超级账本项目之一。设计为创建用户友好的 Web 应用程序，超级账本资源管理器可以查看、调用、部署或查询区块、交易和相关数据，网络信息（名称、状态、节点列表）、链码和交易系列，以及存储在分类帐中的任何其他相关信息。超级账本资源管理器最初由
    IBM、Intel 和 DTCC 贡献。'
- en: Hyperledger Quilt
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超级账本 Quilt
- en: There are times when it makes sense for multiple blockchains to be able to communicate.
    This is where **Hyperledger Quilt** comes in. Quilt is a tool that facilitates
    cross-Blockchain communication by implementing an **Interledger protocol** (**ILP**).
    The ILP is a generic specification available to all blockchains to allow cross-ledger
    communication, originally created by ripple labs. With ILP, two ledgers (they
    do not have to be blockchains) can coordinate, to exchange values from one ledger
    to the other.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，多个区块链能够进行通信是有意义的。这就是 **超级账本 Quilt** 发挥作用的地方。Quilt 是一个通过实现 **Interledger
    协议**（**ILP**）来促进跨区块链通信的工具。ILP 是一个通用规范，可供所有区块链使用，以允许跨分类帐通信，最初由 Ripple Labs 创建。借助
    ILP，两个分类帐（它们不必是区块链）可以协调，从而将一个分类帐中的值交换到另一个分类帐中。
- en: 'ILP is a protocol that can be implemented using any programming language or
    technology, as long as it conforms to the standard. Because of this, it can be
    used to join multiple completely independent ledgers, even ones with radically
    different architecture. These ledgers do not need to be blockchains, but can be
    any system of accounting. In ILP, cross-ledger communication occurs primarily
    through actors called *connectors*. See the following diagram from [interledger.org](https://interledger.org/):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ILP 是一个协议，可以使用任何编程语言或技术来实现，只要符合标准即可。由于这个原因，它可以用于连接多个完全独立的分类帐，甚至是具有完全不同架构的分类帐。这些分类帐不需要是区块链，可以是任何会计系统。在
    ILP 中，跨分类帐通信主要通过称为 *连接器* 的角色来进行。参见来自 [interledger.org](https://interledger.org/)
    的下图：
- en: '![](img/eaaf60ac-1946-47b8-8669-df3ffae6af33.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eaaf60ac-1946-47b8-8669-df3ffae6af33.png)'
- en: The ILP bridges ledgers with a set of connectors. A connector is a system that
    provides the service of forwarding interledger communications towards their destination,
    similar to how packets are forwarded across the internet—peer to peer. ILP communication
    packets are sent from senders to a series of connectors that finally land at receivers.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: ILP 通过一组连接器连接账本。连接器是提供向其目的地转发跨账本通信服务的系统，类似于互联网上的数据包是如何点对点转发的。ILP的通信数据包从发送者发送到一系列连接器，最终到达接收者。
- en: The connectors are trusted participants in this sequence, and the sender and
    all intermediate connectors must explicitly trust one another. Unlike other blockchain-oriented
    technology, ILP does not involve trustless exchange. However, the sender and each
    connector need trust only their nearest links in the chain for it to work.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 连接器是此序列中值得信任的参与者，发送者和所有中间连接器必须明确地互相信任。与其他面向区块链的技术不同，ILP 不涉及无需信任的交换。但是，发送者和每个连接器只需信任它们链中最近的链接才能正常工作。
- en: Quilt is the implementation of the ILP that has been donated to the Hyperledger
    project, on behalf of ripple labs, Everis, and NTT DATA. These organizations have
    also sponsored ongoing dedicated personnel to help improve the Quilt codebase,
    which is primarily in Java.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Quilt 是 ILP 的实现，已经代表 Ripple Labs、Everis 和 NTT DATA 捐赠给了 Hyperledger 项目。这些组织还赞助了持续的专职人员，帮助改进
    Quilt 代码库，主要使用 Java 语言。
- en: Relationships between the tools
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具之间的关系
- en: 'The distinctions between Fabric, Cello, Composer, Explorer, and Caliper can
    be described as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric、Cello、Composer、Explorer 和 Caliper 之间的区别可以描述如下：
- en: Fabric is the application itself, and where the business logic will finally
    reside
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fabric 是应用程序本身，也是业务逻辑最终所在地
- en: Composer is a tool to help build this logic and the final chaincode
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Composer 是一个帮助构建此逻辑和最终链码的工具
- en: 'Both Fabric and Composer are going to be principally involved in the development
    phase of a blockchain project, followed shortly after by Caliper for performance
    testing:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric 和 Composer 主要参与了区块链项目的开发阶段，紧随其后的是 Caliper 用于性能测试：
- en: Cello and Explorer are tools dealing more with the operations side of a project.
    Cello is used by DevOps teams to deploy and extend blockchain applications across
    servers and virtual machines
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cello 和 Explorer 更多地涉及项目的运营方面。Cello由DevOps团队用于在服务器和虚拟机上部署和扩展区块链应用程序
- en: Explorer is a monitoring tool to inspect what is going on across different ledgers
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Explorer 是一个监控工具，用于检查不同账本之间的运行情况
- en: Finally, Hyperledger Quilt can be used to connect different ledgers and blockchains
    together. For instance, Quilt could be used to communicate from a Fabric-based
    system to the public Ethereum network, or to the ACH banking system, or all of
    the above.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Hyperledger Quilt 可以用于连接不同的账本和区块链。例如，Quilt 可以用于从基于 Fabric 的系统通信到公共以太坊网络，或者到
    ACH 银行系统，或者以上所有情况。
- en: Thus, the Hyperledger project has tools for end-to-end creation, operation,
    and interoperability of blockchain-based application ecosystems.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Hyperledger 项目具有用于端到端创建、运行和区块链应用生态系统互操作性的工具。
- en: Which Hyperledger project should you use?
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你应该使用哪个 Hyperledger 项目？
- en: Given the numerous sub-projects inside Hyperledger that are all focused on business
    use cases, it would not be surprising if there was some confusion about which
    to use. This is understandable, but the good news is that for most cases the proper
    project to build on is clear.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Hyperledger 内部存在许多专注于业务用例的子项目，如果存在一些混淆使用的情况也就不足为奇了。这是可以理解的，但好消息是，对于大多数情况，选择适当的项目是清晰的。
- en: By far the most popular and well-documented framework is Hyperledger Fabric.
    Fabric also has blockchain-as-a-service support from Amazon and Microsoft. In
    addition, Composer, Cello, and Caliper tools all work with the latest versions
    of Fabric. For the vast majority of projects, Hyperledger Fabric will be the project
    of most interest.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，最受欢迎和文档最全面的框架是 Hyperledger Fabric。Fabric 还得到了亚马逊和微软的区块链即服务的支持。此外，Composer、Cello
    和 Caliper 工具都与最新版本的 Fabric 兼容。对于绝大多数项目来说，Hyperledger Fabric 将是最感兴趣的项目。
- en: The second most-obvious choice is Sawtooth. For supply chain solutions, Sawtooth
    already has a reference implementation. In addition to this, Sawtooth has better
    support for writing smart contracts in multiple languages, whereas Hyperledger
    has support only for Go and JavaScript. In addition to this, Sawtooth core is
    written in Python. Python is a very popular language in data science, a field
    that is regularly paired with blockchain technology.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个最明显的选择是 Sawtooth。对于供应链解决方案，Sawtooth 已经有了一个参考实现。除此之外，Sawtooth 更好地支持用多种语言编写智能合约，而
    Hyperledger 仅支持 Go 和 JavaScript。此外，Sawtooth 核心是用 Python 编写的。Python 是数据科学中非常流行的语言，而数据科学经常与区块链技术搭配使用。
- en: The final choices are Burrow, which would make a good match for technologies
    migrating from Ethereum, or needing to interface with the public Ethereum network,
    and Iroha, which would be a better match for projects that need to run a blockchain
    across mobile devices or other small machines.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的选择是 Burrow，它将与从以太坊迁移的技术或需要与公共以太坊网络进行接口的项目很匹配，以及 Iroha，它将与需要在移动设备或其他小型机器上运行区块链的项目更匹配。
- en: Using Hyperledger
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Hyperledger
- en: Like much blockchain technology, the Hyperledger ecosystem is relatively new,
    and many projects have not even hit a full 1.0 release yet. While there is a large
    amount of development activity and multiple working systems already in production
    use, the system as a whole is fractured. For instance, Sawtooth is written in
    Python, Fabric in Go, Quilt in Java, and so on. Even staying inside the Hyperledger
    family, it would be difficult to use a homogeneous set of technologies for end-to-end
    implementations.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 就像许多区块链技术一样，Hyperledger 生态系统相对较新，许多项目甚至还没有达到完整的 1.0 版本。虽然有大量的开发活动和多个已经在生产中使用的工作系统，但整个系统还是分裂的。例如，Sawtooth
    是用 Python 编写的，Fabric 是用 Go，Quilt 是用 Java，等等。即使在 Hyperledger 家族内部，要想使用一组同质的技术进行端到端实现也是困难的。
- en: Moreover, Hyperledger's focus on private networks is a problem for the projects
    that may wish to have a public component. One of the appeals of blockchain technology
    is transparency. A project that seeks maximum transparency through public usage
    of their technology may need to look elsewhere or find a way to bridge between
    Hyperledger and public networks—possibly by using Quilt and ILP.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Hyperledger 对私有网络的关注是那些希望拥有公共组件的项目的一个问题。区块链技术的吸引力之一是透明度。一个通过公共使用其技术寻求最大透明度的项目可能需要寻找其他地方或找到一种在
    Hyperledger 和公共网络之间建立桥梁的方式——可能是使用 Quilt 和 ILP。
- en: Similarly, projects looking to raise funds through an ICO should probably look
    elsewhere. Few projects have tried to use Hyperledger as part of an ICO, and,
    as far as we know, none of those have actually succeeded in fundraising. Hyperledger
    remains oriented strongly toward private networks—where it has succeeded tremendously.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，通过 ICO 筹集资金的项目可能应该寻找其他方案。很少有项目尝试将 Hyperledger 作为 ICO 的一部分，据我们所知，其中没有一个项目实际上成功筹款。Hyperledger
    仍然主要面向私有网络，而在这方面取得了巨大成功。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Now you have a good idea of the different subprojects that make up Hyperledger
    and an awareness of the tooling you can use to build Hyperledger-based projects.
    Hyperledger is a set of technologies for building private blockchain networks
    for enterprises, versus the public and tradeable networks, such as Ethereum and
    Bitcoin. The Hyperledger family is made of six projects and a set of support tools,
    all with subtly different focuses and advantages to suit different projects.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你对构成 Hyperledger 的不同子项目有了一个很好的了解，并且意识到了可以用来构建基于 Hyperledger 项目的工具。Hyperledger
    是一组用于构建企业私有区块链网络的技术，与以太坊和比特币等公开可交易的网络相对。Hyperledger 家族由六个项目和一套支持工具组成，它们都有略微不同的关注点和优势，以适应不同的项目。
- en: Over time, the different projects are expected to become more consistent and
    interoperable. For instance, Hyperledger Burrow and Hyperledger Sawtooth have
    already cross-pollinated with the Seth transaction family, which allows Sawtooth
    to run Ethereum smart contracts. It is expected that tools such as Cello and Composer
    will be extended to support additional Hyperledger projects in time, leading to
    an increasingly robust ecosystem.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，预计不同的项目将变得更加一致和互操作。例如，Hyperledger Burrow 和 Hyperledger Sawtooth 已经与
    Seth 交易族跨界交流，这使 Sawtooth 能够运行以太坊智能合约。预计像 Cello 和 Composer 这样的工具将在适当的时候被扩展以支持更多的
    Hyperledger 项目，从而使生态系统变得越来越健壮。
- en: Next, we will discuss Ethereum in depth. Ethereum is a public blockchain network
    and the first and most popular of the public networks to support fully-programmable
    smart contracts.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将深入讨论以太坊。以太坊是一个公共区块链网络，也是第一个和最受欢迎的支持完全可编程智能合约的公共网络。
