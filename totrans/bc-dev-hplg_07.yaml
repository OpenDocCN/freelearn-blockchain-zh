- en: A Business Network Example
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个业务网络示例
- en: In this chapter, we are going to bring together all the concepts we've discussed
    with a sample business network, involving a real-world example. Specifically,
    we're going to do a detailed walk-through of the Hyperledger Composer letter of
    credit sample, so that you can understand how participants, assets, transactions,
    and events are realized in code. We'll show how the business network is used,
    analyzed, defined, and how that definition is used to generate APIs, test them,
    and integrate them into a sample application. This is going to be a comprehensive
    tour that will get you from concepts right into implementation. We're going to
    use the letter of credit sample because it represents a well-known process that's
    often discussed in relation to blockchain. Let's discuss the process first, and
    then see why it's used as the poster child example.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一个真实的示例业务网络，结合我们讨论过的所有概念。具体来说，我们将详细介绍 Hyperledger Composer 信用证示例，以便您了解参与者、资产、交易和事件如何在代码中实现。我们将展示业务网络如何被使用、分析、定义，以及如何使用该定义生成
    API、测试它们，并将它们集成到示例应用程序中。这将是一个全面的导览，将让您从概念直接进入实施。我们将使用信用证示例，因为它代表了一个经常在区块链相关讨论中被讨论的众所周知的过程。让我们先讨论一下这个流程，然后看看为什么它被用作宣传样例。
- en: The letter of credit sample
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信用证示例
- en: And so we get to our sample. Alice, the owner of QuickFix IT in the Italy, wishes
    to buy computers from Bob, who runs Conga computers in the USA. Alice is going
    to apply for a letter or credit from her bank, Dinero Bank, which will be accepted
    by Bob's bank, Eastwood Banks, as a form of payment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们来到了我们的示例。Alice，意大利 QuickFix IT 的所有者，希望从在美国经营 Conga Computers 的 Bob 那里购买计算机。Alice
    将从她的银行 Dinero Bank 申请信用证，这将被 Bob 的银行 Eastwood Banks 接受作为支付形式。
- en: We're going to try out the whole process using the letter of credit sample application
    found at [https://github.com/hyperledger/composer-sample-applications](https://github.com/hyperledger/composer-sample-applications).
    This repository contains a number of sample applications of business networks–we're
    going to use the letters of credit sample.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在[https://github.com/hyperledger/composer-sample-applications](https://github.com/hyperledger/composer-sample-applications)找到的信用证示例应用程序尝试整个流程。该存储库包含多个业务网络的示例应用程序-我们将使用信用证示例。
- en: Installing the sample
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装示例
- en: 'If you''ve followed the steps in [*Chapter 3*](5a4b5cba-356c-4997-b816-0676a2c503c2.xhtml),
    *Setting the Stage with a Business Scenario*, you should have all of the prerequisites
    done. Now fork a copy of the sample application''s repository ([https://github.com/hyperledger/composer-sample-applications](https://github.com/hyperledger/composer-sample-applications))
    to your GitHub account, and then clone it to your local machine using the following
    commands:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遵循了[*第3章*](5a4b5cba-356c-4997-b816-0676a2c503c2.xhtml)中的步骤，*使用业务场景做准备*，你应该已经完成了所有先决条件。现在，在你的
    GitHub 账户中 fork 一个样例应用程序的存储库（[https://github.com/hyperledger/composer-sample-applications](https://github.com/hyperledger/composer-sample-applications)），然后使用以下命令将其克隆到你的本地计算机：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Navigate the the appropriate directory and install the letter of credit sample
    application using the following commands. It will take a few minutes for the application
    to download and install:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到相应的目录，并使用以下命令安装信用证示例应用程序。应用程序下载和安装需要几分钟时间：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The install script will also start the application presentation tier in your
    browser. Let's investigate.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 安装脚本还会在你的浏览器中启动应用程序的演示层。让我们来调查一下。
- en: Running the sample
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行示例
- en: 'You''ll see that your browser has opened up tabs corresponding to the different
    participants in the network. Click on the different tabs to see the different
    participants in the network. We''re going to inhabit each of these personae as
    we work through the sample. Let''s walk through the process by trying out the
    application:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到你的浏览器打开了与网络中不同参与者相对应的选项卡。点击不同的选项卡查看网络中的不同参与者。当我们通过示例工作时，我们将扮演这些角色中的每一个。让我们通过尝试应用程序来走一遍这个过程：
- en: '![](img/02e1a8a4-6bbc-43b2-ac9c-24037c362ad6.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02e1a8a4-6bbc-43b2-ac9c-24037c362ad6.png)'
- en: Step 1 – preparing to request a letter of credit
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1步 - 准备请求信用证
- en: 'We start with preparing for our request:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先准备我们的请求：
- en: 'Select the first tab on your browser–you will see the following page:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器上选择第一个选项卡-你将看到以下页面：
- en: '![](img/26a6704f-0c89-4d89-951f-c53ad27fc18e.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26a6704f-0c89-4d89-951f-c53ad27fc18e.png)'
- en: You are now Alice! You can see your bank and your account details. You can apply
    for a letter of credit by clicking on the Apply button. Try it!
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在是Alice！您可以看到您的银行和您的账户细节。您可以通过单击“申请”按钮申请一个信用证。试试看！
- en: 'You''ll be presented with a page where you can request a letter of credit:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一个页面，您可以在该页面上请求信用证书：
- en: '![](img/3514f771-702b-4e21-a0f7-5ea9a9e58d26.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3514f771-702b-4e21-a0f7-5ea9a9e58d26.png)'
- en: Step 2 – requesting a letter of credit
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2步 - 请求信用证
- en: 'This is the first stage of the process you''re going to request a letter of
    credit to buy computers from Bob! At the top of every screen, you''ll see exactly
    where you are in the process, for example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是流程的第一个阶段，您将要求从Bob购买计算机的信用证！在每个屏幕的顶部，您都能看到您在流程中的确切位置，例如：
- en: '![](img/793cd06e-57ab-49ba-9560-1f8171ee66cb.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/793cd06e-57ab-49ba-9560-1f8171ee66cb.png)'
- en: 'On the left-hand side of the page, you''ll see the merchants'' details—those
    of Alice and Bob. Notice the company names and account details:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面的左侧，您将看到商家的详情 - 阿里斯和Bob的联系方式。注意公司名称和账户详情：
- en: '![](img/0ded7aab-49cc-405c-9bed-6849666833b2.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ded7aab-49cc-405c-9bed-6849666833b2.png)'
- en: 'Let''s make an application as Alice. On the right-hand side of the screen,
    you can enter the details of the trade. Let''s pretend that Alice requests 1,250
    computers from Bob, at a unit price of 1,500\. The application has a total value
    of 1.875M EUR:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假装作为Alice提交一个申请。在屏幕的右侧，您可以输入贸易的细节。假设Alice向Bob请求1,250台计算机，每台价格为1,500欧元。该申请的总价值为1.875M
    EUR：
- en: '![](img/e7599d23-9ac7-4fe0-88a8-109ac324ccde.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7599d23-9ac7-4fe0-88a8-109ac324ccde.png)'
- en: 'Also note that Alice can chose (with her bank''s permission) some of the terms
    and conditions on the application. These are important terms and conditions of
    the contract with Bob—unless they are satisfied, neither party will receive goods
    or payment:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，Alice可以根据（她银行的许可）在申请书上选择一些条款和条件。这些是与Bob签订合同的重要条款和条件 - 除非这些条件得到满足，否则双方都不会收到货物或付款：
- en: '![](img/b552ad40-03a8-4ee8-804a-eb87a541ee9d.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b552ad40-03a8-4ee8-804a-eb87a541ee9d.png)'
- en: You can edit these if you wish, although the process is not affected by them.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据需要编辑这些内容，尽管这些过程不会受到影响。
- en: 'Click on the Start approval process button when you''re ready to move to the
    next stage of the process:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当您准备好进入流程的下一个阶段时，请点击“开始批准流程”按钮：
- en: '![](img/3fbd34dd-12f6-4e67-85c3-5e4af5b7a801.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3fbd34dd-12f6-4e67-85c3-5e4af5b7a801.png)'
- en: Congratulations, you've just applied for a letter of credit!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您刚刚申请了信用证！
- en: Step 3 – importing bank approval
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3步 - 进口银行批准
- en: 'This is next stage of the process. Click on the next tab in your browser. You
    are now Matias, an employee of Alice''s bank, Dinero, who needs to process her
    application! Here''s the page that Matias sees:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是流程的下一个阶段。在浏览器的下一个标签页上单击。现在您是阿里斯银行Dinero的员工Matias，需要处理她的申请！以下是Matias看到的页面：
- en: '![](img/f8ae0fab-645b-4d49-b438-146ab663bb07.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8ae0fab-645b-4d49-b438-146ab663bb07.png)'
- en: It shows the application from Alice, and that it is waiting for approval from
    Matias. He is acting on behalf of Dinero Bank, and applies whatever process is
    required to approve or reject the letter. We might imagine that in a sophisticated
    process, Matias would only have to approve exceptional letters that could not
    be automatically approved.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示了来自Alice的申请，目前正等待Matias的批准。他代表Dinero银行行事，并申请批准或拒绝的信用证。我们可以设想，在一个复杂的过程中，Matias只需要批准无法自动批准的特殊信函。
- en: 'If Matias clicks on the application, he is presented with the details, which
    are essentially the same as Alice requested:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Matias点击申请，他将看到与Alice请求的内容基本相同的详细信息：
- en: '![](img/be00b9b4-2cec-408f-968b-d6be5f9028ab.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be00b9b4-2cec-408f-968b-d6be5f9028ab.png)'
- en: 'In our scenario, Matias will approve the letter of credit, and the process
    will continue! Select the accept button and we''ll move to the next step:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的场景中，Matias将批准信用证，流程将继续！选择“接受”按钮，我们将进入下一步：
- en: '![](img/31eee305-e4f0-4eef-bd9f-dd50d744204c.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31eee305-e4f0-4eef-bd9f-dd50d744204c.png)'
- en: Step 4 – exporting bank approval
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4步 - 出口银行批准
- en: 'Click on the next tab in your browser. You are now Ella, an employee of Bob''s
    bank, Eastwood, who has been informed that Alice wishes to do business with Bob:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器的下一个标签页上单击。现在您是Bob银行Eastwood的员工Ella，已被告知阿里斯希望与Bob做生意：
- en: '![](img/34f1a402-6fe6-4fdb-a7cd-e78c04fcd5c2.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34f1a402-6fe6-4fdb-a7cd-e78c04fcd5c2.png)'
- en: This sample has taken a little creative license with the process–normally, the
    letter would be presented to Bob by Alice. Bob would then present it Ella. However,
    we can see that because everyone can view the letter in advance, process innovations
    are possible. We'll elaborate on this point later.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例对流程稍作创意性处理 - 通常情况下，信函将由 Alice 提交给 Bob。然后 Bob 将其提交给 Ella。然而，我们可以看到，因为每个人都可以预先查看信函，所以流程创新是可能的。我们稍后会详细说明这一点。
- en: 'We can see that Ella authorizes the next stage in the process–and we can see
    where the letter is in the process flow. When Ella selects the letter, she can
    see the following details:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，Ella 授权了流程的下一个阶段 - 我们可以看到信函在流程图中的位置。当 Ella 选择了这封信时，她可以看到以下详情：
- en: '![](img/72f4de67-e8f8-4970-b016-7675bff42e8c.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72f4de67-e8f8-4970-b016-7675bff42e8c.png)'
- en: Notice that the currency has been changed. Alice had to make her payment in
    US dollars because that's what Bob wanted, but Ella and Matias have agreed on
    an exchange rate for Alice and Bob, so that each can use their own currency. Alice
    will be charged in euros, and Bob will be paid in dollars.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意货币已经被更改。Alice 必须用美元支付，因为那是 Bob 想要的，但是 Ella 和 Matias 已经就 Alice 和 Bob 的汇率达成了一致，所以每个人都可以使用自己的货币。Alice
    将以欧元计价，而 Bob 将以美元支付。
- en: 'At the top of the screen, you''ll see the following information that relates
    to the process. We can see where we are in the process; increased transparency
    is made possible due to the singular nature of a blockchain, even though different
    organizations each host and approve their stage of the process via their own systems:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕顶部，您将看到与流程相关的以下信息。我们可以看到我们在流程中的位置；由于区块链的唯一性，增加的透明度是可能的，尽管不同的组织每个都通过自己的系统托管和批准了流程的各个阶段：
- en: '![](img/e568a94a-b058-43f7-ae7f-8fb43ea67849.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e568a94a-b058-43f7-ae7f-8fb43ea67849.png)'
- en: 'Let''s move the process forward again. Ella can approve the letter by clicking
    on the accept button:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次推进流程。Ella 可以通过点击接受按钮来批准该信函：
- en: '![](img/875b3c77-754d-400e-a602-88306ffa47c9.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/875b3c77-754d-400e-a602-88306ffa47c9.png)'
- en: Step 5 – letter received by exporter
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 步 - 出口商收到信函
- en: 'Click on the next tab in your browser. You are now Bob, and you can see the
    letter of credit from Alice:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中点击下一个选项卡。你现在是 Bob，你可以看到 Alice 的信用证：
- en: '![](img/eb343ba7-fe3b-4ea8-96dd-fde88adb01c9.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb343ba7-fe3b-4ea8-96dd-fde88adb01c9.png)'
- en: 'In this process example, Bob can be pretty sure that Alice is trustworthy because
    his bank has told him in advance. If Bob selects the letter, he will be shown
    its details:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个流程示例中，Bob 可以相当确信 Alice 是值得信赖的，因为他的银行事先告诉了他。如果 Bob 选择这封信，他将被显示其详细信息：
- en: '![](img/859be794-6cb0-42ca-a469-1cb76335f00e.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/859be794-6cb0-42ca-a469-1cb76335f00e.png)'
- en: Hopefully, you're starting to understand the process now–so let's not spell
    out all the details again! Just note how Bob has increased trust because of the
    transparency available to him. Bob accepts letter as payment (Click Accept), and
    now has to ship the goods to Alice!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你现在开始理解这个流程了 - 所以让我们不要再一次详细说明所有细节了！只需注意 Bob 如何因为他可以获得的透明度而增加信任。Bob 接受信函作为支付（点击接受），现在必须将货物发给
    Alice！
- en: Step 6 – shipment
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 步 - 装运
- en: 'You will be returned to Bob''s initial screen, but notice that now there''s
    an option to ship the goods to Alice:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你将会回到 Bob 的初始界面，但是请注意，现在有一个选项将货物运送给 Alice：
- en: '![](img/69b8f2ab-5df6-4737-b28e-e439ba5be2f8.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69b8f2ab-5df6-4737-b28e-e439ba5be2f8.png)'
- en: 'Click on Ship Order to indicate that the goods have been shipped to Alice:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 点击发货订单，表示货物已经运送给 Alice：
- en: '![](img/806ae5f8-5deb-40de-af88-5cec3ab83b78.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/806ae5f8-5deb-40de-af88-5cec3ab83b78.png)'
- en: Bob can now see that as far as the letter of credit process is concerned, he
    is finished–the order has been shipped.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Bob 现在可以看到，就信用证流程而言，他已经完成了 - 订单已经发货。
- en: 'But Bob hasn''t yet received payment–Alice must receive the goods first before
    this can happen. Note the history in the bottom right hand corner of Bob''s web
    page. Bob can see where he is in the overall process, and that some steps need
    to be completed before he receives payment:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但是 Bob 还没有收到付款 - Alice 必须先收到货物才能发生这种情况。请注意 Bob 网页右下角的历史记录。Bob 可以看到他在整个流程中的位置，以及在他收到付款之前需要完成的一些步骤：
- en: '![](img/a40aa748-d77a-44f9-8bc9-d281d5c4cd68.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a40aa748-d77a-44f9-8bc9-d281d5c4cd68.png)'
- en: Let's return to Alice to continue with the next step in the process.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们返回到 Alice 的选项卡，继续流程的下一步。
- en: Step 7 – goods received
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 步 - 收到货物
- en: 'Go back to Alice''s tab in your browser:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到你浏览器中 Alice 的选项卡：
- en: '![](img/b8394717-7e70-4fc2-ae49-74e54e27fac3.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8394717-7e70-4fc2-ae49-74e54e27fac3.png)'
- en: When Alice receives the computers from Bob, she can click on Receive Order to
    indicate this, and review the letter of credit. At this point, both banks are
    able to release payment. Let's move to Matias's web page to see this process step.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当爱丽丝从鲍勃那里收到电脑时，她可以点击“接收订单”来表示这一点，并查看信用证。此时，两家银行都能释放付款。让我们转到马蒂亚斯的网页，看看这个过程的下一步。
- en: Step 8 – payment
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八步 - 付款
- en: 'Matias can see that Alice and Bob are happy and that payment can therefore
    be made. Click through Matias''s initial page to see the details of the current
    letter:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 马蒂亚斯可以看到爱丽丝和鲍勃很高兴，因此付款可以进行。点击马蒂亚斯的初始页面，查看当前信函的详细信息：
- en: '![](img/efb6f7f0-8d1f-4c96-abb5-a67ecad8b34e.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efb6f7f0-8d1f-4c96-abb5-a67ecad8b34e.png)'
- en: Matias can see that Alice has received the goods, and Matias can click on Ready
    for Payment to move to the next step of the process.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 马蒂亚斯可以看到爱丽丝已经收到货物，马蒂亚斯可以点击“准备付款”来进行下一步。
- en: Step 9 – closing the letter
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九步 - 关闭信函
- en: 'Ella can now close the letter and make the payment to Bob:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 爱拉现在可以关闭信函并向鲍勃付款：
- en: '![](img/4be77fa3-1f1e-4443-93a0-f8d2df5e23ce.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4be77fa3-1f1e-4443-93a0-f8d2df5e23ce.png)'
- en: As Ella, click on Close to move to the final step of the process.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 作为艾拉，点击“关闭”以进入流程的最后一步。
- en: Step 10 – Bob receives payment
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十步 - 鲍勃收到付款
- en: 'If we move back to Bob''s web page and refresh it, we can see that Bob has
    some good news! Check out his increased balance:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们返回鲍勃的网页并刷新它，我们可以看到鲍勃有一些好消息！看看他的余额增加了：
- en: '![](img/e461b841-400f-41c7-9bb2-c3f562743329.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e461b841-400f-41c7-9bb2-c3f562743329.png)'
- en: Bob has now received payment for the computers he shipped to Alice. The business
    process is complete.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 鲍勃现在已经收到了他向爱丽丝出售的电脑的付款。业务流程已经完成。
- en: Recapping the process
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概括流程
- en: Alice wanted to buy computers from Bob, and used the letter of credit process
    to facilitate this exchange. She bought goods in dollars, but was charged in Euros.
    She was able to be confident that the goods met her terms and conditions before
    she paid for them.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '爱丽丝想从鲍勃那里购买电脑，并使用信用证流程来促成这次交易。她以美元购买商品，但以欧元支付。在支付之前，她能够确信货物符合她的条款和条件。 '
- en: Bob sold computers to Alice, an overseas customer he didn't previously know.
    The letter of credit process allowed him to be confident that he would receive
    payment for his goods in his local currency, US dollars, as long as Alice was
    happy with the goods.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 鲍勃向爱丽丝出售了电脑，一个他之前不认识的海外客户。信用证流程使他有信心以他本地货币美元的形式收到他货物的付款，只要爱丽丝对货物满意即可。
- en: Matias and Ella, representatives of Dinero Bank and Eastwood Bank, respectively,
    provided a system that allowed Alice and Bob to trust that each would fulfill
    mutually agreeable conditions in order to receive payment. They were able to charge
    Alice and Bob a fair price for their services. They were aware in near real-time
    of every step in the business process.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 马蒂亚斯和艾拉，分别是Dinero Bank和Eastwood Bank的代表，提供了一个系统，让爱丽丝和鲍勃能够相信彼此将履行相互同意的条件以便收到付款。他们能够为他们的服务向爱丽丝和鲍勃收取公平的价格。他们几乎实时了解业务流程的每一个步骤。
- en: Let's now see how this process was implemented using Hyperledger Composer and
    Hyperledger Fabric.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用Hyperledger Composer和Hyperledger Fabric实现这个过程。
- en: Analyzing the letter of credit process
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析信用证流程
- en: At the core of the business network is a **business network definition** that
    contains the formal description of assets, participants, transactions, and events.
    We're going to examine this for the letter of credit application. By the end of
    this chapter, you'll be able understand how the network is implemented and accessed
    by the application. Moreover, you'll have the knowledge to build your own network
    and applications that consume it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 业务网络的核心是一个**业务网络定义**，其中包含资产、参与者、交易和事件的正式描述。我们将为信用证申请检查这一点。在本章结束时，您将能够了解网络是如何实现和被应用程序访问的。此外，您将具备构建自己的网络和消费应用程序的知识。
- en: The Playground
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操场
- en: 'If you move to the next tab in the demo, you''ll find the Hyperledger Composer
    Playground has been opened for you:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您转到演示中的下一个选项卡，您会发现Hyperledger Composer Playground已经为您打开：
- en: '![](img/b8057977-b0ea-479c-938b-47ddb0afea9a.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8057977-b0ea-479c-938b-47ddb0afea9a.png)'
- en: The Playground is a tool that will allow you to investigate the business network.
    The initial view of Playground contains a **wallet** full of **business network
    cards**. Just like a real wallet, these cards allow you to connect to different
    networks. When you use a particular card to connect to a network, you act as a
    different participant. This is useful for testing the network. Let's connect to
    the network as an administrator, and see what's in it! (We'll create our own network
    card later.)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 游乐场是一个工具，可以让您调查商业网络。游乐场的初始视图包含一个充满 **商业网络卡** 的 **钱包**。就像一个真实的钱包一样，这些卡可以让您连接到不同的网络。当您使用特定的卡连接到网络时，您就会作为不同的参与者进行操作。这对于测试网络非常有用。让我们作为管理员连接到网络，看看里面有什么！（稍后我们将创建我们自己的网络卡。）
- en: Viewing the business network
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看商业网络
- en: 'On the business network card marked `admin@letters-credit-network`, click Connect
    now. You''ll be presented with a web page:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在标记为 `admin@letters-credit-network` 的商业网络卡上，点击立即连接。您将看到一个网页：
- en: '![](img/344e547b-6af3-4c2d-9e08-43adeebb59ec.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/344e547b-6af3-4c2d-9e08-43adeebb59ec.png)'
- en: View of business network definition
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 商业网络定义视图
- en: This is a view of the business network definition. It contains definitions of
    the participants, assets, transactions, and events we discussed in Business Networks
    – for the letter of credit network. On the left-hand side of the page are a set
    of files that contain information relating to these concepts for the network we're
    connected to. We've selected **About**, and on the right-hand side, we can see
    a description of the business network. Let's investigate this description in a
    little detail–it's really important to understand.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是商业网络定义的视图。它包含我们在信用证网络中讨论的参与者、资产、交易和事件的定义。页面的左侧是一组文件，其中包含与我们连接的网络相关的这些概念的信息。我们选择了
    **关于**，在右侧，我们可以看到商业网络的描述。让我们稍微详细地研究一下这个描述——理解这一点非常重要。
- en: A description of the business network
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 商业网络描述
- en: The `READ.ME` file contains a natural language description of the network in
    terms of its assets, participants, transactions, and events.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`README` 文件包含了对网络的自然语言描述，涉及其资产、参与者、交易和事件。'
- en: The participant descriptions
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参与者描述
- en: 'The participants are listed in the business network description:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 参与者列在商业网络描述中：
- en: '[PRE2]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In our example, there are four participant **instances**—Alice and Bob, Matias
    and Ella. But notice how there are only two participant **types**, namely `Customer`
    and `Employee`. In our network, Alice and Bob are participants of the `Customer` type,
    whereas Matias and Ella are participants of the `BankEmployee` type. We can see
    that these types are named from the perspective of a bank–that's because the network
    service is being provided by the Dinero and Eastwood banks, and used by Alice
    and Bob.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，有四个参与者 **实例** ——Alice、Bob、Matias 和 Ella。但请注意，这里只有两种参与者 **类型**，即 `Customer`
    和 `Employee`。在我们的网络中，Alice 和 Bob 是 `Customer` 类型的参与者，而 Matias 和 Ella 是 `BankEmployee`
    类型的参与者。我们可以看到，这些类型是从银行的角度命名的——因为 Dinero 和 Eastwood 银行提供网络服务，并由 Alice 和 Bob 使用。
- en: We're going to see more details about these participant types and the particular
    instances in the network soon. But for now, just think about how we've reduced
    the actors in the network to two very simple representations. Even though we saw
    a rich behavior in the application, in terms of participants, the network is quite
    simple. You'll see this in business networks–while there can be many instances
    of participants, the number of types is usually very limited, and rarely exceeds
    10\. Of course, rules are made to be broken, but you'll find it helpful to think
    of networks this way–it makes the analysis much more manageable.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快会看到有关这些参与者类型及其网络中特定实例的更多细节。但现在，只需考虑一下我们如何将网络中的参与者简化为两种非常简单的表示。尽管我们在应用程序中看到了丰富的行为，但在参与者方面，网络却非常简单。你将在商业网络中看到这一点——尽管参与者可以有很多实例，但类型的数量通常非常有限，并且很少超过10个。当然，规则是用来打破的，但你会发现以这种方式思考网络会让分析变得更加可管理。
- en: The asset descriptions
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资产描述
- en: 'If you were surprised that the number of participant types is small in this
    business network, then you''re going to amazed when you see the number of asset
    types:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这个商业网络中参与者类型数量很少感到惊讶，那么当你看到资产类型的数量时，你会感到惊讶：
- en: '[PRE3]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, this is a sample network–here to teach us about the concepts of business
    networks, rather than be an exhaustive representation of the world of letters
    of credit. However, if you think about our example, the whole flow was primarily
    concerned with just one asset type: the **letter**.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这是一个示例网络 - 这里是为了教我们关于业务网络概念，而不是对信用证世界的详尽表示。 但是，如果你考虑我们的例子，整个流程主要关注的是一个资产类型：**信函**。
- en: To be fair, we didn't focus on the goods being transferred–the computers, or
    the payment. In a real system, these would described as assets. Even so, notice
    how the number of asset **types** would still be relatively small. We can create
    limitless numbers of instances of letters of credit, computers, and payments,
    but there will remain only a few types.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 公平地说，我们没有关注正在转移的货物 - 电脑或付款。 在真实的系统中，这些将被描述为资产。 即便如此，请注意资产**类型**的数量仍然相对较少。 我们可以创建无限数量的信用证实例，计算机和付款，但类型仍然只有几种。
- en: We'll look at the details of this asset type a little later.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后将详细了解此资产类型的细节。
- en: The transaction descriptions
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易描述
- en: 'Let''s now move to the transaction types in the business network:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转移到业务网络中的交易类型：
- en: '[PRE4]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At last, we can see quite a few types! This is typical–while the numbers of
    the types of participants and assets is quite limited, assets have rich life cycles.
    If you think about our application, the letter of credit goes through many **states**,
    as it interacts with the different participants in the network. These transactions
    correspond directly to those interactions. (Ignore `CreateDemoParticipants`, this
    is a transaction that sets up the demo!)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以看到相当多种类型！ 这是典型的情况 - 尽管参与者和资产类型的数量相当有限，但资产的生命周期丰富多彩。 如果你考虑我们的应用程序，信用证与网络中的不同参与者交互时会经历许多**状态**。
    这些交易直接对应于这些交互。（忽略`CreateDemoParticipants`，这是设置演示的交易！）
- en: The transaction names are fairly straightforward to understand–these are closely
    related to the letter's life cycle. They are the steps you went through using
    the application, as different participants. Alice made the `InitialApplication`,
    and had the option to `SuggestChanges` to the terms and conditions of the letter.
    Mattias and Ella could `Approve` or `Reject` the letter. Bob invoked `ShipProduct`
    to indicate that he had performed his end of the bargain, and Alice used `ReceiveProduct`
    to likewise indicate she had received the computers. Finally, Matias indicated
    that the letter was `ReadyForPayment`, and Ella issued the `Close` transaction
    to end the process and trigger payment to Bob.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 交易名称相当容易理解 - 这些与信函的生命周期密切相关。 这是您作为不同参与者使用应用程序时经历的步骤。 Alice 进行了`InitialApplication`，并有可能对信函的条款和条件进行`SuggestChanges`。
    Mattias 和 Ella 可以`Approve` 或 `Reject` 信函。 Bob 调用`ShipProduct` 表示他已完成了他的交易，并且 Alice
    使用`ReceiveProduct` 也是这样表示她已经收到了计算机。 最后，Matias 表示该信函已准备好进行支付，并且Ella 发出了`Close`
    交易以结束流程并触发向 Bob 的付款。
- en: There's no reason why the number of transaction types has to be larger than
    the number of types of assets. One could easily imagine many different asset types
    that had the same, relatively simple, life cycle. Imagine a retailer's product
    inventory for example–goods could be sourced, delivered, sold, and returned. This
    is a relatively simple life cycle, but the number of different types of goods
    could be quite large. However, we might expect these different goods all to share
    this life cycle through some commonality of behavior; after all, they are all
    products. There will be more on this idea of inheritance later.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 没有理由交易类型的数量必须大于资产类型的数量。 人们很容易想象许多不同类型的资产，其生命周期相同且相对简单。 想象一下零售商的产品库存 - 商品可以被采购，交付，出售和退货。
    这是一个相对简单的生命周期，但是不同类型的商品数量可能相当大。 然而，我们可能期望这些不同的商品通过某种行为的共性共享这种生命周期; 毕竟，它们都是产品。
    关于继承的这种想法以后会有更多内容。
- en: We'll look at the implementation of these transactions in more detail, but for
    now, it's most important to understand the conceptual picture of asset flow between
    the participants in the network, as described by transactions, rather than worrying
    about the exact logic behind these transactional changes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更详细地研究这些交易的实现，但目前，最重要的是理解网络中参与者之间资产流动的概念图片，如交易所描述的，而不是担心这些交易变化背后的确切逻辑。
- en: The event descriptions
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件描述
- en: 'Finally, let''s look at the list of events in the business network:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看一下业务网络中事件的列表：
- en: '[PRE5]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can see that the events have names matching the transaction types, and this
    is typical. These are **explicit** events that are generated by transactions to
    indicate when certain events occur in the business network. In our scenario, they
    are used by the user interfaces to keep the web pages up to date, but of course
    could be used for much more sophisticated notification processing, for example, `CloseEvent` could
    be used to trigger payment to Bob.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到事件的名称与交易类型匹配，这是典型的。这些是**显式**事件，由交易生成，以指示业务网络中发生某些事件的时间。在我们的场景中，它们被用户界面用于保持网页的最新状态，但当然也可以用于更复杂的通知处理，例如，`CloseEvent`
    可以用于触发向 Bob 的支付。
- en: When you first define a business network, you'll find that the events closely
    mirror the transactions. But, over time, you'll find that more sophisticated **explicit**
    events get added, for example, Matias or Ella might want to generate a specific
    event for a `HighValue` letter, or a `LowRisk` application.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次定义业务网络时，您会发现事件与交易密切相关。但是，随着时间的推移，您会发现更复杂的**显式**事件被添加，例如，Matias 或 Ella 可能想要为
    `HighValue` 信函或 `LowRisk` 申请生成特定事件。
- en: We'll look at the details of these events later.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会详细讨论这些事件的细节。
- en: A model of the business network
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个业务网络的模型
- en: Now that we've understood the types in the business network in natural language,
    let's see how they are defined technically. On the left-hand side of the Playground,
    select Model File.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了自然语言中业务网络中的类型，让我们看看它们在技术上是如何定义的。在 Playground 的左侧，选择模型文件。
- en: In this business network, there is only one model file that defines the participants,
    assets, transactions, and events. In a bigger application, we'd keep the information
    from different organizations in their own files, and often in their own namespace.
    It allows them to be kept separate but brought together when necessary. Let's
    see how namespaces work.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在此业务网络中，只有一个模型文件定义了参与者、资产、交易和事件。在更大的应用程序中，我们将保留来自不同组织的信息在其自己的文件中，并且通常在其自己的命名空间中。它允许它们保持分离，但在必要时将它们汇集在一起。让我们看看命名空间是如何工作的。
- en: Namespaces
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名空间
- en: 'Our example uses a single namespace:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例使用单个命名空间：
- en: '[PRE6]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This namespaces says that *the type definitions in this file have been defined
    by the Acme organization's letter of credit process*. All this is a short name!
    Use namespaces–they'll help you clearly separate, and more importantly, **communicate**,
    your ideas. It is recommended to use a hierarchical name so that it's clear which
    organizations in the network are defining the relevant types being used by the
    network.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 此命名空间表示*此文件中的类型定义已由 Acme 组织的信用证流程定义*。这都是一个简短的名称！使用命名空间——它们将帮助您清楚地分离，更重要的是**传达**，您的想法。建议使用分层名称，以便清楚地知道网络中哪些组织正在定义网络使用的相关类型。
- en: Enumerations
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举
- en: 'Next, we see a set of enumerated types:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们看到一组枚举类型：
- en: '[PRE7]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: These are the **states** through which the letter is going to transition. When
    we access a letter, we're going to be able to identify where the business process
    is using this enumeration. All the names are fairly self explanatory.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是信函要经过的**状态**。当我们访问一封信时，我们将能够使用此枚举标识业务流程的位置。所有的名称都相当自我解释。
- en: Asset definitions
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资产定义
- en: 'We now come to the first really significant definition–the letter of credit
    asset:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来到了第一个真正重要的定义——信用证资产：
- en: '[PRE8]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let's spend a little time on this definition, as it's both central to understanding
    the business network, and Hyperledger Composer in particular.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间来理解这个定义，因为它既是理解业务网络的中心，也是特别关注 Hyperledger Composer 的。
- en: First, note the **asset** keyword. It indicates that what follows is a data
    structure that describes an asset. It's just like a type definition in a normal
    programming language, but with some special characteristics that we'll see later.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请注意**asset**关键字。它表示接下来的内容是描述资产的数据结构。这就像正常编程语言中的类型定义，但具有一些特殊特征，我们稍后会看到。
- en: 'We can see that the asset is of the `LetterOfCredit` type. In this example,
    we only have one asset type–in more sophisticated examples, we''d have more types
    of assets. For example, we could extend this model to include a `Shipment` asset,
    and a `Payment` asset:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到资产是`LetterOfCredit`类型。在此示例中，我们只有一种资产类型——在更复杂的示例中，我们将拥有更多类型的资产。例如，我们可以扩展此模型以包括
    `Shipment` 资产和 `Payment` 资产：
- en: '[PRE9]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For now, let''s skip the **identified by** clause, moving to the first element
    in the asset definition:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们跳过**identified by**子句，转到资产定义中的第一个元素：
- en: '[PRE10]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The letter `o` indicates that this field is a **simple attribute** of the asset.
    It's a slightly strange way of indicating this, so just think of it as a decoration.
    This first attribute is the `letterId`. Recall that when a letter is created in
    the business network, a unique ID is assigned to it. If you recall, in our example,
    we had `letterId` `L64516AM` or `L74812PM`. This is indicated by the field having
    the `String` type–lots of types are available, as we'll see. We can see that this
    definition allows us to associate a human-readable identifier with the asset.
    Note that this must be a unique identifier!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 字母`o`表示这个字段是资产的**简单属性**。这是一种略显奇怪的表示方法，所以可以将它看作是一种装饰。第一个属性是`letterId`。回想一下，当在商业网络中创建一封信时，将为其分配一个唯一ID。如果回想一下，在我们的例子中，我们有`letterId`分别是`L64516AM`或`L74812PM`。这是通过字段具有`String`类型来表示的——有很多类型可用，我们很快就会看到。我们可以看到，这个定义允许我们将一个可读的标识符与资产关联起来。请注意，这个标识符必须是唯一的！
- en: 'Let''s now return to the `identified by` clause:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回到`identified by`子句：
- en: '[PRE11]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Now* we can understand that this indicates that the `letterId` attribute is
    the one by which the asset is uniquely identified. It''s a simple but powerful
    idea that relates closely to the real-world. For example, a car might have a **Vehicle
    Identification Number** (**VIN**) that uniquely identifies it.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*现在*我们可以理解，这表明`letterId`属性是唯一标识资产的属性。这是一个简单但强大的想法，与现实世界密切相关。例如，一辆汽车可能有一个用于唯一标识它的**车辆识别号**（**VIN**）。'
- en: 'Let''s move to the next attribute:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续下一个属性：
- en: '[PRE12]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first thing we notice is the `-->` decorator! (Type it as two dashes and
    a greater than symbol on your keyboard). This is a **reference attribute**–it
    points to something! In the case of a letter, it points to a different type, `Customer`,
    and the name of this element is `applicant`. See how the reference concept is
    a little more complex than the simple attribute we saw earlier–that's because
    it does more work. This field is saying that the letter has an applicant which
    is of the `Customer` type, and that you need to look it up via this reference.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到的第一件事是`-->`装饰符！（在您的键盘上键入两个破折号和一个大于符号）。这是一个**引用属性**——它指向某物！就一封信而言，它指向一个不同的类型，`Customer`，而这个元素的名称是`applicant`。看到引用的概念比我们之前看到的简单属性复杂一些——因为它做的工作更多。这个字段表示这封信有一个申请者，是`Customer`类型，而且你需要通过这个引用查找它。
- en: In our example, an instance of a letter will point to **Alice**, as she's a
    customer of Dinero Bank who makes an application. Notice that this a reference
    attribute refers to a *different* object in the business network. This idea of
    a reference is very powerful–it allows assets to point to other assets, as well
    as participants, and the same for participants. With references, we're able to
    represent the rich structures that we see in the world. It means that we can create
    assets that can be combined and divided, and the same is possible for participants.
    In our example, we use the reference to see who has applied for a letter by navigating
    the reference. Again, we can see that this model is very bank-centric. We'll see
    later that `Customer` is in fact a participant, and we'll see how participants,
    such as Alice, are defined. But for now, let's stay with the asset definition.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，一封信的实例将指向**Alice**，因为她是 Dinero 银行的客户，她提出了申请。请注意，这个引用属性指向商业网络中的*不同*对象。这种引用的概念非常强大——它允许资产指向其他资产，以及参与者，参与者也是如此。有了引用，我们能够表示我们在世界中看到的丰富结构。这意味着我们可以创建可以组合和分割的资产，对参与者也是如此。在我们的示例中，我们使用引用来查看谁申请了一封信，通过导航引用。再次看到，这个模型非常以银行为中心。稍后我们将看到`Customer`实际上是一个参与者，并且我们将看到像
    Alice 这样的参与者是如何定义的。但现在，让我们先留在资产定义上。
- en: 'As we discussed in Business Networks, our application uses a simple way of
    modeling ownership–in the real-world, it is often an associative reference. We
    could most easily model this more sophisticated associative relationship as an
    `OwnershipRecord`, which pointed to an asset and pointed to a participant if we
    wished to do so:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在**商业网络**中所讨论的，我们的应用程序使用了一种简单的方式来建模所有权——在现实世界中，这经常是一种联想参考。我们可以将这种更复杂的联想关系最容易地建模为一个`OwnershipRecord`，它指向一个资产，并且如果需要的话，指向一个参与者：
- en: '[PRE13]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We can instantly see the power of this approach. We're able to model the relationships
    that exist in the real-world, making our applications more realistic and therefore
    easier to use. For our purposes, our current model is perfectly adequate.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以立即看到这种方法的强大之处。我们能够建模现实世界中存在的关系，使我们的应用程序更加现实和易于使用。对于我们的目的，我们当前的模型完全够用。
- en: 'Let''s move to the next field:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转向下一个字段：
- en: '[PRE14]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is a very similar field to the previous one, and in our example, an instance
    of this element would be **Bob**. There's no need to spend time on this definition.
    It's important, of course, but it just points the letter at Bob. If you recall,
    our application always has the two counterparties associated with a letter.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与上一个领域非常相似的领域，在我们的示例中，这个元素的一个实例将是**鲍勃**。没有必要花时间来定义这个概念。当然很重要，但它只是指向鲍勃的信。如果你回忆一下，我们的应用程序总是将两个交易对方与一个信件关联起来。
- en: 'The next two fields have a similar structure, but we''re going to spend a little
    more time discussing them:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个字段具有类似的结构，但我们将花更多时间讨论它们：
- en: '[PRE15]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We can see that these fields are also references to other objects, and we might
    suspect they are participants, given their names–`issuingBank` and `exportingBank`!
    Examples instances of these types are **Dinero Bank** and **Eastwood Bank**, who
    act on behalf of Alice and Bob, respectively.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这些字段也是对其他对象的引用，根据它们的名称- `issuingBank`和`exportingBank`，我们可能会怀疑它们是参与者！这些类型的示例实例是**Dinero银行**和**Eastwood银行**，它们代表着Alice和Bob。
- en: With these first four reference fields, we've modeled the very rich structure
    of the asset. We've shown that a letter of credit really has four participants
    involved in it. We've given them symbolic names and types, and shown how they
    relate to the asset. Moreover, we've done it without writing any code. We're going
    to have to do that a little later, but for now, notice how we've captured the
    fundamental nature of a letter of credit in our model. It's worth spending a little
    time really understanding this point.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这四个参考字段，我们已经建模了资产的非常丰富的结构。我们表明信用证确实有四个参与者参与其中。我们给它们起了符号化的名称和类型，并展示了它们如何与资产相关联。此外，我们没有编写任何代码就完成了这一点。稍后我们需要做一些这样的事情，但现在，请注意我们在模型中捕捉到了信用证的基本本质。值得花一点时间真正理解这一点。
- en: 'We''re only going to consider one more field in the asset definition because
    hopefully you''re getting the hang of this! It''s an important field:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只会考虑资产定义中的另一个字段，因为希望你现在已经掌握了这个！这是一个重要的字段：
- en: '[PRE16]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Remember those ENUMs that were defined right at the top of the file? Good! This
    is the field that's going to contain those different values, such as `AWAITING_APPROVAL`
    or `READY_FOR_PAYMENT`. You're often, if not always, going to have fields and
    enumerations like this in your business network, because they capture in a very
    simple form where you are in the business process you're modeling. If you're comfortable
    with workflows or finite state machines, you might like to think of these as **states**–they
    are a very important idea.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得文件顶部定义的ENUMs吗？很好！这个字段将包含那些不同值，例如`AWAITING_APPROVAL`或`READY_FOR_PAYMENT`。您在您的业务网络中经常，如果不是总是，会有这样的字段和枚举，因为它们以一种非常简单的形式捕捉了您模拟的业务流程中的位置。如果您熟悉工作流程或有限状态机，您可能想把这些看作**状态**-这是一个非常重要的概念。
- en: Participant definitions
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参与者定义
- en: 'We now move to the next set of definitions in the model file: the participants!'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们转向模型文件中的下一组定义：参与者！
- en: 'Let''s have a look at the first participant definition:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看第一个参与者定义：
- en: '[PRE17]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is our first `participant` type definition, a bank. In the sample application,
    we have two instances of this type: **Dinero Bank** and **Eastwood Bank**.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的第一个`participant`类型定义，一个银行。在示例应用程序中，我们有两个这种类型的实例：**Dinero银行**和**Eastwood银行**。
- en: 'We can see that participants are `identified by` the `participant` keyword,
    after which follows the type name–**Bank**. In this case, a participant type is
    an organization, rather than an individual. As with assets, every participant
    has a unique ID for identification, and we can see that for banks, it''s the `bankID`
    field:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，参与者是通过`participant`关键字`identified by`的，随后是类型名称-**银行**。在这种情况下，参与者类型是一个组织，而不是一个个人。与资产一样，每个参与者都有用于识别的唯一ID，我们可以看到对于银行来说，它是`bankID`字段：
- en: '[PRE18]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For our example, a bank has been modeled very simply–just a `bankID` and a
    `name`, both of which are strings:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，银行的建模非常简单-只有一个`bankID`和一个`name`，它们都是字符串：
- en: '[PRE19]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We can see that banks really are much simpler than letters. It's not just that
    they have fewer fields with simpler types. More importantly, they don't refer
    to any other participants or assets–that's what makes them simple–a lack of references,
    a simple structure. Your models will be like this too–some assets and participants
    will have a relatively simple structure, whereas others will have much more, including
    references to other assets and participants.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到银行实际上比信件简单得多。不仅仅是因为它们具有较少的字段和更简单的类型。更重要的是，它们不引用任何其他参与者或资产——这就是使它们简单的原因——缺乏引用，简单的结构。你的模型也将是如此——一些资产和参与者将具有相对简单的结构，而其他人将具有更多，包括对其他资产和参与者的引用。
- en: 'Recall that these types were referred to from the asset definition. If you
    need to do so, look at the letter type definition again to see the references:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这些类型是从资产定义中调用的。如果需要，再次查看信件类型定义，看看引用：
- en: '[PRE20]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Can you see how the **letter** **asset** and **bank** **participants** are related
    now? Great!
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你能看到**信件** **资产**和**银行** **参与者**是如何相关联的了吗？太好了！
- en: 'Let''s now look at the next type of participant. It''s a little different to
    what we''ve seen before, and for now, ignore the **abstract** keyword:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看下一个参与者类型。它和我们之前看到的有点不一样，现在先忽略**抽象**关键词：
- en: '[PRE21]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It feels like we have four instances of the `Person` type in our application–Alice
    and Bob, Matias and Ella! Let''s have a look at how individual participants are
    defined:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 感觉我们的应用程序中有`Person`类型的四个实例——Alice和Bob，Matias和Ella！让我们来看看个体参与者是如何定义的：
- en: '[PRE22]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Again, ignore the **abstract** keyword. This statement defines the participant
    of the `Person` type that is `identified by` a unique field in its type definition.
    These types are going to be the individual participants in our application, rather
    than the organizations (that is, banks) that we defined earlier. (We might expect
    that `Bank` and `Person` will be structurally related–we'll see later!)
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，忽略**抽象**关键词。该语句定义了 `Person` 类型的参与者，由其类型定义中的唯一字段`identified by`。这些类型将是我们应用程序中的个体参与者，而不是之前我们定义的组织（即银行）。（我们可能期望`Bank`和`Person`在结构上相关，我们以后会看到！）
- en: 'If we look at the definition in a little more detail, we can see their structure
    is a little more interesting than `bank`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们更详细地看一下定义，就会发现他们的结构比 `bank` 有趣多了：
- en: '[PRE23]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can see that `Person` also has a name and a last name. But notice that the
    last name is `optional`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`Person`也有名字和姓氏。但注意姓氏是`optional`的：
- en: '[PRE24]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We can see that the `optional` keyword indicates that `lastName` may or not
    be present. You may recall in our example that Alice and Bob provided surnames
    (Hamilton and Appleton), but the banks' employees, Matias and Ella, did not. This
    optionality has been modeled–see how it helps us make our applications more like
    the real-world.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到 `optional` 关键字表示 `lastName` 可能存在也可能不存在。你可能还记得我们的示例中，Alice和Bob提供了姓氏（Hamilton和Appleton），但银行的员工Matias和Ella没有。这种选择性已经被建模了——看看它是如何帮助我们使应用程序更接近现实世界的。
- en: 'However, the most important field is the next one:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最重要的字段是接下来的一个：
- en: '[PRE25]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Why? It reveals **structure**. We can see that a person is related to a bank.
    In the case of Alice and Bob, it's the bank they have accounts with. In the case
    of Matias and Bob, it's their employer. We'll come back to whether this is actually
    the right place to model this relationship, but for the moment, what's important
    is that we have an individual participant that has a relationship with an organizational
    participant. You can see that it's not just assets that have complex structure–participants
    can have them too!
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？它揭示了**结构**。我们可以看到一个人与银行有关。对于Alice和Bob来说，这是他们有账户的银行。对于Matias和Bob来说，这是他们的雇主。我们将再考虑一下，这是否真的是正确的建模关系的地方，但目前重要的是，我们有一个个体参与者与组织参与者有关。你可以看到复杂结构不仅仅适用于资产——参与者也可以有复杂结构！
- en: 'But hold on, it''s not quite that simple. We skipped something in the definition,
    didn''t we? See the following:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 但等等，这并不是那么简单。在定义中我们跳过了一些东西，是吗？看看下面的内容：
- en: '[PRE26]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `abstract` keyword almost totally destroys everything we've just said about
    `Person` types! The abstract types are special because they *cannot have instances*.
    Really? That's seems counter-intuitive, given we can see Alice and Bob, and Matias
    and Ella.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`抽象` 关键字几乎完全摧毁了我们刚说的关于`Person`类型的一切！抽象类型很特殊，因为*无法实例化*。真的吗？鉴于我们可以看到Alice和Bob，Matias和Ella，这似乎有违直觉。'
- en: 'To understand what''s happening, we need to move to the next participant definition:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解发生了什么，我们需要转向下一个参与者定义：
- en: '[PRE27]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Look carefully at the first line of this definition:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细看看这个定义的第一行：
- en: '[PRE28]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We can see that we've defined a special type of `Person` called a `Customer`!
    That's better than before, because Alice and Bob are `Customers`. We don't actually
    have instances of `Person` participants in our application–we have instances of
    `Customer` types.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们定义了一个称为`Customer`的特殊`Person`类型！这比以前更好，因为Alice和Bob都是`Customers`。实际上，在我们的应用程序中，我们没有`Person`参与者的实例
    - 我们有`Customer`类型的实例。
- en: 'We can see now that the `extends` keyword in the `Customer` type definition
    is paired with the `abstract` keyword in the `Person` type definition. They are
    part of this bigger idea of the type specialization and inheritance that we referred
    to earlier:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到`Customer`类型定义中的`extends`关键字与`Person`类型定义中的`abstract`关键字相配对。它们是我们之前提到的类型特化和继承这一更大概念的一部分：
- en: '[PRE29]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: It's the `abstract` keyword that stops us defining instances of `Person`! That's
    important, because in our example, it's actually correct–there are no instances
    of the `Person` type, only instances of the `Customer` type.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 是`abstract`关键字阻止我们定义`Person`的实例！这很重要，因为在我们的例子中，实际上是正确的 - 没有`Person`类型的实例，只有`Customer`类型的实例。
- en: 'We can see that a `Customer` has one extra attribute when extending a `Person`
    type, their company name:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到一个`Customer`在扩展`Person`类型时有一个额外的属性，即他们的公司名称：
- en: '[PRE30]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the case of Alice, this will be QuickFix IT, and for Bob, it will be Conga
    Computers.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Alice，这将是QuickFix IT，对于Bob，将是Conga Computers。
- en: 'Finally, let''s look at the last participant type, `BankEmployee`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看最后一个参与者类型，`BankEmployee`：
- en: '[PRE31]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We don't need to describe this in detail–you can see that, such as `Customer`, `BankEmployee`
    extends the `Person` type, but unlike it, it does not add any extra attributes.
    That's OK! In our application, Matias and Ella are instances of this type.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要详细描述这个 - 你可以看到，例如`Customer`，`BankEmployee`扩展了`Person`类型，但不同于它，它没有添加任何额外的属性。这没关系！在我们的应用中，Matias和Ella是这种类型的实例。
- en: We can now see why the `Person` type is helpful. It's not just that it cannot
    be instantiated, it's also that it captures what's common between `Customer` and `BankEmployee`.
    It doesn't just save typing–it reveals an inner structure that improves and reflects
    our understanding of the business network.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到为什么`Person`类型是有用的。不仅仅是因为它不能被实例化，它还捕捉到了`Customer`和`BankEmployee`之间的共同之处。它不仅仅是节省了打字的工作
    - 它展示了一个内部结构，这提高并反映了我们对业务网络的理解。
- en: 'Bearing this in mind, you might like to consider whether it might be slightly
    more realistic to model as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这一点，你可能会考虑是否以以下方式对模型进行略微更加现实的建模：
- en: '[PRE32]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In real-life scenarios, the actual participant identity will be stored outside
    the model. This is due to the fact that personal identity and immutable ledgers
    are not a good combo.  Storing Alice's personal information on the ledger means
    that it will be there forever.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实情境中，实际参与者的身份将被存储在模型之外。这是因为个人身份和不可更改的账本不是一个好的组合。在账本上存储Alice的个人信息意味着它将永远存在。
- en: Can you see how this model shows that the nature of the bank relationship is
    different for `Customer` than it is for `BankEmployee`?
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你能看出这个模型如何展示了`Customer`与`BankEmployee`之间的银行关系性质有所不同吗？
- en: There's an important point here–there is no such thing as a correct model. Models
    merely serve a purpose–they are either sufficient or insufficient. Both of our
    models are perfectly sufficient for our purposes because we don't need to make
    a distinction between `Customers` and `BankEmployees` in terms of their relationship
    to a bank.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个重要点 - 没有所谓的正确模型。模型只是为了服务于一个目的 - 它们要么足够，要么不足够。对于我们的目的来说，我们的两个模型完全足够，因为我们不需要在他们与银行的关系方面区分`Customers`和`BankEmployees`。
- en: OK, that's enough on participants. Let's move on to the next element in the
    model definition.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，参与者的部分就到这里。让我们继续下一个模型定义中的元素。
- en: Concept definitions
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概念定义
- en: 'Look at `ProductDetail` rather than `Rule`, as it''s a little easier to understand,
    initially:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 观察`ProductDetail`而不是`Rule`，因为它一开始会稍微容易理解：
- en: '[PRE33]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Concepts are minor, but helpful elements, in the model. They are neither assets
    nor participants–they merely define the structural elements contained within them.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 概念在模型中是较小但有用的元素。它们既不是资产也不是参与者 - 它们只是定义其中包含的结构元素。
- en: 'This preceding concept defines `ProductDetail`. We might argue that this is
    in fact an asset–for the purposes of our application, it''s not something that
    gets transferred between participants! It''s maybe a little clearer when we look
    at the `Rule` concept, which captures the terms and conditions of the letter of
    credit:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这个前置概念定义了`ProductDetail`。我们可能会认为这实际上是一个资产 - 对于我们的应用程序来说，它不是参与者之间转移的东西！当我们看到`Rule`概念时，可能会更清楚一些，它捕捉了信用证的条款和条件：
- en: '[PRE34]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This is something that is less like an asset or a participant, but it is helpful
    to have as a separate type, as it reveals an important structure.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这与资产或参与者不太相似，但将其作为单独的类型很有帮助，因为它揭示了一个重要的结构。
- en: Transaction definitions
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易定义
- en: 'Let''s move on! The next section is really important–the transactions! Let''s
    start by looking the first transaction definition:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续吧！下一节非常重要 - 交易！让我们先从看第一个交易定义开始：
- en: '[PRE35]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We can see that like assets and participants, transactions are defined with
    their own keyword:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，像资产和参与者一样，交易是用自己的关键字定义的：
- en: '[PRE36]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `transaction` keyword identifies that what follows is a type definition
    for a transaction. It's just like the `asset` or `participant` keywords. Notice
    that there isn't an `identified by` clause in the transaction definition.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`transaction`关键字标识接下来的内容是一个交易类型的定义。就像`asset`或`participant`关键字一样。请注意，交易定义中没有`identified
    by`子句。'
- en: 'This transaction definition represents the initial application made by Alice
    for the letter of credit. It''s quite obvious really, isn''t it? A particular
    instance of a transaction would be created by the application that Alice uses,
    and we can see the information contained within it:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 此交易定义代表了Alice为信用证所做的初始申请。这实在是显而易见，不是吗？Alice使用的应用程序会创建交易的特定实例，并且我们可以看到其中包含的信息：
- en: '[PRE37]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you look back at Alice''s web page, then you''ll see all this information:
    the `applicant` Alice, the `beneficiary` Bob, the **terms and conditions** (**rules**),
    and the **product details**. Notice that the applicant and beneficiary are references
    to participants, whereas the rules and product details are concepts.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回顾一下Alice的网页，你会看到所有这些信息：`申请人`Alice，`受益人`Bob，**条款和条件**（**规则**）和**产品详细信息**。请注意，申请人和受益人是参与者的引用，而规则和产品详细信息则是概念。
- en: We can see that the transaction has a relatively simple structure but powerfully
    captures the intention of an `applicant` (for example, Alice) to apply for a letter
    of credit to do business with a `beneficiary` (for example, Bob).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，交易的结构相对简单，但却强大地捕捉了一个`申请人`（例如，Alice）申请与`受益人`（例如，Bob）做生意的意图。
- en: Event definitions
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件定义
- en: 'Look at the next definition in the model file:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下模型文件中的下一个定义：
- en: '[PRE38]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: It's an event! You'll often see this–an event definition immediately next to
    a transaction of the same name. That's because this is really an **external**
    event–it's simply capturing the applicant applying for a letter of credit. It
    simply points to the letter that generated the event. In the application, it's
    simply used to keep the UI up-to-date, but in general, all kinds of processing
    could be triggered by this initial application.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个事件！你经常会看到这种情况 - 事件定义紧邻同名的交易。这是因为这真的是一个**外部**事件 - 它只是捕捉申请人申请信用证。它只是指向生成事件的信件。在申请中，它只是用于保持用户界面最新，但通常情况下，这个初始申请可能引发各种处理。
- en: Continue to look through the model file, and you'll see transactions and events
    defined for every step of the process, and sometimes extra attributes relevant
    to that transaction step. Spend a little time looking at these–they are interesting!
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 继续浏览模型文件，你会看到为流程的每个步骤定义的交易和事件，有时还有与该交易步骤相关的额外属性。花点时间看看这些 - 它们很有趣！
- en: 'As we''ve seen, it''s also possible to declare more explicit events, such as
    a high value letter, or a low-risk application. Imagine our application doing
    this with the following events:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，还可以声明更明确的事件，比如高价值信件或低风险申请。想象我们的应用程序用以下事件来做到这一点：
- en: '[PRE39]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Which transactions in the model file do you think these would be associated
    with?
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为模型文件中的哪些交易会与这些相关联？
- en: To determine this, we need to think about the process–a high-value letter is
    known about immediately after application, so it would be associated with the
    `InitialApplication` transaction. However, until the transaction has been initially
    processed by the both banks, and both applicant and beneficiary assessed, it's
    hard to say that the letter is low risk. It means that this event would be more
    closely associated with the `Approve` transaction.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定这一点，我们需要考虑这个过程 - 一个高价值的信件在申请后立即被知晓，因此它将与 `InitialApplication` 交易相关联。然而，直到交易被两家银行首次处理，并且申请人和受益人都被评估之前，很难说这封信是低风险的。这意味着这个事件更可能与
    `Approve` 交易密切相关。
- en: Moreover, in this higher resolution scenario, we would consider creating separate
    transactions for importer bank approval and exporter bank approval, `ImportBankApproval`
    and `ExportBankApproval`.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在这种更高分辨率的情况下，我们会考虑为进口银行批准和出口银行批准创建单独的交易，`ImportBankApproval` 和 `ExportBankApproval`。
- en: Examining the live network
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查实时网络
- en: 'Great–now that we''ve seen how the types of participants, assets, transactions,
    and events are defined in the business network, let''s see how instances of these
    types are created. The Playground tool has another feature that is very nice–it
    allows us to look inside the business network, while it''s running, to see instances
    of these types, and select the Test tab at the top of the Playground page:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 很好 - 现在我们已经看到了业务网络中参与者、资产、交易和事件类型是如何定义的，让我们看看如何创建这些类型的实例。Playground 工具还有另一个非常好的功能
    - 它允许我们在业务网络运行时查看网络内部，以查看这些类型的实例，并在Playground页面顶部选择测试选项卡：
- en: '![](img/43d6df94-417f-44f8-a9d0-993642726ed3.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图像](img/43d6df94-417f-44f8-a9d0-993642726ed3.png)'
- en: 'You''ll see that the view has changed a little. On the left-hand side, we can
    see the participants, assets, and transactions that have been defined for this
    business network: `Bank`, `BankEmployee`, `Customer`, and `LetterOfCredit`, as
    well as transactions. You can select these, and as you do, you''ll see that the
    right-hand pane changes. Try it!'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现视图有点变化。在左侧，我们可以看到为这个业务网络定义的参与者、资产和交易：`银行`、`银行员工`、`客户` 和 `LetterOfCredit`，以及交易。你可以选择这些选项，当你这样做时，右侧的窗格会变化。试试看！
- en: 'Select the `LetterOfCredit` asset, and on the right-hand pane, you''ll see
    the following (expand the view with Show All):'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 `LetterOfCredit` 资产，在右侧窗格上，你将看到以下内容（使用显示所有展开视图）：
- en: '![](img/d0d67e57-a1b7-45c8-b4a2-bffdc626adc3.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图像](img/d0d67e57-a1b7-45c8-b4a2-bffdc626adc3.png)'
- en: Wow–this is interesting! This is an actual letter of credit from our application.
    Let's have a look at the letter in detail, and how it maps to the type structure
    we examined earlier.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 哇 - 这很有趣！这是我们申请的一封实际信用证。让我们仔细看看信件，以及它如何映射到我们之前检查的类型结构。
- en: Examining a letter of credit instance
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查信用证实例
- en: We can see the ID, `L73021 AM`, and the instance information. It's shown as
    a JSON document, and you can see that the structure mirrors that in the `LetterOfCredit`
    definition, but it has real instance data in it.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到ID，`L73021 AM`，和实例信息。它显示为JSON文档，你可以看到结构与 `LetterOfCredit` 定义中的结构相似，但其中包含了真实的实例数据。
- en: 'You can see that every asset and participant contained within the letter has
    a class (`$class`), which is formed from the namespace concatenated with the type
    name. For example:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到信件中包含的每个资产和参与者都有一个类（`$class`），它由命名空间与类型名称连接而成。例如：
- en: '[PRE40]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Notice also how the information for this letter has been captured:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意这封信的信息是如何被捕获的：
- en: '[PRE41]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Finally, notice how the letter is in its final state:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请注意信件处于最终状态：
- en: '[PRE42]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: All of this data is incredibly powerful. Why? Because the type and instance
    information is kept together, just like in a real contract, it can be properly
    interpreted after it's been written. You can imagine how helpful that is for analytics
    tools who like to look for patterns in the data!
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些数据都非常强大。为什么呢？因为类型和实例信息被保留在一起，就像在真实合同中一样，它在编写后可以被正确解释。你可以想象这对喜欢在数据中寻找模式的分析工具有多么有帮助！
- en: 'For reference attributes, we can see that the structure is a little different:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 对于参考属性，我们可以看到结构略有不同：
- en: '[PRE43]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We can see that these attributes are references to participants, and if we
    click on the Participant tab, we''re able to see them! Click on the Bank tab:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这些属性是参与者的引用，如果我们点击参与者选项卡，我们就能看到它们！点击银行选项卡：
- en: '![](img/c39a0d1e-fc8a-4b16-a63f-ef5d47cc8d7c.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![图像](img/c39a0d1e-fc8a-4b16-a63f-ef5d47cc8d7c.png)'
- en: Examining participant instances
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查参与者实例
- en: You can see the two banks in our network, their type, and instance information!
    Click on the different participant and asset tabs, and inspect the data to see
    how the types have become instantiated in the scenario. Spend time on this–it's
    important that you understand this information, link it to types, and really think
    about how it relates to the business network. Don't be deceived–the information
    looks simple–there are some powerful ideas in here that will take a little time
    to connect. However, we encourage you to do this–it's really worth understanding
    how everything links together, so that you can do the same!
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Examining transaction instances
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now click on the All Transactions tab:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/329a4fb7-890e-4c36-88d9-ae9455e968b9.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
- en: You can see the full transaction life cycle of our application run-through.
    (Your times may be a little different!) If you scroll through the transactions,
    you can see exactly what happened in our scenario–Alice applied for a letter,
    Matias approved it, and so on. If you click on view record, you'll be able to
    see the details of an individual transaction.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s look at the `InitialApplication` made by Alice:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b7f770f-8780-4820-ac3e-1c6c017c2345.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
- en: 'We can see the transaction details (we''ve edited them slightly to fit the
    page):'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Notice how we can see the exact details of this transaction! Again, incredibly
    powerful! Spend some time looking at the transaction records in this view.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: Submitting a new transaction to the network
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's a lot more we can do with the Playground; we're now going to interact
    with the business network dynamically!
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that you''ve selected the `LetterOfCredit` asset type in the Test view.
    Notice the Submit Transaction button on the left-hand pane:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f89bd7b8-5913-4a16-bf0c-62940f357317.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
- en: 'We''re going to interact with the business network by submitting a new `LetterOfCredit` application.
    If you press Submit Transaction, you''ll be presented with the following entry
    box:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b162f09-e759-4a71-b320-8c783d5413ae.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
- en: 'In the Transaction Type dropdown, you''ll see all the possible transactions
    listed. Select `InitialApplication` and replace the JSON Data Preview with the
    following data:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Can you see what this transaction describes? Can you see the new `LetterId`
    between Alice and Bob as `Customer` and `Beneficiary`? Can you see the `ProductDetails`,
    `Quantity`, and `Price`?
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: 'If you press Submit, you''ll see that you''re returned to the main view, and
    that a new letter has been created:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e09d8d3f-a0a3-4160-ac97-9d29b87f6d4d.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
- en: Congratulations, you've just submitted a new application for a letter of credit!
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 'But wait! If we''ve interacted with the live network, then what happens if
    we return to our application view. If you got back to Alice''s view, you''ll notice
    that she has a new letter:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9162f52c-914d-4067-8ab6-5171b709323c.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
- en: 'The Hyperledger Composer Playground has allowed us to interact with the live
    business network! Moreover, if we select Matias''s page, we can see the letter
    is waiting for approval:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Composer Playground已经让我们与实时业务网络互动！此外，如果我们选择Matias的页面，我们可以看到该信件正在等待批准：
- en: '![](img/fd927617-3e14-4ee9-b68a-ffbcd95173b2.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd927617-3e14-4ee9-b68a-ffbcd95173b2.png)'
- en: Notice all the attributes are those that you entered in the sample transaction!
    You can now use the Playground to move this letter through its full life cycle.
    We recommend that you spend some time doing this–it will help you solidify your
    knowledge.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 注意所有属性都是您在样本交易中输入的属性！您现在可以使用Playground将此信件移动到其完整生命周期。我们建议您花一些时间这样做——这将帮助您巩固您的知识。
- en: Understanding how transactions are implemented
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解事务如何实现
- en: This is all very impressive, but how does it work–where's the logic that implements
    these transactions that manipulate participants and assets, and creates events?
    To understand this, we need to look at the transaction programs–the code that
    runs when transaction are submitted to the network that refer to these assets,
    participants, and events.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都非常令人印象深刻，但它是如何工作的——实现这些操作的逻辑在哪里，操作参与者和资产，并创建事件？要理解这一点，我们需要查看事务程序——在提交到引用这些资产、参与者和事件的网络的事务时运行的代码。
- en: 'The transaction code is held in a Script File, and if you select Script File on
    the Define tab, you''ll see the following:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 事务代码保存在一个脚本文件中，如果您在Define选项卡上选择Script File，您将看到以下内容：
- en: '![](img/2f87a71a-3b84-4d44-b93a-0da5c2b6ae16.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f87a71a-3b84-4d44-b93a-0da5c2b6ae16.png)'
- en: This is the code that implements transactions! Today, Hyperledger Composer uses
    JavaScript to implement these functions, and that's what you're looking at on
    this page–JavaScript. If you page through the script file, you'll see that there's
    a function for every transaction defined in the model file.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是实现事务的代码！今天，Hyperledger Composer使用JavaScript来实现这些函数，这就是您在此页面上看到的内容——JavaScript。如果您浏览脚本文件，您将看到模型文件中定义的每个事务都有一个函数。
- en: 'Let''s examine one of the transactions we''ve been playing with up to this
    point–the `InitialApplication` transaction. Notice how the function starts:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查到目前为止我们一直在玩的事务之一——`InitialApplication`事务。注意函数的起始方式：
- en: '[PRE46]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The comments and the first line of program code are effectively saying the following
    function implements the `InitialApplication` transaction, which takes an `org.example.loc.InitialApplication`
    type, and assigns it to the locally-scoped `application` variable. In a nutshell,
    it connects program logic to the transaction definition we saw in the model file.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 注释和程序代码的第一行有效地说明了以下函数实现了`InitialApplication`事务，该事务接受`org.example.loc.InitialApplication`类型，并将其赋给了本地作用域的`application`变量。简而言之，它将程序逻辑与模型文件中看到的事务定义连接起来。
- en: 'The first important line of code is the following:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的第一行是以下内容：
- en: '[PRE47]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '`factory.newResource()` creates a new local `LetterOfCredit` in the `org.example.loc`
    namespace, using the identifier supplied by the caller of the function in the
    input `application.letterId` transaction variable. This statement assigns the
    result of this function to a local `letter` variable.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`factory.newResource()`在`org.example.loc`命名空间中使用由函数调用者在输入`application.letterId`事务变量中提供的标识符创建了一个新的本地`LetterOfCredit`。此语句将此函数的结果赋给了本地`letter`变量。'
- en: It's important to understand that this statement has not created a letter in
    the business network; `factory.newResource()` merely creates a correctly shaped
    JavaScript object that can now be manipulated by the following subsequent logic,
    and after it is properly formed using the input provided by the caller (for example,
    the application being used by Alice), it can be added to the business network!
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，此语句并没有在业务网络中创建一封信件；`factory.newResource()`只是创建了一个正确形状的JavaScript对象，现在可以由以下后续逻辑来操作，并且在使用调用者提供的输入正确形成之后（例如，由Alice使用的申请），它可以被添加到业务网络中！
- en: 'Notice how `applicant` and `beneficiary` are assigned:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`applicant`和`beneficiary`是如何赋值的：
- en: '[PRE48]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The transaction makes sure that Alice and Bob's identifiers are placed correctly
    in the letter. In our network, `application.applicant.getIdentifier()` would resolve
    to `resource:org.example.loc.Customer#alice` or `resource:org.example.loc.Customer#bob`.
    The transaction logic systematically constructs the letter of credit using the
    supplied input and information already stored in the business network.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 交易确保Alice和Bob的标识符正确地放置在信函中。在我们的网络中，`application.applicant.getIdentifier()`会解析为`resource:org.example.loc.Customer#alice`或`resource:org.example.loc.Customer#bob`。交易逻辑有条不紊地使用提供的输入和已经存储在业务网络中的信息构建信用证。
- en: 'Next, notice how `issuingBank` and `exportingBank` navigate via the participant
    to their bank. The program logic is navigating the references in the participant
    and asset definitions to do this:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，请注意`issuingBank`和`exportingBank`如何通过参与者导航到其银行。程序逻辑会浏览参与者和资产定义中的引用来做到这一点：
- en: '[PRE49]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: We can see in these statements how the transaction has to use the structure
    that was defined in the model. It can add any proprietary business logic to do
    this, but it must conform to this structure. Examine each line that assigns to
    `letter` and see whether you can understand what's happening in these terms. It
    takes a little getting used to, but it's really important to understand this–the
    transaction is transforming the business network from one state to another using
    this logic.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这些声明中，交易必须使用在模型中定义的结构。它可以添加任何专有的业务逻辑，但必须符合此结构。检查每行分配给`letter`的内容，看看您是否能理解在这些术语中发生了什么。需要花点时间来适应，但理解这一点非常重要
    - 交易通过这种逻辑将业务网络从一个状态转变为另一个状态。
- en: 'Notice the last statement of the letter assignment:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 注意信函分配的最后一条声明：
- en: '[PRE50]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: See how the enum types are being used to set the initial state of the letter.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 看看枚举类型如何被用于设置信函的初始状态。
- en: 'The next really important statement in the function is the following:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数中下一个非常重要的声明是以下内容：
- en: '[PRE51]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This now adds the letter to the business network! At this point, we have created
    a new application for a letter of credit in the business network. The letter we
    created in local storage has been sent to the network, and is now a live asset
    that points to the participants and assets in the network.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这封信已经被添加到了业务网络中！此时，我们在业务网络中为信用证创建了一个新的应用程序。我们在本地存储中创建的信函已被发送到网络，并且现在是一个指向网络中参与者和资产的实时资产。
- en: 'Finally, we emit an event to signify that the transaction has taken place:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们发出一个事件来表示交易已经发生：
- en: '[PRE52]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: As with the letter, we create a local event of the right shape–an `InitialApplicationEvent`,
    complete its details, and `emit()` it. Examine the different transactions and
    their logic to become comfortable with the precise processing of each transaction–you'll
    be richly rewarded for this effort.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 就像处理信函一样，我们创建了一个正确形状的本地事件 - 一个`InitialApplicationEvent`，完善其细节，然后`emit()`它。通过检查不同的交易及其逻辑，您将对每个交易的精确处理变得更加熟悉
    - 这个努力将给您带来丰厚的回报。
- en: Creating business network APIs
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建业务网络API
- en: For the final part of this chapter, we're going to show you how your application
    can interact with these transaction functions in business networks using APIs.
    The sample application and the Playground both interact with the business network
    using APIs.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，我们将展示您的应用程序如何使用API与业务网络中的交易功能进行交互。示例应用程序和Playground都使用API与业务网络进行交互。
- en: Indeed, you can see that from a service consumer's perspective, neither Alice,
    Bob, Matias, nor Ella were aware of the blockchain–they just interacted with some
    user interfaces that resulted in these transaction functions (or similar) being
    executed to manipulate the business network according to the business logic encoded
    in these transaction processing functions.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您可以看到从服务消费者的角度来看，无论是Alice、Bob、Matias还是Ella都不知道区块链 - 他们仅仅与一些用户界面交互，最终导致这些交易功能（或类似的功能）被执行，以根据这些交易处理函数中编码的业务逻辑来操作业务网络。
- en: 'It''s these user interfaces and applications that use APIs to interact with
    the business network. If you''re new to APIs, then you can read about them [here](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Introduction).
    Although more technically accurate, few people use the term **Web API**–it''s
    just **API**:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 正是这些用户界面和应用程序使用API与业务网络进行交互。如果您对API是新手，您可以在[这里](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Introduction)阅读相关信息。尽管更加技术上准确，但很少有人使用术语**Web
    API** - 它就是**API**：
- en: '![](img/9d1b5275-c84a-460e-baec-0d7e92b916a6.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d1b5275-c84a-460e-baec-0d7e92b916a6.png)'
- en: 'Let''s have a look at the APIs for our business network! If you select the
    final tab in the demo, you''ll see the following page:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们业务网络的 API！如果您选择演示的最终选项卡，您将看到以下页面：
- en: '![](img/505ea27d-4faa-4296-809a-1e08d2508b87.png)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![](img/505ea27d-4faa-4296-809a-1e08d2508b87.png)'
- en: This is the Hyperledger Composer REST server. It is a server that's exposing
    the APIs in our business network. These APIs are described using a standard SWAGGER
    format.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Hyperledger Composer REST 服务器。它是一个服务器，正在公开我们业务网络中的 API。这些 API 使用标准 SWAGGER
    格式进行描述。
- en: SWAGGER API definitions
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SWAGGER API 定义
- en: SWAGGER is an open standard for describing APIs–[https://swagger.io/specification/](https://swagger.io/specification/)
    These APIs have been generated by Hyperledger Composer using the same vocabulary
    as defined in the model to describe the participants, applications, and transactions
    that were defined for this business network! It means that the SWAGGER APIs have
    obvious meaning to both the business and technical user.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: SWAGGER 是一种描述 API 的开放标准 – [https://swagger.io/specification/](https://swagger.io/specification/)
    这些 API 是由 Hyperledger Composer 生成的，使用与模型中定义的相同词汇来描述为此业务网络定义的参与者、应用程序和交易！这意味着 SWAGGER
    API 对业务用户和技术用户都具有明显的意义。
- en: For every type of participant, asset, and transaction in the business network,
    there is an API for it.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 对于业务网络中的每种参与者、资产和交易类型，都有相应的 API。
- en: Querying the network using SWAGGER
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SWAGGER 查询网络
- en: 'Select one of these APIs `LetterOfCredit`:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 选择其中一个 API `LetterOfCredit`：
- en: '![](img/7ff0eb02-2df6-4dde-878d-8806ef26e4ba.png)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ff0eb02-2df6-4dde-878d-8806ef26e4ba.png)'
- en: Notice the `GET` and `POST` verbs for this API. Most modern APIs are defined
    using REST and JSON, and that's what you see here. Practice expanding and collapsing
    the views to see all the different options.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 注意此 API 的 `GET` 和 `POST` 动词。大多数现代 API 使用 REST 和 JSON 进行定义，这就是您在此处看到的。练习展开和折叠视图，以查看所有不同的选项。
- en: 'When you''re happy, select `InitialApplication` `GET`:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 当您满意时，选择 `InitialApplication` `GET`：
- en: '![](img/2a3ef080-b5c6-4dfe-9e20-4633fa16bd36.png)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a3ef080-b5c6-4dfe-9e20-4633fa16bd36.png)'
- en: Just like with Playground, you're able to interact with the business network
    using the same APIs as applications. It's quite a bit more technical as a view,
    but that's OK–as a programmer, you should feel comfortable with this.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 就像使用 Playground 一样，您可以使用相同的 API 与业务网络交互。作为程序员，您应该对这个视图感到满意，尽管它要技术得多。
- en: 'The API we''ve selected allows a program to query (`GET`) all the letters in
    a business network. If you select Try it out**!**, you''ll see the following response:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择的 API 允许程序查询（`GET`）业务网络中的所有信件。如果您选择“试一试**！**”，您将看到以下响应：
- en: '![](img/2cd9e549-1036-4006-80b0-d5159f54a48f.png)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2cd9e549-1036-4006-80b0-d5159f54a48f.png)'
- en: This details show you the exact API that was issued. It was a `GET` request
    on the
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 这些详细信息向您展示了发出的确切 API。这是一个在
- en: '`http://localhost:3000/api/LetterOfCredit` URL, and the response body shows
    the data that was returned. You should be able to see that it''s very similar
    in structure to the Playground data, and if you scroll through the response, you''ll
    see the two letters in the network.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:3000/api/LetterOfCredit` URL，响应体显示返回的数据。您应该能够看到它的结构与 Playground
    数据非常相似，如果您滚动浏览响应，您将看到网络中的两封信。'
- en: Testing the network from the command line
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从命令行测试网络
- en: 'You can also interact with the network from a terminal using the `curl` command,
    and the syntax is shown for you:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `curl` 命令从终端与网络交互，并为您显示语法：
- en: '[PRE53]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Try this out in a terminal, and you''ll see the data on the command line:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中尝试此操作，您将在命令行上看到数据：
- en: '![](img/8c36b317-4890-4050-a3f9-d3012ab132be.png)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c36b317-4890-4050-a3f9-d3012ab132be.png)'
- en: It's a lot less beautiful than the Playground or SWAGGER view, but if you're
    a programmer, you know how powerful this is! Think about how this can help with
    automated testing, for example.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 它比 Playground 或 SWAGGER 视图要不那么美观，但如果您是程序员，您知道这有多强大！想想这如何帮助自动化测试，例如。
- en: Creating a new letter using SWAGGER
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SWAGGER 创建新信件
- en: We can also create a new application for a letter of credit from the SWAGGER
    view. Select the `InitialApplication` API.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从 SWAGGER 视图为信用证创建一个新的应用程序。选择 `InitialApplication` API。
- en: 'We''re going to use the `POST` verb to create yet another application for Alice:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `POST` 动词为 Alice 创建另一个申请：
- en: '![](img/3bc323ce-edce-4a20-b25c-bc9d05eb90d9.png)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3bc323ce-edce-4a20-b25c-bc9d05eb90d9.png)'
- en: 'In the `value` box, paste the following data:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `value` 框中，粘贴以下数据：
- en: '[PRE54]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Can you see what this application is for? Can you see how Alice wants to apply
    for a letter to buy `40000` `Mouse mats` from Bob at `5` dollars each?
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 你能看出这个应用的作用吗？你能看到 Alice 想要向 Bob 以每件**5**美元的价格购买`40000`块鼠标垫的信件申请吗？
- en: 'If you press Try it out!, a new letter will be created! You can now view this
    new letter using the SWAGGER console, the application, or the Playground. Let''s
    try each:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击“尝试一下！”按钮，将会创建一个新的信件！你现在可以使用 SWAGGER 控制台、应用程序或 Playground 查看这封新的信件。让我们试一下：
- en: 'This is the view using SWAGGER:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用 SWAGGER 的视图：
- en: '![](img/187783ad-1fa9-4f00-bea0-3f5d3d2d3fac.png)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![](img/187783ad-1fa9-4f00-bea0-3f5d3d2d3fac.png)'
- en: 'This is the view using the Playground:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用 Playground 的视图：
- en: '![](img/9fa923e9-f308-46de-af16-3e3f700c5939.png)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fa923e9-f308-46de-af16-3e3f700c5939.png)'
- en: 'This is the view using the application (Matias''s view):'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用该应用的视图（Matias 的视图）：
- en: '![](img/e5663673-d91b-4c9a-a039-36a59b94078d.png)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5663673-d91b-4c9a-a039-36a59b94078d.png)'
- en: Network cards and wallets
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络卡和钱包
- en: Finally, before we finish this chapter, we're going to add **you** to this business
    network so that you can submit transactions! To do this, we're going to return
    to the **business network cards** and **wallet** that first allowed us to connect
    to the network. Recall that all applications, Playground included, have a wallet
    that contains business network cards that can be used to connect to different
    networks. When an application uses a particular card to connect a network, it
    is identified as a particular participant instance in the network.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在结束本章之前，我们将把**你**添加到这个业务网络，这样你就可以提交交易了！为了做到这一点，我们将返回到最初允许我们连接到网络的**业务网络卡**和**钱包**。请记住，所有应用程序，包括
    Playground，都有一个包含业务网络卡的钱包，可以用来连接不同的网络。当应用程序使用特定卡来连接网络时，它被标识为网络中特定的参与者实例。
- en: 'Let''s create a new participant! On the Test tab, select Customer participants:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个新的参与者！在测试标签页上，选择客户参与者：
- en: '![](img/b1cd9391-e2f8-4d72-85dd-3f26f3e1f7ee.png)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1cd9391-e2f8-4d72-85dd-3f26f3e1f7ee.png)'
- en: 'You''ll see the participant information for Alice and Bob. Click on Create
    New Participant:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到 Alice 和 Bob 的参与者信息。点击“创建新参与者”：
- en: '![](img/739f2240-cce3-47e0-91b5-ec230234dbbc.png)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
  zh: '![](img/739f2240-cce3-47e0-91b5-ec230234dbbc.png)'
- en: 'This page will allow you to issue the API to create a new participant. We''ve
    entered the following details for a new participant, called `Anthony`, who works
    for BlockIT:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面将让你发出 API 并创建一个新的参与者。我们为一个名为`Anthony`的新参与者输入了以下详细信息，他在 BlockIT 工作：
- en: '[PRE55]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Note his identifier, and a reference to Bank of Dinero. Click Create New and
    notice how the participant registry has been updated:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 注意他的标识符和对 Dinero 银行的引用。点击“创建新的”，注意参与者注册表已更新：
- en: '![](img/48b24417-9b12-4005-a710-5d5f38aed3cf.png)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48b24417-9b12-4005-a710-5d5f38aed3cf.png)'
- en: We've created a new participant in the network. (Feel free to use your own details,
    just ensure that your participant has valid data, specifically references to existing
    banks.)
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在网络中创建了一个新的参与者。(也可以自己输入详细信息，只要确保你的参与者有有效的数据，特别是参考现有的银行。)
- en: Click on the **ID registry** under admin. You'll now be presented with a list
    of **identities** associated with the Playground.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**ID注册表**下的管理员。现在你将看到与 Playground 相关的**身份**列表。
- en: 'Whereas Alice''s and Bob''s digital certificates are private to their application,
    here we can see the identities associated with the current playground user–the
    administrator of the business network:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 而 Alice 和 Bob 的数字证书是私有的，只在他们的应用程序中可见，这里我们可以看到当前 Playground 用户（业务网络管理员）相关的身份信息：
- en: '![](img/91f393d1-7396-4346-a224-f64bab8d7b9c.png)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91f393d1-7396-4346-a224-f64bab8d7b9c.png)'
- en: 'Click Issue New ID:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“发出新的 ID”：
- en: '![](img/f107c194-99b2-4af1-b916-e385149cb732.png)'
  id: totrans-376
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f107c194-99b2-4af1-b916-e385149cb732.png)'
- en: 'Enter `ID003` for the ID Name and associate it with the new participant we
    created, `org.example.loc.Customer#Customer003`, and click Create New:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`ID003`为 ID 名称，并与我们创建的新参与者关联，`org.example.loc.Customer#Customer003`，然后点击“创建新的”：
- en: '![](img/c58cf123-f17c-473a-8ed2-74e1ef29728f.png)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c58cf123-f17c-473a-8ed2-74e1ef29728f.png)'
- en: Give the business network card a name, and click Add to wallet.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 为业务网络卡命名，并点击“添加到钱包”。
- en: 'You''ll see that the list of IDs has been updated with `ID003`, associated
    with `Customer003`:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到 ID 列表已更新，关联了`ID003`，与`Customer003`相关：
- en: '![](img/1d852a8d-096e-42bc-bb36-6311ea55c673.png)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d852a8d-096e-42bc-bb36-6311ea55c673.png)'
- en: 'Click on the **My Business Networks** user in the admin tab to return to the
    Composer Playground initial page:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 点击管理员标签下的**我的业务网络**用户，返回到 Composer Playground 的初始页面：
- en: '![](img/3e08adff-e7d8-4abe-8c60-936a6792be0e.png)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e08adff-e7d8-4abe-8c60-936a6792be0e.png)'
- en: We can see that the Playground wallet now contains a new business network card
    that allows you to connect to our network. Click on Connect now for `Cusotmer003Card`.
    You're now connected to the network as `Customer003`, rather than the `Admin`.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到 Playgrond 钱包现在包含了一个新的业务网络卡，允许您连接到我们的网络。点击“现在连接”以使用 `Cusotmer003Card`。您现在作为
    `Customer003` 而不是 `Admin` 连接到了网络。
- en: Access-control lists
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问控制列表
- en: All applications, including the Composer Playground, use a business network
    card from their wallet (a file on the local file system) to connect to the network.
    The card contains the IP address of the network, the participant's name, and their
    X.509 public key. This information is used by the network to ensure that they
    can only have **rights** to perform certain operations against resources in the
    network. For example, only particular bank employees should be able to authorize
    a letter of credit.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 所有应用程序，包括 Composer Playground，都使用来自其钱包的业务网络卡（本地文件系统上的文件）连接到网络。该卡包含网络的 IP 地址、参与者的名称和他们的
    X.509 公钥。网络使用这些信息来确保他们只能对网络中的某些资源执行特定操作的**权限**。例如，只有特定的银行员工才能授权信用证。
- en: 'You can see how these rights are defined for a business network by examining
    the Access Control List (ACL) for the network. Select AccessControl on the Define tab:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查网络的访问控制列表（ACL），您可以看到这些权限是如何为业务网络定义的。在“定义”选项卡上选择“访问控制”：
- en: '![](img/d365a9f8-2b9a-4495-bb1f-157315c31402.png)'
  id: totrans-388
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d365a9f8-2b9a-4495-bb1f-157315c31402.png)'
- en: Scroll through the list to see what rights different users have over the different
    resources in the network. These rules can relate to types or instances, though
    the former is more common. Spend a little time investigating the ACL rules in
    this file.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动查看列表，查看不同用户对网络中不同资源拥有的权限。这些规则可能与类型或实例相关，尽管前者更常见。花一点时间研究此文件中的 ACL 规则。
- en: Summary
  id: totrans-390
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You've learned how to make a real business network, using Hyperledger technology.
    You know how to interact with the business network as a user, as a designer, and
    as an application developer. You know how to define the participants, assets,
    transactions, and events, and how to implement their creation in the code. You
    know how to expose these as APIs so that external applications can consume them!
    You can learn a lot more about Hyperledger Composer and Hyperledger Fabric, consult
    the product documentation to do that. Armed with that information, and the knowledge
    in this chapter, you're in a great place to start building your own business network!
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学会了如何使用超级账本技术建立真实的业务网络。您知道如何作为用户、设计师和应用程序开发人员与业务网络进行交互。您知道如何定义参与者、资产、交易和事件，并如何在代码中实现它们的创建。您知道如何将这些暴露为
    API，以便外部应用程序可以使用它们！您可以通过查阅产品文档来了解更多关于超级账本 Composer 和超级账本 Fabric 的信息。拥有这些信息以及本章的知识，您已经可以开始构建自己的业务网络了！
- en: Let's now turn our attention to how we manage the development lifecycle in a
    blockchain network - how we achieve agility in a blockchain network. We'll look
    at the process and tools that help us set up and manage the day-to-day operations
    of getting blockchain software developed.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转向如何在区块链网络中管理开发生命周期 - 如何在区块链网络中实现敏捷性。我们将研究帮助我们设置和管理日常操作以开发区块链软件的过程和工具。
