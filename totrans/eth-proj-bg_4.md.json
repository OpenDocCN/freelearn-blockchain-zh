["```\npragma solidity ^0.4.17;\n\ncontract SensitiveDataExample {\n\n  bytes32[] userHashes;\n\n  // The backend would take a user-object. For example a simple JSON\n  // {name: \"Kenny\", familyName: \"Vaneetvelde\", address: \"Some Address 123\"}\n  // After hashing this entire object, you can pass it to the function below.\n  // Later, you can re-hash it, to verify the user and data if/when needed.\n  function addUser(bytes32 userHash) {\n    userHashes.push(userHash);\n  }\n\n}\n```", "```\npragma solidity ^0.4.17;\n\ncontract DocumentExample {\n\n  bytes32[] documentHashes;\n\n  function addDocument(bytes32 documentHash) {\n    documentHashes.push(documentHash);\n  }\n\n}\n```", "```\npragma solidity ^0.4.17;\ncontract UserExample {\n\n mapping(address => bool) user_verified;\n mapping(address => bytes32) user_codes;\n\n mapping(bytes32 => address) to_sign;\n mapping(bytes32 => bool) signed;\n\n address owner;\n\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function UserExample() public {\n owner = msg.sender;\n }\n\nfunction addUser(address user, bytes32 hashed_verification) public onlyOwner {\n user_verified[user] = false;\n user_codes[user] = hashed_verification;\n }\n\n function verify(bytes32 verification_code) public {\n if (user_verified[msg.sender] == false && \n sha256(verification_code) == user_codes[msg.sender]) {\n user_verified[msg.sender] = true;\n }\n }\n}\n```", "```\npragma solidity ^0.4.17;\ncontract UserExample {\n\n mapping(address => bool) user_verified;\n mapping(address => bytes32) user_codes;\n\n mapping(bytes32 => address) to_sign;\n mapping(bytes32 => bool) signed;\n\n address owner;\n\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function UserExample() public {\n owner = msg.sender;\n }\n\n function inviteUser(bytes32 documentHash, address user) public onlyOwner {\n to_sign[documentHash] = user;\n }\n\n function signDocument(bytes32 documentHash) public {\n if (msg.sender != to_sign[documentHash]) {\n revert();\n }\n signed[documentHash] = true;\n }\nfunction addUser(address user, bytes32 hashed_verification) public onlyOwner {\n user_verified[user] = false;\n user_codes[user] = hashed_verification;\n }\n\n function verify(bytes32 verification_code) public {\n if (user_verified[msg.sender] == false && \n sha256(verification_code) == user_codes[msg.sender]) {\n user_verified[msg.sender] = true;\n }\n }\n}\n```", "```\n//to_sign[0x121212121212] = 0x121212133293928\n```"]