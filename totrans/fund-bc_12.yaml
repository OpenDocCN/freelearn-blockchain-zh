- en: Blockchain Use Cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've dived into blockchain suitability frameworks, as seen in the
    last chapter, we are now equipped with the information we need to distinguish
    between a blockchain and a non-blockchain use case. In this chapter, we'll be
    focusing on defining broader blockchain use cases, which will help motivate us
    to create implementations for those use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Provenance tracking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payment system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crowdfunding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decentralized autonomous organizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The decentralization achieved by blockchain technology can provide us with a
    number of solutions to many of the existing problems we face with centralized
    systems. Although blockchain can provide solutions to many of the problems we
    face in existing centralized systems, it also has its own set of limitations.
    In the previous chapter, we came across several evaluation frameworks that helped
    us choose the true blockchain use cases. In this chapter, we are going to analyze
    the use cases that are selected by the evaluation framework, so we can justify
    their implementation using a decentralized architecture.
  prefs: []
  type: TYPE_NORMAL
- en: The most obvious blockchain use case involves the participation of multiple
    entities without a trusted authority performing centralized operations; instead,
    the operations are decentralized. There are several use cases that instantly qualify
    for the implementation because of the obvious advantages gained from implementing
    such use cases using blockchain. We have narrowed down the use cases after reviewing
    the feasibility of implementing them to provide solutions to real-world problems.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking provenance in the supply chain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A supply chain is a system of entities that are involved in the process of
    creating a product and distributing it to consumers. This supply chain often involves
    suppliers, manufacturers, wholesalers, retailers, and consumers, where the product
    moves in the direction shown in *Figure 12.1*. The actors involved in the supply
    chain are often spread across several locations, which can make it challenging
    to keep track of the goods in the supply chain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a52455a2-71a1-49c4-b7b1-701997049e4d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: Process flow diagram of a typical supply chain'
  prefs: []
  type: TYPE_NORMAL
- en: Every finished product moves along the supply chain due to the involvement of
    multiple entities during its production and distribution. But due to the complex
    nature of a supply chain, it's hard to keep track of provenance. Most existing
    provenance tracking is performed with the help of trusted third parties because
    none of the entities involved in the supply chain trust each other. Using blockchain
    as a shared ledger among these entities can provide us with an effective way to
    keep track of the provenance of any product in a supply chain. It allows trustless
    entities in the system to believe on the provenance data without allowing a single
    entity to both own and maintain it.
  prefs: []
  type: TYPE_NORMAL
- en: Pain points in a supply chain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every product on the market has to go through several entities before it can
    be consumed by the end user. However, due to the lack of efficient mechanisms
    to track provenance, there have always been a number of concerns regarding the
    supply chain. Such concerns can fall under the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: End users are often misinformed about the origin of the product, and in many
    cases are defrauded by being supplied a sub-optimal product. Any information about
    the product could also be falsified by any of the entities in the supply chain,
    intentionally or unintentionally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lower-end supply chain entities, such as suppliers and manufacturers, are exploited
    by the big box retailers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The existing process makes the supply chain opaque, and its entities fail to
    analyze supply and demand data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These points summarize the main problems faced in a typical supply chain in
    which there is no effective mechanism for keeping track the ownership of products.
    This emphasizes the need for a fair way of tracking products, and this is where
    blockchain promises a compelling solution.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain as a solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve already come across the concept of proof of ownership in [Chapter 7](6bcd989e-2411-4096-91e1-943698f1702e.xhtml),
    *Diving into Blockchain – Proof of Ownership*. As a reminder, proof of ownership
    uses digital identity and digital assets to track the provenance of any asset
    using a public ledger. Similarly, each entity in the supply chain will have a
    digital identity that can own an asset at any given moment. A sophisticated solution
    to provenance tracking using blockchain will have the following stages:'
  prefs: []
  type: TYPE_NORMAL
- en: The supply chain entities register as participants in the provenance tracking
    system
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A digital asset with a unique identity will be created by the initial supplier,
    who often supplies raw materials
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The asset is then transferred to the next supplier or manufacturer, both physically
    and digitally
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The manufacturer will use the same identity for the product, along with a label
    for each transformed product, so that they can be traced back to the source
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the retailers can transfer the product to the consumers when they receive
    the assets
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When provenance tracking in the supply chain is implemented using digital assets
    and identities with the help of blockchain, the supply chain can benefit from
    many of the properties seen in blockchain. The supply chain process requires the
    following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Multiple entities can perform both read and write operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transparency of every transaction is desired so that each entity is aware of
    the supply and demand information of the entire supply chain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The transaction history requires integrity and immutability so that a product
    can be tracked down to its source. Immutability ensures that no participants or
    potential attackers will be able to modify the provenance data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High transaction speed is not desired because supply chain information doesn't
    require real-time data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The desired features of a supply chain show that this use case is suitable to
    be implemented using blockchain because it meets all the requirements of the blockchain
    decision model discussed in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain implementation of the supply chain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Provenance tracking in a supply chain can be implemented by using many of the
    existing blockchain platforms, including some of the platforms we've already discussed,
    such as Ethereum, NEO, or MultiChain. However, one specific project, called **Hyperledger
    Sawtooth**, has already been widely adopted by enterprises in many supply chain
    use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperledger Sawtooth is a project under the Hyperledger umbrella project for
    open source blockchain projects. The Sawtooth project was originally contributed
    by Intel, and it allows consensus algorithms to be plugged into the core software.
    The Sawtooth blockchain supports both permissioned and permissionless implementations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hyperledger Sawtooth has a modular architecture that allows its components
    to be easily manipulated. It provides a scalable solution with high transaction
    throughput when compared to the other blockchain platforms. The Sawtooth network
    mainly consists of two types of participants: **clients** and **validators**.
    Clients send transactions to the blockchain network, while validators ensure that
    they are validated and included in the blockchain. Validators follow the consensus
    mechanism and maintain the global state of the ledger. Sawtooth validators validate
    each transaction based on business logic that is specified in a component called
    a transaction processor. The transaction processor is the core of any distributed
    application created using the Sawtooth platform. It describes the application
    with the help of states and transaction logic. As a result, each transaction created
    by the client will be validated using the transaction processors.'
  prefs: []
  type: TYPE_NORMAL
- en: To showcase a supply chain implementation, we are going to use an application
    called **Sawtooth Supply Chain**, which was built on top of Hyperledger Sawtooth.
    This application was created to allow users to track goods in a supply chain,
    thus allowing them to keep track of ownership and the other properties of the
    goods, such as temperature, weight, and location.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the participants and components of Sawtooth Supply Chain can be seen in
    *Figure 12.2*. The client will communicate with the blockchain through the **Representational
    State Transfer** (**REST**) web interface, which is provided by the validator
    node. The transaction processor of the supply chain application, which is present
    in each validator node, will handle the different types of transaction, such as
    creating, transferring, and accepting a new asset record:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b1c2ec5-e60f-42a1-ae85-be0ed8c4c11a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: Architecture diagram of Hyperledger Sawtooth Supply Chain'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: The Sawtooth Supply Chain can be downloaded from the GitHub repository
    here: [https://github.com/hyperledger/sawtooth-supply-chain](https://github.com/hyperledger/sawtooth-supply-chain).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The application has several different components and can be executed using
    `docker-compose` by running each component as a container. Once the code has been
    cloned, and `docker-compose` has been set up, the containers can be initiated
    using `docker-compose`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s worth noting that `docker-compose` will take several minutes to set up
    all the containers. Once everything has been set up, the following necessary components
    of Sawtooth Supply Chain will be created:'
  prefs: []
  type: TYPE_NORMAL
- en: The Sawtooth blockchain and the supply chain's REST API endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The supply chain transaction processor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database (**RethinkDB**) required for the Sawtooth node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client application used to interact with the blockchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of those components will run as independent services on each Sawtooth node.
    The Sawtooth Supply Chain will create a client application in which each entity
    of the supply chain can register and manage the assets. Sawtooth Supply Chain
    then launches a client application called **AssetTrack** on local port `8021`.
    The entities will be part of the supply chain once they are registered as agents
    in the application. Both public and private key pairs will then be generated for
    each entity, and the entity can be identified by its public key.
  prefs: []
  type: TYPE_NORMAL
- en: A logged-in entity can add an asset with a set of properties and submit transactions.
    The asset can only be updated with different properties and transferred to a different
    owner by the existing owner of the given asset. Every entity in the supply chain
    is also able to view all the assets and agents, but only the owner of an asset
    can move an asset to a different entity, thus ensuring the traceability of every
    asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the same time, Sawtooth Supply Chain also provides us with shell access
    through a Docker container that we can use to run arbitrary scripts that will
    automatically update the supply chain data. The following Docker command can be
    used to log in to the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we are logged into the shell, a script to update some sample assets can
    be executed after navigating to the `server` folder with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This example implementation will help you to understand provenance tracking
    by including multiple entities in a supply chain.
  prefs: []
  type: TYPE_NORMAL
- en: More details about the Sawtooth Supply Chain transaction family can be found
    in the official documentation: [https://sawtooth.hyperledger.org/docs/supply-chain/](https://sawtooth.hyperledger.org/docs/supply-chain/).
  prefs: []
  type: TYPE_NORMAL
- en: Financial system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finance has always been one of the biggest use cases of blockchain, dating back
    to the invention of Bitcoin. Blockchain, at face value, seems to be the best fit
    for many of the implementations that affect the global economy, whether it's banking,
    stock exchanges, or payment networks. Yet, in the past, financial systems have
    been manipulated by centralized authorities, even in the global economy, due to
    the wide variety of solutions for different financial systems available across
    the world and the barriers between them; there is a lot of complexity involved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Banking systems are the largest financial institutions in the world. These
    banking systems are regulated differently by each nation, and this has resulted
    in the creation of barriers when it comes to cross-border financial services.
    As seen in *Figure 12.3*, a banking transaction between two users, who are situated
    in two different regions, is regulated by different authorities, with each region
    having a corresponding bank that helps to communicate and settle transactions
    securely along the border:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba489f1d-0932-45c1-a102-4e7284d309da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: Process flow diagram of a cross-border transaction'
  prefs: []
  type: TYPE_NORMAL
- en: Today, banking institutions allow their users to perform fund transfers online
    using different payment systems. Most countries support **Real Time Gross Settlement**
    (**RTGS**) payment systems in order to settle transactions between banks in real
    time. There are numerous other payment systems that support inter-bank transactions
    at a domestic level with small fees; for instance, India has **National Electronic
    Funds Transfer** (**NEFT**), **Immediate Payment Service** (**IMPS**), and **Unified
    Payments Interface** (**UPI**) as its payment systems. But when a transaction
    has to be performed between banks from different nations, the banks perform a
    wire transfer using secure systems such as **SWIFT** or **Fedwire**. Although
    these payment networks function as expected, they have several limitations when
    implemented on a global scale.
  prefs: []
  type: TYPE_NORMAL
- en: Due to all the complexities involved in creating a payment system, there is
    a need for a single system that can be adapted to create an efficient payment
    network. Blockchain technology can help us to remove the barriers between financial
    institutions by allowing trustless entities to communicate efficiently. Back when
    Bitcoin was created, it was done with the intention of providing a payment network
    that can be used across borders as it cannot be regulated by any single entity.
  prefs: []
  type: TYPE_NORMAL
- en: Pain points in the payment system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The complex payment system used by the banking system has a set of limitations
    when collaborating with different entities in the system. In the following list,
    you will be introduced to some of the limitations of the existing payment system:'
  prefs: []
  type: TYPE_NORMAL
- en: Not suitable for huge fund transfers due to the daily transaction limit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You'll often encounter high transaction fees.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inter-bank transactions are settled slowly. Although current payment systems
    provide fast transaction settlement for domestic banks, cross-border transactions
    are still painfully slow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may find some payment systems only function during the working hours of
    the bank.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since all the payment systems are still centralized, they are susceptible to
    both errors and attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although banking transactions can be performed electronically, it's worth remembering
    that not all institutions are equipped to handle digital transactions, and for
    some, the use of physical currencies further complicates the financial system.
    The creation of an unforgeable physical currency is expensive and also has issues
    such as it being difficult to verify the originality of such currencies. All of
    these complexities have led to a corrupt financial system.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain as a solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Blockchain was the product of Bitcoin, and was developed to replace the current
    payment system with peer-to-peer electronic cash. Even so, since the development
    of both Bitcoin and blockchain, the technology has grown to be much more than
    just an alternate payment system. The properties of blockchain provide a lot of
    scope to develop solutions to the issues in payment systems and other financial
    systems as well. An efficient payment system requires the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: Real-time settlement of transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Low fees for domestic and international transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No limitation on the amount that can be transferred
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure communication and record, keeping mechanisms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain, with the help of decentralized networking, could be used to build
    a system that removes the intermediaries in the payment system, thus achieving
    a fast and cheap solution. However, since liquidity can be instantly transferred
    to the recipient, there isn't any limit on the transaction amounts. Likewise,
    blockchain's consensus mechanism inherently secures the immutable ledger.
  prefs: []
  type: TYPE_NORMAL
- en: The payment system use case we have discussed satisfies the blockchain decision
    model since it requires most of the properties of blockchain. However, confidentiality
    can be a concern in the implementation of blockchain as the transaction information
    is transparent in a public blockchain. But you'll find that most blockchain implementations
    of payment systems involve both banks and other financial institutions as the
    end users, not the bank account holders themselves. Therefore, it provides a way
    to perform private transactions and obscure the private details from third-party
    observers. Even the payment system that performs payment transactions directly
    between end users could make use of anonymous transactions to preserve privacy,
    as discussed in [Chapter 8](02eed23a-0a39-4a19-8d88-a72a810ddb0d.xhtml), *Blockchain
    Projects*.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain implementations of a payment system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we are about to discuss, there are several implementations that are trying
    to provide better solutions than the existing financial systems with the help
    of blockchain technology. Ripple and Stellar are two platforms that provide a
    network to act as a bridge between the participants and help remove the need for
    any other intermediaries. The network setup between the banks acts as a cross-border
    payment system and even performs currency exchange without much delay. Let's now
    delve more into both Ripple and Stellar.
  prefs: []
  type: TYPE_NORMAL
- en: Ripple
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ripple is a decentralized ledger-based network that allows the transfer of a
    digital asset known as XRP. Ripple was launched with the vision and aim of building
    a cryptocurrency for financial institutions, such as banks, that enables cross-border
    fund transfer at low cost.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike other cryptocurrencies, Ripple doesn''t create a parallel payment system.
    Instead, it provides a network called **RippleNet** for the existing payment system
    to settle global payments. Ripple currently provides three different types of
    payment solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xCurrent**: This is a software solution for sending and receiving cross-border
    payments between banks with end-to-end tracking; transactions are securely settled
    in within seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**xVia**: This allows users to send international funds through payment providers
    using RippleNet. It provides a set of APIs that can be directly used by the users
    to send payments globally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**xRapid**: This uses Ripple''s digital asset, XRP, as the liquidity for cross-border
    payments. It uses exchanges to convert funds between XRP and the local currency.
    The greater the amount of XRP on the exchanges, the better the system works. It
    also removes the need for banks to own the pre-funded accounts in local currencies
    around the world.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A few of the use cases for payment providers using Ripple can be found at [https://ripple.com/use-cases](https://ripple.com/use-cases).
  prefs: []
  type: TYPE_NORMAL
- en: Stellar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stellar is an open source platform that supports cross-border transactions by
    performing an exchange of value between a pair of currencies. It was designed
    to connect banks, payment systems, and the end users with a more reliable system
    at a cheaper cost.
  prefs: []
  type: TYPE_NORMAL
- en: The Stellar network is a collection of distributed nodes called **Stellar Cores**
    that functions using **Stellar Consensus Protocol** (**SCP**). Any payment application
    can be built on top of the Stellar network. Stellar provides an HTTP API called
    **Horizon** to communicate with the network. To build a payment network that can
    perform conversion between a pair of currencies, a payment architecture that can
    help to perform the exchange is required. The architecture consists of trusted
    entities called **anchors**, which will create credits in the Stellar network
    for every deposit. Financial institutions such as banks are often the anchors
    in the payment system. To send and receive payments, Stellar needs federation
    and compliance servers, and a bridge server to coordinate these servers.
  prefs: []
  type: TYPE_NORMAL
- en: More details about the Stellar network can be found at [https://www.stellar.org/developers/guides/get-started/index.html](https://www.stellar.org/developers/guides/get-started/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Stellar provides several payment solutions, including faster micropayments and
    low-cost remittances. A great thing about Stellar is that it's already been applied
    in a select few real-world use cases and recently has partnered with several companies
    including IBM, Deloitte, SureRemit, and KlickEx to perform cross-border transactions
    and solve remittance challenges.
  prefs: []
  type: TYPE_NORMAL
- en: You can find out more details about Stellar use cases at [https://www.stellar.org/how-it-works/use-cases](https://www.stellar.org/how-it-works/use-cases).
  prefs: []
  type: TYPE_NORMAL
- en: Crowdfunding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Crowdfunding is a way of raising small amounts of funds from a large audience
    in order to support a particular cause. Crowdfunding, is often used when you need
    to create initial funding for start-up ideas, often ones that are in the early
    stages of their development. In recent years, crowdfunding has transformed the
    way of raising capital by getting funding from multiple participants and eliminating
    entities such as banks and venture capitalists.
  prefs: []
  type: TYPE_NORMAL
- en: 'Crowdfunding can be organized for any kind of initiative, including charity,
    the arts, and community-based projects. Depending on the organization''s intentions,
    various types of crowdfunding can be used, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reward-based**, in which the supporters of the crowdfunding campaign are
    rewarded with goodies or early access to the product itself. Online platforms
    such as Kickstarter and Indiegogo offer reward-based crowdfunding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Equity-based**, in which the contributor to the crowdfund is offered equity
    in the company based on the amount they contribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debt-based** is similar to borrowing money from banks, but the public lends
    the money instead of a centralized bank. The lenders will earn interest for the
    investment, similar to loans in the traditional banking system. The interest rates
    are fair to both the borrowers and lenders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Donation-based**: is something often used by charitable organizations, open
    source projects, or any other non-profit organizations to fundraise for different
    causes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the mentioned crowdfunding types will have at least three actors: an initiator,
    a platform provider, and supporters, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27e56afb-5fbd-48d5-aa11-a8b8d769a658.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: Actors in crowdfunding'
  prefs: []
  type: TYPE_NORMAL
- en: Successful crowdfunding will make sure that the crowdfunding campaign is advertised
    in an effective manner on the platform. Crowdfunding platforms should make sure
    that the funding operation is seamless for both the crowdfund initiator and the
    supporters. Blockchain technology allows tokens to be easily created and transferred
    in a decentralized network without the need for any intermediary to maintain the
    crowdfunding platform. A crowdfund initiator will start the token distribution
    process, called the **initial coin offering** (**ICO**). A supporter will fund
    the ICO, and subsequently receive tokens for the amount they contributed. These
    tokens will have a value during the ICO phase, and their value may vary after
    the ICO. The tokens could sometimes even represent the equity of an organization
    that offers the tokens.
  prefs: []
  type: TYPE_NORMAL
- en: Pain points in crowdfunding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Crowdfunding has many advantages over conventional funding, such as that it
    provides the opportunity for anyone to create or fund a project effortlessly.
    That being said, it does have limitations:'
  prefs: []
  type: TYPE_NORMAL
- en: Crowdfunding still needs to create agreements between the initiator and the
    contributor for most of the funding process if it involves reward, equity, or
    debt.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some crowdfunding formats don't provide a flexible investment option for the
    supporter, which results in a lack of participation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The supporters of a project need to trust that they will earn their equity or
    reward after funding the project, so they will need to trust the crowdfunding
    platform and the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most crowdfunding will be initiated by non-profit organizations who are following
    the donation model. With this method, there tends to be a limited number of supporters
    when using this model, and it's common that by using this method, the organizations
    tend to fail to reach their target.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain as a solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Blockchain provides a token distribution mechanism in a decentralized network
    by creating ICOs. Executing an ICO is much simpler than any other kinds of crowdfunding.
    A typical ICO will involve the following stages:'
  prefs: []
  type: TYPE_NORMAL
- en: A project looking to raise money will launch the ICO by specifying the ICO structure,
    such as the initial token value, the total token limit, the token sale period,
    and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the token sale begins, supporters can invest in the project by funding
    the project with either a fiat currency or existing cryptocurrencies. Supporters
    will receive tokens equivalent to the amount invested.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similar to other crowdfunding solutions, if the ICO doesn't meet the goal, the
    campaign is said to be unsuccessful, and funds will be returned to the investors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A successful ICO can use the funds to execute the roadmap of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An ICO is often compared to an **initial public offering** (**IPO**), where
    private organizations offer shares to the public. But there are several features
    that distinguish ICOs from IPOs, as mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: ICOs are not strictly regulated by most governments across the world. Although
    this makes it easier to launch an ICO, it also encourages fraudulent crowdfunding.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since token distribution in an ICO is decentralized, there is no single party
    managing the funding operation, unlike IPO.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's cheaper and easier to launch an ICO compared to an IPO.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ICOs are conducted by organizations that are at the initial stage, whereas IPOs
    are often conducted by well-established private organizations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IPOs are offered by corporations that are private and wish to raise capital
    by offering stocks to public investors. Due to the complex and lengthy procedure
    involved in the IPO, the companies seek the help of investment banks to help with
    the process.
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain implementation of crowdfunding using an ICO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An ICO is created in a decentralized network with the goal to distribute tokens
    in order to raise funds for a given project. Since token distribution is performed
    in a decentralized network, the entire logic of the ICO is written in smart contracts.
    These contracts are then deployed in the blockchain network and executed by the
    blockchain nodes when performing any ICO operations.
  prefs: []
  type: TYPE_NORMAL
- en: ICOs are mostly launched on existing blockchain networks, such as Ethereum,
    NEO, Wanchain, and Waves. Both Ethereum and NEO are widely used to develop and
    deploy smart contracts with the aim to create tokens and launch ICOs. Both of
    these platforms have proposed standards to program the smart contracts to implement
    the tokens that are distributed during the ICO.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ethereum has ERC-20, ERC-223, and ERC-721 token standards. ERC-20 is a token
    standard for creating fungible tokens, and it''s the most widely used token for
    ICOs. In the following code block, we can view a code snippet showing the interface
    of the smart contract for ERC-20:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: A summary of the specification of ERC-20 as proposed in the **Ethereum Improvement
    Proposal** (**EIP**) 20 can be found at [https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md).
  prefs: []
  type: TYPE_NORMAL
- en: The ERC-223 token standard was designed to both provide better security and
    reduce the GAS usage in transactions. Both ERC-20 and ERC-223 tokens are fungible
    tokens, which means that every single token is identical to the others. The ERC-721
    token standard was proposed to offer non-fungible tokens, where each created token
    is unique.
  prefs: []
  type: TYPE_NORMAL
- en: Although ERC-721 tokens are not used in typical ICOs, they are gaining popularity
    in several decentralized applications. Collectible crypto assets such as the ones
    used by CryptoKitties use ERC-721 tokens.
  prefs: []
  type: TYPE_NORMAL
- en: 'The NEO platform also offers a token standard, referred to as NEP5\. These
    are fungible tokens, and the platform allows every token using the same standard
    to transact with others. An NEP5 token implements the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A summary of the methods used in the NEP5 specification can be found at [https://github.com/neo-project/proposals/blob/master/nep-5.mediawiki](https://github.com/neo-project/proposals/blob/master/nep-5.mediawiki).
  prefs: []
  type: TYPE_NORMAL
- en: To get deeper insights into ICO implementation, we are going to deploy an ICO
    template that creates a token that implements all the crowdfunding functionalities.
    Since we are already familiar with the deployment of NEO smart contracts, let's
    deploy a NEP5 token-based ICO template to the NEO blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: The ICO template programmed in Python that is developed by NEX, a decentralized
    exchange platform that can be found at [https://github.com/neonexchange/neo-ico-template](https://github.com/neonexchange/neo-ico-template).
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we must ensure that neo-python is configured in Python 3.6\. Refer
    to [Chapter 7](6bcd989e-2411-4096-91e1-943698f1702e.xhtml), *Diving into Blockchain
    – Proof of Ownership*, to find out more about configuring NEO blockchain nodes
    using neo-python. Likewise, we must ensure that a private blockchain is set up,
    as mentioned in [Chapter 7](6bcd989e-2411-4096-91e1-943698f1702e.xhtml), *Diving
    into Blockchain – Proof of Ownership*. The next step is to launch the NEO shell
    to connect to this private blockchain, which can be done by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the sample wallet that is preloaded with NEO and GAS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Once the ICO template has been cloned from [https://github.com/neonexchange/neo-ico-template](https://github.com/neonexchange/neo-ico-template),
    we can go ahead with building and deploying the ICO smart contract; we need to
    understand some of the configurations of the smart contract.
  prefs: []
  type: TYPE_NORMAL
- en: A set of configurations can be found in the `nex/token.py` file. The configurations
    related to token and ICO sale include the token name, symbol, token owner, total
    supply, initial amount to the owner, tokens per NEO, and tokens per GAS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ICO smart contract has some methods that can only be executed by the owner,
    as shown in the sequence diagram shown in *Figure 12.5*. So, it is necessary to
    provide owner information (`TOKEN_OWNER`) in the `nex/token.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/414d1046-9003-4021-97bc-09eadef595bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.5: Sequence diagram of an ICO campaign'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the smart contract has been configured, it needs to be built and deployed
    to the NEO blockchain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After providing all the details during deployment, NEO shell outputs the hash
    of the contract. Here, `0xce4a9966dfd3c7c02b48646a6aac281e4c914c2d` is the address
    of the smart contract. This address can be used to perform any ICO operations
    using the `testinvoke` command, as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `deploy` operation can be only performed by the token owner that we have
    already configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The ICO is said to be live after the `deploy` method is invoked. Methods such
    as `totalSupply` and `circulation` can be invoked by any of the participants:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: These methods would return the total number of tokens in supply (10 million)
    and the total number of tokens initially assigned to the owner (2.5 million),
    as configured in the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this ICO template, the token owner has to add the participants who want
    to take part in the crowd sale by registering them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Registered participants can then participate in the crowdfunding by attaching
    either NEO or GAS to mint ICO tokens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The newly created token has to be imported to the wallet to reflect the created
    tokens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `wallet` command will then reflect the newly created `PCKT` token in the
    wallet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The newly created `PCKT` coin can then perform any of the NEP5 methods, such
    as `transfer` and `allowance`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ICO in Ethereum would follow a similar procedure.
  prefs: []
  type: TYPE_NORMAL
- en: A sample crowdfunding smart contract implementation using Ethereum can be found
    at [https://www.ethereum.org/crowdsale](https://www.ethereum.org/crowdsale).
  prefs: []
  type: TYPE_NORMAL
- en: There are several crypto asset issuance platforms that can help to create and
    manage all ICO operations without creating and deploying the smart contracts manually.
    Some examples include CoinLaunch, Coinfactory, and MyContract, which are some
    of the most popular platforms for conducting ICOs.
  prefs: []
  type: TYPE_NORMAL
- en: Non-profit autonomous organizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Non-profit organizations are institutions that provide goods and services without
    seeking a profit. These organizations are run by volunteers for a particular cause,
    with some prime examples being charities, **non-governmental organizations** (**NGOs**),
    or even any voluntary organization. Although most of these organizations are operated
    by volunteers, each is controlled by an autonomous institution.
  prefs: []
  type: TYPE_NORMAL
- en: A non-profit project run by an autonomous organization has a lot of limitations
    and may not always be corruption free. However, they do tend to bring a lot of
    centralization to the decision-making process, which might lead to a lot of controversies.
    Likewise, autonomous organizations can be decentralized by introducing blockchain
    technology to remove any intermediaries in the organization. Decentralization
    in such organizations provides them with great benefits due to the fact that a
    non-profit organization should not be completely owned by any authority.
  prefs: []
  type: TYPE_NORMAL
- en: Pain points in non-profit autonomous organizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed, a non-profit project that is governed by an autonomous organization
    brings a lot of centralization to the organization''s operations. Several pain
    points can be observed in organizations that govern volunteer-based projects:'
  prefs: []
  type: TYPE_NORMAL
- en: A lack of transparency in the organization's operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centralization of power in decision-making can result in a limited set of people
    in the organization being involved in decision-making
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lack of communication with external organizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lack of transparency and centralization of power in the autonomous organization
    can prevent supporters of the non-profit organization from looking into the project's
    progress or becoming involved in decision-making. This may result in corruption
    within the organization, leading to unsuccessful campaign management. You can
    achieve transparency and distribute power among the members of the community by
    creating a **decentralized autonomous organization** (**DAO**).
  prefs: []
  type: TYPE_NORMAL
- en: Blockchain as a solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Decentralizing an autonomous organization is the best way to prevent corruption
    in such institutions. A DAO can be constructed among trustless entities with the
    help of blockchain technology. In such cases, a non-profit organization should
    be transparent and provide distributed governance. A blockchain-based DAO could
    achieve this by maintaining a public ledger, thus guaranteeing transparency and
    disintermediation.
  prefs: []
  type: TYPE_NORMAL
- en: 'A non-profit DAO will have the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: Transparency of all the transactions of the organization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Self-governing by removing any intermediaries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlled by the shareholders. The supporters of the project could be involved
    in decision-making.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifications to rules of the DAO must be approved by the community.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the properties of the non-profit DAO conform to the conditions of the blockchain
    decision tree, which makes DAOs an ideal use case for blockchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain implementation of a non-profit DAO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A non-profit DAO is implemented by maintaining a public ledger that is governed
    by the trustless entities in the network. The DAO can be joined by anyone who
    is willing to contribute to or monitor the project, and at the same time, the
    rules of the DAO are decided by the community, rather than the autonomous organization.
    All of the organization's rules are written in a smart contract and are deployed
    to the blockchain. Any modifications to the rules must be agreed by the entire
    community.
  prefs: []
  type: TYPE_NORMAL
- en: Non-profit, NGO, or government welfare projects can be implemented using DAOs
    to ensure complete transparency of the process.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've analyzed a selection of blockchain use cases in detail,
    and saw how they suited being implemented using blockchain technology. We also
    successfully picked use cases such as provenance tracking for a supply chain,
    a payment system, crowdfunding, and DAOs.
  prefs: []
  type: TYPE_NORMAL
- en: By reading this chapter, we've explored how to approach and analyze a use case
    before selecting the right blockchain technology for its implementation. This
    chapter also helped to blend the essence from all the topics we have explored
    throughout this book about blockchain technology and quickly decide on the implementation
    of its use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have concluded the final chapter in our journey of exploring the
    foundations of blockchain technology, we should be motivated enough to be a part
    of the continuously evolving, and intriguing, world of blockchain technology.
  prefs: []
  type: TYPE_NORMAL
