["```\nnpm install web3\n```", "```\nnpm install -g truffle\n```", "```\npragma solidity ^0.4.24;\n\n//This is a test comment, details about the contract can be added here\n/*details like Total supply, contract address, Name, Symbol an decimals which will help someone knowing about the contract instead of finding these details within the source code \n\n*/\n\ncontract Gotham{\n\n string public name;    \n    string public symbol;\n    uint8 public decimals;\n    //most suggested decimal places in 18\n   uint256 public totalSupply;\n\n}\n```", "```\ncontract Gotham{\n\n    string public name;    \n    string public symbol;\n    uint8 public decimals;\n    //most suggested decimal places in 18\n    uint256 public totalSupply;\n\n//Constructor\n\n    constructor() public {\n        symbol = \"GOTH\";         //This is the symbol of our Token\n        name = \"GothCoin\";       //This is the name of our Token \n        decimals = 12;           /* These are the number of decimal places it can have,  it is suggested to have 18 decimal places */\n        totalSupply = 100000;    //total supply of coins allowed \n        }\n\n}\n```", "```\ncontract ERC20 {\n\n     function totalSupply() public constant returns (uint);\n     function balanceOf(address tokenOwner) public constant returns (uint balance);\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n     function transfer(address to, uint tokens) public returns (bool success);\n     function approve(address spender, uint tokens) public returns (bool success);\n     function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n     event Transfer(address indexed from, address indexed to, uint tokens);\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n```", "```\ncontract Arithmetic {\n\n   function Addition(uint a, uint b) public pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function Subtraction(uint a, uint b) public pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function Multiplication(uint a, uint b) public pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function Division(uint a, uint b) public pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n```", "```\ncontract Im_owner {\n\n    address public owner;\n    address public newOwner;\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n```", "```\ncontract Gotham is ERC20, Im_owner, arithmetic {\n\n    string public symbol;\n    string public name;\n    uint8 public decimals;\n    uint public totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n    // Constructor\n\n    constructor() public {\n        symbol = \"GOTH\"; //This is the symbol of our Token\n        name = \"GothCoin\"; //This is the name of our Token \n        decimals = 12; /* These are the number of decimal places it can have, it is suggested to have 18                             decimal places */\n        totalSupply = 100000; //total supply of coins allowed \n        }\n\n    // Total supply\n\n    function totalSupply() public constant returns (uint) {\n        return totalSupply - balances[address(0)];\n    }\n\n    // Get the token balance for account tokenOwner\n\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n    // Transfer the balance from token owner's account to to account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    //This function returns true when this is successful\n\n    function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    // Token owner can approve for spender to transferFrom(...) tokens\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces \n\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    // This function transfers tokens from the from account to the two account\n    // \n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the from account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = safeSub(balances[from], tokens);\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    // Returns the amount of tokens approved by the owner that can be transferred to spender's account\n    // transferred to the spender's account\n\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n    }\n}\n```"]