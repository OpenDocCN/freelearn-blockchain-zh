- en: Ethereum Accounts and Ether Tokens
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊账户和以太代币
- en: In the previous chapters, we discussed Ethereum, smart contracts, and how the
    development of a smart contract takes place, including the development of the
    ERC20 token, based on Ethereum blockchain. We also discussed how the development
    of Ethereum takes place along with the deployment of a smart contract and token
    on the Ethereum blockchain.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们讨论了以太坊、智能合约，以及智能合约的开发过程，包括基于以太坊区块链开发ERC20代币。我们还讨论了以太坊的开发过程以及在以太坊区块链上部署智能合约和代币的过程。
- en: In this chapter, we will discuss the Ethereum account in detail and also study
    an ether token; this discussion will help us to better understand decentralized
    applications. We will also briefly discuss some popular Ethereum tokens and smart
    contracts. We will also discuss some important topics such as the **transaction
    sub state**, the validation of an Ethereum Block, and the various steps involved
    in the process of block finalization. Following this, we will briefly discuss
    some disadvantages of an Ethereum-based smart contract and currencies, toward
    the end of this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细讨论以太坊账户，还将研究一种以太代币；这个讨论将帮助我们更好地理解去中心化应用。我们还将简要讨论一些热门的以太坊代币和智能合约。我们还将讨论一些重要的话题，比如**交易子状态**，以太坊区块的验证以及区块最终化过程中涉及的各个步骤。随后，我们将简要讨论以太坊智能合约和货币的一些缺点。
- en: 'These are the topics which are covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: The Ethereum state transition function
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊状态转换函数
- en: The genesis block
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创世区块
- en: Transaction receipts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易收据
- en: The transaction sub state
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易子状态
- en: Validating a block
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块验证
- en: The disadvantages of Ethereum-based tokens
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊代币的缺点
- en: Introducing Ethereum accounts
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍以太坊账户
- en: The state in Ethereum is made up of objects, each known as an account. Each
    account in Ethereum contains a 20-byte address. Each state transition is a direct
    transaction of value and information between various accounts. Each operation
    performed between or on the accounts is known as a *state* *transition*. The state
    transition in Ethereum is done using the Ethereum state transition function.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中的状态由对象组成，每个对象称为一个账户。以太坊中的每个账户包含一个20字节的地址。每次状态转换都是各个账户之间的价值和信息的直接交易。在账户之间或对账户进行的每次操作被称为*状态*
    *转换*。以太坊中的状态转换是通过以太坊状态转换函数完成的。
- en: 'The state change in Ethereum blockchain starts from the genesis block of the
    blockchain, as shown in this diagram:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊区块链中的状态变化从区块链的创世区块开始，如下图所示：
- en: '![](img/bc0b8d66-6b68-4f8f-a002-bcede91e26ee.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc0b8d66-6b68-4f8f-a002-bcede91e26ee.png)'
- en: Each block contains a series of transactions, and each block is chained to its
    previous block. To transition from one state to the next, the transaction has
    to be valid. The transaction is further validated using consensus techniques,
    which we have already discussed in previous chapters.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每个区块包含一系列交易，每个区块都与其前一个区块链接在一起。要从一个状态转换到下一个状态，交易必须是有效的。利用共识技术进一步验证交易的有效性，这是我们在前几章已经讨论过的。
- en: To avoid stale blocks in Ethereum, **GHOST** (**Greedy Heaviest Observed Subtree**)
    protocol was introduced. This was introduced to avoid random forking by any nodes
    and inapt verification by other nodes. Stale blocks are created when two nodes
    find a block at the same time. Each node sends the block in the blockchain to
    be verified. This isn't the case with Bitcoin, since, in Bitcoin, block time is
    10 minutes and the propagation of a block to approximately 50% of the network
    takes roughly 12 seconds. The GHOST protocol includes stale blocks also known
    as uncles, and these are included in the calculation of the chain.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免以太坊中的陈旧区块，引入了**GHOST**（**Greedy Heaviest Observed Subtree**）协议。这是为了避免任何节点的随意分叉和其他节点的不恰当验证。当两个节点同时发现一个区块时，就会产生陈旧区块。每个节点都发送区块链中的区块进行验证。这在比特币中不会发生，因为在比特币中，区块时间为10分钟，区块传播到大约50%的网络大约需要12秒。
    GHOST协议还包括称为叔区块的陈旧区块，并将它们包含在链的计算中。
- en: As discussed in the previous chapters, there are two types of accounts in Ethereum
    blockchain. Namely, **Contract Accounts** (**CA**) and **Externally Owned Accounts**
    (**EOA**s). The contract accounts are the ones that have code associated with
    them along with a private key. EOA has an ether balance; it is able to send transactions
    and has no associated code, whereas CA has an ether balance and associated code.
    The contract account and the externally owned accounts have features of their
    own, and a new token can only be initiated by the contract account.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几章所讨论的，在以太坊区块链中有两种类型的账户。即**合约账户**（**CA**）和**外部拥有账户**（**EOA**s）。合约账户是具有与其关联的代码以及私钥的账户。EOA具有以太币余额；它能够发送交易并且没有关联的代码，而CA具有以太币余额和关联的代码。合约账户和外部拥有账户各有其特点，新代币只能由合约账户发起。
- en: Ethereum state transition function
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊状态转换函数
- en: 'In the state transition function, the following is the process that every transaction
    in Ethereum adheres to:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在状态转换函数中，以太坊中的每笔交易都遵循以下过程：
- en: Confirming of the transaction's validity and structure, by making sure that
    a signature is valid and nonce matching the nonce in the sender's account and
    syntax. If there are any issues, then an error is returned.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过确保签名有效、nonce与发件人账户中的nonce匹配以及语法来确认交易的有效性和结构。如果有任何问题，则返回错误。
- en: The transaction fee calculation is done using the price of gas, and the sender
    address is determined using the signature. Then, the sender's account balance
    is checked and reduced accordingly, along with the increment of the nonce. In
    the case of an insufficient balance, an error occurs.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易费用的计算是使用燃气价格进行的，并使用签名确定发件人地址。然后，检查并相应减少发件人的账户余额，同时增加 nonce。如果余额不足，则会出现错误。
- en: Certain gas is taken to cover the cost of the transaction. It is charged per
    byte incrementally, according to the size of the transaction.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了支付交易的费用，需要使用一定数量的燃气。根据交易的大小，按字节逐步收费。
- en: In this step, the actual transfer of value occurs. The flow happens from the
    sender's account to the receiver's account. If the receiving account does not
    exist, then it is created. Also, if the receiving account is a contract account,
    then the code of the contract is executed. If there is enough gas available, then
    the contract code runs fully or to the point the gas runs out.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在此步骤中，发生实际价值的转移。流程从发件人账户到接收者账户。如果接收账户不存在，则会创建该账户。另外，如果接收账户是合约账户，则执行合约的代码。如果有足够的燃气可用，则合约代码会完全运行，或者在燃气用尽时停止。
- en: If the transaction failed due to insufficient balance or gas, all the state
    changes are reverted, apart from the payment of fees, which is transferred to
    the miners.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果由于余额不足或燃气而导致交易失败，则所有状态更改都将被撤销，除了支付给矿工的费用之外。
- en: If there is reminder fee available, then it is sent back to the sender, as change
    after paying the miners as required. Function returns the resulting state at this
    point.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有余额可用，则在支付矿工所需的费用后将其发送回发件人作为找零。函数在此时返回结果状态。
- en: 'The following diagram depicts the state transition flow:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表描述了状态转换流程：
- en: '![](img/8d2d233a-4148-4f8c-b563-b0daaa8fba45.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d2d233a-4148-4f8c-b563-b0daaa8fba45.png)'
- en: The function is implemented independently in each of the Ethereum clients.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数在以太坊的每个客户端中独立实现。
- en: Genesis block
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创世区块
- en: This is the first block of the Ethereum blockchain, just like the genesis block
    of the Bitcoin blockchain. The height of the genesis block is 0.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是以太坊区块链的第一个区块，就像比特币区块链的创世区块一样。创世区块的高度为0。
- en: 'The Genesis block was mined on Jul 30, 2015 and marks the first block of the
    Ethereum blockchain. The difficulty of the genesis block was at 17,179,869,184,
    as shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创世区块于2015年7月30日被挖掘，标志着以太坊区块链的第一个区块。创世区块的难度为17,179,869,184，如下图所示：
- en: '![](img/d6569708-53d2-4c3f-a993-9d390494c79c.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6569708-53d2-4c3f-a993-9d390494c79c.png)'
- en: Transaction receipts
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易收据
- en: Receipts are used to store the state, after a transaction has been executed.
    These structures are used to record the outcome of the transaction execution.
    Receipts are produced after the execution of each transaction. All receipts are
    stored in an index-eyed trie. This has its root placed in the block header as
    the receipts root.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 收据用于存储事务执行后的状态。这些结构用于记录事务执行的结果。每次事务执行后都会产生收据。所有收据都存储在一个索引为眼树中。其根据置于块头中作为收据根。
- en: Elements
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元素
- en: Elements is composed of four primary elements; let's discuss each element of
    Ethereum's transaction receipts, before we look at the structure of a receipt.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 元素由四个主要元素组成；让我们在查看收据结构之前讨论以太坊事务收据的每个元素。
- en: Post-transaction state
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事务后状态
- en: '**Post-transaction state** is a trie structure that holds the state, after
    the transaction has been executed. It is encoded as a byte array.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**事务后状态**是在事务执行后保存状态的一种trie结构。它被编码为一个字节数组。'
- en: Gas used
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 已使用燃气
- en: '**Gas used** represents the total amount of gas used in the block that contains
    the transaction receipt. It can be zero, but it is not a negative integer.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**已使用燃气**表示包含事务收据的块中使用的总燃气量。它可以为零，但不是负整数。'
- en: Set of logs
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志集合
- en: The **set of logs** shows the set of log entries created as a result of transaction
    execution. Logs contain the logger's address, log topics, and other log data.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**日志集合**显示由事务执行产生的日志条目集合。日志包含记录者的地址、日志主题和其他日志数据。'
- en: The bloom filter
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布隆过滤器
- en: The **bloom filter** is created form the information contained in the logs discussed.
    Log entries are reduced to a hash of 256 bytes, which is then embedded into the
    header of the block as a logs bloom. Log entries are composed of the logger's
    address, log topics, and log data. Log topics are encoded as a series of 32-byte
    data structures, and log data is composed of a few bytes of data.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**布隆过滤器**是根据讨论的日志中包含的信息创建的。日志条目被减少为256字节的哈希，然后嵌入到块的头部作为日志布隆。日志条目由记录者的地址、日志主题和日志数据组成。日志主题被编码为一系列32字节的数据结构，而日志数据由一些字节的数据组成。'
- en: Structure
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构
- en: 'This is what the structure of a transaction receipt looks like:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是事务收据结构：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Also, it is to be noted that the receipt is not available for pending transactions.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 还需注意，收据在待处理事务中不可用。
- en: Transaction sub state
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事务子状态
- en: A **transaction sub state** is created during the execution of the transaction.
    This transaction is processed immediately after the execution is completed. The
    transaction sub state is composed of the following three sub items.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**事务子状态**是在事务执行期间创建的。此事务在执行完成后立即处理。事务子状态由以下三个子项组成。'
- en: Suicide set
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自杀集合
- en: A **suicide set** contains the list of accounts that are disposed after a transaction
    execution.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**自杀集合**包含在事务执行后处置的账户列表。'
- en: Log series
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志系列
- en: A **log series** is an indexed series of checkpoints that allow the monitoring
    and notification of contract calls to the entities external to the Ethereum environment.
    Logs are created in response to events in the smart contract. It can also be used
    as a cheaper form of storage.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**日志系列**是一个索引系列的检查点，允许对以太坊环境外部实体的合约调用进行监控和通知。日志是对智能合约中事件的响应而创建的。它也可以用作更便宜的存储形式。'
- en: Refund balance
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 退款余额
- en: A **r****efund balance** is the total price of gas in the transaction that initiated
    the execution of the transaction.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**退款余额**是发起执行事务的事务中的燃气总价。'
- en: Messages
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息
- en: '**Messages** are transactions where data is passed between two accounts. It
    is a data packet passed between two accounts. A message can be sent via the **Contract
    Account** (**CA**). They can also be an **Externally Owned Account** (**EOA**)
    in the form of a transaction that has been digitally signed by the sender.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**消息**是在两个账户之间传递数据的事务。这是在两个账户之间传递的数据包。消息可以通过**合约账户**（**CA**）发送。它们也可以是已由发送者数字签名的交易形式的**外部拥有账户**（**EOA**）。'
- en: 'Messages are never stored and are similar to transactions. The key components
    of a message in Ethereum are:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 消息从不存储，类似于事务。以太坊消息的关键组成部分包括：
- en: Sender of the message call
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送消息调用者
- en: Transaction originator
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务发起者
- en: Transaction recipient
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务接收方
- en: Contract account, whose code is the be executed during the message call, if
    there is an account for this purpose
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合约账户，其代码在消息调用期间执行，如果有此目的的账户
- en: Maximum available gas
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大可用燃气
- en: Gas price
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 燃气价格
- en: Messages are generated using `CALL` or `DELEGATECALL` methods.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 消息是使用`CALL`或`DELEGATECALL`方法生成的。
- en: Calls
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用
- en: A **CALL** does not broadcast anything in the blockchain; instead, it is a local
    call to any contract function specified. It runs locally in the node, like a local
    function call. It does not consume any gas and is a read-only operation. Calls
    are only executed locally on a node and do not result in any state change. If
    the destination account has an associated EVM code, then the virtual machine will
    start upon the receipt of the message to perform the required operations; if the
    message sender is an independent object, then the call passes any data returned
    from the EVM.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**CALL**不会在区块链中广播任何内容；相反，它是对指定的合约函数的本地调用。它在节点中本地运行，就像本地函数调用一样。它不消耗任何gas，是一个只读操作。调用仅在节点上本地执行，不会导致任何状态更改。如果目标账户有关联的EVM代码，则虚拟机将在接收到消息后启动以执行所需的操作；如果消息发送者是一个独立的对象，则调用将传递从EVM返回的任何数据。'
- en: Ethereum block validation
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊区块验证
- en: 'After being mined by the miners, an Ethereum block goes through several checks
    before it is considered valid; the following are the checks it goes through:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在矿工挖掘后，以太坊区块在被视为有效之前要经过几轮检查；以下是它经过的检查：
- en: All the ommers/uncles have to verify its identity, considering the PoW for the
    uncles is valid.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有的伯爵/叔父都必须验证其身份，考虑到叔父的PoW是有效的。
- en: The existence of the previous block and its validity
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上一个区块的存在和有效性
- en: The validity of the timestamp of the block, that is, the current block's timestamp
    must be higher than the parent block's timestamp. Also, the current block and
    the parent block should be less than 15 minutes apart from each other. All the
    block times are calculated in Unix time.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块的时间戳有效性，即当前区块的时间戳必须高于父区块的时间戳。此外，当前区块和父区块之间的时间间隔应不超过15分钟。所有区块时间都以Unix时间计算。
- en: If any of the preceding checks fails, the block gets rejected.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的任何检查失败，则区块被拒绝。
- en: Uncles validation
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 叔父验证
- en: In this process, the uncles or ommers are validated. Firstly, a block can contain
    a maximum of two uncles, and, secondly, whether the header is valid and the relationship
    of the uncle with the current block satisfies the maximum depth of six blocks.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，伯爵或叔父会被验证。首先，一个区块最多可以包含两个叔父，其次，头部是否有效以及叔父与当前区块的关系是否满足最大深度为六个区块。
- en: Block difficulty
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块难度
- en: 'Block difficulty in Ethereum runs parallel to the calculation of block difficulty
    in the Bitcoin blockchain. The difficulty of the block increases if the time between
    two blocks decreases. This is required to maintain consistent block generation
    time. The difficulty adjustment algorithm in the Ethereum Homestead release is
    as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊中的区块难度与比特币区块链中的区块难度计算并行。如果两个区块之间的时间缩短，则区块的难度增加。这是为了保持一致的区块生成时间。以太坊Homestead版本中的难度调整算法如下：
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this algorithm, the difficulty of the block is adjusted based on the block
    generation time. According to this algorithm, if the time difference between the
    generation of the parent block and the current block is less than 10 seconds,
    the difficulty increases. If the time difference is between 10 and 19 seconds,
    then the difficulty remains same. The difficulty decreases when the time difference
    between two block's generation is more than 20 seconds. The decrease in difficulty
    is directly proportional to the time difference.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个算法中，区块的难度是根据区块生成时间来调整的。根据这个算法，如果父区块和当前区块的生成时间差小于10秒，则难度增加。如果时间差在10到19秒之间，则难度保持不变。当两个区块的生成时间差大于20秒时，难度降低。难度的降低与时间差成正比。
- en: Apart from the timestamp-based difficulty increment, as per the algorithm, the
    difficulty increases exponentially after every 100,000 blocks. This is known as
    the *difficulty time bomb*, introduced in the Ethereum network, since this will
    make it very hard to mine on the Ethereum blockchain network. This is the reason
    why PoS is the proposed consensus mechanism for Ethereum in the near future.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基于时间戳的难度增量外，根据算法，每挖掘100,000个区块后，难度将呈指数增长。这被称为以太坊网络中引入的*难度定时炸弹*，因为这将使在以太坊区块链网络上挖矿变得非常困难。这就是为什么PoS是以太坊在不久的将来提出的共识机制的原因。
- en: Block finalization
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块最终化
- en: 'The finalization of a block in Ethereum involves the following four stages:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊区块的最终化涉及以下四个阶段的操作：
- en: The validation of ommers
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 伯爵的验证
- en: The validation of transactions
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application of rewards
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The verification of the state and the block nonce
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disadvantages of Ethereum-based tokens
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have discussed the advantages and uses of Ethereum and Ethereum blockchain-based
    currencies throughout the previous chapters; let''s now discuss some disadvantages
    of Ethereum-based tokens:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '**Unstable**: The Ethereum blockchain is still undergoing lot of changes; this
    also includes moving the consensus method from the PoW to the PoS system.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependability**: The ERC20 tokens or any other tokens are based and built
    on top of Ethereum. This poses a threat, since Ethereum is itself undergoing frequent
    changes at most times.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hard forks**: Being dependent on another blockchain means, due to hard forks,
    unforeseen issues can occur.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sovereignty**: Since the tokens are based on Ethereum blockchain, there is
    no say in future development of these tokens. The decision of whether to choose
    ERC20 should be based on the application and use case.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Support**: Any improvements or requirements for support after the smart contract
    is published on the blockchain can only be done on the Ethereum blockchain and
    any changes/improvements suggested in the blockchain have to be approved by the
    whole Ethereum community.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ether as the main currency**: Although with one can create their own currency,
    symbol and supply limit, ether is still the main currency used in the Ethereum
    blockchain, hence at all times Ether gets enriched for the efforts added by your
    token.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the Ethereum state transition function, the genesis
    block, and transaction receipts. We also discussed the transaction sub state.
    In addition to these topics, we discussed Ethereum block validation and the steps
    involved in the same as discussed in the Ethereum Yellow paper. Finally, we briefly
    discussed a few of the disadvantages of using an Ethereum-based token.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss **Decentralized Applications**, and we
    will learn how to create a **DApp**, and how to publish one. We will also discuss
    the future of DApp and its effects on its users.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
