- en: Best Practices for Developing Blockchain and IoT Solutions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As is the case for every emerging technology, being an early adopter is full
    of challenges and lessons that need to be learned. The focus of this chapter is
    to present some solutions that we can apply to real-world projects in order to
    avoid getting into trouble.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Reference architecture for cloud applications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create cloud-native applications using the 12-factor application development
    model
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serverless computing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Hyperledger Composer as an accelerator for application development
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing cloud applications
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many potential pitfalls related to cloud applications, ranging from
    the simple misuse of resources to unsolvable problems. Applying a concise architecture
    and using the 12-factor application development pattern ensures you won't get
    into trouble when the application scales up or down.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: A container is a standardized way to package an application with all its dependencies,
    including its code, runtimes, middleware, libraries, and operating system. Docker
    and Garden are containers that can be run in the IBM Cloud Platform, but there
    are other container types that can also be used, such as Rockt. Using containers
    increases the portability of an application, so it doesn't matter if the host
    operating system is one particular distribution of Linux and your application
    was built on a different distribution, because the operating system is a layer
    of the containerized application and both distributions are shipped together.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram demonstrates the structure of a containerized application:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/541c3b3a-f9d1-4180-9ed1-e0055743938f.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: Cloud platforms use containerized applications and deploy them into a set of
    servers. We can move these applications inside the flexible computing environment to
    make better use of the existing infrastructure and to keep track of the containers
    deployed in the service discovery component.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Each platform has its own way of using the containerized model of application
    deployment, as shown in the following diagram:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67db951b-b353-4f94-8d2e-fb8bf81b4578.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: A container is deployed based on a container image, which is a read-only definition
    of the base image, the dependencies, and the application. Each container of the
    same application is deployed based on that image, and any changes made to the
    container during runtime exist only while that container is active, and only apply
    to to that instance of the container.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Reference architecture
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cloud computing creates an abstract environment for deploying applications; we
    use virtual runtimes. This means that we have no location awareness and no assurance
    that our application will stay in the same data center or virtual machine. We
    cannot even trust that the IP address of the application will remain the same
    after 10 minutes. The following diagram shows a successfully applied reference
    architecture for cloud applications using IBM Cloud Public (Bluemix):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算为部署应用程序创建了一个抽象的环境；我们使用虚拟运行时。这意味着我们没有位置意识，也不能保证我们的应用程序会留在同一个数据中心或虚拟机中。我们甚至不能确信应用程序的IP地址在10分钟后仍然相同。以下图表显示了使用IBM
    Cloud Public（Bluemix）成功应用的云应用程序的参考架构：
- en: '![](img/ae67ce27-13d4-421b-8f54-9bae29273471.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae67ce27-13d4-421b-8f54-9bae29273471.png)'
- en: Cloud-native applications should scale horizontally, which means that whenever
    the workload demand increases, the application should increase the number of instances
    of that application to handle new requests. Similarly, if the workload decreases,
    the number of application instances should be decreased.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生应用程序应该水平扩展，这意味着每当工作负载需求增加时，应用程序应该增加该应用程序的实例数量以处理新请求。同样，如果工作负载减少，应该减少应用程序实例的数量。
- en: Development using the 12–factor application model
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用12因素应用程序模型进行开发
- en: The 12-factor application model is a set of practices that should be followed
    in order to make cloud applications scalable. It provides support for hostile
    cloud environment changes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 12因素应用模型是一组应该遵循的实践，以使云应用程序具有可伸缩性。它为敌对的云环境变化提供支持。
- en: 'The 12 principles of the model are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型的12个原则如下：
- en: '**Code base:** Our codebase is tracked in revision control and is deployed
    many times'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码库：**我们的代码库在修订控制中被跟踪，并且被部署多次。'
- en: '**Dependencies:** We should explicitly declare and isolate dependencies'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖关系：**我们应该明确声明和隔离依赖关系。'
- en: '**Configuration:** We should store the application configuration parameters
    in the environment'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置：**我们应该将应用程序配置参数存储在环境中。'
- en: '**Backing services:** We should treat backing services as attached resources'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后端服务：**我们应该将后端服务视为附加资源。'
- en: '**Build, release, run:** We should strictly separate build and run stages'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建、发布、运行：**我们应该严格区分构建和运行阶段。'
- en: '**Processes:** We should execute the app as one or more stateless processes'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程：**我们应该将应用程序作为一个或多个无状态进程执行。'
- en: '**Port binding:** We should export services via port binding'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口绑定：**我们应该通过端口绑定导出服务。'
- en: '**Concurrency:** We should scale out via the process model'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并发性：**我们应该通过进程模型进行横向扩展。'
- en: '**Disposability:** We should maximize robustness with fast startup and graceful
    shutdown'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可处置性：**我们应该通过快速启动和优雅关闭来最大程度地提高鲁棒性。'
- en: '**Development/production parity:** We should keep development, staging, and
    production as similar as possible'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发/生产对等性：**我们应该尽可能地使开发、演示和生产保持相似。'
- en: '**Logs:** We should treat logs as event streams'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志：**我们应该将日志视为事件流。'
- en: '**Admin processes:** We should run administration and management tasks as one-off
    processes'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理进程：**我们应该将管理和管理任务作为一次性进程运行。'
- en: These principles decrease the number of simple errors related to cloud computing.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些原则减少了与云计算相关的简单错误的数量。
- en: You don't have to apply all these concepts to all cloud-native applications
    that you develop. For example, if you don't need a script to preload a database,
    you do not need to apply the admin processes principle. However, if you are using
    an application that needs to keep a state or share the state with different applications
    (such as sessions), using backing services is essential because you never know
    what physical or virtual computer host the container that responds to the user
    requests is located.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您不必将所有这些概念都应用于您开发的所有云原生应用程序。例如，如果您不需要脚本来预加载数据库，则不需要应用管理进程原则。然而，如果您正在使用一个需要保持状态或与不同应用程序共享状态（如会话）的应用程序，那么使用后端服务是必不可少的，因为您永远不知道响应用户请求的容器所在的物理或虚拟计算机主机是什么。
- en: Serverless computing
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器计算
- en: Serverless computing is a model of deployment in which an application is deployed
    in an environment but is not necessarily running all the time. Its container is
    started when it is first executed and is kept alive while requests demand its
    execution. After a period of inactivity, the container for that application is
    quiesced. It is important to note that stopped containers will take time to get
    started, so real-time responsiveness is not a strength of a serverless application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器计算是部署模型，其中应用程序部署在环境中，但不一定始终运行。它的容器在首次执行时启动，并在请求需要执行它时保持活动。在空闲一段时间后，该应用程序的容器被停止。重要的是要注意，停止的容器需要一段时间才能启动，因此实时响应并不是无服务器应用程序的优势。
- en: A serverless application (or, as many cloud service providers call it, a cloud
    function) is a microservice that is deployed and attached to a trigger, which
    is responsible for starting the container with the function and running it. A
    trigger might be a database change, a message delivered to a broker, an HTTP request,
    or another type of request.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器应用程序（或者像许多云服务提供商所称的云函数）是部署并附加到触发器的微服务，该触发器负责启动包含该功能的容器并运行它。触发器可以是数据库更改，传递给代理的消息，HTTP请求或其他类型的请求。
- en: Cloud providers usually charge the execution of cloud functions based on the duration
    of their execution and their resource allocation (usually memory). For example,
    a cloud function might take 500 milliseconds and use 256 MB of memory.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 云提供商通常根据云函数的执行持续时间和资源分配（通常是内存）收费。例如，一个云函数可能需要500毫秒，并使用256MB的内存。
- en: A successful cloud function is not computing-intensive and does not have a large
    number of requests (scheduled procedures). To facilitate the process of building
    and deploying serverless applications, the serverless framework is a good choice
    since it supports Google Cloud, AWS, IBM Cloud, and Microsoft Azure implementations
    of serverless computing.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一个成功的云函数不需要大量计算和大量请求（定期过程）。为了方便构建和部署无服务器应用程序过程，无服务器框架是一个不错的选择，因为它支持谷歌云、AWS、IBM云和微软Azure对无服务器计算的实现。
- en: Blockchain development using Hyperledger Composer
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Hyperledger Composer进行区块链开发
- en: Hyperledger Composer is a project hosted by the Linux Foundation under the Hyperledger
    brand. The project aims to create a framework and toolset to accelerate the development
    of blockchain applications using Hyperledger Fabric, and simplify integration
    with other applications. It is important to bear in mind that any framework intends
    to simplify an aspect of a solution by abstracting some of its complexity, but
    that it also restricts control over the abstraction applied.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Composer是Linux Foundation在Hyperledger品牌下托管的一个项目。该项目旨在创建一个框架和工具集，加速使用Hyperledger
    Fabric开发区块链应用程序，并简化与其他应用程序的集成。需要牢记的是，任何框架都意图通过抽象部分复杂性来简化解决方案的某个方面，但也会限制对所应用抽象的控制。
- en: The Hyperledger Composer toolkit
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger Composer工具包
- en: Hyperledger Composer is not a universal solution to all the complexities presented
    by Hyperledger Fabric. It takes away some of the flexibility over tasks that could
    be customized without it. What it does do, however, is supply a toolkit to create
    chaincode projects, build blockchain application packages (`.bna` files), and
    deploy them to Hyperledger Fabric.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Composer并不是解决Hyperledger Fabric提出的所有复杂性的通用解决方案。它剥夺了一些可以自定义的任务灵活性。然而，它所做的是提供一个工具包，用于创建链码项目，构建区块链应用程序包（`.bna`文件）并将它们部署到Hyperledger
    Fabric。
- en: The development of a business network using Hyperledger Composer is focused
    on creating assets, participants, transactions, queries, and access control lists
    using a project structure and a common language. After creating the business network
    definition, Composer has tools to package and deploy the application to a Hyperledger
    Fabric platform.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Hyperledger Composer开发业务网络的重点是使用项目结构和通用语言创建资产、参与者、交易、查询和访问控制列表。在创建业务网络定义之后，Composer有工具可以将应用程序打包并部署到Hyperledger
    Fabric平台。
- en: The Hyperledger Composer REST server
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger Composer REST服务器
- en: To simplify integration with other applications, Hyperledger Composer provides
    the Composer REST server, an API server built on top of a LoopBack framework that
    connects to the business network defined. It retrieves information on assets,
    transactions, and participants, and provides a REST API server and and the service
    contract described in swagger format to interact with the business network out
    of the box.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化与其他应用程序的集成，Hyperledger Composer提供了Composer REST服务器，这是建立在LoopBack框架之上的API服务器，连接到定义的业务网络。它检索资产、交易和参与者的信息，并提供了一个REST
    API服务器和一个服务合同，以swagger格式描述，以便与业务网络进行交互。
- en: The Composer REST server ships with many useful features. The ones that are
    most worth taking a look at are authentication, multiuser mode, and data source
    configuration.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Composer REST服务器提供了许多有用的功能。最值得一看的是身份验证、多用户模式和数据源配置。
- en: Authentication and multiuser mode
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证和多用户模式
- en: It's not unusual to request authentication when you are creating business applications.
    The Composer REST server provides the means to connect to many authentication
    and authorization providers, using Passport middleware. While the project claims
    that Passport has over 300 strategies for authentication and authorization, our
    experience has shown that not all of these work out of the box; sometimes, you
    have to create custom code in order to make them work. We have, however, successfully
    implemented Google, GitHub, Auth0, and LDAP authentication strategies out of the
    box.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建业务应用程序时，请求进行身份验证并不少见。Composer REST服务器提供了连接到许多身份验证和授权提供程序的手段，使用Passport中间件。虽然该项目声称Passport有超过300种身份验证和授权策略，但我们的经验表明，并非所有这些都能即插即用；有时，您必须创建自定义代码才能使它们正常工作。然而，我们已成功地实现了Google、GitHub、Auth0和LDAP的身份验证策略。
- en: Multiuser mode allows the use of a single Composer REST server for multiple
    participants, instead of deploying a distinct Composer REST server for each participant.
    In this mode, the API is retrieved using a master business card, but the interaction
    with the business network is done using its own business card. This mode requires
    user authentication to be enabled.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 多用户模式允许多个参与者使用单个Composer REST服务器，而不是为每个参与者部署独立的Composer REST服务器。在这种模式下，使用主名片检索API，但与业务网络的交互是使用其自己的名片。此模式需要启用用户身份验证。
- en: Data source configuration
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据源配置
- en: The Composer REST server uses data sources to store user session data. This
    doesn't mean that it has to have an explicit data source configured; if no data
    source is configured, the Composer REST server uses an out-of-the box memory connector.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Composer REST服务器使用数据源存储用户会话数据。这并不意味着必须配置显式数据源；如果没有配置数据源，Composer REST服务器将使用即插即用的内存连接器。
- en: When using multiple instances of the Composer REST server for high availability
    or load balancing, the instances do not share memory, so a data source is required.
    Any data source that has a loopback connector available can be used. In our experience,
    MongoDB, Cloudant, and Redis work out of the box; we just need to install the
    connector and configure the environment variables by following the steps provided
    by the Hyperledger.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用多个Composer REST服务器实例以实现高可用性或负载平衡时，这些实例不共享内存，因此需要数据源。可以使用任何具有loopback连接器的数据源。在我们的经验中，MongoDB、Cloudant和Redis可以即插即用；只需按照Hyperledger提供的步骤安装连接器并配置环境变量即可。
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we have looked at the implications of developing and deploying
    applications to a cloud environment. We have considered how containers work, how
    to deploy containerized applications to a cloud platform, and an alternative model:
    serverless computing. We also presented the 12-factor model principles for the
    development of cloud-native applications.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了在云环境中开发和部署应用程序的影响。我们考虑了容器的工作原理，以及如何将容器化的应用程序部署到云平台，以及另一种模型：无服务器计算。我们还介绍了云原生应用程序开发的12因素模型原则。
- en: We then looked at Hyperledger Composer as an accelerator for developing blockchain
    solutions. We explored various features, including using authentication, multiuser
    mode, and data source configuration.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将Hyperledger Composer视为开发区块链解决方案的加速器。我们探讨了各种功能，包括使用身份验证、多用户模式和数据源配置。
- en: This book provides information on creating simple applications using IBM Watson
    IoT Platform and Hyperledger Compose. These are far from being the only platforms
    and tools that support IoT and blockchain solutions, but the concepts are the
    same and can be applied. If you are interested in extending capabilities with
    the explained tools, both Watson IoT and Hyperledger Fabric / Composer,  provide
    extensive documentation on how to use them as well as a large number of community
    provided articles through out the internet but, our thought is that practice is
    the best way to understand whether they fit or not to a given solution so, even
    if you do want to learn how to use the toolkit, just try, simple use cases are
    good teachers.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书提供了有关使用 IBM Watson IoT 平台和 Hyperledger Compose 创建简单应用程序的信息。这些远非是唯一支持物联网和区块链解决方案的平台和工具，但概念是相同的，可以应用。如果您对使用所解释的工具进行扩展功能感兴趣，无论是
    Watson IoT 还是 Hyperledger Fabric / Composer，都提供了详尽的文档以及大量社区提供的文章，但是，我们的观点是实践是了解它们是否适合特定解决方案的最佳方式，因此，即使您想学习如何使用工具包，也只需尝试一下，简单的用例是良好的教师。
- en: Further reading
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The topics presented by this chapter are an overview and if you need more depth
    on any topics we recommend reading the following references:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍的主题是一个概述，如果您需要更深入地了解任何主题，我们建议阅读以下参考资料：
- en: The 12-factor application methodology : [https://12factor.net/](https://12factor.net/)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12因素应用程序方法论：[https://12factor.net/](https://12factor.net/)
- en: The serverless framework: [https://serverless.com/](https://serverless.com/)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器框架：[https://serverless.com/](https://serverless.com/)
- en: Hyperledger Composer: [https://hyperledger.github.io/composer](https://hyperledger.github.io/composer)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger Composer：[https://hyperledger.github.io/composer](https://hyperledger.github.io/composer)
