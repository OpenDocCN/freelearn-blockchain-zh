["```\nnpx create-react-app my-app\n```", "```\nimport React          from 'react';      \nimport ReactDOM       from 'react-dom';\nimport { Provider }   from 'react-redux';\nimport configureStore from 'core/store/configureStore';\nimport App            from 'containers/App';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n <App/>\n </Provider>\n    document.getElementbyId('root')\n);\n```", "```\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n```", "```\nexport class Game extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            playerNumber: '';\n            highLow: '';\n            wager: '';\n            history: []\n        }\n    }\n    render() {\n        return (\n        )\n    }\n}\n```", "```\n<Card style={style}>\n    <CardHeader\n        title=\"Player's Number\"\n        subtitle=\"Will the mystery number be higher or lower than this number?\"\n    />\n    <h1 style={displayNumber}>{this.state.playerNumber}</h1>\n</Card>\n```", "```\ncomponentDidMount() {\n    this.setState({\n        playerNumber: this.generatePlayerNumber()\n    })\n\n    generatePlayerNumber() {\n        return Math.floor(Math.random() * 10)\n    }\n}\n```", "```\n<RadioButtonGroup\n    name=\"highLow\"\n    defaultSelected={this.state.highLow}\n    onChange={this.handleChange('highLow')}\n    >\n    <RadioButton\n        value=\"higher\"\n        label=\"Higher\"\n        style={elementStyle}\n\n    />\n    <RadioButton\n        value=\"lower\"\n        label=\"Lower\"\n        style={elementStyle}\n    />\n</RadioButtonGroup>\n```", "```\nhandleChange = name => event => {\n    this.setState({\n        [name]: event.target.value\n    })\n}\n```", "```\n<CardHeader\n    title=\"History\"\n    />\n    <List>\n        {this.state.history.map((round) =>\n        <ListItem key={round.transactionHash}\n        primaryText={`Result:\\t${round.result}`}\n        secondaryText={`You ${round.result} ${round.wager} by guessing ${round.playerNumber} would be ${round.guess} than ${round.mysteryNumber}!`}\n        />\n        )}\n    </List>\n</Card>\n```", "```\nplayGame = () => {\n    const { actions } = this.props\n    actions.game.playRound(\n        this.state.wager,\n        this.state.playerNumber,\n        this.state.highLow\n    )\n    this.setState({\n        playerNumber: this.generatePlayerNumber()\n    })\n}\n```", "```\nimport { combineReducers } from 'redux'\nimport { providerReducer } from 'core/reducers/reducer-provider'\nimport { gameReducer } from 'core/reducers/reducer-game'\n\nconst rootReducer = combineReducers({\n  provider: providerReducer,\n  game: gameReducer\n})\n\nexport default rootReducer\n```", "```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"chrome\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Chrome against localhost\",\n            \"url\": \"http://localhost:3000\",\n            \"webRoot\": \"${workspaceFolder}\"\n        }\n    ]\n}\n```", "```\nconsole.log('1')\nsetTimeout(() => {console.log('2')}, 3000)\nconsole.log('3')\nsetTimeout(() => {console.log('4')}, 1000)\n```", "```\nfunction waitForMe (input, delay) {\n    return new Promise ((resolve, reject) => {\n        setTimeout(() => {\n            resolve(input)\n        }, delay)\n    })\n}\n```", "```\nconsole.log('1')\nwaitForMe('2', 3000).then(result => {console.log(result )\nconsole.log('3')\nwaitForMe('4', 1000).then(result => {console.log(result )})\n```", "```\nimport contract from 'truffle-contract'\nimport Gaming from '../../../build/contracts/Gaming.json'\nimport web3 from 'web3'\n```", "```\nthis.props.game.wager\nthis.props.game.playerNumber\nthis.props.game.mysteryNumber\n```", "```\ncomponentWillReceiveProps (nextProps) {\n    if (nextProps.game.transactionHash !==\n    this.props.game.transactionHash) {\n        if (nextProps.game.success == false){\n            console.log(nextProps.game.error)\n        }else {\n            const newHistory = this.state.history\n            newHistory.push({\n            transactionHash: nextProps.game.transactionHash;\n            wager: nextProps.game.wager;\n            playerNumber: nextProps.game.mysteryNumber;\n            guess: nextProps.game.guess;\n            result: nextProps.game.result\n        })  \n        this.setState({\n            history: newHistory,\n            snackbar: true,\n            message: '${nextProps.game.result}\n                    ${nextProps.game.wager} ether'    \n        })\n\n    }\n}\n```"]