- en: Delving into Hyperledger Fabric
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解Hyperledger Fabric
- en: Permissioned blockchain has evolved to address the need to adopt blockchain
    among a set of known (and not necessarily trusted) but identifiable participants.
    Such participants first need to be explicitly admitted to the blockchain network.
    Here, knowing (identifying) participants is more important than fully trusting
    those known participants. These participants might not trust one another, but
    are known and identifiable and they are chained by a common goal. **Hyperledger
    Fabric** (**HLF**) (a permissioned blockchain) uses **Byzantine Fault Tolerance** (**BFT**)
    variant **Practical BFT** (**PBFT**), as the consensus protocol instead of **pr****oof
    of** **work** (**PoW**). HLF offers improved functional qualities to permissioned
    blockchain, such as confidentiality and consistency, while also offering improved
    and enhanced non-functional qualities, such as performance and scalability.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 权限区块链已经发展，以满足在一组已知（但不一定受信任的）但可识别的参与者中采用区块链的需求。这些参与者首先需要被明确地接纳到区块链网络中。在这里，了解（识别）参与者比完全信任这些已知参与者更为重要。这些参与者可能不信任彼此，但是已知和可识别，它们是被共同目标连接在一起的。**Hyperledger
    Fabric**（一种权限区块链）使用**拜占庭容错**（**BFT**）变体**实用BFT**（**PBFT**）作为共识协议，而不是**工作证明**（**PoW**）。HLF为权限区块链提供了改进的功能特性，如保密性和一致性，同时还提供了改进和增强的非功能特性，如性能和可伸缩性。
- en: This chapter focuses on the fundamentals of HLF. This will allow you to understand
    how business logic is implemented in HLF and learn about various transaction types
    that facilitate read and write operations to distributed ledgers. The Linux Foundation,
    in collaboration with various leading companies and some of the smartest developers,
    is endeavoring to solve some of the most complex challenges facing the world of
    IT and is also promoting the commercial adoption of open source technology. This
    is the largest ever open source software project in the world. The Linux Foundation
    is a blanket project for various open source projects. For big data and analytics,
    it supports R, as well as consortium projects. For networking, it powers **ONAP**
    (short for **Open Network Automation Platform**), OpenDaylight, and others. For
    cloud computing, it empowers projects such as Cloud Foundry, and cloud native
    computing. Similarly, for blockchain, the Linux Foundation handles the Hyperledger
    project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍HLF的基础知识。这将使您理解在HLF中如何实现业务逻辑，并了解促进读写操作到分布式账本的各种交易类型。Linux Foundation正在与各大公司和一些最聪明的开发人员合作，致力于解决IT世界面临的一些最复杂的挑战，并促进开源技术的商业应用。这是有史以来规模最大的开源软件项目。Linux
    Foundation是各种开源项目的母项目。对于大数据和分析，它支持R语言，以及贡献项目。对于网络，它支持ONAP（Open Network Automation
    Platform）和OpenDaylight等项目。对于云计算，它支持Cloud Foundry和云原生计算等项目。同样，对于区块链，Linux Foundation负责处理Hyperledger项目。
- en: A glance at the Hyperledger project
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介 Hyperledger 项目
- en: The Hyperledger project, initiated in December 2015, was hosted by the Linux
    Foundation in an effort to create advanced, cross-industry **distributed ledger
    technology** (**DLT**) and blockchain technologies. It hosts blockchain frameworks
    and supports a number of tools as well. It is an umbrella of open source projects,
    where some of the projects are DLT frameworks, including Iroha, Sawtooth, and
    Fabric.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger 项目始于2015年12月，由 Linux Foundation 主办，旨在创建先进的跨行业**分布式账本技术**（**DLT**）和区块链技术。它托管区块链框架并支持一些工具。这是一个开源项目的集合，其中一些项目是DLT框架，包括
    Iroha、Sawtooth 和 Fabric。
- en: Frameworks hosted by Hyperledger
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger 托管的框架
- en: 'The following are the frameworks hosted by Hyperledger. These are classified
    as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是由Hyperledger托管的框架。这些被分类如下：
- en: Hyperledger Burrow
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger Burrow
- en: Hyperledger Fabric
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger Fabric
- en: Hyperledger Indy
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger Indy
- en: Hyperledger Iroha
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger Iroha
- en: Hyperledger Sawtooth
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger Sawtooth
- en: '**Hyperledger Burrow**:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hyperledger Burrow**:'
- en: '**Contributor**: Originally contributed by Monax and co-sponsored by Intel.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**贡献者**：最初由 Monax 贡献，由 Intel 共同赞助。'
- en: '**Key features**: Burrow is a lightweight, fast, and efficient permissioned
    chaincode machine. It leverages the Tendermint protocol for consensus. The most
    important feature of Burrow is the speed of blockchain. Three dimensions achieve
    speed in blockchain. The first is the codebase''s transactional throughput. The
    second is the block''s propagation speed within the network. The third and final
    dimension is the time when the blocks are finalized (aka the finality of blocks).
    Burrow is a non-forking blockchain and transaction finality is guaranteed. Finality
    enhances the overall speed of the system because applications and systems can
    instantly rely on the information on the blockchain network.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要特点**: Burrow是一种轻量级、快速、高效的权限链码机器。它利用Tendermint协议进行共识。Burrow最重要的特点是区块链的速度。在区块链速度方面有三个维度。第一个是代码库的事务吞吐量。第二个是区块在网络内的传播速度。第三个和最后一个维度是区块最终化的时间（也就是区块的最终性）。Burrow是一个非分叉的区块链，事务终局性是有保证的。终局性增强了系统的整体速度，因为应用程序和系统可以立即依赖区块链网络上的信息。'
- en: '**Objective**: It provides a modular blockchain client with a permissioned
    smart contract interpreter partially developed to the specifications of the **Ethereum
    Virtual Machine** (**EVM**). It is a permissioned smart contract machine that
    provides a modular blockchain client with a permissioned smart contract interpreter
    incorporated, partly in line with the specifications of the EVM.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**: 它提供了一个模块化的区块链客户端，其中包含一个部分按照**以太坊虚拟机**（**EVM**）规格开发的权限智能合约解释器。它是一个权限智能合约机器，提供了一个模块化的区块链客户端，其中包含部分符合EVM规格的权限智能合约解释器。'
- en: '**Consensus protocol**: Tendermint.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共识协议**: Tendermint。'
- en: '**Hyperledger Fabric (HLF)**:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hyperledger Fabric (HLF)**:'
- en: '**Contributor**: Initially contributed by Digital Asset and IBM'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**贡献者**: 最初由Digital Asset和IBM贡献'
- en: '**Key features**: Modular and pluggable architecture and permissioned with
    a high level of privacy and confidentiality'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要特点**: 模块化可插拔架构，以及高水平的隐私和机密性权限'
- en: '**Objective**: To serve as a basis for developing permissioned enterprise applications
    or solutions with a modular architecture'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**: 用作开发具有模块化架构的权限企业应用程序或解决方案的基础'
- en: '**Consensus protocol**: Apache Kafka'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共识协议**: Apache Kafka'
- en: '**Hyperledger Indy**:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hyperledger Indy**:'
- en: '**Contributor**: The Sovrin Foundation.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**贡献者**: Sovrin基金会。'
- en: '**Key features**: Built for decentralized identities. It manages keys, proofs,
    and other relevant information that enables trusted peer interactions between
    various parties.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要特点**: 专为去中心化身份而建。它管理密钥，证明和其他相关信息，从而使各方之间的可信等的对等交互成为可能。'
- en: '**Objective**: To offer tools, libraries, and reusable components to create
    and use independent identities to be interoperable across applications.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**: 提供工具、库和可重复使用的组件，以创建和使用可在应用程序之间互操作的独立身份。'
- en: '**Consensus protocol**: PBFT.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共识协议**: PBFT。'
- en: '**Hyperledger Iroha**:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hyperledger Iroha**:'
- en: '**Contributor**: Contributed by Soramitsu, Hitachi, NTT Data, and Colu'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**贡献者**: Soramitsu、日立、NTT数据和Colu贡献。'
- en: '**Key features**: Allows the manipulation of accounts and digital assets'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要特点**: 允许对账户和数字资产进行操作'
- en: '**Objective**: Hyperledger Iroha emphasizes mobile application development
    with client libraries for Android and iOS, thereby setting it apart from other
    Hyperledger frameworks'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**: Hyperledger Iroha强调移动应用程序开发，并提供了Android和iOS的客户端库，使它与其他Hyperledger框架区分开来'
- en: '**Language**: C++'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言**: C++'
- en: '**Consensus protocol**: **Yet Another Consensus** (**YAC**)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共识协议**: **又一个共识** (**YAC**)'
- en: '**Hyperledger Sawtooth**:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hyperledger Sawtooth**:'
- en: '**Contributor**: Intel.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**贡献者**: 英特尔。'
- en: '**Key features**: A modular platform for DLT applications.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要特点**: 供DLT应用程序使用的模块化平台。'
- en: '**Objective**: Sawtooth creates a digital platform, enabling physical traceability
    in a trustless world. It is a blockchain framework that utilizes a modular platform
    for building, deploying, and running distributed ledgers. It supports both permissioned
    and permissionless deployments.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**: Sawtooth在一个不信任的世界中创建了一个数字平台，实现了物理可追溯性。它是一个利用模块化平台构建、部署和运行分布式账本的区块链框架。它支持权限部署和无权限部署。'
- en: '**Consensus protocol**: **Proof of Elapsed Time** (**PoET**) consensus.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共识协议**: **耗时证明** (**PoET**) 共识。'
- en: The previously listed Hyperledger frameworks are used to build DLT and blockchain
    applications, along with a list of modules (also known as tools) that facilitate
    the deployment and maintenance of blockchain applications, analyzing ledger data,
    and managing blockchain networks.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 前述的Hyperledger框架用于构建DLT和区块链应用程序，以及一系列模块（也称为工具）用于方便地部署和维护区块链应用程序，分析账本数据，和管理区块链网络。
- en: Tools hosted by Hyperledger
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 由Hyperledger托管的工具
- en: 'The following **modules**, also known as tools, are hosted by Hyperledger:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下由Hyperledger托管的**模块**，也称为工具：
- en: Hyperledger Caliper
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger Caliper
- en: Hyperledger Cello
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger Cello
- en: Hyperledger Composer
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger Composer
- en: Hyperledger Quilt
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger Quilt
- en: Hyperledger Explorer
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger Explorer
- en: Hyperledger URSA
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyperledger URSA
- en: '**Hyperledger Caliper**:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hyperledger Caliper**:'
- en: '**Contributors**: Oracle, Huawei, and others'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**贡献者**：甲骨文、华为和其他公司。'
- en: '**Objective**: To enable the performance of specific blockchain implementations
    to be measured'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：测量特定区块链实现的性能'
- en: '**Key features**: It allows the generation of reports with various performance
    indicators, such as resource utilization, transactions per second, and transaction
    latency'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关键特点**：它允许生成具有各种性能指标的报告，如资源利用率、每秒交易数和交易延迟'
- en: '**Hyperledger Cello**:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hyperledger Cello**:'
- en: '**Contributors**: IBM, Huawei, and others.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**贡献者**：IBM、华为和其他公司。'
- en: '**Objective**: To allow businesses to have **Blockchain**-**as**-**a**-**Service** (**BaaS**),
    which enables quick blockchain solutions for enterprise. It reduces complexity
    and minimizes the efforts required to create, terminate, and manage blockchains.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：为企业提供**Blockchain**-**as**-**a**-**Service**（**BaaS**）, 从而快速实现企业区块链解决方案。它减少了复杂性，最小化了创建、终止和管理区块链所需的工作量。'
- en: '**Key features**: It offers multi-tenant services in addition to various infrastructures,
    such as **bare** **metal**, and virtual machines. It enables the creation and
    management of blockchain via a simplified dashboard allowing the immediate availability
    of the blockchain instance.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关键特点**：除了各种基础设施，如**bare** **metal**和虚拟机，它还提供多租户服务。它通过简化的控制面板实现了快速创建和管理区块链的功能，并可立即提供区块链实例。 '
- en: '**Hyperledger Composer**:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hyperledger Composer**:'
- en: '**Contributors**: Contributors from IBM and Ox-chains are the maintainer community,
    however, everyone is encouraged to participate and contribute.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**贡献者**：IBM和Ox-chains的贡献者是维护者社区，但鼓励每个人参与和贡献。'
- en: '**Objective**: To develop a set of collaboration tools that facilitate the
    easy and quick building of blockchain business networks to enable developers to
    quickly create chaincode and applications.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：开发一组协作工具，促进快速、简便地建立区块链商业网络，以使开发人员能够快速创建链码和应用程序。'
- en: '**Key features**: Built using JavaScript and tools including Node.js, npm,
    and CLI. Its modular language facilitates asset definition, participant definition,
    and transaction definitions. These three components constitute the blockchain
    network. It allows faster and easier development of blockchain applications.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关键特点**：使用JavaScript和工具，包括Node.js、npm和CLI构建。其模块化语言有助于资产定义、参与者定义和交易定义。这三个组件构成了区块链网络。它可以更快、更容易地开发区块链应用程序。'
- en: '**Hyperledger Quilt**:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hyperledger Quilt**:'
- en: '**Contributors**: NTT Data and Ripple.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**贡献者**：NTT数据和瑞波。'
- en: '**Objective**: It allows interoperability between ledger systems by implementing
    the **Interledger Protocol** (**ILP**). ILP is a payments protocol and is designed
    to transfer value across both distributed and non-distributed ledgers.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：通过实现**Interledger Protocol**（**ILP**），实现账本系统之间的互操作性。ILP是一种支付协议，旨在跨分布式和非分布式账本转移价值。'
- en: '**Key features**: It allows atomic swaps between ledgers (even non-blockchain
    or distributed ledgers) and a single account namespace for the accounts within
    each ledger.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关键特点**：允许账本之间进行原子交换（甚至是非区块链或分布式账本），以及每个账本内的账户具有单一的命名空间。'
- en: '**Hyperledger Explorer**:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hyperledger Explorer**:'
- en: '**Contributors**: IBM, DTCC, and Intel.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**贡献者**：IBM、DTCC和英特尔。'
- en: '**Objective**:It allows authorized participants to explore DLT projects. It
    also allows the visualization of blockchain operations, which enables enterprises
    to extract value from data*.*'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：允许授权参与者探索DLT项目。它还允许可视化区块链操作，从而使企业能够从数据中提取价值。'
- en: '**Key features**: Explorer can view, invoke, deploy, or query blocks, transactions
    and associated data, network information (name, status, and a list of nodes),
    chaincodes, and transaction families, as well as any other relevant information
    stored on the ledger.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关键特性**: 浏览器可以查看、调用、部署或查询区块、交易和相关数据，网络信息（名称、状态和节点列表）、链码和交易家族，以及存储在分类账上的任何其他相关信息。'
- en: '**Hyperledger Ursa**:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hyperledger Ursa**:'
- en: '**Contributors** : Ursa contributors include Hyperledger Indy, Sawtooth, and
    Fabric developers, who worked on security aspects of these modules. Also, to ensure
    that all cryptographic algorithms meets the standards, several cryptographers
    are involved.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**贡献者**: Ursa的贡献者包括Hyperledger Indy、Sawtooth和Fabric开发人员，他们致力于这些模块的安全方面。此外，为确保所有加密算法符合标准，还有几位密码学家参与其中。'
- en: '**Key features**: A modular, flexible cryptographic library that is intended
    for, but not limited to, use by other projects in Hyperledger.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关键特性**: 旨在为Hyperledger中的其他项目提供模块化、灵活的加密库。'
- en: '**Objective**: To ensure safe and easier access to trusted cryptographic libraries
    to other Hyperledger projects. Its modular library will help blockchain developers
    to switch or change cryptographic schemes with the aid of simple configurations.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**: 确保其他Hyperledger项目对受信任的加密库的安全和更轻松访问。其模块化库将帮助区块链开发人员通过简单的配置切换或更改加密方案。'
- en: '**Language**: Rust.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言**: Rust.'
- en: HLF – features and qualifiers
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HLF – 特性和限定符
- en: Along with the Linux Foundation, various companies, such as Fujitsu, and IBM,
    are collaborating on the HLF project. HLF is a permissioned blockchain framework
    that is designed and architected to develop modular applications.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Linux基金会一起，各种公司，如富士通和IBM，正参与HLF项目的合作。HLF是一个设计和构建模块化应用程序的权限区块链框架。
- en: 'The following are the key features of the Hyperledger framework:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '以下是Hyperledger框架的关键功能:'
- en: HLF is governed by excellent, diverse technical steering committees from various
    organizations.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HLF受到来自各组织的卓越多样化的技术指导委员会的监督。
- en: HLF is modular and configurable, which makes it useful for various use cases,
    ranging from banking, finance, and the supply chain, to education and healthcare.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HLF是模块化和可配置的，这使得它对于各种用例都非常有用，从银行、金融和供应链到教育和医疗。
- en: It is a DLT where chaincode is authored in general-purpose programming languages,
    such as Java, Go, and Node.js, instead of programming in **DSL** (**domain-specific
    languages**). This also brings HLF closer to enterprises that have applications
    and resources built and skilled in these languages.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一种DLT，其中链码是用通用编程语言（如Java、Go和Node.js）编写的，而不是使用**DSL**（**领域特定语言**）。这也使得HLF更接近那些使用这些语言构建和精通这些语言的企业。
- en: HLF is a DLT that is an open source, enterprise-grade, permissioned DLT.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HLF是一个开源的、企业级的、权限区块链。
- en: HLF follows a modular component-based approach and easy-to-use APIs.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HLF采用模块化组件化方法和易于使用的API。
- en: As HLF is permissioned, it operates under the governance model to handle disputes.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于HLF是受权限控制的，它遵循治理模型来处理纠纷。
- en: HLF supports pluggable consensus protocols, and blockchain networks can choose
    a consensus protocol to address their use cases. Examples of single enterprise
    blockchain solutions, **crash fault tolerance** (**CFT**) consensus might be more
    appealing than BFT, since BFT is more suited to a multi-enterprise blockchain
    network.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HLF支持可插拔的共识协议，区块链网络可以选择共识协议以解决其用例。例如，对于单一企业区块链解决方案，**崩溃容错**（**CFT**）共识可能比BFT更吸引人，因为BFT更适合多企业区块链网络。
- en: The membership service (a key component of HLF) is plug and play.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成员服务（HLF的关键组件）是即插即用的。
- en: HLF also has pluggable identity management protocols, such as **Lightweight
    Directory Access Protocol** (**LDAP**) and OpenID Connect. This also makes HLF
    appealing to enterprises that have diverse identity solutions.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HLF还具有可插拔的身份管理协议，例如**轻量级目录访问协议**（**LDAP**）和OpenID Connect。这也使得HLF对拥有多样化身份解决方案的企业更具吸引力。
- en: In HLF, smart contracts, also known as chaincode, execute in a container (for
    example, Docker) and hence, are isolated from the ledger state.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在HLF中，智能合约，也称为链码，在容器中执行（例如，Docker），因此与分类账状态隔离。
- en: In HLF, ledgers can be configured to support various database management systems.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在HLF中，分类账可以配置为支持各种数据库管理系统。
- en: HLF does not require cryptocurrency, which significantly reduces the reliance
    on cryptocurrency for a blockchain existence and reduces the risk of attack.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HLF 不需要加密货币，这显著减少了区块链存在对加密货币的依赖，并降低了攻击风险。
- en: 'An HLF service diagram shows the various components of HLF. They are integrated,
    assembled, and interacted with via APIs and SDKs. The major components are as
    follows:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HLF 服务图显示了 HLF 的各种组件。它们是通过 API 和 SDK 集成、组装和交互。主要组件如下：
- en: Identity
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份
- en: Ledger
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 账本
- en: Transactions
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易
- en: Consensus
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共识
- en: Smart contract
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约
- en: Security and cryptoservices
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全和加密服务
- en: Why Hyperledger?
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 Hyperledger？
- en: We covered DLT and blockchain in [Chapter 1](759718e2-3861-41c1-8d90-bad1deeceddb.xhtml), *Exploring
    Blockchain and BaaS,* and [Chapter 2](66a7f3de-72ef-49e8-95fb-c65908888e2e.xhtml),
    *Construing Distributed Ledger Tech and Blockchain*. In addition, we learned about
    various network topologies, such as centralized, distributed, and decentralized
    systems. We also became familiar with the structure of blockchain, transactions,
    and various other blockchain concepts. We carried out a detailed analysis of,
    and discussion on, permissioned and permissionless blockchain. Permissionless
    blockchain, such as Ethereum and Bitcoin, are open blockchain, where anyone can
    participate. On the other hand, permissioned blockchain allows a limited set of
    participants to administer the blockchain network, while only authorized and authenticated
    sets of participants are able to access it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](759718e2-3861-41c1-8d90-bad1deeceddb.xhtml)，*探索区块链和BaaS*，以及[第2章](66a7f3de-72ef-49e8-95fb-c65908888e2e.xhtml)，*理解分布式账本技术和区块链*中，我们涵盖了
    DLT 和区块链。另外，我们了解了各种网络拓扑，如集中式、分布式和去中心化系统。我们还熟悉了区块链的结构、交易和各种其他区块链概念。我们对许可和无许可区块链进行了详细分析和讨论。像以太坊和比特币这样的无许可区块链是开放区块链，任何人都可以参与其中。另一方面，许可区块链允许有限的参与者管理区块链网络，只有经过授权和认证的参与者才能访问它。
- en: There are various advantages associated with permissionless blockchain, and
    similarly, there are advantages to using permissioned blockchain. Permissioned
    blockchain is cost-effective, and has low transaction overheads. As transaction
    verification and validation is faster, transaction costs are very low and transaction
    times are faster. The decision behind the choice of blockchain network depends
    entirely on the use case and the visibility of messages and transactions. However,
    in my opinion, the key difference that resonates well with enterprises is the
    determination as to who will participate in the blockchain business network and
    who is authorized to transact on the business network; another reason being the
    ability to empower the direct relationship between producer and consumer, and
    reducing or removing the reliance on middle parties or third parties (intermediaries).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 与无许可区块链相关的各种优势，同样，使用许可区块链也有优势。许可区块链成本效益高，交易开销低。由于交易验证和验证更快，交易成本非常低，交易时间更短。选择区块链网络背后的决策完全取决于用例和消息和交易的可见性。然而，在我看来，与企业形成共鸣的关键区别是确定谁将参与区块链业务网络，谁有权在业务网络上进行交易；另一个原因是能够增强制造商和消费者之间的直接关系，并降低或消除对中间人或第三方（中介）的依赖。
- en: We are in the era of disintermediation. It has been pioneered by Uber, Amazon,
    Airbnb, and others, where they own no vehicles, hold no real inventory, and have
    no inventory of rooms, respectively, yet they allow producers and consumers to
    connect and transact. Blockchain and DLT further empower producers and consumers,
    resulting in the disintermediation of third parties and intermediaries from the
    equation. Permissioned blockchain enhances privacy by means of permissioned access
    to blockchain networks and channeling transactions between participants to further
    allow the segregation of data on blockchain networks, thereby enabling privacy
    and the confidentiality of data. DLT, like blockchain, has the full potential
    to disrupt industries that have a high reliance on intermediaries, such as insurance,
    healthcare, transportation, retail, logistics, real estate, and education.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正处在去中介化的时代。这一趋势由Uber、亚马逊、Airbnb等公司发起，它们没有拥有任何车辆、实际库存或房间库存，但它们让生产者和消费者连接和交易。区块链和分布式账本进一步赋予生产者和消费者权力，从方程式中剔除第三方和中介。许可区块链通过对区块链网络进行许可访问和在参与者之间传输交易，进一步允许数据在区块链网络上的隔离，从而实现隐私和数据的保密性。与区块链一样，分布式账本完全有可能颠覆那些严重依赖中介的行业，比如保险、医疗保健、交通运输、零售、物流、房地产和教育。
- en: 'At a high level, with regard to an enterprise, blockchain offers the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 就企业而言，区块链在高层次上提供以下几点：
- en: It checks for the risk of malicious nodes tampering with data in the event of
    transmission to ensure tamper-proof data transmission. This is ensured by securing
    the transaction tree, along with complexity in gaining PoW. Malicious users cannot
    alter/tamper with data without recomputing the PoW hash, which is a gigantic task
    and requires extreme computing power.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它检查恶意节点篡改数据传输的风险，以确保数据传输的防篡改。这由保护交易树以及获得PoW的复杂性来实现。恶意用户不能在没有重新计算PoW哈希的情况下更改/篡改数据，这是一项艰巨的任务，需要极端的计算能力。
- en: As the HLF blockchain is permissioned, the blockchain network is operating among
    known participants, which offers a high level of trust in the blockchain network
    itself.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于HLF区块链是受许可的，区块链网络是在已知参与者中进行操作的，这在区块链网络本身提供了高水平的信任。
- en: Using HLF's channels, transactions between groups of participants can be secured
    further.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HLF的通道，可以进一步保障参与者之间的交易。
- en: It removes the reliance on a single, central point of failure.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它消除了对单一中心故障点的依赖。
- en: Consistency is ensured by following protocol, adopting the same rules for validation
    and block layout.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一致性由协议保证，采用相同的验证规则和区块布局。
- en: All nodes will follow the longest chain, which ensures the establishment of
    agreement across geographies.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有节点将遵循最长的链，确保在各地建立协议。
- en: Blockchain lowers uncertainty and enhances trust between parties, leading to
    faster and more secure transactions.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块链降低不确定性，增强各方之间的信任，实现更快速、更安全的交易。
- en: Permissioned blockchain, chosen by enterprises, allows enterprises to define
    membership rules for participants by providing immutability (tamper-proof, where
    blockchain represents the truth), privacy, and confidentiality (the secure exchange
    of sensitive data with authorization), scalability, reliability, availability
    (to support mission-critical applications), and auditability (manage, track, trace,
    verify, and monitor).
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业选择的许可区块链允许企业为参与者制定成员资格规则，提供不可变性（防篡改，区块链代表着真相）、隐私性和保密性（授权进行敏感数据安全交换）、可扩展性、可靠性、可用性（支持关键任务应用）和可审计性（管理、跟踪、追溯、验证和监控）。
- en: In a permissionless blockchain, transactions are executed on every node (assuming
    the consensus is PoW). This means a lack of confidentiality because data and smart
    contracts, as well as transaction data, is available on every node on the network.
    Confidentiality and transaction data visibility is of great importance for enterprises.
    In the case of B2B transactions, an enterprise would not like the data on special
    rates that is offered to one partner being available to another partner, although
    confidentiality is addressed in permissionless networks by encrypting data. However,
    permissionless blockchain networks using PoW will lead to data being available
    on every node, which highlights the possibility of decrypting it, given time,
    and the local availability of data on the node. In HLF, along with the participants
    identified and encryption, channels offer the highest level of confidentiality.
    Here, only participating nodes will have access to chaincode and transaction data
    and that, too, is further controlled by access control. This introduces a high
    level of privacy and confidentiality to a blockchain network.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在无需许可区块链中，交易在每个节点上执行（假设共识机制是 PoW）。这意味着缺乏保密性，因为数据和智能合约以及交易数据都可以在网络上的每个节点上找到。对企业来说，保密性和交易数据的可见性非常重要。在
    B2B 交易的情况下，企业不希望一个合作伙伴提供的特别费率数据对另一个合作伙伴可见，尽管无需许可网络通过加密数据来解决保密性问题。然而，使用 PoW 的无需许可区块链网络将导致数据在每个节点上都可用，这突显了在未来可能有可能解密数据，以及节点上的数据的本地可用性。在
    HLF 中，除了已识别的参与者以及加密外，通道提供了最高级别的保密性。在这里，只有参与节点才能访问链码和交易数据，而且这也是由访问控制进一步控制的。这为区块链网络引入了高级别的隐私和保密性。
- en: '**Permissionless versus permissioned blockchain**:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**无需许可与受许可区块链**：'
- en: 'When we enter into a discussion on *Why Hyperledger?*, it makes sense to quickly
    look into the differences between permissionless blockchain and permissioned blockchain,
    such as HLF. Let''s analyze these variants of DLT in terms of execution style,
    determinism, and confidentiality:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论*为什么选择 Hyperledger ？*时，很有必要快速了解无需许可区块链和受许可区块链（如 HLF）之间的差异。让我们从执行方式、确定性和保密性的角度分析这些分布式账本（DLT）的变体：
- en: '**Execution style**:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行方式**：'
- en: A permissionless blockchain, such as Ethereum, observes the sequential execution
    of transactions, where they abide by the *order*-*execute* architecture. All peers
    execute the o*rder*-*execute* style of transactions and this results in performance
    and scalability limitations. Here, the throughput is inversely proportional to
    latency in transaction. However, permissionless blockchain tries to handle this
    by orchestrating around a cryptocurrency. This ensures that a fuel/gas is included
    with each transaction. Hence, a gas is paid for each step of the transaction execution
    via a smart contract. However, such a mechanism of engulfing a cryptocurrency
    might not fit into the permissioned blockchain.
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需许可区块链，如以太坊，观察到交易的顺序执行，它们遵循*顺序*-*执行*的架构。所有对等方执行*顺序*-*执行* 风格的交易，这导致了性能和可扩展性的限制。在这里，吞吐量与交易的延迟成反比。然而，无需许可区块链试图通过围绕加密货币进行编排来处理这个问题。这确保了每笔交易都包括一定数量的燃料/气体。因此，每个交易执行步骤都需要通过智能合约付费。然而，这种吞食加密货币的机制可能不适用于受许可区块链。
- en: A permissioned blockchain, like HLF's architecture, supports scalability and
    performance, along with trust. HLF's architecture is based on **execute-order-validate**
    (**E-O-V**) architecture, where transactions are executed even before a consensus
    is reached. Execution (**execute**) of the transaction will ensure a transaction's
    correctness (endorsement), while a modular pluggable consensus protocol will result
    in an ordering (**order**) transaction. Furthermore, just before committing the
    transaction, it is validated (**validate**) by an application-specific endorsement
    policy. E-O-V addresses the flexibility, scalability, performance, and confidentiality
    issues faced by the order and execute architecture of permissionless blockchain.
    HLF allows a subset of peers to execute transactions in parallel. Interestingly,
    chaincode delegates the work of endorsement to certain designated peers; hence,
    different chaincode can designate different peers as endorsers, which supports
    parallel execution. Note that Fabric executes a transaction even before it is
    ordered.
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许的区块链，如 HLF 的架构，支持可伸缩性和性能，同时也支持信任。 HLF 的架构基于**执行-排序-验证**（**E-O-V**）架构，其中交易甚至在达成共识之前就已被执行。交易的执行（**execute**）将确保交易的正确性（认可），而模块化可插拔式共识协议将导致排序（**order**）交易。此外，在提交交易之前，交易受特定于应用程序的认可政策验证（**validate**）。E-O-V解决了允许的区块链订购和执行架构所面临的灵活性、可伸缩性、性能和保密性问题。
    HLF 允许子组中的一部分对等方并行执行交易。有趣的是，链码将认可工作委托给某些指定的对等方；因此，不同的链码可以指定不同的对等方作为认可者，从而支持并行执行。请注意，Hyperledger
    Fabric 会在交易被排序之前执行交易。
- en: '**Determinism**:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定性**：'
- en: Consensus ensures that nodes are in agreement over a transaction and, hence,
    the smart contract should execute transactions deterministically. If not, there
    is no point in establishing a consensus. In addition, such non-determinism will
    lead to nullifying the consensus, and this will result in forks. Hence, smart
    contract languages and compilers should ensure that smart contract execution is
    deterministic. Hence, various blockchains opt for DSL. This forces developers
    to learn new languages, just to ensure the determinism of smart contracts.
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共识确保节点对交易达成一致意见，因此智能合约应该确定性地执行交易。如果不确定，建立共识就没有意义。此外，这种非确定性会导致共识的无效，并且会导致分支。因此，智能合约语言和编译器应确保智能合约的执行是确定性的。因此，各种区块链都选择了领域特定语言。这迫使开发人员学习新的语言，只是为了确保智能合约的确定性。
- en: HLF's E-O-V architecture ensures that a transaction is validated by an application-specific
    endorsement policy. This means that it is the application-specific policy that
    ensures how many, and which, peer nodes will validate and ensure the deterministic
    execution of the chaincode. Hence, a subset of peers will execute (endorse) the
    transaction to meet the endorsement policy. This will filter out inconsistent
    results, even before ordering, and thereby eliminate any non-determinism. Because
    non-determinism is eliminated, HLF supports the use of a standard programming
    language. You can write chaincode in Go, Node.js, and Java.
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: HLF 的 E-O-V 架构确保交易受特定于应用程序的认可政策验证。这意味着是特定于应用程序的政策确保了多少以及哪些对等方节点将验证和确保链码的确定性执行。因此，子组的一部分将执行（认可）交易以满足认可政策。这将在排序之前过滤出不一致的结果，并从而消除任何不确定性。因为消除了不确定性，HLF
    支持使用标准编程语言。你可以使用 Go、Node.js 和 Java 编写链码。
- en: '**Hybrid replication driver for determinism**:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定性的混合复制驱动程序**：'
- en: HLF follows passive and active replication. Passive replication is achieved
    by executing (endorsing) a transaction by a subset of peers, which offers determinism
    and parallel execution. It also achieves active replication by committing transactions
    to ledger only after a consensus is reached. Hence, HLF follows a hybrid replication
    strategy. Again, the choice of consensus is specific to the use case, or deployment
    in relation to that use case, as Hyperledger supports a modular consensus mechanism.
    This allows implementers to choose any protocol of choice for consensus, such
    as BFT or CFT.
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: HLF 遵循被动复制和主动复制。通过广泛执行（认可），被动复制实现了确定性和并行执行。它还通过只在达成共识后将交易提交到账本来实现主动复制。因此，HLF
    遵循混合复制策略。同样，共识的选择是特定于用例的，或者与该用例部署相关，因为 Hyperledger 支持模块化共识机制。这允许实施者选择任何自己喜欢的共识协议，比如
    BFT 或 CFT。
- en: '**Confidentiality**:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机密性**：'
- en: 'Permissionless blockchain, which leverages PoW, executes transactions on every
    node. Hence, every transaction and the smart contract are visible to each node,
    which clearly indicates a loss of confidentiality for the gain of BFT offered
    by PoW. Loss of confidentiality is a challenge for enterprise customers and their
    use cases. For example, if a business wanted to establish certain rates with some
    suppliers and a different rate with non-premium suppliers, they would not be able
    to maintain the confidentiality of such preferred rates. If all suppliers are
    on the same blockchain network and access the same smart contract, it is impossible
    to maintain different trade relationships (rates) with different suppliers. Permissionless
    blockchain offers two types of solution:'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 PoW 的无许可区块链在每个节点上执行交易。因此，每个交易和智能合约对每个节点都是可见的，这明确表明了PoW提供的BFT的保密性损失。保密性的丧失是企业客户及其用例所面临的挑战。例如，如果一家企业希望与一些供应商建立某些价格，并与非高级供应商建立不同价格，它们将无法保持这些首选价格的保密性。如果所有供应商都在同一区块链网络上并访问相同的智能合约，则不可能与不同供应商维持不同的交易关系（价格）。无许可区块链提供了两种解决方案：
- en: It encrypts such preferred information. However, data and smart contracts are
    on every node. Encryption can be compromised and there is always the risk of losing
    information.
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它加密了这些首选信息。然而，数据和智能合约都在每个节点上。加密可能会被破解，且始终存在丢失信息的风险。
- en: '**Zero knowledge proofs** (**ZKP**) can handle a loss of confidentiality. However,
    ZKP''s computation increases latency and consumes resources. This means that ZKP
    can solve confidentiality issues, even though this will lead to performance issues.'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**零知识证明**（**ZKP**）可以处理保密性丢失。然而，ZKP的计算会增加延迟并消耗资源。这意味着ZKP可以解决保密性问题，尽管这会导致性能问题。'
- en: A permissioned blockchain, like HLF, offers channels and **private data collection**
    (**PDC**) to address the confidentiality issue.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像 HLF 这样的许可区块链提供了通道和**私有数据收集**（**PDC**）来解决保密性问题。
- en: Go/No–Go for a blockchain solution
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块链解决方案的 Go/No–Go
- en: Now, every enterprise needs a blockchain solution and, at the same time, every
    enterprise needs a blockchain solution based on the use case. Hence, the core
    of identifying whether a blockchain solution is required by an enterprise is based
    on the use case that it is trying to address.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每个企业都需要区块链解决方案，同时每个企业都需要基于用例的区块链解决方案。因此，确定企业是否需要区块链解决方案的核心在于它试图解决的用例。
- en: 'Now, let''s list the factors that an enterprise should consider before evaluating
    blockchain:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们列出企业在评估区块链之前应考虑的因素：
- en: Is there a need for a common shared database?
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否需要一个共享的共享数据库？
- en: For a business process, do the participating parties have a lack of trust?
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于业务流程，参与方是否缺乏信任？
- en: Is more than one party involved in committing to a database?
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否有多个方参与了向数据库承诺？
- en: Are third parties or middlemen involved in the business processes?
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否涉及第三方或中间人参与业务流程？
- en: Does the business process data exist in multiple databases?
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务流程数据是否存在于多个数据库中？
- en: Is there a need for the immutability of data or a log/history of transactions?
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否需要数据的不可变性或交易的日志/历史记录？
- en: Is the transaction frequency in the region of 10,000 transactions per second?
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易频率是否在每秒 10,000 次左右？
- en: Are the transaction rules changing infrequently? (Rules authored in blockchain
    are pre-set and, once deployed and initiated, chaincode will not change routes
    based on new rules). As everything on blockchain is deterministic, rule-changing
    applications are frequently not the right candidate for blockchain).
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易规则是否不经常更改？（在区块链上编写的规则是预先设置的，一旦部署并启动，链码将不会根据新规则改变路线）。由于区块链上的一切都是确定性的，规则更改应用程序通常不适合区块链）。
- en: Does the process not store a lot of static data?
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过程中没有存储大量静态数据吗？
- en: Does the process not have a lot of data? (As the data is replicated, a significantly
    larger set of data replication to all the nodes is not an efficient use case for
    blockchain).
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过程中的数据量不大吗？（由于数据被复制，大规模的数据复制到所有节点并不是区块链的有效用例）。
- en: Is there not any need to retrieve data from external sources?
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否没有从外部来源检索数据的需求？
- en: If the answer to any of the preceding questions is *yes*, then blockchain is
    the solution for the enterprise use case. Also, if there is a need for transactions
    to be public, then the enterprise use case requires a permissionless blockchain
    solution, or else it requires a permissioned blockchain solution, such as HLF.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的任何问题的答案是*是*，那么区块链就是企业用例的解决方案。此外，如果需要交易公开，那么企业用例需要一个无权限的区块链解决方案，否则需要一个像
    HLF 这样的有权限的区块链解决方案。
- en: Architecture – conceptual view
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构 - 概念视图
- en: Before we jump into HLF architecture and its components, let's first walk though
    a conceptual view and learn a number of important terms. Read this section to
    grasp some basic knowledge by means of an example and, after reading the architecture
    and components, revisit this section to further affirm your understanding of HLF.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解 HLF 架构及其组件之前，让我们首先了解一些重要术语的概念视图。通过一个例子来阅读本节，以把握一些基本知识，并在阅读架构和组件后回顾本节，以进一步确认对
    HLF 的理解。
- en: The KonsensusChain organization decides to create a product chain (a blockchain
    business network named ProductChain) to enable producers and retailers to enter
    into transactions. In addition, it will allow the regulatory authority to validate
    the legality of the products as well. Organization KonsensusChain will act as
    the founder organization and will not participate in any transactions. However,
    it will set up the blockchain network, develop user interfaces, chaincode applications,
    and will further maintain and operate the business network (consortium). This
    is a founder-initiated model of a blockchain network, based on HLF, where participating
    organizations have created a consortium. In this sample, a dApp is not fully offered
    by the founder. dApps are individually built by the organization. However, they
    use SDK, REST APIs, and other integration methods to connect with the business
    blockchain network and execute transactions.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: KonsensusChain 组织决定创建一个产品链（一条名为 ProductChain 的区块链业务网络）来使生产商和零售商进行交易。此外，它将允许监管机构验证产品的合法性。
    KonsensusChain 组织将充当创始组织，并不参与任何交易。然而，它将建立区块链网络，开发用户界面、链码应用程序，并进一步维护和操作业务网络（财团）。这是一个基于
    HLF 的创始者发起的区块链网络模型，在这个模型中，参与组织已创建了一个财团。在此示例中，创始者并不完全提供 dApp。dApps 是由组织单独构建的。然而，它们使用
    SDK、REST API 和其他集成方法与业务区块链网络连接并执行交易。
- en: 'The following are the different organizations intending to be part of the blockchain
    network:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是意图成为区块链网络一部分的不同组织：
- en: '**Producer organization**: Identified as organization 1 (**O1**), this is an
    organization that produces certain products and sells them to retailers. The regulatory
    authority further verifies the legality of those products. The **c****ertificate
    authority** (**CA**) for producer organization **O1** is **CA 01**.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产商组织**：标识为组织1（**O1**），这是一个生产某些产品并将它们销售给零售商的组织。监管机构进一步验证这些产品的合法性。生产组织 **O1**
    的证书授权机构（CA）是 **CA 01**。'
- en: '**Retailer organization**: Identified as organization 2 (**O2**), this is an
    organization that buys products from producer organization **O1** and sells them
    on to its consumers. The CA for retailer organization **O2** is **CA O2**.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**零售商组织**：标识为组织2（**O2**），这是一个从生产组织 **O1** 购买产品并转售给其消费者的组织。零售商组织 **O2** 的 CA
    是 **CA O2**。'
- en: '**Retailer organization**: Identified as organization 1 (**O3**), this is an
    organization that buys products from producer organization **O1** and sells them
    on to its consumers. The CA for retailer organization **O3** is **CA O3**.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**零售商组织**：标识为组织1（**O3**），这是一个从生产组织 **O1** 购买产品并转售给其消费者的组织。零售商组织 **O3** 的 CA
    是 **CA O3**。'
- en: '**Regulatory authority**: Identified as a regulatory organization (**O4**),
    this is a regulatory authority that verifies the products and stamps the legality
    of produce*.*'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监管机构**：标识为监管机构（**O4**），这是一个验证产品并核实产品合法性的监管机构。'
- en: '**Founder organization**: [KonsensusChain.com ](http://KonsensusChain.com)is
    the founding organization, identified as organization 5 (**O5**). All the retailers
    and producers have agreed to employ **O5** as the founder organization for the
    ProductChain blockchain network (the fictitious name of the blockchain network).'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创始组织**：[KonsensusChain.com](http://KonsensusChain.com) 是创始组织，标识为组织5（**O5**）。所有零售商和生产商已经同意将
    **O5** 作为 ProductChain 区块链网络（区块链网络的虚构名称）的创始组织。'
- en: 'The following are the requirements of this blockchain-based business network
    (ProductChain):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个基于区块链的业务网络（ProductChain）的要求：
- en: '**Requirement one**: The producer organization (**O1**) wants to have private
    transactions and communications with the retailer organization (**O2**), as they
    have agreed on a specific rate for certain products and want to have transaction
    privacy'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**需求一**：生产者组织（**O1**）希望与零售商组织（**O2**）进行私人交易和沟通，因为他们已经就某些产品的特定价格达成一致，并希望保持交易隐私。'
- en: '**Requirement two**: Similarly, the producer organization (**O1**) wants to
    have private transactions and communications with the retailer organization (**O3**), as
    they have agreed on certain discounts and payment terms, which they want to keep
    secret'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**需求二**：类似地，生产者组织（**O1**）希望与零售商组织（**O3**）进行私人交易和沟通，因为他们已经就某些折扣和付款条款达成了一致，他们希望保密。'
- en: 'The following is a conceptual diagram of the business network that will be
    referred to in this section:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本节将参考的业务网络的概念图：
- en: '![](img/4f65c0f4-db7a-42c4-a6da-7addbb5d27a9.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f65c0f4-db7a-42c4-a6da-7addbb5d27a9.jpg)'
- en: 'Architecture: conceptual view'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 架构：概念视图
- en: Building the blockchain network
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建区块链网络
- en: 'This section discusses the building blocks of the business network and covers
    the steps involved in forming a business network. All the terms are based on HLF.
    The following are the steps required to build a business network:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了业务网络的构建块，并涵盖了组建业务网络所涉及的步骤。所有术语均基于 HLF。以下是构建业务网络所需的步骤：
- en: '**Step 1**: **Initiating the blockchain network**: The first step in forming
    a network is to start an orderer. In the sample (refer to the preceding *Architecture*:
    *conceptual view* diagram), node **O5** is owned by organization **O5**, and it
    is also defined as the orderer. The founder organization (**O5**) uses network
    configuration, **NC05**, and configures an ordering service (**Ord05**) for the
    blockchain network. This setup offers full administrative rights to the founder
    organization (**O5**) over the blockchain network (ProductChain). The CA for organization
    **O5** is **CA** **O5**. The CA issues certificates to administrators of the network
    nodes of the founder organization (**O5**):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 1**：**启动区块链网络**：组建网络的第一步是启动一个排序器。在示例中（参考上述 *架构*：*概念视图* 图），节点 **O5** 归属于组织
    **O5**，也被定义为排序器。创始组织（**O5**）使用网络配置 **NC05**，并为区块链网络配置了一个排序服务（**Ord05**）。这个设置为创始组织（**O5**）在区块链网络（ProductChain）上提供了完整的管理权限。组织
    **O5** 的 CA 是 **CA O5**。该 CA 向创始组织（**O5**）的网络节点管理员颁发证书：'
- en: Essentially, the ordering service is hosted on the founder organization (**O5**),
    or a cloud platform administrator, by **O5**, and further managed, and administered
    by **O5**. The network configuration file (**NC05**) defines the rights and privilege
    information of organization **O5** over the business network.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从本质上讲，排序服务由创始组织（**O5**）或云平台管理员托管，并由 **O5** 进一步管理和管理。网络配置文件 **NC05** 定义了组织 **O5**
    在业务网络上的权限和特权信息。
- en: CAs are central to HLF. HLF offers a built-in Fabric CA for a quick start. However,
    organizations can use their own CAs. Different participants use certificates to
    identify themselves on the blockchain network. In this fictitious blockchain network
    (ProductChain), we will define five CAs, one for each organization.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CAs 是 HLF 的核心。HLF 提供了一个内置的 Fabric CA 以便快速启动。然而，组织可以使用自己的 CAs。不同的参与者使用证书在区块链网络上进行身份识别。在这个虚构的区块链网络（ProductChain）中，我们将定义五个
    CAs，每个组织一个。
- en: Network configuration (**NC05**) uses a structure called a **membership service
    provider** (**MSP**) to map certificate issues by **CA05** to the certificate
    holder of the **O5** organization. Furthermore, the MSP name is used in policies,
    by **NC05**, to grant access to participants from the founder organization (**O5**)
    over blockchain network resources. Take the example of identifying a participant
    from **O5** who acts as the administrator of a blockchain network and can further
    add new member organizations to the blockchain network.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络配置（**NC05**）使用称为 **成员服务提供商**（**MSP**）的结构，将由 **CA05** 发出的证书映射到 **O5** 组织的证书持有人。此外，**NC05**
    使用 MSP 名称在策略中授予来自创始组织（**O5**）的参与者对区块链网络资源的访问权限。以识别来自 **O5** 的参与者为例，该参与者充当区块链网络的管理员，并进一步向区块链网络添加新的成员组织。
- en: '**Other administrators being added by the founder**: The founder organization (**O5**)
    adds a producer organization (**O1**) as an administrator by updating the network
    configuration (**NC05**). This modification further defines **O1** as the administrator
    of the blockchain network. The producer organization employs its resource (node)
    as an additional orderer (**O1**) to the blockchain network.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**创始者添加其他管理员**：创始组织(**O5**)通过更新网络配置(**NC05**)将生产者组织(**O1**)添加为管理员。此修改进一步定义**O1**为区块链网络的管理员。生产者组织利用其资源（节点）作为区块链网络的附加订货者(**O1**)。'
- en: '**Step 2**: **Defining a consortium to realize the separation and security
    of transactions**: Secondly, we will look at defining the consortium. It is an
    association of two or more organizations, which participate to achieve a common
    goal. In a consortium, each participating organization has its own legal status
    and is joined by agreed-upon contracts. This consortium formation is different
    from the consortium defined in [Chapter 2](66a7f3de-72ef-49e8-95fb-c65908888e2e.xhtml),
    *Construing Distributed Ledger Tech and Blockchain*. In [Chapter 2](66a7f3de-72ef-49e8-95fb-c65908888e2e.xhtml),
    *Construing Distributed Ledger Tech and Blockchain,* thefounder organization itself
    defines and owns the consortium and also participates in the transactions. Here,
    a founder is responsible for setting up, maintaining, and operating the infrastructure
    of the blockchain network. It also offers a solution, where various organizations
    can amalgamate and form a consortium and channels, and can enter into transactions.
    Such a configuration can allow cloud platform providers to manage the business
    network, without participating in it. After all, consortia are groups of like-minded
    organizations, working to solve a common problem. In this process, they employ
    their resources in the business network. In this sample, the founder organization
    is employing its infrastructure and also employs a few nodes as orderers. In this
    consortium, the following applies:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**第二步**：**定义联盟以实现交易的分离和安全性**。其次，我们将看看如何定义联盟。它是两个或更多组织的关联，他们参与以实现共同的目标。在联盟中，每个参与的组织都有其自己的法律地位，并通过协议约定加入其中。这种联盟形成不同于[第二章](66a7f3de-72ef-49e8-95fb-c65908888e2e.xhtml)所定义的联盟，*理解分布式分类账技术和区块链*。在[第二章](66a7f3de-72ef-49e8-95fb-c65908888e2e.xhtml)中，*理解分布式分类账技术和区块链*，创始组织本身定义并拥有联盟，并且参与交易。在这里，创始者负责建立、维护和操作区块链网络的基础设施。它还提供了一个解决方案，各种组织可以融合并形成联盟和通道，并且可以进行交易。这样的配置可以允许云平台提供商管理业务网络，而无需参与其中。毕竟，联盟是一群志同道合的组织，致力于解决共同的问题。在这个过程中，他们在业务网络中利用自己的资源。在这个示例中，创始组织正在利用自己的基础设施，并且雇佣了几个节点作为订货者。在这个联盟中，以下内容适用：'
- en: The founder organization is employing its infrastructure and also employs node
    **P5** (**Ord O5**) as the orderer node
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创始组织正在利用自己的基础设施，并且雇佣节点**P5**(**Ord O5**)作为订货节点。
- en: The producer organization **O1** (also defined as the network administrator)
    defines a **Consortium-X1** with two members—organization **O1** and organization **O2**
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产者组织**O1**（也被定义为网络管理员）定义了一个名为**Consortium-X1**的联盟，其成员为组织**O1**和组织**O2**。
- en: The consortium definition is stored in the network configuration (**NC05**)
    file
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联盟定义保存在网络配置（**NC05**）文件中。
- en: '**Step 3**: **Defining channels**: Thirdly, we will be creating a channel that
    allows members of a consortium to enter into transactions with one another securely.
    Generally, such channels are referred to as application channels:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**第三步**：**定义通道**：第三，我们将创建一个通道，允许联盟成员之间安全地进行交易。通常，这些通道被称为应用程序通道：'
- en: Channel configuration **CCon1** governs **Channel-C1**. **Channel-C1** is created
    for **Consortium-X1**. **O1** and **O2** can both manage channel configuration,
    **CCon1**, and they have equal rights over it.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通道配置**CCon1**管理**Channel-C1**。**Channel-C1**是为**Consortium-X1**创建的。**O1**和**O2**都可以管理通道配置**CCon1**，并且他们对其拥有平等的权限。
- en: Channel configuration (**CCon1**) is completely separate from network configuration
    (**NC05**) and, hence, organization **O5** has no control over channel configuration
    (**CCon1**). However, **Channel-****C1** is connected to the ordering service
    (**Ord 05**).
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通道配置(**CCon1**)完全独立于网络配置(**NC05**)，因此组织**O5**对通道配置(**CCon1**)没有控制权。然而，**Channel-C1**连接到订货服务(**Ord
    05**)。
- en: Channel configuration (**CCon1**) contains policies that define the organizations
    (**O1** and **O2**) rights to transact over **Channel-C1**. Other organizations,
    such as **O3** and **O5**, cannot affect transactions over it.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通道配置（**CCon1**）包含定义组织（**O1** 和 **O2**）在 **Channel-C1** 上进行交易权限的策略。其他组织，如 **O3**
    和 **O5**，无法影响其上的交易。
- en: '**Adding peer nodes to channels**:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**向通道添加对等点**：'
- en: '**Adding peers to the channel**, **organization 1**: Peer **P1** is joined
    to a business network by the producer organization (**O1**). This is possible
    because the organization owns the peer (**O1** owns **P1**). Peer **P1** in the
    diagram also hosts the copy of ledger 1 (**L1**). It is clear that **P1** and
    **O5** (the peer and ordering service) can communicate with one another over **Channel-C1**.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向通道添加对等点**，**组织 1**：对等点 **P1** 被生产者组织（**O1**）加入到业务网络中。这是因为该组织拥有对等点（**O1**
    拥有 **P1**）。图中的对等点 **P1** 也托管分类帐 1（**L1**）的副本。很明显，**P1** 和 **O5**（对等点和订购服务）可以通过
    **Channel-C1** 互相通信。'
- en: '**Adding peers to the channel**, **organization 2**: Similarly, peer **P2**
    is joined to the channel by the retailer organization (**O2**), which owns peer
    **P2**. Peer **P2 **also hosts the copy of ledger 1 (**L1**). It is clear that
    **P2** and **O5** (the peer and ordering service) can communicate with one another
    over **Channel-C1**.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向通道添加对等点**，**组织 2**：同样，对等点 **P2** 被零售商组织（**O2**）加入到通道中，该组织拥有对等点 **P2**。对等点
    **P2** 也托管分类帐 1（**L1**）的副本。很明显，**P2** 和 **O5**（对等点和订购服务）可以通过 **Channel-C1** 互相通信。'
- en: 'The following are the lessons we can take from this configuration:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从这个配置中得出以下教训：
- en: '**Associating peer with the organization**: The association of peer **P1** with
    organization (**O1**) can be confirmed based on the certificates. In this sample,
    organization **O1**''s CA (**CA O1**) has issued the X.509 identity to peer (**P1**),
    hence, **P1** is associated with **O1**. Similarly, the association of peer (**P2**)
    with the organization (**O2**) can be confirmed based on the certificates. In
    this sample, organization **O2**''s CA (**CA O2**) has issued the X.509 identity
    to peer (**P2**), hence, **P2** is associated with **O2**.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将对等点与组织相关联**：可以根据证书确认对等点 **P1** 与组织（**O1**）的关联。在本示例中，组织 **O1** 的 CA（**CA
    O1**）已向对等点（**P1**）颁发了 X.509 身份，因此，**P1** 与 **O1** 相关联。类似地，可以根据证书确认对等点（**P2**）与组织（**O2**）的关联。在本示例中，组织
    **O2** 的 CA（**CA O2**）已向对等点（**P2**）颁发了 X.509 身份，因此，**P2** 与 **O2** 相关联。'
- en: '**Associating peer with the ledger**: Peer 1 (**P1**) and Peer 2 (**P2**) host
    the copy of ledger 1 (**L1**). Hence, ledger 1 (**L1**) is physically associated
    with **P1** and **P2**, while logically associated with channel (**C1**).'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将对等点与分类帐相关联**：对等点 1（**P1**）和对等点 2（**P2**）托管分类帐 1（**L1**）的副本。因此，分类帐 1（**L1**）在物理上与**P1**和**P2**相关联，在逻辑上与通道（**C1**）相关联。'
- en: '**Functioning**: At startup, peer (**P1**) sends a request to the orderer (**Ord
    O5**). The request from peer (**P1**) is verified by the orderer (**Ord O5**)
    by referring to the channel configuration (**CCon1**). This verification unlocks
    information about **P1''**s permissions (access controls) over the channel (**C1**).
    It helps in determining the operations (read/write) that peer (**P1**) can perform
    over ledger 1 (**L1**). The same holds true for peer **P2**.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能**：在启动时，对等点（**P1**）向订购者（**Ord O5**）发送请求。订购者（**Ord O5**）通过参考通道配置（**CCon1**）验证来自对等点（**P1**）的请求。这种验证解锁了关于**P1**在通道（**C1**）上的权限（访问控制）的信息。它有助于确定对等点（**P1**）可以在分类帐
    1（**L1**）上执行的操作（读/写）。对对等点 **P2** 也是如此。'
- en: '**Adding chaincode and allowing an application to access the ledger**: In this
    sample, a dApp is not fully offered by the founder. dApps are individually built
    by the organization.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**添加链码并允许应用访问分类帐**：在这个示例中，创始人并未完全提供 dApp。dApps 是由组织单独构建的。'
- en: 'However, they use SDKs, REST APIs, and other integration methods to connect
    with the business blockchain network and execute transactions:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，它们使用 SDK、REST API 和其他集成方法来连接业务区块链网络并执行交易：
- en: Producer organization (**O1**) owns application (**O1App1**), and retailer organization
    (**O2**) owns application (**O2App2**). These applications are integrated with
    chaincode (a smart contract), defined as chaincode (**SC1**) in the diagrams.
    Chaincode (**SC1**) is deployed on peer 1 (**P1**) and peer 2 (**P2**) and allows
    dApp (**O1App1** and **O1App2**) to access ledger 1 (**L1**). All the participating
    entities, such as applications (**O1App1** and **O2App2**), peers (**P1** and
    **P2**), and the ordering service (**O5**) use **Channel-C1** for communication
    purposes (transactions).
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产者组织（**O1**）拥有应用程序（**O1App1**），零售商组织（**O2**）拥有应用程序（**O2App2**）。这些应用程序与链码（智能合约）集成，定义为图表中的链码（**SC1**）。链码（**SC1**）部署在对等方
    1（**P1**）和对等方 2（**P2**）上，并允许 dApp（**O1App1**和**O1App2**）访问分类账 1（**L1**）。所有参与实体，如应用程序（**O1App1**和**O2App2**）、对等方（**P1**和**P2**）和订购服务（**O5**）都使用
    **Channel-C1** 进行通信（交易）。
- en: dApps (**O1App1** and **O2App2**) are also known as client applications. They,
    too, have identities associated with the organizations (**O1** and **O2**). Chaincode
    (**SC1**) defines operations, and dApps (applications) can integrate with chaincode
    to execute transactions that allow access to the ledger (**L1**). The applications
    (**O1App1** and **O2App2**) access to ledger (**L1**) is completely governed by
    the chaincode (**SC1**) operations.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dApp（**O1App1**和**O2App2**）也被称为客户端应用程序。它们也与组织（**O1**和**O2**）关联的身份。链码（**SC1**）定义了操作，应用程序（dApps）可以与链码集成，以执行允许访问分类账（**L1**）的事务。应用程序（**O1App1**和**O2App2**）对分类账（**L1**）的访问完全由链码（**SC1**）操作管理。
- en: Chaincode is developed by an organization's (**O1**) development team, and is
    reviewed and agreed by the consortium team (**X1**'s members, such as **O1** and
    **O2**). However, a consensus on the chaincode is required by the consortium before
    being deployed to the peer(s).
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链码是由组织的（**O1**）开发团队开发的，并由财团团队（**X1**的成员，如**O1**和**O2**）审查和同意。然而，在部署到对等方之前，财团对链码的共识是必需的。
- en: Chaincode and its stages
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链码及其阶段
- en: 'Chaincode has four stages—installation, initiation, the defining of endorsers,
    and allowing transactions. A detailed analysis of these stages follows. You can
    relate them to the example as well:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 链码有四个阶段 —— 安装、初始化、定义背书人和允许事务。接下来对这些阶段进行了详细分析。您也可以将它们与示例联系起来：
- en: '**Installed**: In the event of consensus in relation to the chaincode (development
    and testing), chaincode(s) can be deployed (installed) by the organization''s
    (**O1**) administrator on peer nodes (**P1** and **P2**). Although the peers on
    which chaincode is installed have full access to and knowledge of the chaincode,
    client applications (dApps) are limited to invoking transactions. Interestingly,
    just installing chaincode on the channel will not enable client applications (**O1App1**
    and **O2App2**) to issue transactions against chaincode (**SC1**). This can only
    happen when the chaincode is initiated.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已安装**：在与链码（开发和测试）相关的共识事件中，组织（**O1**）管理员可以在对等方节点（**P1**和**P2**）上部署（安装）链码（链码）。尽管安装了链码的对等方可以完全访问和了解链码，但客户端应用程序（dApp）仅限于调用事务。有趣的是，仅在通道上安装链码并不能使客户端应用程序（**O1App1**和**O2App2**）能够针对链码（**SC1**）发出事务。这只有在链码初始化时才能发生。'
- en: '**Initiated**: So far, chaincode is only installed on peers (**P1** and **P2**).
    Hence, other than the peer(s) (**P1** and **P2**), other channel participants
    do not know about it. The producer organization (**O1**) will initiate chaincode
    (**SC1**) on channel (**C1**). Once chaincode is initiated on a channel, other
    channel participants, such as dApps (**O1App1** and **O2App2**) can invoke the
    chaincode (**SC1**). In addition, only peers (with chaincode installed) can access
    the chaincode logic. However, the chaincode logic remains inaccessible to other
    components, but operations can be invoked on the chaincode.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已启动**：到目前为止，链码仅安装在对等方（**P1**和**P2**）上。因此，除了对等方（**P1**和**P2**）之外，其他通道参与者不知道它。生产者组织（**O1**）将在通道（**C1**）上启动链码（**SC1**）。一旦在通道上启动了链码，其他通道参与者，如
    dApp（**O1App1**和**O2App2**）可以调用链码（**SC1**）。此外，只有已安装链码的对等方才能访问链码逻辑。然而，链码逻辑对其他组件不可访问，但可以调用链码的操作。'
- en: '**Endorsement**: Referring to the preceding *Architecture*: *conceptual view*
    diagram, it is clear that organizations (**O1** and **O2**) are part of **Consortium-X1**.
    They have defined channel (**C1**), where it is governed by the channel configuration
    (**CCon1**). Having said that, an endorsement policy (**EP #1**) is also part
    of channel configuration, **CCon1**. Endorsement policy (**EP #1**) gets attached
    to channel configuration (**CCon1**) when the chaincode is initiated. It is the
    endorsement policy that dictates the acceptance of transactions on ledger (**L1**).
    And transactions can only be accepted when the organizations (**O1** and **O2**)
    on the channel (**C1**) approve it.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**背书**：参考前述*架构*：*概念视图*图，清楚地表明组织（**O1**和**O2**）是**X1联盟**的一部分。它们定义了通道（**C1**），通道由通道配置（**CCon1**）管理。话虽如此，背书策略（**EP
    #1**）也是通道配置的一部分，**CCon1**。当链码启动时，背书策略（**EP #1**）附加到通道配置（**CCon1**）。正是背书策略决定了账本（**L1**）上交易的接受。只有通道（**C1**）上的组织（**O1**和**O2**）批准时，交易才能被接受。'
- en: '**Invocation**: Only after instantiation will client applications be able to
    send transaction proposals to the peers (**P1** and **P2**). Transaction proposals
    are like inputs to the chaincode (**SC1**), which will result in an *endorsed
    transaction response* by peer nodes **P1** and **P2** being sent back to the client
    applications, **O1App1** and **O2App2**, respectively. This will be discussed
    in further detail in the *Transaction flow* section of this chapter.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调用**：仅在实例化之后，客户端应用程序才能将交易提案发送到对等体（**P1**和**P2**）。交易提案类似于链码（**SC1**）的输入，这将导致对等体节点**P1**和**P2**向客户端应用程序，**O1App1**和**O2App2**，分别发送一个*背书交易响应*。这将在本章的*交易流程*部分进一步讨论。'
- en: Referring to the diagram, organization 1 (**O1**) and organization 2 (**O2**)
    have chaincode installed on peers **P1** and **P2**, which are owned by **O1**
    and **O2**, respectively. However, as chaincode is initiated by **O1**, organization
    **O2** need not initiate the chaincode as it is already initiated by **O1**. In
    addition, the gossip protocol allows peers to communicate with one another.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 参考图，组织1（**O1**）和组织2（**O2**）在对等体**P1**和**P2**上安装了链码，这些对等体分别由**O1**和**O2**拥有。然而，由于链码由**O1**初始化，组织**O2**不需要初始化链码，因为它已经由**O1**初始化。此外，流言协议允许对等体相互通信。
- en: Types of peers
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对等体类型
- en: 'Peers can be subdivided as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对等体可细分如下：
- en: '**Mandatory peers**: Endorsing peers, and non-endorsing peers, also known as
    committers and leader peers.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强制性对等体**：背书对等体和非背书对等体，也称为提交者和领导对等体。'
- en: '**Option peers**: Anchor peers. These are optional, and a blockchain network
    can function and exist without them.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可选对等体**：锚对等体。这些是可选的，区块链网络可以在没有它们的情况下运行和存在。'
- en: 'The following are the different types of peers available:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可用的不同类型的对等体：
- en: '**Endorsing peers**: The preceding section covered endorsing peers in detail.
    Referring to the *Architecture*: *conceptual view *diagram, peers (**P1** and
    **P2**) have chaincode installed by administrators of organizations (**O1** and
    **O2**). Hence, they can endorse transactions, and are referred to as endorsing
    peers.'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**背书对等体**：前一节详细介绍了背书对等体。参考*架构*：*概念视图*图，对等体（**P1**和**P2**）由组织（**O1**和**O2**）的管理员安装了链码。因此，它们可以背书交易，并被称为背书对等体。'
- en: '**Non**-**endorsing peers** (also known as committing peers):Referring to the
    preceding diagram, peer **P4** (owned by organization **O1**) does not have chaincode
    installed. The administrator of organization 1 (**O1**) chose to install chaincode
    only on **P1**, and not on **P4**. This highlights two points:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**非**-**背书对等体**（也称为提交对等体）：参考前面的图表，属于组织**O1**的对等体**P4**没有安装链码。组织1（**O1**）的管理员选择仅在**P1**上安装链码，而不在**P4**上安装。这突出了两点：'
- en: Firstly, organization administrators can selectively choose to install chaincode
    on peers.
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，组织管理员可以选择性地在对等体上安装链码。
- en: 'Secondly, peers with chaincode installed are termed endorsing peers, and peers
    that do not have chaincode installed can exist on the channel. Such peers (**P4**)
    are non-endorsing peers (called committing peers). Every node on the channel is
    a committing peer:'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，已安装链码的对等体称为背书对等体，而没有安装链码的对等体可以存在于通道上。这些对等体（**P4**）是非背书对等体（称为提交对等体）。通道上的每个节点都是一个提交对等体：
- en: Peers such as **P4** (non-endorsing peers, also known as committing peers) cannot
    generate transactions. However, they can accept or reject transactions to ledger
    (**L1**).
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像**P4**（非背书对等体，也称为提交对等体）这样的对等体不能生成交易。然而，他们可以接受或拒绝要附加到账本（**L1**）的交易。
- en: Peers with chaincode installed can generate transactions and also endorse transactions.
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了链码的对等体可以生成交易并背书交易。
- en: Committing peers receive blocks of transactions (transactions initiated by endorsing
    peers) and are validated before being committed to a local copy of the ledger
    (**L1**). Such a commit to the ledger copy (**L1**) by the peers (endorsers and
    committers) constitutes an append-only operation to the ledger.
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交对等体接收交易块（由背书对等体发起的交易）并在提交到账本的本地副本之前进行验证。这样一次对账本副本（**L1**）的提交（背书者和提交者）构成了对账本的追加操作。
- en: 'Remember that the endorsement policy (**EP #1**) for chaincode, existing in
    channel configuration (**CCon1**), dictates which peers of an organization should
    digitally sign transaction before being appended to the ledger (**L1**) of the
    channel.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '请记住，链码的背书政策（**EP #1**），存在于通道配置（**CCon1**）中，规定了一个组织的哪些对等体在被附加到通道账本（**L1**）之前应该进行数字签名。'
- en: '**Leader peer**: Organization **O1** has two peers (**P1** and **P4**) on the
    channel (**C1**), where **P1** is an endorser and **P4** is a committer. Hence,
    transactions need to be distributed to all peers (committers) in an organization
    (**O1**). The distribution of transactions means distributing from orderers to
    committing peers of the organization. To ensure a transaction distribution, a
    peer can be defined as a leader peer (statically), or any peer can assume the
    role of leader (dynamically). Hence, in our sample network, for **Channel-C1**
    and organization **O1**, peer **P1** is dynamically defined as the leader peer,
    which will distribute transactions to all peers of organization 1 (**O1**) that
    are attached to **Channel-C1**.'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**领导对等体**：组织**O1**在通道（**C1**）上有两个对等体（**P1**和**P4**），其中**P1**是一个背书者，**P4**是一个提交者。因此，交易需要分发到组织（**O1**）中的所有对等体（提交者）。交易的分发意味着从排序者到组织的提交对等体的分发。为了确保交易的分发，可以将一个对等体定义为领导对等体（静态），或者任何对等体都可以承担领导者的角色（动态）。因此，在我们的样本网络中，对于**通道-C1**和组织**O1**，对等体**P1**被动态定义为领导对等体，它将把交易分发给附属于**通道-C1**的组织1（**O1**）的所有对等体。'
- en: '**Anchor peer**: For inter-organization, peer-to-peer communication, a channel
    requires an anchor peer. This is an optional peer and is only required when cross-organization
    communication is required.'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**锚点对等体**：对于组织间的点对点通信，一个通道需要有一个锚点对等体。这是一个可选的对等体，只有在需要跨组织通信时才需要。'
- en: A peer can be all four. Example **P1** of **O1** is an endorser, a committer,
    a leader, and can be an anchor peer as well. In addition, for a channel, there
    will always be one endorser, one committer, and one leader.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 一个对等体可以是四种。例如**O1**的**P1**是一个背书者，一个提交者，一个领导者，也可以是一个锚点对等体。此外，对于一个通道，总会有一个背书者，一个提交者和一个领导者。
- en: Evolving the network
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进化网络
- en: In this section, we will evolve the network further to realize requirement **#2.**
    Requirement **#2** wants the producer organization **O1** to execute private transactions
    and communications with **O3** (retail organization 3), as they have agreed on
    certain private discount rates and payments terms.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将进一步发展网络以实现要求**#2**。要求**#2**希望生产者组织**O1**可以执行与**O3**（零售组织3）的私人交易和通信，因为他们已经就一些私人折扣率和付款条件达成了协议。
- en: Administrators from the founder organization (**O5**) define a new consortium
    between the producer organization (**O1**) and a second retail organization (**O3**).
    Consortium definitions are defined in the network configuration (**NC05**). One
    of the organizations (**O1** or **O5**) can define a new channel (**C2**) for
    the new consortium (**X2**). Channel (**C2**) configuration resides in the channel
    configuration (**CCon2**). You may observe that the channel configuration for
    **C2** resides in **CCon2**, and is separate from **Channel-C1**'s configuration
    (**CCon1**). Both channel configurations are separate from the network configuration
    (**NC05**). Hence, only **O1** and **O3** have rights over **C2**, and **O5**
    has no rights over **Channel-C2**. **O5** only offers a resource (orderer service
    – **Ord O5**) to channel (**C2**).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 创始组织（**O5**）的管理员定义了生产组织（**O1**）和第二个零售组织（**O3**）之间的新财团。财团定义在网络配置（**NC05**）中。组织（**O1**或**O5**）之一可以为新财团（**X2**）定义一个新的通道（**C2**）。通道（**C2**）的配置存储在通道配置（**CCon2**）中。您可能注意到，**C2**的通道配置存储在**CCon2**中，并且与**通道-C1**的配置（**CCon1**）分开。这两个通道配置与网络配置（**NC05**）分开。因此，只有**O1**和**O3**对**C2**拥有权利，而**O5**对**通道-C2**没有权利。**O5**只向通道（**C2**）提供资源（订购服务
    - **Ord O5**）。
- en: The organization (**O3**) adds a peer (**P3**) to the channel (**C2**) and has
    a different ledger (**L2**). The scope of the ledger is confined to the channel,
    hence, **Channel-C1** has ledger **L1**, and **Channel-C2** has ledger **L2**.
    Chaincode **SC2** is installed and initiated on **Channel-C2**, and organization
    **O3'**s application (**O3App3****)** uses **Channel-C2** to invoke transactions
    against chaincode **SC2**.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 组织（**O3**）向通道（**C2**）添加了一个对等体（**P3**），并拥有不同的账本（**L2**）。账本的范围限定在通道内，因此，**通道-C1**拥有账本**L1**，而**通道-C2**拥有账本**L2**。链码**SC2**被安装并在**通道-C2**上初始化，并且组织**O3**的应用程序（**O3App3**）使用**通道-C2**来调用针对链码**SC2**的交易。
- en: Physical realization of network configuration and channel configuration
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络配置和通道配置的物理实现
- en: This section walks though how configurations are physically realized in a blockchain
    network.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍区块链网络中配置如何在物理上实现。
- en: Logically, channel configuration (**CCon1** and **CCon2**) seems to be a single
    configuration for the channels (**C1** and **C2**, respectively). In practice,
    peers of the channel host a copy of the channel configuration. Logically, the
    network configuration, **NC05**, appears to exist as a single file for the blockchain
    network. However, in reality, it is replicated on all of the ordering nodes of
    the blockchain network.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑上，通道配置（**CCon1**和**CCon2**）似乎是通道（**C1**和**C2**）的单一配置。在实践中，通道的对等方承载了通道配置的副本。从逻辑上讲，网络配置**NC05**似乎存在于区块链网络的单个文件中。但实际上，它被复制到区块链网络的所有订购节点上。
- en: When administrators configure networks and channels, they issue configuration
    transactions to the blockchain network. Such transactions are digitally signed
    by the organization (organization administrators), as defined in the policy files
    called modification policy (`mod_policy`).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当管理员配置网络和通道时，他们向区块链网络发出配置事务。这些事务由组织（组织管理员）进行数字签名，如修改策略（`mod_policy`）文件中所定义的。
- en: '`mod_policy` files are the policies within the network and channel configuration.
    For example, as you add more organizations to a blockchain, those organizations
    and their permissions are modified to `mod_policy` within the network configuration
    for the blockchain network.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod_policy`文件是网络和通道配置中的策略。例如，当您向区块链添加更多组织时，这些组织及其权限将根据区块链网络的网络配置进行修改。'
- en: Ordering service
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 订购服务
- en: Each ordering node maintains a copy of the network configuration and uses a
    system channel to execute configuration transactions and maintain a consistent
    copy of the network configuration. In the diagram, we have two ordering nodes—**O5**
    and **O1**. The founder organization (**O5**) added producer organization **O1**
    as the administrator by updating the network configuration (**NC05**). This modification
    further defines **O1** as the administrator of the blockchain network. The producer
    organization (**O1**) employs its resource (node) as an additional orderer (**O1**)
    to the blockchain network. Orderer **O5** is employed and maintained by organization
    **O5**, and its certificate is issued by **CA05**. While orderer **O1** is offered
    and maintained by organization **O1**, its certificate is issued by **CA01**.
    Network configuration (**NC05**) defines the exact permissions for the participants
    from the configured organizations (**O5** and **O1**).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 每个排序节点维护一个网络配置副本，并使用系统通道执行配置交易并维护一致的网络配置副本。在图中，我们有两个排序节点 — **O5** 和 **O1**。创始组织
    (**O5**) 通过更新网络配置 (**NC05**) 将生产组织 **O1** 添加为管理员。这一修改进一步定义了 **O1** 作为区块链网络的管理员。生产组织
    (**O1**) 使用其资源（节点）作为区块链网络的额外排序者 (**O1**)。排序者 **O5** 由组织 **O5** 雇用和维护，并由 **CA05**
    颁发证书。而排序者 **O1** 由组织 **O1** 提供和维护，其证书由 **CA01** 颁发。网络配置 (**NC05**) 定义了来自配置组织 (**O5**
    和 **O1**) 的参与者的确切权限。
- en: The ordering service also collects endorsed transactions from client applications
    (dApp) and orders them in blocks. These blocks are then distributed to each committer
    node on the channel. When a consensus is reached, each committing peer will record
    and append the local copy of the ledger. Interestingly, you will notice that the
    ordering service has meticulously taken care of the distribution of transactions.
    Even though the same ordering service is used over multiple channels (**C1** and
    **C2**), it handles the distribution of the right transaction to the right channel.
    This is controlled and defined in the network configuration (**NC05**) and channel
    configurations (**CCon1** and **CCon2**).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 排序服务还会收集来自客户应用（dApp）的被认可的交易，并将它们按顺序放入区块中。这些区块然后分发给通道上的每个提交节点。当达成共识时，每个提交对等方都会记录并附加本地账本的副本。有趣的是，您会注意到排序服务精心照料交易的分发。尽管同一排序服务用于多个通道（**C1**
    和 **C2**），它会处理正确的交易分发给正确的通道。这在网络配置 (**NC05**) 和通道配置 (**CCon1** 和 **CCon2**) 中得到控制和定义。
- en: Ordering nodes maintaining a consistent copy of network configuration
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维护一致网络配置副本的排序节点
- en: To understand how ordering nodes maintain a consistent copy of network configuration,
    we need to look at channels.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解节点排序如何维护一致的网络配置副本，我们需要看看通道。
- en: 'We know that there are two types of channels:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道存在两种类型的通道：
- en: '**Application channels**: Channels **C1** and **C2** are examples of application
    channels.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用通道**：通道 **C1** 和 **C2** 是应用通道的示例。'
- en: '**System channels**: Ordering nodes are connected by a system channel, which
    allows them to distribute configuration transactions among themselves. Hence,
    when administrators try to configure the network, they issue configuration transactions
    on this system channel. The system channel (depicted in the diagram as **System
    Channel**) will then ensure the distribution of these configuration transactions
    across ordering nodes on the blockchain network.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统通道**：排序节点通过系统通道连接，允许它们在彼此之间分发配置交易。因此，当管理员尝试配置网络时，他们会在这个系统通道上发布配置交易。系统通道（在图中表示为**系统通道**）将确保这些配置交易在区块链网络上的排序节点之间进行分发。'
- en: In this configuration, applications **O1App1** and **O2App2** will transact
    on **Channel-C1**, based on chaincode **SC1**, and will use **Channel-C1** to
    communicate with peers **P1**, **P2**, and orderer **O5**. Application **O3App3**
    will effect a transaction based on chaincode **SC2**, and will use **Channel-C2**
    to communicate with peers **P3** and orderer **O5**. This clearly demonstrates
    precise decentralization, where different organizations can execute their specific
    transactions and store blocks on their own ledgers.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配置中，应用程序 **O1App1** 和 **O2App2** 将基于链代码 **SC1** 在 **Channel-C1** 上进行交易，并将使用
    **Channel-C1** 与同行 **P1**、**P2** 和排序者 **O5** 进行通信。应用程序 **O3App3** 将基于链代码 **SC2**
    进行交易，并使用 **Channel-C2** 与同行 **P3** 和排序者 **O5** 进行通信。这清楚地展示了精确的去中心化，在这种情况下，不同组织可以执行它们特定的交易并将区块存储在自己的账本上。
- en: A node's behavior when part of multiple channels
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当节点加入多个通道时的行为
- en: The producer organization (**O1**) wants to have separate application channels, **C1**
    and **C2**, for consortia **X1** and **X2**, respectively. This will allow **O1**
    to enter into private transactions with organizations on these channels. Hence,
    the diagram shows **O1**'s peer, **P1**, and also hosts chaincode **SC2** installed
    on **P1**. Organization **01**'s client application (**O1App1**), to which **P1**
    belongs, will now be able to transact on **Channel-C2** based on logic defined
    in chaincode **SC2**.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 生产者组织（**O1**）希望为联合体**X1**和**X2**分别拥有单独的应用通道**C1**和**C2**。这将允许**O1**与这些通道上的组织进行私密交易。因此，图表显示了**O1**的对等方**P1**，并且还在**P1**上安装了链码**SC2**。组织**01**的客户应用程序（**O1App1**）现在将能够根据链码**SC2**中定义的逻辑在**通道-C2**上进行交易。
- en: Node behavior, which is an element of multiple channels, is controlled by the
    channel configuration for that channel. Channel configurations, **CCon1** and
    **CCon2**, define the operations available to a node (**P1**) when it is part
    of multiple channels, **C1** and **C2**, respectively. Similarly, application
    **O1App1** can now execute transactions on channels **C1** and **C2** based on
    chaincode **SC1** and **SC2**, respectively, which is again dictated by the channel
    configurations, **CCon1** and **CCon2**.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 节点的行为，作为多个通道的一部分，由该通道的通道配置控制。通道配置**CCon1**和**CCon2**分别定义了节点（**P1**）在加入多个通道**C1**和**C2**时可用的操作。同样，应用程序**O1App1**现在可以根据链码**SC1**和**SC2**在通道**C1**和**C2**上执行交易，这也是由通道配置**CCon1**和**CCon2**决定的。
- en: Hyperledger architecture (layered view) and components
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger 架构（分层视图）和组件
- en: 'This section will cover the Hyperledger framework architecture layer and components.
    As shown in the following diagram, the HLF architecture is divided into four major
    layers, and each layer has its components working in concert. Together, these
    layers, components, and their interactions constitute a permissioned blockchain
    network, as shown in the following diagram:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍 Hyperledger 框架的架构层和组件。如下图所示，HLF 架构分为四个主要层，每个层都有其组件协同工作。这些层、组件及其相互作用共同构成了一个许可的区块链网络，如下图所示：
- en: '![](img/759e5a86-715b-4663-8f45-a48d0b2c5e02.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/759e5a86-715b-4663-8f45-a48d0b2c5e02.png)'
- en: 'Architecture: Layered view'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 架构：分层视图
- en: Identity, security, and privacy
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份、安全和隐私
- en: This section covers aspects of blockchain architecture that are specific to
    identity, security, and privacy. There are various participants in a blockchain
    network, such as nodes (committers, endorsers, and suchlike), dApps and client
    applications, and network and channel administrators. Each of these participants
    needs to have an identity established, because it's the identity of these participants
    that determines their access permissions on the blockchain network and its resources.
    Principle is a set of identities and properties, where identity is a user ID,
    and properties include the organization it belongs to, the roles it is a member
    of, and suchlike. Hence, it's obvious that the permissions are determined by the
    properties of the identities.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涵盖了与身份、安全和隐私相关的区块链架构方面的内容。区块链网络中有各种参与者，如节点（提交者、认可者等）、dApps 和客户应用程序，以及网络和通道管理员。这些参与者中的每一个都需要建立身份，因为这些参与者的身份决定了它们在区块链网络及其资源上的访问权限。原则是一组身份和属性，其中身份是用户
    ID，属性包括其所属的组织、其所属的角色等。因此，很明显权限是由身份的属性决定的。
- en: HLF uses X.509 certificates for identities. However, the MSP validates identities
    and determines whether those identities are permitted in a blockchain network.
    At a high level, remember that MSP has the rules, which enables identities in
    the blockchain network. However, those identities must be trusted and verified
    by the public key infrastructure.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: HLF 使用 X.509 证书进行身份验证。然而，MSP 验证身份并确定这些身份是否被允许进入区块链网络。从高层来看，MSP 拥有规则，这些规则使得区块链网络中的身份生效。但是，这些身份必须经由公钥基础设施进行信任和验证。
- en: A permissioned HLF blockchain network tightly controls the identities of the
    participants. This is a mandatory two-step process—establishing the participants'
    identities and secure communication.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 许可的 HLF 区块链网络严格控制参与者的身份。这是一个强制性的两步过程——建立参与者的身份和安全通信。
- en: Public key infrastructure
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公钥基础设施
- en: '**Public key infrastructure** (**PKI**) ensures secure communication in the
    blockchain network between various participants, and also authenticates the messages
    sent to the blockchain network. PKI comprises CAs, who are responsible for issuing
    digital certificates to participants (users, nodes, and so on). Participants are
    authenticated based on these certificates, and messages are then sent to the blockchain
    network.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '**公钥基础设施**（**PKI**）确保区块链网络中各参与者之间的安全通信，并验证发送到区块链网络的消息。PKI包括CA，负责向参与者（用户、节点等）发放数字证书。参与者根据这些证书进行身份验证，然后将消息发送到区块链网络。'
- en: In the Hyperledger framework's distributed blockchain network, root CA is an
    HLF CA, which is configured as a trust anchor. It is a self-certified root CA
    that also signs and certifies the leaf certificates of the intermediate CAs. In
    addition, these intermediate CAs can sign and certify other leaf intermediate
    CAs. Hence, for the given digital certificate, trust can be traced back to the
    root CA. This is termed a chain of trust. The HLF, and particularly HLF membership
    services, have a Fabric CA and intermediate CAs for secure functioning of the
    blockchain network.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在Hyperledger框架的分布式区块链网络中，根CA是一个HLF CA，它被配置为信任锚点。它是一个自我认证的根CA，也签署和认证中间CA的叶证书。此外，这些中间CA可以签署和认证其他叶中间CA。因此，对于给定的数字证书，信任可以追溯到根CA。这被称为信任链。HLF，特别是HLF成员服务，具有用于区块链网络安全运行的Fabric
    CA和中间CA。
- en: 'The following are some of the key elements of PKI:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是PKI的一些关键元素：
- en: Digital certificate
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字证书
- en: Keys
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密钥
- en: CAs
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA
- en: '**Certificate revocation list** (**CRL**)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**证书吊销列表**（**CRL**）'
- en: Digital certificate
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字证书
- en: A digital certificate is a document comprising various properties of the certificate
    holder. These certificates are standard-compliant, and, in the case of HF, this
    is the X.509 standard.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 数字证书是包含证书持有者各种属性的文件。这些证书符合标准，对于HF来说，这是X.509标准。
- en: 'Here are a few brief details regarding certificates:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是关于证书的一些简要细节：
- en: 'What is in a certificate? A certificate is like an identity card, and includes
    certificate data that consists of the following:'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证书中有什么？证书就像身份证，包括以下证书数据：
- en: Algorithm information (such as SHA256)
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算法信息（如SHA256）
- en: Issuer information, including the validity of the certificate (time)
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发行者信息，包括证书的有效期（时间）
- en: 'Subject information, including the following:'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括以下信息的主体信息：
- en: Subject details, such as the organization unit
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主体详细信息，例如组织单位
- en: Subject public key and signature algorithm details
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主体公钥和签名算法详细信息
- en: The subject of a certificate (the user or node) can use that certificate to
    prove their identity.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证书的主体（用户或节点）可以使用该证书证明其身份。
- en: To prove their identity, the subject can use a private key to sign any communication
    (transaction and suchlike) that is sent to the blockchain network. A subject's
    public key is in the certificate itself. However, the subject's private key is
    secret and private.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了证明他们的身份，主体可以使用私钥对发送到区块链网络的任何通信（交易等）进行签名。主体的公钥包含在证书本身中。但是，主体的私钥是保密的和私密的。
- en: All the information contained in the certificate is encrypted in such a way
    that any change to it will mark the certificate as invalid.
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证书中包含的所有信息都以一种加密方式进行加密，任何对其的更改都将标记证书为无效。
- en: The subject signs using their private key and uses this certificate to prove
    their identity. As other parties trust the identity provider, also known as the
    CA, the interacting party can trust the subject. Parties trust the CA and believe
    that the certificate shown by the subject has not been tampered with.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主体使用他们的私钥签名，并使用此证书证明他们的身份。由于其他各方信任身份提供者，也称为CA，因此互动方可以信任主体。各方信任CA，并相信主体展示的证书未被篡改。
- en: Keys
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密钥
- en: In this section, we will cover digital signatures and public and private keys.
    In the preceding description, we saw that messages are signed by the subject.
    Signing a message is termed the digital signature of the message. It is the digital
    signature that guarantees message integrity and authentication. Authentication
    ensures that parties involved in a transaction are sure about the identity of
    the message sender or creator, and integrity affirms that the message was not
    modified/tampered with during transit. Hence, it is the digital signature that
    guarantees integrity and authentication. The transaction (message) sender will
    sign the message using their private key and send it to the recipient. The recipient
    will use the sender's public key (widely known) to verify the integrity and authenticity
    of the message. This means that the recipient will use the sender's public key
    to ensure that it was sent by the sender who is claiming to be the sender, and
    who is the expected sender. A combination of keys, both public and private, ensures
    secure communication over the blockchain network.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍数字签名和公钥、私钥。在前面的描述中，我们看到消息是由主体签名的。签署消息被称为消息的数字签名。正是数字签名保证了消息的完整性和真实性。验证确保参与交易的各方确信消息发送者或创建者的身份，而完整性则确认消息在传输过程中未被修改/篡改。因此，正是数字签名保证了完整性和真实性。交易（消息）发送方将使用他们的私钥对消息进行签名并将其发送给接收方。接收方将使用发送方的公钥（广为人知）来验证消息的完整性和真实性。这意味着接收方将使用发送方的公钥来确保消息是由声称是发送方的发送者发送的，并且是预期的发送方。公钥和私钥的组合确保了区块链网络上的安全通信。
- en: CAs
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CA
- en: 'CAs are mostly included in a Docker image with HLF release and are released
    as an HLF CA component. In the case of a blockchain network, a CA has the following
    purposes:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: CA 主要包含在与 HLF 发布一起的 Docker 镜像中，并作为 HLF CA 组件发布。在区块链网络中，CA 有以下目的：
- en: Registering nodes
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册节点
- en: Enrolling nodes
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册节点
- en: In HLF, Certificate Authority is a CA service that creates and issues certificates
    (enrollment certificates) to participating nodes, allowing them to join and participate
    in the blockchain network. These certificates (enrollment certificates) are in
    the standard X.509 v3 format. However, an HLF CA can be extended by enterprises
    and they can even replace it, if needed. CAs issue X.509-compliant certificates
    to participants (user, groups, and nodes). It is these certificates that enable
    participants to transact and interact on the blockchain network. CAs issue certificates
    to participants, and these certificates include various pieces of information
    pertaining to the subject (participant), as shown previously. CAs only issue those
    certificates after signing those certificates with their private keys. Hence,
    the certificates issued by the CA are signed by CAs and, since these CAs are trusted,
    the participant is also trusted. In addition, the information included in the
    certificate is trusted, as it's signed by the CA. As long as the recipients have
    the public key of the CA, they can trust the certificate.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HLF 中，证书颁发机构是一个 CA 服务，它创建并发放证书（注册证书）给参与节点，使其能够加入和参与区块链网络。这些证书（注册证书）采用标准的 X.509
    v3 格式。然而，企业可以扩展 HLF CA，并在需要时甚至可以替换它。CA 为参与者（用户、组和节点）发放符合 X.509 标准的证书。正是这些证书使参与者能够在区块链网络上进行交易和互动。CA
    为参与者发放证书，这些证书包含有关主体（参与者）的各种信息，如前所示。CA 仅在使用其私钥对这些证书进行签名后才发放这些证书。因此，CA 发放的证书由 CA
    签名，由于这些 CA 可信任，因此参与者也是可信任的。此外，证书中包含的信息是可信任的，因为它由 CA 签名。只要接收方拥有 CA 的公钥，他们就可以信任证书。
- en: In addition, when the subject (participant/sender) signs any transaction, the
    recipient can use the subject's (sender/participants) public key to ensure the
    authenticity and integrity of the message. Trusted CAs include DigiCert and Verisign.
    These certificates do not have any private keys—either of the CA or of the participant.
    In a blockchain network, every participant (subject/actor) needs to have a digital
    identity that should be issued by the organization's CA, which actually means
    that the CA facilitates a verifiable digital identity for the participant.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当主体（参与者/发送方）签署任何交易时，接收方可以使用主体（发送方/参与者）的公钥来确保消息的真实性和完整性。值得信赖的 CA 包括 DigiCert
    和 Verisign。这些证书没有任何私钥——无论是 CA 的私钥还是参与者的私钥。在区块链网络中，每个参与者（主体/行为者）都需要拥有由组织的 CA 颁发的数字身份，这实际上意味着
    CA 为参与者提供了可验证的数字身份。
- en: 'The following types of CA are available:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的 CA 类型如下：
- en: Root CAs are biggies, like Symantec, who self-sign their own certificates and
    then issue those certificates to other CAs. Intermediate CAs are CAs that have
    a certificate issued by the root CA or by another intermediate CA. This results
    in a *TrustChain* (chain of trust) of certificates. Organizations that use CAs
    can use intermediate CAs with confidence, since the *TrustChain* will allow them
    to trace the certificate back to the root CA. Also, the *TrustChain* limits the
    root CA's exposure, which is paramount from the security perspective of the *TrustChain*.
    Also, various organizations participating on the blockchain network can use different
    intermediate CAs and may have different, or the same, root CAs.
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根 CA 是大公司，如 Symantec，它们自签自己的证书，然后将这些证书发放给其他 CA。中间 CA 是由根 CA 或其他中间 CA 发放证书的 CA。这导致了证书的
    *TrustChain*（信任链）。使用 CA 的组织可以放心使用中间 CA，因为 *TrustChain* 将允许它们追溯证书回到根 CA。此外，*TrustChain*
    限制了根 CA 的风险，这对于 *TrustChain* 的安全性视角至关重要。此外，参与区块链网络的各种组织可以使用不同的中间 CA，并且可能有不同的或相同的根
    CA。
- en: 'HLF offers an inbuilt CA called Fabric CA, which is a root CA for that HLF
    blockchain network. It is a private CA for the Fabric blockchain network; it cannot
    offer SSL certificates for use in browsers. Hence, organizations can use commercial
    public root and intermediate CAs for their HLF blockchain network. The capabilities
    of the HLF CA, also known as the Fabric CA, are as follows:'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HLF 提供了一个内置 CA，称为 Fabric CA，它是 HLF 区块链网络的根 CA。它是 Fabric 区块链网络的私有 CA；它不能为浏览器中使用的
    SSL 证书提供服务。因此，组织可以为其 HLF 区块链网络使用商业公共根和中间 CA。HLF CA，也称为 Fabric CA，的功能如下：
- en: The HLF CA can either register identities or can be configured to use existing
    enterprise LDAPs as a user registry
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: HLF CA 可以注册身份，也可以配置为使用现有的企业 LDAP 作为用户注册表
- en: For member organizations, users, and administrators, the HLF CA can issue, renew,
    and revoke enrollment certificates and root certificates for the blockchain network
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于成员组织、用户和管理员，HLF CA 可以为区块链网络发放、更新和撤销注册证书和根证书
- en: The HLF CA generates self-signed X.509 certificates, and there can be one or
    more Fabric CAs, where there will be one root CA and the remainder are intermediate
    CAs, and where the chain of trust is followed by virtue of PKI.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HLF CA 生成自签名的 X.509 证书，可以有一个或多个 Fabric CA，其中一个是根 CA，其余是中间 CA，遵循 PKI 的信任链。
- en: CRL
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CRL
- en: CAs can revoke certificates, and such revoked certificates do not constitute
    expiring certificates. In the case of compromised identities, certificates can
    be revoked, and put into a list called a CRL. It is recommended that any party
    who wants to verify the identity of any other party's (the subject party) should
    first refer to the CRL to check whether the party (the subject party's) certificate
    is included in the revoked list.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: CA 可以吊销证书，吊销的证书不构成过期的证书。在身份受到威胁的情况下，可以吊销证书，并将其放入称为 CRL 的列表中。建议任何想要验证其他方（主体方）身份的一方首先参考
    CRL，检查该方（主体方的）的证书是否包含在吊销列表中。
- en: The membership service
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成员服务
- en: We now know that PKI offers verifiable identities to participants. However,
    how can these participants represent themselves as trusted participants from a
    participating organization on a blockchain network? Every organization manages
    its participants under a single MSP. However, organizations can have multiple
    MSPs if they want to manage a participant's different **organization units** (**OU**),
    such as financial and legal units. If you check the certificate issued to a subject
    from a CA, it will include OU information. This allows further control of the
    access to channels based on OUs.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道 PKI 为参与者提供了可验证的身份。但是，这些参与者如何在区块链网络上代表自己作为参与组织的受信任参与者呢？每个组织都在单个 MSP 下管理其参与者。但是，如果组织想要管理参与者的不同**组织单位**（**OU**），如财务和法律单位，组织可以拥有多个
    MSP。如果您检查由 CA 发布给主体的证书，它将包含 OU 信息。这允许根据 OU 进一步控制对频道的访问。
- en: 'The membership service manages a participant''s identity and is used for the
    validation of participants and their authentication. Specific privileges on system
    resources (a network, channel, or suchlike) are controlled in the access control
    list of the blockchain network. The membership service code is executed on peers
    and orderers. It is responsible for authenticating, authorizing identities, and
    managing those identities on the HLF blockchain network. The participants of the
    HLF blockchain network have identities where the PKI generates certificates that
    are linked to the participants (such as network components, organizations, dApps
    and client applications). This facilitates the creation of an access control rule
    for participants at the network level, as well as at the channel level, where
    a channel is a subset of a blockchain network where participants conduct private
    transactions. Access controls and channels in a blockchain network together address
    confidentiality and privacy challenges:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 成员服务管理参与者的身份，并用于验证参与者及其身份验证。区块链网络的访问控制列表中控制对系统资源（网络、通道等）的具体权限。成员服务代码在对等方和订购方上执行。它负责在HLF区块链网络上对身份进行认证、授权和管理这些身份。HLF区块链网络的参与者具有身份，其中PKI生成与参与者（如网络组件、组织、dApps和客户端应用程序）关联的证书。这有助于在网络级别和通道级别为参与者创建访问控制规则，通道是参与者进行私有交易的区块链网络的子集。区块链网络中的访问控制和通道共同解决了机密性和隐私挑战：
- en: '**Authentication**: HLF uses PKI to verify the identities of users and devices.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证**：HLF使用PKI验证用户和设备的身份。'
- en: '**Authorization**: HLF uses **role-based access control** (**RBAC**) to control
    access to an entity example controlling an identity''s read and write access to
    an entity (for example, a ledger). Access control to identities for given resources
    is based on RBAC, where identities are assigned to roles, authorization policies
    are defined for resources, and rules are defined that determine which roles are
    authorized to access what on that resource.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权**：HLF使用**基于角色的访问控制**（**RBAC**）来控制对实体的访问，例如控制身份对实体（例如分类帐）的读写访问。对于给定资源的身份的访问控制基于RBAC，其中身份被分配给角色，为资源定义了授权策略，并定义了确定哪些角色有权访问资源上的什么的规则。'
- en: MSP
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MSP
- en: 'This is the identity management solution for the HLF blockchain network. MSP
    performs the following tasks:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这是HLF区块链网络的身份管理解决方案。MSP执行以下任务：
- en: It registers and enlists network and channel participants
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它注册和列出网络和通道参与者
- en: It maps certificates to members or participating organizations
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将证书映射到成员或参与组织
- en: For an organization, MSP identifies the roles (administrative and suchlike)
    a participant can play
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于一个组织，MSP确定一个参与者可以扮演的角色（行政等）
- en: It defines the participant's network and channel, and access privileges, such
    as read and write
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它定义了参与者的网络和通道以及访问权限，例如读和写
- en: 'Its principal activities are as follows:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 其主要活动如下：
- en: MSP identifies the root CAs and intermediate CAs who can further define the
    members of a domain, also known as an organization, either by listing the identities
    of their users, or by authorizing CAs to assign valid identities to their members
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MSP确定了根CA和中间CA，后者可以进一步定义域的成员，也称为组织，要么通过列出其用户的身份，要么通过授权CA为其成员分配有效身份
- en: MSP represents an organization, and is also responsible for RBAC on a network,
    and channels of the member of that organization
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MSP代表一个组织，并且还负责网络的RBAC和该组织成员的通道
- en: An organization can have one or more OUs, and enrollment certificates (X.509
    certificates) include an OU attribute in the certificate to define that organization's
    area of business
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个组织可以有一个或多个OUs，并且注册证书（X.509证书）在证书中包含一个OU属性，以定义该组织的业务领域
- en: Types of MSP
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MSP的类型
- en: 'In this section, we will cover the types of MSP. Broadly speaking, there are
    three—network MSP, channel MSP, and local MSP:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍MSP的类型。大体上说，有三种——网络MSP、通道MSP和本地MSP：
- en: '**Network MSP**: An MSP at the network level is used to define the blockchain
    network that is authorized to perform administrative tasks at the network level,
    such as maintaining networks and creating channels:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**网络MSP**：网络级别的MSP用于定义被授权执行网络级别管理任务的区块链网络，例如维护网络和创建通道：'
- en: '**Scope**: Network level'
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围**：网络级别'
- en: '**Duties**: Administrative activities, such as defining channels'
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**职责**：定义通道等管理活动'
- en: '**Channel MSP**: A channel (also known as a global) MSP is defined in the channel
    configuration. However, each node has a local copy of the channel/global MSP,
    which is kept in sync by consensus. Each participating organization on the channel
    has an MSP defined, and all the nodes on that channel will share the MSP and,
    hence, will be able to authenticate the channel participant using the same single
    source of truth for authentication. Hence, any new participating organization
    first needs to add its MSP to the channel configuration to participate in transactions
    on the channel. A channel MSP is mostly used for identity validation, and does
    not need to sign transactions. All the members of a channel are familiar with
    the configuration of an MSP, where members of that organization participate. This
    is termed a channel MSP:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**通道 MSP**：通道（也称为全局）MSP 在通道配置中定义。然而，每个节点都有一个本地副本的通道/全局 MSP，通过共识保持同步。通道上的每个参与组织都有一个定义好的
    MSP，该通道上的所有节点都将共享该 MSP，因此，将能够使用相同的身份验证单一真相源对通道参与者进行身份验证。因此，任何新的参与组织首先需要将其 MSP
    添加到通道配置中，以便在通道上进行交易。通道 MSP 主要用于身份验证，不需要对交易进行签名。通道的所有成员都熟悉 MSP 的配置，其中该组织的成员参与。这被称为通道
    MSP：'
- en: '**Scope**: Channel level'
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围**：通道级别'
- en: '**Duties**: Establishes a chain of trust by defining administration and participation
    rights to members of entities at the channel level'
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**职责**：通过定义通道级别实体的管理和参与权限来建立信任链'
- en: '**Local MSP**:MSPs authenticate nodes and users. Each node and user has a local
    MSP in their local filesystem. To authenticate member messages, and to define
    permissions outside the channel context, peers, orderers, and clients maintain
    an instance of a local MSP:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**本地 MSP**：MSP 用于对节点和用户进行身份验证。每个节点和用户在其本地文件系统中都有一个本地 MSP。为了对成员消息进行身份验证，并在通道上下文之外定义权限，对等方、订购者和客户端都维护一个本地
    MSP 的实例：'
- en: '**Scope**: Each node has a local MSP that defines that node''s permissions'
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围**：每个节点都有一个定义该节点权限的本地 MSP'
- en: '**Duties**: To authenticate member messages and define permissions outside
    network and channel levels and maintain a local copy of the MSP as configurations
    are applied locally'
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**职责**：对成员消息进行身份验证并在网络和通道级别之外定义权限，并在本地应用配置时维护 MSP 的本地副本'
- en: '**Facts**:'
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事实**：'
- en: Nodes such as committers, endorsers, and orderers, are termed local MSPs. Examples
    include defining peer admins and suchlike.
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诸如提交者、背书者和订购者之类的节点被称为本地 MSP。例如，定义对等方管理员等。
- en: Users such as client users use local MSPs to authenticate themselves in relation
    to the transaction performed on the channel.
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户用户等用户使用本地 MSP 对其在通道上执行的交易进行身份验证。
- en: A participant's membership in an organization is determined by the root or intermediate
    CA that is part of the local MSP.
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参与组织的成员身份由作为本地 MSP 一部分的根 CA 或中间 CA 确定。
- en: '**Structure**: The following list defines the various elements that constitute
    the MSP structure. For each type of element, there is a sub-folder and a local
    MSP is stored in the local folder as a file folder, inside that particular sub-folder.'
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构**：以下列表定义了构成 MSP 结构的各种元素。对于每种类型的元素，都有一个子文件夹，本地 MSP 存储在本地文件夹中作为文件夹，位于该特定子文件夹内。'
- en: 'Structure-wise, various elements constitute a local MSP, including the following:'
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就结构而言，本地 MSP 包括以下各种元素：
- en: '**Root CA and intermediate CA**: The root CA contains self-signed certificates
    (X.509 standard) of the root CAs that are trusted by the organization represented
    in the MSP. The intermediate CA contains a list of intermediate CA certificates
    that are trusted by the organization.'
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**根 CA 和中间 CA**：根 CA 包含由 MSP 中代表的组织信任的自签名证书（X.509 标准）。中间 CA 包含由组织信任的中间 CA 证书列表。'
- en: '**Organization unit**: This is an optional element that contains a list of
    OUs and is used to restrict organization members.'
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织单位**：这是一个可选元素，包含一个 OU 列表，用于限制组织成员。'
- en: '**Administrator:** This contains the identities of the actors who are administrators
    for an organization. It is like defining the role. However, access privileges
    (such as adding a new organization and suchlike) are determined by system resources,
    such as channel configuration or network configuration policies. The role attribute
    in a CA issue certificate also defines a participant''s role in the organization
    and not on the blockchain network. It is the system resource (channel, network,
    and suchlike) policies that define that role''s privileges on the blockchain network''s
    system resource.'
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理员**：这包含了作为组织管理员的参与者的身份。这类似于定义角色。然而，访问权限（例如添加新组织等）由系统资源确定，例如通道配置或网络配置策略。CA
    发布证书中的角色属性还定义了参与者在组织中的角色，而不是在区块链网络上的角色。是系统资源（通道、网络等）策略定义了该角色在区块链网络系统资源上的权限。'
- en: '**Revoked certificates list**: Logically, this optional list is the same list
    as CAs and the CRL. However, it also defines the revocation of membership of the
    participant from the organization.'
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**吊销证书列表**：逻辑上，这个可选列表与 CAs 和 CRL 是相同的列表。然而，它还定义了参与者从组织中的吊销资格。'
- en: '**Node identity**: This is a mandatory element and defines the identity of
    the node. One should exist in the local MSP, along with the KeyStore (private
    key) and the node identity, allowing a node (a peer such as an endorser) to authenticate
    itself in the message that the node sends on the network or channel; for example,
    the certificate that the endorser sends as part of the response to a transaction
    proposal.'
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节点身份**：这是一个强制性元素，定义了节点的身份。应该存在于本地 MSP 中，以及 KeyStore（私钥）和节点身份，允许节点（如背书人等同行）在网络或通道上发送的消息中对自己进行身份验证；例如，背书人作为响应交易提议的一部分发送的证书。'
- en: '**KeyStore**: This mandatory element is a node''s key that a node (committer,
    orderers, client node, and suchlike) uses to digitally sign a transaction. It
    is only part of a local MSP and not part of a channel MSP, since the channel MSP
    does not send transactions and, hence, is not required to sign transactions.'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KeyStore**：这个强制性元素是节点的密钥，节点（提交者、排序器、客户端节点等）用于数字签名交易。它只是本地 MSP 的一部分，而不是通道
    MSP 的一部分，因为通道 MSP 不发送交易，因此不需要签名交易。'
- en: '**TLS root CA and TLS intermediate CA**: TLS communications are sent when a
    node wants to connect to another node, example the committer peer and connects
    with orderers to get a ledger''s recent updates. This element contains self-signed
    certificates of the root CA/intermediate CA.'
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TLS 根 CA 和 TLS 中间 CA**：当节点想要连接到另一个节点时发送 TLS 通信，例如提交者节点并连接到排序器以获取分类账的最新更新。此元素包含根
    CA/中间 CA 的自签名证书。'
- en: All MSPs (network, channel, and local) should identity and interact with root
    or intermediate CAs to ensure the establishment of a chain of trust.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 MSP（网络、通道和本地）都应该与根或中间 CA 进行身份验证和交互，以确保建立信任链。
- en: Referring back to the diagram in the *Architecture *– *conceptual view* section,
    the network configuration (**NC05**) uses the MSP of organization **O1** to ensure
    the association of participant **P1** with organization 1 (**O1**). The network
    configuration (**NC05**) then uses the MSP name defined in the access policies
    to further grant privileges to **O1**'s participants (**P1**, **P4**, and **P6**);
    for example, defining **P1** as the administrator from organization 1 (**O1**)
    as the administrator of the blockchain network. Referring to the following MSP
    diagram, each peer has its own local MSP copy in its filesystem. Also, each peer
    keeps a copy of the global MSP of the channels it belongs to; for example, peer
    **P1** belongs to **Channel-C1** and **Channel**-**C2**. Hence, although it has
    its own local MSP, it also contains a copy of the channel configuration, **CCon1**
    and **CCon2**, for channels 1 and 2, respectively. A local copy of the channel
    configuration also means a local copy of the global MSP. Hence, **P1** has a copy
    of the global MSP for **Channel-C1** and **Channel-C2**.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 回到*架构* - *概念视图*部分的图表，网络配置（**NC05**）使用组织**O1**的MSP来确保参与者**P1**与组织1（**O1**）的关联。然后，网络配置（**NC05**）使用访问策略中定义的MSP名称进一步授予**O1**的参与者（**P1**，**P4**和**P6**）特权；例如，将**P1**定义为来自组织1（**O1**）的区块链网络管理员。参考以下MSP图表，每个对等方在其文件系统中都有自己的本地MSP副本。此外，每个对等方都保留其所属通道的全局MSP的副本；例如，对等方**P1**属于**Channel-C1**和**Channel-C2**。因此，尽管它有自己的本地MSP，但它还包含对通道1和2的通道配置**CCon1**和**CCon2**的副本。通道配置的本地副本也意味着全局MSP的本地副本。因此，**P1**拥有**Channel-C1**和**Channel-C2**的全局MSP的副本。
- en: 'For each peer, the trust domain is the organization to which it belongs, which
    is part of a peer''s local MSP. However, to allow that organization (and also
    its peers) to transact and communicate on a channel, an organization''s MSP needs
    to be added to the channel configuration:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 每个对等方的信任域是其所属的组织，这是对等方本地MSP的一部分。然而，为了让该组织（以及其对等方）能够在通道上进行交易和通信，组织的MSP需要添加到通道配置中：
- en: '![](img/4b2b9d59-61c9-4d10-bb1f-13a8ae79114e.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b2b9d59-61c9-4d10-bb1f-13a8ae79114e.jpg)'
- en: Membership service provider
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 成员服务提供者
- en: The diagram also shows that user A belongs to organization 1 (**O1**), and that
    user A's identity is issued by **CA01** (CA of organization 1). A local MSP copy
    of peer 1 (**P1**), which belongs to **O1**, contains the identity information
    of user A. Depending on the type of operation requested by the user (local or
    channel-level), peers will verify user A's identity. Given that peers **P1**,
    **P3**, and **P4** are on **Channel-C2**, they have a copy of the global MSP.
    The global MSP will contain the certificate and other details of all the members
    (**P1**, **P3**, and **P4**) of the channel (**C2**). Also, each peer has its
    own local MSP.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 该图表还显示用户A属于组织1（**O1**），用户A的身份由**CA01**（组织1的CA）颁发。属于**O1**的对等方1（**P1**）的本地MSP副本包含用户A的身份信息。根据用户请求的操作类型（本地或通道级别），对等方将验证用户A的身份。鉴于对等方**P1**、**P3**和**P4**位于**Channel-C2**上，它们拥有全局MSP的副本。全局MSP将包含通道（**C2**）的所有成员（**P1**，**P3**和**P4**）的证书和其他细节。此外，每个对等方都有自己的本地MSP。
- en: '**Local**-**level transaction**: Referring to the following diagram, it is
    evident that MSPs can be found in two places—channel configuration (as a channel
    MSP), and as a local peer (local MSP). Local MSPs are for applications, users,
    peers, and orderers, and they define the privileges (permissions), such as the
    administration of the peer, for that node. Every node and user has a local MSP.
    For example, a user''s local MSP allows the user to authenticate themselves on
    the transaction, as well as defining a node''s participatory rights and suchlike.
    When user A tries to execute a local-level transaction (such as installing chaincode),
    peer **P1** verifies the identity of user A by referring to its local MSP copy.
    By means of verification, **P1** ensures that user A belongs to organization 1,
    and has the privileges to perform that transaction. Only upon verification can
    the installation transaction be completed successfully.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '**本地级事务**：参考下图，可以明显看到 MSP 可以在两个地方找到——通道配置（作为通道 MSP）和本地对等方（本地 MSP）。本地 MSP 用于应用程序、用户、对等方和排序器，并定义了该节点的权限（权限），例如对对等方的管理。每个节点和用户都有一个本地
    MSP。例如，用户的本地 MSP 允许用户在交易中进行身份验证，并定义了节点的参与权利等。当用户 A 尝试执行本地级事务（比如安装链码）时，对等方 **P1**
    通过引用其本地 MSP 副本验证用户 A 的身份。通过验证，**P1** 确保用户 A 属于组织 1，并有权限执行该事务。只有在验证通过后，安装事务才能成功完成。'
- en: '**Channel**-**level transaction**: Every organization that is participating
    on the channel must have a channel MSP. All peers and orderers on the channel
    have the same view of the channel MSP. When user A tries to execute a channel-level
    transaction, such as initiating chaincode, which requires the agreement of all
    the participating organizations, then peer **P1** will check the channel MSP before
    executing the transaction. Administrative and participatory rights in the channel
    are defined as the channel MSP.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '**通道级事务**：参与通道的每个组织都必须拥有一个通道 MSP。通道上的所有对等方和排序器都对通道 MSP 有相同的视图。当用户 A 尝试执行通道级事务，比如启动链码，需要所有参与组织的同意时，对等方
    **P1** 将在执行事务之前检查通道 MSP。通道中的管理和参与权利被定义为通道 MSP。'
- en: Channel (privacy provider)
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通道（隐私提供者）
- en: Confidentiality in blockchain business networks is achieved with segregated
    communication between network participants, which is achieved by using HLF channels.
    Transactions in a blockchain business network are executed on a channel, where
    transacting parties are authenticated and authorized to effect transactions on
    that channel. By default, all participants in a network are part of a channel.
    However, for private transactions, organizations need to create separate channels
    and authorize members to that channel. Ledgers are separated from channel to channel
    and, hence, ledger data cannot move between channels. The separation of ledger
    data and peers by channels allows private and confidential transactions between
    organizations that are still part of the same blockchain network. Data separation
    between channels is achieved by configuring membership services, chaincode, and
    the gossip protocol. Here, data includes transaction information, the state of
    the ledger, and channel membership. This data is restricted to just those verified
    peers who are members of the channel.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链业务网络中的机密性通过网络参与者之间的隔离通信实现，这是通过使用 HLF 通道实现的。区块链业务网络中的交易在通道上执行，在该通道上，交易各方经过验证和授权，可以在该通道上执行交易。默认情况下，网络中的所有参与者都属于一个通道。但是，对于私有交易，组织需要创建单独的通道并将成员授权给该通道。账本从通道到通道分开，因此账本数据无法在通道之间移动。通过通道将账本数据和对等方分开，允许在仍然属于同一区块链网络的组织之间进行私有和机密交易。通道之间的数据分离是通过配置成员服务、链码和八卦协议实现的。这里的数据包括交易信息、账本状态和通道成员资格。这些数据仅限于那些经过验证的通道成员对等方。
- en: A client SDK passes parameters, such as the MSP ID (unique within a channel),
    policies, and members (organizations) to the network configuration chaincode.
    This invocation creates configuration transactions on the network configuration
    chaincode. These versioned configuration transactions (configtx) result in the
    creation of a genesis block on the channel's ledger. This genesis block records
    information such as the channel configuration. As soon as a member is added to
    a channel, it gets access to relevant information on the genesis block.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端SDK将参数（例如渠道内唯一的MSP ID、策略和成员（组织））传递给网络配置链代码。此调用会在网络配置链代码上创建配置交易。这些有版本的配置交易（configtx）导致在渠道分类帐上创建创世区块。此创世区块记录诸如渠道配置之类的信息。一旦将成员添加到渠道中，它就可以访问创世区块上的相关信息。
- en: Participants can deploy chaincode once the channel setup is complete. Then,
    participants can propose transactions, endorse, order, and validate transactions.
    Access rights are granted to participants by their MSP, and these rights define
    the limits of a participant on a channel. Participants outside the channel do
    not have access to any transactions or messages on the channel. Hence, segregating
    transactions based on their channels enhances the privacy offered by the blockchain
    network.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 参与者在渠道设置完成后可以部署链代码。然后，参与者可以提出交易、认可、排序和验证交易。访问权限由参与者的MSP授予，并且这些权限定义了参与者在渠道上的限制。渠道外的参与者无权访问渠道上的任何交易或消息。因此，根据其渠道对交易进行隔离增强了区块链网络提供的隐私。
- en: PDC
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PDC
- en: We know that channels facilitate private and confidential transactions between
    organizations. However, what if you want to have a few organizations on a channel,
    but still want to keep some of the data private to a subset of organizations participating
    in that channel. Channels have advantages. However, if you keep creating multiple
    channels between organizations that require private communication, then you might
    end up with channel-explosion, which will lead to maintenance overheads. You have
    to maintain MSPs, policies, and chaincode versions, and this does not allow us
    to address the use case of having private data for a subset of organizations in
    a channel. To address the challenge of allowing private data for a subset of organizations
    in a channel, HLF (from v1.2 onward) offers the facility to create PDCs.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道渠道在组织之间促进了私人和机密的交易。但是，如果您希望在一个渠道上有几个组织，但仍然希望将一些数据保留给参与该渠道的组织的子集，该怎么办？渠道有优势。然而，如果您不断创建在需要私人通信的组织之间的多个渠道，则可能会导致渠道爆炸，这将增加维护开销。您必须维护MSP、策略和链代码版本，这不允许我们解决在渠道中为一些组织的子集拥有私人数据的用例。为了解决在渠道中允许一些组织的子集拥有私人数据的挑战，HLF（从v1.2开始）提供了创建PDC的功能。
- en: PDC – more privacy in channels
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PDC – 更多渠道隐私
- en: With PDC, subsets of organizations can query, comment, and endorse private data,
    inside a channel without creating a separate channel.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 有了PDC，组织的子集可以在一个渠道内查询、评论和认可私人数据，而不需要创建单独的渠道。
- en: 'Referring to the following diagram, peer **P1** belongs to organization **O1**,
    **P3** belongs to organization **O3**, and Peer **P7** belongs to organization
    **O4**. Here, **P1**, **P3**, and **P7** are all on **Channel-C1**. However, organization
    1 (**O1**) wants to have a private data exchange with **P3**, and also wants a
    separate private data exchange with **P7**. If only the channel concept is followed,
    then the system will have multiple channels. Organization **O1** (**P1**) and
    organization **O3** (**P3**) will have a separate channel, while organization **O1**
    (**P1**) and organization **O4** (**P7**) will have a separate channel. Another
    way of handling this requirement is to allow private transactions between channel
    members in PDC:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 参考下图，节点**P1**属于组织**O1**，**P3**属于组织**O3**，节点**P7**属于组织**O4**。在这里，**P1**，**P3**和**P7**都在**Channel-C1**上。然而，组织1（**O1**）希望与**P3**进行私人数据交换，并且还希望与**P7**进行单独的私人数据交换。如果仅按照渠道概念来处理，则系统将具有多个渠道。组织**O1**（**P1**）和组织**O3**（**P3**）将拥有一个单独的渠道，而组织**O1**（**P1**）和组织**O4**（**P7**）将拥有一个单独的渠道。处理此需求的另一种方法是允许PDC中渠道成员之间进行私人交易：
- en: '![](img/9a10c146-051d-4c2f-ab79-9ecb4d894d7f.jpg)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a10c146-051d-4c2f-ab79-9ecb4d894d7f.jpg)'
- en: Ledger and private data
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 分类帐和私人数据
- en: From the ledger perspective, each peer has a ledger comprising states—the current
    state and the transaction log. We will be covering ledgers in detail in subsequent
    sections in this chapter. The diagram shows the current state as the ledger state,
    and shows the transaction log in the ledger. Here, organization 1 has peer **P1**,
    organization 3 has peer **P3**, and organization 7 has peer **P4**. As **P1**
    and **P3** are sharing private data, the diagram shows the private state (**O1**
    and **O3**) at peers **P1** and **P3**. In addition, since **P1** and **P7** are
    sharing private data, the diagram shows the private state (**O1** and **O4**)
    at peers **P1** and **P7**. Chaincode (**SC2**) is *instantiated* on the channel
    (**C2**); hence, all the smart contracts within the chaincode (**SC2**) are available
    for applications on the channel (**C2**). This private state will be replicated
    to all the peers from an organization that wants to have private communication.
    Those authorized peers will be able to see the hash of the data, which is located
    in the main ledger, and the real private data will be on their private database.
    As private data is not synced with unauthorized peers, they will never be able
    to see the private data. However, the main ledger's data hash is accessible to
    them.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 从分类账的角度来看，每个节点都有一个包括状态（当前状态和交易日志）的分类账。在本章的后续部分中，我们将详细介绍分类账。图表显示了当前状态作为分类账状态，并显示了分类账中的交易日志。在这里，组织
    1 有节点 **P1**，组织 3 有节点 **P3**，组织 7 有节点 **P4**。由于 **P1** 和 **P3** 正在共享私有数据，图表显示了节点
    **P1** 和 **P3** 的私有状态（**O1** 和 **O3**）。另外，由于 **P1** 和 **P7** 正在共享私有数据，图表显示了节点
    **P1** 和 **P7** 的私有状态（**O1** 和 **O4**）。链码（**SC2**）在通道（**C2**）上 *被实例化*；因此，链码（**SC2**）中的所有智能合约对通道（**C2**）上的应用程序都是可用的。这些私有状态将从想要进行私有通信的组织的所有节点复制到所有节点。被授权的节点将能够看到数据的哈希值，这些哈希值位于主分类账中，而真实的私有数据将存储在它们的私有数据库中。由于私有数据未与未经授权的节点同步，它们永远无法看到私有数据。但是，主分类账的数据哈希值对它们是可见的。
- en: PDC is an excellent way to comply with the **General Data Protection Regulation**
    (**GDPR**). One such regulation stipulates that data owners can delete private
    data. However, we know that blockchain is immutable and, once data is recorded
    to the ledger, it cannot be deleted. With PDC, private data remains in your private
    database. It is not written to the ledger. Only the hash of the data is written
    to the ledger.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: PDC 是遵守**通用数据保护条例**（**GDPR**）的绝佳方式。其中一个规定是数据所有者可以删除私有数据。但是，我们知道区块链是不可变的，一旦数据被记录到分类账上，就无法被删除。使用
    PDC，私有数据仍然保留在您的私有数据库中。它不会被写入分类账。只有数据的哈希值被写入分类账。
- en: 'Technically, PDC is supported by two key elements:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术上，PDC 得到两个关键元素的支持：
- en: '**Private database**: This is also known as the SideDB on each peer, and participates
    in private data communication. You will recall the anchor peer discussed in this
    chapter. Since ordered nodes are not involved in private data communication, anchor
    peers need to be set for P2P communication via the gossip protocol.'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**私有数据库**：在每个节点上也称为 SideDB，并参与私有数据通信。您将回忆起本章中讨论的锚定节点。由于排序节点不参与私有数据通信，需要为点对点通信通过八卦协议设置锚定节点。'
- en: '**Data hash**: Hash is on the current state, the main ledger. It serves as
    the transaction evidence, cannot be removed, and is accessible to all peers from
    the channel, irrespective of whether they are into a PDC.'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据哈希：** 哈希值位于当前状态的主分类账中。它作为交易的证据，无法被移除，且无论节点是否涉及到 PDC，所有通道中的节点都能访问它。'
- en: Distributed ledger
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式账本
- en: This section covers aspects of blockchain architecture that are specific to
    the ledger. It also covers nodes, such as peers and orderers, and, while defining
    the orderers, we will also cover the transaction flow process.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了与分类账特定的区块链架构方面。它还涵盖了节点，如节点和排序者，并且在定义排序者时，我们也将涵盖交易流程。
- en: Nodes
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 节点
- en: The deployment view of HLF comprises nodes that are connected as P2P networks
    with a distributed edger that is shared among these nodes. Nodes can have different
    roles in the HLF—peers and orderers.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: HLF 的部署视图包括连接为点对点网络的节点，这些节点共享分布式账本。节点在 HLF 中可以担任不同的角色——节点和排序者。
- en: '**Peers:** These propose transactions, save/apply and commit transactions,
    and maintain a local copy of the ledger.'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '**节点：** 提议交易，保存/应用并提交交易，并维护分类账的本地副本。'
- en: 'The types of peers are as follows:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 节点的类型如下：
- en: '**Endorsing peers**, also known as endorsers: These obtain a transaction proposal
    from the client/apps, verify the client signature, get the RW state of the world
    state to be affected by the transaction, and send these states to orderers.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认可同行**，也称为认可者: 从客户端/应用程序获取交易提案，验证客户签名，获取将受交易影响的世界状态的 RW 状态，并将这些状态发送给排序器。'
- en: '**Committing peers**, also known as committers (non-endorsing nodes): Following
    endorsement and ordering, these validate the transaction, applying the result
    of the transaction to the local ledger. This is committed to the ledger and the
    transaction becomes immutable.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交同行**，也称为提交者（非认可节点）: 在认可和排序之后，对交易进行验证，将交易结果应用于本地分类账。这将提交到分类账，并且交易变得不可更改。'
- en: In HLF, every endorser node is also a committer node. However, not every committer
    needs to be an endorser node.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HLF 中，每个认可者节点也是一个提交者节点。但是，并非每个提交者都需要是认可者节点。
- en: '**Orderers:** At least one orderer should exist in a blockchain network. Orderers
    ensure the correct ordering of transactions.'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序器:** 区块链网络中至少需要存在一个排序器。排序器确保交易的正确排序。'
- en: Peers
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同行
- en: Peers constitute a blockchain network and host ledgers and chaincode. We saw
    in the conceptual view of architecture that each peer has a copy of the chaincode
    and ledger. Peers offer APIs, which allow applications to interact with them and
    also to start, stop, configure, delete, and reconfigure the peers. A peer can
    host a ledger and chaincode, and it is feasible for peers to host only ledgers
    and not chaincode (application chaincode). Peers usually always have system chaincode.
    The HLF SDK offers APIs, which allows applications to interact with peers, since
    it is the peers to which applications connect if they need to query a ledger or
    invoke a transaction on the ledger. Then, in turn, the peer invokes the chaincode
    to effect the execution of that transaction.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 同行构成了一个区块链网络，托管分类账和链码。我们在架构的概念视图中看到，每个同行都有链码和分类账的副本。同行提供 API，允许应用程序与其互动，也允许启动、停止、配置、删除和重新配置同行。一个同行可以托管一个分类账和链码，同行也可以只托管分类账而不托管链码（应用程序链码）。同行通常始终具有系统链码。HLF
    SDK 提供 API，允许应用程序与同行互动，因为需要查询分类账或在分类账上调用交易时，应用程序会连接到同行。然后，同行调用链码来执行该交易。
- en: 'Along with orderers, peers ensure the synchronicity of ledgers on every peer.
    We will walk through the transaction flow in subsequent sections, which will highlight
    peer involvement. Here is a brief synopsis of that:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '与排序器一起，同行确保每个同行上的分类账同步。我们将在后续部分介绍交易流程，重点突出同行的参与。以下是该内容的简要概要:'
- en: The application (the party that wants to execute a transaction) connects to
    a peer. Where the application and peer are from the same organization, certificates
    are issued by an organization's CA.
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序（希望执行交易的一方）连接到一个同行。当应用程序和同行来自同一组织时，证书由组织的 CA 发放。
- en: The peer invokes the chaincode, which results in the generation of a proposal
    response. The response depends on the transaction request from the application.
    For instance, if the application requested a query to the ledger, then the proposal
    response will have a query result or, if the application requested an update to
    the ledger, then the proposal response will include the proposed ledger updates.
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同行调用链码，导致生成提案响应。响应取决于应用程序的交易请求。例如，如果应用程序请求对分类账的查询，那么提案响应将包含查询结果，或者如果应用程序请求对分类账的更新，那么提案响应将包括提议的分类账更新。
- en: 'The application receives a proposal response from the peer:'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '应用程序从同行接收提案响应:'
- en: If it was a query (*ledger-query-transaction*), then the process is completed
    as the application has received its response
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是一个查询（*分类账查询交易*），那么流程已经完成，因为应用程序已经收到了响应
- en: If it was a ledger update (*ledger-upd**ate-transaction*), the request then
    proceeds to the next step
  id: totrans-349
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是一个分类账更新（*分类账更新交易*），请求随后进入下一步
- en: For a ledger update request (*ledger-update-transaction*), the peer cannot send
    the response as the update to the ledger first needs to be agreed by all the participating
    peers. This agreement to change the ledger is termed a consensus.
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于分类账更新请求（*分类账更新交易*），同行不能将响应发送，因为首先所有参与同行都需要同意更改分类账。这改变分类账的一致性称为共识。
- en: As a consensus is required for the *ledger-update-transaction*, the peer returns
    a proposed update response to the application, which is actually a snapshot of
    the change that the peer is proposing. This is similar to a change being performed
    on the ledger only once a consensus is reached.
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于对于*账本更新事务*需要共识，节点会向应用程序返回一个建议的更新响应，实际上是对节点提出的更改的快照。这类似于只有在达成共识后才对账本进行更改。
- en: The application receives responses. The application will build a transaction
    from all the responses and send it to the orderer's node.
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序收到响应。应用程序将从所有响应中构建一个事务并将其发送到订购者节点。
- en: Orderers will collect this transaction and various other transactions from the
    blockchain network and compile them into a block.
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订购者将从区块链网络收集此事务和其他各种事务，并将它们编译成一个区块。
- en: Orderers will then distribute this block to all the peer (committer) nodes,
    which also includes the peer to which the application (in this sample) sent the
    initial request.
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接着，订购者将把这个区块分发给所有的节点（提交者），其中也包括应用程序（在这个示例中）发送初始请求的节点。
- en: All the peers, including the peer in this context, will validate the transaction.
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有的节点，包括当前上下文中的节点，都将验证该事务。
- en: Upon successful transaction validation, the peers will update the local copy
    of the ledger.
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在成功验证事务后，节点将更新账本的本地副本。
- en: Once the ledger is updated, the peer to which the initial request was sent will
    generate an event.
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦账本更新完成，发送初始请求的节点将生成一个事件。
- en: This event will be received by the application, which marks the completion of
    the update transaction.
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个事件将被应用程序接收，标志着更新事务的完成。
- en: We saw in the *Architecture* – *conceptual view* section that peers are owned
    and contributed by various organizations, and this group of peers forms the blockchain
    network. Applications that are developed by an organization usually connect to
    the peers of that organization.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*架构* - *概念视图*部分看到，节点由各种组织拥有和贡献，并且这组节点形成了区块链网络。通常由组织开发的应用程序通常连接到该组织的节点。
- en: A blockchain network does not literally depend on the organization and its contributed
    peers. However, there should be at least one organization existing with one peer.
    Interestingly, organization peers (belonging to any organization) host the same
    ledger; however, every organization is free to use its own code language for building
    application and presentation logic.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链网络并非真正依赖于组织及其贡献的节点。然而，至少应存在一个组织和一个节点。有趣的是，组织节点（属于任何组织）托管相同的账本；然而，每个组织都可以自由使用其自己的代码语言来构建应用程序和演示逻辑。
- en: From the *Architecture*: *conceptual view* diagram, we know that peers are connected
    to channels. Channels also have channel configuration and contain the global MSP.
    This global MSP helps to map peers to their organization, as the certificate issued
    to the peer emanates from the CA of that organization. By way of an example, refer
    to the *MSP* diagram in this chapter. Here, peer **P1'**s certificate is issued
    by the CA (**CA O1**). The channel configuration (**CCon1**) determines that the
    identities (participants such as **P1**) are issued by the CA (**CA O1**), which
    is from organization 1 (**O1**). This is defined in **O****1**. The MSP is contained
    in the global MSP of the channel configuration. This helps in associating a peer
    with an organization.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 从*架构*：*概念视图*图中，我们知道节点连接到通道。通道还具有通道配置并包含全局MSP。该全局MSP有助于将节点映射到其组织，因为发给节点的证书来自该组织的CA。例如，参考本章中的*MSP*图。这里，节点**P1'**的证书由CA（**CA
    O1**）颁发。通道配置（**CCon1**）确定身份（参与者如**P1**）是由CA（**CA O1**）颁发的，这来自组织1（**O1**）。这在**O****1**中定义。MSP包含在通道配置的全局MSP中。这有助于将节点与组织关联起来。
- en: Each peer has a digital certificate issued by the organization's CA. This digital
    certificate acts as the identity of the peer.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 每个节点都有由组织的CA颁发的数字证书。该数字证书充当节点的身份。
- en: At a given point in time, a peer can only belong to/be owned by one organization.
    A peer can reside anywhere; on a local machine, in an enterprise on premise, on
    the cloud, and suchlike. It is the certificate (identity) of the peer that maps
    and associates that peer with an organization. This mapping is provided by the
    MSP. Along with the authentication of the user via the MSP, channel configuration
    also involves access policies, which determines the privileges assigned to a peer
    (the peer's identity). Details of this can be found in the *MSP* section. However,
    in short, the mapping of an identity to an organization is defined by the MSP,
    along with the roles assigned to the peer in that particular organization, and
    also the rights (privileges) assigned to that identity.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定的时间点，一个同行只能属于/被一个组织拥有。同行可以随处存在；在本地计算机上，在企业内部，云上等等。是同行的证书（身份）将其映射并与一个组织相关联。这种映射由MSP提供。除了通过MSP对用户进行认证外，通道配置还涉及访问策略，确定对同行（同行的身份）分配的特权。这方面的详细信息可以在*MSP*部分找到。不过，简而言之，身份与组织的映射由MSP定义，并确定了在该特定组织中分配给同行的角色，以及分配给该身份的权利（特权）。
- en: Orderers and transaction process flow
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 订单者和交易流程
- en: In a blockchain network, orderers maintain a ledger's synchronicity and consistency.
    We have seen details pertaining to a *ledger-update-transaction*, which needs
    all the participating peers in the network to reach an agreement in order to approve
    an update to the ledger. The agreement process of receiving approvals from other
    peers to update the ledger is called a consensus. Once a transaction is approved
    by all the peers, it is committed to the ledger and the client application is
    further updated with the success of the commit (an update to the ledger). The
    following are the stages of a *ledger-update-transaction**:***
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链网络中，订单者维护分类帐的同步性和一致性。我们已经看到了关于*分类帐更新交易*的细节，该交易需要网络中的所有参与同行达成一致以批准对分类帐的更新。从其他同行那里获得批准以更新分类帐的同意过程称为共识。一旦交易得到所有同行的批准，它就会提交到分类帐，并且客户端应用程序也会得到提交的成功更新（对分类帐的更新）。以下是*分类帐更新交易**的各个阶段：
- en: '**Proposal**: This is the stage where the transaction proposal is sent by the
    client application to the channel''s peers'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提案**：这是客户端应用程序将交易提案发送到通道同行的阶段'
- en: '**Endorsement**: This is the stage where the transaction is simulated'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认可**：这是模拟交易的阶段'
- en: '**Packaging proposal response**: At this stage, each endorser will return its
    signed endorsement back to the client'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打包提案响应**：在这个阶段，每个认可者将其签名的认可返回给客户端'
- en: '**Verify and send for ordering**: At this stage, the client application then
    verifies the proposal response and sends the transaction message for ordering'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证并发送给订购者**：在这个阶段，客户端应用程序验证提案响应并发送交易消息给订购者'
- en: '**Distribution:** At this stage of the transaction process, orderers will distribute
    the block to peers'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分发**：在交易过程的这个阶段，订单者将区块分发给同行'
- en: '**Validation and tagging**: At this stage, peers will receive a block from
    the orderers and they will tag it as valid or invalid'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证和标记**：在这个阶段，同行会收到来自订单者的区块，并将其标记为有效或无效'
- en: '**Notifications**: When the ledger is appended, client applications are notified
    at this stage'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通知**：当分类帐被附加时，客户端应用在此阶段会收到通知'
- en: We will be talking about transaction flow in detail in the *Consensus everywhere*
    section later.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后将详细讨论*无处不在的共识*部分的交易流程。
- en: Ledger
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分类帐
- en: 'As we discovered in [Chapter 1](759718e2-3861-41c1-8d90-bad1deeceddb.xhtml), *Exploring Blockchain
    and BaaS*, accounting ledgers have transaction history recorded as credit and
    debit transactions, while a statement shows the current balance. All the credit
    and debit entries lead to the current balance. Now, let''s build the analogy,
    where the current balance is the current state of the ledger, and credit and debit
    entries are the transaction log entries. Current state and transaction logs, together,
    form a ledger; a blockchain ledger. To interact (also known as transact) on a
    distributed ledger, chaincode needs to be invoked:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第1章](759718e2-3861-41c1-8d90-bad1deeceddb.xhtml)中发现的，*探索区块链和BaaS*，会计分类帐记录了记账的交易历史，而报表显示当前余额。所有的借贷记录导致了当前余额。现在，让我们建立类比，当前余额就是分类帐的当前状态，借贷记录就是交易日志条目。当前状态和交易日志一起形成了一个分类帐；一个区块链分类帐。在分布式分类帐上进行交互（也称为交易），需要调用链码：
- en: '**Current state**: Also termed *world state* or just *state*, this is a key-value
    pair that shows the current value of the ledger states, and it changes frequently
    as states are created, appended, or erased.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当前状态**：也称为*世界状态*或只是*状态*，这是一个键值对，显示了分类帐状态的当前值，随着状态的创建、追加或删除而经常变化。'
- en: '**Transaction log**: This is the set of changes that leads to the current world
    state. Transactions that are ordered and sequenced in blocks are appended to the
    blockchain. Sets of transaction lead to the current value of the world state.
    These transactions, once ordered and sequenced, cannot be modified and, hence,
    the block and blockchain, also known as the ledger, become immutable.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交易日志**：这是导致当前世界状态的更改集。经过排序和序列化的交易追加到区块链上。一组交易导致了当前世界状态的值。一旦排序和序列化，这些交易就不能被修改，因此，区块和区块链，也称为分类帐，变得不可变。'
- en: The ledger is distributed; hence, it is on all the peers. We have seen in transaction
    flows that a consensus is required before a transaction is committed to the ledger.
    Hence, the ledger is kept in sync with participating peers.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 分类帐是分布式的；因此，它位于所有节点上。我们已经在交易流程中看到，需要在将交易提交到分类帐之前达成共识。因此，分类帐与参与节点保持同步。
- en: 'Each peer node has a copy of the ledger. This copy contains the transaction
    log and world state results, stored as key-value pairs in the database. DLT in
    HLF has two aspects; a world state, and a transaction log. A ledger state comprises
    a key-value pair. The world state is an aggregated state of the distributed ledger
    at a given point in time. The world state allows consumers to get the current
    state of the ledger. The equation for the ledger is as follows:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 每个对等节点都有分类帐的副本。此副本将交易日志和世界状态结果存储为数据库中的键值对。HLF 中的 DLT 有两个方面；世界状态和交易日志。分类帐状态包括一个键值对。世界状态是在给定时间点的分布式分类帐的聚合状态。世界状态允许消费者获取分类帐的当前状态。分类帐的方程如下：
- en: '*distributed ledger = world state + transaction log*'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '*分布式分类帐 = 世界状态 + 交易日志*'
- en: 'The following diagram shows a ledger consisting of the world state and transaction
    log. The transaction log comprises various blocks, with each block containing
    one or more transactions:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了由世界状态和交易日志组成的分类帐。交易日志包括各种区块，每个区块包含一个或多个交易：
- en: '![](img/d29afb8b-e07a-43dc-a8a2-b0993aba8782.png)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d29afb8b-e07a-43dc-a8a2-b0993aba8782.png)'
- en: Ledger state and the transaction log
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 分类帐状态和交易日志
- en: This example shows the **PiggyBank** of a boy named **Noah**. The world state
    and the transaction log are empty at the start. This is represented by the **Genesis
    Block** (**B0**). **Block B1** **includes Transaction T1**, where **Daddy puts
    10k i.e. Credit to PiggyBank**. This is like a debit to daddy's account. The first
    transaction is represented by block 1 (**B1**). Block 1 represents the ledger
    state, with **Key** as **PiggyBank** and a **Value** of **10000**. Also, it has
    ledger state with **Key** as **DaddyPutsToBank** and a **Value** of **10000**.
    Both the ledger states are at **Version** **0**. **Version** **0** indicates that
    it is a starting version number and that they have not been updated since they
    were created.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了一个名叫**诺亚**的男孩的**存钱罐**。世界状态和交易日志在开始时是空的。这由**创世区块**（**B0**）表示。**区块 B1**
    包括**交易 T1**，其中**爸爸存了 10k，即向存钱罐充值**。这就像是向爸爸的账户借钱。第一笔交易由区块 1（**B1**）表示。区块 1 表示分类帐状态，其中**Key**为**存钱罐**，**Value**为**10000**。此外，它还有分类帐状态，其中**Key**为**爸爸存入银行**，**Value**为**10000**。两个分类帐状态都是在**版本**
    **0**。**版本** **0**表示这是一个起始版本号，并且自创建以来它们还没有被更新过。
- en: Applications invoke the chaincode, which actually accesses the ledger states
    via APIs to perform operations such as `get` and `put` on states using the **state**
    key.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序调用链代码，实际上通过 API 访问分类帐状态来执行操作，例如使用**状态**键对状态进行`get`和`put`。
- en: Noah's mommy and Noah take money from the **PiggyBank**. Block **B2** **includes
    Transaction** **T2** **and** **T3**. Here, **T2** represents the transaction where
    **Mommy takes 2k i.e. Credit to Mommy's account**, and **T3** represents a transaction
    where **Noah takes 2k i.e. Credit to Noah's account**. **PiggyBank** is debited
    by 4k. Similarly, **Block** **B3** **includes** **Transaction** **T4**, where
    **Mommy puts 1k i.e. Debit to Mommy's account**, which is 1k credit to **PiggyBank**.
    Likewise, **Block** **B4** **includes** **Transaction** **T5**, where **Noah takes
    3k i.e. Credit to Noah's account**. At this state, **PiggyBank** shows the latest
    current state of **PiggyBank**, which is 4k. Hence, the current state represents
    the current world state of **PiggyBank**. Even if the world state gets corrupted
    and information pertaining to the current state is destroyed, replaying the transactions
    in order will help to create the current world state.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 诺亚的妈妈和诺亚从**存钱罐**中取钱。区块**B2**包含交易**T2**和**T3**。这里，**T2**代表交易，**妈妈取了2千，即存入妈妈的账户**，**T3**代表一笔交易，**诺亚取了2千，即存入诺亚的账户**。**存钱罐**被扣除了4千。同样，**区块B3**包含**交易T4**，其中**妈妈存入1千，即从妈妈的账户扣除1千，同时存入**存钱罐**1千**。同样，**区块B4**包含**交易T5**，其中**诺亚取了3千，即存入诺亚的账户**。在这个状态下，**存钱罐**显示了**存钱罐**的最新当前状态，即4千。因此，当前状态代表了**存钱罐**的当前世界状态。即使世界状态被损坏并且与当前状态相关的信息被破坏，按顺序重放交易将有助于创建当前世界状态。
- en: The world state database
  id: totrans-387
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 世界状态数据库
- en: 'We discussed the world state database in previous sections. Here, let''s examine
    it in more detail. It is a database that offers queries and appends itself to
    the states of the ledger. We know that the world state is modeled as a key-value
    store that is versioned. Here, the values of the keys are appended or retrieved
    by applications via simple `put` and `get` operations. The world state is maintained
    in a database, which could be either LevelDB or CouchDB. The following is a quick
    comparison and lists recommendations for this database:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的章节中讨论了世界状态数据库。在这里，让我们更详细地检查它。它是一个数据库，提供查询并将自身附加到账本的状态上。我们知道世界状态被建模为一个带版本的键值存储。在这里，键的值通过简单的`put`和`get`操作由应用程序附加或检索。世界状态维护在一个数据库中，可以是LevelDB或CouchDB。以下是对此数据库的快速比较和推荐列表：
- en: '**Similarities**:'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相似之处**:'
- en: Both can store binary data.
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两者都可以存储二进制数据。
- en: Both support chaincode operations, such as `get` and `set`. This is where `get`
    and `set` are essentially getting and setting the asset (the key's value).
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两者都支持链码操作，如`get`和`set`。这就是`get`和`set`实质上是获取和设置资产（键的值）。
- en: Both support range queries, where keys are queried by range.
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两者都支持范围查询，其中键通过范围查询。
- en: Both also support composite keys; for example, a combination of asset ID and
    owner ID can be used to get all the assets a particular owner owns.
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两者都支持复合键；例如，资产ID和所有者ID的组合可用于获取特定所有者拥有的所有资产。
- en: '**Differences**: Business applications today model assets as JSON. Hence, CouchDB
    allows applications to perform rich queries to chaincode where assets are JSON
    modeled, using CouchDB''s JSON query language:'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不同之处**：今天的业务应用将资产建模为JSON。因此，CouchDB允许应用程序执行丰富的查询到链码，其中资产是以JSON模型化的，使用CouchDB的JSON查询语言：'
- en: LevelDB is the default database, and is collocated with a node, mostly embedded
    in the same operating system process.
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: LevelDB是默认数据库，并与节点共存，主要嵌入在同一操作系统进程中。
- en: CouchDB runs on a separate operating system process. However, it maintains a
    one-to-one relationship with network nodes and CouchDB instances.
  id: totrans-396
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CouchDB在单独的操作系统进程上运行。但是，它与网络节点和CouchDB实例之间维护一对一的关系。
- en: '**Recommendations**:'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推荐**：'
- en: LevelDB is recommended when the states are simple key-value pairs.
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当状态为简单键值对时，推荐使用LevelDB。
- en: When the state structure is JSON, then CouchDB is recommended.
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当状态结构为JSON时，建议使用CouchDB。
- en: It is possible to start with LevelDB and later move to CouchDB. However, I personally
    recommend modeling assets' data as JSON and therefore use CouchDB.
  id: totrans-400
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以从LevelDB开始，然后转到CouchDB。但我个人建议将资产数据建模为JSON，因此使用CouchDB。
- en: Indexing is recommended for CouchDB, where indexes can be packaged alongside
    chaincode in a different directory. The moment chaincode is installed and initiated
    on peers, indexes also get deployed to channels and the chaincode's database for
    states also known as CouchDB.
  id: totrans-401
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CouchDB推荐使用索引，其中索引可以与链码一起打包在不同的目录中。当链码安装并在对等方上启动时，索引也会部署到通道和链码的状态数据库，也称为CouchDB。
- en: '**Key Feature-Pluggable**: HLF has various components that are pluggable, and
    a database is one of them. Businesses can have a relational database, a graph
    store, or a temporal database as the database of choice for the world state.'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关键特性-可插拔**：HLF 有各种可插拔的组件，数据库就是其中之一。企业可以选择关系数据库、图形存储或临时数据库作为世界状态的数据库。'
- en: Chaincode
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块链代码
- en: 'In [Chapter 1](759718e2-3861-41c1-8d90-bad1deeceddb.xhtml), *Exploring Blockchain
    and BaaS*, we learned about ledgers. There are different ledgers, for example,
    sales ledgers to store financial transactions, purchase ledgers to record spending
    and purchasing, while general ledgers record accounts, liabilities, expenses,
    income, and suchlike. Similarly, in HLF, transaction logs are the ledgers that
    record activities. These activities are also termed *transactions*. A ledger''s
    world state tracks the transactions, which changes the world state of the ledger.
    The world state is a key-value pair, which is versioned, and, along with the transaction
    logs, it constitutes the ledger, which is available on all the participating nodes
    on the blockchain network. Now, the question is: who proposes changes to a ledger''s
    world state? Well, the answer is dApps. Client applications issue transactions
    to the blockchain network via the execution of business logic in the chaincode,
    which are comprised of smart contract(s).'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](759718e2-3861-41c1-8d90-bad1deeceddb.xhtml) *探索区块链和BaaS* 中，我们学习了分类帐。有不同的分类帐，例如，销售分类帐用于存储财务交易，采购分类帐用于记录支出和采购，而总分类帐则记录帐户、负债、费用、收入等等。同样，在
    HLF 中，交易日志是记录活动的分类帐。这些活动也称为*交易*。分类帐的世界状态跟踪交易，这些交易改变了分类帐的世界状态。世界状态是一个键-值对，它是有版本的，并且，与交易日志一起，它构成了分类帐，该分类帐可在区块链网络上的所有参与节点上使用。现在的问题是：谁提出了对分类帐的世界状态进行更改？嗯，答案是
    dApps。客户端应用通过执行链码中的业务逻辑向区块链网络发出交易，这些交易由智能合约组成。
- en: All the nodes are coordinated in terms of the latest copy of the smart contract.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 所有节点都协调一致，以获取智能合约的最新副本。
- en: Now, refer back to the diagram in the *Ledger* section earlier in this chapter.
    In that **PiggyBank** sample, the account balance of **PiggyBank** and Daddy,
    Mommy, and Noah's account shows the world view of the asset transfer (also known
    as transactions) that happened between various parties and the **PiggyBank** account.
    When Mommy and Noah take from **PiggyBank**, it is represented in block **B2**,
    as transactions **T2** and **T3**. Here, the **PiggyBank** **Version** changes
    from **0** to **1**, as it represents a change in value for the key, **PiggyBank**.
    Whenever there is a change in value, a new version is created. All those transactions
    are executed against the chaincode, which results in state changes in the work
    state. So, what is chaincode?
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请回顾本章前面的 *分类帐* 部分中的图表。在那个 PiggyBank 示例中，PiggyBank 账户和爸爸、妈妈和诺亚的账户余额显示了发生在各方和
    PiggyBank 账户之间的资产转移（也称为交易）的世界观。当妈妈和诺亚从 PiggyBank 中取款时，它被表示为块 **B2** 中的交易 **T2**
    和 **T3**。在这里，PiggyBank **版本** 从 **0** 更改为 **1**，因为它表示 **PiggyBank** 键的价值变化。每当值发生变化时，就会创建一个新版本。所有这些交易都针对区块链代码执行，这导致工作状态中的状态更改。那么，什么是区块链代码？
- en: '**Chaincode** (**and its smart contract**): This is a distributed computer
    program that is available across the HLF blockchain network. In the PiggyBank
    sample, it''s the chaincode that enables the movement of assets (dollars) between
    accounts without the involvement of a third party or an intermediary. Daddy, Mommy,
    and Noah were able to perform transactions without a third party''s involvement.'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '**区块链代码**（**及其智能合约**）：这是一个分布式计算机程序，可在 HLF 区块链网络上使用。在 PiggyBank 示例中，正是这个区块链代码使资产（美元）在账户之间进行转移，而无需第三方或中介的参与。爸爸、妈妈和诺亚能够在没有第三方参与的情况下进行交易。'
- en: Chaincode, a computer program, is compiled and deployed across the blockchain
    network. Upon approval, chaincode is deployed to the distributed blockchain network.
    It runs in isolation from ordering services or peer processes, inside a Docker
    container. dApps logic is implemented in chaincode, where chaincode is used to
    initialize the ledger state and then manage it, which is handled by the SDKs.
    Chaincode can be invoked by client applications. Hence, two types of transactions
    are performed for chaincode—deploy transactions and invoke transactions.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: Chaincode，一个计算机程序，被编译并部署到区块链网络中。经批准后，chaincode 被部署到分布式区块链网络中。它在独立于排序服务或对等进程的环境中运行，在
    Docker 容器内。dApps 逻辑是在 chaincode 中实现的，chaincode 用于初始化账本状态，然后对其进行管理，由 SDK 处理。Chaincode
    可以被客户端应用调用。因此，chaincode 执行两种类型的交易——部署交易和调用交易。
- en: '**Chaincode** **deploy transaction**: Users, via participating nodes, author
    a chaincode (in Golang and similar) and use HLF SDK to issue a deploy transaction
    to the blockchain network. The permission to deploy chaincode is defined as access
    control and an ECert is issued by the HLF CA. Chaincode runs in a secure Docker
    container.'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chaincode 部署交易**：用户通过参与节点授权一个 chaincode（使用 Golang 或类似语言）并使用 HLF SDK 向区块链网络发出部署交易。部署
    chaincode 的权限被定义为访问控制，并由 HLF CA 发布 ECert。Chaincode 在安全的 Docker 容器中运行。'
- en: '**Chaincode** **invoke transaction**: The dApps/client application will use
    SDK to propose a change to the world state of the ledger by issuing a transaction
    that results in an invoke to chaincode. Chaincode''s `invoke` function is called
    by the application by passing the function name and transaction parameters defined
    in the chaincode function. Using the command line or via the SDK, query transactions
    can be executed against the `invoke` function of the chaincode. However, in this
    `invoke` function call, there is no proposal to change the world state of the
    ledger.'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chaincode 调用交易**：dApps/客户端应用将使用 SDK 通过发出一笔交易来提议更改账本的世界状态，从而调用 chaincode。应用程序通过传递
    chaincode 函数中定义的函数名和交易参数来调用 chaincode 的 `invoke` 函数。可以使用命令行或通过 SDK 对 chaincode
    的 `invoke` 函数执行查询交易。然而，在此 `invoke` 函数调用中，没有提案来更改账本的世界状态。'
- en: Peers execute the invoke transactions, and each committing peer commits a transaction
    by updating the local copy of the world state. We will get into a detailed analysis
    of chaincode, the registry, and suchlike in subsequent chapters. Hence, this chapter
    is limited to an introduction to chaincode.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 对等节点执行调用交易，每个提交对等节点通过更新本地的世界状态副本来提交交易。我们将在后续章节中详细分析 chaincode、注册表等内容。因此，本章节仅限于对
    chaincode 的介绍。
- en: Consensus everywhere
  id: totrans-412
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处处共识
- en: 'The agreement process of receiving approvals from other peers to update the
    ledger is called a **consensus**.  A consensus ensures the following:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 从其他对等节点收到批准以更新账本的协议过程称为**共识**。共识确保以下内容：
- en: It ensures that ledger transactions are synchronized throughout the blockchain
    network
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它确保账本交易在整个区块链网络中同步
- en: It ensures that only valid and approved transactions are appended to the ledger
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它确保只有有效和批准的交易被附加到账本上
- en: It ensures that when transactions are appended, they follow the same sequence
    as is set by the orderers
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它确保附加的交易遵循由订购者设置的相同顺序
- en: For a consensus to work, it is important that the transaction order is established
    and maintained and that there is an effective way to reject invalid transactions
    from becoming appended to the ledger. This can be achieved by PBFT, which ensures
    file replicas to keep each copy consistent. Bitcoin uses mining for ordering,
    where each computing node will solve a puzzle and define the order. HLF offers
    various consensus mechanisms to choose from—SOLO or Kakfa.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使共识生效，重要的是确立和维护交易顺序，并且有一种有效的方法来拒绝无效交易被附加到账本上。这可以通过 PBFT 实现，它确保文件副本保持一致。比特币使用挖矿进行排序，其中每个计算节点将解决一个谜题并定义顺序。HLF
    提供了多种共识机制可供选择——SOLO 或 Kakfa。
- en: A consensus goes beyond just establishing the order of transactions. In HLF,
    a consensus plays an important role in the transaction flow—from proposal to endorsement,
    to ordering, validation, and appending. Throughout the transaction flow, identity
    verification happens at various stages. It is an ongoing process. Payloads are
    signed by endorsers, and peers, and the payload gets verified and authenticated
    repeatedly, throughout the transaction flow. To achieve a consensus, it is important
    to ensure that the order of the transaction is met and that transactions have
    gone through the endorsement policy. Before committing, it is important to ensure
    that sufficient endorsements are achieved and that the transactions have passed
    the versioning checks, where the current state is agreed before committing to
    the ledger. A versioning check is a check against double spending and other data
    integrity threats.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 共识不仅仅意味着建立交易顺序。在 HLF 中，共识在交易流程中扮演着重要角色——从提案到背书，到排序，验证和附加。在整个交易流程中，身份验证发生在各个阶段。这是一个持续进行的过程。背书人和对等方对有效载荷进行签名，然后有效载荷在整个交易流程中反复验证和认证。为了达成共识，重要的是确保交易的顺序以及交易是否符合背书政策。在提交之前，确保获得足够的背书并且交易通过版本检查是至关重要的，在提交到总账（账本）之前，必须达成当前状态一致。版本检查是针对双重支付和其他数据完整性威胁的检查。
- en: The transaction flow diagram and process flow are the representation of an ongoing
    consensus process.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 交易流程图和过程流程是正在进行的共识过程的表示。
- en: To me, the whole transaction flow is a consensus process. If you check the following
    transaction flow, peers reach agreement regarding the order of the transactions
    and the content of the transactions. This is achieved by going through various
    stages of the transaction flow. Under the hood, SDK manages the whole consensus
    process and the client is notified at the notification stage when the process
    is concluded.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，整个交易流程就是一个共识过程。如果您查看以下交易流程，对交易顺序和交易内容进行协商一致。这是通过经历交易流程的各个阶段完成的。在幕后，SDK
    管理整个共识过程，当过程结束时，在通知阶段客户端会得到通知。
- en: The channel (application channel) contains details about the consensus options
    and orderer organizations. For example, the channel configuration has a parameter
    called Kafka broker. If it is set with `ConsensusType` as Kafka, then it's set
    for the channel's orders as the consensus algorithm. It is generally established
    during the bootstrapping of the blockchain network and, once configured in the
    channel configuration and the blockchain network, is bootstrapped; then, it's
    impossible to change it via configuration. Also, note that the MSP is synchronized
    via a consensus, too. The consensus is the ordering service, and you will get
    this clarified when you walk through transaction flow in the following section.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 通道（应用通道）包含有关共识选项和排序组织的详细信息。例如，通道配置有一个名为 Kafka broker 的参数。如果设置为`ConsensusType`为
    Kafka，那么它将被设置为通道的订单作为共识算法。通常在区块链网络引导过程中建立，并且一旦在通道配置和区块链网络中配置完毕，那么就无法通过配置更改。另外，要注意
    MSP 也通过共识进行同步。共识是顺序服务，当您浏览以下部分的交易流程时，您将对此有更清晰的了解。
- en: '**BFT versus CFT**: Consensus algorithms (protocols) are pluggable in HLF,
    allowing designers to choose a consensus algorithm based on the use case. For
    cases when a blockchain business network is composed as a single enterprise, or
    all the participating organizations are fully trusted, then BFT is not the ideal
    consensus algorithm as the trust already exists. CFT algorithms can be used as
    they are more performant and offer better throughput. However, for decentralized
    distributed use cases, which include multi parties, BFT is the most suitable consensus
    algorithm.'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '**BFT vs CFT**：共识算法（协议）在 HLF 中是可插拔的，允许设计者根据使用情况选择共识算法。对于区块链业务网络由单一企业组成，或者所有参与组织都是完全可信任的情况，那么
    BFT 并不是理想的共识算法，因为信任已经存在。CFT 算法可以使用，因为它们性能更好，提供更好的吞吐量。然而，对于分散的分布式使用情况，包括多方参与，BFT
    是最适合的共识算法。'
- en: Transaction flow
  id: totrans-423
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易流程
- en: Ledger's synchronicity and consistence is maintained by the orderers. Consensus
    is met, before an update to the ledger is approved. Ledger is updated only upon
    approval by all the peers. This is part of transaction flow; and will be covered
    in detail in this section.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 通过订单节点维护分类账的同步性和一致性。在批准对分类账的更新之前，需要达成共识。只有在所有对等方批准后，分类账才会更新。这是交易流程的一部分；在本节中将详细介绍。
- en: 'The following diagram shows the transaction flow :'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了交易流程：
- en: '![](img/eab48a7a-e1cb-4e60-ab8f-ca1a3d1ea988.jpg)'
  id: totrans-426
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eab48a7a-e1cb-4e60-ab8f-ca1a3d1ea988.jpg)'
- en: Transaction flow
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 交易流程
- en: 'The following are the stages of a transaction flow:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是交易流程的阶段：
- en: '**Proposal**: The client application sends *ledger-update-transactio**n* to
    the peers on the channel. Referring to the preceding diagram, the client application, **O1App1**, sends
    (proposes) a transaction on **Channel-C1**. When the chaincode is installed and
    initiated, an endorsement policy is added to the channel configuration (**CCon1**).
    The endorsement policy for the channel (**C1**) defines that organization **O1**,
    and organization **O2** must approve the transaction. Hence, when a transaction
    is proposed, it goes to the endorsing peers on channel (**C1**), which belongs
    to organization **O1** and organization **O2**. Referring to the diagram, it goes
    to **P1** and **P2**, as the peers are also endorsing peers for organizations **O1**
    and **O2**.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '**提案**：客户端应用程序向通道上的对等方发送*ledger-update-transaction*。参考前面的图表，客户端应用程序**O1App1**在**Channel-C1**上发送（提出）一个交易。当链码安装和启动时，将向通道配置（**CCon1**）添加背书策略。通道（**C1**）的背书策略规定组织**O1**和组织**O2**必须批准交易。因此，当提出交易时，它会发送到通道（**C1**）上的背书同行，这些同行属于组织**O1**和组织**O2**。参考图表，它发送到**P1**和**P2**，因为这些对等方也是组织**O1**和**O2**的背书同行。'
- en: Technically speaking, the application uses APIs, which result in the transaction
    proposal. The transaction proposal is akin to a request to execute the chaincode's
    functions so that ledger data can be read/updated. Here, applications use an SDK
    (Node, Python, or Java) and one of the APIs to propose such transactions. The
    SDK will take care of packaging the transaction proposal in an architecture format
    (such as a protocol buffer over gRPC) and applies a user's private keys to add
    a digital signature to the transaction proposal.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，应用程序使用API生成交易提案。交易提案类似于对执行链码函数的请求，以便读取/更新分类账数据。在这里，应用程序使用SDK（Node、Python或Java）和API之一来提出这样的交易。SDK将负责将交易提案打包成一种架构格式（例如通过gRPC的协议缓冲区），并使用用户的私钥向交易提案添加数字签名。
- en: '**Endorsement** (**simulating the proposal**): The client application sends
    a *ledger-update-transaction* to the peers on the channel. Such peers are the
    endorsing peers. Note that a peer can be an endorser as well as a committer. At
    this stage, orderers'' nodes are not consulted and are not involved. The following
    are the steps involved:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '**背书**（**模拟提案**）：客户端应用程序向通道上的对等方发送一个*ledger-update-transaction*。这些对等方是背书同行。请注意，对等方既可以是背书者，也可以是提交者。在这个阶段，不会查询订单节点，也不会参与其中。涉及以下步骤：'
- en: The application generates a transaction proposal and sends it to the endorsing
    peers.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序生成交易提案并将其发送给背书同行。
- en: 'The channel will consult the endorsement policy to identify the endorsing peers
    and then route that transaction proposal request to the *chosen* endorsing peers:'
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通道将根据背书策略确定背书对等方，然后将该交易提案请求路由到*选择的*背书对等方：
- en: I have used the word **chosen**, since chaincode's endorsement policy will dictate
    whether all endorsing peers on a channel need to endorse a transaction proposal
    request.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了“**选择**”这个词，因为链码的背书策略将决定通道上的所有背书对等方是否需要背书一个交易提案请求。
- en: Each endorsing peer has a local copy of the ledger and chaincode. They will
    execute the chaincode based on the transaction proposal request, and will generate
    a transaction proposal response.
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个背书对等方都有分类账和链码的本地副本。他们将根据交易提案请求执行链码，并生成一个交易提案响应。
- en: Each endorsing peer verifies that the transaction proposal is well formed and
    has not been submitted in the past.
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个背书对等方都会验证交易提案是否格式良好，并且以前未提交过。
- en: The submitter's signature is verified by the MSP and authorizations are checked
    to ensure that the client application is authorized to perform a transaction (read/write)
    on the channel. Policies such as the write policy are defined during channel creation
    and help to determine a user's entitlement to perform/submit transactions to a
    channel.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交者的签名由MSP验证，授权检查以确保客户应用程序有权限在通道上执行交易（读/写）。在通道创建期间定义诸如写策略之类的政策，并有助于确定用户执行/提交交易到通道的资格。
- en: Each endorser will generate a transaction proposal response. They will also
    sign the transaction proposal response with their private key (signing the response
    digitally). At this stage, there is *no* update to the ledger.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个背书者将生成一份交易提案响应。他们还将使用他们的私钥对交易提案响应进行签名（数字签名响应）。在这个阶段，帐本上*没有*任何更新。
- en: Each endorser will then send the proposal response to the application. For a
    transaction, the application will receive multiple proposal responses.
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，每个背书者将向应用程序发送提案响应。对于一个交易，应用程序将会收到多个提案响应。
- en: 'There may be inconsistency in the transaction proposal response sent to the
    application by various chosen endorsing peers, perhaps because different endorsing
    peers generated responses at different times, and the ledger state was different
    during those instances. In this case, the application can do the following:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于不同的背书对等方在不同的时间生成响应，并且在这些实例期间账本状态不同，因此应用程序发送的交易提案响应可能存在不一致性。在这种情况下，应用程序可以执行以下操作：
- en: Accept the responses to allow the transaction process to proceed to further
    steps
  id: totrans-441
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受响应以允许交易过程继续到更进一步的步骤
- en: Reject the response and terminate the transaction process
  id: totrans-442
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拒绝响应并终止交易过程
- en: Send another request for a more recent transaction proposal response
  id: totrans-443
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送另一个请求以获取更近期的交易提案响应
- en: Technically, each endorser will use the transaction proposal inputs as input
    arguments to the chaincode. Each endorser takes the transaction proposal, and
    executes the proposed transaction using the chaincode present. These chaincode
    executions will not result in ledger updates. They just simulate the transaction.
    The endorser, while simulating the transaction, will get a current list of keys
    and values (the current state of the ledger) and a simulated list of keys and
    values (the to-be state of the ledger), which will be written to the ledger. Hence,
    there are two sets of keys and values (read and write sets). These sets of values,
    along with the endorsing peer's signatures, are added to the proposal response
    sent to the SDK, which will further parse the payload for the applications to
    consume.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，每个背书者将使用交易提案输入作为链码的输入参数。每个背书者都将获取交易提案，并使用当前存在的链码执行提议的交易。这些链码执行不会导致账本的更新。它们只模拟交易。在模拟交易的同时，背书者将获取一个键和值的当前列表（账本的当前状态）和一个模拟的键和值列表（账本的即将更新状态），这将被写入账本。因此，有两组键和值（读集和写集）。这些值集，连同背书对等方的签名，被添加到发送给SDK的提案响应中，SDK将进一步解析负载以供应用程序消费。
- en: '**Packaging the proposal response**: The client application will receive endorsements
    from all the endorsers and, upon accepting the transaction proposal response,
    will send it to the orderer''s nodes:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '**打包提案响应**：客户应用程序将收到所有背书者的背书，并在接受交易提案响应后将其发送到订购者节点：'
- en: From an orderer's node perspective, many applications will send it their respective
    transaction proposal responses.
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从订购者节点的角度看，许多应用程序将向其发送各自的交易提案响应。
- en: 'Orderers will sequence and package those transactions in blocks. It is these
    blocks that are the blocks in blockchain:'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订购者将把这些交易排序并打包成区块。这些区块就是区块链中的区块：
- en: Orderers will wait for a certain amount of time to package all transactions
    within that time frame into a block, or, if the desired size of the block is satisfied,
    then the block will be ready for distribution.
  id: totrans-448
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订购者将等待一定时间，将该时间段内的所有交易打包成一个区块，或者如果满足了期望的区块大小，则该区块将准备好进行分发。
- en: Orderers also don't have a local copy of the chaincode and, hence, they don't
    refer to chaincode (being judgmental) in defining blocks.
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订购者也没有链码的本地副本，因此，他们在定义区块时不参考链码（做出评判）。
- en: '**Note**: In HLF, the ordering of transactions is not important. However, whatever
    sequence they are added to the block in, they will be executed in that order.'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注意**：在HLF中，交易的顺序并不重要。但是，无论它们以何种顺序被添加到块中，它们都将按照那个顺序被执行。'
- en: '**Note**: A transaction in HLF is only present in **one** block, and not in
    multiple blocks. This means a transaction''s position in the block is final and
    is assured at this stage.'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注意**：HLF 中的交易只存在于**一个**区块中，而不是多个区块。这意味着交易在区块中的位置是最终确定的，并在此阶段得到了保证。'
- en: Technically, each endorser will return its signed endorsement back to the client
    (through the SDK). We know that the endorser has obtained read and write set(s).
    These read and write sets are part of the signed proposal.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，每个背书者都会将其签署的背书返回给客户端（通过 SDK）。我们知道背书者已经获取了读取和写入集合。这些读取和写入集合是签署提案的一部分。
- en: '**Verify and send for ordering**: The client application will again participate
    in the transaction flow and will perform two activities—verify the proposal response
    and, for a *ledger-update-transaction*, the client will connect with an ordering
    service for further processing.'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '**验证并发送进行排序**：客户端应用程序将再次参与交易流程，并执行两项活动——验证提案响应，并且对于*账本更新交易*，客户端将连接到排序服务进行进一步处理。'
- en: '**Verify the proposal response**:The client application will verify the proposal
    response:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '**验证提案响应**：客户端应用程序将验证提案响应：'
- en: If it was just a *ledger-query-transaction*, the client application will verify
    the proposal response and will collect its responses. It will not send it on to
    ordering services.
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果只是一个*账本查询交易*，客户端应用程序将验证提案响应并收集其响应。它将不会将其发送给排序服务。
- en: 'If it is a *ledger-update-transaction*, then the application will verify whether
    all the endorsing peers, as specified in the endorsing policy, have endorsed the
    transaction, and whether they are all valid. The sequence is as follows:'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这是一个*账本更新交易*，那么应用程序将验证背书策略中指定的所有背书对等体是否已经对交易进行了背书，并且它们是否都是有效的。序列如下：
- en: The client application will first verify the endorsing peer signatures
  id: totrans-457
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端应用程序将首先验证背书对等体的签名
- en: Then, it compares the proposal responses from each of the endorsing peers to
    check whether the proposal responses are the same
  id: totrans-458
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，它比较每个背书对等体的提案响应，检查提案响应是否相同。
- en: Even if the client application chooses not to inspect the proposal response,
    the endorsement policy will still be executed by the peers and will be used in
    the final commit of the transactions.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 即使客户端应用程序选择不检查提案响应，背书策略仍将由对等体执行，并将在交易最终提交时使用。
- en: '**Send for ordering****: **At this stage, the client application sends the
    transaction message as a bundle (transaction proposal and a response) to the ordering
    service. This transaction message contains the following:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '**发送进行排序**：在此阶段，客户端应用程序将交易消息作为一个捆绑包（交易提案和一个响应）发送到排序服务。这个交易消息包含以下内容：'
- en: The two sets of keys and values (read and write sets)
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两组键和值（读和写集）
- en: The signatures of the endorsing peers
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**背书对等体的签名**'
- en: The channel ID for which the transaction is meant to be committed
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交易要提交到的通道 ID
- en: Referring to the preceding diagram, **O5** and **O1** are orderers, and they
    are configured for **Channel-C1**. Hence, transaction messages meant for **C1**
    will be broadcast to the **O5** and **O1** orderers. They will sequence the transaction
    message, order them, and create blocks of those transactions.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 参考前面的图表，**O5** 和 **O1** 是排序者，它们配置了**Channel-C1**。因此，为**C1**准备的交易消息将被广播到**O5**和**O1**排序者。它们将对交易消息进行排序、排序并创建这些交易的区块。
- en: Technically, the ordering service receives such transaction messages from all
    the channels to which it is connected and configured. The ordering service will
    sequence and order these transactions (chronologically by channel) and will create
    transaction blocks (per channel). Orderers will never create a transaction, and
    will ensure that they offer guaranteed delivery. The orderer's class offers capabilities
    for the client applications to interact with the orderer's nodes. The orderer's
    nodes have two exposed APIs—`broadcast ()` and `deliver ()`, and its bidirectional
    streaming API with a gRPC streaming connection between the client application
    and orderers. The `broadcast()` API enables clients to send transaction messages
    to orderers, and the `deliver()` API allows clients/consumers to check with orderers
    regarding channel information and channel configurations.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 技术上，订购服务从其连接和配置的所有渠道接收此类交易消息。订购服务将对这些交易进行排序和排序（按渠道按时间顺序），并创建交易区块（每个渠道）。订购者永远不会创建交易，并确保它们提供了可靠的交付。订购者类提供了客户端应用与订购者节点进行交互的功能。订购者节点具有两个公开的API——`broadcast()`和`deliver()`，以及其在客户端应用程序和订购者之间具有双向流的gRPC流连接的API。`broadcast()`
    API使客户能够将交易消息发送到订购者，而`deliver()` API允许客户/消费者查询有关通道信息和通道配置的信息。
- en: '**Distribution**: At this stage of the transaction process, orderers will distribute
    the block to peers. Peers are connected to orderers in the blockchain network.
    Orderers will distribute the block to each connected peer via P2P communication
    based on gossip protocol.'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '**分发**：在交易过程的这个阶段，订购者将区块分发给对等节点。对等节点连接到区块链网络中的订购者。订购者将通过基于八卦协议的P2P通信将区块分发给每个连接的对等节点。'
- en: '**Gossip protocol**: I would like to talk a little bit about the gossip protocol
    here, as distribution is the stage where the gossip protocol is used. Orderers
    need to distribute the transaction message to all peers. However, it is a burden
    to orderers and it sounds almost impossible to reach all the peers when a network
    is huge in size. The HLF framework has a solution for this. Orderers do not deliver
    messages to each peer. Orderers only deliver messages to peers that are configured
    as leader peers. For each organization, on a channel, there is a leader peer identified.
    Those leader peers will distribute those messages to other peers and suchlike.
    Peers then forward these messages to a randomly selected number of peers. This
    random number of peers is predetermined, and this forwarding continues until the
    message reaches all the peers. This entire process is defined as a broadcast,
    and the broadcast process relies on the gossip protocol to distribute transaction
    messages.'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '**八卦协议**：我想在这里稍微谈谈八卦协议，因为分发是使用八卦协议的阶段。订购者需要将交易消息分发给所有对等节点。然而，对订购者来说这是一个负担，而且在网络规模庞大时几乎不可能达到所有对等节点。HLF框架为此提供了解决方案。订购者不会将消息传递给每个对等节点。订购者只会将消息传递给配置为领导对等节点的对等节点。对于每个组织，在通道上，有一个确定的领导对等节点。这些领导对等节点将这些消息分发给其他对等节点等。然后对等节点将这些消息转发给随机选择的一些对等节点。这个随机的对等节点数量是预先确定的，此转发过程将持续，直到消息达到所有对等节点。整个过程被定义为广播，广播过程依赖于八卦协议来分发交易消息。'
- en: Broadcast is a push method to distribute messages. However, peers use pull methods
    to remain up to date if they are reincarnated from a *dead* to an *alive* status.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 广播是一种推送消息的方法。然而，如果对等节点从*死亡*状态转变为*活动*状态，则对等节点使用拉取方法保持最新。
- en: '**Peer bootstrapping**: We just read that peers send messages to a predefined
    or predetermined list of peers. How does this determination happen? This happens
    via peer bootstrapping (also known as bootstrapping). When the blockchain network
    is established, each peer gets a bootstrap set of peers. After that, peers check
    for the *alive* status of the peer. If the bootstrap peer is *dead*, it will mark
    it as dead. However, it will check periodically whether it''s alive/dead. If a
    peer is dead, and later becomes alive, it will have missed messages from the broadcast
    process. Hence, to get up to date, that peer will pull information, such as membership
    data (the *alive* and *dead* status of peers) and ledger data (blocks of transactions).'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '**节点引导**：我们刚刚提到节点向预定义或预定的节点列表发送消息。这个确定是如何发生的呢？这通过节点引导（也称为引导）完成。当区块链网络建立时，每个节点都获得一组引导节点。之后，节点会检查节点的*存活*状态。如果引导节点*死了*，它将标记为死亡。但是它会定期检查节点是否*存活/死了*。如果一个节点死了，而后变得存活，它会错过广播过程中的信息。因此，为了获取最新信息，该节点将拉取信息，例如成员数据（节点的*存活*和*死了*状态）和账本数据（交易的区块）。'
- en: '**Validation** **and tagging**: At this stage of the transaction process, peers
    will receive blocks from the orderers. They will validate them and tag them as
    valid or invalid:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '**验证**与**标记**：在交易过程的这一阶段，节点将从订购方接收区块。他们将对其进行验证并标记为有效或无效：'
- en: The peer will pick and process transactions from the block. The order of picking
    and executing transactions is the same order in which transactions are sequenced
    by the orderers. Peers do not execute chaincode for this step. Chaincode is only
    executed at the endorsement stage, which corroborates the fact that chaincode
    should only exist on endorsing nodes.
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点将选择并处理区块中的交易。选择和执行交易的顺序与订购方对交易排序的顺序相同。节点在此步骤不执行链码。链码仅在背书阶段执行，从而证实链码应该仅存在于背书节点上。
- en: When processing a transaction, each peer will verify that the transaction was
    endorsed according to the endorsement policy defined in the chaincode, which actually
    generated this transaction. This ensures that all the organizations that are meant
    to endorse a transaction have endorsed it, and have generated the same output.
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理交易时，每个节点都会验证交易是否按照链码中定义的背书策略正确背书，这实际上是由生成此交易的链码生成的。这确保了所有应该背书交易的组织都已经进行了背书，并生成相同的输出。
- en: 'If it is verified, this means that it was endorsed correctly, and then the
    following happens:'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 若验证通过，则表示正确背书，随后发生以下情况：
- en: The peer performs a consistency check. This check is to verify whether the current
    ledger state is compatible with the state of the ledger when the peer generated
    the transaction proposal update. If it is consistent, then the transaction is
    marked as valid. If it is not consistent, then it is not applied and the transaction
    is marked invalid and defined as a *failed* transaction. For example, a digital
    asset against which a transaction was proposed and a proposal response was generated
    was updated by another transaction. In this case, the state of the ledger at proposal
    response time and consistency time are different and, hence, it cannot be applied
    and is therefore marked as *failed*.
  id: totrans-474
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点执行一致性检查。此检查是为了验证当前账本状态是否与节点生成交易提案更新时的账本状态兼容。如果一致，则交易被标记为有效。如果不一致，则不被应用，并且交易被标记为无效，定义为一笔*失败*交易。例如，对一项数字资产提出了交易，生成了提案响应，并且由另一笔交易更新了。在这种情况下，提案响应时的账本状态和一致性时的账本状态不同，因此无法应用，因此被标记为*失败*。
- en: 'Once a peer validates all the transactions in the block, then all the transactions
    in the block that are not failed are committed to the ledger:'
  id: totrans-475
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦节点验证了区块中的所有交易，那么区块中所有未失败的交易都会提交到账本：
- en: Failed transactions are not committed to the ledger, yet they are considered
    successful and are available for audit.
  id: totrans-476
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败的交易不会提交到账本，但被视为成功并可用于审计。
- en: Technically, each peer will append the block to the chain of the channel, and
    only valid transactions are appended to the peer's local copy of the ledger (it's
    an append to the current world state).
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，每个节点将区块追加到通道的链中，并且只有有效的交易被追加到节点本地账本的副本中（即追加到当前世界状态）。
- en: '**Notifications**: When a block gets committed to the ledger, peer, and chaincode,
    it generates the following events:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '**通知**：当区块提交到账本、节点和链码时，会生成以下事件：'
- en: 'The peers and chaincode generate the following events:'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对等方和链码生成以下事件：
- en: '**A peer generates**: A block event and a transaction event. A block event
    contains the entire block content, while a transaction event highlights whether
    a transaction was validated or invalidated (marked as *failed*).'
  id: totrans-480
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对等方生成**：区块事件和交易事件。区块事件包含整个区块内容，而交易事件突出显示了交易是否被验证或无效（标记为*失败*）。'
- en: '**Chaincode generates**: A chaincode event.'
  id: totrans-481
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链码生成**：链码事件。'
- en: Applications can subscribe to interesting events and can receive notifications.
    These notifications help applications to know about the final stage of the transaction.
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序可以订阅感兴趣的事件并接收通知。这些通知帮助应用程序了解交易的最终阶段。
- en: The transaction flow defined previously clearly displays various participants
    involved in the transaction, from client applications to endorsers, orderers,
    committers, and leaders. This section also clearly highlights the powerful role
    of orderers in the blockchain network. Each peer validates the transaction and
    follows the sequence and order defined in the block by the orderers. Hence, it
    is the orderers that ensure consistency in the blockchain network. In addition,
    it ensures that the position of the transaction in the block never gets changed
    and, hence, induces immutability to the ledger in the blockchain network. If you
    re-read the transaction process defined previously, it is evident that all peers
    agree about the transactions and their contents. Orderers mediate this agreement
    process, which is called a consensus.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 先前定义的交易流程清晰地展示了涉及交易的各个参与者，从客户端应用程序到背书人、排序器、提交者和领导者。本节还清楚地突出了排序器在区块链网络中的强大作用。每个对等方都会验证交易，并按照排序器在区块中定义的顺序和顺序进行操作。因此，排序器确保区块链网络的一致性。此外，它确保交易在区块中的位置永远不会改变，并因此为区块链网络中的账本引入不可变性。如果重新阅读先前定义的交易过程，可以明显地看出所有对等方都同意交易及其内容。排序器调节此协议过程，称为共识。
- en: Large object storage – on-chain or off-chain
  id: totrans-484
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大对象存储 - 在链上或链外
- en: This section discusses the storage of large objects on or off the blockchain
    network. This section is part of the design strategy. However, it was more relevant
    to position this topic here, as it is an extension of PDC and helps to realize
    it.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了在区块链网络上或链外存储大对象。本节是设计策略的一部分。然而，将此主题定位在这里更为相关，因为它是 PDC 的延伸并有助于实现它。
- en: Rationale for on-chain/off-chain architecture
  id: totrans-486
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链上/链外架构的原理
- en: Data storage and retrieval is at the heart of blockchain, where assets, accounts,
    permissions, and transactions are treated as data. But what about documents such
    as evidence files, X-rays, image scans, videos, and legal contract documents in
    PDF form? Where should a blockchain application store these documents? What is
    the architecturally correct approach to storing documents? This chapter will discuss
    document storage approaches and how blockchain properties, such as immutability,
    can be preserved even for off-chain storage.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链的核心是数据存储和检索，其中资产、账户、权限和交易被视为数据。但是对于诸如证据文件、X 光、图像扫描、视频和 PDF 格式的法律合同文件等文档呢？区块链应用应该把这些文档存储在哪里？存储文档的正确方法是什么？本章将讨论文档存储方法以及如何保留区块链属性（如不可变性），即使是在链外存储的情况下也可以实现。
- en: There are arguments for storing images, PDF files, and other objects on-chain
    as part of the payload of a blockchain transaction. The reasons for doing so are
    to ensure that non-repudiation and immutability apply to these objects as they
    apply to any other blockchain data. If you store documents off-chain and simply
    include URLs or other reference information, there's a possibility and risk of
    tampering. Of course, images can be encrypted in off-chain storage. However, the
    possibility of undetected tampering exists, as does reliance on a centralized
    third party managing the documents.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 有论点认为，将图像、PDF 文件和其他对象存储在链上作为区块链交易的一部分是有益的。这样做的原因是确保与任何其他区块链数据一样，不可否认性和不可变性也适用于这些对象。如果将文档存储在链外，并且仅包括
    URL 或其他参考信息，则存在篡改的可能性和风险。当然，可以在链外存储中对图像进行加密。然而，存在未被检测到的篡改可能性，以及对管理文档的集中化第三方的依赖。
- en: 'The arguments against directly storing images and large files on-chain relate
    to significantly impacting performance due to large transaction payloads. There
    are three areas of concern to consider:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 直接将图像和大文件存储在链上的反对意见涉及到由于大交易负载而对性能产生显著影响。有三个值得考虑的方面：
- en: Network latency, as large (multiple MB or even GB) payloads have to be sent
    across the network to multiple participants
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络延迟，因为需要将大型（多个 MB 或甚至 GB）的负载发送到多个参与者的网络上
- en: Compute costs, as digital signature hashes of these message payloads have to
    be computed when signing the message and verified when the message is received
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算成本，因为在签署消息时必须计算这些消息负载的数字签名哈希，并在接收消息时验证。
- en: The cost of TLS channel encryption when sending the messages
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送消息时的 TLS 通道加密成本
- en: Storage costs, as blocks containing large transactions are stored across multiple
    blockchain nodes
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储成本，因为包含大型交易的区块存储在多个区块链节点上
- en: In short, the performance and cost impacts of including large objects in transaction
    payloads should be a significant consideration in the design of your blockchain
    application. There are also potential confidentiality concerns that might apply,
    particularly in regulated contexts, such as US **Health Insurance Portability
    and Accountability Act** (**HIPAA**) regulations for healthcare data, EU GDPR for
    **personally identifiable information** (**PII**), and similar regulations in
    many countries. Even though, in permissioned enterprise blockchain stacks such
    as HLF, the scale of the network in terms of the number of peers is smaller, and
    compute power, network bandwidth, and storage might be more readily available,
    thus making the acceptable payload size higher, confidentiality concerns tend
    to be even greater due to the nature of enterprise applications.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，在设计区块链应用程序时，将大型对象包含在交易负载中的性能和成本影响应该是一个重要考虑因素。还可能存在潜在的保密性问题，特别是在受监管的情境中，例如美国**健康保险可移植性和责任法案**（**HIPAA**）对医疗数据的规定，欧盟《通用数据保护条例》对**个人身份信息**（**PII**）的规定，以及许多国家的类似法规。尽管在像
    HLF 这样的许可企业区块链堆栈中，网络规模（以对等体数量为单位）、计算能力、网络带宽和存储可能更易获得，从而使可接受的负载大小更高，但由于企业应用的性质，保密性问题往往更加突出。
- en: Ultimately, the answer will depend on the use case, the nature of the data being
    shared, and empirically determined performance impacts for a certain payload size.
    While, with HLF and Oracle Blockchain Platform, it is technically possible to
    store documents on-chain, let's compare this with similar arguments about whether
    to store documents in a relational database.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，答案将取决于用例、共享数据的性质以及经验确定的特定负载大小的性能影响。虽然在 HLF 和 Oracle 区块链平台上技术上可以将文档存储在链上，但让我们将其与是否将文档存储在关系数据库中的类似论点进行比较。
- en: A database primarily stores text strings, numbers, and date values. Using `int`
    or `float` data types will let you store numbers, `var` and `varchar` will allow
    you to store string and text, and a `blob` type column (binary large object) will
    allow you to store binary objects, such as images, or document files, such as
    PDFs or others. However, the key purpose of the database is to provide quick and
    performant insertion, retrieval, and data management. While you can store blobs
    in a database for convenience, storing documents off-database has numerous advantages.
    Performance is superior multi-fold when the documents are stored off-database,
    since the storage and the retrieval of a document from the filesystem is far more
    performant than a database. In fact, some databases handle blobs by storing them
    in a filesystem with only relevant pointer and metadata information in the actual
    database column, and implement this under the hood of actual database storage
    functions so that it's completely transparent to database users and applications.
    However, there is still some added cost, and so, in some cases, it may be better
    for applications to handle file storage off-database directly.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库主要存储文本字符串、数字和日期值。使用`int`或`float`数据类型将允许您存储数字，`var`和`varchar`将允许您存储字符串和文本，而`blob`类型列（二进制大对象）将允许您存储二进制对象，例如图像，或文档文件，例如
    PDF 或其他文件。然而，数据库的主要目的是提供快速和高性能的插入、检索和数据管理。虽然您可以为了方便将 blob 存储在数据库中，但将文档存储在数据库之外有许多优点。当文档存储在数据库之外时，性能要优于数据库多倍，因为从文件系统存储和检索文档的速度比从数据库检索要快得多。事实上，一些数据库通过将
    blob 存储在文件系统中，并在实际数据库列中仅存储相关指针和元数据信息，并在数据库存储函数的内部实现中处理这些内容，使其对数据库用户和应用程序完全透明。然而，这仍然会增加一些成本，因此，在某些情况下，直接处理文件存储可能更好。
- en: Coming back to the blockchain, sharing images and files as part of the blockchain
    transaction payloads raises various limitations, such as bandwidth, latency (to
    store and retrieve images), the duplication of information among various nodes,
    and burdening the consensus process due to the large size of the blocks. In fact,
    due to the distributed and replicated nature of the blockchain architecture and
    the critical dependency on network latency and PKI encryption (used for digital
    signatures and their verification), the argument against burdening the blockchain
    with large-size images and documents is even stronger than one against doing so
    with database blobs. So, the argument ultimately is not about whether to store
    documents on-chain, but about the size limits when it becomes necessary, and application
    considerations to ensure that on-chain and off-chain storage are consistent and
    that the application can still benefit from non-repudiation and immutability properties,
    even when off-chain storage is used.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到区块链，将图像和文件作为区块链交易负载的一部分共享引发了各种限制，例如带宽、延迟（存储和检索图像所需的时间）、在各个节点之间重复信息以及由于区块大小的增大而给共识过程带来的负担。实际上，由于区块链架构的分布式和复制性质以及对网络延迟和
    PKI 加密（用于数字签名及其验证）的关键依赖，反对在区块链上存储大尺寸图像和文档的论点甚至比反对在数据库 BLOB 上这样做的论点更加强有力。因此，论点最终不在于是否在链上存储文档，而在于当有必要时的尺寸限制以及应用考虑因素，以确保链上和链下存储一致，并且应用仍然可以从不可否认性和不可变性属性中获益，即使使用链下存储时也是如此。
- en: In the HLF transaction flow, a transaction payload is signed by the client and
    sent to one or more peer nodes to be executed. After delivering the payload to
    chaincode execution containers, peer nodes capture the **read-write sets** (**RWSets**)
    of the chaincode, which will include the objects from the payload if they are
    to be stored on-chain. The RWSets are then signed by the peers, which involves
    calculating hashes over the data, and are sent to the client. The client has to
    verify the signatures, and, in the case of multiple endorsers, compare the results
    to ensure they match. Then, an encrypted result and all the signatures are sent
    to the ordering service, where the messages are stored in Kafka topics. **Ordering
    service nodes** (**OSNs**) then have to reach a consensus on sequencing these
    transaction messages into blocks, which are sent to the peer nodes for transaction
    validation and ledger updates. Peer nodes go through each transaction, validating
    the signatures of the other endorsers, and verifying versions of all read-set
    data fields against those in the current world state database before declaring
    the transaction valid, appending the block to the ledger, and updating the world
    state database with the write-set values.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HLF 事务流程中，客户端签署事务负载并将其发送到一个或多个对等节点以执行。将负载传递到链码执行容器后，对等节点会捕获链码的**读写集**（**RWSets**），如果它们要被存储在链上，则包括来自负载的对象。然后，对等节点对
    RWSets 进行签名，这涉及对数据进行哈希计算，并将其发送到客户端。客户端必须验证签名，并在存在多个背书人的情况下，比较结果以确保它们匹配。然后，加密结果和所有签名被发送到排序服务，在那里消息被存储在
    Kafka 主题中。**排序服务节点**（**OSNs**）随后必须就将这些交易消息定序到块中达成共识，这些块被发送到对等节点以进行交易验证和分类帐更新。对等节点会逐个处理每个交易，验证其他背书人的签名，并在声明交易有效之前将所有读取集数据字段的版本与当前世界状态数据库中的值进行比对，然后将块附加到分类帐，并使用写入集的值更新世界状态数据库。
- en: Since, on a blockchain network, multiple parties (client, peer nodes, and OSNs)
    need to ensure that a transaction is accurate and valid, and reach a consensus,
    any transaction that involves storing images or documents on-chain will slow down
    the blockchain network. All the message transfers, storage and retrieval, signing
    and signature verification operations, and field validations will also consume
    significant resources from participating nodes.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在区块链网络中，多个参与方（客户端、对等节点和 OSN）需要确保交易准确和有效，并达成共识，任何涉及在链上存储图像或文档的交易都会减慢区块链网络的速度。所有的消息传输、存储和检索、签名和签名验证操作以及字段验证也会消耗参与节点的大量资源。
- en: Key design principles
  id: totrans-500
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键设计原则
- en: What options and approaches are recommended to address these limitations? How
    can it be ensured that documents remain immutable and that non-repudiation still
    applies even when documents are stored off-chain? A fundamental best practice
    is for applications to capture an immutable document hash, which essentially fingerprints
    the document, storage location (a URL in a content management system, object store,
    and suchlike), and related metadata, including the timestamp, user credentials,
    and version number. This data then becomes a document record, which can be stored
    on-chain, even as the document itself is stored off-chain. The document record
    is immutable, and the document hash it contains can be used to verify the integrity
    of the document or image object when these are retrieved from the off-chain storage.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 什么选项和方法建议用于解决这些限制？如何确保文档保持不可变，即使文档存储在链外时仍然适用不可否认？一个基本的最佳实践是应用程序捕获不可变文档哈希，它基本上是对文档、存储位置（内容管理系统中的
    URL、对象存储等）、以及相关元数据（包括时间戳、用户凭证和版本号）的指纹。然后，这些数据就成为一个文档记录，可以存储在链上，即使文档本身存储在链外。文档记录是不可变的，其中包含的文档哈希可用于在从链外存储中检索这些文档或图像对象时验证文档的完整性。
- en: 'The other important practices to apply in this on-chain/off-chain design pattern
    are the following:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种链上/链下设计模式中应用的其他重要实践如下：
- en: Ensure that you have received a confirmation that the document has been stored
    successfully off-chain before updating the document record on-chain
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将文档记录更新到链上之前，请确保已收到文档成功存储到链外的确认。
- en: When retrieving the document, first retrieve the document record from the blockchain,
    use the location information to retrieve the document itself, and then calculate
    and verify its hash against the hash included in the blockchain record
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检索文档时，首先从区块链检索文档记录，使用位置信息检索文档本身，然后计算并验证其哈希与包含在区块链记录中的哈希是否相符。
- en: While it's possible to handle these tasks in a client application, it would
    be more beneficial to use an off-chain storage solution that provides built-in
    anchoring to the blockchain; that is, a solution that automatically creates and
    updates records on the blockchain whenever any document is created, accessed,
    updated, or deleted. Depending on the nature of the documents, this could be a
    specific content management/document storage solution, or a generic object store
    solution providing undifferentiated blob storage in its containers. Thus, transactions
    that involve off-chain documents would be handled by this storage solution, which,
    in turn, would create immutable document records on-chain. This leverages the
    immutability of the blockchain network using small document records, while documents
    themselves are stored off-chain in the document storage service.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以在客户端应用程序中处理这些任务，但更有利的是使用一个提供内置到区块链的锚定的离链存储解决方案；也就是说，一个解决方案，每当创建、访问、更新或删除任何文档时都会自动在区块链上创建和更新记录。根据文档的性质，这可以是一个特定的内容管理/文档存储解决方案，或者是一个提供容器中未差异化的
    blob 存储的通用对象存储解决方案。因此，涉及离链文档的交易将由这个存储解决方案处理，而这个存储解决方案将在链上创建不可变文档记录。这利用了区块链网络的不可变性，使用小型文档记录，而文档本身则存储在文档存储服务中。
- en: Integrated blockchain – an anchored document storage solution
  id: totrans-506
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成区块链——锚定的文档存储解决方案
- en: Blockchain anchoring would be beneficial for documents such as ownership titles,
    educational certificates, regulatory compliance reports, contracts, physically
    signed or notarized documents, purchase orders, invoices with tax implications,
    bills of lading and other shipping materials, and trade agreements.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链锚定对于所有权证书、教育证书、合规性报告、合同、有或无实体签名的文件、采购订单、具有税务影响的发票、提单和其他运输材料以及贸易协议等文档将是有益的。
- en: Storing document records, including the cryptographic hash, location, and other
    metadata, on a blockchain network would complement typical document storage/content
    management features, such as versioning, searching, tracing documents, and document-level
    access control.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链网络上存储文档记录，包括加密哈希、位置和其他元数据，将补充典型的文档存储/内容管理功能，如版本控制、搜索、跟踪文档和文档级访问控制。
- en: Such a **Blockchain-anchored-Document-as-a-Service** (**BaDaaS**) would manage
    two types of artifacts—an actual document or image file stored off-chain, and
    document attributes, such as a unique document ID, content hash, document version,
    and other metadata, recorded and posted to a blockchain network as an immutable
    record. Any activity that involves these off-chain documents will be stored on-chain
    as a blockchain transaction, while related document attributes will be stored
    as its payload on-chain.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的**区块链锚定文档作为服务**（**BaDaaS**）将管理两种类型的工件：存储在链下的实际文档或图像文件，以及文档属性，如唯一的文档ID、内容散列、文档版本和其他元数据，记录并发布到区块链网络上作为不可变记录。涉及这些链下文件的任何活动都将作为区块链交易存储在链上，而相关的文档属性将作为其载荷存储在链上。
- en: 'Essentially, BaDaaS offers the following types of API:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，BaDaaS提供以下类型的API：
- en: An API to upload a document by invoking a `POST` call, or replace a document
    with a new version by means of a `PUT` call. Each folder or container could be
    mapped to a separate blockchain channel for sharding purposes.
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用`POST`进行文档上传的API，或者通过`PUT`进行新版替换的API。为了分片目的，可以将每个文件夹或容器映射到一个单独的区块链通道上。
- en: An API to retrieve documents using `GET` APIs, which allow authenticated users
    to download or view the document, but only after its hash has been verified against
    the one stored in the blockchain record.
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个用于使用`GET` API检索文档的API，允许经过身份验证的用户下载或查看文档，但只有在其散列已在区块链记录中进行验证后才能进行。
- en: An API to retrieve the document history based on the blockchain transaction
    history, with all the relevant versions and other metadata changes, timestamps,
    user identities, and so on.
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于区块链交易历史检索文档历史的API，包括所有相关版本和其他元数据更改、时间戳、用户身份等。
- en: An API to retrieve metadata for the latest version and verify that the document
    content matches the hash stored on the blockchain without downloading the document
    itself.
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个用于检索最新版本的元数据并验证文档内容是否与存储在区块链上的散列匹配，而无需下载文档本身的API。
- en: APIs for managing access permissions and granting new ones. These changes should
    also be stored on-chain to ensure their immutability as a series of **access control
    list** (**ACL**) records linked to the document records via a document ID.
  id: totrans-515
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于管理访问权限并授予新权限的API。这些更改还应存储在链上，以确保它们作为一系列与文档记录通过文档ID相关联的**访问控制列表**（**ACL**）记录的不可变性。
- en: This is an example of an approach that would solve the on-chain/off-chain storage
    requirements for certain classes of use cases. It would not burden the blockchain
    with large-size payloads, but would, at the same time, ensure that document integrity
    and transaction history is maintained on-chain in an immutable manner.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种方法示例，可解决某些用例的链上/链下存储需求。它不会使区块链负担过大的负载，但同时，会以一种不可变的方式在链上维护文档完整性和交易历史。
- en: So far, we've discussed large unstructured objects, such as binary image data,
    and PDF files. Could this be applied to large-size structured documents? For example,
    in supply chain collaboration demand forecast and planning, documents can contain
    hundreds of MBs of structured data, which is impractical to share as a payload
    of blockchain transactions. The good news is that an approach similar to the one
    described previously with unstructured documents can be used. Only selected data
    is extracted for blockchain records, and the entire document is hashed to ensure
    that its integrity can be verified on the other end. The documents can be transferred
    using traditional means (for example, EDI, and B2B file transfer) but, on both
    ends of the transfer, the blockchain is used to store (when sending) and retrieve
    and verify (when receiving) the relevant metadata fields, including using the
    hash to verify the integrity of the transferred document.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了大量的非结构化对象，如二进制图像数据和PDF文件。这种方法能够应用于大型结构化文档吗？例如，在供应链协作需求预测和计划中，文档可能包含数百MB的结构化数据，这是不实际作为区块链交易负载进行共享的。好消息是，可以使用类似于前述的非结构化文档的方法。只有选择的数据被提取用于区块链记录，整个文档被散列以确保其完整性可以在另一端验证。文档可以使用传统方式传输（例如EDI和B2B文件传输），但在传输的两端，区块链被用于存储（发送时）和检索和验证（接收时）相关的元数据字段，包括使用散列验证传输文档的完整性。
- en: Storage option selection for blockchain applications
  id: totrans-518
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块链应用的存储选项选择
- en: 'An enterprise can opt for one of the following options to store documents off-chain:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 企业可以选择以下选项之一将文档存储在链下：
- en: A relational or document database—on-premise or in a cloud (for example, Oracle
    or MongoDB)
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关系型或文档数据库——在本地或云端（例如，Oracle 或 MongoDB）
- en: A document management or content management system (for example, Oracle Content
    and Experience Cloud)
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文档管理或内容管理系统（例如，Oracle 内容和体验云）
- en: A distributed filesystem (for example, NFS) or a distributed object store service
    (for example, Oracle Cloud Object Storage)
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个分布式文件系统（例如，NFS）或分布式对象存储服务（例如，Oracle 云对象存储）
- en: A distributed database (for example, Apache Cassandra wide-column NoSQL database)
  id: totrans-523
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个分布式数据库（例如，Apache Cassandra 宽列 NoSQL 数据库）
- en: A P2P filesharing network (for example, **InterPlanetary File System** (**IPFS**)
    or Storj)
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个 P2P 文件共享网络（例如，**星际文件系统**（**IPFS**）或 Storj）
- en: This section is not intended to constitute a detailed review of each of these
    data storage solutions, but rather a guide to evaluating them as an off-chain
    storage solution for blockchain applications. To begin with, you can store documents
    or image data in a traditional database, such as Oracle, or a NoSQL database,
    such as MongoDB, which offers stronger query capabilities and a lower cost; however,
    it comes with low transparency, a single point of failure, and the strong presence
    of a central authority.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 本节旨在不对这些数据存储解决方案进行详细审查，而是作为评估它们作为区块链应用的离链存储解决方案的指南。首先，您可以将文档或图像数据存储在传统数据库中，例如
    Oracle，或者 NoSQL 数据库中，例如 MongoDB，后者提供更强大的查询功能和更低的成本；然而，它带来了低透明度、单点故障以及中央权威的强烈存在。
- en: Document or content management systems provide additional capabilities specifically
    tailored to documents—such as folder structure, versioning capabilities, document-centric
    access control, UIs, REST APIs that are tailored for working with documents, and
    suchlike. However, they have similar drawbacks as databases in terms of being
    a centralized solution with a single point of failure. When deployed in a cloud
    environment, single points of failure can be mitigated by appropriate design.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 文档或内容管理系统提供了针对文档的额外功能——例如文件夹结构、版本控制功能、面向文档的访问控制、用户界面、专为处理文档而设计的 REST API 等等。然而，它们与数据库类似，存在单点故障的问题。在云环境中部署时，可以通过适当的设计来减轻单点故障的影响。
- en: Distributed filesystems or object storage provide other options, which are more
    barebones and cheaper, and better suited to storing images and other binary objects
    than actual documents. Note that while these can provide asynchronous distribution
    to avoid a single point of failure, the latency associated with the asynchronous
    replication of the stored data needs to be considered when deciding whether to
    submit a blockchain transaction when the object has been stored initially, or
    wait until it's been replicated. The answer will likely depend on a use case and
    the ability to deal with various failure modes.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式文件系统或对象存储提供了其他选择，这些选择更简单且更便宜，更适合存储图像和其他二进制对象，而不是实际文档。请注意，虽然这些选项可以提供异步分发以避免单点故障，但在决定何时提交区块链事务时需要考虑存储数据的异步复制所带来的延迟，或者等待直到数据被复制。答案可能取决于使用情况和处理各种故障模式的能力。
- en: A distributed database, such as Cassandra, can have nodes that follow the topology
    of the blockchain and remove the centralization concern. Each Cassandra node can
    be co-located within a blockchain node. When a document is created or updated
    to a new version, the local Cassandra node is the first one to store it, and then
    it replicates to other nodes. The blockchain record update transaction can be
    submitted to the local node at the same time, but will eventually be available
    on other nodes as well. The key benefit of using a distributed database is the
    possibility to achieve local affinity between the database node and the blockchain
    node for updates and document retrieval. However, the replication in both Cassandra
    and blockchain operates under eventual consistency rules, but at different speeds
    (considering that the document is likely much larger than the associated blockchain
    record) and with different failure modes that need to be taken into account.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式数据库，比如 Cassandra，可以具有遵循区块链拓扑结构并消除中心化担忧的节点。每个 Cassandra 节点可以与区块链节点位于同一位置。当文档被创建或更新为新版本时，本地
    Cassandra 节点是首先存储它的节点，然后将其复制到其他节点。区块链记录更新交易可以同时提交到本地节点，但最终也会在其他节点上可用。使用分布式数据库的关键好处是可以实现数据库节点与区块链节点之间的本地关联，用于更新和文档检索。然而，Cassandra
    和区块链中的复制都遵循最终一致性规则，但速度不同（考虑到文档可能比关联的区块链记录大得多），需要考虑不同的故障模式。
- en: A P2P file share network, such as IPFS, which evolved on the basis of P2P concepts
    from BitTorrent and Git, but which is built upon **DAG** (short for **directed
    acyclic graph**) architecture, enables the exchange of versioned objects in a
    decentralized network of storage nodes. Each object (file/document) has a hash—a
    unique signature/ID that's used as its address. IPFS retrieves objects based on
    their hashes—each node is asked to search for a file based on its hash. So, storing
    the IPFS hash together with a file hash and related metadata in a blockchain record
    provides the core anchoring capability we discussed earlier. IPFS offers historical
    versioning of the content and high availability across the network of nodes. Similar
    to Cassandra, IPFS provides a decentralized topology, though it is much more scalable
    since it is filesystem-based rather than a database. However, latency of distribution
    and potential failure modes still need to be accounted for in the application's
    design.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 基于比特币和 Git 的 P2P 概念演变而来的 P2P 文件共享网络，比如 IPFS，建立在**DAG**（即**有向无环图**）架构之上，使得分布式存储节点网络中的版本化对象可以进行交换。每个对象（文件/文档）都有一个哈希值——作为其地址的唯一标识/ID。IPFS
    根据哈希值检索对象——每个节点被要求根据其哈希值搜索文件。因此，在区块链记录中存储 IPFS 哈希值与文件哈希值及相关元数据提供了我们之前讨论过的核心锚定能力。IPFS
    提供内容的历史版本和网络节点的高可用性。与 Cassandra 类似，IPFS 提供了分散的拓扑结构，尽管它更具可伸缩性，因为它是基于文件系统而不是数据库的。然而，在应用程序设计中仍然需要考虑分发的延迟和潜在的故障模式。
- en: Summary
  id: totrans-530
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter focused on illustrating HLF, its architecture, and its components.
    During this chapter, we looked at the Hyperledger project and walked though the
    qualifiers for the Hyperledger project. This chapter followed an example-based
    approach in illustrating HLF's architecture. We explored peers, nodes, algorithms,
    consensus, the membership service, and orderer services, as well as master identity,
    security, and privacy. The chapter also construed channels and PDC to allow private
    transactions between organizations. It concluded with design strategies for storing
    large objects—on-chain or off-chain. From the next chapter onward, we will delve
    into creating an HLF network and authoring chaincode to address a specific use
    case.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了 HLF、其架构和组件。在本章中，我们研究了 Hyperledger 项目，并详细介绍了 Hyperledger 项目的资格标准。本章采用了基于示例的方法来阐述
    HLF 的架构。我们探讨了对等体、节点、算法、共识、成员服务、排序服务，以及主要身份、安全性和隐私性。本章还解释了通道和 PDC，以允许组织之间进行私人交易。最后，对存储大型对象的设计策略进行了总结——是在链上还是链下。从下一章开始，我们将深入探讨创建
    HLF 网络并编写链码以解决特定的应用场景。
