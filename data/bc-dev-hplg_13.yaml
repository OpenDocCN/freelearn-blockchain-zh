- en: Ethereum Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊基础知识
- en: Ethereum is an open source public blockchain and is considered to be an alternative
    coin to Bitcoin. A Canadian cryptocurrency researcher and programmer, Vitalik
    Buterin, proposed the idea in late 2013\. Founded by an online crowdsale that
    took place in the middle of 2014, the platform went live at the end of July 2015\.
    *The DAO* event in 2016 led to a hard fork, resulting in a split into **Ethereum**
    (**ETH**) and **Ethereum Classic** (**ETC**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊是一个开源的公共区块链，被认为是比特币的替代币。一位加拿大的加密货币研究员和程序员 Vitalik Buterin 在 2013 年底提出了这个想法。该平台于
    2014 年中期通过在线众筹成立，并于 2015 年 7 月底上线。2016 年的 *DAO 事件* 导致了硬分叉，结果分为**以太坊**（**ETH**）和**以太经典**（**ETC**）。
- en: 'In this chapter, we cover the following topics about Ethereum:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了以下关于以太坊的主题：
- en: Overview of Ethereum
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊概述
- en: Basic concepts such as ether, ERC20 tokens, smart contracts, EVM, gas, accounts, and
    oracles
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本概念，如*以太*、ERC20 代币、智能合约、EVM、gas、账户和预言机
- en: The Ethereum performance issue and ongoing efforts to address the issue, such
    as PoS, Casper, Plasma, and Sharding
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊性能问题以及解决该问题的持续努力，如 PoS、Casper、Plasma 和 Sharding
- en: An overview of Ethereum
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊概述
- en: In late 2013, Vitalik Buterin sent an email to the blockchain community announcing
    a white paper outlining the idea for Ethereum. He described it as a universal
    platform with internal languages, so anyone could write an application. According
    to Vitalik, the original idea for Ethereum was to create a general-purpose blockchain
    for fintech. Ethereum is a variation on Bitcoin. Unlike Bitcoin, which is a blockchain
    focusing on payments, Ethereum is a programmable, general-purpose blockchain.
    The introduction of smart contracts is the key to differentiating Ethereum from
    Bitcoin.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2013 年底，Vitalik Buterin 向区块链社区发送了一封电子邮件，宣布一份概述以太坊想法的白皮书。他将其描述为一个具有内部语言的通用平台，因此任何人都可以编写应用程序。根据
    Vitalik 的说法，以太坊最初的想法是创建一个面向金融科技的通用区块链。以太坊是比特币的一种变体。与专注于支付的比特币不同，以太坊是一种可编程的通用区块链。智能合约的引入是以太坊与比特币区分的关键。
- en: A well-known analogy to describe Ethereum and smart contracts, which bring together
    untrusting parties trading digital or digitized physical assets, is a vending
    machine, as described at the end of [*Chapter 12*](67341a1f-a57c-4247-8b13-b78ce565d9cf.xhtml),
    *Introduction to Blockchain Technology*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个众所周知的类比来描述以太坊和智能合约，将不信任的交易方聚集在一起交易数字或数字化的实物资产，就像 [*第 12 章*](67341a1f-a57c-4247-8b13-b78ce565d9cf.xhtml)
    结尾所述的自动售货机，*区块链技术简介*。
- en: After a vending machine is made, nobody, including the machine owner, can change
    the rules. A buyer does not need to worry about the owner altering the rules prior
    to or during the transaction. As a result, a buyer can trust the machine to behave
    in the expected way and feels comfortable enough to go ahead with a transaction.
    Of course, the vending machine does not necessarily provide a perfect solution.
    A customer could occasionally face a malfunctioning machine and insert $1, yet
    nothing happens. If the vending machine does not provide a refund solution, such
    as posting a contact phone, the customer would permanently lose the $1\. On the
    other hand, Ethereum's solution is much more robust. The rules in the form of
    smart contracts are distributed to all nodes. The same smart contracts will run
    on thousands of nodes (or even more) worldwide at approximately the same time.
    As long as at least one node runs, the transaction is successfully executed. In
    other words, Ethereum is truly a world computer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 制作自动售货机后，包括机器所有者在内的任何人都无法更改规则。购买者在交易前或交易期间不需要担心所有者更改规则。因此，购买者可以信任机器按预期的方式行事，并且感到足够舒适以继续交易。当然，自动售货机未必提供完美的解决方案。顾客偶尔可能会遇到故障的机器并插入
    1 美元，但什么也不发生。如果自动售货机没有提供退款解决方案，例如发布联系电话，顾客将永远失去 1 美元。另一方面，以太坊的解决方案要坚固得多。智能合约形式的规则分布到所有节点。同样的智能合约将在全球数千个（甚至更多）节点上几乎同时运行。只要至少有一个节点在运行，交易就会成功执行。换句话说，以太坊真正是一台全球计算机。
- en: 'Some blockchain enthusiasts responded to Vitalik''s email and formed a core
    group in advancing and executing the idea. (This groundbreaking paper, titled
    *A Next-Generation Smart Contract and Decentralized Application Platform*, is
    available at [https://github.com/ethereum/wiki%20Wiki/](https://github.com/ethereum/wiki%20Wiki/),
    archived from the original on 28 March 2015 with 169 revisions as of August 22,
    2018.) In January 2014, the Ethereum Foundation was created. Soon (in early 2014),
    a British computer science PhD, Gavin Wood, published a yellow paper titled *Ethereum:
    A Secure Decentralized Generalized Transaction Ledger* ([https://ethereum.github.io/yellowpaper/paper.pdf](https://ethereum.github.io/yellowpaper/paper.pdf)).
    Gavin''s paper unified multiple initiatives for implementing the Ethereum idea
    and served as a blueprint for future development work.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '一些区块链爱好者回应了Vitalik的电子邮件，并组成了一个核心团队来推进并执行这个想法。 （这篇开创性的论文，标题为*A Next-Generation
    Smart Contract and Decentralized Application Platform*，可以在[https://github.com/ethereum/wiki%20Wiki/](https://github.com/ethereum/wiki%20Wiki/)上获得，截至2018年8月22日，经过169次修订，该网址已存档，原文发表于2015年3月28日。）2014年1月，成立了以太坊基金会。不久之后（2014年初），一位英国计算机科学博士Gavin
    Wood发表了一篇名为*Ethereum: A Secure Decentralized Generalized Transaction Ledger*的黄皮书（[https://ethereum.github.io/yellowpaper/paper.pdf](https://ethereum.github.io/yellowpaper/paper.pdf)）。Gavin的论文统一了多个实现以太坊想法的努力，并成为未来开发工作的蓝图。'
- en: Before talking about the Ethereum crowdsale event, we need to first explain
    the concept of **crowdfunding**. Crowdfunding refers to the practice of funding
    a project or an initiative by raising money from a large number of people, commonly
    on the internet. Crowdfunding is an alternative way of financing an initiative.
    In the case of blockchain projects, crowdfunding often takes place in the form
    of a project owner selling a portion of a hardcoded (preminted) total number of
    digital coins in circulation, exchanging them for an amount in a fiat currency
    or another established digital currency such as Bitcoin.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论以太坊的众筹活动之前，我们需要首先解释**众筹**的概念。众筹指的是通过从大量人群中募资，通常在互联网上，来为项目或倡议筹集资金的做法。众筹是一种替代的筹资方式。在区块链项目的情况下，众筹通常是以项目所有者出售预先设定的（预挖矿的）总量数字货币的一部分，将它们交换成法定货币或其他已建立的数字货币（如比特币）。
- en: 'From July to August 2014, an online crowdfunding sale took place. The event
    led to selling 11.9 million coins of *premined* Ether—Ethereum''s native cryptocurrency.
    This is about 12% of the total Ether coin supply: 102,431,467\. Funded by the
    proceeds from this crowdfunding sale, development started. The core Ethereum team
    consisted of Vitalik Buterin, Mihai Alisie, Anthony Di Iorio, and Charles Hoskinson.
    The real development of the Ethereum project was started by a Swiss company, Ethereum
    Switzerland GmbH (EthSuisse). The platform went live on 30 July 2015.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从2014年7月至8月，进行了一次在线众筹活动。这次活动导致了预挖矿以太——以太坊的本地加密货币，总量1190万枚代币的销售。这约占以太币总量的12%：102,431,467枚。通过这次众筹销售的收入，开发工作开始了。核心以太坊团队包括Vitalik
    Buterin，Mihai Alisie，Anthony Di Iorio和Charles Hoskinson。以太坊项目的真正开发是由一家名为Ethereum
    Switzerland GmbH（EthSuisse）的瑞士公司启动的。该平台于2015年7月30日上线。
- en: 'Stephan Tual, an ex-Ethereum CMO, formed a company called the *The DAO* on
    April 30, 2016\. The purpose of this entity was to manage the process of selecting
    which smart contract to deploy. *The* *DAO* came up with the clever idea of selecting
    contracts based on investments. Completed smart contracts were posted on the internet.
    A potential investor would declare an amount to be invested in a smart contract.
    Smart contracts with the top amounts would be chosen for deployment. *The DAO*
    raised a record US $150 million via crowdfunding sales to fund the project. *The
    DAO* was hacked in June and lost US $50 million worth of Ether due to bugs in
    its software. The hacking ignited a heated debate within the Ethereum community
    on how to deal with it. Two contesting opinions emerged:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Stephan Tual，一位前以太坊首席市场官，在2016年4月30日成立了一个名为*The DAO*的公司。这个实体的目的是管理选择部署哪个智能合约的流程。*The
    DAO*提出了一个聪明的想法，基于投资来选择合约。完成的智能合约会被发布在互联网上。潜在投资者将宣布要投资多少金额到一个智能合约中。投资金额最多的智能合约将被选择部署。*The
    DAO*通过众筹销售筹集了创纪录的1.5亿美元资金用于此项目。*The DAO*在六月被黑客攻击，由于软件中的漏洞损失了5千万美元价值的以太币。这次黑客攻击引发了以太坊社区内一场激烈的讨论，探讨如何处理这件事。出现了两种相争的观点：
- en: Enhance the Ethereum code to make a similar attack in future not feasible and
    deploy the code to all nodes
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加强以太坊代码，使未来类似攻击不可行，并将代码部署到所有节点
- en: Make no changes to the core Ethereum code and take the risk of future attacks
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不对核心以太坊代码进行任何更改，冒着未来攻击的风险
- en: Vitalik made a call for a hard fork solution and publicly asked all Ethereum
    nodes to stop trading for the deployment of patch code. Within hours, all of the
    thousands of nodes worldwide were completely shut down. The majority of the nodes
    voted for adopting the hard fork approach and upgraded their core Ethereum code
    with the patch, yet a small portion of nodes chose not to take the patch and still
    run the same code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Vitalik呼吁进行硬分叉解决方案，并公开要求所有以太坊节点停止交易以部署修补代码。几小时后，全球数千节点完全关闭。大多数节点投票赞成采取硬分叉方法，并用修补程序升级了它们的核心以太坊代码，但仍有一小部分节点选择不采用修补程序，继续运行相同的代码。
- en: This hard fork event split the Ethereum blockchain into two. The nodes running
    the old code maintaining the original blockchain became Ethereum Classic, with
    the coin symbol ETC, and the nodes with the patched code, maintaining a forked
    Ethereum blockchain, became Ethereum, with the coin symbol ETH. The fork occurred
    exactly at block number 1,920,000\. The hard fork created a rivalry between the
    two networks. Now, the ETH price has gone up more than 130 times and ETC is worth
    only one-tenth of ETH's price, due to its unpopularity and the concerns of suffering
    a future *The DAO* type of attack.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这一硬叉事件将以太坊区块链分为两条。运行旧代码并维护原始区块链的节点变成了以太坊经典，代币符号为ETC，而运行修补代码并维护分叉以太坊区块链的节点变成了以太坊，代币符号为ETH。硬叉发生在区块编号为1,920,000。硬叉在这两个网络之间造成了竞争。如今，ETH价格涨了130多倍，而ETC只值ETH价格的十分之一，这是因为其不受欢迎以及担心未来发生类似*The
    DAO*攻击的担忧。
- en: After the *The DAO* hard fork, Ethereum forked twice in Q4 of 2016 to deal with
    new attacks. While the hard forks resolved past hackers' attacks, this is obviously
    not a scalable solution as one cannot always rely on creating a hard fork to resolve
    every future hack. Consequently, Ethereum has increased its protection by preventing
    new spam attacks by hackers.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在*The DAO*硬叉之后，以太坊在2016年第四季度进行了两次分叉来处理新的攻击。虽然硬叉解决了过去黑客的攻击，但显然这并非可持续发展的解决方案，因为不能总是依靠创建硬叉来解决未来的每一次攻击。因此，以太坊通过阻止黑客的新垃圾邮件攻击来增强自己的保护。
- en: 'While hard forks are used to address hacking, soft forks are used by Ethereum
    for protocol upgrades, which are important changes affecting the underlying functionality
    and/or incentive structures of Ethereum. Some notable soft forks are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 硬叉用于解决黑客攻击，以太坊使用软叉进行协议升级，这些升级是影响以太坊基础功能和/或激励结构的重要变化。一些值得注意的软叉如下：
- en: '**Homestead** was for improvements to transaction processing, gas pricing,
    and security. The soft fork took place on 31 July 2015.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**家园**用于改进交易处理、燃气定价和安全性。这一软叉在2015年7月31日进行。'
- en: '**Metropolis part 1**: **Byzantium** was for changes to reduce the complexity
    of the EVM and add more flexibility for smart contract developers. The soft fork
    took place on 16 October 2017.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**都市部分1**: **拜占庭**用于减少以太坊虚拟机的复杂性并为智能合约开发者增加更多灵活性。这一软叉在2017年10月16日进行。'
- en: 'Two more protocol upgrades are planned in the future: **Metropolis part 2***:
    Constantinople* helps to lay the foundations for the transition to proof-of-stake.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未来还计划了两次协议升级：**都市部分2**：*君士坦丁堡*为过渡到股权证明奠定了基础。
- en: In March 2017, blockchain startups, research groups, and major companies created
    the **Enterprise Ethereum Alliance** (**EEA**) consisting of 30 founding members.
    In May, the nonprofit organization expanded to include 16 enterprise members with
    household names such as Cornell University's research group, Samsung SDS, Microsoft,
    Intel, J. P. Morgan, DTCC, Deloitte, Accenture, Banco Santander, BNY Mellon, ING,
    and National Bank of Canada. By July 2017, the list had increased to 159 members.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年3月，区块链初创公司、研究团体和主要公司共同创建了由30位创始成员组成的**企业以太坊联盟**（**EEA**）。五月份，这个非营利组织扩大，纳入了16家知名企业成员，如康奈尔大学的研究团体、三星SDS、微软、英特尔、摩根大通、DTCC、德勤、安永、桑坦德银行、纽约梅隆银行、安海斯集团和加拿大国家银行。到了2017年7月，成员名单增加到了159位。
- en: Despite the many improvements made since its initial launch, Ethereum continues
    to evolve. Ethereum 2.0 sets out to address one of the weakest links, scalability,
    and is expected to launch in 2019, in phases, as per Vitalik's recent comments.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管自其最初推出以来已经进行了许多改进，以太坊仍在不断发展。以太坊2.0旨在解决最薄弱的环节之一，即可扩展性，并预计将于2019年分阶段推出，正如Vitalik最近的评论所示。
- en: Ethereum basic concepts
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊基本概念
- en: Ethereum builds on top of the Bitcoin blockchain, including key features such
    as a distributed ledger containing chained blocks, the proof-of-work algorithm,
    and so on. However, its biggest addition is the introduction of smart contracts,
    which are coded in a Turing-complete scripting language. Because of this new addition,
    unlike Bitcoin or its non-smart contract close relatives, Ethereum allows developers
    to address generic business problems.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊在比特币区块链的基础上构建，包括包含链接块的分布式账本、工作证明算法等关键功能。然而，它最大的增加是引入了能以图灵完备的脚本语言编写的智能合约。由于这一新的增加，与比特币或其非智能合约的亲属不同，以太坊允许开发人员解决通用业务问题。
- en: 'Before getting to the basic concepts, we summarize some useful facts on Ethereum
    as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在讲解基本概念之前，我们总结一些有用的以太坊事实如下：
- en: 'Ethereum has three main ingredients:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊有三个主要组成部分：
- en: '**Decentralization**: For guaranteed execution'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**去中心化**：用来保证执行'
- en: '**Hashes**: For safeguarding the world state'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**哈希值**：用来保护世界状态'
- en: '**Signatures**: For authorizing programs and transactions'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**签名**：用于授权程序和交易'
- en: Since Ethereum is a blockchain, it uses mathematical algorithms to replace intermediary
    entities and bring untrusting parties together to do businesses.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于以太坊是一个区块链，它使用数学算法来替代中间实体，并将不信任的各方聚集在一起做生意。
- en: Ethereum blockchain brings trust in data due to its ability to verify the validity
    of data on a node via its consensus mechanism.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊区块链通过其共识机制在节点上验证数据的有效性，从而为数据带来了信任。
- en: It uses total validation to replace central control.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用总体验证来替代中央控制。
- en: Like a transaction, a digital signature is required for deploying a smart contract.
    A deployed smart contract is permanent and is immutable.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与交易一样，部署智能合约需要数字签名。已部署的智能合约是永久且不可变的。
- en: A smart contract is assigned with an address.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约会被分配一个地址。
- en: Suppose a smart contract has a bug and requires a fix. The patched smart contract
    will be deployed with a newly assigned address and therefore is treated as a completely
    new smart contract with no relationship to the old one.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设一个智能合约存在漏洞并需要修复。修补后的智能合约将被部署在一个新分配的地址上，并且因此被视为完全独立于旧合约的全新智能合约。
- en: In May 2017, Ethereum had 25,000 reachable nodes worldwide, consisting of full
    nodes and light nodes.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2017年5月，以太坊全球可达节点数量为25,000个，包括全节点和轻节点。
- en: A full node has the full blockchain downloaded and available. The Ethereum ledger
    can be pruned. Full nodes verify transactions in a block in construction. A miner
    node has to be a full node.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全节点已下载并可用完整区块链。以太坊账本可以被修剪。全节点验证在构建区块中的交易。矿工节点必须是一个全节点。
- en: A light node does not store the entire blockchain, but it stores the parts it
    cares about from someone it trusts.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻节点不存储整个区块链，但是它从它信任的某个人那里存储它关心的部分。
- en: Scripts of a contract code are executed via the **Ethereum virtual machine**
    (**EVM**) on full nodes. A smart contract's address stores bytecode, called opcode,
    that runs on the EVM.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合约代码的脚本通过**以太坊虚拟机**（**EVM**）在全节点上执行。智能合约的地址存储了在EVM上运行的名为操作码的字节码。
- en: Since a smart contract runs on full nodes on tens of thousands of machines,
    it truly is worldwide. In other words, writing a smart contract to a blockchain
    is global and permanent.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于一个智能合约在数以万计的机器上的全节点上运行，它真正是全球性的。换句话说，将智能合约写入区块链是全球性的和永久性的。
- en: Since smart contract scripts are stored in a decentralized way, it provides
    an additional layer of security. This is true as all full nodes know that other
    nodes store the same code. It is not feasible for a hacker to push malicious scripts
    to all good nodes worldwide and crash them.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于智能合约脚本以分散的方式存储，这提供了额外的安全层。所有全节点都知道其他节点存储相同的代码。对于黑客来说，向全球所有良好的节点推送恶意脚本并崩溃它们是不可行的。
- en: A smart contract is a scripted legal document and is guaranteed for execution.
    Since a smart contract is signed at its deployment and a transaction that invokes
    it is also signed, there should not be a dispute between the two trading parties
    in the transaction. In other words, with a decentralized blockchain such as Ethereum,
    the need for a judge disappears! node and can grow to a full network.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约是一份脚本化的法律文件，并且它是执行保证的。因为智能合约在部署时被签署，调用它的交易也被签署，所以在交易的两个交易方之间不应该发生争议。换句话说，有了像以太坊这样的去中心化区块链，对于法官的需求消失了！节点并且可以发展成一个完整网络。
- en: Thanks to the nature of permanence and immutability, data and programs on Ethereum
    blockchain are auditable. This could be of special interest to the government
    for enforcing regulation and compliance requirements.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于永久性和不可变性的特性，以太坊区块链上的数据和程序是可审计的。这对于政府执行监管和合规要求可能具有特殊的兴趣。
- en: Ethereum is open source. Anyone can download the code and create his or her
    own version of an Ethereum network. Of course, the issue is about how to convince
    others of its value so they join the network.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊是开源的。任何人都可以下载代码并创建自己的以太坊网络版本。当然，问题在于如何说服他人加入网络以体验其价值。
- en: Ethereum is decentralized. As a result, there is no master node that controls
    or dictates the whole network. The network operates via consensus, as per its
    protocols.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊是去中心化的。因此，没有控制或指挥整个网络的主节点。网络通过共识运行，按照其协议。
- en: Ethereum provides fault tolerance as well. As long as at least one full node
    survives during a catastrophic attack, the network can be rebuilt from the surviving
    node and grow to a full network.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊还提供了容错能力。只要在灾难性攻击期间至少有一个完整节点存活，网络就可以从幸存节点重新构建并发展成完整网络。
- en: 'While Ethereum provides extreme robustness, the flip side is the problem of
    how to stop it when it is out of control. Like in the example of the *The DAO* hack,
    the network had to rely on Vitalik and his authority to shut it down completely.
    Compared to today, the network then was many times smaller. As the network continues
    to grow in size, this approach will become harder. In future, the network may
    grow to tens of millions of nodes or more. As long as one node does not respond to
    an authoritative call, the Ethereum network is still alive. In other words, it
    becomes extremely difficult to shut down a network completely. Of course, this
    is what a decentralized blockchain is all about: no centralized authority dictating
    to everyone else!'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管以太坊提供了极高的健壮性，但其背后的问题是当其失控时如何停止它。就像*The DAO*黑客事件的例子一样，网络不得不依赖维塔利克及其权威来彻底关闭它。与今天相比，那时的网络规模要小得多。随着网络规模的不断增长，这种方法将变得更加困难。未来，网络可能会增长到数千万个节点甚至更多。只要有一个节点不响应权威调用，以太坊网络仍然活跃。换句话说，完全关闭网络变得极为困难。当然，这就是去中心化区块链的全部意义所在：没有中心化的权威来指挥其他人！
- en: Ethereum allows for recursive calls to other smart contracts. Poorly written
    smart contracts can lead to infinite loops. To address this issue, Ethereum builds
    in a circuit breaker mechanism, Gas, which is explained later in detail.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊允许对其他智能合约进行递归调用。编写不良的智能合约可能导致无限循环。为了解决这个问题，以太坊引入了一个断路器机制，即Gas，后面将详细解释。
- en: On a big data platform, a task is divided into chunks that are distributed to
    nodes on the network and the work is shared by nodes. However, Ethereum's full
    nodes execute the same pieces of scripts. That means every full node of the Ethereum
    blockchain stores and computes the same data; this is reliable but not scalable.
    The scalability issue is one of the major criticisms of Ethereum. As we will discuss
    later, multiple efforts are underway to address this issue.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在大数据平台上，一个任务被分成分块分配给网络上的节点，工作由节点共同完成。然而，以太坊的完整节点执行相同的脚本片段。这意味着以太坊区块链的每个完整节点都存储并计算相同的数据；这是可靠但不可扩展的。可扩展性问题是以太坊面临的主要批评之一。正如我们稍后将讨论的那样，已经有多个努力在进行中以解决这个问题。
- en: Ether is the native cryptocurrency of Ethereum. Ethereum allows a user to issue
    their own digital coins called tokens. ERC-20/ERC-721/ERC 1400 are common technical
    standards to be followed for issuing Ethereum tokens.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太是以太坊的本地加密货币。以太坊允许用户发行自己的数字货币，称为代币。ERC-20/ERC-721/ERC 1400是发行以太坊代币时应遵循的常见技术标准。
- en: Ethereum can be seen as the third generation of the internet. This could be
    one reason that Ethereum's JS API was called Web3\. There are discussions on rewriting
    the internet with blockchain technology.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊可以被视为互联网的第三代。这可能是以太坊的JS API被称为Web3的一个原因。有关使用区块链技术重写互联网的讨论正在进行。
- en: The practice of providing centralized services on top of a decentralized internet
    (such as Google providing a centralized searching functionality on a decentralized
    internet) will apply to blockchain as well.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在去中心化互联网上提供集中化服务的做法（例如Google在去中心化互联网上提供集中式搜索功能）也将适用于区块链。
- en: Ether
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太
- en: Since Ethereum is built on top of Bitcoin, it is considered to be a Bitcoin
    altcoin. Ether to Ethereum is similar to BTC to Bitcoin. Ethereum is the name
    used when referring to the protocols, the blockchain, the client software, and
    the mainnet.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于以太坊是建立在比特币之上的，它被认为是比特币替代币。与比特币类似，以太坊中的 Ether 相当于比特币中的 BTC。在提到协议、区块链、客户端软件和主网时会使用以太坊这个名称。
- en: The Ethereum mainnet is the blockchain network that is used by clients for transferring
    a digital asset from a sender to a recipient. In other words, it is the network
    where actual transactions take place on a distributed ledger. Mainnet is equivalent
    to a production environment. The Ethereum testnet is for development. As mentioned
    at [https://www.ethernodes.org/network/2](https://www.ethernodes.org/network/2),
    as of October 8, 2018, the mainnet had 13,662 nodes and the testnet had 29 nodes.
    Since the actual transactions take place on the mainnet, Ether has a real value
    only on the Ethereum mainnet. In other words, on the testnet, it is worth nothing.
    Ether coins (ETH and ETC) are listed and exchanged in tens of thousands of digital
    currency markets. Their prices vary greatly. For example, on October 8, 2018,
    ETH was traded at around $223 and ETC at $11.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊主网络是客户端用于将数字资产从发送方转移到接收方的区块链网络。换句话说，这是实际交易在分布式分类帐上发生的网络。主网络相当于生产环境。以太坊测试网络是用于开发的。如[https://www.ethernodes.org/network/2](https://www.ethernodes.org/network/2)上所述，截至
    2018 年 10 月 8 日，主网络有 13,662 个节点，测试网络有 29 个节点。由于实际交易发生在主网络上，因此 Ether 只在以太坊主网络上具有真正的价值。换句话说，在测试网络上，它一文不值。Ether（ETH
    和 ETC）在数以万计的数字货币市场上上市和交易。它们的价格变化很大。例如，在 2018 年 10 月 8 日，ETH 的交易价约为 $223，ETC 为
    $11.
- en: Ether can be transferred between addresses (accounts). It is used to pay miners
    for their computational work; they are paid in transaction fees and also for gas
    consumption resulting from executing a transaction. Here, the concept of gas is
    essential for Ethereum and it is discussed later in more detail.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Ether 可以在地址（账户）之间转移。它用于支付矿工的计算工作，他们会通过交易费用和执行交易产生的燃气消耗来获得报酬。在这里，燃料的概念对于以太坊至关重要，稍后将更详细地讨论。
- en: 'Ether is the largest denomination. There are other units. The smallest is called
    WEI, named after the digital money pioneer, Wei Dai, who is the inventor of B-money.
    B-money was his proposal for an anonymous, distributed electronic cash system.
    Other units include Gwei, microether, and milliether. They all have a second name.
    For example, milliether is also called finney, named after another digital money
    pioneer, Harold Thomas Finney II, who in 2004 wrote the world''s first implemented
    cryptocurrency, RPOW (reusable proofs of work) before Bitcoin. The following table
    gives the conversion rate between ether and other units:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Ether 是最高面额的货币。还有其他单位。最小的被称为 WEI，以数字货币先驱 Wei Dai 命名，他是 B-money 的发明者。B-money
    是他对匿名、分布式电子现金系统的提案。其他单位包括 Gwei、microether 和 milliether。它们都有第二个名称。例如，milliether
    也被称为 finney，以数字货币先驱 Harold Thomas Finney II 命名，他在 2004 年撰写了世界上第一个实施的加密货币 RPOW（可重复使用的工作凭证），在比特币之前。以下表格给出了
    ether 与其他单位之间的转换率：
- en: '| **Unit** | **Wei value** | **Wei** |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| **Unit** | **Wei value** | **Wei** |'
- en: '| **Gwei (shannon)** | 10⁹ Wei | 1,000,000,000 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| **Gwei (shannon)** | 10⁹ Wei | 1,000,000,000 |'
- en: '| **microether (szabo)** | 10^(12) Wei | 1,000,000,000,000 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| **microether (szabo)** | 10^(12) Wei | 1,000,000,000,000 |'
- en: '| **miliether (finney)** | 10^(15) Wei | 1,000,000,000,000,000 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| **miliether (finney)** | 10^(15) Wei | 1,000,000,000,000,000 |'
- en: '| **ether** | 10^(18) Wei | 1,000,000,000,000,000,000 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| **ether** | 10^(18) Wei | 1,000,000,000,000,000,000 |'
- en: ERC20 tokens
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ERC20 代币
- en: Ethereum is a generic blockchain. It allows developers to build a DApp and trade
    digital assets.  Correspondingly, it allows a developer to define a user-specific
    coin called a token. The majority of these tokens are ERC20 tokens. ERC refers
    to Ethereum Request for Comment, and 20 is the number that was assigned to this
    request. In other words, ERC-20 is a technical standard used for smart contracts
    on the Ethereum blockchain for implementing tokens. According to Etherscan.io,
    as of October 8, 2018, a total of 125,330 ERC-20 compatible tokens were found
    on the Ethereum main network.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊是一个通用区块链。它允许开发者构建 DApp 并交易数字资产。相应地，它允许开发者定义一个称为代币的用户特定硬币。其中大部分代币都是 ERC20
    代币。ERC 指的是以太坊意见征求，20 是分配给此意见征求的编号。换句话说，ERC-20 是以太坊区块链上用于实施代币的智能合约技术标准。根据 Etherscan.io，截至
    2018 年 10 月 8 日，在以太坊主网络上发现了 125,330 个 ERC-20 兼容代币。
- en: ERC-20 defines a list of rules for Ethereum tokens to follow. By doing so, it
    allows for interaction and conversion between Ethereum tokens within the larger
    Ethereum ecosystem. Currently, Ether does not conform to the ERC-20 standard.
    However, since Ether is the native coin of Ethereum, it can be converted into
    other tokens. The ERC-20 specification defines an interface containing methods
    and events.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ERC-20为以太坊代币定义了一系列规则。通过这样做，它允许以太坊代币在更大的以太坊生态系统内进行交互和转换。目前，Ether不符合ERC-20标准。但是，由于Ether是以太坊的本地币，因此可以转换为其他代币。ERC-20规范定义了包含方法和事件的接口。
- en: 'The following is list of required methods (github.com):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是所需方法列表（github.com）：
- en: '`name`: It returns the name of the token, for instance, `HelloToken: function
    name() view returns (string name)`.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 返回代币的名称，例如，`HelloToken: function name() view returns (string name)`。'
- en: '`symbol`: It returns the symbol of the token, for instance, `HTC: function
    symbol() view returns (string symbol)`.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`symbol`: 返回代币的符号，例如，`HTC: function symbol() view returns (string symbol)`。'
- en: '`decimals`: It returns the number of decimals the token uses; for instance,
    8 means to divide the token amount by 100,000,000 to get its user representation:
    `function decimals() view returns (uint8 decimals)`.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimals`: 返回代币使用的小数位数；例如，8表示将代币金额除以100,000,000以获得其用户表示：`function decimals()
    view returns (uint8 decimals)`。'
- en: '`totalSupply`: It returns the total token supply: `function totalSupply() view
    returns (uint256 totalSupply)`.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`totalSupply`: 返回总代币供应量：`function totalSupply() view returns (uint256 totalSupply)`。'
- en: '`balanceOf`: It returns the account balance of another account with `address
    _owner: function balanceOf (address _owner) view returns (uint256 balance)`.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`balanceOf`: 返回另一个账户的账户余额，具有`address _owner: function balanceOf(address _owner)
    view returns (uint256 balance)`。'
- en: '`transfer`: It transfers a specified number (`_value`) of tokens to the `_to` address,
    and MUST fire the transfer event. The function should throw an error if the `_from`
    account balance does not have enough tokens to spend: `function transfer(address
    _to, uint256 _value) returns (bool success)`.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transfer`: 它将指定数量(`_value`)的代币转移到`_to`地址，并且必须触发转账事件。如果`_from`账户余额不足以支出，则应该抛出错误：`function
    transfer(address _to, uint256 _value) returns (bool success)`。'
- en: '`transferFrom`: It transfers a specified amount (`_value`) of tokens from the
    `_from` address to the `_to` address, and MUST fire the Transfer event. The function
    should throw an error unless the `_from` account has deliberately authorized the
    sender of the message via some mechanism: `function transferFrom (address _from,
    address _to, uint256 _value) returns (bool success)`.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transferFrom`: 它将指定数量(`_value`)的代币从`_from`地址转移到`_to`地址，并且必须触发Transfer事件。除非`_from`账户已经通过某种机制明确授权了消息的发送者，否则应该抛出错误：`function
    transferFrom(address _from, address _to, uint256 _value) returns (bool success)`。'
- en: '`approve`: It allows `_spender` to withdraw from your account multiple times,
    up to  the `_value` amount. If this function is called again, it overwrites the
    current allowance with `_value: function approve (address _spender, uint256 _value)
    returns (bool success)`.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`approve`: 允许`_spender`多次从您的账户提取，最多到`_value`金额。如果再次调用此函数，则将当前授权额覆盖为`_value`：`function
    approve(address _spender, uint256 _value) returns (bool success)`。'
- en: '`allowance`: It returns the amount that `_spender` is still allowed to withdraw
    from `_owner: function allowance (address _owner, address _spender) view returns
    (uint256 remaining)`.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allowance`: 返回`_spender`仍然被允许从`_owner`提取的金额：`function allowance(address _owner,
    address _spender) view returns (uint256 remaining)`。'
- en: 'The list of required events is as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 所需事件列表如下：
- en: '`transfer`: Must trigger when tokens are transferred, including zero value
    transfers. A token contract that creates new tokens SHOULD trigger a `Transfer`
    event with the `_from` address set to 0x0 when tokens are created: `event Transfer
    (address indexed _from, address indexed _to, uint256 _value)`.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transfer`: 在代币被转移时必须触发，包括零值转移。创建新代币的代币合约应该在创建代币时触发`Transfer`事件，并将`_from`地址设置为0x0：`event
    Transfer(address indexed _from, address indexed _to, uint256 _value)`。'
- en: '`approval`: Must trigger on any successful call to approve `(address _spender`,
    `uint256 _value):  event Approval (address indexed _owner, address indexed _spender,
    uint256 _value)`.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`approval`: 在任何成功调用approve`(address _spender`, `uint256 _value)`时必须触发：`event
    Approval(address indexed _owner, address indexed _spender, uint256 _value)`。'
- en: Although Ethereum allows for a person to create his or her own money, Ethereum's
    true value is its guaranteed execution of a smart contract. Ether and ERC20 token
    creation are mainly for initial crowdfunding purposes to support a project and
    are used for payment during the transaction to circumvent a bank. Without a real
    business use case, a token is worth nothing.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管以太坊允许一个人创建自己的货币，但以太坊真正的价值在于其对智能合约的保证执行。以太币和ERC20代币的创建主要是为了支持项目的初创资金，并在交易过程中用于支付以规避银行。没有真正的商业用例，代币一文不值。
- en: Smart contracts
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能合约
- en: The term *smart contract* was initially coined by Nick Szabo, who is a computer
    scientist, a legal scholar, and the inventor of Bit Gold, in 1994\. He is a living
    legend in the world of cryptocurrency for his research into digital contracts
    and digital currency. He is even considered to be Satoshi Nakomoto by some people,
    although he rejected that claim.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 术语*智能合约*最初由尼克·萨博创造，他是一位计算机科学家、法律学者，也是比特黄金（Bit Gold）的发明者，在1994年提出。他因其对数字合同和数字货币的研究而成为加密货币世界的传奇人物。一些人甚至认为他是中本聪。尽管他拒绝了这一说法。
- en: 'Nick Szabo originally defined smart contracts as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 尼克·萨博最初定义了智能合约如下：
- en: '"A smart contract is a computerized transaction protocol that executes the
    terms of a contract. The general objectives of smart contract design are to satisfy
    common contractual conditions (such as payment terms, liens, confidentiality,
    and even enforcement), minimize exceptions both malicious and accidental, and
    minimize the need for trusted intermediaries. Related economic goals include lowering
    fraud loss, arbitration and enforcement costs, and other transaction costs."'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '"智能合约是一种执行合同条款的计算机化交易协议。智能合约设计的一般目标是满足常见的合同条件（例如付款条件、留置权、保密性，甚至执行），最小化恶意和意外异常，并尽量减少对受信任中介的需求。相关的经济目标包括降低欺诈损失、仲裁和执行成本以及其他交易成本。"'
- en: 'With a vending machine, transaction rules are built into the machine hardware.
    Transaction rules on a digital asset are built into scripts. That is, the smart
    contract consists of code. Here are some useful facts on smart contracts:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动售货机上，交易规则内置在机器硬件中。数字资产的交易规则内置在脚本中。也就是说，智能合约由代码组成。以下是一些关于智能合约的有用事实：
- en: A smart contract is immutable.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约是不可变的。
- en: A smart contract is permanent.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约是永久的。
- en: A smart contract is timestamped.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约具有时间戳。
- en: A smart contract is globally available.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约是全球可用的。
- en: A smart contract is a digitized legal document.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约是数字化的法律文件。
- en: A smart contract is a computer protocol intended to facilitate, verify, or enforce
    an agreed contract between trading parties digitally.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约是一种旨在在交易方之间数字化促进、验证或强制执行协议的计算机协议。
- en: Smart contracts allow for execution of transactions without the third party
    as an intermediary. The transactions are auditable and irreversible.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约允许在没有第三方作为中介的情况下执行交易。这些交易是可审计和不可逆转的。
- en: A smart contract moves digital coins, executes a conventional payment, or transfers
    a digital asset, or even delivers real-world goods and services.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约可以移动数字硬币，执行传统支付，或转移数字资产，甚至提供现实世界的商品和服务。
- en: For a third-party-involved business transaction, for instance, buying/selling
    a house, escrow accounts are often used to temporarily store the trading parties'
    money. With a smart contract, no escrow account is needed. Smart contracts eliminate
    the need for escrow accounts since they are guaranteed to be executed for transferring
    the money and assets.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于涉及第三方的商业交易，例如购买/出售房屋，经常使用第三方担保账户来暂时存储交易双方的资金。有了智能合约，就不需要担保账户。智能合约消除了担保账户的需要，因为它们被保证用于转移资金和资产。
- en: Smart contracts provide more security than traditional contract law and their
    transaction costs are only a fraction of other transaction costs associated with
    contracting.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约比传统合同法提供了更多的安全性，其交易成本仅为与合同相关的其他交易成本的一小部分。
- en: In the interpretation used by the Ethereum Foundation, a smart contract does
    not necessarily refer to the classical concept of a contract. It can be any kind
    of computer program.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在以太坊基金会使用的解释中，智能合约并不一定指的是传统合约的经典概念。它可以是任何类型的计算机程序。
- en: To deploy and run a smart contract, one has to digitally sign the deployment,
    similar to sending other data or transactions on the Ethereum blockchain.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要部署和运行智能合约，必须对部署进行数字签名，类似于在以太坊区块链上发送其他数据或交易。
- en: Smart contracts can be public and are open to developers. This leads to a security
    issue. If a smart contract has a bug or security loophole, it is visible to all
    developers. To make the issue worse, such a bug or loophole is not easily fixable,
    due to its immutability. This gives hackers plenty of time to explore weaknesses
    and initiate attacks on the Ethereum blockchain. *The DAO* event was a high-profile
    example of this issue.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约可以是公开的，对开发者开放。这引发了一个安全问题。如果智能合约存在缺陷或安全漏洞，所有开发者都能看到。更糟的是，由于其不可变性，这种缺陷或漏洞不易修复。这给黑客大量时间来探索弱点并对以太坊区块链发起攻击。*The
    DAO*事件就是这个问题的一个高调例子。
- en: 'An Ethereum smart contract can be developed in one of four languages: solidity
    (inspired by JavaScript), Serpent (inspired by Python, no longer used), LLL (inspired
    by Lisp), and Mutan (inspired by Go, no longer used). Regardless of the language
    used, smart contracts are coded in a high-level programming language which needs
    to be compiled into a low level, machine-runnable language. In the Ethereum smart
    contract implementation, a VM approach similar to the concept of Java VM (JVM)
    is used. The Ethereum VM is called **EVM**. Smart contract scripts are converted
    to EVM-runnable code called **bytecode**. The opcode is then deployed to the Ethereum
    blockchain for execution. Currently, a research-oriented language is under development,
    which is called Vyper and is a strongly typed Python-based language.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊智能合约可以使用四种语言之一开发：solidity（受JavaScript启发）、Serpent（受Python启发，不再使用）、LLL（受Lisp启发）和Mutan（受Go启发，不再使用）。无论使用哪种语言，智能合约都是用高级编程语言编写的，需要编译成低级的、可在机器上运行的语言。在以太坊智能合约实施中，采用了类似于Java
    VM（JVM）的VM方法。以太坊的VM被称为**EVM**。智能合约脚本被转换为可在EVM上运行的代码，称为**字节码**。然后，操作码被部署到以太坊区块链上执行。目前，一种以研究为导向的语言正在开发中，这种语言被称为Vyper，是一种基于Python的强类型语言。
- en: Ethereum virtual machines
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊虚拟机
- en: In the sixties, when computers had just been invented, coding was in a lower
    level language, for instance an assembly language (assembler). For example, an
    assembler code line, *ADD R1 R2 R3,* is an instruction to add the contents of
    register 1 and register 2 with the result being placed in the third register,
    R3\. A register is a temporary storage area built into a CPU. With a 32-bit CPU,
    a register is 32 bits long.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在六十年代，当计算机刚刚发明时，编程使用的是较低级别的语言，例如汇编语言（assembler）。例如，汇编代码行*ADD R1 R2 R3*，是一个指令，用于将寄存器1和寄存器2的内容相加，结果放在第三个寄存器，R3中。寄存器是内置在CPU中的临时存储区。对于32位CPU，寄存器是32位长的。
- en: 'The code in an assembly language is then converted to a machine language in
    0 and 1 sequences, which is machine-executable. Coding in a low-level language
    is tedious and time-consuming. When high-level languages such as ALGOL or BASIC
    were invented, coding time was greatly reduced. However, the underlying process
    remained the same: compiling the code into a machine executable language in 0
    and 1 sequences. Java, Python, JavaScript and C++ are currently popular high-level
    languages.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，汇编语言中的代码被转换为0和1序列的机器语言，这是机器可执行的。使用低级语言编码是乏味且耗时的。当发明了像ALGOL或BASIC这样的高级语言时，编码时间大大缩短。然而，底层过程仍然相同：将代码编译成0和1序列的机器可执行语言。Java、Python、JavaScript和C++目前是流行的高级语言。
- en: 'While the compiling approach works well, it does have one inconvenience: lack
    of portability. A piece of code that is compiled on a computer is machine-dependent.
    In other words, it is not portable. To address this issue, the concept of the
    virtual machine was introduced. A **virtual machine** (**VM**) is an emulation
    of a computer system. There are two types of virtual machine: **system virtual
    machine** (also called full virtualization), which provide a substitute for a
    real machine, and **process virtual machines, **which are for executing computer
    programs in a platform-independent environment. It is the process of VM that we
    refer to in our preceding discussion.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然编译方法效果不错，但它确实有一个不便之处：缺乏可移植性。在一台计算机上编译的代码是机器依赖的。换句话说，它不是可移植的。为了解决这个问题，引入了虚拟机的概念。**虚拟机**（**VM**）是对计算机系统的模拟。虚拟机有两种类型：**系统虚拟机**（也称为全虚拟化），它提供了一个真实机器的替代品；以及**进程虚拟机**，用于在平台独立的环境中执行计算机程序。我们前面讨论的VM过程指的就是这个。
- en: A program written in a high-level language is compiled into VM-executable code.
    As long as a computer supports such a VM, the compiled code can run on it without
    the need to be recompiled. For example, JVM is a well-known Java VM that enables
    a computer to run Java programs compiled into Java bytecode.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 用高级语言编写的程序被编译成虚拟机可执行代码。只要计算机支持这样的虚拟机，编译后的代码就可以在上面运行，无需重新编译。例如，JVM 是一个众所周知的 Java
    虚拟机，它使计算机能够运行编译成 Java 字节码的 Java 程序。
- en: In the case of Ethereum, smart contracts are written in a high-level language,
    mostly solidity. A smart contract is compiled to opcodes, which are executable
    on a VM built specifically for Ethereum, the **EVM**. The EVM brings portability
    along with robustness, since EVM performs runtime checks to prevent crashes. These
    types of checks do have a performance penalty though.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊的情况下，智能合约是用高级语言编写的，主要是 solidity。智能合约被编译成操作码，这些操作码可在专为以太坊构建的虚拟机上执行，即**EVM**。EVM
    具有可移植性和健壮性，因为 EVM 在运行时执行检查以防止崩溃。尽管这些检查确实会带来性能损失。
- en: 'Since Ethereum contracts can be written in any one of the four languages: solidity,
    serpent, LLL, and Mutan, there are four compilers to convert each of the four
    languages'' coded smart contracts into opcodes for running on the EVM. Another
    relevant concept is the **Ethereum client**, which refers to a collection of software
    being installed on a node for parsing and verifying blockchain transactions, smart
    contracts, and everything related. The Ethereum client is implemented in one of
    eight languages: Python, C++, Go, JavaScript, Java, Haskell, Ruby, and Rust. Implemented
    EVMs are an essential part of the Ethereum client. As a result, opcodes can run
    on any one of the eight client implementations. EVM was originally designed for
    currency transactions and later extended to other digital assets. As a result,
    there are restrictions on supporting certain features. Developers face some severe
    restrictions (for instance, the use of string or local registers).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 由于以太坊合约可以用四种语言之一编写：solidity、serpent、LLL 和 Mutan，因此有四个编译器将这四种语言编写的智能合约转换为在 EVM
    上运行的操作码。另一个相关概念是**以太坊客户端**，它指的是安装在节点上的一组软件，用于解析和验证区块链交易、智能合约以及所有相关内容。以太坊客户端采用八种语言之一实现：Python、C++、Go、JavaScript、Java、Haskell、Ruby
    和 Rust。已实现的 EVM 是以太坊客户端的重要组成部分。因此，操作码可以在八个客户端实现之一上运行。EVM 最初是为货币交易而设计的，后来扩展到其他数字资产。因此，支持某些功能存在限制。开发人员面临一些严格的限制（例如，字符串或本地寄存器的使用）。
- en: Ethereum gas
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊 gas
- en: An Ethereum transaction can call a smart contract, which can in turn call another
    smart contract, and then another, and so on. When smart contracts are buggy, it
    can lead to infinite loops. Outside a blockchain, it is easy to resolve an infinite
    loop issue. One can stop the out-of-control program by simply shutting down a
    server, rebooting it, debugging the program, fixing the faulty logic in the code,
    recompiling it, and redeploying.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊交易可以调用智能合约，智能合约可以反过来调用另一个智能合约，然后又调用另一个，依此类推。当智能合约存在缺陷时，可能会导致无限循环。在区块链之外，很容易解决无限循环的问题。可以通过简单关闭服务器、重新启动服务器、调试程序、修复代码中的错误逻辑、重新编译和重新部署来停止失控程序。
- en: With the Ethereum blockchain, this approach simply does not work! Imagine if
    tens of thousands of nodes went into infinite loops at approximately the same
    time worldwide. In order to stop infinitely looping smart contracts, all the nodes
    need to be shut down within a short time window. As long as one node fails to
    comply, the infinitely looping smart contract would still be alive and running.
    It is a logistical nightmare to coordinate and shutdown all these nodes.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在以太坊区块链上，这种方法根本行不通！想象一下，如果全球范围内数万个节点几乎同时进入无限循环。为了阻止无限循环的智能合约，所有节点都需要在短时间窗口内关闭。只要一个节点未能遵守，无限循环的智能合约仍将处于活动状态并运行。协调和关闭所有这些节点是一场后勤噩梦。
- en: 'To resolve this issue, the concept of **gas** was introduced. A vehicle relies
    on an engine burning gas to move. When an engine runs out of gas, the vehicle
    stops. Ethereum introduced the gas concept to achieve the same effect. When submitting
    a transaction to the Ethereum blockchain, the requester is required to provide
    a max gas amount. For example, in the following example, a transaction request
    is submitted to call a HelloWorld smart contract with the maximum consumption
    not exceeding a specified gas value:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，引入了**gas**的概念。一辆车依靠燃烧汽油的发动机来运行。当发动机用完汽油时，车辆就会停止。以太坊引入了gas的概念来实现相同的效果。当向以太坊区块链提交交易时，请求者需要提供最大gas数量。例如，在下面的例子中，提交了一个调用HelloWorld智能合约的交易请求，其最大消耗不超过指定的gas值：
- en: '![](img/2ca65450-9dd9-4752-9c74-0ab213ac66fd.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ca65450-9dd9-4752-9c74-0ab213ac66fd.jpg)'
- en: When this request is validated by mining nodes, the HelloWorld smart contract
    is invoked. Every operation running on the EVM consumes a predefined quantity
    of gas. For example, ADD (sum operation) consumes three gas and MUL (multiplication
    operation) uses five gas. For illustration purposes, suppose a smart contract
    was badly written and contains an infinite loop. Furthermore, we assume each loop
    consists of  an ADD operation and a MUL operation. Therefore, a loop will consumes
    eight gas (three gas for ADD and five gas for MUL). After EVM executes enough
    loops,  the specified maximum gas value will be consumed. Consequently, EVM stops
    executing the contract. Therefore, all nodes would stop running at approximately
    the same time. Another advantage of gas is to make spamming monetarily expensive
    and, therefore, reduce the risk of hacking.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当此请求被挖矿节点验证时，将调用HelloWorld智能合约。在EVM上运行的每个操作都会消耗预定义数量的gas。例如，ADD（求和操作）消耗三个gas，而MUL（乘法操作）则使用五个gas。为了说明问题，假设一个智能合约写得很糟糕，并且包含一个无限循环。此外，我们假设每个循环由一个ADD操作和一个MUL操作组成。因此，一个循环将消耗八个gas（三个gas用于ADD，五个gas用于MUL）。在EVM执行足够多的循环后，将消耗指定的最大gas值。因此，EVM停止执行合约。因此，所有节点将在大约相同的时间停止运行。gas的另一个优点是使垃圾邮件攻击的成本昂贵化，从而降低了黑客风险。
- en: Gas is a metering unit for measuring consumption, just as the kilowatt is the
    unit for measuring electricity usage. Suppose that, in a month, a family uses
    210 KW. Before sending a bill to the family, the utility company first converts
    210 KW into USD, based on a predefined conversion rate. Suppose a unit of KW costs
    $0.2 USD, the total charge for the month is 0.2 * 210 = $42 USD. Similarly, gas
    usage is converted to Ether and charged to a requester. Ethereum allows a requester
    to specify the conversion rate when the transaction is submitted. A miner has
    the right to selectively process transactions by giving higher priority to transactions
    with higher rates. If a requester does not specify a rate, EVM uses a default
    rate, which varies. For example, in 2016 the rate was 1 gas = 0.00001 ETH. In
    2018, one gas = 0.00000002 ETH.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Gas是一种用于测量消耗的计量单位，就像千瓦是用于测量电力使用的单位一样。假设一个家庭在一个月内使用了210 KW。在向家庭发送账单之前，公用事业公司首先根据预先定义的转换率将210
    KW转换为美元。假设1千瓦的价格为0.2美元，那么一个月的总费用为0.2 * 210 = 42美元。类似地，燃气使用量被转换为以太并收取给请求者。以太坊允许请求者在提交交易时指定转换率。矿工有权选择性地处理交易，优先处理费率较高的交易。如果请求者未指定费率，则EVM使用默认费率，这个费率会有所不同。例如，2016年的费率是1
    gas = 0.00001 ETH。到2018年，一个gas = 0.00000002 ETH。
- en: Account
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 账户
- en: In [*Chapter 12*](67341a1f-a57c-4247-8b13-b78ce565d9cf.xhtml), *Introduction
    to Blockchain Technology*, we discussed addresses, an account-like concept, which
    is used to *host* balances of BTC. Bitcoin uses the UTOX model to manage the transfer
    of BTCs between addresses. However, one has to retrieve the entire ledger to find
    the balance of an address, which is very inconvenient. This inconvenience is due
    to the fact that Bitcoin does not support an on-chain Turing-complete programming
    language and it does not have the concept of states. On the other hand, Ethereum
    blockchain supports scripting languages and smart contracts; it can maintain state.
    Ethereum transactions manage state transitions by calling smart contract methods.
    Ethereum no longer needs to rely on UTOX to manage payments. Instead, it operates
    using accounts and balances via state transitions. State denotes the current balance
    of all accounts, along with other data. State is not stored on the blockchain.
    It is saved off-chain in a Merkle Patricia tree. This is because state is mutable
    data, while a block is not mutable. As with Bitcoin, a cryptocurrency wallet can
    be used to manage public and private *keys* or accounts, which are for receiving
    or sending ETH. In other words, Ethereum introduced the concept of **accounts**.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 12 章*](67341a1f-a57c-4247-8b13-b78ce565d9cf.xhtml) *区块链技术导论*中，我们讨论了地址，这是一个类似账户的概念，用于*承载*比特币的余额。比特币使用
    UTOX 模型来管理地址之间比特币的转移。然而，要找到地址的余额，必须检索整个账本，这非常不方便。这种不便之处在于比特币不支持链上图灵完备编程语言，也没有状态的概念。另一方面，以太坊区块链支持脚本语言和智能合约；它可以维护状态。以太坊交易通过调用智能合约方法来管理状态转换。以太坊不再需要依赖
    UTOX 来管理支付。相反，它通过状态转换使用账户和余额进行操作。状态表示所有账户的当前余额，以及其他数据。状态不存储在区块链上。它在离线保存在 Merkle
    Patricia 树中。这是因为状态是可变数据，而区块是不可变的。与比特币一样，加密货币钱包可用于管理公钥和私钥*或账户，用于接收或发送 ETH。换句话说，以太坊引入了**账户**的概念。
- en: 'Ethereum supports two types of account: externally owned accounts (controlled
    by human users via ownership of private keys) and contract accounts.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊支持两种类型的账户：外部拥有的账户（由人类用户通过拥有私钥控制）和合约账户。
- en: '**An externally controlled account**:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部可控制的账户**：'
- en: Has an Ether balance
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有以太币余额
- en: Can initiate transactions for either transferring Ether or triggering smart
    contract code
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以发起转移以太币或触发智能合约代码的交易
- en: Is controlled by users via private keys
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由用户通过私钥控制
- en: Has no associated smart contract code
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有关联的智能合约代码
- en: '**A contract account**:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合约账户**：'
- en: Has an Ether balance
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有以太币余额
- en: Has associated smart contract code
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有关联的智能合约代码
- en: Smart contract code execution is triggered by transactions or calls received
    from other contracts
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过从其他合约接收的交易或调用触发智能合约代码的执行
- en: '**For both types of account, there are four components**:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于这两种类型的账户，有四个组件**：'
- en: '`nonce`: For an externally owned account, it refers to the number of transactions
    sent from the account''s address; for a contract account, nonce is increased every
    time this contracts calls another contract'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nonce`：对于外部拥有的账户，它指的是从该账户地址发送的交易数量；对于合约账户，nonce 每次调用另一个合约时增加'
- en: '`balance`: It is the number of Wei owned by this address'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`balance`：这是该地址拥有的 Wei 的数量'
- en: '`storageRoot`: A 256-bit hash of the storage contents of the account'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`storageRoot`：账户存储内容的 256 位哈希'
- en: '`codeHash`: The hash of the code of this account is EVM; this is the code that
    gets executed when the address receives a call'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`codeHash`：该账户的代码的哈希是 EVM；这是当地址接收到调用时执行的代码'
- en: When Ether is transferred from contract accounts to an externally owned account,
    there is a fee, for instance 21,000 gas. When Ether is sent from an externally
    owned account to a contract account, the fee is higher, and depends on the smart
    contract code and data being sent in the transaction.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当从合约账户向外部拥有的账户转移以太币时，会收取费用，例如 21,000 gas。当从外部拥有的账户发送以太币到合约账户时，费用较高，并取决于交易中发送的智能合约代码和数据。
- en: 'Ethereum addresses have the following format:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊地址具有以下格式：
- en: Start with the prefix 0x, a common identifier for hexadecimal
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以 0x 为前缀开始，这是十六进制的常见标识符
- en: Rightmost 20 bytes of the Keccak-256 hash (big-endian) of the ECDSA public key
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ECDSA 公钥的 Keccak-256 哈希的右侧 20 字节（大端序）
- en: Since, in hexadecimal, two digits are stored in one byte, a 20-byte address
    is represented with 40 hexadecimal digits. A sample address is `0xe99356bde974bbe08721d77712168fa074279267`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在十六进制中，两个数字被存储在一个字节中，一个20字节的地址用40个十六进制数字表示。一个示例地址是`0xe99356bde974bbe08721d77712168fa074279267`。
- en: Oracle
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预言机
- en: As we already learned, identical Ethereum smart contracts are executed on nodes
    worldwide. What we have not emphasized yet is that all these nodes take the same
    set of inputs and should yield the same outputs. This is called **determinism**.
    Ethereum relies on this determinism since, in order to verify the validity of
    smart contracts and transactions, mining nodes have to yield the same results
    while running the same code with the same inputs.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经了解的，相同的以太坊智能合约在全球的节点上运行。但我们还没有强调的是，所有这些节点接受相同的输入，并应该产生相同的输出。这被称为**确定性**。以太坊依赖于这种确定性，因为为了验证智能合约和交易的有效性，挖矿节点必须在运行相同的代码和输入时产生相同的结果。
- en: This determinism raises a challenge. On one side, Ethereum is a generic platform
    that can be used to transfer any digital or digitized assets. Its smart contracts
    require data or inputs from external sources such as the internet, for example,
    stock prices, macroeconomic or microeconomic indices, and so on. Without access
    to these sources of information, use cases for smart contracts will be restricted
    to only a tiny fraction of their potential. On the other side, even with a tiny
    time difference, nodes may retrieve different information from an external source.
    With different inputs, nodes will end up with different outputs. Consequently,
    the determinism property does not hold. As a result, smart contracts are not permitted
    to call an internet URL or directly pull data from an external source. To address
    the paradox, the concept of the **oracle** is implemented.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这种确定性产生了一个挑战。一方面，以太坊是一个通用的平台，可以用于转移任何数字或数字化资产。其智能合约需要来自外部来源的数据或输入，如互联网上的股价、宏观经济或微观经济指标等。如果不能访问这些信息来源，智能合约的用例将仅限于其潜力的一小部分。另一方面，即使有微小的时间差异，节点可能从外部来源获取不同的信息。有了不同的输入，节点最终会得到不同的输出。因此，确定性性质不成立。因此，智能合约不允许调用互联网URL或直接从外部来源获取数据。为了解决这一悖论，实施了**预言机**的概念。
- en: According to Merriam-Webster, one of the definitions of oracle is *a shrine
    in which a deity reveals hidden knowledge or the divine purpose through such a
    person*. In the blockchain world, an oracle refers to the third-party or decentralized
    data feed services that provide external data. Oracles provide interfaces from
    the real world to the digital world. Oracle data is not part of the blockchain.
    It is saved off-chain.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 根据韦氏词典，预言机的其中一个定义是*神明透过神谕者揭示隐藏的知识或神圣的目的的神殿*。在区块链世界中，**预言机**指的是提供外部数据的第三方或去中心化数据源服务。预言机提供了从现实世界到数字世界的接口。预言机数据不是区块链的一部分，它被保存在链下。
- en: 'There are different types of oracle. Two of them are software oracles and hardware
    oracles:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 预言机有不同类型。其中两种是软件预言机和硬件预言机：
- en: '**Software oracles**: Normally refer to easily accessible online information
    such as stock index close prices, FX rates, economic news or weather forecasts,
    and so on. Software oracles are useful since they provide smart contracts with
    wide varieties and up-to-date information.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件预言机**：通常指轻松获取的在线信息，如股指收盘价、外汇汇率、经济新闻或天气预报等。软件预言机很有用，因为它们为智能合约提供了各种类型和最新信息。'
- en: '**Hardware oracles**: Normally refers to scanned information such as UPS delivery
    scanning, registered mail scanning, or supplier goods delivery scanning. This
    feed can be useful to activate a smart contract that is triggered upon an event''s
    occurrence.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬件预言机**：通常指扫描信息，如UPS交付扫描、挂号邮件扫描或供应商货物交付扫描。这种信息对于激活在事件发生时触发的智能合约是有用的。'
- en: Other concepts
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他概念
- en: Since Ethereum is built on top of Bitcoin, many of the basic concepts were already
    discussed in [*Chapter 12*](67341a1f-a57c-4247-8b13-b78ce565d9cf.xhtml), *Introduction
    to Blockchain Technology*. For the rest of this subsection, we briefly cover a
    few of them with a focus on the key differences.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 由于以太坊是建立在比特币之上的，许多基本概念已经在[*第12章*](67341a1f-a57c-4247-8b13-b78ce565d9cf.xhtml)中讨论过，*区块链技术简介*。在本小节的其余部分，我们将简要介绍其中一些，并重点关注关键区别。
- en: '**Consensus algorithms**:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共识算法**：'
- en: Like Bitcoin, PoW is its consensus algorithm. Unlike Bitcoin, Ethereum is working
    on switching to another consensus algorithm called **Proof-of-Stake** (**P****oS**)
    to significantly improve performance with its next release tag of serenity.
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与比特币一样，PoW是其共识算法。与比特币不同，以太坊正在计划切换到另一种称为**股权证明**（**PoS**）的共识算法，以在下一个版本的serenity中显著提高性能。
- en: '**Private blockchain**:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有区块链**：'
- en: In general, both Bitcoin and Ethereum are public blockchains since the network
    is open to anyone and a node can join freely.
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总的来说，比特币和以太坊都是公有区块链，因为网络对任何人开放，节点可以自由加入。
- en: Ethereum has variants on private chains. With private Ethereum, a node needs
    approval prior to joining a network. These blockchains are called private blockchains.
    Private blockchains are suitable for enterprise applications. Hyperledger and
    JPM Morgan's Quorum are examples of well-known private blockchain variants of
    Ethereum. Another example is Brainbot's hydrachain.
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊存在私有链的变体。在私有以太坊中，节点需要在加入网络之前获得批准。这些区块链称为私有区块链。私有区块链适用于企业应用。超级账本和JPM摩根的Quorum是以太坊私有区块链的著名变体的示例。另一个示例是Brainbot的hydrachain。
- en: '**Off-chain data**:'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链下数据**：'
- en: 'With the Bitcoin blockchain, we do not talk much about the concept of off-chain
    data. With the Ethereum blockchain, this topic needs to be discussed. There are
    multiple scenarios where data cannot be stored on-chain:'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在比特币区块链中，我们不太谈论链下数据的概念。在以太坊区块链中，需要讨论这个话题。存在多种情况，数据无法存储在链上：
- en: The first case is state variables. All data stored in a blockchain is immutable
    since the contents of a block are hashed and blocks are linked via these hashes.
    A tiny change in the contents of a block will lead to the reconstruction of all
    the blocks afterwards, which is obviously not feasible. However, state variables
    are, for instance, used to hold balances. They do change content to reflect the
    balance move. A solution is to save them off-chain.
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种情况是状态变量。在区块链中存储的所有数据都是不可变的，因为区块的内容被哈希，而区块通过这些哈希链接在一起。区块的内容发生微小变化将导致之后所有区块的重构，这显然是不可行的。然而，状态变量例如用于保存余额。它们会改变内容以反映余额变化。解决方案是将它们保存在链下。
- en: Oracles are another example, where information pulled from external sources
    is saved off-chain to be fed to smart contracts.
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 神谕是另一个例子，从外部来源提取的信息保存在链下，以供智能合约使用。
- en: Ethereum was invented to allow for trading generic digital or digitized assets.
    Metadata describing the underlying assets is saved off-chain.
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊的发明是为了允许交易通用数字或数字化资产。描述底层资产的元数据保存在链下。
- en: With Bitcoin, the distributed ledger has to be saved on all nodes in order to
    provide the information required for transaction validation. In the case of Ethereum,
    the balance of a cryptocurrency or digital asset can be directly retrieved from
    state variables. There is no need to browse the ledger to obtain balances in order
    to determine whether a _from address has sufficient funds. As a result, a full
    node can choose to keep only a portion of the ledger, that is, trim a ledger.
    The blocks being trimmed can be saved off-chain at a centralized location for
    future inquiries.
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于比特币，分布式分类账必须保存在所有节点上，以提供交易验证所需的信息。在以太坊的情况下，加密货币或数字资产的余额可以直接从状态变量中检索。无需浏览分类账即可获取余额以确定发送方地址是否有足够的资金。因此，完整节点可以选择仅保留分类账的一部分，即裁剪分类账。被裁剪的区块可以在链下的集中位置保存以供将来查询。
- en: '**Testing**:'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：'
- en: It is vital to thoroughly test, double-test, and triple-test a smart contract.
    Safety testing is critical. As explained earlier, in Ethereum's short history,
    there have been several high-profile hacking events, which occurred mainly due
    to buggy smart contract code.
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 彻底测试、反复测试和三重测试智能合约至关重要。安全测试至关重要。正如前面所述，在以太坊短暂的历史中，曾发生过几起备受关注的黑客事件，主要是由于有漏洞的智能合约代码。
- en: Ethereum is less safe than Bitcoin because of bugs introduced in smart contracts.
    Ethereum smart contracts are saved in chained blocks and are not encrypted. Hackers
    can easily spot and explore the vulnerability of buggy contract code and engage
    in attacks. On the other hand, like Bitcoin, data and transactions on Ethereum
    are relatively secure and not vulnerable to hacking. It is only the contract that
    a hacker can construct malicious transactions to call and abuse.
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于智能合约中引入的错误，以太坊比比特币不安全。以太坊智能合约保存在链式区块中，且未加密。黑客可以轻易发现并探索有漏洞的合约代码的脆弱性，并进行攻击。另一方面，像比特币一样，以太坊上的数据和交易相对安全，不容易受到黑客攻击。只有合约是黑客可以构造恶意交易来调用和滥用的。
- en: After a smart contract is deployed, it is permanent and immutable. Deployment
    of revised code will become a new contract with a different address. It has different
    state variables with new balances.
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约部署后，将会永久不变。部署修订后的代码将成为一个具有不同地址的新合约。它具有具有新余额的不同状态变量。
- en: Deployment of a smart contract is not free. It burns gas.
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约的部署不是免费的。它会消耗 gas。
- en: '**Digital signature, encryption, and public/private keys**:'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数字签名、加密和公钥/私钥**：'
- en: Bitcoin is a multi-signature process. In order for a transaction to be executed,
    both sides have to sign it. Ethereum is similar. In addition, deployment of a
    smart contract also requires digital signatures.
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比特币是一个多签名过程。为了执行交易，双方都必须签署它。以太坊类似。此外，智能合约的部署也需要数字签名。
- en: 'Like Bitcoin, with an Ethereum blockchain one can take a wallet application
    and generate a pair of public and private keys at the same time. An address is
    derived from a public key; that is, an address is just the hash of a public key.
    A sender uses a private key to sign a transaction and a receiver uses a public
    key to verify the authenticity of a signature. In general, a pair of public and
    private keys can be used to support the following two types of activity:'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像比特币一样，使用以太坊区块链可以同时生成一对公钥和私钥的钱包应用程序。地址由公钥派生；也就是说，地址只是公钥的哈希值。发送者使用私钥签署交易，接收者使用公钥验证签名的真实性。通常，一对公钥和私钥可以用于支持以下两种类型的活动：
- en: '**Sending a secret message**: The public key is used to encrypt a message and
    the private key is used to decrypt the message.'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发送秘密消息**：公钥用于加密消息，私钥用于解密消息。'
- en: '**Signature**: A private key is used to encrypt and generate a signature. The
    public key is used to decrypt for signature verification.'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**签名**：使用私钥进行加密并生成签名。 公钥用于解密以进行签名验证。'
- en: Block transaction contents in both Bitcoin and Ethereum are currently not encrypted.
    On the other hand, block contents in Zcash are encrypted.
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前比特币和以太坊的区块交易内容均未加密。另一方面，Zcash 的区块内容是加密的。
- en: Since every Ethereum transaction, including smart contracts, has to be digitally
    signed, a node only needs to accept digitally signed requests, potentially without
    the need to verify the entire transaction history. This approach can help to improve
    performance.
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于每个以太坊交易，包括智能合约，都必须经过数字签名，一个节点只需要接受数字签名的请求，可能无需验证整个交易历史。这种方法可以帮助提高性能。
- en: '**DAO**:'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DAO**：'
- en: DAO refers to a decentralized autonomous organization. One should not confuse
    it with the organization called *The DAO*, which is famously linked to a hacking
    event that resulted in the split of **Ethereum** into **Ethereum** (**ETH**) and **Ethereum
    Classic** (**ETC**).
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DAO 指的是分散自治组织。不应将其与名为 *The DAO* 的组织混淆，后者与一次黑客事件密切相关，导致了 **以太坊** 分裂为 **以太坊**
    (**ETH**) 和 **以太坊经典** (**ETC**)。
- en: DAO can be considered to consist of smart contracts, which is in term-built
    form decentralized codes, that is, a hierarchical structure of decentralized core
    → smart contract → DAO.
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DAO 可以被认为由智能合约组成，这是一种构建于分散代码之上的层次结构，即分散核心 → 智能合约 → DAO。
- en: Decentralized code is saved in multiple nodes. It will definitely run and cannot
    be stopped.
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分散的代码保存在多个节点上。它肯定会运行且无法停止。
- en: Smart contracts move money and digital assets.
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约转移货币和数字资产。
- en: DAO consists of smart contracts and creates an independent entity or community.
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DAO 由智能合约组成并创建独立实体或社区。
- en: '**DApp**:'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DApp**：'
- en: 'DApp is a big topic. We briefly mention it due to restrictions on the size
    of the book:'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DApp 是一个重要的话题。由于书籍大小的限制，我们只简要提及它：
- en: DApp refers to decentralized application and uses decentralized code.
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DApp 指的是分散应用程序，并使用分散代码。
- en: Ethereum is a general-purpose DApp platform.
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊是一个通用的DApp平台。
- en: An Ethereum DApp, like any other blockchain DApp, has a decentralized backend
    (for instance, smart contracts) and a centralized frontend (a client-side application
    for interacting with the blockchain). This architecture is due to the performance
    and limitations of today's blockchain.
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个以太坊DApp，像任何其他区块链DApp一样，具有去中心化的后端（例如，智能合约）和集中化的前端（用于与区块链交互的客户端应用程序）。这种架构是由今天区块链的性能和限制的原因所决定。
- en: As discussed before, a large portion of the backend, the database and business
    logic, is hosted off-ch.
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前面讨论过，大部分后端、数据库和业务逻辑都是托管在链外的。
- en: '**Ethereum issues**:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以太坊问题**：'
- en: 'Ethereum suffers from issues inherited from Bitcoin:'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊受到从比特币继承而来的问题的影响：
- en: Data can get lost due to forking or splitting. When there are two competing
    chains, the chain that cannot manage to grow fast has to be discarded in order
    to maintain data consistency on all nodes. Transactions on the short chain will
    get lost if they are not included in blocks of the winning chain without even
    being known by their original requesters!
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据可能因分叉而丢失。当存在两个竞争的链时，无法快速增长的链必须被丢弃，以保持所有节点上的数据一致性。如果交易未被包含在获胜链的区块中，那些在短链上的交易将会丢失，甚至被原始请求者所不知晓！
- en: Since data on-chain is not encrypted, a blockchain is not anonymous and not
    confidential.
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于链上数据并未加密，区块链不具备匿名性和保密性。
- en: Addresses are not verified. This is bad. When a receiver's address is wrongly
    entered, the coins being transferred to it will be permanent as transactions are
    permanent and coins are locked forever!
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地址未经验证。这很糟糕。如果接收者地址被错误输入，那么转移给它的硬币将是永久的，因为交易是永久的，硬币将永远锁定！
- en: The PoW algorithm consumes a huge amount of power. It is reported that some
    large mining operations in China require dedicated power stations to supply electricity.
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PoW算法消耗大量电力。据报道，中国一些大型挖矿操作需要专门的发电站供电。
- en: Performance
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能
- en: Another problem inherited from Bitcoin is that Ethereum is slow. It is many
    magnitudes slower than other platforms that host transaction data, for instance
    a traditional database. For example, it takes an average of 10 minutes to build
    a new record for Bitcoin. As a rule of thumb, after waiting for six new blocks
    to be built, a transaction is considered to be finalized (the same as a commitment
    in a database). This means that, on average, a requester will wait for one hour
    to see a request completed. In Ethereum, the average time for miners to build
    a block is 17 seconds and it is recommended you wait for 12 blocks before a transaction
    is confirmed. This is 12 * 17 = 204 seconds, or 3.4 minutes' waiting time for
    a user. Here, waiting for a few subsequent blocks to be built before confirming
    a transaction is useful. At any point, Ethereum can have competing chains. The
    waiting gives Ethereum sufficient time to work out the issue of having competing
    chains and reach a consensus.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 从比特币继承而来的另一个问题是以太坊运行速度缓慢。它比其他承载交易数据的平台慢得多，例如传统数据库。例如，比特币平均需要10分钟建立一个新的记录。按照一个经验法则，等待六个新区块建立完毕后，一笔交易就会被视为完成（就像在数据库中的确认一样）。这意味着，在平均情况下，请求者将等待一个小时才能看到请求完成。在以太坊中，矿工建立区块的平均时间是17秒，建议在交易确认前等待12个区块。这是12
    * 17 = 204秒，即用户等待3.4分钟的时间。在这里，在确认交易前等待一些连续的区块建立是有用的。在任何时候，以太坊都可能存在竞争链。等待给予以太坊充足的时间来处理竞争链问题并达成共识。
- en: Throughput
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 吞吐量
- en: 'Throughput is a measure of how many units of information a system can process
    in a given time window. To measure performance on a transaction platform, throughput
    is expressed in terms of **TPS**, transactions per second:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 吞吐量是衡量系统在一定时间窗口内可以处理多少信息单位的指标。为了衡量交易平台的性能，吞吐量用**TPS**表示，即每秒交易数量：
- en: For Bitcoin, TPS can be computed as follows. A Bitcoin block normally contains
    1,500-2,000 transactions. Let's use the high-end number, 2,000\. Since it takes
    60 minutes to confirm these 2000 transactions, its TPS = 2,000 / (60*60) = 0.56;
    that is, only half a transaction per second. A similar calculation for Ethereum
    yields a TPS = 2,000 / 204 = 9.8, almost 10 transactions per second—much better
    than Bitcoin. Led by Vitalik, the Ethereum Foundation is working on the sharding
    approach, targeting at increasing TPS by 80 times.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于比特币，TPS可以计算如下。比特币区块通常包含1500-2000笔交易。我们使用最高数值2000。由于确认这2000笔交易需要60分钟，所以其TPS
    = 2,000 / (60*60) = 0.56；也就是说，每秒仅半个交易。对以太坊进行类似的计算，得到TPS = 2,000 / 204 = 9.8，几乎是10笔交易每秒——比比特币要好得多。以太坊基金会正在采用夏丁（sharding）方法，由维塔利克（Vitalik）领导，旨在将TPS提高80倍。
- en: For comparison, VISA has an average TPS  of 2000 with a peak at 40,000\. A high-performance
    database such as VoltDB can handle over a million insertions per second. A stock
    exchange can match thousands of trades per second.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以VISA为例，平均TPS为2000，峰值为40,000。像VoltDB这样的高性能数据库可以处理每秒超过一百万次插入。证券交易所可以匹配成千上万笔交易。
- en: However, this comparison is not complete. From a business point of view, a credit
    card or exchange transaction is finalized only when it is cleared and settled.
    For credit cards, a billing cycle is normally 2-3 months. A stock exchange takes
    three days to settle a transaction. In this sense, Ethereum is much faster, since
    on the blockchain transaction and settlement occur simultaneously.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，这种比较并不完整。从商业角度来看，只有在清算和结算时，信用卡或交易才最终确定。对于信用卡，账单周期通常为2-3个月。证券交易所需要三天来结算一笔交易。从这个意义上讲，以太坊要快得多，因为在区块链上交易和结算是同时进行的。
- en: When compared with a database, Ethereum is at a disadvantage. A database commitment
    can take place right after the insertion, updating, or deletion of a transaction.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与数据库相比，以太坊处于不利地位。数据库提交可以在插入、更新或删除事务后立即进行。
- en: 'These are the reasons causing Ethereum''s slowness:'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些是导致以太坊速度变慢的原因：
- en: Every full node must execute the same smart contract code.
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个完整节点必须执行相同的智能合约代码。
- en: As the Ethereum network becomes larger, the time for reaching a consensus will
    take longer, as it takes time to transfer data between a growing number of nodes
    to verify transactions, access info, and communicate.
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着以太坊网络规模的增长，达成共识所需的时间将变长，因为在越来越多的节点之间传输数据来验证交易、访问信息和通信需要时间。
- en: 'There are ways to increase the throughput. The following are a few:'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有方法可以增加吞吐量。以下是一些：
- en: When the block size is increased, more transactions can be hosted in a block
    and a higher TPS can be obtained.
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当区块大小增加时，可以在一个区块中托管更多的交易，并且可以获得更高的TPS。
- en: Running multiple chains in parallel. Enterprise chains such as Hyperledger Fabric
    and R3's Corda use this approach.
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行运行多个链。企业链，如超级账本（Hyperledger Fabric）和R3的Corda使用这种方法。
- en: State channel design helps to increase throughput. An example of a state channel
    implementation for Ethereum is Raiden. Micro Raiden was launched in November 2017\.
    The idea behind state channels is to use off-chain for a transaction between two
    parties and use on-chain for the settlement of the transaction. Off-chain transactions
    are another topic worth an in-depth discussion, but not in this book.
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态通道设计有助于提高吞吐量。以太坊的状态通道实现示例是雷电网络（Raiden）。微型雷电网络于2017年11月推出。状态通道背后的想法是在两个参与方之间使用离链进行交易，并在链上进行交易结算。离链交易是另一个值得深入讨论的话题，但不在本书中。
- en: Proof-of-Stake (PoS)
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 股权证明（PoS）
- en: The PoS consensus algorithm is based on the principle that when a miner owns
    more coins, the miner has more power to mine or validate transactions, a higher
    chance of building new blocks, and therefore a higher chance of receiving more
    reward coins. PoS is energy-efficient and can reach a consensus much faster.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: PoS共识算法基于这样一个原则，即当一个矿工拥有更多的硬币时，该矿工具有更多的权力来挖掘或验证交易，建立新区块的机会更高，因此获得更多奖励硬币的机会也更高。PoS是节能的，并且可以更快地达成共识。
- en: 'Several randomization methods are available for selecting a miner to build
    the next block, not just based on Ether balances of externally owned accounts,
    in order to avoid a scenario where the richest miner is always selected:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种随机化方法可用于选择构建下一个区块的矿工，而不仅仅是基于外部拥有账户的以太坊余额，以避免最富有的矿工始终被选择的情况：
- en: '**Randomized block selection***:* Uses a formula to look for the lowest hash
    value in combination with the size of the stake for selecting a miner.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**随机区块选择***:* 使用一个公式来寻找组合中最低的哈希值以及选择矿工的股份大小。'
- en: '**Coin age-based selection***:* Coins owned for long enough, say 30 days, are
    eligible to compete for the next block. A miner with older and larger sets of
    coins has a better chance of being granted the role.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**货币年龄选择***:* 拥有足够长时间（比如 30 天）的货币有资格竞争下一个区块。拥有更老和更大一组货币的矿工有更好的机会被授予该角色。'
- en: '**Delegated Proof-of-Stake***:* This implementation chooses a limited number
    of nodes to propose and validate blocks to the blockchain.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**委托股权证明***:* 该实现选择了一定数量的节点来提出和验证区块到区块链。'
- en: '**Randomized Proof-of-Stake***:* Each node is selected randomly, using a verifiable
    random beacon to build the new block.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**随机化股权证明***:* 每个节点都是随机选择的，使用可验证的随机信标来构建新区块。'
- en: Ethereum is working on replacing PoW with PoS in a new tagged release.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊正在努力在一个新的标记版本中用 PoS 替换 PoW。
- en: Casper
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Casper
- en: PoS is being worked on as a replacement to the computationally inefficient PoW
    algorithm. PoS is not being fully implemented and upgraded on mainnet due to concerns
    about an issue such as emerging of a set of centralized supernodes (which receive
    an outsized role in building the new blocks). Casper is the Ethereum community's
    effort to transition from PoW to PoS.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: PoS 正在被作为对计算效率低下的 PoW 算法的替代而进行研究。由于对出现一组集中化超级节点（在构建新区块方面起到过大作用）等问题的担忧，PoS 尚未完全在主网上实施和升级。Casper
    是以太坊社区努力实现从 PoW 到 PoS 的过渡。
- en: 'In the Per Casper protocol, validators (the Ethereum equivalent of miners in
    Bitcoin) set aside a portion of their Ether as a stake. When a validator identifies
    a candidate block to build, Ether is bet on that block by the validator. If the
    block is indeed added to the chain, the validator is rewarded based on the size
    of his or her bet. Validators acting maliciously will be penalized by having their
    stakes removed. Casper has two main projects: Casper FFG and Casper CCB.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Per Casper 协议中，验证者（比特币中的矿工的以太坊等效物）将部分 Ether 作为赌注放在一边。当验证者确定要构建的候选区块时，验证者将在该区块上下赌注。如果该区块确实添加到链上，验证者将根据其赌注的大小获得奖励。行为恶意的验证者将被惩罚，其赌注将被移除。Casper
    有两个主要项目：Casper FFG 和 Casper CCB。
- en: Casper FFG (Friendly Finality Gadget; Vitalik's version of Casper) is a hybrid
    algorithm running on PoW but treating every 50^(th) block on the network as a
    PoS checkpoint. Validators vote on the finality of these blocks and write them
    into the blockchain. FFG is meant to be an intermediate step in a transition to
    a complete adoption of PoS. FFG is already running on a test network. It will
    soon be implemented completely on mainnet.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Casper FFG（友好最终性小工具； Vitalik 版本的 Casper）是一个混合算法，运行在 PoW 上，但将网络上每 50^(th) 个区块视为
    PoS 检查点。验证者对这些区块的最终性进行投票，并将其写入区块链。FFG 旨在成为向完全采用 PoS 过渡的中间步骤。FFG 已经在测试网络上运行。它将很快完全实现在主网上。
- en: The Casper **CBC** (**Correct by Construction**, Vlad's Casper) is more dramatic.
    CBC focuses on designing protocols where one can extend local views of a node's
    estimate of safety to achieve consensus safety. So far, the approach has been
    merely researched and no release plan is available for making it to Ethereum.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Casper **CBC**（**Correct by Construction**，Vlad's Casper）更加激动人心。CBC 专注于设计协议，其中一个节点对安全性的局部视图可以扩展到达成共识安全。到目前为止，该方法仅仅是研究，并且没有发布计划可供其进入以太坊。
- en: Plasma
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Plasma
- en: In 2017, Buterin and Joseph Poon presented their idea, which called for scaling
    up Ethereum's performance, that is, increasing TPS. Like the state channel design,
    plasma is a technique for conducting off-chain transactions while relying on the
    underlying Ethereum blockchain to provide its security. Therefore, plasma belongs
    to the group of *off-chain* technologies. Truebit is another example in this group.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 2017 年，Buterin 和 Joseph Poon 提出了他们的想法，呼吁扩展以太坊的性能，即增加 TPS。与状态通道设计类似，Plasma 是一种在链下进行交易的技术，同时依赖底层以太坊区块链提供安全性。因此，Plasma
    属于 *链下* 技术的一部分。Truebit 是该组中的另一个例子。
- en: 'Plasma works as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Plasma 的工作方式如下：
- en: Smart contracts are created on the main-chain and served to be the roots for
    Plasma child-chains. They define rules for child chains and are called to move
    assets between the main-chain and child-chains.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约是在主链上创建的，并被视为 Plasma 子链的根。它们定义了子链的规则，并被调用来在主链和子链之间移动资产。
- en: A child-chain is created with its own consensus algorithm, for instance, PoS.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建具有自己共识算法的子链，例如 PoS。
- en: Deploy smart contracts, which define the actual business rules, to the child-chain.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署智能合约，定义实际的业务规则，到子链。
- en: Digital assets being created on the main-chain are transferred onto the child-chain
    by calling the plasma rooting contracts.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主链上创建的数字资产通过调用 plasma 根合约转移到子链上。
- en: The block builders on the child-chain periodically commit a validation to the
    main-chain, proving that the current state of the child-chain is valid, in accordance
    with the consensus rules. A user sends and gets requests executed without ever
    interacting with the main-chain directly.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子链上的区块构建者定期向主链提交验证，证明子链的当前状态符合共识规则。用户发送和执行请求，而不需要直接与主链交互。
- en: 'Plasma has these advantages:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Plasma 具有以下优势：
- en: Allows an Ethereum blockchain to handle larger datasets
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许以太坊区块链处理更大的数据集
- en: Enables more complicated applications to run on the blockchain
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用更复杂的应用在区块链上运行
- en: Increases throughput greatly
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大大增加吞吐量
- en: The Ethereum community is actively working on the implementation of Ethereum
    plasma. Plasma-MVP (minimum viable product) is being worked on first, to gain
    experience and test its viability. There is the possibility of releasing plasma-mvp
    by the end of 2018\. Plasma's release will follow in one or more quarters.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊社区正在积极开发以太坊 plasma. Plasma-MVP（最小可行产品）首先正在进行开发，以积累经验并测试其可行性。有可能在 2018 年底发布
    plasma-mvp。Plasma 的发布将在一个或多个季度内进行。
- en: Sharding
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分片
- en: 'Vitalik initially proposed the sharding idea for scaling Ethereum blockchain.
    His proposal was to chop the blockchain into hundreds or thousands of independent
    pieces: shards. All shards share the same consensus algorithm and security model.
    These shards will not handle different types of task and do not need to be validated
    by all full nodes. Instead, each shard serves a single purpose and therefore is
    very efficient at it. In summary, sharding splits up the state of the network
    into multiple shards, where each shard has its own transaction history and a portion
    of the network''s state. To implement the sharding idea on the blockchain, a Validator
    Management Contract is needed, which is a smart contract. It verifies each shard''s
    block headers, maintains validators'' stakes, and selects validators between shards
    pseudo-randomly. Sharding provides an alternative way to increase Ethereum''s
    performance dramatically and could be implemented as early as 2020.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Vitalik 最初提出了用于扩展以太坊区块链的分片概念。他的提案是把区块链分割成数百或数千个独立的碎片：分片。所有分片共享相同的共识算法和安全模型。这些分片将不处理不同类型的任务，并且不需要所有全节点进行验证。相反，每个分片都用于单一目的，因此在该目的上非常高效。总之，分片将网络状态分割为多个分片，每个分片都有自己的交易历史和网络状态的一部分。为了在区块链上实现分片概念，需要一个验证者管理合约，这是一个智能合约。它验证每个分片的区块头，维护验证者的利益，并在分片之间伪随机地选择验证者。分片提供了一种替代方式，可以戏剧性地提高以太坊的性能，并且可能在
    2020 年早期实施。
- en: Summary
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Ethereum was developed on top of Bitcoin by introducing smart contracts along
    with Turing-complete scripting languages such as solidity. Ethereum is a general-purpose
    platform for DApp development. The platform is very popular. However, Ethereum
    is not mature yet. Compared to Bitcoin, it is more vulnerable to hacking, since
    any human errors in writing a smart contract are visible to everybody. It inherited
    the performance issue from Bitcoin. Many initiatives are ongoing to address this
    scalability problem. In the next chapter, we will dive into the details of solidity,
    the most popular language for writing Ethereum smart contracts.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊是在比特币的基础上开发出来的，引入了智能合约以及像 solidity 这样的图灵完备脚本语言。以太坊是一个面向 DApp 开发的通用平台。该平台非常受欢迎。然而，以太坊还不够成熟。与比特币相比，它更容易受到黑客攻击，因为编写智能合约时的任何人为错误都会被所有人看到。它从比特币那里继承了性能问题。目前有许多倡议正在解决这个可伸缩性问题。在接下来的章节中，我们将深入了解
    solidity，这是编写以太坊智能合约的最流行语言。
