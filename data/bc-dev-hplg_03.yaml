- en: Setting the Stage with a Business Scenario
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以业务场景为背景设定舞台
- en: The first two chapters were focused on setting the stage and defining the landscape
    of a blockchain project. We now understand how the technology works within a business
    framework and how the various Hyperledger projects aim to solve the problem of
    time and trust.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 前两章着重于搭建一个区块链项目的舞台，并定义了一个业务框架和各种Hyperledger项目如何解决时间和信任问题。
- en: With an understanding of the components that make up Hyperledger Fabric, we
    will now delve into application design and implementation considerations. The
    next few chapters will take you through the steps of creating your very own smart
    contract and then integrating it to an application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过了解构成Hyperledger Fabric的组件，我们现在将深入研究应用设计和实施方面的考虑。接下来的几章将带您完成创建自己的智能合约的步骤，然后将其集成到一个应用程序中。
- en: 'In order to make these exercises relevant, we will leverage a business use
    case with its roots in some older civilizations: trading and letters of credit.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这些练习相关，我们将利用一个源自一些古老文明的业务用例：贸易和信用证。
- en: The chapter's objective will be to introduce the business concept of letter
    of credit, walk you through the sample scenario we selected, and conclude by setting
    up our development environment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是介绍信用证的业务概念，带您走过我们选择的样例场景，并通过设置我们的开发环境来结束。
- en: 'In this chapter, we will:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Explore letters of credit
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索信用证
- en: Review our simplified business scenario
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾我们简化的业务场景
- en: Set up our development environment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置我们的开发环境
- en: Trading and letter of credit
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 贸易和信用证
- en: Step back in history to a time when merchants traveled across continents to
    buy cloth in one country to sell in another country. As a Florentine wool merchant,
    you might make a journey to Amsterdam to buy fine wool in that newly formed city-state,
    whose port collected resources from the whole of Northern Europe and beyond. You
    could then transport the wool to Florence, where it could be sold to tailors making
    fine garments for their wealthy clients. We're talking about 1300 AD—a time when
    it was not safe to carry gold or other precious metals as a form of currency to
    buy and sell goods. What was necessary was a form of currency that worked across
    country boundaries, one that could be used in Amsterdam and Florence, or anywhere!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 退回到历史的某个时刻，当商人穿越大陆购买一国的布料去另一个国家出售时。作为佛罗伦萨的羊毛商人，你可能会前往阿姆斯特丹购买这个新成立的城邦的优质羊毛，该港口汇集了整个北欧乃至更远地区的资源。然后你可以将羊毛运到佛罗伦萨，在那里可以卖给为富有客户制作精美服装的裁缝。我们谈论的是公元1300年——这是一个携带黄金或其他贵重金属作为货币购买和出售商品不安全的时代。必需的是一种跨越国界的货币形式，可以在阿姆斯特丹和佛罗伦萨以及任何地方使用！
- en: Marco Polo had been to China and had seen how commerce was conducted in that
    thriving economy. At the heart of the successful Khan empire were advanced financial
    techniques that we would recognize today. Fiat currencies, paper money, promissory
    notes, and letters of credit all arrived in Europe by way of China. Marco Polo
    brought these ideas back to Europe—they helped form and grow a merchant banking
    industry for a Europe emerging after the fall of the Roman Empire.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 马可·波罗曾去过中国，看到了那个繁荣经济中的商业活动是如何进行的。在成功的可汗帝国的核心是我们今天会认识到的先进金融技术。法定货币、纸币、本票和信用证都是通过中国传入欧洲的。马可·波罗将这些想法带回了欧洲——它们帮助形成并发展了罗马帝国灭亡后新兴的欧洲的一个商业银行业。
- en: The importance of trust in facilitating trade
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信任在促进贸易中的重要性
- en: Our Florentine merchant could now contact his banker to say that he wanted to
    buy wool in Amsterdam, and the bank would in return give him a letter of credit,
    in exchange for payment on account. This letter could have various stipulations,
    such as the maximum amount for the trade, how it would be paid (at once or in
    parts), what goods it could be used for, and so forth. The merchant would now
    travel to Amsterdam, and after selecting wool from a wool merchant, he would offer
    the letter or credit as payment. The Amsterdam merchant would happily exchange
    the wool for the letter because Florentine bankers were famed throughout Europe
    as being trustworthy when it came to money. The Amsterdam merchant could bring
    the letter of credit to his banker, who in turn would credit their account. Of
    course, the Florentine and Amsterdam bankers charged their respective clients—the
    merchants—for this service! It was good for everyone.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的佛罗伦萨商人可以联系他的银行家，告诉他他想在阿姆斯特丹购买羊毛，银行将以账上付款的方式给他出具一张信用证。这封信可以有各种规定，例如交易的最大金额、如何支付（一次性或分期付款）、可以用于哪些商品等。商人现在将前往阿姆斯特丹，在羊毛商选择羊毛后，他将提供信用证作为付款。阿姆斯特丹商人会高兴地将羊毛与信用证交换，因为当涉及到金钱时，佛罗伦萨银行家在整个欧洲都以信誉良好而闻名。阿姆斯特丹商人可以将信用证带给他的银行家，后者将会给他的账户记入贷方。当然，佛罗伦萨和阿姆斯特丹的银行家都会向各自的客户——商人——收取这项服务的费用！这对每个人都有好处。
- en: Periodically, Amsterdam bankers and the Florentine bankers would meet up to
    settle their accounts, but this was of no importance to the wool trader and wool
    merchant. Effectively, what was happening was that the Florentine and Amstel merchants
    were using the trust between their respective bankers to establish a trust relationship
    with each other—a very sophisticated idea when you think about it. This is why
    the letter of credit process remains a fundamental way of conducting business
    worldwide to this day.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 定期，阿姆斯特丹银行家和佛罗伦萨银行家会见面来结算账户，但这对于羊毛贸易商和羊毛商人来说毫无意义。事实上，发生的是佛罗伦萨和阿姆斯特丹商人利用各自银行家之间的信任来建立彼此之间的信任关系——这是一个非常复杂的想法，当你想一想就会明白。这就是为什么信用证流程至今仍然是全球业务的基本方式。
- en: The letter of credit process today
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 今日信用证流程
- en: However, over time, due to massive globalization of trade and the explosion
    of the financial industry, the number of financial institutions involved in the
    letter of credit process has exploded! Nowadays, there could be over 20 intermediary
    financial institutions involved in the process. This requires coordination of
    many people and systems, resulting in excessive time, cost, and risk throughout
    the process for both merchants and banks alike.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着贸易的大规模全球化和金融行业的爆炸性增长，参与信用证流程的金融机构数量激增！如今，可能有超过 20 家中介金融机构参与其中。这需要协调许多人和系统，从而导致整个过程对商家和银行都产生了过多的时间、成本和风险。
- en: The promise of blockchain is to provide a logically singular but physically
    distributed system that provides a platform for a low-friction letter of credit
    process. The characteristics of such a system would include greater transparency,
    timeliness, and automation (resulting in lower cost), and new features such as
    incremental payment.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链的承诺是提供一个逻辑上单一但物理上分布式的系统，为低摩擦的信用证流程提供平台。这样的系统特征将包括更大的透明度、及时性和自动化（导致成本降低），以及增量支付等新特性。
- en: Business scenario and use case
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 商业场景和用例
- en: International trade includes the kinds of situations that illustrate the inefficiencies
    and distrust in real-world processes that blockchains were designed to mitigate.
    So, we have selected an element of an import-export scenario with simplified versions
    of transactions carried out in the real world as our canonical use case for practical
    exercises in the next few chapters.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 国际贸易包括那些说明了区块链旨在减轻的现实世界流程中的低效率和不信任的情况。因此，我们选择了一个进口-出口场景的元素，其中包含在接下来几章的实际练习中进行的简化版本的交易作为我们的规范用例。
- en: Overview
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: 'The scenario we will describe involves a simple transaction: the sale of goods
    from one party to another. This transaction is complicated by the fact that the
    buyer and the seller live in different countries, so there is no common trusted
    intermediary to ensure that the exporter gets the money he was promised and the
    importer gets the goods. Such trade arrangements in today''s world rely on:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将描述的情景涉及一笔简单的交易：从一方向另一方出售货物。由于买方和卖方住在不同的国家，这笔交易变得复杂，因此没有共同的可信介质来确保出口商得到承诺的款项以及进口商得到货物。今天世界上的贸易安排依赖于以下内容： '
- en: Intermediaries that facilitate payments and physical transfer of goods
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促成付款和货物实际转移的中介
- en: Processes that have evolved over time to enable exporters and importers to hedge
    their bets and reduce the risks involved
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着时间的推移已发展出来的流程，以使出口商和进口商对冲风险并降低风险
- en: Real-world processes
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现实世界中的流程
- en: The intermediaries that facilitate payment are the respective banks of the exporter
    and the importer. In this case, the trade arrangement is fulfilled by the trusted
    relationships between a bank and its client, and between the two banks. Such banks
    typically have international connections and reputations to maintain. Therefore,
    a commitment (or promise) by the importer's bank to make a payment to the exporter's
    bank is sufficient to trigger the process. The goods are dispatched by the exporter
    through a reputed international carrier after obtaining regulatory clearances
    from the exporting country's government.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 促进支付和货物实际转移的中间人是出口商和进口商的各自银行。在这种情况下，贸易安排通过银行与其客户之间以及两家银行之间的信任关系来实现。这些银行通常具有国际联系和声誉需要维护。因此，进口商银行的承诺（或承诺）向出口商银行付款足以触发流程。出口商从出口国政府获得监管清关许可后，通过知名的国际承运人发运货物。
- en: Proof of delivery to the carrier is sufficient to clear payment from the importer's
    bank to the exporter's bank, and such clearance is not contingent on the goods
    reaching their intended destination (it is assumed that the goods are insured
    against loss or damage in transit.) The promise made by the importer's bank to
    pay the exporter's bank specifies a list of documents that are required as proof
    of dispatch, and the precise method of payment to be made immediately or over
    a period. Various regulatory requirements must be fulfilled by the exporter before
    getting documentary clearances that allow them to hand off the goods to the carrier.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 向承运人交付的交付证明足以使进口商银行向出口商银行清算付款，这种清算不取决于货物是否到达预定目的地（假设货物在运输过程中已经购买了丢失或损坏的保险）。进口商银行向出口商银行做出的支付承诺指定所需的一系列文件作为发运证明，以及立即或分期付款的具体支付方式。出口商必须在交付货物给承运人之前满足各种监管要求，以获得文件清关许可。
- en: Simplified and modified processes
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化和修改过的流程
- en: Our use case will follow a simplified version of the preceding process, with
    certain variations to demonstrate the value of blockchain in facilitating this
    trade. A payment promise is made by the importer's bank to the exporter's bank
    in two installments. The exporter obtains a clearance certificate from the regulatory
    authority, hands off the goods to the carrier, and then obtains a receipt. The
    production of the receipt triggers the first payment installment from the importer's
    bank to the exporter's bank. When the shipment has reached the destination port,
    the second and final payment installments are made, and the process concludes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的用例将遵循前述流程的简化版本，带有某些变化以展示区块链在便利贸易方面的价值。进口商的银行向出口商的银行承诺支付两期付款。出口商从监管机构获得清关证书，将货物交由承运人，然后获得收据。收据的出具触发进口商银行向出口商银行支付第一期付款。当货物到达目的港口时，进行第二和最后一期的支付，流程结束。
- en: Terms used in trade finance and logistics
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 贸易金融和物流中使用的术语
- en: 'The following terms are used to refer to certain instruments and artifacts
    that are in play in our trade scenario. The application we will build in this
    chapter uses very simplified forms of these instruments:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下术语用于指代贸易场景中正在使用的某些工具和物品。我们在本章中构建的应用程序使用这些工具的非常简化形式：
- en: '**Letter of credit**: As we have seen at the beginning of the chapter, this
    refers to a bank''s promise to pay an exporter upon presentation of documentary
    proof of goods having been shipped. Called **L/C** for short, this document is
    issued by the importer''s bank at the request of its client: the importer. The
    L/C states the list of documents that constitute proof of shipment, the amount
    to be paid, and the beneficiary (the exporter in our case) of that amount. A sample
    L/C is illustrated in the following screenshot:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信用证**：正如我们在本章开头所见，这指的是银行承诺在出具货物装运的文件证明后向出口商付款。简称L/C，此文件由进口商的银行根据其客户（进口商）的要求出具。L/C列明了构成装运证明的文件清单、要支付的金额以及受益人（在我们的案例中为出口商）的金额。下图显示了一份样本L/C：'
- en: '![](img/fe15c7ed-b9ff-4c76-8ccf-4b449ac61d4c.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe15c7ed-b9ff-4c76-8ccf-4b449ac61d4c.png)'
- en: We will introduce small variations in our use case to make this instrument comprehensible
    to the reader. Firstly, the L/C will be issued to the exporter's bank rather than
    directly to the exporter. Secondly, the L/C states that payment will be made in
    two identical installments, the first upon production of two documents and the
    second upon the goods reaching the destination.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的使用案例中引入一些小的变化，以使读者能够理解此工具。首先，信用证将由出口商的银行开具，而不是直接由出口商开具。其次，信用证规定支付将分两期进行，第一期在出具两份文件后支付，第二期在货物到达目的地后支付。
- en: '**Export license**: This refers to the approval given by the regulatory authority
    in the exporter''s country for the shipment of the specified goods. In this book,
    we will refer to it as E/L for short. A sample E/L is illustrated in the following
    screenshot:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**出口许可证**：指出口国监管机构对指定货物的运输所给予的批准。在本书中，我们将其简称为E/L。下图显示了一份样本E/L：'
- en: '![](img/622d2a54-2b10-4c02-a572-ecbc0b11e235.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/622d2a54-2b10-4c02-a572-ecbc0b11e235.png)'
- en: '**Bill of lading**: This is a document issued by the carrier to the exporter
    once it takes possession of the shipment. Called B/L for short, it simultaneously
    serves as a receipt, a contract obliging the carrier to transport the goods to
    a specified destination in return for a fee, and a title of ownership of the goods.
    This document is also listed in the L/C and serves as proof of shipment that will
    automatically trigger a payment clearance. A sample B/L is illustrated in the
    following screenshot:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提单**：这是承运人在接收货物后向出口商出具的文件。简称B/L，它同时起到收据、合同（约束承运人将货物运送到指定目的地以换取报酬）、货物所有权证明的作用。该文件也列在信用证中，并作为装运证明，将自动触发付款结清。下图显示了一份样本B/L：'
- en: '![](img/3646e790-419d-4fee-9b46-057afb898445.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3646e790-419d-4fee-9b46-057afb898445.png)'
- en: Shared process workflow
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共享流程工作流程
- en: Every instance of a test case scenario presented in this chapter takes a long
    period of time to complete, involves interactions among different sets of entities
    at different times, and has many different moving parts that are difficult to
    keep track of. We hope to simplify this process using our workflow. Implemented
    on a blockchain, the sequences of transactions described in the following steps
    (and illustrated in the following diagram) can be carried out in an irrevocable
    and non-repudiable manner. In this sequence of events, we assume a straight, linear
    narrative where parties are in agreement with each other and nothing untoward
    happens; guards are built in the process only to catch errors.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节中呈现的每一个测试用例场景都需要很长时间才能完成，涉及不同时间段不同集合实体之间的互动，并且有许多不同的移动部分，很难跟踪。我们希望使用我们的工作流程来简化这个过程。在区块链上实施的交易序列描述如下步骤（并在下图中说明）可以以不可撤销和不可否认的方式进行。在这一事件序列中，我们假设一个笔直的、线性的叙述，各方互相达成协议，没有发生任何意外事件；过程中只内置了一些用于捕捉错误的保障。
- en: 'The transactions in our workflow are as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们工作流程中的交易如下所示：
- en: Importer requests goods from the exporter in exchange of money
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进口商请求出口商以货物换取货款
- en: Exporter accepts the trade deal
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出口商接受交易协议
- en: Importer asks its bank for an L/C in favor of the exporter
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进口商向其银行要求开具一份有利于出口商的信用证
- en: The importer's bank supplies an L/C in favor of the exporter, and payable to
    the latter's bank
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进口商的银行向出口商提供一份有利于出口商且可支付给后者银行的L/C
- en: The exporter's bank accepts the L/C on behalf of the exporter
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出口商的银行代表出口商接受信用证
- en: Exporter applies for an E/L from the regulatory authority
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出口商向监管机构申请E/L
- en: Regulatory authority supplies an E/L to the exporter
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监管机构向出口商提供 E/L
- en: Exporter prepares a shipment and hands it off to the carrier
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出口商准备了一批货物并交给承运人
- en: The carrier accepts the goods after validating the E/L, and then supplies a
    B/L to the exporter
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 承运人在验证 E/L 后接受货物，然后向出口商提供 B/L
- en: The exporter's bank claims half the payment from the importer's bank
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出口商的银行向进口商的银行索取一半支付款
- en: The importer's bank transfers half the amount to the exporter's bank
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进口商的银行将一半金额转账给出口商的银行
- en: The carrier ships the goods to the destination
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 承运人将货物运送到目的地
- en: The importer's bank pays the remaining amount to the exporter's bank
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进口商的银行向出口商的银行支付剩余金额
- en: 'Here is a diagram to explain the transaction workflow:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个解释交易流程的图表：
- en: '![](img/27afe277-63bb-4a67-b8c5-ba3abd1d32e0.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27afe277-63bb-4a67-b8c5-ba3abd1d32e0.png)'
- en: Shared assets and data
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共享资产和数据
- en: The participants in the previous workflow must have some information in common
    that gives them a view into the trade arrangement and its progress at any given
    moment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个工作流程中的参与者必须有一些共同的信息，让他们能够随时查看交易安排及其进展。
- en: 'The following is a table of the assets owned by the participants, which are
    shared with each other to drive the process from one stage to the next. This includes
    documentary and monetary assets:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是参与者拥有的资产表，这些资产与其他人共享，驱动流程从一阶段到下一阶段。这包括文件和货币资产：
- en: '| **Asset type** | **Asset attributes** |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| **资产类型** | **资产属性** |'
- en: '| Letter of credit | ID, issue date, expiration date, issuer, beneficiary,
    amount, and a list of documents |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 信用证 | ID、发行日期、到期日期、发行方、受益人、金额和文件列表 |'
- en: '| Bill of lading | ID, shipper (exporter), consignee (importer), party to notify
    (importer''s bank), places of receipt and delivery, description of goods, and
    freight amount |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 提单 | ID、发货人（出口商）、收货人（进口商）、通知方（进口商的银行）、收发货地点、货物描述和运费金额 |'
- en: '| Export license | ID, issue date, expiration date, beneficiary, license holder,
    and description of goods |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 出口许可证 | ID、发行日期、到期日期、受益人、许可证持有者和货物描述 |'
- en: '| Payment | Amount in standard currency units |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 付款 | 标准货币单位金额 |'
- en: 'The following are the data elements that circumscribe the options available
    to participants in each stage:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是界定参与者在每个阶段可选择的选择的数据元素：
- en: '| **Data type** | **Data attributes** |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| **数据类型** | **数据属性** |'
- en: '| Trade agreement | Requested by importer and accepted by exporter |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 贸易协议 | 进口商请求，出口商接受 |'
- en: '| Letter of credit | Requested by importer, issued by importer''s bank, and
    accepted by exporter''s bank |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 信用证 | 进口商请求，进口商银行发行，出口商银行接受 |'
- en: '| Export license | Requested by exporter and issued by regulatory authority
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 出口许可证 | 请求者是出口商，由监管机构发行 |'
- en: '| Shipment | Prepared by exporter, accepted by carrier, and current position
    or location |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 货物运输 | 出口商准备，承运人接受，当前位置或地点 |'
- en: Participants' roles and capabilities
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参与者的角色和能力
- en: 'There are six categories of participants in our scenario: which are exporter,
    importer, exporter''s bank, importer''s bank, carrier, and regulatory authority.
    The terms in this set refer to the roles an entity can assume in a trade deal;
    for example, a company exporting goods in one instance may be an importer in another.
    The capabilities and restrictions of each role are also detailed in the following
    list:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的场景中有六类参与者：出口商、进口商、出口商银行、进口商银行、承运人和监管机构。这个集合中的术语指的是实体在贸易交易中可以承担的角色；例如，一家公司在一次出口货物交易中可能是进口商。每个角色的能力和限制也在以下列表中详细说明：
- en: Only an importer may apply for an L/C
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有进口商可以申请 L/C
- en: Only an importer's bank may supply an L/C
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有进口商的银行可以提供 L/C
- en: Only an exporter's bank may accept an L/C
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有出口商的银行可以接受 L/C
- en: Only an exporter may request an E/L
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有出口商才能请求 E/L
- en: Only a regulatory authority may supply an E/L
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有监管机构才能提供 E/L
- en: Only an exporter may prepare a shipment
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有出口商可以准备货物
- en: Only a carrier may supply a B/L
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有承运人可以提供 B/L
- en: Only a carrier may update a shipment location
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有承运人可以更新货物位置
- en: Only an importer's bank may send money, and only an exporter's bank may receive
    money
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有进口商的银行可以汇款，只有出口商的银行可以接收款项
- en: Benefits of blockchain applications over current real-world processes
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块链应用的优势超过当前现实世界的流程
- en: The risks inherent in transferring goods or making payments in the absence of
    safeguards (such as a trusted mediator) inspired the involvement of banks and
    led to the creation of the letter of credit and bill of lading. A consequence
    of these processes was not just additional cost (banks charge commission to issue
    letters of credit) or additional overhead. Applying and waiting for export licenses
    to be awarded also increases the turnaround time. In an ideal trade scenario,
    only the process of preparing and shipping the goods would take time. Recently,
    the adoption of SWIFT messaging over manual communication has made the document
    application and collection processes more efficient, but it has not fundamentally
    changed the game. A blockchain, on the other hand, with its (almost) instantaneous
    transaction commitments and assurance guarantees, opens possibilities that did
    not previously exist.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在缺乏保障的情况下转移货物或进行支付所固有的风险（如缺乏可信的调解者）催生了银行的参与，并导致信用证和提单的产生。这些过程的一个结果不仅仅是额外的成本（银行要收取佣金来发行信用证），或者额外的开支。申请和等待授予出口许可证也会增加周转时间。在理想的贸易场景中，只有准备和运输货物的过程需要时间。最近，采用SWIFT消息传递比手动通信更高效，但并没有从根本上改变游戏规则。另一方面，区块链几乎即时的交易承诺和保证拓展了以前不存在的可能性。
- en: As an example, the one variation we introduced in our use case was payment by
    installments, which cannot be implemented in the legacy framework because there
    is no guaranteed way of knowing and sharing information about a shipment's progress.
    Such a variation would be deemed too risky in this case, which is why payments
    are linked purely to documentary evidence. By getting all participants in a trade
    agreement on a single blockchain implementing a common smart contract, we can
    provide a single shared source of truth that will minimize risk and simultaneously
    increase accountability.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们在我们的应用场景中引入的一个变化是分期付款，这在传统框架中无法实现，因为没有一种可靠的方式来了解和共享关于货物进展的信息。在这种情况下，这样的变化被认为是太过风险，这就是为什么支付纯粹与文件证据相关联。通过让交易协议中的所有参与方在一个共同的区块链上实施一个公共智能合同，我们可以提供一个共享的真实性来源，从而最小化风险，同时增加问责制。
- en: In subsequent chapters, we will demonstrate in detail how our use case is implemented
    on the Hyperledger Fabric and Composer platforms. The reader will be able to appreciate
    both the simplicity and elegance of the implementation, which can then be used
    as a guide for other applications to revamp their archaic processes using this
    exciting new technology. However, before jumping into the code, we will look at
    the design of a Hyperledger network and we will set up our development environment.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将详细演示我们的应用是如何在Hyperledger Fabric和Composer平台上实现的。读者将能够欣赏实现的简单性和优雅性，然后可以将其用作指南，来重塑其他应用的古老流程，利用这一激动人心的新技术。然而，在跳入代码之前，我们将研究Hyperledger网络的设计，并设置我们的开发环境。
- en: Setting up the development environment
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: As you already know by now, an instance of a Hyperledger Fabric blockchain is
    referred to as a channel, which is a log of transactions linked to each other
    in a cryptographically secure manner. To design and run a blockchain application,
    the first step is to determine how many channels are required. For our trade application,
    we will use one channel, which will maintain the history of trades carried out
    among the different participants.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你现在已经知道的那样，Hyperledger Fabric区块链的一个实例被称为通道，它是以加密方式相互关联的交易日志。要设计和运行区块链应用程序，第一步是确定需要多少个通道。对于我们的贸易应用程序，我们将使用一个通道，它将维护不同参与方之间进行的交易历史记录。
- en: A Fabric peer may belong to multiple channels, which from the application's
    perspective will be oblivious to each other, but which help a single peer run
    transactions in different applications on behalf of its owners (or clients). A
    channel may run multiple smart contracts, each of which may be an independent
    application or linked together in a multi-contract application. In this chapter,
    and in this book, we will walk the reader through the design of a single-channel,
    single-contract application for simplicity's sake. It is up to the reader to design
    more complex applications, relying on the information provided in this book as
    well as in the Fabric documentation.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Fabric 节点可能属于多个通道，从应用程序的角度来看，这些通道彼此毫无所知，但它们帮助单个节点代表其所有者（或客户）在不同应用程序中运行交易。一个通道可以运行多个智能合约，每个智能合约可以是独立的应用程序，或者链接在一起形成多合约应用程序。在本章和本书中，我们将为读者介绍一个简单的单通道、单合约应用程序的设计。读者可以根据本书提供的信息以及
    Fabric 文档设计更复杂的应用程序。
- en: Before we delve into the mechanics of setting up our system to install an application
    and run transactions on our smart contract, we will describe how to create and
    launch a network on which the application will be installed. A sample network
    structure will be used to illustrate  trade operations throughout this chapter
    (in [Chapter 9](72e0e4f7-a8e3-49e6-935f-2c478d0ac891.xhtml), *Life in a Blockchain
    Network*, you will see how this sample network can be modified as the requirements
    change and evolve).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解如何设置系统以安装应用程序并在智能合约上运行交易的机制之前，我们将描述如何创建和启动一个网络，该网络将安装应用程序。本章将使用一个样本网络结构来说明贸易操作（在[第
    9 章](72e0e4f7-a8e3-49e6-935f-2c478d0ac891.xhtml)，*区块链网络中的生活*，您将看到如何根据需求的变化和发展修改此样本网络）。
- en: Designing a network
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计网络
- en: The first step in determining a Hyperledger Fabric network structure for one's
    application is listing the participating organizations. Logically, an organization
    is a security domain and a unit of identity and credentials. It governs one or
    more network peers, and depends on a **membership service provider** (**MSP**)
    to issue identities and certificates for the peers as well as clients for smart
    contract access privileges. The ordering service, which is the cornerstone of
    a Fabric network, is typically assigned its own organization. The following diagram
    illustrates a typical peer network structure with clients, MSPs, and logical organization
    groupings.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定一个 Hyperledger Fabric 网络结构以供应用程序使用，第一步是列出参与的组织。在逻辑上，一个组织是一个安全域和身份与凭证的单位。它管理一个或多个网络节点，并依赖于一个**成员服务提供商**（**MSP**）为节点和智能合约访问权限的客户颁发身份和证书。订购服务是
    Fabric 网络的基石，通常被分配给一个独立的组织。下图说明了一个典型的节点网络结构，其中包括客户端、MSP 和逻辑组织分组。
- en: 'The criterion for the approval of a transaction (or invocation) is an endorsement
    policy (which we will revisit later in this chapter). It is framed in terms of
    the organizations that are participating in the application network, and not the
    peers themselves:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 交易（或调用）批准的标准是一个背书策略（我们将在本章后面重新讨论）。它是根据参与应用程序网络的组织来制定的，而不是节点本身。
- en: '![](img/e3e28e91-f5b4-4fbf-b3f8-aebe4c48484d.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3e28e91-f5b4-4fbf-b3f8-aebe4c48484d.png)'
- en: 'Figure 3.1: Blockchain network with peers distributed among organizations,
    and clients obtaining credentials from organizations to submit queries and invocations
    to the chaincode'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：区块链网络，节点分布在各个组织之间，客户端从组织获取凭证，以提交查询和调用链代码
- en: The set of peers, the organizations they belong to, and the membership service
    providers serving each organization must be decided beforehand so that the appropriate
    services can be installed and run on those machines.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 必须提前决定一组节点、它们所属的组织以及为每个组织提供服务的成员服务提供商，以便在这些机器上安装和运行适当的服务。
- en: Our sample trade network will consist of four organizations, representing the
    exporter, importer, carrier, and regulator, respectively. The latter two represent
    the carrier and regulator entities, respectively. The exporter organization, however,
    represents both the exporting entity and its bank. Similarly, the importer organization
    represents the importing entity and its bank. Grouping entities with parties they
    trust into a single organization makes sense from both the perspective of security
    and cost. Running a Fabric peer is a heavy and costly business, so it is sufficient
    for a bank, which likely has more resources and a large clientele, to run such
    a peer on behalf of itself and its clients. A trading entity obtains the right
    to submit transactions or read the ledger state from its organizations in the
    role of a client. Our blockchain network therefore needs four peers, each belonging
    to a different organization. Apart from the peers, our network consists of one
    MSP for each of the four organizations, and an ordering service running in solo
    mode.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例贸易网络将由四个组织组成，分别代表出口商、进口商、承运商和监管机构。后两者分别代表承运商和监管实体。然而，出口商组织既代表出口实体又代表其银行。同样地，进口商组织代表进口实体和其银行。将信任的实体与其交易方分组到单一组织中，从安全和成本的角度来看都是有意义的。运行一个
    Fabric 节点是一个沉重且昂贵的业务，因此让拥有更多资源和大量客户的银行代表自身和其客户运行这样的节点是足够的。一个贸易实体在其组织中以客户端的角色获得提交交易或读取账本状态的权利。因此，我们的区块链网络需要四个同行，各自属于不同的组织。除了同行，我们的网络包括每个组织的一个
    MSP，以及以单独模式运行的排序服务。
- en: In a production application, the ordering service should be set up as a Kafka
    cluster on Zookeeper, but for the purpose of demonstrating how to build a blockchain
    application, the ordering service can be treated as a black box.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产应用中，排序服务应该作为 Zookeeper 上的 Kafka 集群设置，但为了展示如何构建区块链应用程序，排序服务可以被视为一个黑盒子。
- en: 'The ordering service belongs to its own separate organization with an MSP.
    The Organizations with their MSPs, peers, and clients of our trading network are
    illustrated in the following diagram:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 排序服务属于自己的独立组织，带有一个 MSP。我们贸易网络的组织、其 MSP、同行和客户端在下面的图表中展示：
- en: '![](img/15b368be-5e82-465d-a331-c1ced9891873.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15b368be-5e82-465d-a331-c1ced9891873.png)'
- en: 'Figure 3.2: A trade network with peers, an orderer, and clients in their respective
    organizations'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2：一个贸易网络，包括同行、排序者和各自组织中的客户端。
- en: 'The reader may wonder how, if a trading party and its banker belong to the
    same organization, the application can distinguish the two (the exporter from
    the exporter’s bank, and the importer from importer’s bank) for the purpose of
    controlling access to the smart contract and ledger. Two ways of doing this are
    as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 读者可能会想，如果一个贸易方和其银行属于同一个组织，那么应用程序如何区分两者（出口商和出口商的银行，以及进口商和进口商的银行），以控制对智能合约和账本的访问。这可以通过以下两种方式实现：
- en: Embedding access control logic in the middleware and application layers (which
    we will describe later in this chapter), whereby users can be distinguished by
    their IDs (or login names) and an access control list mapping IDs to permitted
    chaincode functions is maintained.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入中间件和应用层（我们将在本章后面描述）中的访问控制逻辑，用户可以通过其 ID（或登录名）区分，并维护将 ID 映射到允许的链码功能的访问控制列表。
- en: Having an organization’s MSP, acting as a CA server, embed distinguishing attributes
    within the certificates it issues to members of an organization. The access control
    logic can be implemented in the middleware or even in the chaincode to parse the
    attributes and permit or disallow an operation as per application policy.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让一个组织的 MSP 作为 CA 服务器，嵌入其为组织成员颁发的证书中的区别属性。访问控制逻辑可以在中间件或链码中实现，以解析属性，并根据应用程序政策允许或拒绝操作。
- en: These mechanisms are not implemented in our application, in which bankers and
    clients are indistinguishable to the smart contract and the middleware layers.
    But the reader may treat this as an exercise, which should be straightforward
    for someone skilled at developing secure client-server applications.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这些机制没有在我们的应用中实现，其中银行家和客户对智能合约和中间件层来说是无法区分的。但读者可以将其视为一种练习，对于熟练于开发安全客户端-服务器应用程序的人来说，这应该是直截了当的。
- en: Installing prerequisites
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装先决条件。
- en: 'With the design of the network in hand, let''s install the pre-requisite tools:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在手持网络设计的情况下，让我们安装先决工具：
- en: 'Ensure that you have the latest version of:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您拥有最新版本的：
- en: Docker using [https://docs.docker.com/install/](https://docs.docker.com/install/)
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 [https://docs.docker.com/install/](https://docs.docker.com/install/) 安装 Docker。
- en: 'Docker-Compose using: [https://docs.docker.com/compose/install/ ](https://docs.docker.com/compose/install/)'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Docker-Compose：[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)
- en: We will be using GitHub to share the source code of our tutorial. To access
    GitHub, the Git client needs to be installed and configured with authentication
    to GitHub. For more information, visit GitHub's official website at [https://help.github.com/articles/set-up-git/](https://help.github.com/articles/set-up-git/).
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 GitHub 来共享教程的源代码。要访问 GitHub，需要安装 Git 客户端，并配置身份验证到 GitHub。有关更多信息，请访问 GitHub
    的官方网站[https://help.github.com/articles/set-up-git/](https://help.github.com/articles/set-up-git/)。
- en: 'Install the software required for the business network example: [https://hyperledger.github.io/composer/latest/installing/installing-prereqs](https://hyperledger.github.io/composer/latest/installing/installing-prereqs).'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装业务网络示例所需的软件：[https://hyperledger.github.io/composer/latest/installing/installing-prereqs](https://hyperledger.github.io/composer/latest/installing/installing-prereqs)。
- en: The instructions above are for the Mac and Linux. Note that when using Windows,
    we recommend the use of a solution like Vagrant to run the development environment
    in a virtual machine.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述说明适用于 Mac 和 Linux。请注意，在使用 Windows 时，我们建议使用像 Vagrant 这样的解决方案在虚拟机中运行开发环境。
- en: 'Fabric is implemented in the Go language. Note that:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Fabric 是用 Go 语言实现的。请注意：
- en: Go is syntactically similar to C++
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 在语法上与 C++ 类似。
- en: We will also use Go to write chaincodes
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还将使用 Go 来编写链代码。
- en: Go can be installed from [https://golang.org/](https://golang.org/)
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 可以从[https://golang.org/](https://golang.org/)安装。
- en: Note that the setup of Hyperledger Fabric and testing of the tutorial application
    in this book was done using Go 1.9, so the reader is advised to install and use
    1.9 or a higher version
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，本书中的 Hyperledger Fabric 设置和教程应用程序的测试是使用 Go 1.9 完成的，因此建议读者安装并使用 1.9 或更高版本。
- en: Next, we need to set up our environmental variables.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要设置环境变量。
- en: '`GOPATH` points to a workspace for the `go` source code, for example:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`GOPATH` 指向`go`源代码的工作空间，例如：'
- en: '[PRE0]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`PATH` needs to include the Go `bin` directory used to store libraries and
    executables, as we can see in the following snippet:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`PATH` 需要包括用于存储库和可执行文件的 Go `bin` 目录，如下面的代码片段所示：'
- en: '[PRE1]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Verify whether you have `make` installed on your system. On a Debian/Ubuntu
    system, you can install it using `sudo` `apt-get install make`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证系统上是否安装了 `make`。在 Debian/Ubuntu 系统上，您可以使用 `sudo apt-get install make` 安装它。
- en: Forking and cloning the trade-finance-logistics repository
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分叉并克隆贸易融资物流存储库
- en: 'Now we need to get our own copy of the original source code by forking the
    repository on GitHub. Then, we can clone the source code into a local machine
    directory with the following steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要通过在 GitHub 上分叉存储库来获取原始源代码的副本。然后，我们可以使用以下步骤将源代码克隆到本地机器目录中：
- en: '**In GitHub, navigate to the following repository**: [https://github.com/HyperledgerHandsOn/trade-finance-logistics](https://github.com/HyperledgerHandsOn/trade-finance-logistics)'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在 GitHub 中导航到以下存储库**：[https://github.com/HyperledgerHandsOn/trade-finance-logistics](https://github.com/HyperledgerHandsOn/trade-finance-logistics)'
- en: '**Fork the repository**: Use the Fork button at the top-right corner of the
    page to create a copy of the source code to your account'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**分叉存储库**：使用页面右上角的分叉按钮创建源代码的副本到您的帐户'
- en: '**Get the clone URL**: Navigate to your fork of the trade-finance-logistics
    repository. Click on the Clone or download button, and copy the URL'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**获取克隆 URL**：导航到贸易融资物流存储库的您的分叉。单击“克隆或下载”按钮，并复制 URL。'
- en: '**Clone the repository**: In the Go workspace, clone the repository as follows:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**克隆存储库**：在 Go 工作空间中，按以下方式克隆存储库：'
- en: '[PRE2]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We now have a local copy of all the trade-finance-logistics tutorial materials.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了所有贸易融资物流教程材料的本地副本。
- en: Creating and running a network configuration
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和运行网络配置
- en: The code to configure and launch our network can be found in the network folder
    in our repository (this is an adaptation of [fabric-samples/first-network](https://github.com/hyperledger/fabric-samples/tree/master/first-network)).
    For this exercise, we will run the entire network on a single physical or virtual
    machine, with the various network elements running in suitably configured Docker
    containers. It is assumed that the reader has a basic familiarity with containerization
    using Docker and configurations using Docker-compose. Once the prerequisites listed
    in the previous section are met, it is sufficient to run the commands in that
    section without any extra knowledge or configuration required of the reader.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 配置和启动我们网络的代码可以在我们存储库的 network 文件夹中找到（这是 [fabric-samples/first-network](https://github.com/hyperledger/fabric-samples/tree/master/first-network)
    的一个改编）。在本次练习中，我们将在单个物理或虚拟机上运行整个网络，各种网络元素在适当配置的 Docker 容器中运行。假设读者对使用 Docker 进行容器化和使用
    Docker-compose 进行配置有基本的了解。一旦满足前一节中列出的先决条件，只需运行该节中的命令，无需读者具备额外的知识或配置。
- en: Preparing the network
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备网络
- en: To build Fabric and Fabric-CA, you may need to install certain dependencies
    if they are missing. These include the `gcc`, `libtool`, and `ltdl` libraries.
    (On a Ubuntu Xenial system, all of the necessary prerequisites can be installed
    by running `sudo apt-get install libltdl-dev`. It is left to the reader to look
    for equivalents on other systems). We need to perform the following steps before
    generating network cryptographic material.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 Fabric 和 Fabric-CA，如果缺少某些依赖项，您可能需要安装某些依赖项。这些包括 `gcc`、`libtool` 和 `ltdl`
    库。（在 Ubuntu Xenial 系统上，可以通过运行 `sudo apt-get install libltdl-dev` 安装所有必要的先决条件。读者需要在其他系统上寻找相应的等效物）。在生成网络加密材料之前，我们需要执行以下步骤。
- en: The tutorial application was developed on Hyperledger Fabric version 1.1, so
    you will need to fetch and build components for that version.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 教程应用是在 Hyperledger Fabric 版本 1.1 上开发的，因此您需要获取和构建该版本的组件。
- en: Clone the Fabric ([https://github.com/hyperledger/fabric/tree/release-1.1](https://github.com/hyperledger/fabric/tree/release-1.1))
    source code repository. If you are using the `git clone` command, add the parameter
    `-b release-1.1`. Make sure the cloned `fabric` folder is either present, or symbolically
    linked, in `$GOPATH/src/github.com/hyperledger/`. When you attempt to build Fabric,
    it will look for libraries in this path.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆 Fabric ([https://github.com/hyperledger/fabric/tree/release-1.1](https://github.com/hyperledger/fabric/tree/release-1.1))
    源代码存储库。如果您使用 `git clone` 命令，请添加参数 `-b release-1.1`。确保克隆的 `fabric` 文件夹存在于 `$GOPATH/src/github.com/hyperledger/`
    中，或者在该路径中创建符号链接。当您尝试构建 Fabric 时，它将在此路径中查找库。
- en: Run `make docker` to build Docker images for the peers and orderers
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `make docker` 来为对等方和排序者构建 Docker 镜像。
- en: Run `make configtxgen cryptogen` to generate the necessary tools to run the
    network creation commands described in this section
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `make configtxgen cryptogen` 来生成运行本节描述的网络创建命令所需的必要工具。
- en: Clone the Fabric-CA ([https://github.com/hyperledger/fabric-ca/tree/release-1.1](https://github.com/hyperledger/fabric-ca/tree/release-1.1))
    source code repository. (If you are using the `git clone` command, add the parameter
    `-b release-1.1`. Make sure the cloned `fabric-ca` folder is either present, or
    symbolically linked, in `$GOPATH/src/github.com/hyperledger/`. When you attempt
    to build Fabric-CA, it will look for libraries in this path.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆 Fabric-CA ([https://github.com/hyperledger/fabric-ca/tree/release-1.1](https://github.com/hyperledger/fabric-ca/tree/release-1.1))
    源代码存储库。（如果您使用 `git clone` 命令，请添加参数 `-b release-1.1`。确保克隆的 `fabric-ca` 文件夹存在于 `$GOPATH/src/github.com/hyperledger/`
    中，或者在该路径中创建符号链接。当您尝试构建 Fabric-CA 时，它将在此路径中查找库。
- en: Run `make docker` to build the Docker images for the MSPs
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `make docker` 来构建 MSPs 的 Docker 镜像。
- en: Generating network cryptographic material
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成网络加密材料
- en: 'The first step in the configuration of a network involves the creation of certificates
    and signing keys for the MSP of each peer and orderer organization, and for TLS-based
    communication. We also need to create certificates and keys for each peer and
    orderer node to be able to communicate with each other and with their respective
    MSPs. The configuration for this must be specified in a `crypto-config.yaml` file
    in the `network` folder in our code repository. This file contains the organization
    structure (see more details in the channel artifacts configuration section later),
    the number of peers in each organization, and the default number of users in an
    organization for whom certificates and keys must be created (note that an `admin`
    user is created by default). As an example, see the definition of the Importer’s
    organization in the file as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 配置网络的第一步涉及为每个对等方和订购方组织的MSP以及基于TLS的通信创建证书和签名密钥。我们还需要为每个对等方和订购方节点创建证书和密钥，以便能够彼此通信以及与各自的MSP通信。这个配置必须在我们的代码库中的`network`文件夹中的`crypto-config.yaml`文件中指定。该文件包含组织结构（稍后在通道工件配置部分中更多细节），每个组织中对等方的数量以及必须为其中的每个用户创建证书和密钥的默认数量（请注意，默认情况下会创建一个`admin`用户）。例如，请参阅文件中Importer组织的定义如下：
- en: '[PRE3]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This configuration indicates that the organization labeled `ImporterOrg` will
    contain one peer. Two non-admin users will also be created. The organization domain
    name to be used by the peer is also defined.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置指示标记为`ImporterOrg`的组织将包含一个对等方。还将创建两个非管理员用户。还定义了对等方要使用的组织域名。
- en: 'To generate cryptographic material for all the organizations, run the `cryptogen`
    command as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要为所有组织生成加密材料，请执行以下`cryptogen`命令：
- en: '[PRE4]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The output is saved to the `crypto-config` folder.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 输出保存在`crypto-config`文件夹中。
- en: Generating channel artifacts
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成通道工件
- en: 'To create a network according to an organization''s structure, and to bootstrap
    a channel, we will need to generate the following artifacts:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了按照组织的结构创建网络，并引导一个通道，我们需要生成以下工件：
- en: A genesis block, containing organization-specific certificates that serve to
    initialize the Fabric blockchain.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始块，包含用于初始化Fabric区块链的组织特定证书。
- en: Channel configuration information.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通道配置信息。
- en: Anchor peer configurations for each organization. An anchor peer serves as a
    fulcrum within an organization, for cross-organization ledger syncing using the
    Fabric gossip protocol.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个组织的锚定对等配置。锚定对等在组织内部充当支点，使用Fabric八卦协议进行跨组织账本同步。
- en: 'Like the `crypto-config.yaml` file, channel properties are specified in a file
    labeled `configtx.yaml`, which in our source code can be found in the `network`
    folder. The high-level organization of our trade network can be found in the `Profiles`
    section as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 与`crypto-config.yaml`文件类似，通道属性在一个名为`configtx.yaml`的文件中指定，在我们的源代码中可以在`network`文件夹中找到。我们贸易网络的高级组织如下所示：
- en: '[PRE5]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As we can see, the channel we are going to create is named `FourOrgsTradeChannel`,
    which is defined in the profile. The four organizations participating in this
    channel are labeled `ExporterOrg`, `ImporterOrg`, `CarrierOrg`, and `RegulatorOrg`,
    each of which refers to a subsection defined in the `Organizations` section. The
    orderer belongs to its own organization called `TradeOrdererOrg`. Each organization
    section contains information about its MSP (ID as well as the location of the
    cryptographic material, such as keys and certificates), and the hostname and port
    information for its anchor peers. As an example, the `ExporterOrg` section contains
    the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们要创建的通道被命名为`FourOrgsTradeChannel`，在配置文件中定义。参与此通道的四个组织被标记为`ExporterOrg`，`ImporterOrg`，`CarrierOrg`和`RegulatorOrg`，每个组织都引用了`Organizations`部分中定义的子部分。订购方属于自己的组织称为`TradeOrdererOrg`。每个组织部分包含有关其MSP的信息（ID以及加密材料的位置，如密钥和证书），以及其锚定对等方的主机名和端口信息。例如，`ExporterOrg`部分包含以下内容：
- en: '[PRE6]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, the `MSPDir` variable (representing a folder) in this specification
    references the cryptographic material we generated earlier using the `cryptogen`
    tool.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个规范中的`MSPDir`变量（表示一个文件夹）引用了我们之前使用`cryptogen`工具生成的加密材料。
- en: 'To generate the channel artifacts, we use the `configtxgen` tool. To generate
    the genesis block (which will be sent to the orderer during network bootstrap),
    run the following command from the `network` folder:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成通道文件，我们使用`configtxgen`工具。要生成创世区块（将在网络引导期间发送到orderer），请从`network`文件夹运行以下命令：
- en: '[PRE7]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `FourOrgsTradeOrdererGenesis` keyword corresponds to the profile name in
    the `Profiles` section. The genesis block will be saved in the `genesis.block`
    file in the `channel-artifacts` folder. To generate the channel configuration,
    run the following code:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`FourOrgsTradeOrdererGenesis`关键字对应于`Profiles`部分中的配置文件名称。创世区块将保存在`channel-artifacts`文件夹中的`genesis.block`文件中。要生成通道配置，请运行以下代码：'
- en: '[PRE8]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The channel we will create is named `tradechannel`, and its configuration is
    stored in `channel-artifacts/channel.tx`. To generate the anchor peer configuration
    for the exporter organization, run:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建的通道名为`tradechannel`，其配置存储在`channel-artifacts/channel.tx`中。要生成出口者组织的锚定peer配置，请运行：
- en: '[PRE9]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The same process should be repeated for the other three organizations, while
    changing the organization names in the preceding command.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他三个组织，应重复相同的过程，并在先前的命令中更改组织名称。
- en: 'The environment variable `FABRIC_CFG_PATH` must be set to point to the folder
    that contains the `configtx.yaml` file in order for the `configtxgen` tool to
    work. The script file `trade.sh` (which we will use later) contains the following
    line to ensure that the `YAML` file is loaded from the folder in which the command
    is run:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 必须将环境变量`FABRIC_CFG_PATH`设置为指向包含`configtx.yaml`文件的文件夹，以便`configtxgen`工具正常工作。我们稍后将使用的`trade.sh`脚本文件包含以下行以确保从运行命令的文件夹加载`YAML`文件：
- en: '`export FABRIC_CFG_PATH=${PWD}`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`export FABRIC_CFG_PATH=${PWD}`'
- en: Generating the configuration in one operation
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在一个操作中生成配置
- en: 'For convenience, the `trade.sh` script is configured to generate the channel
    artifacts as well as the cryptographic material using the commands and configuration
    files described previously. Just run the following command from within the `network`
    folder:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，`trade.sh`脚本已配置为使用先前描述的命令和配置文件生成通道文件以及加密材料。只需从`network`文件夹中运行以下命令：
- en: '[PRE10]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Although you can specify any channel name here, note that the configurations
    used to develop the middleware later in this chapter will depend on that name.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以在这里指定任何通道名称，但请注意，本章后面用于开发中间件的配置将依赖于该名称。
- en: The `GOPATH` variable is set to `/opt/gopath` in the container that runs the
    peer.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`GOPATH`变量在运行peer的容器中设置为`/opt/gopath`。'
- en: Composing a sample trade network
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合一个样例交易网络
- en: 'The last command also has the effect of generating a network configuration
    file, `docker-compose-e2e.yaml`, which is used to start the network as a set of
    Docker containers using the docker-compose tool. The file itself depends on the
    statically configured files `base/peer-base.yaml` and `base/docker-compose-base.yaml`.
    These files collectively specify services and their attributes, and enable us
    to run them all in one go within Docker containers, rather than having to manually
    run instances of these services on one or more machines. The services we need
    to run are as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个命令还具有生成网络配置文件`docker-compose-e2e.yaml`的效果，该文件用于使用docker-compose工具在一组Docker容器中启动网络。文件本身依赖于静态配置文件`base/peer-base.yaml`和`base/docker-compose-base.yaml`。这些文件共同指定服务及其属性，并使我们能够一次性在Docker容器中运行它们，而不是在一个或多个机器上手动运行这些服务的实例。我们需要运行的服务如下：
- en: Four instances of a Fabric peer, one in each organization
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个Fabric peer实例，每个组织一个
- en: One instance of a Fabric orderer
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Fabric orderer实例
- en: Five instances of a Fabric CA, corresponding to the MSPs of each organization
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 五个Fabric CA实例，对应于每个组织的MSP
- en: Docker images for each can be obtained from the Hyperledger project on Docker
    Hub ([https://hub.docker.com/u/hyperledger/](https://hub.docker.com/u/hyperledger/)),
    with the images being `hyperledger/fabric-peer`, `hyperledger/fabric-orderer`, `hyperledger/fabric-ca
    for peers`, `orderers`, and MSPs, respectively.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 每个都可以从Docker Hub上的Hyperledger项目（[https://hub.docker.com/u/hyperledger/](https://hub.docker.com/u/hyperledger/)）获取Docker镜像，其中镜像分别为`hyperledger/fabric-peer`、`hyperledger/fabric-orderer`、`hyperledger/fabric-ca
    for peers`、`orderers`和`MSPs`。
- en: 'The base configuration of a peer can be as follows (see `base/peer-base.yaml`):'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一个peer的基本配置可以如下（参见`base/peer-base.yaml`）：
- en: '[PRE11]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Fabric configuration parameters can be set here, but if you use the pre-built
    Docker image for `fabric-peer`, the defaults are sufficient to get a peer service
    up and running. The command to run the peer service is specified in the last line
    of the configuration as `peer node start`; if you wish to run a peer by downloading
    the Fabric source and building it on your local machine, this is the command you
    will have to run (see [*Chapter 4*](a557efde-d161-4451-b5ee-cb3e481010be.xhtml),
    *Designing a Data and Transaction Model with Golang*, for examples). Also make
    sure you configure the logging level appropriately using the `CORE_LOGGING_LEVEL`
    variable. In our configuration, the variable is set to `INFO`, which means that
    only informational, warning, and error messages will be logged. If you wish to
    debug a peer and need more extensive logging, you can set this variable to `DEBUG`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric配置参数可以在此设置，但如果您使用`fabric-peer`的预构建Docker映像，则默认设置足以运行对等方服务。在配置的最后一行指定运行对等方服务的命令为`peer
    node start`；如果您希望通过下载Fabric源代码并在本地机器上构建来运行对等方，则这是您将要运行的命令（有关示例，请参见[*Chapter 4*](a557efde-d161-4451-b5ee-cb3e481010be.xhtml)，*使用Golang设计数据和事务模型*）。还请确保使用`CORE_LOGGING_LEVEL`变量适当配置日志级别。在我们的配置中，该变量设置为`INFO`，这意味着仅记录信息、警告和错误消息。如果您希望调试对等方并需要更广泛的日志记录，请将此变量设置为`DEBUG`。
- en: The `IMAGE_TAG` variable is set to latest in the `.env` file in the `network`
    folder, though you can set a specific tag if you wish to pull older images.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`IMAGE_TAG`变量在`network`文件夹中的`.env`文件中设置为latest，尽管如果您希望拉取旧的映像，可以设置特定的标签。'
- en: 'Furthermore, we need to configure the hostnames and ports for each peer, and
    sync the cryptographic material generated (using `cryptogen`) to the container
    filesystem. The peer in the exporter organization is configured in `base/docker-compose-base.yaml`
    as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们需要为每个对等方配置主机名和端口，并将使用`cryptogen`生成的加密材料同步到容器文件系统。导出器组织中的对等方在`base/docker-compose-base.yaml`中配置如下：
- en: '[PRE12]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As indicated by the `extends` parameter, this extends the base configuration.
    Note that the ID (`CORE_PEER_ID`) matches that which is specified for this peer
    in `configtx.yaml`. This identity is the hostname for the peer running in the
    exporter organization, and will be used in the middleware code later in this chapter.
    The volumes section indicates the rules for copying the cryptographic material
    generated in the `crypto-config` folder to the container. The peer service itself
    listens on port `7051`, and the port that clients can use to subscribe to events
    is set to `7053`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 正如`extends`参数所示，这扩展了基本配置。注意，ID（`CORE_PEER_ID`）与`configtx.yaml`中为此对等方指定的ID相匹配。该标识是运行在导出器组织中的对等方的主机名，并且稍后在本章的中间件代码中将使用它。卷部分指示将在`crypto-config`文件夹中生成的加密材料复制到容器的规则。对等方服务本身侦听端口`7051`，客户端用于订阅事件的端口设置为`7053`。
- en: In the file, you will see that the in-container ports are identical across peers,
    but are mapped to distinct ports on the host machine. Lastly, note that the MSP
    ID specified here also matches that specified in `configtx.yaml`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件中，您会看到容器内端口在对等方之间是相同的，但映射到主机机器上的端口是不同的。最后，请注意，此处指定的MSP ID也与`configtx.yaml`中指定的相匹配。
- en: 'The configuration of the orderer service is similar, as the following snippet
    from `base/docker-compose-base.yaml` indicates:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 订购者服务的配置类似，如`base/docker-compose-base.yaml`中的以下片段所示：
- en: '[PRE13]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The command to start the orderer is simply `orderer`, as the code indicates.
    The logging level can be configured using the `ORDERER_GENERAL_LOGLEVEL` variable,
    and is set to `INFO` in our configuration.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 启动订购者的命令很简单，就像代码所示的那样是`orderer`。日志级别可以使用`ORDERER_GENERAL_LOGLEVEL`变量进行配置，在我们的配置中设置为`INFO`。
- en: The actual network configuration that we will run is based on a file named `docker-compose-e2e.yaml`.
    This file does not exist in the repository but is rather created by the command
    `./trade.sh generate -c tradechannel`, which we ran earlier to generate channel
    and cryptographic material. This file depends on `base/docker-compose-base.yaml`
    (and indirectly `base/peer-base.yaml`) as you can see by examining the file contents.
    It is actually created from a template `YAML` file named `docker-compose-e2e-template.yaml`,
    which you can find in the `network` folder. The template file contains variables
    as stand-ins for key filenames that are generated using `cryptogen`. When `docker-compose-e2e.yaml`
    is generated, those variable names are replaced with actual filenames within the
    `crypto-config` folder.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要运行的实际网络配置是基于一个名为`docker-compose-e2e.yaml`的文件。这个文件并不在存储库中，而是通过我们先前运行的`./trade.sh
    generate -c tradechannel`命令创建的。这个文件依赖于`base/docker-compose-base.yaml`（间接地也依赖于`base/peer-base.yaml`），你可以通过检查文件内容来看到。它实际上是从一个名为`docker-compose-e2e-template.yaml`的`YAML`模板文件创建的，你可以在`network`文件夹中找到。模板文件包含变量作为`cryptogen`生成的关键文件的代理。当`docker-compose-e2e.yaml`被生成时，这些变量名称会被实际文件名替换，这些文件存在于`crypto-config`文件夹中。
- en: 'For example, consider the `exporter-ca` section in `docker-compose-e2e-template.yaml`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑`docker-compose-e2e-template.yaml`中的`exporter-ca`部分：
- en: '[PRE14]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, look at the same section in the generated file `docker-compose-e2e.yaml`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看看在生成的文件`docker-compose-e2e.yaml`中的相同部分：
- en: '[PRE15]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see, the variable `EXPORTER_CA_PRIVATE_KEY` has been replaced with
    `cc58284b6af2c33812cfaef9e40b8c911dbbefb83ca2e7564e8fbf5e7039c22e_sk`, both in
    the environment variable and in the command. If you now examine the contents of
    the `crypto-config` folder, you will notice that there exists a file named `cc58284b6af2c33812cfaef9e40b8c911dbbefb83ca2e7564e8fbf5e7039c22e_sk`
    in the folder `crypto-config/peerOrganizations/exporterorg.trade.com/ca/`. This
    file contains the exporter organization’s MSP’s private (secret) signing key.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，环境变量和命令中的变量`EXPORTER_CA_PRIVATE_KEY`已被替换为`cc58284b6af2c33812cfaef9e40b8c911dbbefb83ca2e7564e8fbf5e7039c22e_sk`。如果你现在检查`crypto-config`文件夹的内容，你会注意到在`crypto-config/peerOrganizations/exporterorg.trade.com/ca/`文件夹中存在一个名为`cc58284b6af2c33812cfaef9e40b8c911dbbefb83ca2e7564e8fbf5e7039c22e_sk`的文件。这个文件包含了出口商组织MSP的私（秘密）签名密钥。
- en: The preceding code snippet contains the result of a sample run. The key filename
    will vary whenever you run the cryptographic material generation tool.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 前述的代码片段包含了一个样本运行的结果。每当你运行加密材料生成工具时，关键文件名将会有所变化。
- en: 'Let us now look at the configuration of an MSP in more detail, taking the example
    of the exporter organization MSP, as specified in `docker-compose-e2e.yaml`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在更详细地看一下MSP的配置，以出口商组织MSP为例，如`docker-compose-e2e.yaml`中所指定的那样：
- en: '[PRE16]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The service that will run in the MSP is the `fabric-ca-server`, listening on
    port `7054`, bootstrapped with the certificates and keys created using `cryptogen`,
    and using the default login and password (`admin` and `adminpw`, respectively)
    configured in the `fabric-ca` image. The command to start an instance of a Fabric
    CA server is `fabric-ca-server start …`, as you can see in the preceding code.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 将在MSP中运行的服务是`fabric-ca-server`，监听端口`7054`，使用`cryptogen`创建的证书和密钥进行引导，并使用`fabric-ca`镜像中配置的默认登录名和密码（分别为`admin`和`adminpw`）。启动一个Fabric
    CA服务器实例的命令是`fabric-ca-server start ...`，如你在前述代码中所看到的。
- en: Peers as well as CAs are configured for TLS-based communication, as indicated
    in the preceding configurations. The reader must note that if TLS is disabled
    in one, it must be disabled in the other too.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对等方和CA都配置为基于TLS的通信，正如前述配置所示。读者必须注意，如果一个地方禁用了TLS，另一个地方也必须禁用TLS。
- en: Also, as can be observed by examining `docker-compose-e2e.yaml`, we do not create
    a Fabric CA server (and container) for the orderer’s organization. For the exercise
    we will go through in this book, statically created admin users and credentials
    for the orderer are sufficient; we will not be registering new orderer organization
    users dynamically, so a Fabric CA server is not needed.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，通过检查`docker-compose-e2e.yaml`，我们可以看到，我们没有为订购方的组织创建Fabric CA服务器（和容器）。对于在本书中要进行的练习，静态创建的管理用户和订购者的凭据足够了；我们不会动态注册新的订购者组织用户，所以不需要Fabric
    CA服务器。
- en: Network components' configuration files
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络组件的配置文件
- en: We have demonstrated how peers, orderers, and CAs can be configured in docker-compose
    YAML files. But such configurations are meant to override settings that have already
    been made by default in the components’ respective images. Though a detailed description
    of these configurations is beyond the scope of this book, we will list the respective
    files and mention how a user may make changes to them.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经演示了如何在 docker-compose YAML 文件中配置对等方、订购者和 CA。但是这些配置意味着覆盖了组件的默认设置。虽然这些配置的详细说明超出了本书的范围，但我们将列出各自的文件并提及用户如何对其进行更改。
- en: 'For a peer, a `core.yaml` file ([https://github.com/hyperledger/fabric/blob/release-1.1/sampleconfig/core.yaml](https://github.com/hyperledger/fabric/blob/release-1.1/sampleconfig/core.yaml))
    contains all of the important runtime settings, including but not limited to addresses,
    port numbers, security and privacy, and the gossip protocol. You can create your
    own file and sync it to the container using a custom `Dockerfile` instead of the
    one that is used by the `hyperledger/fabric-peer` image by default. If you log
    in to a running peer container (let’s take the Exporter organization’s peer''s
    container from the network we just launched):'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个对等方，一个名为 `core.yaml` 的文件（[https://github.com/hyperledger/fabric/blob/release-1.1/sampleconfig/core.yaml](https://github.com/hyperledger/fabric/blob/release-1.1/sampleconfig/core.yaml)）包含了所有重要的运行时设置，包括但不限于地址、端口号、安全和隐私以及八卦协议。您可以创建自己的文件并使用自定义
    `Dockerfile` 将其同步到容器中，而不是使用默认的 `hyperledger/fabric-peer` 镜像。如果您登录到一个正在运行的对等方容器（让我们从我们刚刚启动的网络中取出
    Exporter 组织的对等方容器）：
- en: '[PRE17]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Then you will find the `core.yaml` file in the folder `/etc/hyperledger/fabric/`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您将在文件夹 `/etc/hyperledger/fabric/` 中找到 `core.yaml` 文件。
- en: Similarly, an orderer’s default configuration lies in an `orderer.yaml` file
    ([https://github.com/hyperledger/fabric/blob/release-1.1/sampleconfig/orderer.yaml](https://github.com/hyperledger/fabric/blob/release-1.1/sampleconfig/orderer.yaml)),
    which is also synced to `/etc/hyperledger/fabric/` on the container running the `hyperledger/fabric-orderer` image.
    Keep in mind that both the `core.yaml` and `orderer.yaml` files are synced to
    the peer and orderer containers, so if you wish to create custom files, you will
    need to sync these YAML files to both these containers.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，订购者的默认配置位于一个名为 `orderer.yaml` 的文件中（[https://github.com/hyperledger/fabric/blob/release-1.1/sampleconfig/orderer.yaml](https://github.com/hyperledger/fabric/blob/release-1.1/sampleconfig/orderer.yaml)），该文件也与运行
    `hyperledger/fabric-orderer` 镜像的容器中的 `/etc/hyperledger/fabric/` 同步。请注意，`core.yaml`
    和 `orderer.yaml` 文件都同步到对等方和订购者容器，因此，如果您希望创建自定义文件，则需要将这些 YAML 文件同步到这两个容器。
- en: A Fabric CA server also has a configuration file called `fabric-ca-server-config.yaml` ([http://hyperledger-fabric-ca.readthedocs.io/en/latest/serverconfig.htm](http://hyperledger-fabric-ca.readthedocs.io/en/latest/serverconfig.htm)),
    which is synced to `/etc/hyperledger/fabric-ca-server/` on the container running
    the `hyperledger/fabric-ca` image. You can create and sync custom configurations
    as you would for a peer or an orderer.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric CA 服务器还有一个名为 `fabric-ca-server-config.yaml` 的配置文件（[http://hyperledger-fabric-ca.readthedocs.io/en/latest/serverconfig.htm](http://hyperledger-fabric-ca.readthedocs.io/en/latest/serverconfig.htm)），它与运行
    `hyperledger/fabric-ca` 镜像的容器中的 `/etc/hyperledger/fabric-ca-server/` 同步。您可以像为对等方或订购者创建和同步自定义配置一样创建和同步自定义配置。
- en: Launching a sample trade network
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动示例交易网络
- en: 'So, now that we have all the configuration for our network, and also the channel
    artifacts and cryptographic material required to run it, all we need to do is
    start the network using the `docker-compose` command, as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们已经有了网络的所有配置，以及运行所需的通道工件和加密材料，我们所需做的就是使用 `docker-compose` 命令启动网络，如下所示：
- en: '[PRE18]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can run this as a background process and redirect the standard output to
    a `log` file if you so choose. Otherwise, you will see the various containers
    starting up and logs from each displayed on the console.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将此作为后台进程运行，并将标准输出重定向到 `log` 文件，如果您愿意的话。否则，您将看到各种容器启动和每个容器的日志显示在控制台上。
- en: Note that on some OS configurations, setting up Fabric can be tricky. If you
    run into problems, consult the documentation. A detailed description of how to
    install a Fabric network and examples is provided at [https://hyperledger-fabric.readthedocs.io/en/release-1.1/samples.html](https://hyperledger-fabric.readthedocs.io/en/release-1.1/samples.html).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在某些操作系统配置中，设置 Fabric 可能会有些棘手。如果遇到问题，请查阅文档。有关如何安装 Fabric 网络以及示例的详细说明，请访问
    [https://hyperledger-fabric.readthedocs.io/en/release-1.1/samples.html](https://hyperledger-fabric.readthedocs.io/en/release-1.1/samples.html)。
- en: 'The network can be launched in the background using our trade.sh script as
    well; just run:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 网络也可以使用我们的 trade.sh 脚本在后台启动；只需运行：
- en: '[PRE19]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'From a different terminal window, if you run `docker ps -a`, you will see something
    as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 从另一个终端窗口，如果您运行 `docker ps -a`，您将看到以下内容：
- en: '[PRE20]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We have four peers, four MSPs, and an orderer running in separate containers.
    Our trade network is up and ready to run our application!
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有四个对等节点、四个 MSP 和一个运行在不同容器中的订购者。我们的交易网络已经启动并准备运行我们的应用程序！
- en: 'To view the running logs of a given container, note the container ID (first
    column in the preceding list) and simply run:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看给定容器的运行日志，请注意容器 ID（上述列表中的第一列），然后简单运行：
- en: '[PRE21]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To bring the network down, you can use either the docker-compose command:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 若要关闭网络，您可以使用 docker-compose 命令：
- en: '`docker-compose -f docker-compose-e2e.yaml down`'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker-compose -f docker-compose-e2e.yaml down`'
- en: 'Or our `trade.sh` script:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们的 `trade.sh` 脚本：
- en: '`./trade.sh down`'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`./trade.sh down`'
- en: Summary
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced the business use case that our follow-on chapters
    will leverage to create a context around the code we will write. We have also
    deployed our first Hyperledger Fabric network and have now transitioned from theory
    to practice. Well done!
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了我们后续章节将利用的业务用例，以便为我们将要编写的代码创建一个上下文。我们还部署了我们的第一个 Hyperledger Fabric
    网络，现在已经从理论转向实践。干得好！
- en: 'The next chapters will take you through the development of a blockchain application
    from two perspectives: (1) Foundation API using chaincode and the Fabric SDK (2) Business
    network implementation using Hyperledger Composer.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将从两个角度带您了解区块链应用程序的开发：（1）使用链码和 Fabric SDK 的基础 API （2）使用 Hyperledger Composer
    的业务网络实现。
- en: Through these two perspectives, we hope to give you an understanding of the
    flexibility of the solution and the ability to leverage each tool in the right
    context. To get ready for the next chapter, you should now stop your network using
    `./trade.sh` down.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这两个角度，我们希望能让您了解解决方案的灵活性以及在正确环境中利用每个工具的能力。要为下一章做好准备，您现在应该使用 `./trade.sh` down
    停止您的网络。
