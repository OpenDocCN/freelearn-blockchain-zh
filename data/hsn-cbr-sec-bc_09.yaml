- en: Deploying Blockchain-Based DDoS Protection
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署基于区块链的DDoS保护
- en: The internet is growing dramatically in both the number of users and applications,
    and their respective bandwidth. Over the past few years, a new variant of user
    has entered the world of the internet, commonly known as a **smart device**. In
    its simplest form, it can be a refrigerator, an AC unit, or a microwave, while
    it can be as complex as a drone or automated vehicle. These smart devices are
    also referred to as **Internet of Things** (**I****oT**) devices, monitoring the
    functionality and operations of connected utilities. Despite of enough use cases,
    attackers are making use of them to launch some massive cyber attacks called **distributed
    denial-of-service** (**DDoS**) attacks. In this chapter, you will learn about
    DDoS attacks and how blockchain can be more effective at defending organizations from
    such massive attack operations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网的用户数量和应用程序以及它们的带宽正在急剧增长。在过去的几年里，一种新的互联网用户进入了互联网的世界，通常被称为**智能设备**。它可以是冰箱、空调或微波炉，也可以是无人机或自动驾驶车辆。这些智能设备也被称为**物联网**（**IoT**）设备，监控着连接的公用事业的功能和操作。尽管有足够的用例，攻击者正在利用它们发动所谓的**分布式拒绝服务**（**DDoS**）攻击。在本章中，您将学习有关DDoS攻击以及区块链如何更有效地保护组织免受此类大规模攻击行动的信息。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: DDoS attacks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DDoS攻击
- en: Types of DDoS attack
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DDoS攻击类型
- en: Challenges with current DDoS protection  solutions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前DDoS保护解决方案的挑战
- en: How blockchain can transform existing DDoS protection platform
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块链如何改变现有的DDoS保护平台
- en: Lab
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验室
- en: DDoS attacks
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DDoS攻击
- en: A DDoS attack is a malicious attempt to disrupt legitimate traffic to a server
    by overwhelming the target with a flood of requests from geographically dispersed
    systems. Now, let's first understand how a **denial-of-service** (**DoS**) attack
    works. During DoS attacks, the attackers bombard the target machine with a massive
    amount of requests that lead to the exhaustion of server resources and, as a result,
    it fails requests from legitimate users. In a DoS attack, a threat actor uses
    a single machine to exhaust the target server; however, a DDoS attack is much
    more powerful as millions of machines can be used to exhaust a target server.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: DDoS攻击是通过让来自地理分布系统的大量请求淹没目标服务器，以恶意尝试干扰合法流量的一种攻击方式。现在，让我们首先了解**拒绝服务**（**DoS**）攻击是如何工作的。在DoS攻击期间，攻击者向目标机器发起大量请求，导致服务器资源耗尽，并因此无法满足合法用户的请求。在DoS攻击中，威胁参与者使用单台机器来耗尽目标服务器；然而，DDoS攻击更为强大，因为可以使用数百万台机器来耗尽目标服务器。
- en: What is a DDoS attack?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是DDoS攻击？
- en: More and more organizations are moving to the cloud with massive infrastructure
    to fulfill their immersive customer demands. Organizations either build their
    own heavy server infrastructure, or they move to cloud providers to host their
    servers. Today, attackers prefer the DDoS attack method to disrupt target services
    as they can generate GBs to TBs of random data to overwhelm the target, and also
    it becomes difficult for a target security team to identify and block each individual
    attacking machine, as they are millions in number.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 越来越多的组织正在转向具有重大基础设施的云端，以满足其沉浸式客户需求。组织要么建立自己的重型服务器基础设施，要么转向云提供商托管他们的服务器。今天，攻击者更喜欢使用DDoS攻击方法来破坏目标服务，因为他们可以生成大量的随机数据，以淹没目标。此外，目标安全团队很难识别和阻止每个攻击机器，因为它们的数量达到了数百万。
- en: Furthermore, attackers never legitimately control their attacking machines,
    but rather they infect millions of computers worldwide with some tailored malware
    and then get complete access to launch a massive DDoS attack. This collection
    of millions of infected computers is named a **botnet** and the individual infected
    computers are named **bots**.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，攻击者从未合法地控制他们的攻击机器，而是通过特制的恶意软件在全球数百万台计算机上感染病毒，然后获得完全访问权限来发动大规模的DDoS攻击。这个由数百万台感染的计算机组成的集合被称为**僵尸网络**，而单个被感染的计算机则被称为**僵尸**。
- en: The first instance of DDoS is a bit hard to recall exactly, but the first noticeable
    and significant attack occurred in 1999, and it targeted the University of Minnesota.
    It impacted more than 220 systems and brought down the entire infrastructure for
    several days.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: DDoS的第一个实例有点难以确切回忆起来，但第一个明显和重大的攻击发生在1999年，目标是明尼苏达大学。它影响了220多个系统，并使整个基础设施瘫痪了好几天。
- en: On Friday, October 21, 2016, the entire world witnessed one of the most complex
    and sophisticated DDoS attacks on Dyn (a managed DNS provider). Dyn confirmed
    the Mirai botnet as a primary source of malicious attack traffic. The attack opened
    up an important concern on internet security and threats.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 2016 年 10 月 21 日星期五，整个世界目睹了对 Dyn（一家托管 DNS 提供商）进行的最复杂和精密的 DDoS 攻击之一。Dyn 确认 Mirai
    僵尸网络是恶意攻击流量的主要来源。这次攻击引起了对互联网安全和威胁的重要关注。
- en: How does it work?
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: To launch a DDoS attack, a threat actor can either build the entire botnet network
    or rent it from a dark web marketplace. Once the attacker is ready with their
    weapons, they need to discover vulnerable sites or hosts, or maybe an entire network.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要发动 DDoS 攻击，威胁行为者可以构建整个僵尸网络，也可以从暗网市场租用。一旦攻击者准备好他们的武器，他们需要发现脆弱的站点或主机，或者可能整个网络。
- en: 'A computer scientist at Lockheed-Martin Corporation coined a term called **cyber
    kill chain** that lays out the stages of a cyber attack, starting from  reconnaissance
    to final goal of attack. These stages are:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 洛克希德·马丁公司的计算机科学家创造了一个称为**网络杀链**的术语，它阐述了网络攻击的阶段，从侦察到最终攻击目标。这些阶段包括：
- en: '**Reconnaissance**: The attacker identify its target device and starts searching
    for vulnerabilities in it.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**侦察**：攻击者确定其目标设备并开始搜索其中的漏洞。'
- en: '**Weaponization**: The attacker uses a remote tool kit and malware such as
    virus or worm to address the vulnerability.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**武器化**：攻击者使用远程工具包和恶意软件，如病毒或蠕虫，来利用漏洞。'
- en: '**Delivery**: The threat actor inject the cyber weapons to the victim network
    through several methods such as phishing email, drive-by download, USB drives,
    insiders  and so on'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交付**：威胁行为者通过诸如钓鱼邮件、随意下载、USB 驱动器、内部人员等多种方法将网络战争引入受害网络'
- en: '**Exploitation**: The malware code is used to trigger the attack, taking action
    on target network to exploit vulnerabilities'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用**：恶意软件代码用于触发攻击，在目标网络上采取行动以利用漏洞'
- en: '**Installation**: Malware is now  installed in the victim machine'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装**：恶意软件现在已安装在受害机器上'
- en: '**Command and control**: This malware allows the remote threat actor to gain
    access to victim machine'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令和控制**：这种恶意软件允许远程威胁行为者访问受害者机器'
- en: In order to understand each of these stages from DDoS perspective, it is important
    to understand the botnet infrastructure and how it is built.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从 DDoS 的角度理解每个阶段，了解僵尸网络基础设施及其建立方式至关重要。
- en: Building up the botnet
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立僵尸网络
- en: As mentioned, the distributed nature of a DDoS attack requires millions of infected
    machines globally. Today, attackers leverage the dark web marketplace and either
    rent readily available botnets or buy them. There are several tools, such as Jumper,
    Dirt, and Pandore, that eliminate the technical barrier in creating these botnets.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，DDoS 攻击的分布式性质需要全球数以百万计受感染的机器。今天，攻击者利用暗网市场，要么租用现成的僵尸网络，要么购买它们。有一些工具，如 Jumper、Dirt
    和 Pandore，可以消除创建这些僵尸网络的技术障碍。
- en: 'The following graphic outlines the botnet life cycle:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表概述了僵尸网络的生命周期：
- en: '![](img/93e2738d-71ac-43ca-b7c1-ae1a6ab77d02.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93e2738d-71ac-43ca-b7c1-ae1a6ab77d02.png)'
- en: Reconnaissance
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 侦察
- en: The targeted system can be as large as a data center and as small as a computer.
    In both cases, the development of a botnet involves identifying hosts with vulnerabilities
    that can be exploited with some malware families. Attackers look for information
    directly or indirectly related to their target to gain unauthorized access to
    their protected assets. The threat actor tries all possible ways to bypass the
    existing security systems, such as firewalls, **intrusion prevention system**
    (**IPS**), web application firewalls, and endpoint protection.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 目标系统可以大到数据中心，小到计算机。在这两种情况下，建立僵尸网络都涉及识别存在漏洞的主机，可以利用一些恶意软件家族进行利用。攻击者寻找与他们的目标直接或间接相关的信息，以未经授权地获取他们受保护的资产。威胁行为者尝试各种可能的方法来绕过存在的安全系统，如防火墙、**入侵防护系统**（**IPS**）、网络应用防火墙和端点保护。
- en: Weaponization
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 武器化
- en: The wide range of open source software has removed the technical barrier for
    creating malicious code. If a programmer has malicious intent and develops the
    code, a new breed of malware can be developed that would be difficult for security
    systems to detect.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 各种开源软件的广泛使用已消除了创造恶意代码的技术障碍。如果程序员有恶意意图并开发了代码，就可以开发出一种新型的恶意软件，对安全系统检测来说会比较困难。
- en: 'The following is a list of some of the popular tools for developing DDoS:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些用于开发 DDoS 的流行工具列表：
- en: '**Low Orbit Ion Cannon (LOIC)**: This is one of the favorite tools, used by
    the popular hacktivist group *anonymous*. It is a simple flooding tool that can
    generate a massive volume of TCP, UDP, or HTTP traffic to overload the target
    server. It was originally developed to test the throughput of server performance;
    however, the anonymous group used this open source tool to launch sophisticated
    DDoS attacks. The tool was later enhanced with IRC features, which allow users
    to control the connected machines over IRC.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低轨道离子炮 (LOIC)：**这是一种由流行的黑客活动分子团体 *anonymous* 使用的最受欢迎的工具之一。它是一个简单的洪水工具，可以生成大量的
    TCP、UDP 或 HTTP 流量以过载目标服务器。它最初是用来测试服务器性能的吞吐量；然而，匿名团体使用这个开源工具发起了复杂的 DDoS 攻击。该工具后来通过
    IRC 功能进行了增强，允许用户通过 IRC 控制连接的机器。'
- en: '**High Orbit Ion Cannon (HOIC)**: A couple of years after effectively using
    LOIC, the anonymous group dropped it and used the HOIC tool to first target the
    US **Department of Justice** (**DOJ**) in response to its decision to take down
    website `megaupload.com`. HOIC is again a simple application built to support
    cross-platform basic scripts for sending HTTP POST and GET requests with an easy
    and simplified GUI. It was later powered with *booster* scripts, which are text
    files that contain additional basic code, called **booster script**.  This booster
    script also allows the attacker to specify the list of target URLs to attack.
    HOIC is still in use by the anonymous group to launch DDoS attacks globally.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高轨道离子炮 (HOIC)：**在成功使用 LOIC 几年后，匿名团体放弃了它，并使用 HOIC 工具首先瞄准了美国**司法部** (**DOJ**)，以回应其关闭网站
    `megaupload.com` 的决定。HOIC 再次是一个简单的应用程序，用于支持跨平台的基本脚本，用于发送 HTTP POST 和 GET 请求，并带有简单和简化的
    GUI。它后来被配备了 *booster* 脚本，这些脚本是包含额外基本代码的文本文件，称为 **booster 脚本**。这个 booster 脚本还允许攻击者指定要攻击的目标
    URL 列表。HOIC 仍然被匿名团体用来全球发起 DDoS 攻击。'
- en: '**hping**: Just like the anonymous group, there are several different hacktivist
    groups actively targeting businesses and government institutions. A tool called
    *hping* was developed to overcome anonymity challenges with Ion Cannon tools.
    It is again used to generate a massive volume of TCP traffic at the target, and
    it can remain anonymous by spoofing the source IP address. It is one of the most
    powerful and well-rounded tools for several groups of hacktivists.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**hping：**就像匿名团体一样，还有几个不同的黑客活动分子团体积极地瞄准企业和政府机构。一种叫做 *hping* 的工具被开发出来以克服 Ion
    Cannon 工具的匿名挑战。它再次被用来在目标处生成大量的 TCP 流量，并且通过欺骗源 IP 地址来保持匿名。它是几个黑客活动分子团体中最强大和最全面的工具之一。'
- en: '**Slowloris: **Slowloris is one of the most advanced tools used to make attackers
    difficult to detect and track. This tool was developed by a gray hat hacker who
    is known as **RSnake** and is able to initiate DDoS for servers by creating very
    slow HTTP requests. It generates a bulk of tiny HTTP headers that target the server
    and make it wait for the rest of the headers to arrive.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Slowloris：**Slowloris 是最先进的工具之一，用于使攻击者难以检测和追踪。这个工具是由一位被称为**RSnake**的灰帽黑客开发的，它能够通过创建非常慢的
    HTTP 请求来为服务器发起 DDoS 攻击。它生成大量微小的 HTTP 头，以瞄准服务器并使其等待其余的头到达。'
- en: Delivery
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交付
- en: Once the malicious code is developed or software purchased from the dark web
    marketplace, this software can either be delivered through spear phishing emails
    or can also be sent through spam email campaigns. The selection of either depends
    on the target and also the sophistication of the operation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦恶意代码被开发或从暗网市场购买，这个软件可以通过针对性钓鱼邮件交付，也可以通过垃圾邮件活动发送。选择其中一种取决于目标，还取决于操作的复杂性。
- en: 'We can classify the process into the following three groups of methods for
    propagating malicious code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将传播恶意代码的过程分类为以下三组方法：
- en: '**Central source propagation**: In this method, the vulnerable system that
    an attacker is planning to make into one more bot will be given to a central system
    so that the copy of the attacking system is transferred from centrally hosted
    infrastructure to the newly compromised system. After the entire toolkit is moved,
    a script automatically initiates a fresh attack cycle. This entire mechanism uses
    HTTP, FTP, and **remote procedure** **call** (**RPC**) protocols. In this method,
    threat actor exploit the victim machine, compromised system get connected to central
    repository of attacker and finally, central source pushes the code. Take a look
    at the following diagram:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中央源传播**：在这种方法中，攻击者计划将易受攻击的系统变成一个或多个僵尸机器人的系统将被给予一个中央系统，以便攻击系统的副本从中央托管的基础架构转移到新受损系统。整个工具包移动后，脚本会自动启动一个新的攻击周期。这整个机制使用
    HTTP、FTP 和 **远程过程调用**（**RPC**）协议。在这种方法中，威胁行为者利用受害者机器，受损系统连接到攻击者的中央仓库，最后，中央源推送代码。请看以下图表：'
- en: '![](img/4a1b69d3-faa6-4f91-a773-c4cdd2614c4a.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a1b69d3-faa6-4f91-a773-c4cdd2614c4a.png)'
- en: '**Back-chaining propagation**: In this method, the attacker''s toolkit is relocated
    to the newly compromised host by the attacker. The attacker''s toolkit is specially
    designed to accept a file request from a compromised system. The back-channel
    file copy can be done by a port listener using **Trivial File Transfer Protocol**
    (**TFTP).** Unlike central source propagation method, attacker transmit both exploit
    and code together into the victim machine:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反向链接传播**：在这种方法中，攻击者的工具包被重新定位到新受损的主机上。攻击者的工具包是专门设计用于接受来自受损系统的文件请求的。反向通道文件复制可以通过使用
    **简单文件传输协议**（**TFTP**）的端口监听器来完成。与中央源传播方法不同，攻击者将利用和代码一起传输到受害机器中：'
- en: '![](img/8c4125f2-8d9a-440f-99e8-4a33cbab03c8.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c4125f2-8d9a-440f-99e8-4a33cbab03c8.png)'
- en: '**Autonomous propagation**: In this mechanism, the moment an attacker breaks
    into a system, their toolkit is transferred to the compromised host. This mechanism
    differs in terms of method of transfer, as attack toolkits are first planted into
    the compromised host by the attackers only. In this method, attacker transmit
    the exploit first and then the code from himself but not from any central repository.
    Take a look at the following diagram:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动传播**：在这种机制中，一旦攻击者侵入系统，他们的工具包就会转移到受损主机上。这种机制在传输方式上有所不同，因为攻击工具包首先由攻击者种植到受损主机上。在这种方法中，攻击者先传输利用，然后再从自身传输代码，而不是从任何中央仓库传输。请看以下图表：'
- en: '![](img/a407c6ef-2de6-4a8a-88a0-ae8067a975c6.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a407c6ef-2de6-4a8a-88a0-ae8067a975c6.png)'
- en: Exploitation
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用
- en: Once the malware is delivered to the network, it will initiate the process of
    exploiting unpatched software vulnerabilities, weak software coding practices,
    and lack of user attention. Usually, there are numerous vulnerabilities present
    in the network; however, the availability of exploits makes the vulnerability
    much more critical in nature.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦恶意软件传递到网络中，它将启动利用未打补丁的软件漏洞、薄弱的软件编码实践和用户注意力缺失的过程。通常，网络中存在许多漏洞；然而，漏洞的利用性使漏洞的性质变得更加关键。
- en: Installation
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: In the installation stage, the malware is installed in the targeted system and
    allows the remote attacker to gain access to it. During the installation process,
    the malware may be installed in the user space or kernel space of a system. Malware
    installed in the user space has a high possibility of detection; however, malware
    installed in the kernel space has a low chance of being detected by security systems,
    such as endpoint protection, endpoint detection, and response platforms.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装阶段，恶意软件被安装在目标系统中，并允许远程攻击者访问它。在安装过程中，恶意软件可能被安装在系统的用户空间或内核空间。安装在用户空间的恶意软件被检测到的可能性很高；然而，安装在内核空间的恶意软件被安全系统，如终端保护、终端检测和响应平台，检测到的可能性较低。
- en: Command and control (C2)
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令与控制（C2）
- en: After the weapon has been successfully installed, the target is now completely
    under the control of a remote central system, named the system. The network  of
    compromised devices are called botnet, completely under control with threat actor;
    however, the botnet remains silent until it get activated from attacker. There
    are even several types of encrypted bot-to-bot communication present over public
    peer-to-peer networks.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 武器成功安装后，目标现在完全受到一个名为系统的远程中央系统的控制。被攻击的设备网络被称为僵尸网络，完全在威胁行为者的控制之下；然而，这个僵尸网络保持沉默，直到被攻击者激活。甚至还有几种加密的僵尸对僵尸的通信存在于公共对等网络上。
- en: Action on objectives
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动目标
- en: Once the C2 channel has been established, the attacker can launch the DDoS attack
    on the target. At this stage, the attacker runs the script to activate all the
    bots in the entire botnet. The attacker also configures the botnet regarding what
    type of traffic needs to be generated.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 C2 通道建立，攻击者就可以对目标发动 DDoS 攻击。在这个阶段，攻击者运行脚本来激活整个僵尸网络中的所有僵尸。攻击者还会配置僵尸网络以确定需要生成什么类型的流量。
- en: Types of DDoS attack
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DDoS 攻击类型
- en: 'DDoS attacks are carried out in several ways. However, attackers select one
    of them based on different factors, such as target difficulty, financial capability,
    anonymity, priority, and other factors. It does not take much technical expertise
    to run the DDoS attack program and launch it. There are mainly three types of
    attack, categorized as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: DDoS 攻击有多种方式进行。然而，攻击者会根据不同因素选择其中一种，如目标难度、财务能力、匿名性、优先级和其他因素。运行 DDoS 攻击程序并发动它并不需要太多技术专长。主要有三种类型的攻击，分类如下：
- en: Attacks targeting network resources
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标网络资源的攻击
- en: Attacks targeting server resources
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标服务器资源的攻击
- en: Attacks targeting application resources
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标应用程序资源的攻击
- en: Attacks targeting network resources
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标网络资源的攻击
- en: These are attack campaigns in which it is planned to consume the network resources
    of the target system. In this attack, network bandwidth gets completely consumed
    by flooding. The following are several types of flooding attacks.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是计划消耗目标系统网络资源的攻击活动。在这种攻击中，网络带宽被洪泛攻击完全消耗。以下是几种洪泛攻击类型。
- en: User datagram protocol (UDP) flood
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户数据报协议 (UDP) 洪泛
- en: 'UDP is a protocol embedded in the IP packet for socket-level communication
    between two devices. A UDP flood attack does not exploit any specific vulnerability
    of the target system, but rather it simply disrupts the normal traffic of the
    target system by overwhelming it with a high level of flooding. It points to random
    ports on the target server and consumes all the traffic bandwidth for the target
    system. This UDP flood doesn''t even allow the system to send **Internet Control
    Message Protocol** (**ICMP**) destination unreachable packets. Usually, this kind
    of attack is considered in the class of a small-to-medium-level flood attack and
    measured in Mbps and PPS, as shown in the following diagram:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: UDP 是嵌入在 IP 数据包中的用于两个设备之间的套接字级通信的协议。UDP 洪泛攻击不会利用目标系统的任何特定漏洞，而是通过以大量洪泛来淹没目标系统的正常流量来干扰它。它指向目标服务器上的随机端口，并消耗目标系统的所有流量带宽。这种
    UDP 洪泛甚至不允许系统发送**互联网控制消息协议** (**ICMP**) 目的地不可达的数据包。通常，这种类型的攻击被认为是小型到中型洪泛攻击的一种，并以
    Mbps 和 PPS 衡量，如下图所示：
- en: '![](img/05c8808f-f736-411f-977b-f89bc5d60c95.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05c8808f-f736-411f-977b-f89bc5d60c95.png)'
- en: ICMP flood
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ICMP flood
- en: ICMP is another connectionless protocol used for IP-level reachability and management
    operations. Again it doesn't rely on any vulnerabilities to work. An ICMP flood
    can be performed with any type of ICMP message, such as echo requests and echo
    replies. Being one of the oldest flooding techniques, organizations have practices
    to deploy control-plane policies over network devices to restrict the amount of
    ICMP packets that can processed by the control planes of devices.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: ICMP 是另一种用于 IP 层可达性和管理操作的无连接协议。同样，它不依赖于任何漏洞来工作。可以使用任何类型的 ICMP 消息执行 ICMP 洪泛，例如回显请求和回显回复。作为最古老的洪泛技术之一，组织已经采取了在网络设备上部署控制平面策略的做法，以限制设备的控制平面可以处理的
    ICMP 数据包的数量。
- en: Internet Group Management Protocol (IGMP) flood
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互联网组管理协议 (IGMP) 洪泛
- en: IGMP is a multicast protocol, connectionless in nature. It is non-vulnerability
    based, involving the sending of a large amount of IGMP message reports to networks
    or routers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: IGMP 是一种多播协议，性质上是无连接的。它是基于非漏洞的，涉及向网络或路由器发送大量的 IGMP 消息报告。
- en: Amplification attacks
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 放大攻击
- en: 'An amplification attack takes the opportunity of a disparity between a request
    and a reply in a communication channel. An attacker can compromise a router and
    force the router to send broadcast messages on multicast addresses by spoofing
    the source address. It can even be used with DNS amplification, in which the attacker
    can compromise a recursive DNS name server to cache large files. Take a look at
    the following diagram:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 放大攻击利用通信渠道中请求和响应之间的差异。攻击者可以 compromise 一个路由器，强制路由器向多播地址发送广播消息，伪造源地址。甚至可以与 DNS
    放大一起使用，攻击者可以 compromise 递归 DNS 名称服务器以缓存大型文件。请看下图：
- en: '![](img/d983e5b5-f391-482d-a68e-f96e10a937cf.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d983e5b5-f391-482d-a68e-f96e10a937cf.png)'
- en: Attacks targeting server resources
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 针对服务器资源的攻击
- en: Attacks that target server resources of the victim and exhaust the entire server
    processing and memory eventually cause disruption for legitimate traffic. In this
    category, attackers identify the vulnerabilities of the target server and weaponized
    the malware to exploit those vulnerabilities. You will learn about some of the
    most common techniques used to perform these attacks.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 针对受害者服务器资源并最终耗尽整个服务器处理和内存的攻击最终会对合法流量造成破坏。在这个类别中，攻击者识别目标服务器的漏洞，并武装恶意软件以利用这些漏洞。您将了解到一些用于执行这些攻击的最常见技术。
- en: TCP SYN Flood
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP SYN Flood
- en: 'This attack makes use of the TCP three-way handshake mechanism and consumes
    most server resources with TCP sync messages. In the TCP three-way handshake,
    a client first sends the TCP packet with the sync flag set that requests a server
    to allocate a resource and establish a communication channel. In a TCP SYN attack,
    attacking systems send a series of TCP requests with TCP flags set to SYN. To
    manage each of these requests, the server has to open and allocate certain CPU
    resources, and also buffer to prepare further communication. Now, the server sends
    a TCP message with a flag set to SYN-ACK, and expects the client to acknowledge
    that with a TCP message with the ACK flag. The attacking systems receive that
    but never respond, and as a result, the server keeps the socket open and resources
    allocated for the same client machines. Server resources are limited, but the
    attackers can keep multiplying the request to the server to finally exhaust the
    server and make it unavailable for legitimate user traffic. TCP has a specific
    timeout for the request and response process, but the attacker gains the advantage
    of the same period to send massive TCP requests. Take a look at the following
    diagram:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击利用了 TCP 的三次握手机制，并通过 TCP 同步消息消耗大部分服务器资源。在 TCP 的三次握手中，客户端首先发送设置了同步标志的 TCP
    包，请求服务器分配资源并建立通信渠道。在 TCP SYN 攻击中，攻击系统发送一系列设置了 SYN 标志的 TCP 请求。为了管理每一个请求，服务器必须打开并分配一定的
    CPU 资源，并且缓冲以准备进一步的通信。现在，服务器发送一个设置了 SYN-ACK 标志的 TCP 消息，并期望客户端用带有 ACK 标志的 TCP 消息来确认。攻击系统接收到了，但从未做出响应，结果是，服务器保持套接字打开并为同一客户端机器分配资源。服务器资源是有限的，但攻击者可以不断向服务器发送请求，最终耗尽服务器资源，使其对合法用户流量不可用。TCP
    对请求和响应过程有特定的超时时间，但攻击者利用了同样的时间段发送大量的 TCP 请求。请看下图：
- en: '![](img/7f380049-62a1-4346-9995-59c50ec9c0c1.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f380049-62a1-4346-9995-59c50ec9c0c1.png)'
- en: TCP RST attack
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP RST 攻击
- en: In the TCP/IP stack, **Reset** (**RST**) flag in TCP is used to notify a server
    to reset its ongoing TCP connection. In a TCP RST attack, the attacker intercepts
    an active TCP connection between the client and the server by trying a random
    sequence of numbers. After successfully identifying the sequence of numbers, the
    attacker then spoofs the TCP RST message to the client's source IP address. For
    humans to perform such an activity, this would be very difficult. Hence, bots
    are used to intercept and identify the active sequence number.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TCP/IP 栈中，TCP 中的**复位**（**RST**）标志用于通知服务器重置其正在进行的 TCP 连接。在 TCP RST 攻击中，攻击者拦截客户端和服务器之间的活动
    TCP 连接，尝试随机序列号。成功识别序列号后，攻击者伪造 TCP RST 消息发送给客户端的源 IP 地址。对于人类来说，执行这样的活动将非常困难。因此，会使用机器人来拦截和识别活动序列号。
- en: Secure sockets layer (SSL) based attack
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于安全套接字层（SSL）的攻击
- en: SSL is standard security protocol for establishing encrypted channels between
    a web server and a browser. This ensures that all transmitted data is encrypted
    between web server and browser, and hence provides a better privacy and integrity
    solution for internet users. SSL runs over TCP/IP and sends the SSL *hello* only
    once the TCP three-way handshake is completed. SSL-based DDoS attacks can be performed
    in a variety of ways, such as targeting the SSL handshake mechanism, sending random
    and garbage data to the SSL server, or exploiting certain function-related SSL
    encryption key mechanisms.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: SSL是建立Web服务器和浏览器之间加密通道的标准安全协议。这确保了Web服务器和浏览器之间传输的所有数据都是加密的，从而为互联网用户提供了更好的隐私和完整性解决方案。SSL在TCP/IP上运行，并且仅在完成TCP三次握手后发送SSL
    *hello*。基于SSL的DDoS攻击可以通过各种方式进行，例如针对SSL握手机制、向SSL服务器发送随机和垃圾数据，或者利用某些与SSL加密密钥机制相关的功能。
- en: Encrypted HTTP attacks
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密的HTTP攻击
- en: With the growing use of SSL/TLS-encrypted web applications, attackers are also
    moving toward encrypted HTTP-based attacks. Most organizations don't have a security
    solution that can inspect SSL traffic and hence fail to protect it from malicious
    traffic. Attackers make use of this weakness and adopt more and more capabilities
    to compromise networks through encrypted HTTP.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 随着SSL/TLS加密的Web应用程序的使用增加，攻击者也转向加密的基于HTTP的攻击。大多数组织没有能够检查SSL流量的安全解决方案，因此无法保护免受恶意流量的侵害。攻击者利用这一弱点，并采用越来越多的能力通过加密的HTTP来破坏网络。
- en: Attacks targeting application resources
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 针对应用程序资源的攻击
- en: DDoS attacks are on the rise; threat actors are moving from traditional methods
    to more advanced and sophisticated application-based attacks. These are not just
    limited to HTTP-based attacks but are even adapting to HTTPS, DNS, FTP, SMTP,
    and VOIP. Applications are built with several independent components and hence
    are vulnerable. Therefore, application-based attacks become more attractive for
    threat actors. We will cover some of the most widely used attacks.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: DDoS攻击不断增加；威胁行为者正在从传统方法转向更先进和复杂的基于应用程序的攻击。这些不仅仅局限于基于HTTP的攻击，甚至还适应了HTTPS、DNS、FTP、SMTP和VOIP。应用程序由多个独立组件构建，因此易受攻击。因此，基于应用程序的攻击对威胁行为者变得更具吸引力。我们将介绍一些最常用的攻击。
- en: DNS flooding
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNS洪泛攻击
- en: DNS is used everywhere, and every organization network has to have the DNS port
    open for name resolution. It is easy to launch DNS-based flooding and also difficult
    for the security system to detect it. DNS uses the UDP protocol for faster request
    and response times, without establishing a new connection (like in the TCP handshake).
    In this kind of attack, the DNS server can be overwhelmed with a massive amount
    of DNS requests, making the victim server unable to process legitimate requests.
    This technique was used in the recent Mirai attack on the Dyn network that left
    users unable to access YouTube, Twitter, Netflix, and several other applications.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: DNS无处不在，并且每个组织网络都必须打开DNS端口以进行名称解析。发动基于DNS的洪泛攻击很容易，而安全系统难以检测到它。DNS使用UDP协议以获得更快的请求和响应时间，而不建立新的连接（就像在TCP握手中）。在这种类型的攻击中，DNS服务器可能会被大量DNS请求压垮，使受害者服务器无法处理合法请求。这种技术曾在最近对Dyn网络的Mirai攻击中使用，导致用户无法访问YouTube、Twitter、Netflix和其他几个应用程序。
- en: Regular expression DoS attacks
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则表达式DoS攻击
- en: These use the *low and slow* methodology to attack the victim server. The attacker
    leverages vulnerabilities in the library files deployed in the server. Whenever
    a client sends a request with regular expressions, a server has to spend a large
    amount of resources to process the regular expression. Attackers use this to exploit
    the server and send regular expressions periodically that security systems fail
    to detect.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*低速攻击*方法来攻击受害者服务器。攻击者利用服务器部署的库文件中的漏洞。每当客户端发送带有正则表达式的请求时，服务器都必须花费大量资源来处理正则表达式。攻击者利用这一点来利用服务器，并定期发送安全系统无法检测到的正则表达式。
- en: Hash collision DoS attacks
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 散列碰撞DoS攻击
- en: With this kind of attack, makes attackers spend days to months identifying vulnerabilities
    in the web application frameworks. Hash tables are used to index POST sessions
    in most of the application servers. The server has to manage hash collisions when
    similar hash values are returned. Collision resolutions consume a lot of processing
    resources as the attacker keeps sending POST messages with a multitude of parameters.
    Attackers build the parameters in such a way that they cause hash collisions on
    the server side and as a result keep the server busy processing them.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种攻击方式，攻击者需要花费数天到数月的时间来识别Web应用程序框架中的漏洞。大多数应用程序服务器使用哈希表来索引POST会话。当返回相似的哈希值时，服务器必须管理哈希冲突。冲突解决消耗大量的处理资源，因为攻击者不断发送带有大量参数的POST消息。攻击者设计参数的方式导致服务器端发生哈希冲突，结果使服务器忙于处理它们。
- en: Challenges with current DDoS solutions
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当前DDoS解决方案面临的挑战
- en: In the past few years, a rise in DDoS attacks has been observed. As per the
    recent report by Radware, 43% of organizations experienced burst attacks, but
    the rest were unaware of whether they were attacked. Attackers are adapting several
    emerging techniques and complex tactics to compromise the target network.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年中，DDoS攻击呈上升趋势。根据Radware最近的报告，43%的组织经历了爆发性攻击，但其余的组织不知道自己是否受到了攻击。攻击者正在采用几种新兴技术和复杂的策略来
    compromis 目标网络。
- en: On February 28, 2018, GitHub, the code hosting website, was hit with the largest-ever
    DDoS attack, recorded at 1.35 Tbps. As DDoS attack falls under cyber threat category
    that makes it unfeasible to deploy any security prevention mechanism as system
    vulnerabilities are under control of organizations but threats cant be controlled. The
    frontend of web application remains centralized for all users; hence, it leaves
    a single point of failure situation for organizations.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在2018年2月28日，代码托管网站GitHub遭受了有史以来最大的DDoS攻击，记录在1.35 Tbps。由于DDoS攻击属于无法部署任何安全预防机制的网络威胁类别，因为系统漏洞受到组织控制，但威胁无法控制。Web应用程序的前端对于所有用户保持集中，因此为组织留下了单点故障的局面。
- en: How blockchain can transform  DDoS protection?
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块链如何改变DDoS保护？
- en: 'By definition, blockchain is a decentralized network that allow independent
    parties to communicate without any third party involvement. In order to protect
    networks from DDoS attacks, organizations can be made distributed between multiple
    server nodes that provide high resilience and remove the single point of failure.
    There are two main advantages to using blockchain, as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 根据定义，区块链是一个去中心化网络，允许独立的各方进行通信，而无需任何第三方的参与。为了保护网络免受DDoS攻击，组织可以分布在多个服务器节点之间，提供高弹性并消除单点故障。使用区块链有两个主要优势，如下所示：
- en: Blockchain technology can be used to deploy a decentralized ledger to store
    blacklisted IPs
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块链技术可用于部署一个分散式分类的IP地址存储黑名单
- en: Blockchain technology eliminates the risk of a single point of failure
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块链技术消除了单点故障的风险
- en: Lab
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实验室
- en: In order to deploy the blockchain based DDoS protection platform, we must prepare
    the test environment with Node.js and Truffle with ethereum blockchain. We will
    be using an existing blockchain project to defend network from DDoS attack. The
    project link can be found at link [https://github.com/gladiusio/gladius-contracts](https://github.com/gladiusio/gladius-contracts).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了部署基于区块链的DDoS保护平台，我们必须准备带有Node.js和Truffle的测试环境，以太坊区块链。我们将使用现有的区块链项目来保护网络免受DDoS攻击。项目链接可以在链接[https://github.com/gladiusio/gladius-contracts](https://github.com/gladiusio/gladius-contracts)中找到。
- en: 'Furthermore, we need to follow the steps to prepare the infrastructure for
    Gladius project:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们需要按照步骤准备Gladius项目的基础架构：
- en: First, we will install Node.js in our environment at [https://nodejs.org/uk/download/package-manager/#arch-linux](https://nodejs.org/uk/download/package-manager/#arch-linux).
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将在环境中安装Node.js，网址为[https://nodejs.org/uk/download/package-manager/#arch-linux](https://nodejs.org/uk/download/package-manager/#arch-linux)。
- en: 'We need to install `truffle` to test the environment:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要安装`truffle`来测试环境：
- en: '[PRE0]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the following command in the Terminal:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行以下命令：
- en: '[PRE1]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we can start the test network with this command in the Terminal:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过以下命令在终端中启动测试网络：
- en: '[PRE2]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows the output of running the preceding command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了运行上述命令的输出：
- en: '![](img/e78c5c9d-60d8-4708-88b1-f40df34a214b.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e78c5c9d-60d8-4708-88b1-f40df34a214b.png)'
- en: In this Terminal window, we can see all transactions in the test blockchain
    network. Now, we have to open a new Terminal window and need to jump into the
    working directory.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个终端窗口中，我们可以看到测试区块链网络中的所有交易。现在，我们必须打开一个新的终端窗口并跳转到工作目录。
- en: 'To set up the project, follow these instructions:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置项目，请按照以下说明操作：
- en: Go to [https://github.com/gladiusio/gladius-contracts](https://github.com/gladiusio/gladius-contracts)
    and download the `.zip` file. Next, unzip this file to the folder you want.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://github.com/gladiusio/gladius-contracts](https://github.com/gladiusio/gladius-contracts)并下载`.zip`文件。然后，将此文件解压缩到您想要的文件夹中。
- en: 'Replace the code in the `truffle.js` file with the following code:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换`truffle.js`文件中的代码：
- en: '[PRE3]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will go to the folder name `gladius-contracts-master` through the Terminal
    and compile contracts with the following command:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过终端转到名为`gladius-contracts-master`的文件夹，并使用以下命令编译合约：
- en: '[PRE4]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows the output of running the preceding command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了运行上述命令的输出：
- en: '![](img/c7109564-65eb-42a3-9920-aa6a9bca14c5.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7109564-65eb-42a3-9920-aa6a9bca14c5.png)'
- en: 'Now, we will deploy our contracts to the `ganache-cli` local blockchain with
    the following command:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用以下命令将我们的合约部署到`ganache-cli`本地区块链：
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot shows the output of running the preceding command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了运行上述命令的输出：
- en: '![](img/39039e2e-ea89-4d62-9216-51bbfa436479.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39039e2e-ea89-4d62-9216-51bbfa436479.png)'
- en: 'Now, we have to launch the unit test with the `truffle test` command to make
    sure that smart contracts are functional:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须使用`truffle test`命令启动单元测试以确保智能合约可用：
- en: '![](img/0e60f5c6-bdb0-48fd-96b4-04f1f62a893b.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e60f5c6-bdb0-48fd-96b4-04f1f62a893b.png)'
- en: Go to  [https://github.com/gladiusio/gladius-control-daemon](https://github.com/gladiusio/gladius-control-daemon),
    download the `.zip`, and unzip it to the same folder as `gladius-contracts`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://github.com/gladiusio/gladius-control-daemon](https://github.com/gladiusio/gladius-control-daemon)，下载`.zip`文件，并将其解压到与`gladius-contracts`相同的文件夹中。
- en: 'Next, we locate the `gladius-control-daemon-master` folder in the Terminal
    and link contract **Application Binary Interface** (**ABI**).  ABI is the interface
    between two program modules, one of which is at the level of machine code:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在终端中找到`gladius-control-daemon-master`文件夹，并链接合约**应用程序二进制接口**（**ABI**）。ABI
    是两个程序模块之间的接口，其中一个模块位于机器代码级别：
- en: '[PRE6]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following screenshot shows the output of running the preceding command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了运行上述命令的输出：
- en: '![](img/0f91547f-e854-4ebf-a2a0-f651fc35e01f.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f91547f-e854-4ebf-a2a0-f651fc35e01f.png)'
- en: 'Next, we will install dependencies with the `npm install` command:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`npm install`命令安装依赖项：
- en: '![](img/9395bc6c-18a7-47aa-9290-0c261abda4a4.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9395bc6c-18a7-47aa-9290-0c261abda4a4.png)'
- en: 'Next, we will start the script with the `node index.js` command:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`node index.js`命令启动脚本：
- en: '![](img/21e836aa-9b53-4568-8ab8-9a3b462501f8.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21e836aa-9b53-4568-8ab8-9a3b462501f8.png)'
- en: 'Let''s open a new Terminal window and run the `gladius-networkd` command:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开一个新的终端窗口并运行`gladius-networkd`命令：
- en: '![](img/606c5a25-7580-4013-b323-a5e1635209d4.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/606c5a25-7580-4013-b323-a5e1635209d4.png)'
- en: 'Next, we need to open a new Terminal window and run the `gladius-controld`
    command:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要打开一个新的终端窗口并运行`gladius-controld`命令：
- en: '![](img/6ff28ca1-7232-4f84-b01b-79dc4faf9987.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ff28ca1-7232-4f84-b01b-79dc4faf9987.png)'
- en: 'To start your node, you need to run the following in the new Terminal window:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动您的节点，您需要在新的终端窗口中运行以下命令：
- en: '[PRE7]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The next screenshot shows the output of running the preceding command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个截图显示了运行上述命令的输出：
- en: '![](img/ebddf5a7-9abb-4e1d-bd5f-4a12a16cee95.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebddf5a7-9abb-4e1d-bd5f-4a12a16cee95.png)'
- en: 'We can submit the data to a specific pool, allowing it to accept or reject
    you becoming a part of the pool:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以将数据提交给特定的池，使其接受或拒绝您成为池的一部分：
- en: '![](img/b3d1e593-93e1-45d7-81f7-805fe4310912.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3d1e593-93e1-45d7-81f7-805fe4310912.png)'
- en: 'After we are done creating a node, we can check the status of it with our manager
    app. This displays your node information from the blockchain:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建节点完成后，我们可以使用我们的管理器应用程序检查其状态。这将从区块链中显示您的节点信息：
- en: '![](img/cfb17baa-3d47-4e91-86c7-898589a54161.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cfb17baa-3d47-4e91-86c7-898589a54161.png)'
- en: You simply have to download the Gladius client to your computer and access the
    system.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需将 Gladius 客户端下载到您的计算机并访问系统即可。
- en: Once Gladius has been activated, all the nodes handle the continuous stream
    of requests to validate website connections and block malicious activity. Gladius
    is proactively working to fix several challenges in the system and achieve a stable
    system.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Gladius 被激活，所有节点都会处理连续的请求流以验证网站连接并阻止恶意活动。Gladius 正在积极努力解决系统中的若干挑战，并实现系统的稳定。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about DDoS attacks and how they operate. We understood
    the challenges with the current DDoS solutions and also learned how the use of
    blockchain can help us with better solutions to effectively defend our network
    from malicious bursts of traffic.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了 DDoS 攻击及其运作方式。我们了解了当前 DDoS 解决方案所面临的挑战，也了解了如何利用区块链来帮助我们更有效地保护网络免受恶意流量的侵害。
- en: Questions
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Readers should understand that this is only one of multiple ways to defend
    against DDoS attacks. Readers are expected to check out some of the following
    questions:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应该理解这只是防御 DDoS 攻击的多种方式之一。读者应该查阅以下一些问题：
- en: Why are DDoS attacks becoming more frequent?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么 DDoS 攻击变得越来越频繁？
- en: Can we use blockchain to prepare threat intelligence about upcoming DDoS attacks?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用区块链准备关于即将发生的 DDoS 攻击的威胁情报吗？
- en: Further reading
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To further explore blockchain technology for DDoS protection, the following
    links can be useful:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步探索区块链技术用于 DDoS 保护，以下链接可能会有帮助：
- en: '*A Blockchain-Based Architecture for Collaborative DDoS Mitigation with Smart
    Contracts* at [https://www.springer.com/cda/content/document/cda_downloaddocument/9783319607733-c2.pdf?SGWID=0-0-45-1609389-p180909480](https://www.springer.com/cda/content/document/cda_downloaddocument/9783319607733-c2.pdf?SGWID=0-0-45-1609389-p180909480).'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基于智能合约的协作 DDoS 缓解的区块链架构* 可在 [https://www.springer.com/cda/content/document/cda_downloaddocument/9783319607733-c2.pdf?SGWID=0-0-45-1609389-p180909480](https://www.springer.com/cda/content/document/cda_downloaddocument/9783319607733-c2.pdf?SGWID=0-0-45-1609389-p180909480)
    找到。'
- en: '*Collaborative DDoS Mitigation Based on Blockchains* at [https://files.ifi.uzh.ch/CSG/staff/Rafati/Jonathan%20Burger-BA.pdf](https://files.ifi.uzh.ch/CSG/staff/Rafati/Jonathan%20Burger-BA.pdf).'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基于区块链的协作 DDoS 缓解* 可在 [https://files.ifi.uzh.ch/CSG/staff/Rafati/Jonathan%20Burger-BA.pdf](https://files.ifi.uzh.ch/CSG/staff/Rafati/Jonathan%20Burger-BA.pdf)
    找到。'
