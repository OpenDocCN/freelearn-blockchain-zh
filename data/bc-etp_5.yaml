- en: Building Interoperable Blockchains
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立互操作性区块链
- en: There are various permissioned and public blockchains representing different
    assets, information, and business processes. One of the major requirements for
    using these networks is to enable them to talk to each other, which is a major
    challenge to overcome. It would be great if there were only one blockchain to
    rule them all, but that's definitely not going to happen, because it's not possible
    for only one blockchain to win in terms of security, privacy, efficiency, flexibility,
    platform complexity, developer ease of use, and so on. The future of blockchains
    will be several public and permissioned blockchains interoperating with each other.
    In this chapter, we are going to explore how to achieve interoperability between
    multiple Quorum networks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种许可和公共区块链代表不同的资产、信息和业务流程。使用这些网络的主要需求之一是使它们能够彼此通信，这是一个需要克服的主要挑战。如果只有一个区块链能够统治它们所有，那将是很棒的，但绝对不会发生，因为只有一个区块链无法在安全性、隐私性、效率性、灵活性、平台复杂性、开发人员易用性等方面取得胜利。未来的区块链将是数个公共和许可区块链之间的互操作。本章中，我们将探讨如何实现多个夸梦网络之间的互操作性。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding what blockchain interoperability means and the various popular
    projects related to it
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解区块链互操作性及相关的各种流行项目
- en: Examining the use cases that interoperable blockchains can achieve
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 研究互操作性区块链可以实现的用例
- en: Looking at the various technologies and patterns that can be used to achieve
    blockchain interoperability
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鉴于可以用于实现区块链互操作性的各种技术和模式
- en: Building an interoperable blockchain network representing **FedCoins**
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立代表**联邦硬币**的互操作性区块链网络
- en: Understanding blockchain interoperability
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解区块链互操作性
- en: Interoperable blockchains are blockchains that can talk to each other. Each
    blockchain can read the other's state. There will be many occasions when you will
    want to enable your smart contracts to talk to centralized or other decentralized
    apps. When we talk about interoperability between DApps we're talking about something
    different than interoperability between blockchains.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 互操作性的区块链是可以彼此通信的区块链。每个区块链可以读取另一个区块链的状态。很多时候，你可能想要启用你的智能合约与中心化或其他去中心化的应用交互，当我们谈论DApp之间的互操作性时，我们在谈论与区块链之间的互操作性有所不同。
- en: Enabling an Ethereum smart contract to check whether a file exists in IPFS or
    not is enabling interoperability between DApps, whereas enabling an Ethereum smart
    contract to fetch a Bitcoin account balance is enabling interoperability between
    blockchains.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使以太坊智能合约能够检查文件是否存在于IPFS中，这就实现了DApp之间的互操作性，而使以太坊智能合约能够获取比特币账户余额则实现了区块链之间的互操作性。
- en: Getting Ethereum smart contracts to make REST APIs call to centralized apps
    is considered enabling interoperability between Ethereum and WWW. But in this
    chapter, we will learn about interoperability between blockchains, specifically
    interoperability between Quorum networks.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让以太坊智能合约调用REST API以调用中心化应用被认为是在以太坊和WWW之间实现互操作性。但在本章中，我们将了解区块链之间的互操作性，特别是夸梦网络之间的互操作性。
- en: There are various popular projects being developed that aim to employ decentralized
    mechanisms to achieve interoperability between blockchains. Various popular projects,
    such as **Cosmos**, **Polkadot**, **Interledger**, **Block Collider**, and so
    on, are being actively developed to make blockchain interoperability decentralized
    and easy to achieve, but in this chapter we won't cover these, as they aim to
    bring interoperability to public blockchains. However, the strategies that we
    will learn to create interoperable blockchains are being used by these projects.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 目前正在开发的各种流行项目旨在采用去中心化机制实现区块链之间的互操作性。各种流行项目，如**Cosmos**、**Polkadot**、**Interledger**、**Block
    Collider**等，正在积极开发，以使区块链互操作化去中心化和易于实现，但在本章中我们不会涵盖这些项目，因为它们的目标是将互操作性带给公共区块链。然而，我们将学习创建互操作性区块链所使用的策略，正在被这些项目使用。
- en: What can interoperable blockchains achieve?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互操作性的区块链可以实现什么？
- en: 'Before going further and looking at how to achieve blockchain interoperability,
    we need to know what kinds of things that interoperable blockchains can achieve.
    There are obviously many use cases for interoperable blockchains, but we will
    be looking at the use cases that interoperability between blockchains mostly aims
    to achieve. It may achieve one or more of the following use cases:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步研究如何实现区块链互操作性之前，我们需要知道互操作性区块链可以实现哪些事情。显然，互操作性区块链有许多用例，但我们将重点关注互操作性区块链主要旨在实现的用例。它可以实现以下一个或多个用例：
- en: '**Portable assets**: Moving assets back and forth from one blockchain to another.
    These are also called **one-to-one pegs** or **two-way pegs**.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可移植资产**：在不同区块链之间来回转移资产。这也被称为**一对一挂钩**或**双向挂钩**。'
- en: '**Payment-versus-payment and payment-versus-delivery**: These are technically
    known as **atomic swaps**. When two users are exchanging assets that reside in
    two different blockchains, a guarantee is needed, stating that either both transfers
    happen or neither does. For example, if one blockchain holds digitalized USD and
    the other holds digitalized EUR, then users should be able to exchange these assets
    atomically.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支付对支付和支付对交付**：技术上称为**原子交换**。当两个用户交换存在于两个不同区块链中的资产时，需要一个保证，即要么两个转账都发生，要么都不发生。例如，如果一个区块链持有数字化美元，另一个区块链持有数字化欧元，那么用户应该能够原子地交换这些资产。'
- en: '**Fetching information and reacting to events**: One blockchain is able to
    read information that exists on another blockchain or is able to react to transactions
    happening on another blockchain. For example, this could be a case where one blockchain
    represents tenancy contracts and other one represents locked security deposits,
    so when the tenancy contract expires in the first blockchain, the second one should
    automatically release the security deposits.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取信息并对事件做出反应**：一个区块链能够读取另一个区块链上存在的信息，或者对另一个区块链上发生的交易做出反应。例如，一个区块链代表租赁合同，另一个代表锁定的安全押金，因此当第一个区块链中的租赁合同到期时，第二个区块链应自动释放安全押金。'
- en: Strategies for implementing blockchain interoperability
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现区块链互操作性的策略
- en: Let's look at the various strategies with which you can achieve one or more
    of the previous use cases. We will learn the strategies that we can implement
    in Quorum, but not all the ones that are available for public or other blockchains.
    We will also look at examples of how to implement these strategies.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看您可以实现前述一个或多个用例的各种策略。我们将学习可以在Quorum中实施的策略，但不是所有公共或其他区块链都可用的策略。我们还将看一些如何实现这些策略的示例。
- en: Single custodian
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单一托管者
- en: The easiest way to achieve interoperability is to have a centralized third-party
    through which blockchains can talk to each other. Essentially, you need to trust
    the third-party.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 实现互操作性的最简单方法是通过一个集中式第三方，使区块链能够相互通信。基本上，您需要信任这个第三方。
- en: However, centralized interoperability projects, such as **Oraclize**, have solved
    the trust problem. Oraclize enables your Ethereum smart contracts to communicate
    with the WWW; that is, it enables you to make REST API calls, fetch a Bitcoin
    account balance, check the file status in IPFS, and so on. Oraclize also provides
    a proof for smart contracts stating that the results have not been manipulated;
    therefore, Oraclize has tackled the trust issue, but the single point of failure
    still remains. Oraclize is available for both permissioned and public Ethereum.
    Oraclize's major achievement was providing the ability for Ethereum smart contracts
    to make REST API calls, but its purpose was never to provide interoperability
    between blockchains, and therefore it doesn't offer this feature.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，像**Oraclize**这样的集中式互操作性项目已解决了信任问题。Oraclize使您的以太坊智能合约能够与万维网进行通信；也就是说，它使您能够进行REST
    API调用，获取比特币账户余额，检查IPFS中的文件状态等等。Oraclize还为智能合约提供了证明，证明结果没有被篡改；因此，Oraclize解决了信任问题，但单点故障仍然存在。Oraclize适用于权限和公共以太坊。Oraclize的主要成就是为以太坊智能合约提供了进行REST
    API调用的能力，但它的目的从未是提供区块链之间的互操作性，因此它不提供此功能。
- en: If trust is not an issue for you, then the single custodian strategy is definitely
    something you should consider, as this supports all the three use cases we discussed
    earlier. You can easily write a centralized application that reacts to events
    on one blockchain and calls actions on another blockchain. In permissioned blockchains,
    there are usually regulators or authorities that you can choose to host that centralized
    application. The single custodian should send transactions that are signed using
    a private key that the blockchains have been pre-programmed to trust.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果信任对你不是问题的话，那么单一托管策略绝对是你应该考虑的一件事，因为这支持我们先前讨论的所有三种用例。 您可以轻松编写一个集中式应用程序，以响应一个区块链上的事件并在另一个区块链上调用操作。
    在得到许可的区块链中，通常有监管机构或权威机构可以选择承载该集中式应用程序。 单一托管方应发送使用预先编程为信任的区块链签名的交易。
- en: Multisignature federation
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多重签名联盟
- en: 'A better option to implement interoperability between blockchains is to have
    a group of notaries (or authorities) in control of a multisignature, where the
    majority of them have to approve an action for it to proceed. This setup is better
    than having a single custodian, but still centralizes control. To achieve true
    decentralization, the notaries should be carefully selected to have at least the
    following properties:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链之间实现互操作性的更好选择是由一组公证人（或权威）控制多重签名，其中大多数公证人必须批准某项操作才能进行。 这种设置比拥有单一托管方更好，但仍然集中控制。
    要实现真正的去中心化，应谨慎选择公证人，至少具有以下特性：
- en: The number of notaries should not be low—for example, at least 10.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公证人的数量不应低—例如，至少10个。
- en: The number of notaries should not be too high—for example, less than 30, so
    that users can verify the authenticity and honesty of the notaries.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公证人的数量不应太高—例如，少于30个，这样用户可以验证公证人的真实性和诚实度。
- en: Notaries should be distributed across different legal jurisdictions and nations
    to prevent state attacks, coercion, and censorship.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公证人应分布在不同的法律司法管辖区和国家，以防止国家攻击、胁迫和审查。
- en: Notaries should be geographically distributed to prevent failure of the infrastructure
    in case of natural disasters.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了防止自然灾害发生时基础设施的故障，公证人应该在地理上分布。
- en: Notaries should be renown.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公证人应是有名望的。
- en: Notaries should not be controlled by (or dependent on) a lower number of entities.
    For example, notaries cannot be different branches of the same bank.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公证人不应受（或依赖于）较低数量的实体控制。 例如，公证人不能是同一银行的不同分支。
- en: Notaries should be able to achieve and maintain a specified level of security
    through physical and logical protections, together with the required security
    procedures.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公证人应通过物理和逻辑保护以及所需的安全程序实现和保持指定级别的安全性。
- en: Sidechains or relays
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 侧链或中继
- en: A sidechain is a system inside one blockchain that can validate and read events
    and/or states in other blockchains. Relays are a more direct method for facilitating
    interoperability, where instead of relying on trusted intermediaries to provide
    information about one blockchain to another, the blockchains effectively take
    on the task of doing that themselves. Currently, sidechain systems are achieved
    using **Merkle trees**.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 侧链是一种在一个区块链内部的系统，可以验证和读取其他区块链中的事件和/或状态。 中继是一种更直接的促进互操作性的方法，而不是依赖于可信中介向另一个区块链提供信息，区块链有效地承担了这一任务。
    目前，使用**Merkle树**来实现侧链系统。
- en: The general approach is as follows. Suppose that a smart contract executing
    on blockchain *B* wants to learn either whether a particular event took place
    on blockchain *A*, or some particular object in the state of blockchain *A* contained
    some value at some particular time. We can create a contract on blockchain *B*
    that takes one of these block headers of blockchain *A* and uses the standard
    verification procedure for the blockchain *A *consensus algorithm to verify this
    block header—in IBFT, this would involve verifying that more than 75% of the validators'
    signatures have signed the block header. Once the relay has verified that the
    block header has been finalized, the relay can then verify any desired transaction
    or account/state entry separately by verifying a single branch of the Merkle tree
    against the block header.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通用的方法如下。假设在区块链 *B* 上执行的智能合约想要了解区块链 *A* 上是否发生了某个特定事件，或者在区块链 *A* 的状态中的某个特定对象在某个特定时间是否包含了某个值。我们可以在区块链
    *B* 上创建一个合约，该合约接受区块链 *A* 的其中一个区块头，并使用区块链 *A* 共识算法的标准验证过程来验证这个区块头——在 IBFT 中，这将涉及验证超过
    75% 的验证者签名已经签署了区块头。一旦中继验证了区块头已经被确定，中继就可以验证任何所需的交易或账户/状态条目，通过对梅克尔树的单个分支进行区块头验证。
- en: 'The use of this so-called **light client verification** technology is ideal
    for relays because of how fundamentally resource constrained a blockchain is.
    In fact, it is impossible for a mechanism inside blockchain *A* to fully validate
    blockchain *B* and for a mechanism inside blockchain *B* to fully validate blockchain
    *A* at the same time, for the same simple mathematical reason that two boxes cannot
    simultaneously contain each other: *A* would need to rerun the part of *B* that
    reruns *A*, including the part of *A* that reruns *B*, and so forth. With light
    client verification, however, a protocol where blockchain *A* contains small pieces
    of blockchain *B* and blockchain *B* contains small pieces of blockchain *A* that
    are pulled on-demand is entirely feasible. A smart contract on a relay on blockchain
    *B* that wants to verify a particular transaction, event, or piece of  state information
    on blockchain *A* would, much like a traditional light client, verify a branch
    of the cryptographic hash tree of blockchain *A*, then verify with the block header
    that the root of this branch is inside, and if both checks pass, it would accept
    that the transaction, event, or state information is correct.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所谓的 **轻客户端验证** 技术的应用对中继而言是理想的，因为区块链在资源上基本上是受限的。事实上，在同一时间，内部机制无法完全验证区块链 *A* 并使内部机制完全验证区块链
    *B*，因为数学上简单的原因是两个盒子无法同时包含彼此：*A* 需要重新运行重新运行 *A* 的那部分部分，包括重新运行 *B* 的那部分 *A*，等等。然而，通过轻客户端验证，一个协议，其中区块链
    *A* 包含区块链 *B* 的小片段，并且区块链 *B* 包含区块链 *A* 的小片段，这些片段是按需拉取的，是完全可行的。在区块链 *B* 上的一个中继的智能合约想要验证区块链
    *A* 上的特定交易、事件或状态信息时，就像传统的轻客户端一样，会验证区块链 *A* 的加密哈希树的一个分支，然后通过区块头验证这个分支的根是否在内部，如果这两个检查通过，它会接受该交易、事件或状态信息是正确的。
- en: Note that because blockchains are fully self-contained environments and have
    no natural access to the outside world, the relevant bits of chain *A* would need
    to be fed into chain *B* by a user; however, because the data is, in a cryptographic
    sense, self-verifying, the user that feeds in this information need not be trusted.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于区块链是完全自包含的环境，并且没有自然访问外部世界的能力，因此链 *A* 的相关数据需要由用户输入到链 *B* 中；但是，因为数据在密码学意义上是自验证的，输入这些信息的用户无需受信任。
- en: Hash locking
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希锁定
- en: 'Hash locking is a technique for achieving atomic exchange of assets. It doesn''t
    require any intermediary. This is how hash locking works:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希锁定是一种实现资产的原子交换的技术。它不需要任何中介。哈希锁定的工作原理如下：
- en: Suppose that there are two assets called *A* and *B* in two different blockchains.
    The owner of asset *A* is *X* and the owner of asset *B* is *Y*.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设在两个不同的区块链中有两个名为 *A* 和 *B* 的资产。资产 *A* 的所有者是 *X*，资产 *B* 的所有者是 *Y*。
- en: If they both want to exchange the assets, then first of all, *X* has to generate
    a secret, *S*, and compute the hash of the secret, which is *H*. After that, *X*
    shares *H* with *Y*.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果他们两个都想交换这些资产，那么首先，*X* 必须生成一个秘密值 *S*，并计算秘密值的哈希 *H*。之后，*X* 与 *Y* 共享 *H*。
- en: Now, *X* locks asset *A*, stating that if the *S* for *H* is revealed within
    *N* seconds by *Y,* then ownership of the asset will be transferred to *Y;* otherwise,
    the asset will be unlocked after *N* seconds.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，*X* 锁定资产 *A*，声明如果 *Y* 在 *N* 秒内揭示 *H* 的 *S*，则资产的所有权将转移到 *Y*；否则，资产将在 *N* 秒后解锁。
- en: Next, *Y *locks asset *B*, stating that if the *S* for *H* is revealed within
    *N/2* seconds by *X,* then ownership of the asset will be transferred to *X;* otherwise,
    the asset will be unlocked after *N/2* seconds.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，*Y* 锁定资产 *B*，声明如果 *X* 在 *N/2* 秒内揭示 *H* 的 *S*，则资产的所有权将转移给 *X*；否则，资产将在 *N/2*
    秒后解锁。
- en: So now, assets *A* and *B* are locked after *N* and *N/2* seconds respectively.
    Now, within *N/2* seconds, *X* reveals *S* to the *B's* blockchain to claim ownership
    of the asset. Now, *Y* has the equivalent time to learn *S* and reveal *S* to
    blockchain *A* to claim ownership.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所以现在，资产 *A* 和 *B* 在分别 *N* 秒和 *N/2* 秒后被锁定。现在，在 *N/2* 秒内，*X* 向 *B* 的区块链揭示 *S*
    以主张资产的所有权。现在，*Y* 有同等的时间来了解 *S* 并向区块链 *A* 揭示 *S* 以主张所有权。
- en: The reason why *X* gets half of the time given to *Y* to claim the funds is
    that only *X* knows the secret, and after *Y* locks the funds, *X* can wait almost
    until the end of *N* seconds and claim the asset, which will not give sufficient
    time for *Y* to claim their funds. Therefore, *X* can succeed in stealing asset
    *A* and *B*. To avoid this, we are give *Y * *N* seconds and *X * *N/2* seconds,
    so that *Y* will have same amount of time as *X* to claim the asset.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*X* 得到与 *Y* 给予的时间的一半的原因是只有 *X* 知道密码，而 *Y* 锁定资金后，*X* 可以等到 *N* 秒快结束时主张资产，这将不给
    *Y* 足够的时间来主张他们的资金。因此，*X* 可以成功地窃取资产 *A* 和 *B*。为了避免这种情况，我们给予 *Y* *N* 秒和 *X* *N/2*
    秒，以便 *Y* 有与 *X* 相同的时间来主张资产。'
- en: The downside of this technique is that if *X* reveals the *S* to blockchain *B*
    in between the *N/2* and *N* seconds, then *X* will not be able to claim ownership
    of *B,* but *Y* will learn about *S* and have time to claim ownership of *A*.
    However, this would be the fault of *X*,and can be avoided.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术的缺点是，如果 *X* 在 *N/2* 秒和 *N* 秒之间将 *S* 揭示给区块链 *B*，那么 *X* 将无法主张对 *B* 的所有权，但
    *Y* 将了解 *S* 并有时间主张对 *A* 的所有权。然而，这将是 *X* 的错，可以避免。
- en: Building a FedCoin
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 FedCoin
- en: FedCoin is a digital currency issued by a central bank and hedged one to one
    with their fiat currency. Digitalizing fiat currency using blockchain has several
    benefits, such as enabling easy cross-border payments, saving reconciliation efforts,
    and so on.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: FedCoin 是由中央银行发行的数字货币，与其法定货币一比一进行对冲。使用区块链数字化法定货币有几个好处，例如可以实现便捷的跨境支付，节省了对账工作等。
- en: Let's build some digitalized INR and USD on two different blockchain networks.
    Then, let's create some atomic swap contracts to enable the exchange of these
    currencies between banks atomically. This use case would require you to create
    two different Quorum networks using IBFT consensus. In each network there is one
    authority, which is the central bank, and *N* number of peers, which are other
    banks. So, you can assume that in the first network, the **Federal Reserve System**
    (**FRS**) is the authority and **Bank of America** (**BOA**) and ICICI banks are
    the peers. Similarly, in the second network, the **Reserve Bank of India** (**RBI**) is
    the authority and BOA and the ICICI bank are the peers.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在两个不同的区块链网络上构建一些数字化的印度卢比和美元。然后，让我们创建一些原子交换合约，以实现这些货币在银行之间的原子交换。这个用例需要您创建两个不同的
    Quorum 网络，使用 IBFT 共识。在每个网络中有一个权威，即中央银行，以及 *N* 个同行，即其他银行。因此，您可以假设在第一个网络中，**美联储系统**（**FRS**）是权威，**美国银行**（**BOA**）和
    ICICI 银行是同行。同样，在第二个网络中，**印度储备银行**（**RBI**）是权威，BOA 和 ICICI 银行是同行。
- en: You don't have to build this network now because when building and testing smart
    contracts, you can use only one node with four Ethereum account addresses. This
    would be enough to simulate the whole scenario.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在不必构建此网络，因为在构建和测试智能合约时，您只能使用具有四个以太坊账户地址的一个节点。这足以模拟整个场景。
- en: Smart contracts to digitalize fiat currency
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于数字化法定货币的智能合约
- en: 'Here is a basic smart contract to create a digitalized USD on a blockchain.
    This smart contract allows us to issue and transfer digitalized currency:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个基本的智能合约，用于在区块链上创建数字化美元。这个智能合约允许我们发行和转移数字化货币：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is how the preceding code works:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是上述代码的工作原理：
- en: First, we defined a mapping to store the amount of USD each bank holds. Each
    bank can have multiple addresses to achieve privacy. These addresses don't have
    to be banks; they can also be other smart contracts, as every smart contract also
    has `address`.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们定义了一个映射来存储每家银行持有的美元数量。每家银行可以有多个地址以实现隐私。这些地址不一定是银行；它们也可以是其他智能合约，因为每个智能合约也有`address`。
- en: Next, we assumed that the central bank deploys the contracts. Therefore, we
    defined the central bank as the issuer by assigning its `address` to `owner`.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们假设中央银行部署了合约。因此，我们将中央银行定义为发行方，通过将其`address`分配给`owner`。
- en: Then, we defined the function `issueUSD` with which the central bank can issue
    USD to other banks.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们定义了一个名为`issueUSD`的函数，中央银行可以利用它向其他银行发行美元。
- en: Then, we defined another function, named `transferUSD`, with which banks can
    transfer USD between themselves.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们定义了另一个名为`transferUSD`的函数，银行可以利用它在彼此之间转移美元。
- en: Next, we had a function for reading the balance of an account.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们有一个函数用于读取账户的余额。
- en: Finally, we had two important functions: `approve` and `transferUSDFrom`. The  `transferUSDFrom` function allows
    contracts to send USD on your behalf. In other words, you are providing APIs for
    other smart contracts on the same blockchain to manage your funds. The `approve` function
    is used to provide approval for a smart contract to manage your funds. When calling `approve`, you
    mention how much of your funds that contract can manage.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们有两个重要的函数：`approve`和`transferUSDFrom`。`transferUSDFrom`函数允许合约代表您发送美元。换句话说，您为同一区块链上的其他智能合约提供了管理您资金的API。`approve`函数用于为智能合约提供管理您资金的批准。在调用`approve`时，您指定了该合约可以管理多少您的资金。
- en: Here, we are using a built-in modifier called  `view`.  `view` signifies that
    the function cannot modify storage, but will read storage (hence viewing). The `view` functions cannot
    send or receive Ether. Similarly, there is another modifier called `pure`, which
    signifies that the return value can only be dependent on input parameters—that
    is, they cannot even read storage and cannot send or receive Ether. You should
    use these modifiers as they have several benefits—for example, online the Remix
    IDE looks for these modifiers while generating UI forms for interacting with the
    contracts.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在使用一个名为`view`的内置修饰符。`view`表示该函数无法修改存储，但将读取存储（因此查看）。`view`函数无法发送或接收以太币。类似地，还有另一个名为`pure`的修饰符，表示返回值只能依赖于输入参数，即它们甚至不能读取存储，也不能发送或接收以太币。您应该使用这些修饰符，因为它们具有多种好处——例如，在生成用于与合约交互的UI表单时，Remix
    IDE会寻找这些修饰符。
- en: 'Now deploy a similar contract to digitalize INR in the second network. Replace
    `USD` with `INR` in the preceding contract and deploy it. It should look like
    this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在第二个网络中部署一个类似的合约以数字化印度卢比。在前述合约中用`INR`替换`USD`并部署它。应该是这样的：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Atomic swap smart contracts
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原子交换智能合约
- en: We have successfully digitalized fiat currencies. Now it's time to implement
    the atomic swap smart contracts that will provide the hash locking mechanism.
    We have an atomic swap smart contract deployment in each of the blockchains—that
    is, the atomic swap smart contract on the first blockchain will lock USD for a
    certain period of time and expects an Indian bank (here, it's the ICICI bank)
    to claim it in the defined time period using the secret. Similarly, the atomic
    swap contract on the second blockchain will lock INR for a certain period of time
    and expects an American bank (here, it's BOA) to claim it in the defined time
    period using the secret.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功数字化了法定货币。现在是实现哈希锁定机制的原子交换智能合约的时候了。我们在每个区块链上都有一个原子交换智能合约部署——也就是说，第一个区块链上的原子交换智能合约将美元锁定一段时间，并期望印度银行（这里是ICICI银行）在规定的时间内使用密钥来认领它。同样，第二个区块链上的原子交换合约将在规定的时间内锁定印度卢比，并期望美国银行（这里是BOA）在规定的时间内使用密钥来认领它。
- en: 'The following is the atomic swap smart contract for locking USD:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于锁定美元的原子交换智能合约：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is how the preceding smart contract works:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述智能合约的工作原理：
- en: At the time of deploying the smart contract, we provide the contract address
    of the `USD` contract so that it can call its functions to transfer funds.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署智能合约时，我们提供了`USD`合约的合约地址，以便它调用其函数来转移资金。
- en: The `lock` method was used to lock funds using `hash`. Obviously, before calling
    the `lock` method, BOA must approve this atomic swap contract address to be able
    to access a certain amount of its funds. It takes `hash` and locks funds for a
    certain period of time. `amount` is specified to indicate how much USD to lock
    and this amount should be less than equal to the approved amount. The `to` address
    specifies the Indian bank's address—that is, the ICICI bank. So, when the ICICI
    bank comes to claim the funds, they go to this address. This function actually
    transfers funds to its contract address (that is, `address(this)`) and fires an
    event so that ICICI bank can see that funds have been locked.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lock`方法用于使用`hash`锁定资金。显然，在调用`lock`方法之前，BOA必须批准此原子互换合约地址，以便能够访问其一定数量的资金。它接受`hash`并锁定资金一段时间。
    `amount`被指定为指示锁定多少美元，此金额应小于等于批准的金额。 `to`地址指定印度银行的地址—即ICICI银行。因此，当ICICI银行来索取资金时，它们将去到此地址。该函数实际上将资金转移到其合约地址（即`address(this)`）并触发事件，以便ICICI银行可以看到资金已被锁定。'
- en: The `unlock` method can be used by BOA to unlock the funds after `hash` has
    expired, if the funds are not claimed.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unlock`方法可以被BOA用来在`hash`过期后解锁资金，如果资金没有被索取。'
- en: The `claim` method is used by ICICI bank to claim the funds using the secret.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`claim`方法由ICICI银行使用秘密索取资金。'
- en: Finally, we used the `calculateHash` method to calculate `hash` of a secret.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们使用`calculateHash`方法来计算秘密的`hash`。
- en: Here, we are using BOA and ICICI as examples to explain it simply, but the previous
    smart contracts will work fine with any number of currencies and banks.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们以BOA和ICICI为例来简单解释，但之前的智能合约可以与任意数量的货币和银行配合良好运行。
- en: 'Change `USD` to `INR` in the preceding contract to provide an atomic swap smart
    contract for the second blockchain. Here is how the code will look:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述合同中将`USD`更改为`INR`，以为第二个区块链提供原子交换智能合约。以下是代码的外观：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Testing
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: 'Now we have the smart contracts ready for conducting atomic swaps between the
    assets of two different blockchains. Next, let''s write some JavaScript code to
    test the preceding contracts and conduct an atomic exchange. The following code
    allows you to do this. For testing and simulation purposes, you can run the following
    code in one single Quorum node with four accounts:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好在两个不同区块链的资产之间进行原子交换的智能合约了。接下来，让我们编写一些JavaScript代码来测试前面的合约并进行原子交换。以下代码允许您执行此操作。为了测试和模拟目的，您可以在一个单独的Quorum节点上运行以下代码，该节点具有四个帐户：
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: First, we deployed the `USD` contract and then deployed the atomic swap contract
    for USD by passing the `USD` contract's address as the parameter. We deployed
    these contracts as FRS.  Then, we deployed the `INR` contract and then deployed
    the atomic swap contract for INR by passing the `INR` contract's address as the
    parameter. We deployed these contracts as RBI.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们部署了`USD`合约，然后通过将`USD`合约的地址作为参数来部署了USD的原子交换合约。我们将这些合约部署为FRS。然后，我们部署了`INR`合约，然后通过将`INR`合约的地址作为参数来部署了INR的原子交换合约。我们将这些合约部署为RBI。
- en: 'Place the following code where continuation is mentioned:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码放在提到的连续位置：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is how the preceding code works:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面的代码如何运行的：
- en: Here the FRS issued USD to BOA and then the RBI issued INR to the ICICI bank.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里，FRS向BOA发行了USD，然后RBI向ICICI银行发行了INR。
- en: Then, BOA generated a secret. We use a very basic function to generate a secret.
    Obviously, in real-world scenarios, you should use some sort of hardware-based
    tool to generate these sorts of secure secrets.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，BOA生成了一个秘密。我们使用一个非常基本的函数来生成一个秘密。显然，在实际场景中，您应该使用某种基于硬件的工具来生成这些类型的安全秘密。
- en: Next, we computed the hash of the secret.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们计算了秘密的哈希。
- en: BOA and the ICICI bank gave the USD atomic swap and INR atomic contracts access
    to their funds respectively.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: BOA和ICICI银行分别授予了USD原子交换和INR原子交换合约对其资金的访问权限。
- en: BOA locked the USD in the USD atomic swap contract for 30 minutes and stated
    that only the ICICI bank can claim the funds.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: BOA将USD锁定在USD原子交换合约中，锁定时间为30分钟，并声明只有ICICI银行可以索取资金。
- en: Likewise, the ICICI bank locked the INR in the INR atomic swap contract for
    15 minutes and stated that only BOA can claim the funds.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，ICICI银行将INR锁定在INR原子交换合约中，锁定时间为15分钟，并声明只有BOA可以索取资金。
- en: Finally, BOA went ahead and claimed the INR. As soon as ICICI learned about
    the secret, it went ahead and claimed the USD.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，BOA前去索取INR。一旦ICICI知道了秘密，它立即索取了USD。
- en: To test the preceding contract, first copy your Ethereum addresses and replace
    the ones that I have generated in the previous examples. Then make sure you unlock
    all four of the accounts in your node. Finally, compile the contracts and populate
    the `ABI` and `Bytecode` variables.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试上述合约，首先复制你的以太坊地址，并替换我在之前示例中生成的地址。然后确保在你的节点上解锁所有四个账户。最后，编译合约并填充`ABI`和`Bytecode`变量。
- en: Here, we are using a Solidity function to calculate `hash`, but you can calculate
    `hash` using JavaScript. If you want to calculate the `sha256` hash, then you
    can use any JavaScript library, but if you calculate `sha3` (that is, `keccak256`)
    as Solidity does in JavaScript, then you need to use the `web3.utils` library,
    which provides a function called `soliditySha3`. This function will calculate
    the `sha3` of given input parameters in the same way Solidity would. This means
    that arguments will be `ABI` converted and tightly packed before being hashed.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用 Solidity 函数来计算`hash`，但你也可以使用 JavaScript 来计算`hash`。如果你想计算`sha256`哈希值，那么你可以使用任何一个
    JavaScript 库，但如果你想像 Solidity 在 JavaScript 中计算`sha3`（也就是`keccak256`）一样，那么你需要使用`web3.utils`库，它提供了一个名为`soliditySha3`的函数。这个函数会以与
    Solidity 相同的方式计算给定输入参数的`sha3`。这意味着参数将被`ABI`转换和紧密打包后再进行哈希运算。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at the various options for building interoperable
    blockchains. To summarize, single custodian, multisignature federations, and hash
    locking are easy to implement, whereas sidechains are complicated and require
    a lot of engineering. Soon, we will have production-permissioned blockchain platforms
    that have sidechains support built in.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了构建可互操作的区块链的各种选项。总结起来，单一托管方、多签名联邦以及哈希锁定易于实现，而侧链则复杂且需要大量工程工作。很快，我们将拥有内置侧链支持的生产许可区块链平台。
- en: Finally, we implemented hash locking by simulating two central and commercial
    banks. You can go ahead and try to build two different networks and attempt to
    conduct an atomic exchange.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过模拟两家中央和商业银行来实现了哈希锁定。你可以继续尝试构建两个不同的网络，并尝试进行原子交换。
- en: In the next chapter, we will learn how to build a blockchain as a server for
    Quorum. While building this, we will learn about the concepts of DevOps and cloud
    computing too.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何构建一个用于 Quorum 的区块链服务器。在构建过程中，我们还将学习 DevOps 和云计算的概念。
