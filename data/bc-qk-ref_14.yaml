- en: Smart Contracts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能合约
- en: 'The concept of smart contracts was first conceived by researcher Nick Szabo
    in the mid 1990s. In his papers, he described smart contracts as a set of promises,
    specified in digital form, including protocols within which the parties perform
    these promises. This description can be broken into four pieces:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约的概念最早是由研究人员尼克·萨博在1990年代中期构想出来的。在他的论文中，他将智能合约描述为一组承诺，以数字形式指定，其中包括各方执行这些承诺的协议。这个描述可以分为四个部分：
- en: A set of promises
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组承诺
- en: Digital form
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字形式
- en: Protocols for communication and performance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通信和执行的协议
- en: Performance of actions triggered automatically
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动触发的行动的性能
- en: As you can see, nowhere in this is the blockchain directly specified, as blockchain
    technology had not yet been invented and would not be invented for another 13
    years. However, with the invention of blockchain technology, smart contracts were
    suddenly much more achievable.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在此过程中并没有直接指定区块链，因为区块链技术当时尚未发明，直到另外13年才被发明。然而，随着区块链技术的发明，智能合约突然变得更加可行。
- en: 'Smart contracts and blockchain technology are independent ideas. A blockchain
    can exist without smart contracts (Bitcoin, for instance, has no real smart contract
    ability built in), and smart contracts can be built without a blockchain. However,
    blockchain is a technology particularly well-suited for the development of smart
    contracts because it allows trustless, decentralized exchange. Essentially, the
    blockchain provides two out of the four necessary items for smart contracts: digital
    form and protocols for the communication and performance of actions between distinct
    parties.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约和区块链技术是独立的概念。区块链可以存在而没有智能合约（例如，比特币实际上没有内置真正的智能合约能力），而智能合约可以在没有区块链的情况下构建。但是，区块链是一种非常适合开发智能合约的技术，因为它允许无信任、去中心化的交换。基本上，区块链提供了智能合约所需的四项中的两项：数字形式和在不同方之间进行通信和执行操作的协议。
- en: 'In this chapter, we will go over some of the different blockchain networks
    and their approaches to smart contract technology. In this chapter, we will cover
    the following topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一些不同的区块链网络及其对智能合约技术的方法。本章将涵盖以下主题：
- en: Why use smart contracts?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么使用智能合约？
- en: Approaches to smart contracts
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约的方法
- en: Limitations of smart contracts
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能合约的局限性
- en: 'In general, the various smart contract approaches can be divided into different
    types: **Turing Complete**, **Restricted Instructions**, **Off-Chain Execution**,
    and **On-Chain Execution**, as shown in the following figure:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，各种智能合约方法可以分为不同类型：**图灵完备**，**受限指令**，**链下执行** 和 **链上执行**，如下图所示：
- en: '![](img/4bbbadc1-96d3-4108-adcb-29fd723c2548.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4bbbadc1-96d3-4108-adcb-29fd723c2548.png)'
- en: The types of smart contracts that are executed on a system determine performance,
    what can and cannot be executed on the system, the complexity, and of course,
    the level of security.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统上执行的智能合约类型决定了性能，系统上可以执行和不能执行的内容，复杂性，以及当然，安全性的水平。
- en: Before we go further, let's discuss why smart contracts are desired and even
    revolutionary.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步探讨之前，让我们讨论一下为什么智能合约备受追捧，甚至被认为是具有革命性的。
- en: Why smart contracts?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要使用智能合约？
- en: The world before smart contracts was one that was fraught with uncertainty.
    Legal contracts, even simple ones, need not be followed, and the cost of recourse
    using most legal systems was and is extremely expensive, even in countries where
    the legal system is not corrupt. In many areas of the world, contracts are barely
    worth the paper they are written on, and are usually enforceable only by parties
    with substantial political or financial power. For weaker actors in an economic
    or political system, this is a terrible and unfair set of circumstances.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在智能合约出现之前的世界充满了不确定性。法律合同，即使是简单的合同，也不一定会被遵守，而且在大多数法律体系中寻求救济的成本非常昂贵，即使在法律体系不腐败的国家也是如此。在世界许多地方，合同几乎一文不值，通常只有具有重大政治或财务实力的各方才能强制执行。对于经济或政治体系中较弱的行动者来说，这是一种可怕而不公平的境遇。
- en: The issues that we mentioned previously come primarily from the human factor.
    As long as a person is involved in the enforcement of a contract, they can be
    corrupt, lazy, misinformed, biased, and so on. A smart contract, in contrast,
    is written in code, and is meant to execute faithfully no matter what parties
    are involved. This provides the opportunity for safer, cheaper, faster, and far
    more equitable outcomes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到的问题主要源于人为因素。只要一个人参与合同的执行，他们就可能是腐败的、懒惰的、误导的、偏见的等等。相比之下，智能合约是以代码编写的，并且旨在无论涉及哪些方都能忠实执行。这为更安全、更便宜、更快速、更公平的结果提供了机会。
- en: Let's look at the key advantages of smart contracts in more depth in the following
    subsections.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解智能合约的关键优势，在以下小节中进行讨论。
- en: Automating processes and resolutions between parties
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化各方之间的流程和解决方案
- en: 'The most immediate advantage of smart contracts is that they reduce the labor
    and pain involved in even successful and faithfully carried out agreements. Take
    for example, a simple purchase order and invoice between companies. Imagine a
    company called **FakeCar Inc.** that decides they need 1,000 wheels from their
    supplier, Wheelmaster. They agree between them that each wheel will cost $20,
    with payment made when the wheels are delivered to FakeCar. At the beginning,
    the wheels might be shipped by freight, passing through multiple hands on the
    way to FakeCar. Once they arrive, FakeCar would need to scan and inspect each
    wheel, make notes, and then issue a check or wire transfer to Wheelmaster. Depending
    on the distance involved, the wheels may be in the custody of multiple companies:
    a trucking company, intercontinental shipping, another trucking company, and finally
    FakeCar''s manufacturing facility. At each stage, there is a chance of damage,
    loss, or misdelivery. Once delivered, FakeCar would need to issue a transfer to
    cover the invoice. Even if all goes well, this process can take weeks. In the
    meantime, both FakeCar and Wheelmaster have to worry whether they will get their
    wheels or their money, respectively.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约最直接的优势是它们减少了即使是成功和忠实执行的协议所涉及的劳动和痛苦。举个例子，考虑两家公司之间的一个简单的采购订单和发票。想象一下，一个名为**FakeCar
    Inc.**的公司决定从他们的供应商 Wheelmaster 那里购买 1000 辆轮子。他们之间达成协议，每个轮子的价格是 $20，支付将在轮子送到 FakeCar
    时进行。一开始，轮子可能会通过货运公司运送，途中经过多个人的手。一旦到达，FakeCar 需要扫描和检查每个轮子，做笔记，然后向 Wheelmaster 发出支票或电汇。根据涉及的距离，轮子可能由多家公司承运：一家货运公司，洲际航运，另一家货运公司，最后是
    FakeCar 的制造设施。在每个阶段，都存在损坏、丢失或交付错误的可能性。一旦交付完成，FakeCar 就需要发出转账以支付发票。即使一切顺利，这个过程也可能需要几周。在此期间，FakeCar
    和 Wheelmaster 都不得不担心他们是否能得到他们的轮子或他们的钱。
- en: 'Now let''s look at how this process might work with smart contracts:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看这个流程如何通过智能合约来工作：
- en: FakeCar issues a purchase order on the blockchain for 1,000 wheels at $20 a
    wheel, valid for 1 month.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: FakeCar 在区块链上发布了一个采购订单，购买1000辆轮子，每辆轮子价格为$20，有效期为1个月。
- en: Wheelmaster issues a shipping request from their suppliers to deliver in one
    month, and accepts the purchase order.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Wheelmaster 从他们的供应商那里发出了一个交货请求，要求一个月内交货，并接受了采购订单。
- en: FakeCar funds the purchase order in a smart contract escrow; Wheelmaster can
    be assured that they will be paid if the wheels arrive.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: FakeCar 在智能合约托管中拨款采购订单；Wheelmaster 可以确信如果轮子到货，他们将会得到支付。
- en: Wheelmaster sees that funds are available to pay for the wheels, ships with
    a company that tracks each step on a blockchain, and accepts the terms of paying
    for any wheels that are lost. They (or their insurer) also fund a shipping escrow
    contract with enough money to cover the event of lost shipping. The contract will
    automatically refund the shipper once FakeCar signs off on the receipt.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Wheelmaster 看到有资金可用于支付轮子费用，并与一个跟踪每个步骤的公司合作，在区块链上记录每个步骤，并接受支付任何遗失的轮子的条款。他们（或其保险公司）还向一个装运托管合同提供足够的资金，以支付可能遗失的装运事件。一旦
    FakeCar 签署收据，合同将自动退还运输商的款项。
- en: The wheels are shipped and delivered, FakeCar's escrow is released, and the
    insurance bond returns to the shipping company. This happens the moment FakeCar
    registers receipt and the shipping company signs off on the change in custody.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 轮子已发货并送达，FakeCar 的托管被释放，保险金返回给运输公司。这发生在 FakeCar 登记收据并运输公司签署变更监护权的时刻。
- en: In this scenario, payments and insurance can be verified and handled instantly—even
    across international boundaries, and across cultures and languages—if all the
    parties participate in a blockchain-based ecosystem of smart contracts. The result
    is a great increase in the certainty of outcomes across all parties, and a subsequent
    increase in efficiency. For instance, if Wheelmaster can be certain that their
    invoice will be paid, then they can make business decisions with vastly more efficiency.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果所有参与方都参与到基于区块链的智能合约生态系统中，支付和保险可以得到即时验证和处理，即使跨越国界、文化和语言，结果是所有参与方的结果确定性大幅增加，效率随之增加。例如，如果Wheelmaster能够确信他们的发票将被支付，那么他们可以更有效地做出业务决策。
- en: Real-world example
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实例：
- en: As of writing, the first major logistics transaction using blockchain and smart
    contracts was completed on the Corda blockchain between HSBC and ING, and involved
    the shipment of soybeans from Argentina to Malaysia. According to the banks, such
    a transfer used to be very time consuming, and would take five to ten days. With
    blockchain, the whole issue of finance was handled in under 24 hours.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，使用区块链和智能合约完成的第一笔重大物流交易在Corda区块链上由汇丰银行和荷兰银行完成，涉及从阿根廷到马来西亚的大豆运输。据银行称，这种转移过去非常耗时，需要五到十天。通过区块链，整个金融问题在不到24小时内就得到解决了。
- en: The use of smart contracts is still in its infancy, and yet the technology has
    already resulted in an 80–90% reduction in the cross-border friction of financial
    services. As the technology and surrounding ecosystem improves, the advantages
    may become yet more extreme.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约的使用仍处于起步阶段，然而这项技术已经使跨境金融服务的摩擦减少了80-90%。随着技术和周围生态系统的改善，优势可能会变得更加极端。
- en: Increased transparency
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高透明度
- en: As mentioned earlier, one of the negative factors experienced by organizations
    worldwide is that, for many transactions, trust is a necessity. This is especially
    true in financial transactions, where purchase orders, invoices, and shipments
    move between multiple parties. The trust issues here are many. There is a question
    of not only whether someone will pay, but whether they can pay at all? Do they
    have a history of on-time payment and, if not, just how bad is their payment history?
    In many cases, buyers and sellers in any marketplace have very limited information.
    This is particularly true internationally. This is where blockchain and smart
    contracts can help.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，全球组织经历的负面因素之一是，对于许多交易，信任是必需的。这在金融交易中尤其如此，采购订单、发票和货物在多个方之间移动。这里的信任问题很多。不仅是是否有人会付款的问题，还有他们是否根本就付不起？他们是否有准时付款的历史，如果没有，他们的付款历史有多糟糕？在许多情况下，任何市场中的买家和卖家都拥有非常有限的信息。这在国际上尤为真实。这就是区块链和智能合约可以发挥作用的地方。
- en: Ending centralized data
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束集中式数据
- en: In the United States, each person has a credit score that is calculated by three
    large credit agencies. These agencies and their methods are opaque. Neither the
    buyers of this information nor the people who are reported on are allowed deep
    insight into how the score is calculated, nor are they able to update this information
    directly. A mistake by a credit agency can be devastating to someone's ability
    to finance a home or a car, costing a consumer valuable time and money. Nevertheless,
    if a consumer finds mistakes on their credit report, they must beg the issuer
    to update it, and they have few options if that organization refuses. Worse, those
    same issuers have proven bad stewards of the private financial information they
    collect. For instance, in 2017, Experian suffered a massive data breach that exposed
    the records of over 100 million people. If these agencies were replaced by a blockchain
    system and smart contracts, people would be able to see the rules and update records
    directly, without having to pay an intermediary that may or not be honest themselves.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在美国，每个人都有一个信用评分，由三家大型信用机构计算。这些机构及其方法是不透明的。购买此信息的人以及被报告的人都不被允许深入了解评分是如何计算的，也不能直接更新此信息。信用机构的错误可能对某人融资购买房屋或汽车的能力造成毁灭性影响，给消费者带来宝贵的时间和金钱损失。尽管如此，如果消费者在其信用报告中发现错误，他们必须请求发行者更新，如果该组织拒绝，他们几乎没有选择。更糟糕的是，这些发行者已经证明他们不良地保管了他们收集的私人财务信息。例如，2017年，Experian遭受了一次大规模数据泄露事件，泄露了超过1亿人的记录。如果这些机构被区块链系统和智能合约取代，人们将能够直接看到规则并更新记录，而不必支付可能不诚实的中间人。
- en: 'Large companies have an advantage in the current marketplace: They can both
    afford to pay these third-party services for financial data, as well as the personnel
    and systems needed to track information themselves over time. Smaller companies
    are not granted such economies of scale, putting them at a competitive disadvantage
    and increasing their overhead, or even putting them out of business if they make
    a bad decision because they have less information. However, even larger companies
    stand to benefit, as the cost and expense of compiling this data adds up for them
    as well. As more data concerning trust becomes public and automated by smart contracts,
    the playing field will level and, hopefully, will crowd dishonest actors out of
    the marketplace. This should result in increased confidence across the market,
    along with reduced overheads and, by extension, higher profits, lower prices,
    or both.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前市场上，大公司具有优势：他们既可以支付这些第三方服务的金融数据，也可以支付需要随时间跟踪信息的人员和系统。较小的公司没有获得这样的规模经济，使他们处于竞争劣势，并增加了他们的开销，甚至可能因为缺乏信息而使糟糕的决策使他们破产。然而，即使对于较大的公司来说，汇编这些数据的成本和费用也是累积的。随着越来越多关于信任的数据变得公开并由智能合约自动化，市场竞争格局将会平衡，希望能将市场上的不诚实行为排除在外。这应该会带来市场信心的增加，以及开销的降低，从而增加利润、降低价格，或者两者兼而有之。
- en: Increased fairness
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增加公平性
- en: In the United States, there used to be a process known as **red lining**, where
    people of certain ethnic groups were denied loans and access to financial services—particularly
    mortgages. These unfair practices continue to some extent, as the criteria and
    process for granting loans and the way interest rates are calculated are hidden
    inside centralized organizations. This phenomenon is not contained within the
    USA; there are many areas in the world where ethnic, religious, and other biases
    distort what are meant to be objective decisions. With a smart-contract-based
    system, the rules would be public and auditable to ensure fairness and accuracy.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在美国，曾经有一个被称为**红线**的过程，特定族裔的人们被拒绝贷款和获取金融服务，尤其是抵押贷款。这些不公平的做法在某种程度上仍在继续，因为贷款的标准和流程以及利率计算方式都隐藏在中心化组织中。这种现象并不局限于美国；世界上许多地区的种族、宗教和其他偏见扭曲了原本应该是客观决策的事实。通过基于智能合约的系统，规则将会是公开的和可审计的，以确保公平和准确性。
- en: Smart contract approaches
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能合约方法
- en: One approach to smart contracts is to allow full-featured software to be embedded
    either inside or alongside a blockchain, able to respond to blockchain events.
    This is an approach taken by Hyperledger Fabric, Ethereum, NEO, and other such
    companies. This approach gives maximum flexibility, as there is essentially nothing
    that cannot be written into the blockchain system. The downside of this power
    is the risk of making errors. The more options available, the more possible edge
    cases and permutations that must be tested, and the higher the risk that there
    will be an undiscovered vulnerability in the code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约的一种方法是允许全功能软件嵌入或与区块链并行，能够响应区块链事件。这是Hyperledger Fabric、Ethereum、NEO等公司采取的一种方法。这种方法提供了最大的灵活性，因为基本上没有什么是不能写入区块链系统的。这种权力的缺点是存在出错的风险。可用选项越多，就必须测试的边界情况和排列组合越多，代码中就可能存在未发现的漏洞的风险就越高。
- en: 'The other approach to smart contracts is to greatly reduce the scope of what
    is possible in return for making things more secure and costly mistakes more difficult.
    The trade-off is currently flexibility versus security. For instance, in the Stellar
    ecosystem, smart contracts are made as sets of operations. In Stellar, there are
    only eleven operations:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约的另一种方法是为了增加安全性和降低错误成本而大幅减少可能发生的范围。目前的权衡是灵活性与安全性。例如，在恒星生态系统中，智能合约被制作为一组操作。在恒星中，只有十一种操作：
- en: Create account
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建账户
- en: Payment
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支付
- en: Path payment
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径支付
- en: Manage offer
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理报价
- en: Create passive offer
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建被动报价
- en: Set options
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置选项
- en: Change trust
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改信任
- en: Allow trust
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许信任
- en: Account merge
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 账户合并
- en: Inflation
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通货膨胀
- en: Manage data
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理数据
- en: These operations themselves have multiple options and permutations, and so enable
    quite a large amount of behavior. However, it is not possible to easily use these
    operations to execute something such as the DAO, or some other on-chain governance
    organization. Instead, such functionality would have to be hosted off the chain.
    Similarly, there is no clear way in Stellar to manage the equivalent of ERC-721
    tokens, which would track the equivalent of something such as trading cards or
    even pieces of real estate. Stellar's smart contract system is geared toward the
    transfer of fungible assets, such as currencies. As a result, it can scale very
    quickly, easily handle multisignature accounts and escrow, and process transactions
    in just a few seconds with high throughput. Ethereum is more flexible, but the
    multisignature capability, the tokens themselves, and so on would need to be created
    with software written in Solidity. Ethereum is obviously more flexible, but requires
    more code, and thus runs a higher risk of defects.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作本身有多种选项和排列方式，因此能够实现相当多的行为。然而，使用这些操作来执行像 DAO 或其他链上治理组织之类的功能并不容易。相反，这种功能必须托管在链下。同样地，在
    Stellar 中没有明确的方法来管理类似于 ERC-721 代币，这些代币将跟踪类似于交易卡或甚至是房地产的等价物。Stellar 的智能合约系统专注于可互换资产的转移，如货币。因此，它可以非常快速地扩展，轻松处理多重签名账户和托管，并且以非常高的吞吐量在几秒钟内处理交易。以太坊更灵活，但多重签名功能、代币本身等都需要用
    Solidity 编写的软件来创建。以太坊显然更灵活，但需要更多的代码，因此存在更高的缺陷风险。
- en: Example Ethereum smart contracts
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊智能合约示例
- en: 'The blockchain with the most widespread use of smart contracts is Ethereum.
    Of all the smart-contract-capable networks presented here, it is not only the
    one with the largest use, but also has the largest ecosystem of public distributed
    applications. One of the reasons that Ethereum is so popular is that its representation
    of smart contracts is relatively intuitive and easy to read. In this section,
    we are going to look at a common Ethereum-based smart contract that fulfills all
    four of the preceding criteria and is relatively easy to understand: a token sale
    contract. The following code will be written in Solidity; for more details, please
    see [Chapter 13](d3b6caa1-a5ed-4147-82dc-ea5074126df2.xhtml), *Solidity 101*,
    and [Chapter 15](588b84f6-baef-4ea3-895e-bd66f523452b.xhtml), *Ethereum Development*.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最广泛使用智能合约的区块链是以太坊。在这里呈现的所有具备智能合约能力的网络中，它不仅是使用最广泛的，而且拥有最大的公共分布式应用生态系统。以太坊如此受欢迎的一个原因是，它对智能合约的表示相对直观且易于阅读。在本节中，我们将看一个常见的基于以太坊的智能合约，它满足前面四个条件，并且相对容易理解：一个代币销售合约。以下代码将用
    Solidity 编写；有关更多详情，请参阅 [Chapter 13](d3b6caa1-a5ed-4147-82dc-ea5074126df2.xhtml)，*Solidity
    101*，以及 [Chapter 15](588b84f6-baef-4ea3-895e-bd66f523452b.xhtml)，*以太坊开发*。
- en: The promises
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 承诺
- en: 'The first aspect of a smart contract is that it must make a set of programmatic
    promises. The reason we have chosen a token sale contract to look at is that it
    has a very simple promise to make: if you send the contract Ethereum, the contract
    will in turn automatically send your account a new token. Let''s look at some
    basic code, which is explicitly not for production; this is simplified code to
    make certain concepts clearer. This code comes from the `StandardToken` contract, part
    of the OpenZeppelin (You''ll find a link for the same in the *References* section)
    project on which this is based, which has full-featured and audited code to achieve
    the same effect, but is more complicated to understand.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约的第一个方面是它必须做出一系列的程序性承诺。我们选择查看代币销售合约的原因是它有一个非常简单的承诺：如果你向合约发送以太坊，合约将自动向您的账户发送一个新代币。让我们看一些基本代码，这是明确不是用于生产的；这是简化的代码，以使某些概念更清晰。这段代码来自于`StandardToken`合约，这是基于
    OpenZeppelin 项目的一部分（你将在 *References* 部分找到相关链接），该项目具有全功能且经过审计的代码来实现相同的效果，但更复杂一些。
- en: 'First, here is an interface contract for an `ERC20` token, which we will save
    as a file called `ERC20.sol`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这里是一个`ERC20`代币的接口合约，我们将其保存为名为`ERC20.sol`的文件：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we will reference that token interface in our crowdsale contract, which
    will send an `ERC20` token in response to a payment in ether:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在我们的众筹合约中引用该代币接口，该合约将在以太币支付后发送一个`ERC20`代币：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is a very simplified contract, but again, it is not sufficient for a complete,
    real-world `Crowdsale`. However, it does illustrate the key concepts for a smart
    contract. Let''s look at each piece. The `constructor` method requires a reference
    to an `ERC20` token, which is the token that will be given to buyers who send
    in Ethereum, as shown in the following code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简化的合约，但再次强调，这对于完整的真实的 `Crowdsale` 是不够的。然而，它确实说明了智能合约的关键概念。让我们看看每一部分。`constructor`
    方法需要一个对 `ERC20` 代币的引用，这是将发送以太坊的购买者所得到的代币，如以下代码所示：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Because of the way Solidity works, this contract cannot function unless a token
    has been loaded. So this is the first promise implicitly made by this code: there
    must be an `ERC20` token available for purchase. The second promise is the conversion
    rate, which is placed at the very simple 1\. For each wei (the smallest unit of
    currency in Ethereum), a person buying this token will get 1 unit of the new token.
    Ethereum has 18 decimal places, and by convention so do most tokens, so it would
    be presumed that this would make the conversion of Ethereum to this token now
    1:1\. This brings us to item #4 in the necessary aspects of a smart contract:
    automatic fulfillment. The following code handles this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Solidity 的工作方式，除非加载了代币，否则此合约无法运行。因此，这段代码隐含的第一个承诺是：必须有一个可供购买的`ERC20`代币。第二个承诺是转换率，这里设置为非常简单的
    1。对于每一个 wei（以太坊中的最小货币单位），购买此代币的人将获得 1 单位的新代币。以太坊有 18 个小数位数，大多数代币也是如此，因此可以假定这将使以太坊与此代币的转换率现在是
    1:1。这带我们来到智能合约必要方面的第 4 点：自动执行。以下代码处理此问题：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As this is code, the requirement that the smart contract should be in digital
    form is obvious. The automatic aspect here is also straightforward. In Ethereum,
    `msg.value` holds the value of the ether currency that is sent as part of the
    command. When the contract receives Ethereum, it calculates the number of tokens
    the purchaser should receive and sends them: no human interaction needed, and
    no trusted party necessary or possible. Similarly, no one can intervene, as once
    it is deployed to the network, the code in Ethereum is immutable. Therefore, a
    sender who is using this smart contract can be absolutely assured that they will
    receive their tokens.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是代码，智能合约应该以数字形式存在的要求是显而易见的。这里的自动化方面也很简单。在以太坊中，`msg.value`保存发送命令的以太币货币的价值。当合约接收到以太币时，它会计算购买者应该收到的代币数量并发送它们：无需人类交互，也不需要或可能有可信的方。同样，没有人能够干预，因为一旦部署到网络上，以太坊中的代码是不可变的。因此，使用此智能合约的发件人可以绝对确保他们将收到他们的代币。
- en: Security considerations
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全注意事项
- en: 'It is important to understand smart contracts in the domain in which they live:
    decentralized, asynchronous networks. As a result of living in this ecosystem,
    there are security considerations that are not always obvious, and can lead to
    issues. To illustrate, we are going to look into two related functions of the
    `ERC20` standard: `approve` and `transferFrom`. Here is code for the `approve`
    function from OpenZeppelin:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要了解智能合约所在的领域：分散的、异步的网络。由于生活在这个生态系统中，存在着并不总是显而易见的安全注意事项，可能会导致问题。为了说明这一点，我们将研究
    `ERC20` 标准的两个相关函数：`approve` 和 `transferFrom`。以下是来自 OpenZeppelin 的 `approve` 函数的代码：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `approve` function allows a token owner to say that they have approved
    a transfer of their token to another account. Then, in response to different events,
    a future transfer can take place. How this happens depends on the application,
    but such as the token sale, by approving a transfer, a blockchain application
    can later call `transferFrom` and move the tokens, perhaps to accept payment and
    then perform actions. Let''s look at that code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`approve` 函数允许代币所有者表示他们已经批准将其代币转移到另一个帐户。然后，针对不同的事件，可以进行未来的转移。这如何发生取决于应用程序，但是例如代币销售，通过批准转移，区块链应用程序可以随后调用
    `transferFrom` 并移动代币，也许是为了接受支付然后执行操作。让我们看看那段代码：'
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The two functions work together. The user wishing to use the app uses `approve`
    to allow payment, and the app calls `transferFrom` in order to accept. But because
    of the asynchronous nature of the calls, it is possible for flaws to exist.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个函数共同工作。希望使用该应用程序的用户使用 `approve` 允许支付，应用程序调用 `transferFrom` 以接受。但由于调用的异步性质，存在缺陷是可能的。
- en: Imagine an app where users can pay tokens in order to join a digital club—40
    tokens for a basic membership and 60 tokens for an enhanced membership. Users
    can also trade the tokens to other people or sell them as they wish. The ideal
    case for these two functions is where a user approves 40 tokens and the application
    registers this and calls `transferFrom` to move the 40 tokens, and then grants
    access as part of the smart contract. So far so good.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个应用，在这个应用中，用户可以支付代币来加入数字俱乐部——40代币可以获得基本会员资格，60代币则可以获得增强会员资格。用户也可以将代币交易给其他人，或者根据他们的意愿出售代币。这两个功能的理想情况是，用户批准了40代币，应用程序将此注册并调用`transferFrom`来移动这40代币，然后作为智能合约的一部分授予用户访问权限。到目前为止一切顺利。
- en: 'It''s important to keep in mind that each action here takes time, and the order
    of events is not fixed. What actually happens is that the user sends a message
    to the network, triggering `approve`, the application sends another message, triggering
    `transferFrom`, and then everything resolves when the block is mined. If these
    transactions are out of order (`transferFrom` executing before `approve`), the
    transaction will fail. Moreover, what if the user changes their mind and decides
    to change their approval from 40 to 60? Here is what the user intends:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 需要牢记的是，这里的每个操作都需要时间，并且事件的顺序是不固定的。实际上，发生的是用户向网络发送消息，触发`approve`，应用程序发送另一条消息，触发`transferFrom`，然后一切会在区块被挖掘时解决。如果这些交易的顺序出现错误（`transferFrom`在`approve`之前执行），交易将失败。此外，如果用户改变主意，决定将批准的代币从40个更改为60个呢？用户意图如下：
- en: '**User**: `approve` 40 (block 1)'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**User**: `approve` 40 (block 1)'
- en: '**User**: `approve` 60 (block 1)'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**User**: `approve` 60 (block 1)'
- en: '**App**: `transferFrom` 60 to App (block 1)'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**App**: `transferFrom` 60 to App (block 1)'
- en: '**App**: Grant enhanced membership (block 2)'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**App**: Grant enhanced membership (block 2)'
- en: 'In the end, the user paid 60 tokens and got what they wanted. But because each
    of these events are asynchronous and the order is decided by the miners, this
    order is not guaranteed. Here, is what might happen instead:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，用户支付了60代币，并得到了他们想要的东西。但因为这些事件都是异步的，并且订单是由矿工决定的，所以这个顺序并不是保证的。在这里，可能会发生以下情况：
- en: '**User**: `approve` 40 (block 1)'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**User**: `approve` 40 (block 1)'
- en: '**App**: `transferFrom` 40 to App (block 1)'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**App**: `transferFrom` 40 to App (block 1)'
- en: '**User**: `approve` 60 (block 2, as the miners did not include it in block
    1)'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**User**: `approve` 60 (block 2,因为矿工没有在块1中包含它)'
- en: '**App**: `transferFrom` 60 to App (Block 2)'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**App**: `transferFrom` 60 to App (Block 2)'
- en: 'Now the user has paid 100 tokens without meaning to. Here is yet another permutation:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户意外支付了100代币。以下是另一个排列组合：
- en: '**User**: `approve` 40 (block 1)'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**User**: `approve` 40 (block 1)'
- en: '**User**: `approve` 60 (block 1)'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**User**: `approve` 60 (block 1)'
- en: '**App**: `transferFrom` 40 to app (block 2)'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**App**: `transferFrom` 40 to app (block 2)'
- en: '**App**: Grants basic membership (block 2)'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**App**: Grants basic membership (block 2)'
- en: '**App**: `transferFrom` 60 to app (block 3) | fails'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**App**: `transferFrom` 60 to app (block 3) | 失败'
- en: At the end of this sequence, the user still has 20 tokens approved, and the
    attempt to get the enhanced membership has failed. While an app can and should
    be written without these issues by doing such things as allowing upgraded membership
    for 20 tokens and checking the max approval before `transferFrom` is called, this
    attention to detail is not guaranteed or automatic on the part of application
    authors.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个顺序结束时，用户仍然批准了20代币，而尝试获得增强会员资格失败了。虽然可以并且应该编写应用程序来避免这些问题，比如允许用20代币升级会员资格，并在调用`transferFrom`之前检查最大批准数量，但这种对细节的关注并不是应用程序作者所保证或自动的。
- en: The important thing to understand is that race conditions and ordering issues
    are extremely important in Ethereum. The user does not control the order of events
    on a blockchain, nor does an app. Instead, it is the miners that decide which
    transactions occur in which blocks and in which order. In Ethereum, it is the
    gas price that affects the priority that miners give transactions. Other influences
    can involve the maximum block gas limit, the number of transactions already in
    a block, and whether or not a miner that successfully solves a block has even
    seen the transaction on the network. For these reasons, smart contracts cannot
    assume that the order of events is what is expected.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要了解的是，在以太坊中，竞争条件和顺序问题是非常重要的。用户无法控制区块链上事件的顺序，应用程序也不行。相反，决定哪些交易发生在哪个块中以及什么顺序的是矿工。在以太坊中，燃料价格影响矿工为交易给出的优先级。其他影响可能涉及最大块燃料限制，已经在块中的交易数量，以及成功解决块的矿工是否已经在网络上看到了交易。因此，智能合约不能假设事件的顺序就是预期的那样。
- en: Dealing with threats in smart contracts
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理智能合约中的威胁
- en: Every decentralized network will have to deal with race conditions caused by
    different orderings. It is critical that smart contracts be carefully evaluated
    for possible race conditions and other attacks. To know whether a race condition
    bug is possible is as simple as knowing whether more than one function call is
    involved, directly or indirectly. In the preceding case, both the user and the
    app call functions; therefore, a race condition is possible, and so is an attack
    called front running. It is also possible to have race conditions inside a single
    method, so smart contract developers should not let their guard down.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 每个去中心化网络都将不得不处理由不同排序引起的竞态条件。关键是要仔细评估智能合约是否可能存在竞态条件和其他攻击。判断竞态条件错误是否可能的方法就是判断是否涉及到多个函数调用，直接或间接都可以。在前述情况中，用户和应用程序都调用了函数；因此，竞态条件是可能的，还可能发生一种称为前端运行的攻击。单个方法内也可能存在竞态条件，因此智能合约开发者不应放松警惕。
- en: Each network has a different model for contract execution, and as a result,
    each network had different best practices. For Ethereum, Consensys maintains a
    list of smart contract best practices at [https://consensys.github.io/smart-contract-best-practices/](https://consensys.github.io/smart-contract-best-practices/).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网络都有不同的合约执行模型，因此每个网络都有不同的最佳实践。对于以太坊，Consensys 在 [https://consensys.github.io/smart-contract-best-practices/](https://consensys.github.io/smart-contract-best-practices/)
    维护着智能合约最佳实践清单。
- en: Before shipping any smart contract, it is strongly suggested that an organization
    write extensive unit tests and simulation tests, and then audit the smart contracts
    against the best practices for that network.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布任何智能合约之前，强烈建议组织编写广泛的单元测试和模拟测试，然后根据该网络的最佳实践审计智能合约。
- en: Limitations of smart contracts
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能合约的局限性
- en: Smart contracts hold tremendous power, but they do have limitations. It is important
    to note that these systems are only as good as the people building them. So far,
    many smart contract systems have failed due to unforeseen bugs and events that
    were not part of the initial design. In many cases, these were merely technical
    flaws that can at least be fixed in time. However, with the recent rush to use
    blockchain technology for everything, we are likely to start seeing more substantial
    failures as people fail to understand the limits of the technology. For blockchain
    to truly have maximum business impact, both its advantages and limitations have
    to be addressed.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约拥有巨大的权力，但它们确实有局限性。重要的是要注意，这些系统只有建造它们的人一样好。到目前为止，许多智能合约系统由于未预料到的错误和不属于初始设计的事件而失败。在许多情况下，这些只是技术缺陷，可以在时间内至少修复。然而，随着最近急于将区块链技术用于一切，我们可能会开始看到更多实质性的失败，因为人们未能理解技术的限制。要使区块链真正发挥最大的商业影响，必须解决其优点和局限性。
- en: Data quality and mistakes
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据质量和错误
- en: Like all systems, smart contracts are only as good as the data they act on.
    A smart contract that receives bad or incorrect information from the network will
    still execute. On blockchain systems, this can be a huge issue as most transactions
    initiated by a human or a contract are irrevocable. Thus, if information is placed
    on a blockchain that is in error, fraudulent, or has some other deficiency, then
    a smart contract will still execute faithfully. Instead of expediting the proper
    functioning of the network, the smart contract would now be assisting in propagating
    an error.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 像所有系统一样，智能合约的效果取决于其作用的数据。智能合约从网络接收到错误或不正确的信息仍将执行。在区块链系统中，这可能是一个巨大的问题，因为大多数由人类或合约发起的交易都是不可撤销的。因此，如果在区块链上放置了错误、欺诈或其他缺陷的信息，那么智能合约仍将忠实执行。智能合约现在不是在促进网络的正常运行，而是在帮助传播错误。
- en: To use the earlier example of shipping tires between FakeCar and Wheelmaster,
    what if during transit the boxes holding the tires were broken into and the tires
    replaced? If the worker at the FakeCar building scanned the boxes as received
    without checking each and every one, the smart contract would see this update
    and release escrow. The shipper would have their insurance bond returned, Wheelmaster
    would get paid, and FakeCar would still no longer have the wheels they ordered.
    To smart contract purists, this is how things should be. But in these cases, companies
    may instead refuse to use smart contracts or require additional layers of approval—essentially
    recreating the systems of old.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以前在 FakeCar 和 Wheelmaster 之间运输轮胎的例子中，如果在运输途中装载轮胎的箱子被破坏并被替换了，那该怎么办？如果 FakeCar
    的工人扫描收货的箱子而不检查每一个箱子，智能合约会看到这个更新并释放托管资金。承运人会收回他们的保险金，Wheelmaster 会收到付款，而 FakeCar
    仍然没有他们订购的轮子。对于智能合约的纯粹主义者来说，这才是事情应该的样子。但在这些情况下，公司可能会拒绝使用智能合约，或者要求额外的批准层——基本上重建旧系统。
- en: In designing smart contract systems, it is therefore critical that designers
    try and imagine every possible way things could go wrong. As with the DAO and
    other smart contract systems that have been used so far, small mistakes can have
    big consequences.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在设计智能合约系统时，设计者们努力设想所有可能发生错误的方式至关重要。就像 DAO 和迄今为止使用的其他智能合约系统，在这些系统中，小错误可能带来重大后果。
- en: Many smart contracts involve some level of human interaction. For instance,
    multisignature wallets require multiple people to authorize a transaction before
    they will execute. These touchpoints introduce the same possibility for errors
    as old systems, but with the possibility of irrevocable consequences.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 许多智能合约涉及一定程度的人为干预。例如，多重签名钱包要求多人授权交易才会执行。这些接触点引入了与旧系统同样会出现错误的可能性，但会带来不可撤销的后果。
- en: Legal validity
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 法律有效性
- en: Smart contracts do what they are programmed to do. If a smart contract is deemed
    invalid in a court, how is this resolved? The answer right now is that nobody
    really knows, but it could happen—and probably will. Most countries in the world
    have limits on what can and cannot be contractually agreed to and the terms that
    can be legally used in a contract. For instance, in the USA, there is a limit
    to the amount of interest that can be charged on certain financial products. Other
    regulations control the conditions and terms of payment in specific industries.
    Smart contracts that violate local and national laws run the risk of being canceled,
    resulting in repayment, damages, or other consequences to the participating organizations,
    and possibly even the contract authors.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约执行其程序设计的功能。如果法院判定一个智能合约无效，那么该问题将如何解决？目前的答案是没有人真正知道，但这种情况可能发生，而且很可能会发生。世界上大多数国家对合同可以达成的内容和不可达成的内容，以及合同中可以合法使用的条款有所限制。例如，在美国，对某些金融产品可以收取的利息金额有所限制。其他法规则定了特定行业中支付条件和条款。违反当地和国家法律的智能合约可能面临被取消的风险，导致参与组织进行赔偿、赔偿损害或其他后果，甚至可能是合同的作者。
- en: Stability of meaning
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 意义的稳定性
- en: In the token sale contract we looked at earlier, a user can be sure that they
    will receive the tokens they purchase. What they cannot be sure of is that those
    tokens will be valuable or still be useful in the future. Moreover, if those tokens
    represent something else (access to a system, real-world assets, or something
    else), then the mere existence of the tokens does not bring any guarantees that
    this access will remain, that people will continue to accept the tokens for assets
    (see the previously mentioned issues with legal validity), and so on. With national
    currencies, the use and acceptance of that currency is mandated by a government
    with substantial power. With tokens, the acceptance and use of the token has no
    mandate. To some, this is the very appeal—that the value of a token is more trustable
    because it is built not on enforcement by a government, but by social approval
    and use.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面我们看到的代币出售合同中，用户可以确保他们将收到他们购买的代币。但他们无法确定这些代币将来是否有价值或仍然有用。此外，如果这些代币代表其他东西（进入系统，现实资产或其他东西），则这些代币的存在并不意味着这种进入将持续下去，人们将继续接受代币换取资产（请参阅前面提到的法律有效性问题），等等。对于国家货币，货币的使用和接受是由拥有实质权力的政府强制规定的。对于代币，代币的接受和使用没有强制要求。对一些人来说，这正是吸引人的地方——代币的价值更可信赖，因为它建立在社会批准和使用而不是政府的强制执行上。
- en: It is likely that over time, legal frameworks and trade will become more stable,
    and this will be less of an issue.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，法律框架和贸易可能会变得更加稳定，这将不再是一个问题。
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Smart contracts are agreements written into code between different parties.
    The critical aspects of smart contracts is that they contain promises that are
    in digital form. All of these promises can be executed using digital protocols
    for communication performance. The outcomes of the contracts are triggered automatically.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约是在代码中编写的各方之间的协议。智能合约的关键方面是它们包含以数字形式表达的承诺。所有这些承诺都可以使用数字协议进行通信性能执行。合同的结果会自动触发。
- en: At this point, you should have a solid understanding of what smart contracts
    are, how they work, and their strengths and limitations. You should be able to
    understand the dangers inherent in smart contract ecosystems and be able to gauge
    possible risks in the development of smart-contract-based systems. At a minimum,
    you should recognize the need for careful and thorough evaluation of smart contracts
    for security reasons. Remember, with smart contracts, the code is executed with
    little or no human intervention. A mistake in a smart contract means the damage
    done by the mistake will multiply as fast as the code can be run.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您应该对智能合约是什么，它们如何工作以及它们的优势和局限有了扎实的理解。您应该能够理解智能合约生态系统中固有的风险，并能够评估基于智能合约的系统开发中可能的风险。至少，您应该意识到出于安全原因需要仔细而彻底地评估智能合约。请记住，使用智能合约，代码几乎不需要人工干预就可以执行。智能合约中的错误意味着错误造成的损害将与代码运行的速度同步增加。
- en: Next, we are going to dive more deeply into smart contracts with a chapter devoted
    to development in Ethereum.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将深入探讨以太坊开发的智能合约章节。
- en: References
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[http://firstmonday.org/ojs/index.php/fm/article/view/548](http://firstmonday.org/ojs/index.php/fm/article/view/548)'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[http://firstmonday.org/ojs/index.php/fm/article/view/548](http://firstmonday.org/ojs/index.php/fm/article/view/548)'
- en: 'Nick Szabo, Smart Contracts: Building Blocks for Digital Markets, 1996'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尼克·萨博（Nick Szabo），《智能合约：数字市场的构建模块》，1996年
- en: '[https://www.cnbc.com/2018/05/14/hsbc-makes-worlds-first-trade-finance-transaction-using-blockchain.html](https://www.cnbc.com/2018/05/14/hsbc-makes-worlds-first-trade-finance-transaction-using-blockchain.html)'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://www.cnbc.com/2018/05/14/hsbc-makes-worlds-first-trade-finance-transaction-using-blockchain.html](https://www.cnbc.com/2018/05/14/hsbc-makes-worlds-first-trade-finance-transaction-using-blockchain.html)'
- en: '[http://fortune.com/2017/12/22/experian-data-breach-alteryx-amazon-equifax/](http://fortune.com/2017/12/22/experian-data-breach-alteryx-amazon-equifax/)'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[http://fortune.com/2017/12/22/experian-data-breach-alteryx-amazon-equifax/](http://fortune.com/2017/12/22/experian-data-breach-alteryx-amazon-equifax/)'
- en: '[https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol)'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol)'
