- en: Day Six - Using Wallets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六天 - 使用钱包
- en: Welcome to day six. Today, we're going to be implementing the last and most
    critical piece to our blockchain application, the wallet. A wallet gives the players
    of our game not only a place to store their funds, but a way to send and receive
    those funds, and cryptographically signed transactions ensuring that we can validate
    those funds and transactions came from that wallet.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到第六天。今天，我们将实现我们区块链应用的最后并且最关键的部分，钱包。钱包不仅为我们游戏的玩家提供存储资金的地方，还提供了发送和接收这些资金的方式，以及使用密码签名的交易来确保我们可以验证这些资金和交易来自于那个钱包。
- en: 'This chapter will serve as the stepping stone to getting started with this
    project, covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将作为开始此项目的基石，涵盖以下主题：
- en: Understanding wallets and security
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解钱包和安全性
- en: Introduction to the wallet
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 钱包简介
- en: MetaMask
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MetaMask
- en: Understanding gas price and gas limit
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解燃气价格和燃气限制
- en: Viewing blockchain transactions on the Ethereum network
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在以太坊网络上查看区块链交易
- en: Understanding online and offline wallets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解在线和离线钱包
- en: Injecting the Web3 provider
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注入Web3提供程序
- en: Understanding wallets and security
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解钱包和安全性
- en: 'Let''s take a look at a typical online transaction today. A consumer will visit
    a website and they''ll add some items to their cart, and then they''ll initiate
    the checkout process. They''re going to have to enter their credit card number
    on that site, but what happens to that credit card number: was it sent securely
    to the server? And, is the merchant going to store that credit card number? If
    they do, are they following good security practices? And, who has access to that
    number now, because anyone with that card number can use it? Well, we have mechanisms
    in place to deal with all of this, and in the event that something happens most
    merchants and card issuers will work with you to resolve the issue, but that''s
    not done out of the kindness of their heart; you''re paying for that service every
    day in the form of fees and transaction costs:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下今天典型的在线交易。消费者会访问一个网站，将一些商品添加到购物车中，然后启动结账过程。他们需要在该网站上输入他们的信用卡号，但这个信用卡号会怎样处理呢：它安全地发送到服务器了吗？商家会存储那个信用卡号吗？如果他们存储了，他们是否在遵循良好的安全实践？现在有谁可以访问这个信用卡号，因为任何持有这个卡号的人都可以使用它？我们有机制来处理所有这些问题，并且在发生问题时，大多数商家和发卡行都会与您合作解决问题，但这并不是出于他们的善意；您每天都在支付这项服务的费用和交易成本：
- en: '![](img/4c43a41b-7871-4e43-8052-beee5199ef35.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c43a41b-7871-4e43-8052-beee5199ef35.png)'
- en: Let's take a look at that same transaction using blockchain technologies. The
    shopping process will look the same. You add items to your cart and then start
    the checkout process, but when you check out, you don't enter a credit card number,
    you use your wallet to cryptographically sign a transaction containing the instructions
    for that purchase. So, was it done securely? Hopefully it was, but if not it really
    doesn't matter because the only thing you sent was a signed transaction with the
    details of the purchase, and if anyone intercepts and changes that transaction
    along the way, that signature is no longer valid.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用区块链技术再次看一下相同的交易过程。购物过程看起来一样。您将商品添加到购物车，然后开始结账过程，但在结账时，您不需要输入信用卡号，而是使用钱包对包含购买指令的交易进行加密签名。那么，这是安全进行的吗？希望是，但如果不是，那也没关系，因为您发送的唯一内容是包含购买详细信息的已签名交易，如果有人在途中截取并更改该交易，那个签名就不再有效。
- en: 'Well, what about storing the details? Sure, the merchants can store them, and
    it''s also going to get stored on the public blockchain, and that''s okay because
    it''s just the details of the transactions; nothing in there can be used to create
    additional transactions. And, what about the merchants'' security practices? Well,
    the contract you interact with is on the public blockchain where it can be viewed
    and audited for security, and finally your private key never left your wallet,
    so the only way your account can be used to create malicious transactions is if
    you lose control of that private key. So, there''s no third party involved to
    charge you account maintenance and monitoring fees:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，关于存储详细信息呢？商家可以存储它们，而且它也会存储在公共区块链上，这没问题，因为它只是交易的详细信息；里面的内容无法用来创建额外的交易。商家的安全实践呢？你与之交互的合约位于公共区块链上，可以查看和审计其安全性，最后你的私钥永远不会离开你的钱包，因此唯一让您的账户用于创建恶意交易的方式就是失去了控制私钥。因此，没有第三方参与收取您账户维护和监控费用：
- en: '![](img/ba331a1b-0053-4cb1-8963-ad6dcf0f461d.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba331a1b-0053-4cb1-8963-ad6dcf0f461d.png)'
- en: Introduction to the wallet
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 钱包介绍
- en: A wallet is a software program that stores public and private keys, and allows
    you to interact with blockchains to sign transactions that may include sending
    and receiving currency, or executing smart contracts. They don't actually store
    any currency; they can only reference transactions on the blockchain tied to that
    address.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 钱包是一个存储公钥和私钥的软件程序，并允许您与区块链交互以签署可能包括发送和接收货币或执行智能合约的交易。它们实际上并不存储任何货币；它们只能引用与该地址相关的区块链上的交易。
- en: 'Let''s talk about public and private keys for a minute as it''s an important
    concept to understand, because if you compromise your private key you will have
    compromised everything associated with it. Each wallet has a private and public
    key: think of the public key as a street address to your house, and the private
    key as the key that can unlock the mailbox. Anyone can send something to your
    mailbox using your public key, but only someone with the private key can unlock
    the mailbox:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈一分钟关于公钥和私钥，因为这是一个重要的概念要理解，因为如果你泄露了你的私钥，你将泄露与之关联的一切。每个钱包都有一个私钥和公钥：将公钥视为你房子的街道地址，将私钥视为可以解锁邮箱的钥匙。任何人都可以使用你的公钥向你的邮箱发送东西，但只有持有私钥的人才能打开邮箱：
- en: '![](img/10f935e4-4adf-4db4-8452-ba2ccf1ad450.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10f935e4-4adf-4db4-8452-ba2ccf1ad450.png)'
- en: 'Let''s throw out a few more analogies of this, and then summarize a key point.
    Your email address is public and the password to your email account is private:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再举几个类似的例子，然后总结一个关键点。你的电子邮件地址是公开的，你电子邮件账户的密码是私密的：
- en: '![](img/83f04c36-1612-456f-afbe-7bca3677e131.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83f04c36-1612-456f-afbe-7bca3677e131.png)'
- en: 'Your bank info is relatively public, but you have to provide some form of identification
    to use it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你的银行信息相对是公开的，但你必须提供某种形式的身份证明才能使用它：
- en: '![](img/3a1306fc-c91e-49d1-b152-d5dce2feffb3.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a1306fc-c91e-49d1-b152-d5dce2feffb3.png)'
- en: 'Your car is publicly viewable, but you have to have the key to unlock it; maybe
    that particular car is a bad example, you know that might not even be the right
    key for it, but my point''s still valid:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你的车是公开可见的，但你必须有钥匙才能打开它；也许这辆特定的车是个不好的例子，你知道那甚至可能不是它的正确钥匙，但我的观点仍然是有效的：
- en: '![](img/04db04a2-db10-4766-a143-422ff669b778.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04db04a2-db10-4766-a143-422ff669b778.png)'
- en: In all of those scenarios, if you lose your private key you can regain access
    to your asset by either calling a locksmith, talking to tech support, or going
    to the bank to get a new debit card. In blockchain technologies though, if you
    lose that private key, it's over; there's simply no way to recover a private key
    that's been lost, and that's by design. Any scenario where you can regain access
    once lost is because there's a middleman somewhere who still has access, whether
    that's the bank, the locksmith, or the email provider, and you pay for that convenience.
    With blockchain, there's no middleman and you own responsibility of your own account;
    the benefit of this ownership is your account can't be hacked unless you allow
    it to happen, and you don't pay a third party transaction fee for the convenience
    of using your money.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些情况下，如果你丢失了你的私钥，你可以通过打电话给锁匠、与技术支持交谈或去银行换新的借记卡来重新获得对你的资产的访问。但在区块链技术中，如果你丢失了私钥，就完了；没有办法恢复丢失的私钥，这是设计上的。任何一种在丢失后仍然可以恢复访问的情况都是因为中间人仍然具有访问权限，无论是银行、锁匠还是电子邮件提供者，你都要为这种便利支付费用。在区块链上，没有中间人，你拥有自己账户的责任；这种所有权的好处是除非你允许，否则无法入侵你的账户，而且你不需要支付第三方交易费用来方便地使用你的钱。
- en: Types of wallets
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 钱包类型
- en: 'There are different types of wallets available:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同类型的钱包可用：
- en: '**Desktop wallet**: This wallet is downloaded and installed on your computer,
    and it''s only accessible from the computer where it''s downloaded. It has a really
    high level of security, but if you get hacked or you have a virus it''s vulnerable
    to that attack. MetaMask is one such example of a desktop wallet and we''ll be
    working with it more today.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**桌面钱包**：这个钱包是下载并安装在你的电脑上的，只能从下载它的电脑上访问。它具有非常高的安全性，但如果你被黑客入侵或者你有病毒，它就容易受到攻击。MetaMask是桌面钱包的一个例子，我们今天将更多地与它一起工作。'
- en: '**Online wallet**: This wallet runs on a third party server and they''re really
    convenient to use. The private keys are stored online by the wallet provider and
    they''re controlled by that third party. Coinbase is a really popular example
    of an online wallet provider.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在线钱包**：该钱包在第三方服务器上运行，非常方便使用。私钥由钱包提供者在线存储，并由第三方控制。Coinbase 是在线钱包提供者的一个非常流行的例子。'
- en: '**Mobile wallet**: This wallet is installed as an app on your phone, and they''re
    really useful for payments at, for instance, retail stores. Most of the time,
    they have fewer features than desktop wallets because of the limited space available
    on your phone. Mycelium is a really popular example of a mobile wallet.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动钱包**：该钱包是安装在手机上的应用程序，非常适用于例如在零售商店进行支付。它们通常比桌面钱包具有更少的功能，因为手机上的空间有限。Mycelium
    是移动钱包的一个非常流行的例子。'
- en: '**Hardware wallet**: This wallet stores the private key on the hardware itself
    and they have a very high level of security, so high in fact that you can even
    use a hardware wallet on infected PCs. Now, you still need a backup in case that
    hardware fails. The Ledger nano is is one example of a hardware wallet.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬件钱包**：该钱包将私钥存储在硬件上，具有非常高的安全级别，事实上，即使在感染的PC上也可以使用硬件钱包。现在，即使使用硬件钱包，仍然需要备份，以防硬件损坏。Ledger
    Nano 是硬件钱包的一个例子。'
- en: '**Paper wallet**: This wallet is really easy to use, and has a high level of
    security because there''s no technology to fail. And, it really is just a piece
    of paper; I''ll show you how that works in just a minute.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纸钱包**：该钱包非常易于使用，并具有很高的安全级别，因为没有技术可能出现故障。实际上，它只是一张纸；等一会儿我会向你展示它是如何工作的。'
- en: Well, which wallet is best for you? The answer, is it depends on what you're
    trying to accomplish. In this book, we're going to use MetaMask, because it provides
    a great balance of security and ease of use. Personally, I use multiple wallets
    where each has a different role. I have a mobile wallet on my phone with just
    a little bit of currency on it that I can use for transactions on the fly, and
    I also have a hardware wallet where I store the bulk of my cryptocurrencies; I
    keep it locked in a fire safe and it's backed up with a paper wallet that's stored
    in a separate physical building, so that if something were to happen to it I still
    have a way to access those funds. Well, now that you have an idea of what wallets
    are and how they're used, let's jump into the next section and configure our wallet
    for the final part of this book.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，哪种钱包对您来说最好？答案取决于您想要实现什么目标。在本书中，我们将使用MetaMask，因为它提供了安全性和易用性的良好平衡。就我个人而言，我使用多个钱包，每个钱包都有不同的角色。我在手机上有一个移动钱包，上面只有一点货币，可以用于随时进行交易；我还有一个硬件钱包，我将大部分加密货币存储在这里；我将其锁在防火安全箱中，并备份在存放在另一座独立建筑物中的纸钱包中，这样如果有什么问题发生，我仍然可以访问这些资金。现在，您已经知道了什么是钱包及如何使用它们，让我们跳到下一节，并为本书的最后部分配置我们的钱包。
- en: MetaMask
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MetaMask
- en: We're using MetaMask as the wallet to interact with our DApp. We're going to
    learn how to install and configure it; first, let's review some of the key points
    of MetaMask.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用 MetaMask 作为与我们的 DApp 交互的钱包。我们将学习如何安装和配置它；首先，让我们回顾一些 MetaMask 的关键点。
- en: MetaMask turns Google Chrome, Firefox, Opera, and Brave into an Ethereum browser.
    It lets websites retrieve information from the blockchain and allows users to
    securely sign transactions. The account info is stored locally where MetaMask
    is installed, and it's encrypted on the hard drive. The feature we're most interested
    in today is that it allows the browser to interact with Ethereum applications.
    Each transaction prompts the user to confirm and sign the transaction.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: MetaMask 将 Google Chrome、Firefox、Opera 和 Brave 变成了以太坊浏览器。它允许网站从区块链中检索信息，还允许用户安全地签署交易。账户信息存储在安装
    MetaMask 的本地计算机上，并在硬盘上加密。我们今天最感兴趣的功能是它允许浏览器与以太坊应用程序进行交互。每次交易都会提示用户确认和签署交易。
- en: 'The following steps will help you to install and configure it:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下列步骤将帮助您安装和配置它：
- en: 'Let''s visit the website, [https://metamask.io/](https://metamask.io/), and
    click the link that says GET CHROME EXTENSION. Now, if you''re using a different
    browser such as Firefox, Opera, or Brave, you''ll want to click the link for those.
    Take a look at the following screenshot:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们访问网站，[https://metamask.io/](https://metamask.io/)，并单击“GET CHROME EXTENSION”链接。现在，如果你使用的是其他浏览器，如
    Firefox、Opera 或 Brave，你需要单击相应的链接。看一下以下的截图：
- en: '![](img/9f37d05a-7dc2-4d8f-9505-309afc5d23b1.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f37d05a-7dc2-4d8f-9505-309afc5d23b1.png)'
- en: 'Now, it will open up the chrome web store. Hit the Add to Chrome button:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，它将打开 Chrome 网上应用店。点击“添加到 Chrome”按钮：
- en: '![](img/b1f2cf09-e606-4fa8-a7ab-7fa728ef68c2.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1f2cf09-e606-4fa8-a7ab-7fa728ef68c2.png)'
- en: 'This will add the MetaMask icon on the toolbar, and when we click on the icon,
    it will open a new tab for MetaMask:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在工具栏上添加 MetaMask 图标，当我们点击该图标时，它将为 MetaMask 打开一个新标签：
- en: '![](img/81991dad-15c4-4f03-bcba-eb547ce07e51.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81991dad-15c4-4f03-bcba-eb547ce07e51.png)'
- en: 'Now, hit the CONTINUE button and you can create a new account:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击“继续”按钮，你就可以创建一个新账户了：
- en: '![](img/a9859074-3b99-410f-8ac1-0151b19f855d.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9859074-3b99-410f-8ac1-0151b19f855d.png)'
- en: 'Now, we''ll actually import with a seed phrase, because we''ll connect to the
    local Ganache installation. So here, we switch over to Ganache and copy this seed
    phrase:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用种子短语进行导入，因为我们将连接到本地 Ganache 安装。因此，在这里，我们切换到 Ganache 并复制这个种子短语：
- en: '![](img/eaa1aae1-0431-4f15-ab5b-a1f65c37ef7b.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eaa1aae1-0431-4f15-ab5b-a1f65c37ef7b.png)'
- en: 'Click the Import with seed phrase link:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“使用种子短语导入”链接：
- en: '![](img/5f97fc41-b5f6-4b34-b8dd-9ab3fd19b6e1.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f97fc41-b5f6-4b34-b8dd-9ab3fd19b6e1.png)'
- en: 'Paste the seed phrase in the Wallet Seed field, create a new password, and
    then click the IMPORT button:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将种子短语粘贴到“钱包种子”字段中，创建一个新密码，然后点击“导入”按钮：
- en: '![](img/297e5a8c-8c1f-4fdf-ac63-85154bf35607.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/297e5a8c-8c1f-4fdf-ac63-85154bf35607.png)'
- en: Now, we have to accept the terms of use and the privacy notice, and then there's
    a phishing warning that they want you to read because there have been a lot of
    attacks trying to hijack MetaMask to get control of private keys.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须接受使用条款和隐私通知，然后有一个钓鱼警告，因为有很多攻击企图劫持 MetaMask 以获取私钥的行为要你阅读。
- en: 'Now, MetaMask is connected and it''s connected us to the main Ethereum network;
    but, we want to connect to the local Ganache installation, so we''ll choose the
    network''s dropdown here, and you can see some of the different options:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，MetaMask 已连接，它将我们连接到主以太坊网络；但是，我们需要连接到本地 Ganache 安装，所以我们在这里选择网络下拉菜单，你会看到一些不同的选项：
- en: '![](img/4e8cb5df-482b-4897-af2b-eb76aeffac24.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e8cb5df-482b-4897-af2b-eb76aeffac24.png)'
- en: Here, for the main network which we are connected to, and in some test networks
    such as Ropsten, Kovan, and Rinkeby, let's use a Custom RPC.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，对于我们连接的主网络，以及一些测试网络，如 Ropsten、Kovan 和 Rinkeby，让我们使用自定义 RPC。
- en: 'If we switch back over to Ganache, you can see the RPC server address:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们切换回 Ganache，你会看到 RPC 服务器地址：
- en: '![](img/13954f88-4d53-48d9-9a00-367f722724fd.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13954f88-4d53-48d9-9a00-367f722724fd.png)'
- en: 'So, copy that and paste it into the New RPC URL field, and then click on SAVE:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其复制并粘贴到“New RPC URL”字段中，然后点击“保存”：
- en: '![](img/b5c2e2a7-da1e-4aaa-92f4-edafe410d003.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5c2e2a7-da1e-4aaa-92f4-edafe410d003.png)'
- en: 'Close the Settings window, and now it is connected to Ganache. You can see
    the 100 ETH that''s available through Ganache:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭设置窗口，现在它已经连接到 Ganache。你可以看到通过 Ganache 可用的100个以太币：
- en: '![](img/85201655-f7a5-43d7-97eb-bdce0544eb6e.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85201655-f7a5-43d7-97eb-bdce0544eb6e.png)'
- en: 'We can also go into the details for Account 1 and can give it a meaningful
    name, so that whenever we look at the list of accounts it has something we couldn''t
    recognize with it:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以进入账户 1 的详细信息，并给它取一个有意义的名字，这样当我们查看账户列表时，它就有了我们无法识别的东西：
- en: '![](img/f1c04113-1e45-4d9e-9117-b1a5006d173a.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1c04113-1e45-4d9e-9117-b1a5006d173a.png)'
- en: 'We can also click at the top here and create a new account, as shown in the
    following screenshot:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以在这里点击顶部并创建一个新账户，如下图所示：
- en: '![](img/022d2a30-4d4a-4dc5-986f-5ffd4f28b976.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/022d2a30-4d4a-4dc5-986f-5ffd4f28b976.png)'
- en: 'Let''s give it a name and hit Create, and now look what happened. The Ethereum
    address is listed right here and it ends with C7CD:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给它取一个名字，然后点击“创建”，现在看发生了什么。以太坊地址就在这里列出，以C7CD结尾：
- en: '![](img/9a8e6878-c7a7-440e-86fc-abbb30dc2ace.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a8e6878-c7a7-440e-86fc-abbb30dc2ace.png)'
- en: 'So, if we switch back over to Ganache, we can see that the second account is
    provided by Ganache, and so using MetaMask connected to Ganache locally this way
    allows us to use all of the accounts that are listed in the Ganache installation:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所以，如果我们回到 Ganache，我们可以看到第二个账户是由 Ganache 提供的，因此使用 MetaMask 连接到本地 Ganache 的方式允许我们使用在
    Ganache 安装中列出的所有账户：
- en: '![](img/fbad739c-d144-493c-bc27-d21e31c81f26.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fbad739c-d144-493c-bc27-d21e31c81f26.png)'
- en: 'And since we''re here, we''re going to send money from the Player1 account
    to the Owner account, and then send the Amount as 15 ETH; click on the NEXT button and
    confirm the transaction:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 既然我们在这里，我们将从 Player1 账户发送资金到 Owner 账户，然后将金额设置为15以太币；点击“下一步”按钮并确认交易：
- en: '![](img/620312e3-1af1-4892-b73e-7790a8ee6206.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/620312e3-1af1-4892-b73e-7790a8ee6206.png)'
- en: 'The following screenshot shows the balance that reflects the money that was
    sent plus the transaction fee, or the gas fee:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了反映了发送的资金和交易费用，或者说是气体费用的余额：
- en: '![](img/9a606dd3-2e62-46d8-a370-10aeb5131ef8.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a606dd3-2e62-46d8-a370-10aeb5131ef8.png)'
- en: 'And, if we switch over to the Owner account, the 15 ETH has been added there
    to make a total of 115 ETH:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，如果我们切换到所有者账户，那么这 15 个以太币已经添加到那里，总计为 115 个以太币：
- en: '![](img/998338ce-9f1c-4841-8029-072189ecc6ee.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/998338ce-9f1c-4841-8029-072189ecc6ee.png)'
- en: 'And, if we go back over to Ganache, you can see that the balances are reflected
    in the Ganache network itself:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 而且，如果我们回到 Ganache，你会看到余额反映在 Ganache 网络本身中：
- en: '![](img/2a47d40c-53e4-4cf8-a294-e04016468f03.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a47d40c-53e4-4cf8-a294-e04016468f03.png)'
- en: 'Now that we have MetaMask installed, we can create and sign the transactions
    required to play our game. There are some subtleties to that though such as gas,
    which doesn''t really make any sense at first: what does gas have to do with the
    Ethereum transactions? Well, we''re going to find out in the next section.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 MetaMask，我们可以创建并签署我们游戏所需的交易。尽管其中有一些微妙之处，比如气体，起初这似乎没有任何意义：气体与以太坊交易有什么关系呢？好吧，我们将在下一节中找到答案。
- en: Understanding gas price and gas limits
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解气体价格和气体限制
- en: Earlier this week, we learned that our smart contract functions run inside the
    **Ethereum Virtual Machine** (**EVM**). The interesting thing about this concept
    is that your transactions, functions, and code run on computers, but not yours.
    This gives you the infinite scalability concept right? Well, surprise, that doesn't
    happen for free. It's like if you're renting the place where you live or work
    and you pay the landlord for the ability to do so, likewise when our contracts
    execute in the EVM on the Ethereum network we have to pay for the computing resources
    we used. This is known as **gas**.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 本周早些时候，我们了解到我们的智能合约函数在**以太坊虚拟机**（**EVM**）内运行。这个概念的有趣之处在于，你的交易、函数和代码在计算机上运行，但不是你的计算机。这给了你无限的可扩展性概念，对吗？好吧，惊喜的是，这并不是免费的。这就像你租用你居住或工作的地方，并向房东支付这样做的能力一样，同样地，当我们的合约在以太坊网络上的
    EVM 中执行时，我们必须支付我们所使用的计算资源。这被称为**气体**。
- en: 'In a traditional application you would either host your own database servers
    or utilize a third party SAS application, and you would pay the fees on your own.
    In Ethereum transactions, though, the user pays for this because they''re the
    ones executing the transaction even though you may be the one to benefit from
    it:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '在传统应用程序中，你要么托管你自己的数据库服务器，要么利用第三方 SAS 应用程序，并且你会自己支付费用。然而，在以太坊交易中，用户支付这笔费用，因为他们是执行交易的人，即使你可能从中受益： '
- en: '![](img/9dab8b03-5703-4e1d-925a-4fb64762fd34.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9dab8b03-5703-4e1d-925a-4fb64762fd34.png)'
- en: Ethereum gas
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太坊气体
- en: This can be thought of as similar to a transaction fee, but it's not a flat
    rate, and that's because we're paying for the computational power required to
    execute a transaction on the blockchain. This transaction can be a simple monetary
    transfer, or it can be a complex processing of business logic built into your
    contract, and the amount of computational power is different for each of those
    scenarios, so the amount of gas paid is different as well.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以被视为类似于交易费用，但它不是一个固定费率，这是因为我们正在为在区块链上执行交易所需的计算资源付费。这个交易可以是简单的货币转账，也可以是构建到你的合约中的复杂业务逻辑的复杂处理，对于这些情况，所需的计算资源量是不同的，因此支付的气体量也是不同的。
- en: Gas price
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 气体价格
- en: The amount of gas used is tracked and then paid to the miner in ether, which
    brings us to the gas price. Gas price is the amount of Ether you're willing to
    pay for each unit of gas consumed; you can set that to anything you want and likewise
    the miners can choose to ignore any transactions below their set gas price, which
    gives them the ability to skip processing any transactions that won't be profitable
    for them. If you set your gas price too low, miners are going to ignore it and
    your transaction will never get confirmed and be written to the blockchain.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的气体量被跟踪，然后以以太币支付给矿工，这就带来了气体价格。气体价格是你愿意为每单位消耗的气体支付的以太币数量；你可以将其设置为任何你想要的值，同样地，矿工可以选择忽略低于其设定气体价格的任何交易，这使得他们能够跳过对他们而言不会有利可图的任何交易的处理。如果你将你的气体价格设置得太低，矿工们将会忽略它，你的交易将永远得不到确认并被写入区块链。
- en: 'The following steps shows you what this actually looks like:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的步骤向你展示了实际情况：
- en: 'Let''s send Ether from one account to another:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从一个账户向另一个账户发送以太币：
- en: '![](img/b3947eef-03e2-40b9-b4cb-cd0a397a3587.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3947eef-03e2-40b9-b4cb-cd0a397a3587.png)'
- en: 'Go into the Gas Fee section here, and take the gas price all the way down to
    1 and confirm it:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里进入气费部分，将气价调到1确认：
- en: '![](img/08f863ef-2fbf-4648-a4a6-5289acb3bc1d.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08f863ef-2fbf-4648-a4a6-5289acb3bc1d.png)'
- en: 'Here, you can see that it''s been submitted, but it''s not actually getting
    confirmed:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，你可以看到它已经提交，但实际上还没有得到确认：
- en: '![](img/1756a0c9-a57e-4262-8531-370749083725.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1756a0c9-a57e-4262-8531-370749083725.png)'
- en: And, it'll actually stay in this Submitted status because no miner is going
    to pick it up as the gas price set is lower than what they're willing to accept.
    If we click on the MetaMask icon and then go down to the transactions here, it
    will actually tell me that I can increase the gas price, if I want to give that
    transaction a better chance of succeeding. So, how much should you set the gas
    price to? Well, MetaMask actually does a great job of estimating the gas price,
    and you should set a fair value here because gas price multiplied by gas costs
    is what you will pay for the transaction.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，它的状态会停留在已提交，因为没有矿工会接受它，因为设定的气价比他们愿意接受的要低。如果我们点击MetaMask图标，然后在这里的交易中，它会告诉我，如果我想让那笔交易成功的机会更高，我可以增加气价。那么你应该设置多少气价呢？嗯，MetaMask实际上做了估算气价的很好的工作，你应该在这里设置一个合理的值，因为气价乘以气费就是你要支付的交易费。
- en: If you set your gas price too low, as we just saw, no one is going to process
    your transaction, and if you set it too high, you'll pay too much in transaction
    fees. There's also a gas limit, and that's the maximum amount of gas that can
    be consumed for your transaction. So, it's okay to actually set this higher because
    you only pay for the actual work done; if you set a high gas limit and it's not
    all consumed, the remaining gas is refunded back to you, but if you hit the gas
    limit for your transaction and there's still more work to do in your transaction,
    you run out of gas, and this counts as a failed transaction. So now, the miner
    actually did perform the work that you requested and they stopped when they reach
    the maximum amount of gas that you said you were willing to spend; as a result,
    the transaction fails and you're not going to get the Ether paid for gas back
    because they did the work they said they were going to do.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你设置的气价太低，就像我们刚刚看到的那样，没有人会处理你的交易，如果你设置得太高，你将支付过多的交易费。还有一个气限，那就是你的交易可以消耗的最大气量。所以，实际上可以设置得更高，因为你只支付实际完成的工作；如果你设置了高气限，而没有全部消耗，剩下的气会退还给你，但如果你的交易达到了气限，但在你的交易中仍然有更多的工作要做，你的气用完了，这算作一笔失败的交易。所以，矿工实际上已经做了你所要求的工作，当他们达到你愿意花费的最大气量时停下来；结果，交易失败了，你不会得到支付给矿工的以太币返还，因为他们做了他们说要做的工作。
- en: 'So, there''s actually a really cool website called [eth gas station info](https://ethgasstation.info/)
    that you can use to see what current gas prices are. Using this, you can get a
    good idea for what you should be paying for gas and how long it''s going to take
    for a miner to confirm your transaction at that price:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，实际上有一个非常酷的网站叫做[eth gas站信息](https://ethgasstation.info/)，你可以用它来查看当前的气价。使用这个，你可以很好地了解你应该支付多少气价，以及矿工要花多长时间以该价格确认你的交易：
- en: '![](img/02ebb92f-04cb-4987-9701-4f26435e9dd6.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02ebb92f-04cb-4987-9701-4f26435e9dd6.png)'
- en: So now, we can successfully make transactions and we can make good financial
    decisions to control our costs, but what happens after I send that transaction?
    Is everything cool? Well, it might be or might not be. In the next section, let's
    learn how to tell the difference between each, by verifying blockchain transactions
    on the Ethereum network.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在，我们可以成功地进行交易，并且可以做出好的财务决策来控制我们的成本，但是在我发送了那笔交易之后会发生什么？一切顺利吗？嗯，可能是可能不是。在接下来的部分，让我们学习如何通过在以太坊网络上验证区块链交易来区分，从而了解每种情况之间的区别。
- en: Viewing blockchain transactions on the Ethereum network
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看以太坊网络上的区块链交易
- en: Well, we saw how to sign transactions using a wallet, and now we know what gas,
    gas price and gas limits are, but there's still a little bit of a question. Let's
    say I sold something for 10 Ether but the buyer sets their gas price so low that
    I'll never get that transaction. We saw in the last section that the buyer is
    going to see in their wallet that the transaction hasn't been confirmed, but what
    about me? How can I be certain this transaction is going to succeed? Well, I can
    use the website [etherscan.io](https://etherscan.io/) and see the block height
    for a transaction. The block height is the number of blocks written to the blockchain,
    since the block containing your transaction.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，我们已经看到如何使用钱包签署交易，现在我们知道了燃气、燃气价格和燃气限制是什么，但还有一个小问题。假设我卖了一些东西得到了 10 个以太币，但买家设置的燃气价格太低，以至于我永远无法得到那笔交易。我们在上一节看到买家会在他们的钱包中看到交易未确认，但我呢？我怎么能确定这笔交易会成功呢？好吧，我可以使用网站
    [etherscan.io](https://etherscan.io/) 来查看交易的区块高度。区块高度是指写入区块链的区块数，自包含您的交易的区块以来。
- en: Let's take a step back here for a minute and review how the blockchain works.
    So, transactions are verified by miners and then written to a block, subsequent
    blocks are written to the end of that block, and the number of blocks after the
    block containing your transaction is known as the **block height**. The larger
    the block height, the less likely it is that your transaction will be reverted.
    Blocks are mined every 12 to 15 seconds currently, so it doesn't take long to
    get a few confirmations. For large transactions though, it's advised that you
    wait for at least six confirmations before considering the transaction successful.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在这里停下来一分钟，回顾一下区块链的工作原理。所以，交易由矿工验证，然后写入一个区块，后续区块写入到那个区块的末尾，包含您的交易的区块之后的区块数称为
    **区块高度**。区块高度越大，您的交易被回滚的可能性就越小。目前每 12 到 15 秒挖掘一个区块，所以很快就可以得到一些确认。但是对于大额交易，建议至少等待六次确认才考虑交易成功。
- en: 'Let''s take a look at some of the other information available to us on the
    Ethereum blockchain using just our transaction ID. Now, this is coming from the
    website [etherscan.io](https://etherscan.io/), and it''s an Ethereum block explorer.
    Here, you can search by Ethereum address, transaction hash, block, and a few other
    parameters:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看通过交易 ID 就能在以太坊区块链上获取的其他信息。现在，这是来自网站 [etherscan.io](https://etherscan.io/)
    的信息，它是以太坊区块浏览器。在这里，您可以通过以太坊地址、交易哈希、区块和一些其他参数进行搜索：
- en: '![](img/b80019a5-9861-4422-8e67-b47b830f1e5a.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b80019a5-9861-4422-8e67-b47b830f1e5a.png)'
- en: 'One of the things I use this for is tracking down a transaction. For example,
    we know that every transaction on the Ethereum network produces a unique transaction
    ID, and we can enter that and see the details of that transaction. We''ve got
    the transaction status, whether it was successful or failed, the block height
    (which you now know is how many blocks have been written since this transaction
    was included in the blockchain), and we have who it''s from and who it''s to;
    in this case, the transaction was to the CryptoKiddiesCore contract, and we can
    also see how much Ether was sent, the gas limit, the gas used, the gas price,
    and the costs:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我用这个的其中一项用途是追踪一笔交易。例如，我们知道以太坊网络上的每笔交易都会产生一个唯一的交易 ID，我们可以输入该 ID 并查看该交易的详细信息。我们有交易状态，无论成功与否，区块高度（你现在知道这是自这笔交易被包含在区块链中以来已写入的区块数），以及交易的发起方和接收方；在这种情况下，交易是发送到了
    CryptoKiddiesCore 合约，我们还可以看到发送了多少以太币，燃气限制，已使用的燃气，燃气价格和成本：
- en: '![](img/0d060c05-3a7d-4905-8f0f-326fdb69bae8.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d060c05-3a7d-4905-8f0f-326fdb69bae8.png)'
- en: 'Here''s an interesting thing: each Ethereum address is a hyperlink, so I can
    click this link for the CryptoKiddiesCore contract and see all the transactions
    against that contract. I can see the contract balance, the contract owner, even
    ERC 20 and ERC 721 tokens, and the contract code itself:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一件有趣的事情：每个以太坊地址都是一个超链接，所以我可以点击这个链接，查看 CryptoKiddiesCore 合约的所有交易。我可以看到合约余额，合约所有者，甚至
    ERC 20 和 ERC 721 代币，以及合约代码本身：
- en: '![](img/3cb19936-051d-40d6-8c97-6f272a058d5f.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3cb19936-051d-40d6-8c97-6f272a058d5f.png)'
- en: You can also click on any address that's sent a transaction to the contract
    and view all the other transactions made from that address. That's why Ethereum
    is known as pseudonymous, not anonymous; all transactions are public but we don't
    know the actual identity of this individual. Etherscan also has sites for the
    common test nets Ropsten, Kovan, and Rinkeby, which makes it really helpful as
    a tool when you're troubleshooting transactions outside of your own local Ganache
    network. And, armed with that information, you're able to verify that any transaction
    on the Ethereum network is valid and confirmed before taking action on a transaction.
    So now, let's dig a little deeper into offline and online wallets so you have
    a better understanding of how each of those work.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以点击任何发送交易给合约的地址，查看从该地址发出的所有其他交易。这就是为什么以太坊被称为伪匿名而不是匿名的原因；所有的交易都是公开的，但我们不知道这个个人的真实身份。Etherscan
    还为常见的测试网络 Ropsten、Kovan 和 Rinkeby 提供了网站，这使得在解决自己本地 Ganache 网络之外的交易时，它成为一个非常有用的工具。有了这些信息，你能够在采取任何交易行动之前验证以太坊网络上的任何交易是否有效和确认。所以现在，让我们更深入地了解在线和离线钱包，这样你就能更好地理解它们的工作原理。
- en: Understanding online and offline wallets
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解在线和离线钱包
- en: In this section, we'll learn about the online and offline wallets, because this
    is a concept that is quite confusing, and I want to make sure you have a solid
    understanding of it before I send you out in the world to become a blockchain
    developer.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将学习关于在线和离线钱包的知识，因为这是一个相当令人困惑的概念，我想确保在把你培养成区块链开发者之前，你对它有扎实的理解。
- en: Distributed ledgers
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式账本
- en: 'I want to reference a term used in blockchain to describe the technology, distributed
    ledger, specifically the word "ledger." Ledger''s aren''t new; they''ve been around
    for centuries to document transactions between people, and they''re simply a written
    description of a transaction, who the money came from, who it went to, and how
    much. By looking at this ledger, you can see exactly what took place in this photography
    business in 1836, and if this person kept all the money recorded here in the same
    wallet, we would know from this ledger exactly how much money was in their wallet
    on any given day:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我想引用区块链中用来描述技术的术语，分布式账本，特别是“账本”这个词。账本并不新鲜；它们已经存在了几个世纪，用来记录人与人之间的交易，它们只是对交易的书面描述，资金来自谁，去向谁，以及多少。通过查看这个账本，你可以清楚地看到1836年这家摄影企业发生了什么，如果这个人把所有的钱都记录在同一个钱包里，我们就能从这个账本中确切地知道他的钱包在任何一天有多少钱：
- en: '![](img/d26cd921-f452-4e96-abee-8e0f6c6d64b1.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d26cd921-f452-4e96-abee-8e0f6c6d64b1.png)'
- en: Multiple ledgers
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个账本
- en: 'A blockchain is a decentralized ledger, meaning that instead of one little
    worn-out notebook we have multiple digital copies of this ledger stored on computers
    all around the world. The only way you can write a new entry to this ledger is
    if you have the private key to sign a transaction for your account. The keepers
    of this ledger, the miners, don''t know your private key but they can validate
    a signature came from you using your public key:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链是一个分散的账本，这意味着我们不是有一个小破旧的笔记本，而是在世界各地的计算机上有多个数字副本存储着这个账本。你能够向这个账本写入新的条目的唯一方式是拥有私钥来为你的账户签署交易。这个账本的管理者，矿工，不知道你的私钥，但他们可以验证签名来自你使用的公钥：
- en: '![](img/21213aa1-46c9-4801-8e9d-32478009a92c.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21213aa1-46c9-4801-8e9d-32478009a92c.png)'
- en: Paper wallets
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纸钱包
- en: 'Your wallet is the piece of technology that holds your private key, and that
    piece of technology can be as simple as a piece of paper, because all you need
    to make a transaction is the seed phrase for your wallet. You''ve already seen
    how to do that with MetaMasks so it''s entirely possible for you to keep your
    seed phrase offline on a piece of paper, enter it into MetaMask when you need
    to make a transaction, and then remove the account from MetaMask. You can''t get
    much better security against hacking than not having your information online at
    all. Meanwhile, if this is the account for your online business using Ethereum,
    your business can stay online and continue to work day and night, and all of the
    funds earned by your business will be recorded into the decentralized ledger,
    and you can remain confident that those funds will be there when you want them.
    The downside to offline wallets is convenience; it''s definitely not convenient
    to have to set up a wallet every time you want to make a transaction, and you
    likely don''t want to carry this little piece of paper around with you everywhere.
    I mean, what if you fall into a puddle on a rainy day and it gets wet:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您的钱包是保存您的私钥的技术部件，而这个技术部件可以简单到一张纸，因为您只需要使用您的钱包的种子短语就能进行交易。您已经看到了如何在 MetaMask
    中操作，因此您完全可以将种子短语离线保存在一张纸上，在需要进行交易时将其输入到 MetaMask 中，然后从 MetaMask 中删除该账户。没有将您的信息放在线上比不上这种方式提供的安全性更高。同时，如果这是您的在线业务使用以太坊的账户，您的业务可以在线上持续运作，全天候工作，您业务赚取的所有资金将被记录在去中心化的分类账中，您可以放心这些资金在您需要时会在那里。离线钱包的缺点是方便性；每次想要进行交易都需要设置一个钱包，这肯定不方便，并且您可能不想随身携带这张小纸条到处走。我是说，如果您在雨天跌进了水坑，它湿了会怎么办：
- en: '![](img/e00c48e6-eddf-4c15-8262-f5f31f34d2e1.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e00c48e6-eddf-4c15-8262-f5f31f34d2e1.png)'
- en: Hardware wallets
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件钱包
- en: 'Hardware wallets like the Ledger nano provide a similar level of security as
    paper wallets, but make it a little easier to use your account. They''re encrypted
    devices protected by a pin code that must be entered into the device to unlock
    it. It plugs into your computer where you can use a software wallet to interact
    with the hardware wallet. Now, this is where it can get confusing because the
    term "hardware wallet" seems to indicate that the funds are stored on the wallet,
    but they''re not. What''s actually stored on the wallet is the private key used
    to sign the transactions associated with the wallet address. Any transactions
    created are sent to the blockchain where the ledger for your account gets updated;
    this means that once you unplug your hardware wallet from your computer, there''s
    no way any additional transactions can be placed from your account. Hardware wallets
    also have a seed phrase just like the ones we''ve used with Ganache, so you can
    write that seed phrase down on a paper wallet, and if this device ever becomes
    damaged use the seed phrase to restore it to a new device:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件钱包（像是Ledger Nano）提供了与纸钱包类似的安全级别，但使用起来更加方便。它们是受 PIN 码保护的加密设备，必须输入 PIN 码才能解锁。它连接到您的计算机，您可以使用软件钱包与硬件钱包进行交互。现在，这可能会让人感到困惑，因为术语“硬件钱包”似乎表明资金存储在钱包上，但实际上并不是。实际上存储在钱包上的是用于签署与钱包地址相关的交易的私钥。创建的任何交易都会发送到区块链，其中您的账户的分类账会得到更新；这意味着一旦您将硬件钱包从计算机上拔下来，就没有任何其他交易可以从您的账户上进行。硬件钱包也有一个种子短语，就像我们在
    Ganache 中使用的那样，所以您可以将种子短语写在纸钱包上，如果此设备损坏，可以使用种子短语将其恢复到新设备上：
- en: '![](img/cddb024e-c776-461a-9910-ce2d77e8ea8e.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cddb024e-c776-461a-9910-ce2d77e8ea8e.png)'
- en: 'On the complete opposite end of that spectrum, we have online wallets. As I
    mentioned in the first section, today Coinbase is the hands-down leader in this
    category; have a look at their website which is an interface every internet user
    across the globe is familiar with. Anyone on the internet has filled out a form
    similar to this to create an account, and using an online wallet such as Coinbase
    comes with some other features as well:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 完全相反的是在线钱包。正如我在第一节中提到的，如今 Coinbase 在这一领域是无可争议的领导者；看一下他们的网站，这是全球每个互联网用户都熟悉的界面。互联网上的任何人都曾经填写过类似于此的表单来创建账户，使用像
    Coinbase 这样的在线钱包还带有其他一些功能：
- en: '![](img/7df5c352-23a8-4474-b737-c7e5b2635218.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7df5c352-23a8-4474-b737-c7e5b2635218.png)'
- en: 'If you forget your credentials, you can have them reset:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您忘记了您的凭据，您可以重置它们：
- en: '![](img/24f0c7e8-71f0-4d8e-a857-0b6152ba3440.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24f0c7e8-71f0-4d8e-a857-0b6152ba3440.png)'
- en: 'Here, you get some advanced features for free as well, such as a new wallet
    address after every transaction to prevent someone from building a complete financial
    profile of your account, like we saw in the last section using a blockchain explorer:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您还可以免费获得一些高级功能，例如每次交易后都会获得一个新的钱包地址，以防止有人建立您账户的完整财务档案，就像我们在上一节中使用区块链浏览器看到的那样：
- en: '![](img/a816f3ff-60f1-46f5-bf9f-6e0faf048e3c.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a816f3ff-60f1-46f5-bf9f-6e0faf048e3c.png)'
- en: 'On the downside though, you don''t own and you can''t get access to the private
    keys for your account; this means the security of your account is ultimately in
    control of the wallet provider, and if something happens to their system, you''re
    solely dependent on them to resolve it. Now, this isn''t a brand new concept or
    unique to cryptocurrencies; it''s the exact same way every financial account you
    currently have works: your bank account, your savings account, stock ownership,
    and retirement plans. Its biggest weakness is actually its most compelling feature
    because it operates like the other financial instruments we are used to, and that
    familiarity lowers the barrier of entry with new users, but does so at the cost
    of security:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，您并不拥有也无法访问您账户的私钥；这意味着您账户的安全最终由钱包提供者控制，如果发生了什么，您完全依赖于他们来解决。 现在，这并不是一个全新的概念，也不是加密货币独有的；
    它与您当前拥有的其他每个金融账户的工作方式完全相同：您的银行账户，您的储蓄账户，股票所有权和退休计划。 其最大的弱点实际上是其最引人注目的特点，因为它的运作方式与我们习惯的其他金融工具相同，这种熟悉感降低了新用户的进入门槛，但以牺牲安全性为代价：
- en: '![](img/7573bdc4-b214-4dfa-bfa5-459f71026c84.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7573bdc4-b214-4dfa-bfa5-459f71026c84.png)'
- en: Mobile and desktop wallets
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动和桌面钱包
- en: 'Somewhere in between paper wallets and online wallets, we have desktop and
    mobile wallets such as MetaMask. MetaMask is a browser plug-in that installs like
    any other software your users are familiar with; this reduces the barrier of entry
    for new users, even if they don''t understand the underlying technology. The private
    key associated with a MetaMask wallet is stored on the computer where it''s installed,
    and it''s also encrypted so that only someone who knows your password can access
    it. But, computers crash right? Well, with MetaMask you can back up that private
    key, which allows you to restore it onto another computer or even use it on multiple
    computers. The most important feature of MetaMask for us in this book, is it integrates
    with the browser, and this provides a seamless interaction between the DApp that
    we created and the user''s Ethereum wallet, plus an added level of security for
    the user because we didn''t directly access their wallet, we created a transaction
    and MetaMask presents the transaction to the user with the option to confirm and
    sign the transaction or reject it. Well, here''s the thing: you don''t have to
    pick one of these wallets, you can use them all and create a personalized wallet
    system that provides the best of all features.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在纸钱包和在线钱包之间，我们有桌面和移动钱包，比如 MetaMask。 MetaMask 是一个浏览器插件，安装方式与用户熟悉的任何其他软件相同；这降低了新用户的门槛，即使他们不理解底层技术。
    与 MetaMask 钱包关联的私钥存储在安装它的计算机上，并且还加密了，只有知道您的密码的人才能访问它。 但是，计算机会崩溃，对吧？ 嗯，有了 MetaMask，您可以备份该私钥，这样您就可以将其恢复到另一台计算机上，甚至可以在多台计算机上使用它。
    MetaMask 对我们这本书的最重要功能是它与浏览器集成，这为我们创建的 DApp 和用户的以太坊钱包之间提供了无缝交互，以及为用户提供了额外的安全级别，因为我们没有直接访问他们的钱包，而是创建了一个交易，MetaMask
    会向用户呈现交易，并提供确认和签名交易或拒绝交易的选项。 好吧，事实是：您不必选择其中一个钱包，您可以同时使用它们并创建一个个性化的钱包系统，以提供所有功能的最佳体验。
- en: 'You can have a Coinbase account that you use to buy cryptocurrencies such as
    Ethereum, and once you have the Ether you can transfer some of it to a wallet
    such as MetaMask, where it can be used to interact with DApps, and any Ether that
    you''re going to hold can be sent to a hardware wallet for storage, and you can
    back up both your MetaMask wallet and your hardware wallet to paper wallets that
    are stored in separate physical locations. This gives you the convenience of online
    wallets such as Coinbase, easy interaction with DApps like the one we created
    here using MetaMask, secure storage for holding the bulk of your cryptocurrencies
    using a hardware wallet, and security against failure with paper wallet backups.
    It''s a comprehensive and thorough management strategy, and it''s the exact strategy
    that I use. The following diagram describes Coinbase with MetaMask:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以拥有一个 Coinbase 帐户，用于购买诸如以太坊之类的加密货币，一旦您拥有了以太，您可以将其中的一部分转移到钱包，例如 MetaMask，在那里可以与
    DApp 进行交互，并且您要持有的任何以太均可以发送到硬件钱包进行存储，您可以将 MetaMask 钱包和硬件钱包都备份到纸钱包中，这些纸钱包存储在不同的物理位置。这为您提供了像
    Coinbase 这样的在线钱包的便利性，使用 MetaMask 这样的 DApp 轻松交互，使用硬件钱包安全存储大部分加密货币，以及使用纸钱包备份的故障安全性。这是一种全面而彻底的管理策略，也是我使用的确切策略。以下图表描述了
    Coinbase 与 MetaMask：
- en: '![](img/fdbeb8d2-b252-4f73-8c88-cbb71ff9e910.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fdbeb8d2-b252-4f73-8c88-cbb71ff9e910.png)'
- en: 'Using the different types of wallets you''ve learned about here, you can create
    a comprehensive wallet strategy that balances security and ease of use appropriate
    to the role of the application. As you start to create DApps on your own, I encourage
    you to include strategies and information like this in your DApp. Decentralized
    applications are still in their infancy, and for an overwhelming majority of your
    users, your DApp may be their first interaction with one, so they''re not going
    to have this knowledge. Including it as part of your onboarding process ensures
    that they know how to protect their assets, and it lowers the barrier to entry.
    There''s still one more thing to cover: how does our app even know about MetaMask?
    So, let''s jump into our final section of the day to find out.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您在此处学到的不同类型的钱包，您可以创建一个综合性的钱包策略，平衡适合应用程序角色的安全性和易用性。当您开始自己创建 DApp 时，我鼓励您在您的
    DApp 中包含这样的策略和信息。去中心化应用程序还处于起步阶段，对于绝大多数用户来说，您的 DApp 可能是他们与之进行的第一次交互，因此他们不会拥有这种知识。将其作为您的入门流程的一部分包含进去，确保他们知道如何保护他们的资产，并降低了进入门槛。还有一件事情要讲述：我们的应用程序如何知道
    MetaMask 的存在？因此，让我们跳到今天的最后一节来找出答案。
- en: Injecting the Web3 provider
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注入 Web3 提供程序
- en: So, we've seen how MetaMask creates and signs transactions and how it manages
    accounts, but we haven't talked about how our app even knows that MetaMask exists.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经了解了 MetaMask 如何创建和签署交易以及如何管理帐户，但我们还没有讨论我们的应用程序甚至如何知道 MetaMask 的存在。
- en: 'The following screenshots show the app container, which is the main container
    loaded when our application starts:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了应用程序容器，这是我们应用程序启动时加载的主要容器：
- en: '![](img/187f71a8-c420-46b5-aa32-1df8e788784e.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/187f71a8-c420-46b5-aa32-1df8e788784e.png)'
- en: 'If we take a look down here at `componentDidMount`, we''re checking for `window.web3`
    to see if it''s defined; if it''s been defined, that means that the user has MetaMask
    loaded and it has injected the Web3 provider into the browser:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在这里看一下 `componentDidMount`，我们会检查 `window.web3` 是否已定义；如果已定义，这意味着用户已加载 MetaMask
    并将 Web3 提供程序注入到浏览器中：
- en: '![](img/1afe4e1c-8e30-496e-8fd3-952c98fb35fe.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1afe4e1c-8e30-496e-8fd3-952c98fb35fe.png)'
- en: Currently MetaMask prompts the user to let MetaMask inject into the browser
    after that point. The reason that they're doing that is because one of the core
    principles of blockchain is security, and if you're able to read their account
    information from any DApp they may not want that, so we're changing it up a little
    bit so that before you're allowed to read anything from there Ethereum account
    you have to prompt them and get their permission first. And, what happens here
    is we're checking for the Web3 provider to be injected into the browser by MetaMask;
    if it is, then we're going to set a variable called `currentProvider` that's equal
    to the current provider provided by Web3\. And now, things are going to look really
    familiar here for you because we're using the same action reducer pattern that
    we used throughout the rest of our game.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，MetaMask 会在此时提示用户允许 MetaMask 注入到浏览器中。他们这样做的原因是因为区块链的核心原则之一是安全性，如果您能够从任何 DApp
    中读取他们的账户信息，他们可能不希望这样，因此我们稍微改变了一下，以便在您允许从以太坊账户中读取任何内容之前，必须首先提示他们并获得他们的许可。在这里发生的是，我们检查
    MetaMask 是否已将 Web3 提供程序注入到浏览器中；如果是，那么我们将设置一个名为 `currentProvider` 的变量，该变量等于 Web3
    提供的当前提供程序。现在，这里对你来说会看起来非常熟悉，因为我们在整个游戏中都使用了相同的动作减少器模式。
- en: 'We''re going to call the provider actions. Take a look at the following screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将调用提供程序动作。看一下以下截图：
- en: '![](img/17422d77-7c33-4242-bcdc-bb551edb2350.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17422d77-7c33-4242-bcdc-bb551edb2350.png)'
- en: 'So, if we take a look right here, the `ProviderActionCreator` function comes
    from `core /actions/actions-provider`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我们在这里看一下，`ProviderActionCreator` 函数来自 `core/actions/actions-provider`：
- en: '![](img/5f142bb6-2cf8-45c0-b6dd-79de44d104af.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f142bb6-2cf8-45c0-b6dd-79de44d104af.png)'
- en: 'Here, we''re going to call the `setProvider` function:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将调用 `setProvider` 函数：
- en: '![](img/6ffb3b1f-87d3-4111-8f52-e1592f493f4d.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ffb3b1f-87d3-4111-8f52-e1592f493f4d.png)'
- en: 'Over here, we have `setProvider`, and that''s going to return a dispatch that,
    from the provider, calls the `getAccounts` method:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有 `setProvider`，它将返回一个 dispatch，从提供程序调用 `getAccounts` 方法：
- en: '![](img/5782024b-2398-44a9-84f4-8d43144e4164.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5782024b-2398-44a9-84f4-8d43144e4164.png)'
- en: 'That''s going to dispatch to the reducer provider. Now, a reducer provider
    is going to take that provider that we grabbed from Web3, and it''s going to save
    it to the Redux store:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这将分派到 reducer provider。现在，reducer provider 将获取我们从 Web3 中获取的提供程序，并将其保存到 Redux
    存储中：
- en: '![](img/69581fee-867e-499a-b698-88abc449d943.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69581fee-867e-499a-b698-88abc449d943.png)'
- en: 'Once that''s saved to our Redux store, if we take a look at our `actions-game`
    provider, whenever we call `playRound`, you can see that we''re calling the `web3Provider`
    from the Redux store. Then, we call the `setProvider` method, which gets the current
    provider from that injected Web3 instance, and then we use that throughout the
    rest of our application to make the Ethereum calls to our contract:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦保存到我们的 Redux 存储中，如果我们看看我们的 `actions-game` 提供程序，每当我们调用 `playRound` 时，你会发现我们正在调用
    Redux 存储中的 `web3Provider`。然后，我们调用 `setProvider` 方法，该方法从注入的 Web3 实例中获取当前提供程序，然后我们在应用程序的其余部分中使用它来进行以太坊调用我们的合约：
- en: '![](img/9fc19cb3-eec0-42c2-8a26-18f4d595b29e.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fc19cb3-eec0-42c2-8a26-18f4d595b29e.png)'
- en: 'All of that happens because when the app loads and the component mounts, we
    check for the `web3Provider` to see if it''s been injected into the browser; if
    it has, we call an action that gets that `web3Provider`, dispatches it to the
    reducer, and the reducer saves that provider to the Redux store, which makes it
    available within our game to make our Ethereum transaction calls:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都发生在应用程序加载并且组件挂载时，我们检查 `web3Provider` 是否已经被注入到浏览器中；如果是，我们调用一个动作来获取该 `web3Provider`，将其分派给减少器，然后减少器将该提供程序保存到
    Redux 存储中，这使其在我们的游戏中可用于进行以太坊交易调用：
- en: '![](img/2c8af8d9-efdc-412b-b84b-199033636f51.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c8af8d9-efdc-412b-b84b-199033636f51.png)'
- en: And now, let's take a look at our homework for the day where you'll install
    and configure MetaMask to interact with our DApp.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下今天的作业，你将安装和配置 MetaMask 以与我们的 DApp 交互。
- en: Assignment
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务
- en: Well, in this chapter, we created a scoreboard for your game; now, it's time
    to play a game and test it out.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，这一章，我们为你的游戏创建了一个记分牌；现在，是时候玩一场游戏并测试一下了。
- en: 'For today''s assignment, here''s what you need to do:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 对于今天的任务，以下是你需要做的事情：
- en: Install MetaMask. To do so, you'll go to [MetaMask.io](https://metamask.io/)
    and follow the instructions, just as we did in our previous sections. Remember,
    you need to be using Chrome, Brave, Firefox, or Opera in order for MetaMask to
    work.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 MetaMask。要这样做，您将转到 [MetaMask.io](https://metamask.io/) 并按照说明操作，就像我们在之前的章节中所做的一样。请记住，您需要使用
    Chrome、Brave、Firefox 或 Opera 浏览器才能使用 MetaMask。
- en: Next, launch Ganache and copy the seed phrase.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，启动 Ganache 并复制助记词。
- en: Set up your account in MetaMask using the seed phrase, and MetaMask should connect
    to the main Ethereum network by default, so you'll need to configure it to use
    Ganache.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用助记词在 MetaMask 中设置您的帐户，并且 MetaMask 应该默认连接到主以太坊网络，所以您需要将其配置为使用 Ganache。
- en: Once that's done correctly, you'll see your account balance from Ganache and
    MetaMask, and then you'll need to deploy your contracts.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦正确完成了这些步骤，您将会看到来自 Ganache 和 MetaMask 的帐户余额，然后您需要部署您的合约。
- en: 'When you do, it''s likely that you''re going to see this error, so let''s take
    a look and see what it means:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当您这样做时，很可能会看到这个错误，让我们看看它的意思：
- en: '![](img/bf3c2723-fae5-4e21-a6fc-033865ddbd3d.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf3c2723-fae5-4e21-a6fc-033865ddbd3d.png)'
- en: The key line here is, Attempting to run transaction, but recipient address (...)
    is not a contract address. What this is telling us is that you've deployed this
    contract with this configuration before, but the deployed address doesn't exist
    on this network. This error is to keep you from deploying multiple instances of
    your contract to the same network inadvertently, which is a good thing right?
    If that were to happen, how would you know which contract on the network was the
    right one to use?
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 关键行在于，试图运行交易，但接收地址（...）不是合约地址。这告诉我们的是，您以前使用这个配置部署了此合约，但部署的地址在此网络上不存在。这个错误是为了防止您无意中在同一个网络上部署多个实例的合约，这不是一件好事吗？如果那样做了，您怎么知道网络上哪个合约是正确的呢？
- en: In this particular case though, this error is okay to ignore; we're seeing it
    because we restarted Ganache, which creates a brand new network, so the deployed
    contract from the last time we ran Ganache truly doesn't exist.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种特殊情况下，忽略这个错误是可以的；我们看到这个错误是因为我们重新启动了 Ganache，这会创建一个全新的网络，因此上次运行 Ganache 时部署的合约确实不存在。
- en: 'So, to get around that error, run the following command:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，要解决这个错误，运行以下命令：
- en: '[PRE0]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: And now, you can play a few rounds of your game.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以玩几轮游戏了。
- en: Check to see that the scoreboard you built yesterday is updating with the correct
    variables, and check to see that your account balance in MetaMask is properly
    updating when you win or lose a few rounds. Our application is now complete and
    functioning; it's only running on your local workstation though, right?
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 检查昨天构建的记分板是否根据正确的变量更新，并检查当您赢得或输掉几轮时，MetaMask 中的帐户余额是否正确更新。我们的应用程序现在已经完成并且正常运行；但是，它只在您的本地工作站上运行，对吧？
- en: Summary
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned all about wallets, their types, and the security
    involved. We then learned about MetaMask, the wallet we are going to use in our
    application. Next, we looked at the workings of Ethereum gas, and how we can use
    it. After that, we explored the different types of online and offline wallets.
    And finally, we learned how to inject the Web3 provider to Ethereum, for our application.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于钱包的所有知识，它们的类型以及所涉及的安全性。然后，我们了解了 MetaMask，这是我们将在应用程序中使用的钱包。接下来，我们研究了以太坊的燃气工作原理以及如何使用它。之后，我们探讨了不同类型的在线和离线钱包。最后，我们学习了如何为我们的应用程序向以太坊注入
    Web3 提供程序。
- en: In our next chapter, we're going to take a look at how to deploy our contract
    to a public Ethereum network, and deploy our user interface to a public server
    using AWS.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看如何将我们的合约部署到公共以太坊网络，并使用 AWS 将我们的用户界面部署到公共服务器上。
