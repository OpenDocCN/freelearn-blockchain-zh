- en: Introducing Bitcoin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入比特币
- en: Bitcoin is the first application of blockchain technology. In this chapter,
    you will be introduced to Bitcoin technology in detail.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币是区块链技术的第一个应用。在本章中，你将详细介绍比特币技术。
- en: Bitcoin has started a revolution with the introduction of the very first fully
    decentralized digital currency, and the one that has proven to be extremely secure
    and stable from a network and protocol point of view. As a currency bitcoin is
    quite unstable and highly volatile, albeit valuable. We will explain this later
    in the chapter. This has also sparked a great interest in academic and industrial
    research and introduced many new research areas.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币通过引入第一个完全去中心化的数字货币，并且从网络和协议的角度证明了极其安全和稳定，引发了一场革命。作为一种货币，比特币非常不稳定和高度波动，尽管它很有价值。我们将在本章后面解释这一点。这也激发了学术和工业研究的浓厚兴趣，并引入了许多新的研究领域。
- en: Since its introduction in 2008 by Satoshi Nakamoto, Bitcoin has gained massive
    popularity, and it is currently the most successful digital currency in the world
    with billions of dollars invested in it. The current market cap, at the time of
    writing, for this currency is $149, 984, 293, 122\. Its popularity is also evident
    from the high number of users and investors, increasing bitcoin price, everyday
    news related to Bitcoin, and the number of start-ups and companies that are offering
    bitcoin-based online exchanges, and it's now also traded as *Bitcoin Futures*
    on **Chicago Mercantile Exchange** (**CME**).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 自2008年由中本聪引入以来，比特币已经获得了巨大的 popularity，并且目前是世界上最成功的数字货币，有数十亿美元投资于其中。在撰写本文时，该货币的当前市值为$149,
    984, 293, 122。它的流行也从用户和投资者的数量、比特币价格的增长、每天与比特币相关的新闻以及提供基于比特币的在线交易的初创公司和公司的数量等方面表现出来，现在还在
    **芝加哥商品交易所** (**CME**) 上作为 *比特币期货* 进行交易。
- en: Interested readers can read more about *Bitcoin Futures* at [http://www.cmegroup.com/trading/bitcoin-futures.html](http://www.cmegroup.com/trading/bitcoin-futures.html).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有兴趣的读者可以在 [http://www.cmegroup.com/trading/bitcoin-futures.html](http://www.cmegroup.com/trading/bitcoin-futures.html)
    阅读更多关于 *比特币期货* 的信息。
- en: The name of the Bitcoin inventor *Satoshi Nakamoto* is believed to be a pseudonym,
    as the true identity of Bitcoin inventor is unknown. It is built on decades of
    research in the field of cryptography, digital cash, and distributed computing.
    In the following section, a brief history is presented in order to provide the
    background required to understand the foundations behind the invention of Bitcoin.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币发明者 *中本聪* 的名字被认为是一个化名，因为比特币发明者的真实身份是未知的。它建立在几十年来在密码学、数字货币和分布式计算领域的研究基础之上。下面将介绍一个简要的历史，以便了解比特币发明背后的基础。
- en: Digital currencies have always been an active area of research for many decades.
    Early proposals to create digital cash go as far back as the early 1980s. In 1982,
    David Chaum, a computer scientist, and cryptographer proposed a scheme that used
    blind signatures to build untraceable digital currency. This research was published
    in a research paper, *Blind Signatures for Untraceable Payments*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 数字货币一直是许多年来的一个活跃研究领域。早期提议创建数字现金可以追溯到上世纪80年代初。1982年，计算机科学家和密码学家大卫·乔姆提出了一种使用盲签名构建不可追踪数字货币的方案。这项研究发表在一篇名为
    *不可追踪支付的盲签名* 的研究论文中。
- en: Interested readers can read the original research paper which David Chaum describes
    his invention of the cryptographic primitive of blind signatures at [http://www.hit.bme.hu/~buttyan/courses/BMEVIHIM219/2009/Chaum.BlindSigForPayment.1982.PDF](http://www.hit.bme.hu/~buttyan/courses/BMEVIHIM219/2009/Chaum.BlindSigForPayment.1982.PDF).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有兴趣的读者可以阅读大卫·乔姆（David Chaum）在原始研究论文中描述他的盲签名密码学原语发明的原始论文，网址为 [http://www.hit.bme.hu/~buttyan/courses/BMEVIHIM219/2009/Chaum.BlindSigForPayment.1982.PDF](http://www.hit.bme.hu/~buttyan/courses/BMEVIHIM219/2009/Chaum.BlindSigForPayment.1982.PDF)。
- en: In this scheme, a bank would issue digital money by signing a blind and random
    serial number presented to it by the user. The user could then use the digital
    token signed by the bank as currency. The limitation of this scheme was that the
    bank had to keep track of all used serial numbers. This was a central system by
    design and required to be trusted by the users.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方案中，银行通过签署用户提出的一个盲目和随机序列号来发行数字货币。然后，用户可以使用银行签发的数字令牌作为货币。这个方案的局限性在于银行必须跟踪所有已使用的序列号。这是一个中心化的系统，必须得到用户的信任。
- en: Later on, in 1988, David Chaum and others proposed a refined version named e-cash
    that not only used a blinded signature, but also some private identification data
    to craft a message that was then sent to the bank.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，于1988年，大卫·朱姆（David Chaum）等人提出了一种更精致的版本，名为电子现金，该版本不仅使用了盲签名，还使用了一些私有身份数据来制作消息，然后将其发送给银行。
- en: Original research paper for this is available at [http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.26.5759](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.26.5759).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此项原始研究论文可在[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.26.5759](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.26.5759)找到。
- en: This scheme allowed the detection of double spending but did not prevent it.
    If the same token was used at two different locations, then the identity of the
    double spender would be revealed. e-cash could only represent a fixed amount of
    money.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方案可以检测到双重支付，但无法阻止。如果同一令牌在两个不同的位置使用，则双重支付者的身份将被揭示。电子现金只能表示固定金额的货币。
- en: Adam Back, a cryptographer and now CEO of Blockstream, who is involved in blockchain
    development, introduced *hashcash* in 1997\. It was originally proposed to thwart
    email spam. The idea behind hashcash was to solve a computational puzzle that
    was easy to verify but comparatively difficult to compute. The idea was that for
    a single user and a single email, the extra computational effort was negligible,
    but someone sending a large number of spam emails would be discouraged as the
    time and resources required to run the spam campaign would increase substantially.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学家、现任 Blockstream CEO 亚当·贝克（Adam Back）于1997年提出了*hashcash*。最初提出来阻止电子邮件垃圾邮件。
    hashcash 的背后思想是解决一个易于验证但相对难以计算的计算难题。其理念是，对于单个用户和单个电子邮件，额外的计算工作是微不足道的，但是发送大量垃圾邮件的人将受到阻止，因为运行垃圾邮件活动所需的时间和资源会大大增加。
- en: In 1998, B-money was proposed by Wei Dai, a computer engineer who used to work
    for Microsoft, which introduced the idea of using **Proof of Work** (**PoW**)
    to create money. The term *Proof of Work* emerged and got popular later with Bitcoin,
    but in Wei Dai's B-money a scheme of creating money was introduced by providing
    a solution to a previously unsolved computational problem. It was referred in
    the paper as *solution to a previously unsolved computational problem*. This concept
    is similar to PoW, where money is created by broadcasting a solution to a previously
    unsolved computational problem.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 1998年，微软前员工、计算机工程师魏 Dai 提出了 B-money，该方案引入了使用**工作证明**（**PoW**）创建货币的想法。术语*工作证明*后来随着比特币而兴起并变得流行，但在魏
    Dai 的 B-money 中，通过提供对以前未解决的计算问题的解决方案来引入了一种创建货币的方案。该论文中将其称为*先前未解决的计算问题的解决方案*。这个概念类似于
    PoW，其中通过广播以前未解决的计算问题的解决方案来创建货币。
- en: The original paper is available at [http://www.weidai.com/bmoney.txt](http://www.weidai.com/bmoney.txt).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 原始论文可在[http://www.weidai.com/bmoney.txt](http://www.weidai.com/bmoney.txt)找到。
- en: A major weakness in the system was that an adversary with higher computational
    power could generate unsolicited money without allowing the network to adjust
    to an appropriate difficulty level. The system lacked details on the consensus
    mechanism between nodes and some security issues such as Sybil attacks were also
    not addressed. At the same time, Nick Szabo, a computer scientist introduced the
    concept of BitGold, which was also based on the PoW mechanism but had the same
    problems as B-money with the exception that the network difficulty level was adjustable.
    Tomas Sander and Amnon Ta-Shma from the **International Computer Science Institute**
    (**ICSI**), Berkley introduced an e-cash scheme under a research paper named *Auditable,
    Anonymous Electronic Cash* in 1999\. This scheme, for the first time, used Merkle
    trees to represent coins and **Zero-Knowledge Proofs** (**ZKPs**) to prove the
    possession of coins.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 系统中的一个主要弱点是，具有更高计算能力的对手可以生成未经请求的货币，而不允许网络调整到适当的难度级别。该系统缺乏节点之间的共识机制的细节，也没有解决一些安全问题，如
    Sybil 攻击。与此同时，来自**国际计算机科学研究所**（**ICSI**）伯克利的托马斯·桑德尔（Tomas Sander）和阿姆农·塔什马（Amnon
    Ta-Shma）在1999年的一篇名为《可审计的、匿名的电子现金》的研究论文中介绍了一种电子现金方案。该方案首次使用 Merkle 树表示硬币，并使用**零知识证明**（**ZKPs**）证明了硬币的拥有权。
- en: 'The original research paper called *Auditable, Anonymous Electronic Cash* is
    available at: [http://www.cs.tau.ac.il/~amnon/Papers/ST.crypto99.pdf](http://www.cs.tau.ac.il/~amnon/Papers/ST.crypto99.pdf).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最初的研究论文名为*可审计、匿名电子现金*，可在此处获取：[http://www.cs.tau.ac.il/~amnon/Papers/ST.crypto99.pdf](http://www.cs.tau.ac.il/~amnon/Papers/ST.crypto99.pdf)。
- en: In this scheme, a central bank was required that kept a record of all used serial
    numbers. This scheme allowed users to be fully anonymous. This was a theoretical
    design which was not practical to implement due to inefficient proof mechanisms.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方案中，需要一个中央银行来记录所有已使用的序列号。该方案允许用户完全匿名。这是一个理论设计，由于证明机制的低效而不适合实施。
- en: '**Reusable Proof of Work** (**RPoW**) was introduced in 2004 by Hal Finney,
    a computer scientist, developer and first person to receive Bitcoin from Satoshi
    Nakamoto. It used the hashcash scheme by Adam Back as a proof of computational
    resources spent to create the money. This was also a central system that kept
    a central database to keep track of all used PoW tokens. This was an online system
    that used remote attestation made possible by a trusted computing platform (TPM
    hardware).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**可重用工作证明**（**RPoW**）于2004年由计算机科学家、开发者和第一个接收比特币的人Hal Finney引入。它使用了Adam Back的哈希现金方案作为创建货币所花费的计算资源的证明。这也是一个保持中央数据库以跟踪所有已使用的PoW令牌的中央系统。这是一个在线系统，利用了由可信计算平台（TPM硬件）实现的远程认证。'
- en: All the previously mentioned schemes are intelligently designed but were weak
    from one aspect or another. Specifically, all these schemes rely on a central
    server that is required to be trusted by the users.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所有先前提到的方案都设计得很聪明，但在某个方面都存在弱点。具体来说，所有这些方案都依赖于一个中央服务器，用户需要信任该服务器。
- en: Bitcoin
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比特币
- en: 'In 2008, Bitcoin was introduced through a paper called, *Bitcoin: A Peer-to-Peer
    Electronic Cash System*.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 2008年，比特币通过一篇名为*比特币：一个点对点电子现金系统*的论文被介绍。
- en: This paper is available at [https://bitcoin.org/bitcoin.pdf](https://bitcoin.org/bitcoin.pdf).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本文可在[https://bitcoin.org/bitcoin.pdf](https://bitcoin.org/bitcoin.pdf)获取。
- en: It was written by Satoshi Nakamoto, which is believed to be a pseudonym, as
    the true identity of Bitcoin inventor is unknown and subject of much speculation.
    The first key idea introduced in the paper was of a purely peer-to-peer electronic
    cash that does need an intermediary bank to transfer payments between peers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章由被认为是一个化名的Satoshi Nakamoto撰写，因为比特币发明者的真实身份是未知的，引起了许多猜测。论文中引入的第一个关键思想是一种纯粹的点对点电子现金，不需要中介银行来在对等方之间转移付款。
- en: Bitcoin is built on decades of cryptographic research such as the research in
    Merkle trees, hash functions, public key cryptography, and digital signatures.
    Moreover, ideas such as BitGold, B-money, hashcash, and cryptographic time stamping
    provided the foundations for bitcoin invention. All these technologies are cleverly
    combined in Bitcoin to create the world's first decentralized currency. The key
    issue that has been addressed in Bitcoin is an elegant solution to the Byzantine
    Generals' Problem along with a practical solution of the double-spend problem.
    Recall, that both of these concepts are explained in [Chapter 1](76e4e401-30ba-44f9-832f-333ba6c12cbc.xhtml),
    *Blockchain 101*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '比特币建立在数十年的密码学研究基础上，如Merkle树、哈希函数、公钥密码学和数字签名的研究。此外，像BitGold、B-money、哈希现金和密码时间戳等思想为比特币的发明提供了基础。所有这些技术都巧妙地结合在一起，创造了世界上第一个去中心化货币。比特币解决的关键问题是拜占庭将军问题的优雅解决方案以及双重支付问题的实际解决方案。回想一下，这两个概念都在[第1章](76e4e401-30ba-44f9-832f-333ba6c12cbc.xhtml)，*区块链101*中解释过。 '
- en: 'The value of bitcoin has increased significantly since 2011, and then since
    March 2017 as shown in the following graph:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 自2011年以来，比特币的价值显著增长，然后自2017年3月以来如下图所示：
- en: '![](img/2a5612bc-8de7-4d93-ab08-adde343421ae.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a5612bc-8de7-4d93-ab08-adde343421ae.png)'
- en: Bitcoin price since March 2017
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 自2017年3月以来的比特币价格
- en: The regulation of Bitcoin is a controversial subject and as much as it is a
    libertarian's dream, law enforcement agencies, governments and banks are proposing
    various regulations to control it, such as BitLicense issued by New York's state
    department of financial services. This is a license issued to businesses that
    perform activities related to virtual currencies. Due to high cost and very strict
    regulatory requirements pertaining to BitLicense many companies have withdrawn
    their services from New York.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对比特币的监管是一个有争议的话题，正如它是自由主义者的梦想一样，执法机构、政府和银行正在提出各种规定来控制它，例如纽约州金融服务部门颁发的BitLicense。这是一个发放给从事虚拟货币相关活动的企业的许可证。由于BitLicense的高成本和非常严格的监管要求，许多公司已经退出了在纽约的服务。
- en: For people with a libertarian ideology, Bitcoin is a platform which can be used
    instead of banks for business but they think that because of regulations, Bitcoin
    may become another institution which is not trusted. The original idea behind
    Bitcoin was to develop an e-cash system which requires no trusted third party
    and users can be anonymous. If regulations require **Know Your Customer** (**KYC**)
    checks and detailed information about business transactions to facilitate regulatory
    process then it might be too much information to share and as a result Bitcoin
    may not be attractive anymore to some.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有自由主义思想的人来说，比特币是一个可用于业务的代替银行的平台，但他们认为由于监管，比特币可能会成为另一个不受信任的机构。比特币的原始理念是开发一个无需信任第三方且用户可以匿名的电子现金系统。如果监管要求**了解您的客户**（**KYC**）检查和详细的业务交易信息以促进监管流程，那么可能需要共享的信息过多，因此比特币对一些人来说可能不再具吸引力。
- en: There are now many initiatives being taken to regulate Bitcoin, cryptocurrencies
    and related activities such as ICOs. **Securities and Exchange Commission** (**SEC**)
    has recently announced that digital tokens, coins and relevant activities such
    as **Initial Coin Offerings** (**ICOs**) fall under the category of securities.
    This means that any digital currency trading platforms will need to be registered
    with SEC and will have all relevant securities laws and regulations applicable
    to them. This impacted the Bitcoin price directly and it fell almost 10% on the
    day this announcement was made.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 目前已经采取了许多措施来监管比特币、加密货币和相关活动，如ICO。**证券交易委员会**（**SEC**）最近宣布数字代币、货币和相关活动（如**首次代币发行**（**ICOs**））属于证券范畴。这意味着任何数字货币交易平台都需要在SEC进行注册，并适用于所有相关证券法律和法规。这直接影响了比特币价格，在这一公告发布当天下跌了近10%。
- en: Interested readers can read more about the regulation of Bitcoin and other relevant
    activities at [https://www.coindesk.com/category/regulation/](https://www.coindesk.com/category/regulation/).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的读者可以在[https://www.coindesk.com/category/regulation/](https://www.coindesk.com/category/regulation/)了解更多关于比特币监管和其他相关活动的信息。
- en: The growth of Bitcoin is also due to so-called **network effect**. Also called
    demand-side economies of scale, it is a concept that basically means more users
    who use the network, the more valuable it becomes. Over time, an exponential increase
    has been seen in the Bitcoin network growth. This increase in the number of users
    is largely financial gain driven. Also, the scarcity of Bitcoin and built-in inflation
    control mechanism gives it value as there are only 21 million bitcoins that can
    ever be mined and in addition the miner reward halves every four years. Even though
    the price of bitcoin fluctuates a lot, it has increased significantly over the
    last few years. Currently (at the time of writing this), bitcoin price is 9,250
    U.S Dollars (USD).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币增长也是由所谓的**网络效应**引起的。也称为需求端规模经济，这个概念基本上意味着使用网络的用户越多，它就越有价值。随着时间的推移，比特币网络增长呈指数增长。用户数量的增加主要是出于经济上的驱动。此外，比特币的稀缺性和内置的通货膨胀控制机制赋予了它价值，因为只能挖掘出2100万个比特币，而且矿工奖励每四年减半。尽管比特币价格波动很大，但在过去几年里它增长显著。当前（撰写本文时），比特币价格为9250美元（USD）。
- en: Bitcoin definition
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比特币定义
- en: Bitcoin can be defined in various ways; it's a protocol, a digital currency,
    and a platform. It is a combination of peer-to-peer network, protocols, software
    that facilitate the creation and usage of the digital currency named bitcoin.
    Nodes in this peer-to-peer network talk to each other using the Bitcoin protocol.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币可以以各种方式定义；它是一种协议、一种数字货币和一个平台。它是一种点对点网络、协议、软件的组合，促进了被称为比特币的数字货币的创建和使用。这个点对点网络中的节点使用比特币协议相互交流。
- en: Note that Bitcoin with a capital B is used to refer to the Bitcoin protocol,
    whereas bitcoin with a lowercase b is used to refer to bitcoin, the currency.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，用大写字母 B 的比特币用来指代比特币协议，而小写字母 b 的 bitcoin 用来指代比特币，即货币。
- en: Decentralization of currency was made possible for the first time with the invention
    of bitcoin. Moreover, the double spending problem was solved in an elegant and
    ingenious way in bitcoin. Double spending problem arises when, for example, a
    user sends coins to two different users at the same time and they are verified
    independently as valid transactions. The double spending problem is resolved in
    Bitcoin by using a distributed ledger (blockchain) where every transaction is
    recorded permanently and by implementing transaction validation and confirmation
    mechanism. This process will be explained later in the chapter where we introduce
    the concept of *mining*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用比特币发明了货币的分散化，同时以一种巧妙和巧妙的方式解决了双重支付的问题。双重支付问题是指当用户同时向两个不同的用户发送硬币并且这些硬币分别经过独立验证为有效交易时所出现的问题。双重支付问题在比特币中通过使用分布式总账簿（区块链）解决，其中每笔交易都被永久记录，并且通过实施交易验证和确认机制来解决。这个过程将在本章的后面解释，我们将介绍*挖掘*的概念。
- en: Bitcoin – a bird's-eye view
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比特币- 俯瞰
- en: In this section, we will see how the Bitcoin network looks from a user's point
    of view. How a transaction is made, how it propagates from a user to the network,
    how transactions are verified, and finally accumulated in blocks. We will look
    at what are the various actors and components of the Bitcoin network. Finally,
    some discussion on how all actors and components interact with each other to form
    the Bitcoin network will also be provided.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们将看到比特币网络从用户的角度是什么样子。如何进行交易，交易如何从用户传播到网络，如何验证交易，并最终积累在区块中。我们将看看比特币网络的各种角色和组件。最后，我们还会提供一些关于所有角色和组件如何相互作用形成比特币网络的讨论。
- en: First, let us see that what the main components of a Bitcoin network are. Bitcoin
    is composed of the elements listed here. We will further expand on these elements
    as we progress through the chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下比特币网络的主要组成部分。比特币由以下列出的元素构成。随着我们在本章的进展，我们将进一步展开这些元素。
- en: Digital keys
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字钥匙
- en: Addresses
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地址
- en: Transactions
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易
- en: Blockchain
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块链
- en: Miners
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矿工
- en: The Bitcoin network
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比特币网络
- en: Wallets (client software)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 钱包（客户端软件）
- en: Now, we will see that how a user will use the Bitcoin network. The following
    example will help you understand that how the Bitcoin network looks like from
    an end user's perspective. We will see that what actors and components are involved
    in a Bitcoin transaction. One of the most common transactions is sending money
    to someone else, therefore in the following example we will see that how a payment
    can be sent from one user to another on the Bitcoin network.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到用户如何使用比特币网络。以下例子将帮助您了解从最终用户角度看比特币网络的情况。我们将看到哪些角色和组件参与了比特币交易。最常见的交易之一是向其他人发送资金，因此在以下例子中，我们将看到如何在比特币网络上从一个用户向另一个用户发送支付。
- en: Sending a payment to someone
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向某人发送付款
- en: This example will demonstrate that how money can be sent using Bitcoin network
    from one user to another. There are several steps that are involved in this process.
    As an example, we are using Blockchain wallet for mobile devices.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子将演示如何使用比特币网络从一个用户发送资金给另一个用户。这个过程涉及到一些步骤。例如，我们使用区块链钱包来进行移动设备的演示。
- en: 'The steps are described here:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: 'First, either the payment is requested from a user by sending his Bitcoin address
    to the sender via email or some other means such as SMS, chat applications or
    in fact any appropriate communication mechanism. The sender can also initiate
    a transfer to send money to another user. In both cases, the address of beneficiary
    is required. As an example, the Blockchain wallet is shown here where a payment
    request is created:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，用户可以通过向发送者发送他的比特币地址通过电子邮件或其他手段，例如短信、聊天应用程序等，甚至任何合适的通信机制来请求付款。发送者也可以发起转账，将资金发送给另一个用户。在这两种情况下，都需要受益者的地址。例如，显示了区块链钱包创建支付请求的情况：
- en: '![](img/11c51ec6-db11-4a5c-a489-09b7f7a799de.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/11c51ec6-db11-4a5c-a489-09b7f7a799de.png)'
- en: bitcoin payment request (using Blockchain wallet)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币支付请求（使用区块链钱包）
- en: The sender either enters the receiver's address or scans the QR code that has
    the Bitcoin address, amount and optional description encoded in it. The wallet
    application recognizes this QR code and decodes it into something like `Please
    send <Amount> BTC to the Bitcoin address <receiver's Bitcoin address>`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发件人可以输入收件人的地址，或者扫描具有比特币地址、金额和可选描述编码的QR码。钱包应用程序识别此QR码并将其解码为类似于 `请发送 <金额> BTC
    到比特币地址 <接收者的比特币地址>` 的内容。
- en: 'This will look like as shown here with values: `Please send 0.00033324 BTC
    to the Bitcoin address 1JzouJCVmMQBmTcd8K4Y5BP36gEFNn1ZJ3`.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将如下所示，其中包括数值：`请将 0.00033324 BTC 发送至比特币地址 1JzouJCVmMQBmTcd8K4Y5BP36gEFNn1ZJ3`。
- en: This is also shown in the screenshot presented here:![](img/e5530d02-2720-4348-a38b-6a20c7de217a.png)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这也显示在这里呈现的截图中：![](img/e5530d02-2720-4348-a38b-6a20c7de217a.png)
- en: Bitcoin payment QR code
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币支付二维码
- en: The QR code shown in the preceding screenshot is decoded to `bitcoin://1JzouJCVmMQBmTcd8K4Y5BP36gEFNn1ZJ3?amount=0.00033324`
    which can be opened as a URL in Bitcoin wallet.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述截图中显示的QR码被解码为 `bitcoin://1JzouJCVmMQBmTcd8K4Y5BP36gEFNn1ZJ3?amount=0.00033324`，可以作为URL在比特币钱包中打开。
- en: 'In the wallet application of the sender, this transaction is constructed by
    following some rules and broadcasted to the Bitcoin network. This transaction
    is digitally signed using the private key of the sender before broadcasting it.
    How the transaction is created, digitally signed, broadcasted, validated and added
    to the block will become clear in the following sections. From a user''s point
    of view, once the QR code is decoded the transaction will appear similar to what
    is shown in the following screenshot:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发送方的钱包应用程序中，此交易是按照一些规则构建并广播到比特币网络中的。在广播之前，此交易使用发送方的私钥进行数字签名。交易是如何创建、数字签名、广播、验证和添加到区块中的将在后续章节中清晰地描述。从用户的角度来看，一旦QR码被解码，交易将类似于以下截图所示：
- en: '![](img/438261eb-052c-4b51-bd1f-856d3ba4e626.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/438261eb-052c-4b51-bd1f-856d3ba4e626.png)'
- en: Send BTC using Blockchain wallet
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用区块链钱包发送 BTC
- en: Note that in the preceding screenshot there are a number of fields such as From,
    To, BTC, and Fee. While other fields are self-explanatory, it's worth noting that
    Fee is calculated based on the size of the transaction and a fee rate is a value
    that depends on the volume of the transaction in the network. This is represented
    in Satoshis/byte. Fee in Bitcoin network ensures that your transaction will be
    included by miners in the block.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在前述截图中有许多字段，如发件人、收件人、BTC 和费用。虽然其他字段是不言自明的，但值得注意的是，费用是根据交易的大小计算的，费率是一个取决于网络中交易量的值。这表示为Satoshis/byte。比特币网络中的费用确保你的交易将被矿工包含在区块中。
- en: Recently the Bitcoin fees were so high that even for smaller transactions a
    high amount of fee was charged. This was due to the fact that miners are free
    to choose which transactions they pick to verify and add in a block, and they
    select the ones with higher fees. The high number of users creating thousands
    of transactions also played a role in causing this situation of high fees because
    transactions were competing with each other to be picked up first and miners picked
    up the ones with highest fees. This fee is also usually estimated and calculated
    by the Bitcoin wallet software automatically before sending the transactions.
    The higher the transaction fee the more chances are that your transaction will
    be picked up at priority and included in the block. This task is performed by
    the miners. Mining and miners is a concept that we will look at a bit later in
    this chapter in the context of Bitcoin mining.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 近期比特币的手续费非常高，以至于即使对于较小的交易也会收取高额的费用。这是因为矿工可以自由选择他们要验证和添加到区块中的交易，他们选择具有较高手续费的交易。大量用户创建成千上万的交易也导致了这种高手续费的情况，因为交易在竞争中争先被挑选出来，而矿工选择了手续费最高的交易。这笔费用通常也是在发送交易之前由比特币钱包软件自动估算和计算的。交易手续费越高，你的交易被优先挑选并包含在区块中的机会就越大。这个任务由矿工执行。挖矿和矿工是我们在本章稍后会在比特币挖矿的背景下详细了解的概念。
- en: 'Once the transaction is sent it will appear as shown here in the Blockchain
    wallet software:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦交易发送，它将显示在区块链钱包软件中，如下所示：
- en: '![](img/aea3b7bf-756e-4ef9-a3bf-a9ed29c280da.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aea3b7bf-756e-4ef9-a3bf-a9ed29c280da.png)'
- en: Transaction sent
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 交易已发送
- en: At this stage, the transaction has been constructed, signed and sent out to
    the Bitcoin network. This transaction will be picked up by miners to be verified
    and included in the block. Also note that in the preceding screenshot, confirmation
    is pending for this transaction. These confirmations will start to appear as soon
    as the transaction is verified, included in the block, and mined. Also, the appropriate
    fee will be deducted from the original value to be transferred and will be paid
    to the miner who has included it in the block for mining.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此阶段，交易已构建、签名并发送到比特币网络。此交易将被矿工选中进行验证并包含在区块中。另请注意，在前面的截图中，此交易正在等待确认。一旦交易被验证、包含在区块中并被挖掘，确认就会开始出现。此外，将从要转移的原始值中扣除适当的费用，并支付给将其包含在挖矿区块中的矿工。
- en: This flow is shown in the following diagram, where a payment of 0.001267 BTC
    (approximately 11 USD) is originated from the sender's address and been paid to
    receiver's address (starting with 1Jz). The fee of 0.00010622 (approximately 95
    cents) is also deducted from the transaction as mining fee.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此流程显示在以下图表中，其中从发送方地址发起支付 0.001267 BTC（约 11 美元）并支付给接收方地址（以 1Jz 开头）。手续费为 0.00010622（约
    95 美分），也从交易中扣除作为挖矿费用。
- en: '![](img/ed679ed4-d333-4863-ab11-6c88184c034f.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ed679ed4-d333-4863-ab11-6c88184c034f.png)'
- en: Transaction flow visualization (Blockchain.info)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 交易流程可视化（Blockchain.info）
- en: The preceding screenshot visually shows how the transaction flowed on the network
    from origin (sender) to receivers on the right-hand side.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图直观地展示了交易是如何从原始（发送方）流向右侧接收方的网络中的。
- en: 'A summary view of various attributes of the transaction is shown here:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 显示了交易各种属性的摘要视图：
- en: '![](img/3d105026-f7ab-4118-94c9-77a7ca263eb8.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3d105026-f7ab-4118-94c9-77a7ca263eb8.png)'
- en: Snapshot of the transaction taken from Blockchain.info
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Blockchain.info 的交易快照
- en: 'Looking at the preceding screenshot there are a number of fields that contain
    various values. Important fields are listed here with their purpose and explanation:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 查看前面的截图，有许多包含各种值的字段。以下列出了重要字段及其目的和说明：
- en: 'Size: This is the size of the transaction in bytes.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小：这是交易的字节大小。
- en: 'Weight: This is the new metric given for block and transaction size since the
    introduction of **Segregated Witness** (**SegWit**) version of Bitcoin.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权重：这是自**比特币**的**隔离见证**（**SegWit**）版本引入以来用于区块和交易大小的新度量单位。
- en: 'Received Time: This is the time when the transaction is received.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收时间：这是收到交易的时间。
- en: 'Included In Blocks: This shows the block number on the blockchain in which
    the transaction is included.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含在区块中：这显示了区块链上包含该交易的区块编号。
- en: 'Confirmations: This is the number of confirmations by miners for this transaction.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认数：这是矿工对此交易的确认次数。
- en: 'Total Input: This is the number of total inputs in the transaction.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总输入：这是交易中的总输入数量。
- en: 'Total Output: This is the number of total outputs in the transaction.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总输出：这是交易中的总输出数量。
- en: 'Fees: This is the total fees charged.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 费用：这是收取的总费用。
- en: Fee per byte: This field represents the total fee divided by the number of bytes
    in a transaction. For example 10 Satoshis per byte.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每字节费用：此字段表示总费用除以交易中的字节数。例如，每字节 10 Satoshis。
- en: Fee per weight unit: For legacy transaction it is calculated using *total number
    of bytes * 4*. For SegWit transactions it is calculated by combining SegWit marker,
    flag, and witness field as one weight unit and each byte of other fields as four
    weight units.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每权重单位费用：对于传统交易，它是通过*总字节数 * 4*计算的。对于隔离见证交易，它是通过将隔离见证标记、标志和见证字段组合为一个权重单位，以及将其他字段的每个字节视为四个权重单位来计算的。
- en: Transaction ID of this transaction on the Bitcoin network is `d28ca5a59b2239864eac1c96d3fd1c23b747f0ded8f5af0161bae8a616b56a1d`
    and can be further explored using the [https://blockchain.info/tx/d28ca5a59b2239864eac1c96d3fd1c23b747f0ded8f5af0161bae8a616b56a1d](https://blockchain.info/tx/d28ca5a59b2239864eac1c96d3fd1c23b747f0ded8f5af0161bae8a616b56a1d)
    link via services provided by [https://blockchain.info/](https://blockchain.info/).
    This transaction ID is available in the wallet software after transaction is sent
    to the network. From there it can be further explored using one of many Bitcoin
    blockchain explorers available online. We are using [https://blockchain.info/](https://blockchain.info/)
    as an example.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此交易在比特币网络上的交易ID为`d28ca5a59b2239864eac1c96d3fd1c23b747f0ded8f5af0161bae8a616b56a1d`，可以通过[https://blockchain.info/tx/d28ca5a59b2239864eac1c96d3fd1c23b747f0ded8f5af0161bae8a616b56a1d](https://blockchain.info/tx/d28ca5a59b2239864eac1c96d3fd1c23b747f0ded8f5af0161bae8a616b56a1d)链接进一步探索，该链接通过[https://blockchain.info/](https://blockchain.info/)提供的服务提供。
    此交易ID在交易发送到网络后在钱包软件中可用。 从那里可以通过众多在线可用的比特币区块链浏览器之一进一步探索。 我们以[https://blockchain.info/](https://blockchain.info/)作为示例。
- en: Bitcoin transactions are serialized for transmission over the network and encoded
    in hexadecimal format. As an example, the preceding transaction, is also shown
    here. We will see later in the *Transactions* section that how this hexadecimal
    encoded transaction can be decoded and what fields make up a transaction.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币交易被序列化以在网络上传输，并以十六进制格式编码。 例如，前述交易也在这里显示。 我们将在*交易*部分中看到，如何解码此十六进制编码的交易以及交易由哪些字段组成。
- en: '[PRE0]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In summary, the payment transaction in the Bitcoin network can be divided into
    the following steps:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在比特币网络中的支付交易可以分为以下步骤：
- en: Transaction starts with a sender signing the transaction with their private
    key
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交易始于发件人用其私钥签署交易
- en: Transaction is serialized so that it can be transmitted over the network
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交易被序列化以便在网络上传输
- en: Transaction is broadcasted to the network
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交易被广播到网络上
- en: Miners listening for the transactions picks up the transaction
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听交易的矿工拾取了该交易
- en: Transaction are verified for their validity by the miners
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 矿工验证交易的有效性
- en: Transaction are added to the candidate/proposed block for mining
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交易被添加到候选/建议的挖掘块中
- en: Once mined, the result is broadcasted to all nodes on the Bitcoin network
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 挖掘完成后，结果将广播到比特币网络上的所有节点
- en: Mining, transaction and other relevant concepts will become clearer in the following
    sections in the chapter. Now in the next section various denominations of bitcoin
    are presented.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后续部分中，将更清楚地了解挖掘、交易和其他相关概念。 现在，在下一节中，将介绍比特币的各种面额。
- en: 'The bitcoin currency, being digital has various denominations which are shown
    in the following table. A sender or receiver can request any amount. The smallest
    bitcoin denomination is the Satoshi. The bitcoin currency units are described
    as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数字货币，比特币具有各种面额，下表列出了这些面额。 发件人或收件人可以请求任何金额。 最小的比特币面额是 Satoshi。 比特币货币单位描述如下：
- en: '![](img/06af44fa-bee0-48a7-bfa3-4c9f2e0c0c81.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06af44fa-bee0-48a7-bfa3-4c9f2e0c0c81.png)'
- en: bitcoin denominations
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币面额
- en: Now you will be introduced to the building blocks of Bitcoin one by one. First,
    we will look at the keys and addresses which are used to represent the ownership
    and transfer of value on the Bitcoin network.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将逐一介绍比特币的构建块。 首先，我们将看看用于表示比特币网络上的所有权和价值转移的密钥和地址。
- en: Digital keys and addresses
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字密钥和地址
- en: On the Bitcoin network, possession of bitcoins and transfer of value via transactions
    is reliant upon private keys, public keys, and addresses. In [Chapter 6](c49f1747-2096-4ab6-a1e1-334e092ef2be.xhtml),
    *Public Key Cryptography*, we have already covered these concepts, and here we
    will see that how private and public keys are used in the Bitcoin network.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在比特币网络上，比特币的拥有权和通过交易转移的价值取决于私钥、公钥和地址。 在[第6章](c49f1747-2096-4ab6-a1e1-334e092ef2be.xhtml)中，*公钥加密*，我们已经涵盖了这些概念，这里我们将看到私钥和公钥如何在比特币网络中使用。
- en: '**Elliptic Curve Cryptography** (**ECC**) is used to generate public and private
    key pairs in the Bitcoin network.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**椭圆曲线加密**（**ECC**）用于在比特币网络中生成公钥和私钥对。'
- en: Private keys in Bitcoin
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比特币中的私钥
- en: Private keys are required to be kept safe and normally resides only on the owner's
    side. Private keys are used to digitally sign the transactions proving the ownership
    of the bitcoins.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 私钥需要保管安全，通常只存储在所有者一侧。私钥用于数字签名交易，证明比特币的所有权。
- en: Private keys are fundamentally 256-bit numbers randomly chosen in the range
    specified by the `secp256k1` ECDSA curve recommendation. Any randomly chosen 256-bit
    number from `0x1` to `0xFFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFE BAAE DCE6 AF48
    A03B BFD2 5E8C D036 4140` is a valid private key.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 私钥基本上是在`secp256k1` ECDSA曲线建议的范围内随机选择的256位数字。任何从`0x1`到`0xFFFF FFFF FFFF FFFF
    FFFF FFFF FFFF FFFE BAAE DCE6 AF48 A03B BFD2 5E8C D036 4140`中随机选择的256位数字都是有效的私钥。
- en: Private keys are usually encoded using **Wallet Import Format** (**WIF**) in
    order to make them easier to copy and use. It is a way to represent the full size
    private key in a different format. WIF can be converted into a private key and
    vice versa. The steps are described here.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 私钥通常使用**钱包导入格式**（**WIF**）进行编码，以便更易于复制和使用。这是一种以不同格式表示完整大小私钥的方式。WIF可以转换为私钥，反之亦然。步骤如下描述。
- en: 'The following is an example of a private key:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是私钥的示例：
- en: '`A3ED7EC8A03667180D01FB4251A546C2B9F2FE33507C68B7D9D4E1FA5714195201`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`A3ED7EC8A03667180D01FB4251A546C2B9F2FE33507C68B7D9D4E1FA5714195201`'
- en: 'When it is converted into WIF format it looks like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当转换为WIF格式时，它看起来像这样：
- en: '`L2iN7umV7kbr6LuCmgM27rBnptGbDVc8g4ZBm6EbgTPQXnj1RCZP`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`L2iN7umV7kbr6LuCmgM27rBnptGbDVc8g4ZBm6EbgTPQXnj1RCZP`'
- en: 'Interested readers can do some experimentation using the tool available at
    the following website:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的读者可以使用以下网站提供的工具进行一些实验：
- en: '[http://gobittest.appspot.com/PrivateKey](http://gobittest.appspot.com/PrivateKey)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://gobittest.appspot.com/PrivateKey](http://gobittest.appspot.com/PrivateKey)'
- en: Also, **mini private key format** is sometimes used to create the private key
    with a maximum of up to 30 characters in order to allow storage where physical
    space is limited, for example, etching on physical coins or encoding in damage-resistant
    QR codes. The QR code becomes more damage resistant because more dots can be used
    for error correction and less for encoding the private key. The private key encoded
    using mini private key format is also sometimes called **minikey**. The first
    character of mini private key is always uppercase letter `S`. A mini private key
    can be converted into a normal size private key but an existing normal size private
    key cannot be converted into a mini private key. This format was used in Casascius
    physical bitcoins.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，有时会使用**迷你私钥格式**创建最多30个字符的私钥，以允许在空间有限的情况下存储，例如，刻在实体硬币上或者编码在耐损伤的QR码中。QR码变得更加耐损伤，因为可以用更多的点来进行错误校正，而用更少的点来进行私钥的编码。使用迷你私钥格式编码的私钥有时也称为**迷你密钥**。迷你私钥的第一个字符始终是大写字母`S`。可以将迷你私钥转换为常规大小私钥，但现有的常规大小私钥无法转换为迷你私钥。这种格式曾用于Casascius实体比特币。
- en: Interested readers can find more information here [https://en.bitcoin.it/wiki/Casascius_physical_bitcoins](https://en.bitcoin.it/wiki/Casascius_physical_bitcoins).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的读者可以在这里找到更多信息[https://en.bitcoin.it/wiki/Casascius_physical_bitcoins](https://en.bitcoin.it/wiki/Casascius_physical_bitcoins)。
- en: '![](img/3f2297bf-6ddc-4122-b060-c5ba86acccc3.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f2297bf-6ddc-4122-b060-c5ba86acccc3.png)'
- en: A Casascius physical bitcoin's security hologram paper with minikey and QR code
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Casascius实体比特币的安全全息纸带有迷你密钥和QR码
- en: The Bitcoin core client also allows the encryption of the wallet that contains
    the private keys.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币核心客户端还允许对包含私钥的钱包进行加密。
- en: Public keys in Bitcoin
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比特币中的公钥
- en: Public keys exist on the blockchain and all network participants can see it.
    Public keys are derived from private keys due to their special mathematical relationship
    with the private keys. Once a transaction signed with the private key is broadcasted
    on the Bitcoin network, public keys are used by the nodes to verify that the transaction
    has indeed been signed with the corresponding private key. This process of verification
    proves the ownership of the bitcoin.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥存在于区块链上，所有网络参与者都可以看到。公钥是从私钥派生的，因为它们与私钥有着特殊的数学关系。一旦使用私钥签名的交易被广播到比特币网络上，节点就会使用公钥来验证该交易确实已经使用相应的私钥签名。这个验证过程证明了比特币的所有权。
- en: Bitcoin uses ECC based on the `secp256k1` standard. More specifically it makes
    use of ECDSA to ensure that funds remain secure and can only be spent by the legitimate
    owner. If you need to refresh the relevant cryptography concepts, you can refer
    to Chapter 6, *Public Key Cryptography* where ECC was explained. A public key
    is 256-bits in length. Public keys can be represented in an uncompressed or compressed
    format. Public keys are fundamentally *x* and *y* coordinates on an elliptic curve.
    In an uncompressed format public keys are presented with a prefix of `0x4` in
    a hexadecimal format. The *x* and *y* coordinates are both 32-bit in length. In
    total, the compressed public key is 33-bytes long as compared to 65-bytes in the
    uncompressed format. The compressed version of public keys includes only the *x*
    part, since the *y* part can be derived from it.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币使用基于`secp256k1`标准的ECC。更具体地说，它利用ECDSA确保资金保持安全，并且只能由合法所有者花费。如果您需要刷新相关的密码学概念，可以参考第6章，*公钥密码学*，其中解释了ECC。公钥长度为256位。公钥可以以未压缩或压缩格式表示。公钥基本上是椭圆曲线上的*x*和*y*坐标。在未压缩格式中，公钥以16进制格式的前缀`0x4`表示。*x*和*y*坐标都是32位长。压缩公钥总共为33字节，而未压缩格式为65字节。压缩版本的公钥仅包含*x*部分，因为*y*部分可以由它派生出来。
- en: The reason why the compressed version of public keys works is that if the ECC
    graph is visualized, it reveals that the *y* coordinate can be either below the
    *x* axis or above the *x* axis and as the curve is symmetric, only the location
    in the prime field is required to be stored. If *y* is even then it is above the
    *x* axis and if it is odd then it is below the *x* axis. This means that instead
    of storing both *x* and *y* as the public key only *x* can be stored with the
    information that if *y* is even or odd.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 压缩公钥版本有效的原因在于，如果将ECC图形可视化，会发现*y*坐标可以在*x*轴下方或*x*轴上方，由于曲线是对称的，因此只需要存储在素数域中的位置。如果*y*是偶数，则在*x*轴上方，如果*y*是奇数，则在*x*轴下方。这意味着可以仅存储*x*而不是存储*x*和*y*作为公钥，只需存储*y*是偶数还是奇数的信息。
- en: Initially, Bitcoin client used uncompressed keys, but starting from Bitcoin
    core client 0.6, compressed keys are used as standard. This resulted in almost
    50% reduction of space used to store public keys in the blockchain.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，比特币客户端使用未压缩密钥，但从比特币核心客户端0.6开始，压缩密钥被用作标准。这导致在区块链中用于存储公钥的空间几乎减少了50%。
- en: 'Keys are identified by various prefixes, described as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 键由不同的前缀标识，描述如下：
- en: Uncompressed public keys use `0x04` as the prefix
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未压缩公钥使用`0x04`作为前缀
- en: Compressed public key starts with `0x03` if the *y* 32-bit part of the public
    key is odd
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩公钥以`0x03`开头，如果公钥的*y* 32位部分是奇数
- en: Compressed public key starts with `0x02` if the *y* 32-bit part of the public
    key is even
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩公钥以`0x02`开头，如果公钥的*y* 32位部分是偶数
- en: Addresses in Bitcoin
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比特币地址
- en: A bitcoin address is created by taking the corresponding public key of a private
    key and hashing it twice, first with the SHA-256 algorithm and then with RIPEMD-160\.
    The resultant 160-bit hash is then prefixed with a version number and finally
    encoded with a Base58Check encoding scheme. The bitcoin addresses are 26-35 characters
    long and begin with digit `1` or `3`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币地址是通过取私钥的相应公钥并对其进行两次哈希运算创建的，首先使用SHA-256算法，然后使用RIPEMD-160。160位哈希结果然后加上版本号前缀，最后使用Base58Check编码方案进行编码。比特币地址长度为26-35个字符，以数字`1`或`3`开头。
- en: 'A typical bitcoin address looks like a string shown here:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的比特币地址看起来像是这样的字符串：
- en: '[PRE1]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is also commonly encoded in a QR code for easy distribution. The QR code
    of the preceding bitcoin address is shown in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这也常常被编码为QR码以便于分发。上述比特币地址的QR码显示在以下屏幕截图中：
- en: '![](img/76815712-68f0-46df-b902-5e8c0fe68563.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76815712-68f0-46df-b902-5e8c0fe68563.png)'
- en: QR code of a bitcoin address 1ANAguGG8bikEv2fYsTBnRUmx7QUcK58wt
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币地址1ANAguGG8bikEv2fYsTBnRUmx7QUcK58wt的QR码
- en: Currently, there are two types of addresses, the commonly used P2PKH and another
    P2SH type, starting with number `1` and `3`, respectively. In the early days,
    Bitcoin used direct Pay to Pubkey, which is now superseded by P2PKH. These types
    will be explained later in the chapter. However, direct Pay to Pubkey is still
    used in Bitcoin for coinbase addresses. Addresses should not be used more than
    once; otherwise, privacy and security issues can arise. Avoiding address reuse
    circumvents anonymity issues to an extent, Bitcoin has some other security issues
    as well, such as transaction malleability, Sybil attacks, race attacks and selfish
    mining which require different approaches to resolve.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有两种类型的地址，常用的 P2PKH 和另一种 P2SH 类型，分别以数字`1`和`3`开头。在早期，比特币使用直接的支付到公钥，现在已经被 P2PKH
    取代。这些类型将在本章后面解释。然而，比特币仍然在 coinbase 地址中使用直接的支付到公钥。地址不应该被多次使用；否则，可能会出现隐私和安全问题。避免地址重用可以在一定程度上规避匿名性问题，比特币还有一些其他的安全问题，如交易篡改、Sybil
    攻击、竞争攻击和自私挖矿，需要采用不同的方法来解决。
- en: Transaction malleability has been resolved with so-called *Segregated Witness*
    soft fork upgrade of the Bitcoin protocol. This concept will be explained later
    in the chapter.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 交易篡改已经通过比特币协议的所谓*隔离见证*软分叉升级得到解决。这个概念将在本章后面解释。
- en: '![](img/6eee1e1e-b144-4009-8af9-e1fd7aa2e73c.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6eee1e1e-b144-4009-8af9-e1fd7aa2e73c.jpg)'
- en: From bitaddress.org, private key and bitcoin address in a paper wallet
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 从 bitaddress.org，纸钱包中的私钥和比特币地址
- en: Base58Check encoding
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Base58Check 编码
- en: 'Bitcoin addresses are encoded using the Base58Check encoding. This encoding
    is used to limit the confusion between various characters, such as 0OIl as they
    can look the same in different fonts. The encoding basically takes the binary
    byte arrays and converts them into human-readable strings. This string is composed
    by utilizing a set of 58 alphanumeric symbols. More explanation and logic can
    be found in the `base58.h` source file ([https://github.com/bitcoin/bitcoin/blob/master/src/base58.h](https://github.com/bitcoin/bitcoin/blob/master/src/base58.h))
    in the bitcoin source code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币地址使用 Base58Check 编码进行编码。这种编码用于限制各种字符之间的混淆，例如 0OIl 因为它们在不同字体中可能看起来相同。该编码基本上将二进制字节数组转换为人类可读的字符串。这个字符串是通过使用一组
    58 个字母数字符号来组成的。更多的解释和逻辑可以在比特币源代码中的`base58.h`源文件([https://github.com/bitcoin/bitcoin/blob/master/src/base58.h](https://github.com/bitcoin/bitcoin/blob/master/src/base58.h))中找到：
- en: '[PRE2]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Vanity addresses
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚荣地址
- en: 'As bitcoin addresses are based on base-58 encoding, it is possible to generate
    addresses that contain human-readable messages. An example is shown as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 由于比特币地址是基于 base-58 编码的，所以可以生成包含人类可读消息的地址。一个示例如下所示：
- en: '![](img/fab030d1-396a-42a7-89b5-b5691af2c9d6.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fab030d1-396a-42a7-89b5-b5691af2c9d6.jpg)'
- en: Vanity public address encoded in QR
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 用 QR 编码的虚荣公共地址
- en: 'Vanity addresses are generated using a purely brute-force method. An example
    of a paper wallet with vanity address is shown in the following screenshot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 虚荣地址是使用纯粹的蛮力方法生成的。以下截图显示了一个带有虚荣地址的纸钱包示例：
- en: '![](img/f5bb83ab-acb8-4c3f-baaf-abcd43723e48.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5bb83ab-acb8-4c3f-baaf-abcd43723e48.jpg)'
- en: Vanity address generated from https://bitcoinvanitygen.com/
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 从 https://bitcoinvanitygen.com/ 生成的虚荣地址
- en: In the preceding screenshot, on the right-hand bottom corner the public vanity
    address with QR code is displayed. The paper wallets can be stored physically
    as an alternative to electronic storage of private keys.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截屏中，右下角显示了带有二维码的公开虚荣地址。纸钱包可以作为私钥的电子存储的替代而被物理地存储。
- en: Multisignature addresses
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多重签名地址
- en: As the name implies, these addresses require multiple private keys. In practical
    terms, it means that in order to release the coins a certain set of signatures
    is required. This is also known as **M-of-N MultiSig**. Here *M* represents threshold
    or the minimum number of signatures required from *N* number of keys to release
    the bitcoins.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名，这些地址需要多个私钥。在实践中，这意味着为了释放比特币，需要一定数量的签名。这也被称为**M-of-N 多重签名**。在这里，*M* 表示阈值或从
    *N* 个密钥中需要的最小签名数来释放比特币。
- en: Transactions
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易
- en: Transactions are at the core of the bitcoin ecosystem. Transactions can be as
    simple as just sending some bitcoins to a bitcoin address, or it can be quite
    complex depending on the requirements. Each transaction is composed of at least
    one input and output. Inputs can be thought of as coins being spent that have
    been created in a previous transaction and outputs as coins being created. If
    a transaction is minting new coins, then there is no input and therefore no signature
    is needed. If a transaction is to send coins to some other user (a bitcoin address),
    then it needs to be signed by the sender with their private key and a reference
    is also required to the previous transaction in order to show the origin of the
    coins. Coins are, in fact, unspent transaction outputs represented in Satoshis.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 交易是比特币生态系统的核心。交易可以简单到只是将一些比特币发送到一个比特币地址，也可以根据需求而相当复杂。每个交易至少由一个输入和输出组成。输入可以被视为在以前的交易中创建并花费的硬币，输出可以被视为创建的硬币。如果一笔交易正在铸造新币，那么就没有输入，因此也不需要签名。如果一笔交易是要将硬币发送给其他用户（比特币地址），那么发送者需要使用他们的私钥对其进行签名，并且还需要对以前的交易进行引用以显示硬币的来源。事实上，硬币是以
    Satoshis 表示的未花费交易输出。
- en: Transactions are not encrypted and are publicly visible in the blockchain. Blocks
    are made up of transactions and these can be viewed using any online blockchain
    explorer.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 交易不加密，可以在区块链上公开查看。区块由交易组成，这些交易可以使用任何在线区块链浏览器查看。
- en: The transaction life cycle
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易生命周期
- en: 'The following steps describe the transaction life cycle:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了交易的生命周期：
- en: A user/sender sends a transaction using wallet software or some other interface.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户/发送方使用钱包软件或其他界面发送交易。
- en: The wallet software signs the transaction using the sender's private key.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 钱包软件使用发送者的私钥对交易进行签名。
- en: The transaction is broadcasted to the Bitcoin network using a flooding algorithm.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交易使用泛洪算法广播到比特币网络中。
- en: Mining nodes (miners) who are listening for the transactions verify and include
    this transaction in the next block to be mined. Just before the transaction are
    placed in the block they are placed in a special memory buffer called **transaction
    pool**. The purpose of the transaction pool is explained in the next section.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听交易的挖矿节点（矿工）验证并将此交易包含在下一个要挖掘的区块中。就在交易被放置在区块中之前，它们会被放置在一个名为**交易池**的特殊内存缓冲区中。交易池的目的将在下一节中解释。
- en: Mining starts, which is a process by which the blockchain is secured and new
    coins are generated as a reward for the miners who spend appropriate computational
    resources. This concept is explained in more detail later in this chapter.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开采开始，这是一种确保区块链安全并作为对花费适当计算资源的矿工的奖励生成新币的过程。这个概念稍后在本章中将会详细解释。
- en: Once a miner solves the PoW problem it broadcasts the newly mined block to the
    network. PoW is explained in detail later in this chapter.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦矿工解决了 PoW 问题，它就会将新挖掘的区块广播到网络中。PoW 将在本章后面详细解释。
- en: The nodes verify the block and propagate the block further, and confirmations
    start to generate.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 节点验证区块并进一步传播区块，并开始生成确认。
- en: Finally, the confirmations start to appear in the receiver's wallet and after
    approximately three confirmations, the transaction is considered finalized and
    confirmed. However, three to six is just a recommended number; the transaction
    can be considered final even after the first confirmation. The key idea behind
    waiting for six confirmations is that the probability of double spending is virtually
    eliminated after three confirmations.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，确认开始出现在接收方的钱包中，大约在三次确认后，交易被视为已完成和确认。然而，三到六次只是一个推荐的数字；即使在第一次确认后，交易也可以被视为最终确认。等待六次确认的关键思想是，在三次确认后，双重支付的概率几乎被消除。
- en: Transaction fee
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易费
- en: Transaction fees are charged by the miners. The fee charged is dependent upon
    the size and weight of the transaction. Transaction fees are calculated by subtracting
    the sum of the inputs and the sum of the outputs.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 矿工收取交易费。收取的费用取决于交易的大小和权重。交易费用通过减去输入和输出的总和来计算。
- en: 'A simple formula can be used:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用一个简单的公式：
- en: '*fee = sum(inputs) - sum(outputs)*'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '*费用 = 总数(输入) - 总数(输出)*'
- en: The fees are used as an incentive for miners to encourage them to include a
    user transaction in the block the miners are creating. All transactions end up
    in the memory pool, from where miners pick up transactions based on their priority
    to include them in the proposed block. The calculation of priority is introduced
    later in this chapter; however, from a transaction fee point of view, a transaction
    with a higher fee will be picked up sooner by the miners.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 手续费被用作激励，以鼓励矿工将用户交易包括在他们正在创建的区块中。所有交易最终都会进入内存池，矿工会根据它们的优先级在内存池中选择交易并包括在建议的区块中。关于优先级的计算将在本章后面介绍；然而，从交易手续费的角度来看，交易的手续费越高，矿工越快地会选择该交易。
- en: There are different rules based on which fee is calculated for various types
    of actions, such as sending transactions, inclusion in blocks, and relaying by
    nodes. Fees are not fixed by the Bitcoin protocol and are not mandatory; even
    a transaction with no fee will be processed in due course but may take a very
    long time. This is however no longer practical due to the high volume of transactions
    and competing investors on the Bitcoin network, therefore it is advisable to provide
    a fee always. The time for transaction confirmation usually ranges from 10 minutes
    to over 12 hours in some cases. Transaction time is dependent on transaction fees
    and network activity. If the network is very busy then naturally transactions
    will take longer to process and if you pay a higher fee then your transaction
    is more likely to be picked by miners first due to additional incentive of the
    higher fee.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 根据不同的规则，针对各种类型的操作计算手续费，例如发送交易、包括在区块中以及节点中继。手续费由比特币协议不固定，并不是强制性的；即使没有手续费的交易也将按时处理，但可能需要很长的时间。然而，由于比特币网络中的交易数量大和投资者之间的竞争，这已经不再实际，因此建议始终提供手续费。交易确认时间通常在10分钟到12小时以上的范围内。交易时间取决于交易费和网络活动。如果网络非常繁忙，那么交易自然需要更长的处理时间，如果支付更高的费用，那么您的交易更有可能被矿工首先选中，因为更高的手续费会有额外的激励。
- en: Transaction pools
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易池
- en: Also known as memory pools, these pools are basically created in local memory
    (computer RAM) by nodes in order to maintain a temporary list of transactions
    that are not yet confirmed in a block. Transactions are included in a block after
    passing verification and based on their priority.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这些池也被称为内存池，它们基本上是由节点在本地内存（计算机RAM）中创建的，以维护一个尚未在区块中确认的交易的临时列表。交易经过验证后，并根据它们的优先级被包括在一个区块中。
- en: The transaction data structure
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易数据结构
- en: A transaction at a high level contains metadata, inputs, and outputs. Transactions
    are combined to create a block.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，一个交易包含元数据、输入和输出。交易被组合在一起以创建一个区块。
- en: 'The transaction data structure is shown in the following table:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 交易数据结构如下表所示：
- en: '| **Field** | **Size** | **Description** |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **大小** | **描述** |'
- en: '| Version number | 4 bytes | Used to specify rules to be used by the miners
    and nodes for transaction processing. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 版本号 | 4 字节 | 用于为矿工和节点指定要使用的交易处理规则。 |'
- en: '| Input counter | 1-9 bytes | The number (positive integer) of inputs included
    in the transaction. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 输入计数器 | 1-9 字节 | 交易中包含的输入数量（正整数）。 |'
- en: '| List of inputs | Variable | Each input is composed of several fields, including
    `Previous Tx hash`, `Previous Txout-index`, `Txin-script length`, `Txin-script`,
    and optional sequence number. The first transaction in a block is also called
    a coinbase transaction. It specifies one or more transaction inputs. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 输入列表 | 变量 | 每个输入由几个字段组成，包括`上一个Tx哈希`、`上一个Tx输出索引`、`Txin脚本长度`、`Txin脚本`，以及可选的序列号。块中的第一笔交易也被称为coinbase交易。它指定一个或多个交易输入。
    |'
- en: '| Output counter | 1-9 bytes | A positive integer representing the number of
    outputs. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 输出计数器 | 1-9 字节 | 表示输出数量的正整数。 |'
- en: '| List of outputs | Variable | Outputs included in the transaction. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 输出列表 | 变量 | 包含在交易中的输出。 |'
- en: '| Lock time | 4 bytes | This field defines the earliest time when a transaction
    becomes valid. It is either a Unix timestamp or block height. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 锁定时间 | 4 字节 | 该字段定义交易生效的最早时间。它可以是Unix时间戳，也可以是区块高度。 |'
- en: A sample transaction is shown as follows. This is the decoded transaction from
    the first example of a payment transaction provided at the start of this chapter.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例交易。这是本章开头提供的支付交易示例的解码交易。
- en: '[PRE3]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As shown in the preceding code, there are a number of structures that make up
    the transaction. All these elements are described in the following subsections.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码所示，交易由多个结构组成。所有这些元素都在下面的小节中描述。
- en: Metadata
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元数据
- en: This part of the transaction contains some values such as the size of the transaction,
    the number of inputs and outputs, the hash of the transaction, and a `lock_time`
    field. Every transaction has a prefix specifying the version number. These fields
    are shown in the preceding example:  `lock_time`, `size`, and `version`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 交易的这一部分包含一些值，例如交易的大小、输入和输出的数量、交易的哈希以及一个`lock_time`字段。每个交易都有一个指定版本号的前缀。这些字段在前面的示例中显示为：`lock_time`，`size`和`version`。
- en: Inputs
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入
- en: Generally, each input spends a previous output. Each output is considered as
    **Unspent Transaction Output** (**UTXO**) until an input consumes it. UTXO is
    an unspent transaction output that can be spent as an input to a new transaction.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，每个输入都花费了前一个输出。每个输出被视为**未花费交易输出**（**UTXO**），直到输入将其消耗掉。UTXO是可以作为新交易的输入花费的未花费交易输出。
- en: 'Transaction input data structure is shown in the following table:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 交易输入数据结构如下表所示：
- en: '| **Field** | **Size** | **Description** |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **大小** | **描述** |'
- en: '| Transaction hash | 32 bytes | This is the hash of the previous transaction
    with UTXO. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 交易哈希 | 32字节 | 这是具有UTXO的先前交易的哈希。 |'
- en: '| Output index | 4 bytes | This is the previous transactions output index,
    that is, UTXO to be spent. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 输出索引 | 4字节 | 这是先前交易的输出索引，即要花费的UTXO。 |'
- en: '| Script length | 1-9 bytes | This is the size of the unlocking script. |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 脚本长度 | 1-9字节 | 这是解锁脚本的大小。 |'
- en: '| Unlocking script | Variable | Input script (`ScriptSig`) which satisfies
    the requirements of the locking script. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 解锁脚本 | 可变 | 满足锁定脚本要求的输入脚本（`ScriptSig`）。 |'
- en: '| Sequence number | 4 bytes | Usually disabled or contains lock time. Disabled
    is represented by `''0xFFFFFFFF''`. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 序列号 | 4字节 | 通常禁用或包含锁定时间。禁用用`''0xFFFFFFFF''`表示。 |'
- en: 'In the preceding example the inputs are defined under `"inputs" : [` section.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，“inputs”部分中定义了输入。
- en: Outputs
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出
- en: Outputs have three fields, and they contain instructions for sending bitcoins.
    The first field contains the amount of Satoshis whereas the second field contains
    the size of the locking script. Finally, the third field contains a locking script
    that holds the conditions that need to be met in order for the output to be spent.
    More information on transaction spending using locking and unlocking scripts and
    producing outputs is discussed later in this section.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 输出有三个字段，它们包含发送比特币的指令。第一个字段包含Satoshis的数量，而第二个字段包含锁定脚本的大小。最后，第三个字段包含一个锁定脚本，其中包含需要满足的条件，以便花费输出。更多关于使用锁定和解锁脚本以及产生输出进行交易花费的信息在本节稍后讨论。
- en: 'Transaction output data structure is shown here:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 交易输出数据结构如下所示：
- en: '| **Field** | **Size** | **Description** |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **大小** | **描述** |'
- en: '| Value | 8 bytes | Total number in positive integers of Satoshis to be transferred
    |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 8字节 | 要转移的正整数Satoshis的总数 |'
- en: '| Script size | 1-9 bytes | Size of the locking script |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| 脚本大小 | 1-9字节 | 锁定脚本的大小 |'
- en: '| Locking script | Variable | Output script (`ScriptPubKey`) |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| 锁定脚本 | 可变 | 输出脚本（`ScriptPubKey`） |'
- en: In the preceding example two outputs are shown under `"OUT":[` section.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，“OUT”部分显示了两个输出。
- en: Verification
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证
- en: Verification is performed using Bitcoin's scripting language which is described
    in the next section in detail.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 使用比特币的脚本语言进行验证，下一节会详细描述。
- en: The script language
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本语言
- en: Bitcoin uses a simple stack-based language called **script** to describe how
    bitcoins can be spent and transferred. It is not Turing complete and has no loops
    to avoid any undesirable effects of long-running/hung scripts on the Bitcoin network.
    This scripting language is based on a Forth programming language like syntax and
    uses a reverse polish notation in which every operand is followed by its operators.
    It is evaluated from the left to the right using a **Last In, First Out** (**LIFO**)
    stack.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币使用一种称为**脚本**的简单基于堆栈的语言来描述比特币如何花费和转移。它不是图灵完备的，没有循环，以避免长时间运行/挂起脚本对比特币网络造成任何不良影响。这种脚本语言基于类似于Forth编程语言的语法，并使用逆波兰表示法，其中每个操作数后面跟着它的操作符。它使用**后进先出**（**LIFO**）堆栈从左到右进行评估。
- en: Scripts use various opcodes or instructions to define their operation. Opcodes
    are also known as words, commands, or functions. Earlier versions of the Bitcoin
    node had a few opcodes that are no longer used due to bugs discovered in their
    design.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本使用各种操作码或指令来定义其操作。 操作码也被称为单词、命令或函数。 比特币节点的早期版本有一些操作码，由于发现了设计中的错误而不再使用。
- en: The various categories of the scripting opcodes are constants, flow control,
    stack, bitwise logic, splice, arithmetic, cryptography, and lock time.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本操作码的各种类别包括常量、流程控制、堆栈、位逻辑、切片、算术、加密和锁定时间。
- en: 'A transaction script is evaluated by combining `ScriptSig` and `ScriptPubKey`.
    `ScriptSig` is the unlocking script, whereas `ScriptPubKey` is the locking script.
    This is how a transaction to be spent is evaluated:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 交易脚本通过组合`ScriptSig`和`ScriptPubKey`进行评估。 `ScriptSig`是解锁脚本，而`ScriptPubKey`是锁定脚本。
    这是如何评估要花费的交易的方式：
- en: First, it is unlocked and then it is spent
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，它被解锁，然后才能花费。
- en: '`ScriptSig` is provided by the user who wishes to unlock the transaction'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ScriptSig`由希望解锁交易的用户提供。'
- en: '`ScriptPubkey` is part of the transaction output and specifies the conditions
    that need to be fulfilled in order to spend the output'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ScriptPubkey` 是交易输出的一部分，指定了需要满足的条件才能花费输出。'
- en: In other words, outputs are locked by `ScriptPubKey` that contains the conditions,
    when met will unlock the output, and coins can then be redeemed
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 换句话说，输出由包含条件的`ScriptPubKey`锁定，当条件满足时，输出将被解锁，硬币可以被兑换。
- en: Commonly used opcodes
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常用的操作码。
- en: All opcodes are declared in the `script.h` file in the Bitcoin reference client
    source code.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 所有操作码都在比特币参考客户端源代码的`script.h`文件中声明。
- en: 'This can be accessed from the link at [h](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[p](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[s](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[://g](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[i](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[h](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[u](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[b](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[.](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[c](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[o](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[m](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[/b](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[i](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[c](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[o](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[i](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[n](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[/b](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[i](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[c](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[o](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[i](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[n](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[/b](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[l](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[o](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[b](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[/m](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[a](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[s](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[e](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[r](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[/s](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[r](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[c](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[/s](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[c](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[r](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[i](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[p](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[/s](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[c](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[r](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[i](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[p](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[.](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[h](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)
    under the following comment:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以从以下链接访问：[h](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[p](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[s](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[://g](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[i](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[h](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[u](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[b](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[.](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[c](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[o](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[m](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[/b](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[i](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[c](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[o](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[i](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[n](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[/b](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[i](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[c](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[o](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[i](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[n](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[/b](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[l](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[o](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[b](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[/m](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[a](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[s](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[e](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[r](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[/s](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[r](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[c](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[/s](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[c](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[r](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[i](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[p](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[/s](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[c](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[r](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[i](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[p](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[t](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[.](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)[h](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)
    下面的评论中获取：
- en: '`/** Script opcodes */`'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`/** 脚本操作码 */`'
- en: 'A description of the most commonly used opcodes is listed here. This table
    is taken from the Bitcoin developer''s guide:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的操作码的描述在此列出。此表格摘自比特币开发者指南：
- en: '| **Opcode** | **Description** |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| **操作码** | **描述** |'
- en: '| `OP_CHECKSIG` | This takes a public key and signature and validates the signature
    of the hash of the transaction. If it matches, then `TRUE` is pushed onto the
    stack; otherwise, `FALSE` is pushed. |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `OP_CHECKSIG` | 这获取公钥和签名，并验证交易哈希的签名。如果匹配，则将`TRUE`推送到堆栈；否则，推送`FALSE`。 |'
- en: '| `OP_EQUAL` | This returns `1` if the inputs are exactly equal; otherwise,
    `0` is returned. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| `OP_EQUAL` | 如果输入完全相同，则返回`1`；否则，返回`0`。 |'
- en: '| `OP_DUP` | This duplicates the top item in the stack. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| `OP_DUP` | 这复制堆栈中的顶部项目。 |'
- en: '| `OP_HASH160` | The input is hashed twice, first with SHA-256 and then with
    RIPEMD-160. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `OP_HASH160` | 输入先使用SHA-256进行两次哈希，然后再使用RIPEMD-160进行哈希。 |'
- en: '| `OP_VERIFY` | This marks the transaction as invalid if the top stack value
    is not true. |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `OP_VERIFY` | 如果堆栈顶部值不为true，则将事务标记为无效。 |'
- en: '| `OP_EQUALVERIFY` | This is the same as `OP_EQUAL`, but it runs `OP_VERIFY`
    afterwards. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `OP_EQUALVERIFY` | 这与`OP_EQUAL`相同，但之后运行`OP_VERIFY`。 |'
- en: '| `OP_CHECKMULTISIG` | This takes the first signature and compares it against
    each public key until a match is found and repeats this process until all signatures
    are checked. If all signatures turn out to be valid, then a value of `1` is returned
    as a result; otherwise, `0` is returned. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `OP_CHECKMULTISIG` | 这获取第一个签名并将其与每个公钥进行比较，直到找到匹配项，然后重复此过程直到检查所有签名。如果所有签名都有效，则返回`1`；否则，返回`0`。
    |'
- en: Types of transactions
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易类型
- en: There are various scripts available in Bitcoin to handle the value transfer
    from the source to the destination. These scripts range from very simple to quite
    complex depending upon the requirements of the transaction. Standard transaction
    types are discussed here. Standard transactions are evaluated using `IsStandard()`
    and `IsStandardTx()` tests and only standard transactions that pass the test are
    generally allowed to be mined or broadcasted on the Bitcoin network. However,
    nonstandard transactions are valid and allowed on the network.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币中有各种脚本可用于处理从源到目的地的价值转移。这些脚本根据交易的要求，从非常简单到非常复杂的范围都有。标准交易类型在此处讨论。标准交易通过`IsStandard()`和`IsStandardTx()`测试进行评估，并且通常只有通过测试的标准交易才允许在比特币网络上进行挖掘或广播。但是，非标准交易是有效的，并且允许在网络上进行。
- en: 'The following are the standard transaction types:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是标准交易类型：
- en: '**Pay to Public Key Hash** (**P2PKH**): P2PKH is the most commonly used transaction
    type and is used to send transactions to the bitcoin addresses. The format of
    the transaction is shown as follows:'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支付至公钥哈希**（**P2PKH**）：P2PKH是最常用的交易类型，用于向比特币地址发送交易。交易格式如下所示：'
- en: '[PRE4]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `ScriptPubKey` and `ScriptSig` parameters are concatenated together and
    executed. An example will follow shortly in this section, where this is explained
    in more detail.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`ScriptPubKey`和`ScriptSig`参数被串联在一起并执行。在本节中将会有一个示例，更详细地解释这一点。'
- en: '**Pay to Script Hash** (**P2SH**): P2SH is used in order to send transactions
    to a script hash (that is, the addresses starting with `3`) and was standardized
    in BIP16\. In addition to passing the script, the redeem script is also evaluated
    and must be valid. The template is shown as follows:'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支付至脚本哈希**（**P2SH**）：P2SH用于将交易发送到脚本哈希（即以`3`开头的地址），并在BIP16中进行了标准化。除了传递脚本之外，还必须评估赎回脚本并确保其有效。模板如下所示：'
- en: '[PRE5]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**MultiSig** (**Pay to MultiSig**): M-of-N MultiSig transaction script is a
    complex type of script where it is possible to construct a script that required
    multiple signatures to be valid in order to redeem a transaction. Various complex
    transactions such as escrow and deposits can be built using this script. The template
    is shown here:'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多重签名**（**支付至多重签名**）：M-of-N多重签名交易脚本是一种复杂类型的脚本，可以构建需要多个签名才能有效赎回交易的脚本。使用此脚本可以构建各种复杂的交易，如担保和存款。模板如下所示：'
- en: '[PRE6]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Raw multisig is obsolete, and multisig is usually part of the P2SH redeem script,
    mentioned in the previous bullet point.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 原始多重签名已过时，并且多重签名通常是P2SH赎回脚本的一部分，如前面的项目中所述。
- en: '**Pay to Pubkey**: This script is a very simple script that is commonly used
    in coinbase transactions. It is now obsolete and was used in an old version of
    bitcoin. The public key is stored within the script in this case, and the unlocking
    script is required to sign the transaction with the private key.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**付款给公钥**：此脚本是一种非常简单的脚本，通常用于 coinbase 交易。它现在已经过时，并且是比特币的旧版本中使用的。在此情况下，公钥存储在脚本中，解锁脚本需要使用私钥对交易进行签名。'
- en: 'The template is shown as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 模板如下所示：
- en: '[PRE7]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Null data/OP_RETURN**: This script is used to store arbitrary data on the
    blockchain for a fee. The limit of the message is 40 bytes. The output of this
    script is unredeemable because `OP_RETURN` will fail the validation in any case.
    `ScriptSig` is not required in this case.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Null 数据/OP_RETURN**：此脚本用于以费用在区块链上存储任意数据。消息的限制为 40 字节。此脚本的输出无法兑现，因为 `OP_RETURN`
    无论如何都会失败验证。在此情况下不需要 `ScriptSig`。'
- en: 'The template is very simple and is shown as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 模板非常简单，如下所示：
- en: '[PRE8]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A P2PKH script execution is shown in the following diagram:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: P2PKH 脚本执行如下图所示：
- en: '![](img/c4474014-4b50-4b6b-950e-7ba6d957342c.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4474014-4b50-4b6b-950e-7ba6d957342c.jpg)'
- en: P2PKH script execution
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: P2PKH 脚本执行
- en: 'All transactions are eventually encoded into the hexadecimal format before
    transmitting over the Bitcoin network. A sample transaction is shown here in hexadecimal
    format that is retrieved using `bitcoin-cli` on the Bitcoin node running on mainnet:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 所有交易最终都会在传输到比特币网络之前以十六进制格式编码。下面以十六进制格式显示了使用 `bitcoin-cli` 在主网上运行的比特币节点检索的示例交易：
- en: '[PRE9]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that this is the same transaction that was presented as an example at the
    start of this chapter.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是本章开头示例中提到的相同交易。
- en: Coinbase transactions
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Coinbase 交易
- en: 'A coinbase transaction or generation transaction is always created by a miner
    and is the first transaction in a block. It is used to create new coins. It includes
    a special field, also called `coinbase`, which acts as an input to the coinbase
    transaction. This transaction also allows up to 100 bytes of arbitrary data that
    can be used to store arbitrary data. In the genesis block, this transaction included
    the most famous comment taken from *The Times* newspaper:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: Coinbase 交易或生成交易始终由矿工创建，是区块中的第一笔交易。它用于创建新的比特币。它包括一个特殊字段，也称为 `coinbase`，它充当 coinbase
    交易的输入。此交易还允许最多 100 字节的任意数据，可用于存储任意数据。在创世区块中，此交易包含了最著名的评论，取自 *The Times* 报纸：
- en: '"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks."'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks."'
- en: This message is a proof that the genesis block was not mined earlier than January
    3, 2009\. This is because first Bitcoin block (genesis block) was created on January
    3, 2009 and this news excerpt was taken from that day's newspaper.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 此消息证明了创世区块不早于 2009 年 1 月 3 日挖掘。这是因为比特币的第一个区块（创世区块）是在 2009 年 1 月 3 日创建的，而此新闻摘录取自当天的报纸。
- en: 'A coinbase transaction input has the same number of fields as usual transaction
    input, but the structure contains coinbase data size and coinbase data fields
    instead of unlocking script size and unlocking script fields. Also, it does not
    have a reference pointer to the previous transaction. This structure is shown
    in the following table:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: Coinbase 交易输入的字段数量与通常的交易输入相同，但结构包含 coinbase 数据大小和 coinbase 数据字段，而不是解锁脚本大小和解锁脚本字段。此外，它没有指向上一个交易的引用指针。该结构如下表所示：
- en: '| **Field** | **Size** | **Description** |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **大小** | **描述** |'
- en: '| Transaction hash | 32 bytes | Set to all zeroes as no hash reference is used
    |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| 交易哈希 | 32 字节 | 设置为全零，因为不使用哈希引用 |'
- en: '| Output index | 4 bytes | Set to `0xFFFFFFFF` |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| 输出索引 | 4 字节 | 设置为 `0xFFFFFFFF` |'
- en: '| Coinbase data length | 1-9 bytes | 2 bytes-100 bytes |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| Coinbase 数据长度 | 1-9 字节 | 2 字节至 100 字节 |'
- en: '| Data | Variable | Any data |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| 数据 | 可变 | 任何数据 |'
- en: '| Sequence number | 4 bytes | Set to `0xFFFFFFFF` |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| 序列号 | 4 字节 | 设置为 `0xFFFFFFFF` |'
- en: Contracts
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合约
- en: As defined in the Bitcoin core developer guide, contracts are basically transactions
    that use the Bitcoin system to enforce a financial agreement. This is a simple
    definition but has far-reaching consequences as it allows users to design complex
    contracts that can be used in many real-world scenarios. Contracts allow the development
    of a completely decentralized, independent, and reduced risk platform.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 如比特币核心开发者指南中所定义的，合同基本上是使用比特币系统执行财务协议的交易。这是一个简单的定义，但具有深远的影响，因为它允许用户设计可以在许多现实场景中使用的复杂合同。合同允许开发一个完全去中心化、独立和降低风险的平台。
- en: Various contracts, such as escrow, arbitration, and micropayment channels, can
    be built using the Bitcoin scripting language. The current implementation of a
    script is very limited, but various types of contracts are still possible to develop.
    For example, the release of funds only if multiple parties sign the transaction
    or perhaps the release of funds only after a certain time has elapsed. Both of
    these scenarios can be realized using multisig and transaction lock time options.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用比特币脚本语言构建各种合同，例如托管、仲裁和微支付通道。脚本的当前实现非常有限，但仍然可以开发各种类型的合同。例如，只有在多方签署交易后才释放资金，或者只有在一定时间过去后才释放资金。这两种情况都可以使用多重签名和交易锁定时间选项来实现。
- en: Transaction veriﬁcation
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易验证
- en: 'This verification process is performed by Bitcoin nodes. The following is described
    in the Bitcoin developer guide:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这个验证过程是由比特币节点执行的。比特币开发者指南中描述了以下内容：
- en: Check the syntax and ensure that the syntax and data structure of the transaction
    conforms to the rules provided by the protocol.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查语法，并确保交易的语法和数据结构符合协议提供的规则。
- en: Verify that no transaction inputs and outputs are empty.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证没有交易输入和输出为空。
- en: Check whether the size in bytes is less than the maximum block size.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查字节大小是否小于最大区块大小。
- en: The output value must be in the allowed money range (0 to 21 million BTC).
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出值必须在允许的货币范围内（0到2100万比特币）。
- en: All inputs must have a specified previous output, except for coinbase transactions,
    which should not be relayed.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有输入必须具有指定的先前输出，除了coinbase交易，不应该被中继。
- en: Verify that `nLockTime` must not exceed 31-bits. (`nLockTime` specifies the
    time before which transaction will not be included in the block.)
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`nLockTime`不能超过31位。(`nLockTime`指定交易不会在区块中包含之前的时间。)
- en: For a transaction to be valid, it should not be less than 100 bytes.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使交易有效，其长度不应小于100字节。
- en: The number of signature operations in a standard transaction should be less
    than or not more than two.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标准交易中的签名操作数量应小于或不超过两个。
- en: Reject nonstandard transactions; for example, `ScriptSig` is allowed to only
    push numbers on the stack. `ScriptPubkey` not passing the `isStandard()` checks.
    The `isStandard()` checks specify that only standard transactions are allowed.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拒绝非标准交易；例如，`ScriptSig`仅允许在堆栈上推送数字。`ScriptPubkey`未通过`isStandard()`检查。`isStandard()`检查规定只允许标准交易。
- en: A transaction is rejected if there is already a matching transaction in the
    pool or in a block in the main branch.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果池中或主分支中的某个区块中已经存在匹配的交易，则交易将被拒绝。
- en: The transaction will be rejected if the referenced output for each input exists
    in any other transaction in the pool.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果每个输入的引用输出存在于池中的任何其他交易中，则将拒绝交易。
- en: For each input, there must exist a referenced output unspent transaction.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个输入，必须存在一个被引用的未花费交易输出。
- en: For each input, if the referenced output transaction is the coinbase, it must
    have at least 100 confirmations; otherwise, the transaction will be rejected.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个输入，如果引用的输出交易是coinbase，它必须至少有100个确认；否则，交易将被拒绝。
- en: For each input, if the referenced output does not exist or has been spent already,
    the transaction will be rejected.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个输入，如果引用的输出不存在或已经花费，则交易将被拒绝。
- en: Using the referenced output transactions to get input values, verify that each
    input value, as well as the sum, is in the allowed range of 0-21 million BTC.
    Reject the transaction if the sum of input values is less than the sum of output
    values.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用引用的输出交易来获取输入值，验证每个输入值以及总和是否在0-2100万比特币的允许范围内。如果输入值的总和小于输出值的总和，则拒绝交易。
- en: Reject the transaction if the transaction fee would be too low to get into an
    empty block.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果交易费用太低而无法进入空块，则拒绝交易。
- en: Each input unlocking script must have corresponding valid output scripts.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个输入解锁脚本必须具有相应的有效输出脚本。
- en: Transaction malleability
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易可塑性
- en: Transaction malleability in Bitcoin was introduced due to a bug in the bitcoin
    implementation. Due to this bug, it became possible for an adversary to change
    the transaction ID of a transaction, thus resulting in a scenario where it would
    appear that a certain transaction has not been executed. This can allow scenarios
    where double deposits or withdrawals can occur. In other words, this bug allows
    the changing of the unique ID of a Bitcoin transaction before it is confirmed.
    If the ID is changed before confirmation, it would seem that the transaction did
    not occur at all which can then allow these attacks.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币中的交易可塑性是由比特币实现中的一个错误引入的。由于这个错误，对手有可能改变交易的交易ID，从而导致某个交易似乎没有被执行的情况。这可以导致双重存款或提款等情况发生。换句话说，这个错误允许在比特币交易确认之前更改其唯一ID。如果在确认之前更改了ID，则似乎根本没有发生交易，这样就可以发生这些攻击。
- en: Blockchain
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块链
- en: Blockchain is a public ledger of a timestamped, ordered, and immutable list
    of all transactions on the Bitcoin network. Each block is identified by a hash
    in the chain and is linked to its previous block by referencing the previous block's
    hash.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链是比特币网络上所有交易的时间戳、有序和不可变列表的公共分类帐。每个块在链中由哈希标识，并通过引用前一个块的哈希链接到其前一个块。
- en: In the following table structure of a block is presented, followed by a detailed
    diagram that provides a detailed view of the blockchain structure.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中提供了一个块的结构，后跟一个详细的图表，提供了区块链结构的详细视图。
- en: The structure of a block
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 块的结构
- en: 'The following table shows the structure of a block:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了一个块的结构：
- en: '| **Field** | **Size** | **Description** |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **大小** | **描述** |'
- en: '| Block size | 4 bytes | This is the size of the block. |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| 块大小 | 4 字节 | 这是块的大小。 |'
- en: '| Block header | 80 bytes | This includes fields from the block header described
    in the next section. |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| 块头 | 80 字节 | 这包括下一节中描述的块头中的字段。 |'
- en: '| Transaction counter | Variable | This field contains the total number of
    transactions in the block, including the coinbase transaction. Size ranges from
    1-9 bytes |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| 交易计数器 | 可变 | 此字段包含块中所有交易的总数，包括coinbase交易。大小范围为1-9字节 |'
- en: '| Transactions | Variable | All transactions in the block. |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| 交易 | 可变 | 块中的所有交易。 |'
- en: The structure of a block header
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 块头的结构
- en: 'The following table depicts the structure of a block header:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格描述了块头的结构：
- en: '| **Field** | **Size** | **Description** |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **大小** | **描述** |'
- en: '| Version | 4 bytes | The block version number that dictates the block validation
    rules to follow. |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| 版本 | 4 字节 | 指定要遵循的块验证规则的块版本号。 |'
- en: '| Previous block''s header hash | 32 bytes | This is a double SHA-256 hash
    of the previous block''s header. |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| 上一个块的头哈希 | 32 字节 | 这是上一个块头的双SHA-256哈希。 |'
- en: '| Merkle root hash | 32 bytes | This is a double SHA-256 hash of the Merkle
    tree of all transactions included in the block. |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| Merkle根哈希 | 32 字节 | 这是包含在块中的所有交易的Merkle树的双SHA-256哈希。 |'
- en: '| Timestamp | 4 bytes | This field contains the approximate creation time of
    the block in the Unix epoch time format. More precisely, this is the time when
    the miner has started hashing the header. (The time from the miner''s point of
    view.) |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| 时间戳 | 4 字节 | 此字段包含块的大致创建时间，以Unix时代时间格式表示。更确切地说，这是矿工开始对头进行散列的时间。（从矿工的角度看的时间。）
    |'
- en: '| Difficulty target | 4 bytes | This is the current difficulty target of the
    network/block. |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| 难度目标 | 4 字节 | 这是网络/块的当前难度目标。 |'
- en: '| Nonce | 4 bytes | This is an arbitrary number that miners change repeatedly
    to produce a hash that is lower than the difficulty target. |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| 随机数 | 4 字节 | 这是矿工反复更改以产生低于难度目标的哈希的任意数字。 |'
- en: As shown in the following diagram, blockchain is a chain of blocks where each
    block is linked to its previous block by referencing the previous block header's
    hash. This linking makes sure that no transaction can be modified unless the block
    that records it and all blocks that follow it are also modified. The first block
    is not linked to any previous block and is known as the genesis block.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，区块链是一个块链，其中每个块通过引用前一个块头的哈希链接到其前一个块。这种链接确保除非记录它的块和所有跟随它的块也被修改，否则不会修改任何交易。第一个块未链接到任何先前的块，并且称为创世块。
- en: '![](img/482f743a-c096-4281-ad4b-27e139b6cf80.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![](img/482f743a-c096-4281-ad4b-27e139b6cf80.jpg)'
- en: A visualization of the blockchain, block, block header, transactions and scripts
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链、区块、区块头、交易和脚本的可视化
- en: The preceding diagram shows a high-level overview of the Bitcoin blockchain.
    On the left-hand side blocks are shown starting from top to bottom. Each block
    contains transactions and block headers which are further magnified on the right-hand
    side. On the top, first, block header is expanded to show various elements within
    the block header. Then on the right-hand side the Merkle root element of the block
    header is shown in magnified view which shows that how Merkle root is calculated.
    We have discussed Merkle trees in detail previously, you can refer to [Chapter
    5](5e44a805-fb66-4135-b59e-4e03367aaed5.xhtml), *Symmetric Cryptography* if you
    need to revise the concept. Further down transactions are also magnified to show
    the structure of a transaction and the elements that it contains. Also, note that
    transactions are then further elaborated by showing that what locking and unlocking
    scripts look like. This diagram shows a lot of components, we will discuss all
    these in this chapter.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表显示了比特币区块链的高级概述。左侧显示从上到下的区块。每个区块包含交易和区块头，在右侧进一步放大。顶部，第一个区块头被展开以显示区块头内的各个元素。然后在右侧显示了区块头的Merkle根元素的被放大视图，显示了Merkle根是如何计算的。我们之前已经详细讨论了Merkle树，如果需要复习这个概念，可以参考[第5章](5e44a805-fb66-4135-b59e-4e03367aaed5.xhtml)，*对称加密*。进一步向下，交易也被放大以展示交易的结构和包含的元素。此外，请注意，交易以显示锁定和解锁脚本的形式进一步阐述。该图表显示了许多组件，我们将在本章中讨论所有这些内容。
- en: The genesis block
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创世区块
- en: 'This is the first block in the Bitcoin blockchain. The genesis block was hardcoded
    in the bitcoin core software. It is in the `chainparams.cpp` file ([https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp](https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp)):'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这是比特币区块链中的创世区块。创世区块在比特币核心软件中被硬编码。它在`chainparams.cpp`文件中（[https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp](https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp)）：
- en: '[PRE10]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Bitcoin provides protection against double spending by enforcing strict rules
    on transaction verification and via mining. Transactions and blocks are added
    in the blockchain only after strict rule checking explained earlier in the *Transaction
    verification* section and successful PoW solution. Block height is the number
    of blocks before a particular block in the blockchain. The current height (as
    of March 6, 2018) of the blockchain is 512,328 blocks. PoW is used to secure the
    blockchain. Each block contains one or more transactions, out of which the first
    transaction is a coinbase transaction. There is a special condition for coinbase
    transactions that prevent them from being spent until at least 100 blocks in order
    to avoid a situation where the block may be declared stale later on.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币通过强制执行交易验证和通过挖矿来提供防止双重花费的保护。只有在*交易验证*部分之前解释的严格规则检查和成功的PoW解决方案后，交易和区块才会被添加到区块链中。区块高度是在区块链中某一特定区块之前的区块数量。当前区块链（截至2018年3月6日）的高度为512,328个区块。PoW用于保护区块链。每个区块包含一个或多个交易，其中第一笔交易是coinbase交易。对于coinbase交易有一个特殊条件，防止它们在至少100个区块前被花费，以避免后来该区块可能被声明为陈旧的情况。
- en: Stale blocks are created when a block is solved and every other miner who is
    still working to find a solution to the hash puzzle is working on that block.
    Mining and hash puzzles will be discussed later in the chapter in detail. As the
    block is no longer required to be worked on, this is considered a stale block.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个区块被解决并且其他每一个仍在努力寻找哈希谜题解的矿工都在该区块上工作时，就会产生陈旧区块。后续将详细讨论挖矿和哈希谜题。由于不再需要对该区块进行工作，因此被视为陈旧区块。
- en: Orphan blocks are also called detached blocks and were accepted at one point
    in time by the network as valid blocks but were rejected when a proven longer
    chain was created that did not include this initially accepted block. They are
    not part of the main chain and can occur at times when two miners manage to produce
    the blocks at the same time.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 孤立区块也称为分开的区块，在某个时间点被网络接受为有效区块，但当创建了一个不包括最初接受的区块的经过验证更长链时，这些区块会被拒绝。它们不是主链的一部分，有时会发生在两个矿工同时生产区块的情况下。
- en: The latest block version is version 4, which was proposed with BIP65 and has
    been used since bitcoin core client 0.11.2 since the implementation of BIP9 bits
    in the `nVersion` field are being used to indicate soft fork changes.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 最新的区块版本是版本4，提出了BIP65，并自比特币核心客户端0.11.2实施BIP9位以来一直被使用，`nVersion`字段正在用于指示软分叉更改。
- en: Because of the distributed nature of bitcoin, network forks can occur naturally.
    In cases where two nodes simultaneously announce a valid block can result in a
    situation where there are two blockchains with different transactions. This is
    an undesirable situation but can be addressed by the Bitcoin network only by accepting
    the longest chain. In this case, the smaller chain will be considered orphaned.
    If an adversary manages to gain 51% control of the network hash rate (computational
    power), then they can impose their own version of transaction history.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 由于比特币的分布式本质，网络分叉可能会自然发生。在两个节点同时宣布一个有效区块的情况下，可能会导致两个具有不同交易的区块链的情况。这是一个不希望发生的情况，但只能通过比特币网络接受最长的链来解决。在这种情况下，较小的链将被视为孤块。如果对手设法控制网络哈希率（计算能力）的51%，那么他们可以强加自己的交易历史版本。
- en: Forks in blockchain can also occur with the introduction of changes in the Bitcoin
    protocol. In case of a *soft fork*, a client which chooses not to upgrade to the
    latest version supporting the updated protocol will still be able to work and
    operate normally. In this case, previous and new blocks are both acceptable, thus
    making soft fork backwards compatible.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链中的分叉也可以随着比特币协议的更改引入而发生。在软分叉的情况下，选择不升级到支持更新协议的最新版本的客户端仍然能正常工作和运行。在这种情况下，先前和新的区块都是可接受的，因此软分叉是向后兼容的。
- en: In case of a soft fork, only miners are required to upgrade to the new client
    software in order to make use of the new protocol rules. Planned upgrades do not
    necessarily create forks because all users should have updated already. A hard
    fork, on the other hand, invalidates previously valid blocks and requires all
    users to upgrade. New transaction types are sometimes added as a soft fork, and
    any changes such as block structure change or major protocol changes results in
    a hard fork. The current size of the bitcoin blockchain as of October 29, 2017,
    stands at approximately 139 GB.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在软分叉的情况下，只有矿工需要升级到新的客户端软件，以利用新的协议规则。计划的升级不一定会创建分叉，因为所有用户应该已经更新了。另一方面，硬分叉使以前有效的区块无效，并要求所有用户升级。新的交易类型有时被添加为软分叉，任何更改，例如区块结构更改或主要协议更改都会导致硬分叉。截至2017年10月29日，比特币区块链的当前大小约为139
    GB。
- en: 'The following diagram shows the size increase of blockchain as a function of
    time:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示显示了区块链大小随时间变化的情况：
- en: '![](img/fb9c5f6d-4a33-4445-ad95-a9c7afd4f9fa.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb9c5f6d-4a33-4445-ad95-a9c7afd4f9fa.png)'
- en: Current size of blockchain as of 29/10/2017
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2017年10月29日，区块链的当前大小为多少？
- en: New blocks are added to the blockchain approximately every 10 minutes and network
    difficulty is adjusted dynamically every 2016 blocks in order to maintain a steady
    addition of new blocks to the network.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 新的区块大约每10分钟添加到区块链上，并且网络难度每2016个区块动态调整，以保持对网络的新区块的稳定添加。
- en: 'Network difficulty is calculated using the following equation:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 网络难度是使用以下方程计算的：
- en: '*Target = Previous target * Time/2016 * 10 minutes*'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '*目标 = 先前的目标 * 时间/2016 * 10分钟*'
- en: Difficulty and target are interchangeable and represent the same thing. Previous
    target represents the old target value, and time is the time spent to generate
    previous 2016 blocks. Network difficulty basically means how hard it is for miners
    to find a new block, that is, how difficult the hashing puzzle is now.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 难度和目标是可以互换的，表示相同的意思。先前的目标表示旧的目标值，时间表示生成前2016个区块所花费的时间。网络难度基本上表示矿工发现新区块的难度，即现在哈希难题的难度如何。
- en: In the next section, mining is discussed, which will explain how the hashing
    puzzle is solved.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的一节中，将讨论挖矿，这将解释如何解决哈希难题。
- en: Mining
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挖矿
- en: Mining is a process by which new blocks are added to the blockchain. Blocks
    contain transactions that are validated via the mining process by mining nodes
    on the Bitcoin network. Blocks, once mined and verified are added to the blockchain
    which keeps the blockchain growing. This process is resource-intensive due to
    the requirements of PoW where miners compete in order to find a number which is
    less than the difficulty target of the network. This difficulty in finding the
    correct value (also called sometimes the mathematical puzzle) is there to ensure
    that the required resources have been spent by miners before a new proposed block
    can be accepted. New coins are minted by the miners by solving the PoW problem,
    also known as partial hash inversion problem. This process consumes a high amount
    of resources including computing power and electricity. This process also secures
    the system against frauds and double spending attacks while adding more virtual
    currency to the Bitcoin ecosystem.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 挖矿是将新区块添加到区块链的过程。区块包含通过比特币网络上的挖矿节点验证的交易。一旦挖矿和验证完成，区块就会被添加到保持不断增长的区块链中。这个过程由于PoW的要求而需要大量资源，其中矿工竞争找到一个小于网络难度目标的数字。找到正确值的难度（有时也称为数学难题）旨在确保矿工在新的建议区块被接受之前已经花费了必要的资源。矿工通过解决PoW问题，也称为部分哈希反演问题，铸造新的硬币。这个过程消耗大量资源，包括计算能力和电力。这个过程还通过向比特币生态系统增加更多虚拟货币来保护系统免受欺诈和双重花费攻击的侵害。
- en: Roughly one new block is created (mined) every 10 minutes to control the frequency
    of generation of bitcoins. This frequency needs to be maintained by the Bitcoin
    network and is encoded in the bitcoin core clients in order to control the *money
    supply*. Miners are rewarded with new coins if and when they discover new blocks
    by solving PoW. Miners are paid transaction fees in return for including transactions
    in their proposed blocks. New blocks are created at an approximate fixed rate
    of every 10 minutes. The rate of creation of new bitcoins decreases by 50%, every
    210,000 blocks, roughly every 4 years. When bitcoin was initially introduced,
    the block reward was 50 bitcoins; then in 2012, this was reduced to 25 bitcoins.
    In July 2016, this was further reduced to 12.5 coins (12 coins) and the next reduction
    is estimated to be on July 4, 2020\. This will reduce the coin reward further
    down to approximately six coins.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 大约每10分钟创建（挖掘）一个新区块，以控制比特币生成的频率。这个频率需要由比特币网络维护，并且编码在比特币核心客户端中，以控制*货币供应*。如果矿工通过解决PoW问题发现新的区块，则会获得新的比特币作为奖励。矿工通过包含交易来获得交易费用作为回报。新的区块以大约每10分钟的固定速率创建。每210,000个区块，大约每4年，新比特币的创造速率减少50%。比特币最初推出时，区块奖励为50个比特币；然后在2012年，将其减少为25个比特币。2016年7月，进一步减少为12.5个硬币（12个比特币），下一次减少预计在2020年7月4日。这将进一步将硬币奖励减少到大约六个比特币。
- en: Approximately 144 blocks, that is, 1,728 bitcoins are generated per day. The
    number of actual coins can vary per day; however, the number of blocks remains
    at 144 per day. Bitcoin supply is also limited and in 2140, almost 21 million
    bitcoins will be finally created and no new bitcoins can be created after that.
    Bitcoin miners, however, will still be able to profit from the ecosystem by charging
    transaction fees.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 每天产生大约144个区块，即1,728个比特币。实际的比特币数量每天可能有所不同，但每天的区块数保持在144个。比特币的供应也是有限的，在2140年，将最终创造近2100万比特币，并且此后将不会再创造新的比特币。然而，比特币矿工仍将通过收取交易费用从生态系统中获利。
- en: Tasks of the miners
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矿工的任务
- en: 'Once a node connects to the bitcoin network, there are several tasks that a
    bitcoin miner performs:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦节点连接到比特币网络，比特币矿工会执行以下几项任务：
- en: '**Synching up with the network**: Once a new node joins the bitcoin network,
    it downloads the blockchain by requesting historical blocks from other nodes.
    This is mentioned here in the context of the bitcoin miner; however, this not
    necessarily a task only for a miner.'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**与网络同步**: 一旦新节点加入比特币网络，它通过从其他节点请求历史区块来下载区块链。这里提到了比特币矿工的上下文中，但这并不一定只是矿工的任务。'
- en: '**Transaction validation**: Transactions broadcasted on the network are validated
    by full nodes by verifying and validating signatures and outputs.'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**交易验证**: 网络上广播的交易由完整节点通过验证和验证签名和输出进行验证。'
- en: '**Block validation**: Miners and full nodes can start validating blocks received
    by them by evaluating them against certain rules. This includes the verification
    of each transaction in the block along with verification of the nonce value.'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**区块验证**：矿工和完整节点可以从根据一定规则对接收到的区块进行验证开始验证这些区块。这包括验证区块中每个交易以及验证随机数值。'
- en: '**Create a new block**: Miners propose a new block by combining transactions
    broadcasted on the network after validating them.'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建一个新的区块**：矿工通过验证后，将网络上广播的交易组合到一起来提议一个新的区块。'
- en: '**Perform Proof of Work**: This task is the core of the mining process and
    this is where miners find a valid block by solving a computational puzzle. The
    block header contains a 32-bit nonce field and miners are required to repeatedly
    vary the nonce until the resultant hash is less than a predetermined target.'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**执行工作证明**：这个任务是挖矿过程的核心，挖矿者通过解决一个计算难题找到一个有效的区块。区块头包含一个32位的随机数字段，矿工需要反复改变随机数，直到结果哈希小于预定目标值。'
- en: '**Fetch reward**: Once a node solves the hash puzzle (PoW), it immediately
    broadcasts the results, and other nodes verify it and accept the block. There
    is a slight chance that the newly minted block will not be accepted by other miners
    on the network due to a clash with another block found at roughly the same time,
    but once accepted, the miner is rewarded with 12.5 bitcoins and any associated
    transaction fees.'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**获取奖励**：一旦一个节点解决了哈希难题（PoW），它立即广播结果，其他节点验证并接受区块。由于在大约同一时间发现另一个区块，新铸造的区块可能不会被网络上其他矿工接受，但一旦被接受，矿工将获得12.5比特币和任何相关的交易费用。'
- en: Mining rewards
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挖矿奖励
- en: When Bitcoin started in 2009 the mining reward used to be 50 bitcoins. After
    every 210,000 blocks, the block reward halves. In November 2012 it halved down
    to 25 bitcoins. Currently, it is 12.5 BTC per block since July 2016\. Next halving
    is on Friday, 12 June 2020 after which the block reward will be reduced down to
    6.25 BTC per block. This mechanism is hardcoded in Bitcoin to regulate, control
    inflation and limit the supply of bitcoins.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 当比特币在2009年开始时，挖矿奖励是50比特币。每210,000个区块后，区块奖励减半。2012年11月，它减半到25比特币。目前，自2016年7月以来，每个区块奖励为12.5比特币。下一次减半将在2020年6月12日星期五，之后区块奖励将减少到每个区块6.25比特币。比特币中硬编码了这个机制来调节、控制通货膨胀，并限制比特币的供应。
- en: Proof of Work (PoW)
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作证明（PoW）
- en: 'This is a proof that enough computational resources have been spent in order
    to build a valid block. PoW is based on the idea that a random node is selected
    every time to create a new block. In this model, nodes compete with each other
    in order to be selected in proportion to their computing capacity. The following
    equation sums up the PoW requirement in bitcoin:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 这是计算资源足够以构建有效区块的证明。PoW是基于随机节点每次被选中创建新区块的想法。在这个模型中，节点按其计算能力的比例竞争被选中。以下方程概括了比特币PoW要求：
- en: '*H ( N || P_hash || Tx || Tx || . . . Tx) < Target*'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '*H(N || P_hash || Tx || Tx || . . . Tx) < Target*'
- en: Where *N* is a nonce, *P_hash* is a hash of the previous block, *Tx* represents
    transactions in the block, and *Target* is the target network difficulty value.
    This means that the hash of the previously mentioned concatenated fields should
    be less than the target hash value.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 其中*N*是一个随机数，*P_hash*是前一个区块的哈希，*Tx*代表区块中的交易，*Target*是目标网络难度值。这意味着前面提到的连接字段的哈希应该小于目标哈希值。
- en: The only way to find this nonce is the brute force method. Once a certain pattern
    of a certain number of zeroes is met by a miner, the block is immediately broadcasted
    and accepted by other miners.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 找到这个随机数的唯一方法就是穷举法。一旦一个矿工满足了一定数量的零的某种模式，区块就会立即被广播并被其他矿工接受。
- en: The mining algorithm
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挖矿算法
- en: The mining algorithm consists of the following steps.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 挖矿算法包括以下步骤。
- en: The previous block's header is retrieved from the bitcoin network.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从比特币网络中检索先前区块的头部。
- en: Assemble a set of transactions broadcasted on the network into a block to be
    proposed.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将网络上广播的一组交易组合成一个要提议的区块。
- en: Compute the double hash of the previous block's header combined with a nonce
    and the newly proposed block using the SHA-256 algorithm.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算前一个区块头部与一个随机数和新提议的区块的双重哈希，使用SHA-256算法。
- en: Check if the resultant hash is lower than the current difficulty level (target)
    then PoW is solved. As a result of successful PoW the discovered block is broadcasted
    to the network and miners fetch the reward.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查结果哈希是否低于当前难度级别（目标），然后 PoW 就被解决了。成功完成 PoW 后，发现的区块将被广播到网络，矿工将获得奖励。
- en: If the resultant hash is not less than the current difficulty level (target),
    then repeat the process after incrementing the nonce.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果结果哈希不小于当前难度级别（目标），则在增加随机数后重复该过程。
- en: As the hash rate of the bitcoin network increased, the total amount of 32-bit
    nonce was exhausted too quickly. In order to address this issue, the extra nonce
    solution was implemented, whereby the coinbase transaction is used as a source
    of extra nonce to provide a larger range of nonce to be searched by the miners.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 随着比特币网络的哈希率增加，32 位随机数的总量耗尽得太快。为了解决这个问题，实施了额外的随机数解决方案，其中 Coinbase 交易被用作额外随机数的来源，以提供更大范围的随机数供矿工搜索。
- en: 'This process can be visualized by using the following flowchart:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程可以通过使用以下流程图来可视化：
- en: '![](img/16c99db2-37b5-443e-a912-70cce3ce594c.png)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16c99db2-37b5-443e-a912-70cce3ce594c.png)'
- en: Mining process
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 挖矿过程
- en: 'Mining difficulty increased over time and bitcoins that could be mined by single
    CPU laptop computers now require dedicated mining centers to solve the hash puzzle.
    The current difficulty level can be queried using the Bitcoin command-line interface
    using the following command:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，挖矿难度不断增加，而现在单个 CPU 笔记本电脑可以挖掘的比特币现在需要专用的挖矿中心来解决哈希难题。可以使用比特币命令行界面使用以下命令来查询当前的难度级别：
- en: '[PRE11]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This number represents the difficulty level of the Bitcoin network. Recall from
    previous sections that miners compete to find a solution to a problem. This number,
    in fact shows, that how difficult it is to find a hash which is lower than the
    network difficulty target. All successfully mined blocks must contain a hash that
    is less than this target number. This number is updated every 2 weeks or 2016
    blocks to ensure that on average 10-minute block generation time is maintained.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 此数字代表比特币网络的难度级别。从前面的部分可以得知，矿工竞争寻找问题的解决方案。实际上，这个数字显示了要找到比网络难度目标更低的哈希值有多困难。所有成功挖掘的区块必须包含一个哈希值，该哈希值低于此目标数字。此数字每隔
    2 周或 2016 个区块更新一次，以确保平均每 10 分钟生成一个区块。
- en: 'Bitcoin network difficulty has increased exponentially, the following graph
    shows this difficulty level over a period of one year:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币网络难度呈指数增长，以下图表显示了在一年内的这种难度水平：
- en: '![](img/315e4195-54dc-4041-a7cc-2c2b7aedb52d.png)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![](img/315e4195-54dc-4041-a7cc-2c2b7aedb52d.png)'
- en: Mining difficulty over the last year
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 过去一年的挖矿难度
- en: The preceding graph shows the difficulty of the Bitcoin network over a period
    of last year and it has increased quite significantly. The reason why mining difficulty
    increases is because in Bitcoin, the block generation time has to be always around
    10 minutes. This means that if blocks are being mined too quickly by fast hardware
    then the difficulty increases so that the block generation time can remain at
    roughly 10 minutes per block. This is also true in reverse if blocks are not mined
    every 10 minutes than the difficulty is decreased. Difficulty, is calculated every
    2016 blocks (in two weeks) and adjusted accordingly. If the previous set of 2016
    blocks were mined in less than a period of two weeks then difficulty will be increased.
    Similarly, if 2016 blocks were found in more than two weeks (If blocks are mined
    every 10 minutes then 2016 blocks take 2 weeks to be mined) then the difficulty
    is decreased.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表显示了过去一年比特币网络的难度，难度已经显着增加。挖矿难度增加的原因是因为在比特币中，区块生成时间必须始终约为 10 分钟。这意味着如果快速硬件快速挖掘区块，则会增加难度，以便区块生成时间保持大约每
    10 分钟一个区块。如果区块不是每 10 分钟挖掘一次，则难度会减小。难度，每 2016 个区块（两周）计算一次，并相应地进行调整。如果上一组 2016 个区块在两周内挖掘完毕，则难度将增加。同样，如果
    2016 个区块在两周以上找到（如果每 10 分钟挖掘一个区块，则 2016 个区块需要 2 周时间挖掘），则难度将减小。
- en: The hash rate
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希率
- en: The hashing rate basically represents the rate of calculating hashes per second.
    In other words, this is the speed at which miners in the Bitcoin network are calculating
    hashes to find a block. In early days of bitcoin, it used to be quite small as
    CPUs were used. However, with dedicated mining pools and ASICs now, this has gone
    up exponentially in the last few years. This has resulted in increased difficulty
    of the Bitcoin network. The following hash rate graph shows the hash rate increase
    over time and is currently measured in Exa hashes. This means that in 1 second,
    the Bitcoin network miners are computing more than 24,000,000,000,000,000,000
    hashes per second.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希率基本上表示每秒计算哈希的速率。换句话说，这是比特币网络中矿工计算哈希以找到一个区块的速度。在比特币早期，由于使用 CPU，哈希率曾经相当小。然而，随着现在专用的挖矿池和
    ASIC，过去几年里这个速度呈指数级增长。这导致了比特币网络难度的增加。下图显示了随时间增加的哈希率，并且目前以 Exa 哈希进行测量。这意味着比特币网络矿工每秒计算超过
    24,000,000,000,000,000,000 个哈希。
- en: '![](img/de70d053-019e-4d08-9684-dd561f4b42d0.png)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![哈希率（以 Exa-hashes 表示）截至 2018 年 3 月，在 1 年的时间内显示](img/de70d053-019e-4d08-9684-dd561f4b42d0.png)'
- en: Hashing rate (measured in Exa-hashes) as of March 2018, shown over a period
    of 1 year
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 2018 年 3 月的哈希率（以 Exa-hashes 表示），在 1 年的时间内显示
- en: Mining systems
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挖矿系统
- en: Over time, bitcoin miners have used various methods to mine bitcoins. As the
    core principle behind mining is based on the double SHA-256 algorithm, overtime
    experts have developed sophisticated systems to calculate the hash faster and
    faster. The following is a review of the different types of mining methods used
    in bitcoin and how they evolved with time.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，比特币矿工使用了各种方法来挖掘比特币。由于挖掘背后的核心原理是基于双重 SHA-256 算法，专家们随着时间的推移开发出了复杂的系统来越来越快地计算哈希。以下是比特币中使用的不同挖矿方法的回顾，以及它们随时间的演变。
- en: CPU
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CPU
- en: CPU mining was the first type of mining available in the original bitcoin client.
    Users could even use laptop or desktop computers to mine bitcoins. CPU mining
    is no longer profitable and now more advanced mining methods such as ASIC-based
    mining is used. CPU mining only lasted for around just over a year since the introduction
    of Bitcoin and soon other methods were explored and tried by the miners.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: CPU 挖矿是原始比特币客户端中可用的第一种挖矿类型。用户甚至可以使用笔记本电脑或台式电脑来挖比特币。CPU 挖矿已不再盈利，现在更先进的挖矿方法，如基于
    ASIC 的挖矿被使用。CPU 挖矿仅在比特币推出后的一年多一点的时间内持续存在，很快矿工们就开始尝试并探索其他方法。
- en: GPU
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GPU
- en: Due to the increased difficulty of the bitcoin network and the general tendency
    of finding faster methods to mine, miners started to use GPUs or graphics cards
    available in PCs to perform mining. GPUs support faster and parallelized calculations
    that are usually programmed using the OpenCL language. This turned out to be a
    faster option as compared to CPUs. Users also used techniques such as overclocking
    to gain maximum benefit of the GPU power. Also, the possibility of using multiple
    graphics cards increased the popularity of graphics cards' usage for bitcoin mining.
    GPU mining, however, has some limitations, such as overheating and the requirement
    for specialized motherboards and extra hardware to house multiple graphics cards.
    From another angle, graphics cards have become quite expensive due to increased
    demand and this has impacted gamers and graphic software users.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 由于比特币网络难度的增加以及寻找更快挖矿方法的普遍趋势，矿工开始使用 PC 中提供的 GPU 或图形处理器来进行挖矿。GPU 支持更快速和并行计算，通常使用
    OpenCL 语言编程。与 CPU 相比，这被证明是一种更快的选择。用户还使用超频等技术来充分利用 GPU 的性能。此外，使用多个显卡的可能性增加了使用显卡进行比特币挖矿的流行度。然而，GPU
    挖矿也有一些局限性，如过热以及需要专门的主板和额外的硬件来容纳多个显卡。从另一个角度来看，由于需求增加，显卡变得相当昂贵，这影响了玩家和图形软件用户。
- en: FPGA
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FPGA
- en: Even GPU mining did not last long, and soon miners found another way to perform
    mining using FPGAs. **Field Programmable Gate Array** (**FPGA**) is basically
    an integrated circuit that can be programmed to perform specific operations. FPGAs
    are usually programmed in **Hardware Description Languages** (**HDLs**), such
    as Verilog and VHDL. Double SHA-256 quickly became an attractive programming task
    for FPGA programmers and several open source projects started too. FPGA offered
    much better performance as compared to GPUs; however, issues such as accessibility,
    programming difficulty, and the requirement for specialized knowledge to program
    and configure FPGAs resulted in a short life of the FPGA era for bitcoin mining.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 即使GPU挖矿也没有持续太久，很快矿工们找到了另一种使用FPGA进行挖矿的方法。**现场可编程门阵列**（**FPGA**）基本上是可以编程执行特定操作的集成电路。FPGA通常使用**硬件描述语言**（**HDLs**）编程，如Verilog和VHDL。双SHA-256很快成为FPGA程序员的一个有吸引力的编程任务，并且有几个开源项目也开始了。与GPU相比，FPGA提供了更好的性能；然而，诸如可访问性、编程难度以及需要专业知识来编程和配置FPGA等问题导致了比特币挖矿FPGA时代的短暂寿命。
- en: The arrival of ASICs resulted in quickly phased out FPGA- based systems for
    mining. Mining hardware such as X6500 miner, Ztex, and Icarus were developed during
    the time when FPGA mining was profitable. Various FPGA manufacturers, such as
    Xilinx and Altera, produce FPGA hardware and development boards that can be used
    to program mining algorithms. It should be noted that GPU mining is still profitable
    for some other cryptocurrencies to some extent such as Zcoin ([https://zcoin.io/guide-on-how-to-mine-zcoin-xzc/](https://zcoin.io/guide-on-how-to-mine-zcoin-xzc/)),
    but not Bitcoin, because network difficulty of Bitcoin is so high that only ASICs
    (specialized hardware) running in parallel can produce some reasonable profit.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: ASIC的出现迅速淘汰了基于FPGA的挖矿系统。在FPGA挖矿盈利的时期，诸如X6500矿工、Ztex和Icarus等挖矿硬件被开发出来。各种FPGA制造商，如赛灵思和Altera，生产可以用于编程挖矿算法的FPGA硬件和开发板。值得注意的是，GPU挖矿对于某些其他加密货币在某种程度上仍然是盈利的，比如Zcoin（[https://zcoin.io/guide-on-how-to-mine-zcoin-xzc/](https://zcoin.io/guide-on-how-to-mine-zcoin-xzc/)），但对于比特币来说不是，因为比特币的网络难度非常高，只有运行在并行模式下的ASIC（专用硬件）才能产生一些合理的利润。
- en: ASICs
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASIC
- en: '**Application Specific Integrated Circuit** (**ASIC**) was designed to perform
    the SHA-256 operation. These special chips were sold by various manufacturers
    and offered a very high hashing rate. This worked for some time, but due to the
    quickly increasing mining difficulty level, single-unit ASICs are no longer profitable.'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '**特定应用集成电路**（**ASIC**）是为执行SHA-256操作而设计的。这些特殊芯片由各种制造商销售，并提供非常高的哈希速率。这在一段时间内有效，但由于挖矿难度水平迅速增加，单个ASIC已不再具有盈利性。'
- en: 'Currently, mining is out of the reach of individuals as vast amounts of energy
    and money is needed to be spent in order to build a profitable mining platform.
    Now professional mining centers using thousands of ASIC units in parallel are
    offering mining contracts to users to perform mining on their behalf. There is
    no technical limitation, a single user can run thousands of ASICs in parallel
    but it will require dedicated data centers and hardware, therefore, cost for a
    single individual can become prohibitive. The following are the four types of
    mining hardware:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，挖矿对个人来说已经不再可及，因为需要花费大量的能源和资金才能建立一个盈利的挖矿平台。现在，使用成千上万的ASIC单位并行的专业挖矿中心向用户提供挖矿合同，代表他们进行挖矿。技术上没有限制，单个用户可以并行运行成千上万个ASIC，但这将需要专用数据中心和硬件，因此，对于单个个人来说成本可能会成为一个障碍。以下是四种类型的挖矿硬件：
- en: '![](img/35ca995f-f594-4928-bbde-1d11baee195e.jpg)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35ca995f-f594-4928-bbde-1d11baee195e.jpg)'
- en: CPU
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: CPU
- en: '![](img/08f0f8d9-eda1-4dfd-a00e-d9c8872e1c8d.jpg)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08f0f8d9-eda1-4dfd-a00e-d9c8872e1c8d.jpg)'
- en: GPU
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: GPU
- en: '![](img/41ae9b33-430e-42fa-938d-5a851d4b04a6.jpg)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41ae9b33-430e-42fa-938d-5a851d4b04a6.jpg)'
- en: FPGA
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: FPGA
- en: '![](img/a6040ad5-ace3-48b3-b7fb-126bafebe2ae.jpg)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6040ad5-ace3-48b3-b7fb-126bafebe2ae.jpg)'
- en: ASIC
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: ASIC
- en: Mining pools
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挖矿池
- en: A mining pool forms when group of miners work together to mine a block. The
    pool manager receives the coinbase transaction if the block is successfully mined,
    which is then responsible for distributing the reward to the group of miners who
    invested resources to mine the block. This is profitable as compared to solo mining,
    where only one sole miner is trying to solve the partial hash inversion function
    (hash puzzle) because, in mining pools, the reward is paid to each member of the
    pool regardless of whether they (more specifically, their individual node) solved
    the puzzle or not.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 当一组矿工共同挖掘一个区块时，就形成了一个矿池。如果区块成功挖掘，矿池管理员将接收coinbase交易，然后负责将奖励分发给投资资源进行挖掘的一组矿工。这比独立挖矿更有利可图，因为在矿池中，奖励将支付给矿池的每个成员，而不管他们（更具体地说，他们的个人节点）是否解决了难题。
- en: There are various models that a mining pool manager can use to pay to the miners,
    such as the **Pay Per Share** (**PPS**) model and the proportional model. In the
    PPS model, the mining pool manager pays a flat fee to all miners who participated
    in the mining exercise, whereas in the proportional model, the share is calculated
    based on the amount of computing resources spent to solve the hash puzzle.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 矿池管理员可以使用各种模式来支付给矿工，例如**按份支付**（**PPS**）模式和比例模式。在PPS模式中，矿池管理员向所有参与挖矿的矿工支付固定费用，而在比例模式中，份额是根据用于解决哈希难题的计算资源量来计算的。
- en: 'Many commercial pools now exist and provide mining service contracts via the
    cloud and easy-to-use web interfaces. The most commonly used ones are AntPool
    ([https://www.antpool.com](https://www.antpool.com) ), BTC ([https://btc.com](https://btc.com)),
    and BTC TOP ([http://www.btc.top](http://www.btc.top)). A comparison of hashing
    power for all major mining pools is shown in the following diagram:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有许多商业矿池存在，并通过云和易于使用的网络界面提供挖矿服务合约。其中最常用的是AntPool ([https://www.antpool.com](https://www.antpool.com))、BTC
    ([https://btc.com](https://btc.com)) 和 BTC TOP ([http://www.btc.top](http://www.btc.top))。所有主要矿池的哈希功率比较如下图所示：
- en: '![](img/0f9e8aae-62f0-4f0d-8020-718c864db381.png)'
  id: totrans-395
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f9e8aae-62f0-4f0d-8020-718c864db381.png)'
- en: Mining pools and their hashing power (hash rate) as of 28/10/2017
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年10月28日的矿池及其哈希功率（哈希率）
- en: 'Source: https://blockchain.info/pools'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：[https://blockchain.info/pools](https://blockchain.info/pools)
- en: Mining centralization can occur if a pool manages to control more than 51% of
    the network by generating more than 51% hash rate of the Bitcoin network.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个矿池控制了比特币网络超过51%的哈希率，就可能发生挖矿集中化。
- en: As discussed earlier in the introduction section, a 51% attack can result in
    successful double-spending attacks, and it can impact consensus and in fact impose
    another version of transaction history on the Bitcoin network.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述的介绍部分所讨论的，51%攻击可能导致成功的双重支付攻击，它可能影响共识，事实上在比特币网络上施加另一版本的交易历史。
- en: This event has happened once in the Bitcoin history when GHash.IO, a large mining
    pool, managed to acquire more than 51% of the network capacity. Theoretical solutions,
    such as two-phase PoW ([http://hackingdistributed.com/2014/06/18/how-to-disincentivize-large-bitcoin-mining-pools/](http://hackingdistributed.com/2014/06/18/how-to-disincentivize-large-bitcoin-mining-pools/)),
    have been proposed in academia to disincentivize large mining pools. This scheme
    introduces a second cryptographic puzzle that results in mining pools to either
    reveal their private keys or provide a considerable portion of the hash rate of
    their mining pool, thus reducing the overall hash rate of the pool.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 这种事件在比特币历史上曾经发生过一次，当时一家名为GHash.IO的大型矿池成功获得了超过51%的网络容量。理论上的解决方案，如两阶段PoW ([http://hackingdistributed.com/2014/06/18/how-to-disincentivize-large-bitcoin-mining-pools/](http://hackingdistributed.com/2014/06/18/how-to-disincentivize-large-bitcoin-mining-pools/))，已经在学术界提出，以防止大型矿池。该方案引入了第二个加密难题，导致矿池要么透露他们的私钥，要么提供他们矿池的相当一部分哈希率，从而降低矿池的总体哈希率。
- en: Various types of hardware are commercially available for mining purposes. Currently,
    the most profitable one is ASIC mining, and specialized hardware is available
    from a number of vendors such as Antminer, AvalonMiner and Whatsminer. Solo mining
    is not much profitable now unless a vast amount of money and energy is spent to
    build your own mining rig or even a data center. With the current difficulty factor
    (March 2018), if a user manages to produce a hash rate of 12 TH/s, they can hope
    to make 0.0009170 BTC (around $6) per day, which is very low as compared to the
    investment required to source the equipment that can produce 12 TH. Including
    running costs such as electricity, this turns out to be not very profitable.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，有各种类型的硬件可供商业用于挖矿。目前，最赚钱的是ASIC挖矿，来自一些供应商如蚂蚁矿机（Antminer）、AvalonMiner和Whatsminer。目前，独立挖矿除非投入大量资金和能源建立自己的挖矿设备甚至数据中心，否则收益不高。根据当前的难度系数（2018年3月），如果用户设法产生12
    TH/s的哈希率，他们可能每天希望获得0.0009170 BTC（约6美元），与购买可以产生12 TH/s的设备所需的投资相比，这很低。考虑到电费等运行成本，这并不是很有利可图。
- en: For example, Antminer S9, is an efficient ASIC miner which produces hash power
    of 13.5 TH/s and it seems that it can produce some profit per day, which is true
    but a single Antminer S9 costs around 1700 GBP and combining it with electricity
    cost the return on investment is almost after a year's mining when it produces
    around 0.3 BTC. It may seem still OK, to invest but also think about the fact
    that the Bitcoin network difficulty keeps going up with time and during a year
    it will become more difficult to mine and the mining hardware will run out its
    utility in a few months.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Antminer S9是一种有效的ASIC矿工，可以产生13.5 TH/s的哈希功率，看起来它每天可以产生一些利润是正确的，但单个Antminer
    S9的成本约为1700英镑，加上电费后，投资回报几乎需要一年的时间，当它产生大约0.3 BTC时。也许看起来还可以投资，但也要考虑到比特币网络难度会随着时间的推移不断上升，在一年内挖矿会变得更加困难，并且挖矿硬件在几个月内就会失去用途。
- en: Summary
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We started this chapter by introducing Bitcoin and how a transaction works from
    a user's point of view. Then, we presented an introduction to transactions from
    a technical point of view. Later we discussed public and private keys that are
    used in Bitcoin.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过介绍了比特币以及从用户角度讲述了交易如何工作的方式来开始本章。然后，我们从技术角度介绍了交易的概念。随后，我们讨论了在比特币中使用的公钥和私钥。
- en: In the following section, we presented addresses and its different types, following
    it with a discussion on transactions, its types, and usage. Next, we looked at
    blockchain with a detailed explanation regarding how blockchain works and what
    various components are included in the Bitcoin blockchain.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们介绍了地址及其不同类型，并讨论了交易及其类型和用途。接下来，我们详细解释了区块链的运作方式以及比特币区块链中包含的各种组件。
- en: In the last few sections of the chapter, we presented the mining process and
    relevant concepts.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后几节中，我们介绍了挖矿过程和相关概念。
