- en: Decentralization Versus Distributed Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分散化与分布式系统
- en: One of the biggest misconceptions in the blockchain space is between distributed
    systems and decentralized systems. In this chapter, we are going to discuss both
    types of systems, why they matter, their similarities, their differences, and
    how blockchain technology can fit into both categories.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链领域最大的误解之一在于分布式系统与去中心化系统之间的区别。在本章中，我们将讨论这两种类型的系统，它们为什么重要，它们的相似之处，它们的不同之处，以及区块链技术如何适用于这两个类别。
- en: 'By the end of this chapter, you should be able to do the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，你应该能够做到以下事情：
- en: Define a distributed system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义分布式系统
- en: Define a decentralized system
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义去中心化系统
- en: Understand the benefits and drawbacks of distributed systems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解分布式系统的优缺点
- en: Understand the benefits and drawbacks of decentralized systems
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解去中心化系统的优缺点
- en: Distributed systems
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式系统
- en: A **distributed system** is one in which the application and its architecture
    is distributed over a large number of machines and preferably physical locations.
    More simply, a distributed system is one where the goal of the system is spread
    out across multiple sub-systems in different locations. This means that multiple
    computers in multiple locations must coordinate to achieve the goals of the overall
    system or application. This is different than monolithic applications, where everything
    is bundled together.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**分布式系统**是指应用程序及其架构分布在大量机器和最好是物理位置之间。更简单地说，分布式系统是指系统的目标分布在不同位置的多个子系统之间。这意味着多台计算机在多个位置上必须协调以实现整个系统或应用程序的目标。这与单片应用程序不同，单片应用程序将所有内容捆绑在一起。'
- en: Let's take the example of a simple web application. A basic web application
    would run with processing, storage, and everything else running on a single web
    server. The code tends to run as a monolith—everything bundled together. When
    a user connects to the web application, it accepts the HTTP request, uses code
    to process the request, accesses a database, and then returns a result.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个简单的 Web 应用程序为例。基本的 Web 应用程序会在单个 Web 服务器上运行处理、存储和其他所有内容。代码往往以单体形式运行——所有内容都捆绑在一起。当用户连接到
    Web 应用程序时，它会接受 HTTP 请求，使用代码处理请求，访问数据库，然后返回结果。
- en: 'The advantage is that this is very easy to define and design. The disadvantage
    is that such a system can only scale so much. To add more users, you have to add
    processing power. As the load increases, the system owner cannot just add additional
    machines because the code is not designed to run on multiple machines at once.
    Instead, the owner must buy more powerful and more expensive computers to keep
    up. If users are coming from around the globe, there is another problem—some users
    who are near the server will get fast responses, whereas users farther away will
    experience some lag. The following diagram illustrates a single, monolithic code
    base building to a single artifact:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 优点是这样很容易定义和设计。缺点是这样的系统只能扩展到一定程度。要添加更多用户，必须增加处理能力。随着负载的增加，系统所有者不能只是添加额外的机器，因为代码没有设计成可以同时在多台机器上运行。相反，所有者必须购买更强大、更昂贵的计算机来跟上。如果用户来自全球各地，还有另一个问题——一些接近服务器的用户将获得快速响应，而距离更远的用户将会有一些延迟。下图说明了单一的、单片代码构建到单一构件的情况：
- en: '![](img/c21e16e1-af55-45b3-9cc1-a403fb732eec.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c21e16e1-af55-45b3-9cc1-a403fb732eec.png)'
- en: 'What happens if the computer running this application has a fault, a power
    outage, or is hacked? The answer is that the entire system goes down entirely.
    For these reasons, businesses and applications have become more and more distributed. Distributed
    systems typically fall into one of several basic architectures: client–server,
    three-tier, n-tier or peer-to-peer. Blockchain systems are typically peer-to-peer,
    so that is what we will discuss here.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行此应用程序的计算机出现故障、停电或被黑客入侵会发生什么？答案是整个系统会完全崩溃。出于这些原因，企业和应用程序变得越来越分布式。分布式系统通常分为客户端-服务器、三层、多层或点对点几种基本架构。区块链系统通常是点对点的，因此我们将在这里讨论这一点。
- en: 'The advantages of a distributed system are many, and they are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式系统的优点有很多，如下所示：
- en: '**Resiliency**: If part of the system fails, the entire system does not fail'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性**：如果系统的某个部分出现故障，整个系统不会失败'
- en: '**Redundancy**: Each part of the system can be built to have backups so that
    if it fails another copy can be used instead, sometimes instantly'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冗余性**：系统的每个部分都可以构建备份，以便在出现故障时可以使用另一个副本，有时可以立即使用'
- en: '**Parallelism**: Work can be divided up efficiently so that many inexpensive
    computers can be used instead of a single (very expensive) fast computer'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行性**：工作可以有效地分割，这样就可以使用许多廉价的计算机而不是一个昂贵的快速计算机'
- en: Resiliency
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弹性
- en: Resiliency is the ability of a system to adapt and keep working in response
    to changes and challenges. Resiliency can only be discussed in the context of
    the types of events that a system is resilient towards. A system might be resilient
    to a few computers getting turned off but may not be resilient to nuclear war.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性是系统适应和持续工作以应对变化和挑战的能力。弹性只能讨论在系统具有弹性的事件类型的情况下。系统可能对关闭一些计算机具有弹性，但对核战争可能没有弹性。
- en: 'Resiliency can be broken down into different sub-categories:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性可以分解为不同的子类别：
- en: '**Fault tolerance**: The ability of the system to deal with invalid states,
    bad data, and other problems'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容错**：系统处理无效状态、错误数据和其他问题的能力'
- en: '**Failure isolation**: A problem in one part of the system does not infect
    other parts of the system. Bad data or system failure in one place does not result
    in problems elsewhere'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障隔离**：系统的一部分出现问题不会影响到系统的其他部分。某处出现的错误数据或系统故障不会导致其他地方出现问题'
- en: '**Scalability**: A scalable system under heavy use is able to provide additional
    capacity and is thus resilient to load'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可伸缩性**：在高负荷下能够提供额外容量的可伸缩系统对负载具有弹性'
- en: '**Complexity management**: A system that has ways of managing complexity helps
    it be resilient against human errors'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂性管理**：一种有办法管理复杂性的系统有助于使其对人为错误有弹性'
- en: We will now discuss fault tolerance in more detail.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更详细地讨论容错。
- en: Fault tolerance and failure isolation
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容错能力和故障隔离
- en: 'A system is said to be fault tolerant when it is capable of operating even
    if some of the pieces fail or malfunction. Typically, fault tolerance is a matter
    of degree: where the level of sub-component failure is either countered by other
    parts of the system or the degradation is gradual rather than an absolute shutdown.
    Faults can occur on many levels: software, hardware, or networking. A fault tolerant
    piece of software needs to continue to function in the face of a partial outage
    along any of these layers.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当某些部分出现故障或失灵时，系统仍能够运行的系统被认为是具有容错能力的。通常，容错是个依赖程度的问题：子组件的故障水平要么被系统的其他部分抵消，要么是逐渐退化而不是绝对的关闭。故障可能发生在许多不同的层次：软件、硬件或网络。具有容错能力的软件需要在这些层次的任何部分出现部分中断时继续运行。
- en: In a blockchain, fault tolerance on the individual hardware level is handled
    by the existence of multiple duplicate computers for every function—the miners
    in bitcoin or proof of work systems or the validators in PoS and related systems.
    If a computer has a hardware fault, then either it will not validly sign transactions
    in consensus with the network or it will simply cease to act as a network node—the
    others will take up the slack.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链中，个别硬件层面的容错是通过每个功能的存在多个重复计算机来处理的-比特币或工作证明系统中的矿工或PoS和相关系统中的验证者。如果计算机出现硬件故障，那么它要么不会有效地签署与网络一致的交易，要么它将停止充当网络节点——其他计算机会接管。
- en: Consensus and coordination
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一致性和协调
- en: One of the most important aspects of blockchain is the concept of consensus.
    We will discuss the different ways blockchains achieve consensus in [Chapter 7](7f407309-5d34-464d-90fb-7d563834b8f8.xhtml),
    *Achieving Consensus*. For now, it is enough to understand that most blockchain
    networks have protocols that allow them to function as long as two thirds to slightly
    over one-half of the computers on the network are functioning properly, though
    each blockchain network has different ways of ensuring this which will be covered
    in future chapters.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链的最重要的方面之一就是共识的概念。我们将在[第7章](7f407309-5d34-464d-90fb-7d563834b8f8.xhtml)中讨论区块链实现共识的不同方法，*实现共识*。暂时来说，理解大多数区块链网络都有协议，允许它们只要网络上的计算机有三分之二到略高于一半正常运行，就能正常工作就足够了，虽然每个区块链网络都有不同的方法来保证这一点，这将在未来的章节中介绍。
- en: Backups
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备份
- en: In most blockchains, each computer acting as a full participant in the network
    holds a complete copy of all transactions that have ever happened since the launch
    of the network. This means that even under catastrophic duress, as long as a fraction
    of the network computers remains functional, a complete backup will exist.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数区块链中，每台计算机作为网络中的全参与者，保存了自网络启动以来发生的所有交易的完整副本。这意味着，即使在灾难压力下，只要网络中的一小部分计算机保持正常运行，就会存在一个完整的备份。
- en: In PoS chains, there tends to be far fewer full participants so the number of
    backups and distribution is far less. So far, this reduced level of redundancy
    has not been an issue.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PoS 链中，通常会有更少的全参与者，因此备份和分布的数量要少得多。到目前为止，这种减少的冗余级别还没有成为问题。
- en: Consistency
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一致性
- en: As discussed in prior chapters, hashing and the Merkle root of all transactions
    and behaviors on the blockchain allow for an easy calculation of consistency.
    If consistency is broken on a blockchain, it will be noticed instantly. Blockchains
    are designed to never be inconsistent. However, just because data is consistent
    does not mean it is accurate. These issues will be discussed in [Chapter 21](65a43e7c-9c97-416c-8969-3cffeb93179e.xhtml), *Scalability
    and Other Challenges*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前的章节中所讨论的，区块链上的哈希和所有交易和行为的 Merkle 根允许轻松计算一致性。如果区块链上的一致性被打破，将会立即被注意到。区块链被设计为永远不会不一致。但只因数据一致，并不意味着它正确。这些问题将在第
    21 章《[可扩展性和其他挑战](65a43e7c-9c97-416c-8969-3cffeb93179e.xhtml)》中讨论。
- en: Peer-to-peer systems
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对等系统
- en: Most computer systems in use today are client–server. A good example is your
    web browser and typical web applications. You load up Google Chrome or another
    browser, go to a website, and your computer (the client) connects to the server.
    All communication on the system is between you and the server. Any other connections
    (such as chatting with a friend on Facebook) happen with your client connected
    to the server and the server connected to another client with the server acting
    as the go-between.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 今天大多数使用的计算机系统都是客户端-服务器。一个很好的例子是你的网络浏览器和典型的 web 应用程序。你打开 Google Chrome 或其他浏览器，访问一个网站，你的计算机（客户端）连接到服务器。系统上所有的通信都是在你和服务器之间进行的。任何其他连接（比如在
    Facebook 上与朋友聊天）都是由你的客户端连接到服务器，然后服务器再连接到另一个客户端，服务器起到中间人的作用。
- en: Peer-to-peer systems are about cutting out the server. In a peer-to-peer system,
    your computer and your friend's computer would connect directly, with no server
    in between them.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对等系统是关于剔除服务器的。在对等系统中，你的计算机和你朋友的计算机会直接连接，中间没有服务器。
- en: 'The following is a diagram that illustrates the peer-to-peer architecture:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是说明对等架构的示意图：
- en: '![](img/dd3aa559-0ef1-4c5c-82fd-8e804f0907c2.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd3aa559-0ef1-4c5c-82fd-8e804f0907c2.png)'
- en: Decentralized systems
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分散式系统
- en: All decentralized systems must be distributed. But distributed systems are not
    necessarily decentralized. This is confusing to many people. If a distributed
    system is one spread across many computers, locations, and so on, how could it
    be centralized?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所有分散系统都必须是分布式的。但分布式系统不一定是分散的。这对很多人来说是困惑的。如果一个分布式系统是分布在许多计算机、位置等等之间，那么它怎么可能是集中的呢？
- en: The difference has to do with location and redundancy versus control. Centralization
    in this context has to do with control. A good example to showcase the difference
    between distributed and decentralized systems is Facebook. Facebook is a highly
    distributed application. It has servers worldwide, running thousands of variations
    on its software for testing. Any of its data centers could experience failure
    and most of the site functionality would continue. Its systems are distributed
    with fault tolerance, extensive coordination, redundancy, and so on.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种差异涉及到位置和冗余与控制。在这种情况下，集中化涉及到控制。一个很好的例子来展示分布式和分散式系统的区别是 Facebook。Facebook 是一个高度分布式的应用程序。它在全球范围内拥有服务器，运行着数千种的软件变体进行测试。它的任何数据中心都可能出现故障，但大部分网站功能仍将继续运行。它的系统是分布式的，具有容错性、广泛协调、冗余等等。
- en: Yet, those services are still centralized because, with no input from other
    stakeholders, Facebook can change the rules. Millions of small businesses use
    and depend on Facebook for advertising. Groups that have migrated to Facebook
    could suddenly find their old messages, work, and ability to connect revoked—with
    no recourse. Facebook has become a platform others depend on but with no reciprocal
    agreement of dependability. This is a terrible situation for all those groups,
    businesses, and organizations that depend on the Facebook platform in part or
    on the whole.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些服务仍然是集中化的，因为在没有其他利益相关者的参与的情况下，Facebook 可以改变规则。数百万小型企业使用并依赖 Facebook 进行广告。迁移到
    Facebook 的群体可能会突然发现他们的旧信息、工作和连接能力被撤销，而且没有追索权。Facebook 已经成为其他人依赖但没有相互依赖协议的平台。对于所有依赖
    Facebook 平台的群体、企业和组织来说，这是一个可怕的情况，部分或全部地依赖 Facebook 平台。
- en: The last decade has brought to the forefront a large number of highly distributed
    yet highly centralized platform companies —Facebook, Alphabet, AirBnB, Uber, and
    others—that provide a marketplace between peers but are also almost completely
    unbeholden to their users. Because of this situation, there is a growing desire
    for decentralized applications and services. In a decentralized system, there
    is no central overwhelming stakeholder with the ability to make and enforce rules
    without the permission of other network users.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 过去十年间，出现了大量高度分布但高度集中的平台公司——Facebook、Alphabet、AirBnB、Uber 等，它们为同行之间提供了一个市场，但几乎完全不受其用户的约束。由于这种情况，人们越来越希望去中心化的应用和服务。在去中心化系统中，没有中央压倒性的利益相关者有能力在没有其他网络用户许可的情况下制定和执行规则。
- en: Principles of decentralized systems
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原则上的去中心化系统
- en: 'Like distributed systems, decentralization is a sliding scale more than an
    absolute state of being. To judge how decentralized a system is, there are a number
    of factors to consider. We''re going to look at factors that have particular relevance
    to blockchain and decentralized applications and organizations. They are the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 像分布式系统一样，去中心化更多地是一个滑动的比例，而不是绝对的状态。要评判一个系统的去中心化程度，有许多因素需要考虑。我们将要考虑对区块链和去中心化应用和组织特别相关的因素。它们如下：
- en: Open access
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开放式访问
- en: Non-hierarchy
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非层次化
- en: Diversity
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多样性
- en: Transparency of operation
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运作透明
- en: Open access
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开放式访问
- en: By definition, any system that is practically or logically closed will be at
    least somewhat centralized. A system that is closed is automatically centralized
    to the pre-existing actors. As with all other aspects of decentralized systems,
    this is not a binary yes/no but more of a sliding scale of possibility.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 按定义，任何实际上或逻辑上封闭的系统都至少在某种程度上是集中化的。一个封闭的系统自动地集中在先前的行为者身上。正如去中心化系统的所有其他方面一样，这不是二进制的是/否，而更像是可能性的滑动比例。
- en: The early internet was seen as revolutionary in part because of its open access
    nature and the ability for anyone (with a computer, time, and access) to get online
    and begin trading information. Similarly, blockchain technologies have so far
    been open for innovation and access.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的互联网被认为是革命性的一部分，部分原因是由于它的开放式访问性质和任何人（只要有电脑、时间和接入）都可以上网并开始交换信息的能力。同样，迄今为止，区块链技术一直保持着开放式的创新和访问。
- en: Non-hierarchical
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非层次化
- en: A hierarchical system is the one commonly found within companies and organizations.
    People at the top of a hierarchy have overwhelming power to direct resources and
    events. A hierarchy comes in different extremes. At one extreme, you could have
    a system wherein a single arbiter holds absolute power. At the other extreme,
    you could have a system where each member of the system holds identical direct
    power and therefore control exists through influence, reputation, or some other
    form of organizational currency.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 层次结构系统通常在公司和组织中普遍存在。在层次结构的顶端的人拥有压倒性的权力来指导资源和事件。层次结构有不同的极端。在一个极端，你可能有一个仲裁者拥有绝对权力的系统。在另一个极端，你可能有一个每个系统成员都拥有相同直接权力的系统，因此控制是通过影响力、声誉或某种其他形式的组织货币来实现的。
- en: In blockchain, a few forms of non-hierarchical patterns have emerged. The first
    is in proof-of-work mining systems. All miners are fundamentally equal participants
    in the blockchain, but their influence is proportional to the computing resources
    they make available to the network.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在区块链领域，出现了几种非层次结构的形式。首先是在工作量证明挖矿系统中。所有矿工在区块链中基本上是平等的参与者，但他们的影响力与他们向网络提供的计算资源成比例。
- en: In PoS blockchain systems, the power is distributed based on the level of investment/stake
    in the protocol of a specific. In this case, decentralization is achieved both
    through mass adoption as well as competition with other chains. If one chain becomes
    too centralized, nothing stops users from migrating to a different one.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在PoS区块链系统中，权力是基于特定协议的投资/股份水平分布的。在这种情况下，去中心化是通过大规模采用以及与其他链的竞争实现的。如果一个链变得过于集中化，没有什么可以阻止用户迁移到另一个链。
- en: How decentralized these systems will remain over time is an open question.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些系统随着时间的推移将保持多么去中心化是一个开放的问题。
- en: Ecosystem diversity
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生态系统多样性
- en: 'Open access naturally leads to another trait of decentralized systems: diversity.
    A diverse system stands in opposition to monoculture. In technology, a monoculture
    is the overwhelming prevalence of a single system, such as the dominance of Windows,
    which persisted for a long time in corporate America.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 开放访问自然而然地导致去中心化系统的另一个特性：多样性。多样性系统与单一文化相对立。在技术上，单一文化是单一系统的压倒性优势，比如在美国企业界长期存在的Windows的主导地位。
- en: Transparency
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 透明度
- en: One of the ways power can be centralized in a system is through information
    dominance, where one set of actors in a system has access to more or greater information
    than other actors. In most current blockchain technology, each participant on
    the chain gets the same amount of information. There are some exceptions. Hyperledger
    Fabric, for instance, has the capacity to have information hiding from participants.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个系统中，权力集中的一种方式是通过信息主导，即一个系统中的某一组参与者拥有比其他参与者更多或更大的信息访问权。在大多数当前的区块链技术中，链上的每个参与者获得相同数量的信息。也有一些例外。比如，Hyperledger
    Fabric有能力让参与者隐藏信息。
- en: The ability to have perfectly enforced transparency is one of the drivers of
    interest in blockchain systems. By creating transparent and unforgettable records,
    blockchain has an obvious utility for logistics and legal record keeping. With
    records on a blockchain, it is possible to know for certain that data was not
    altered. A transparent blockchain also ensures a level of fairness—participants
    can all be sure that at a minimum there is a shared level of truth available to
    all which will not change.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 具有完全强制性透明度的能力是人们对区块链系统感兴趣的驱动因素之一。通过创建透明且不可忘记的记录，区块链在物流和法律记录方面具有明显的实用性。在区块链上的记录，可以确保数据未被更改。透明的区块链还确保了公平性水平——参与者都可以确信，至少有一个共享的真相水平供所有人使用，而这种水平不会改变。
- en: Downsides
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弊端
- en: 'Decentralized systems are not without their downsides. Here are a few key issues
    with decentralized systems that have specific relevance to blockchain:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化系统并非没有其缺点。以下是与区块链相关的去中心化系统的一些关键问题：
- en: Speed
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 速度
- en: Censorship resistance
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抗审查性
- en: Chaos/non-determinism
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混乱/非确定性
- en: Speed
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 速度
- en: Centralized systems and decentralized systems tend to be faster or slower at
    dealing with certain types of events. Blockchains are decentralized systems of
    record keeping. One way to think about a basic blockchain such as bitcoin is that
    it is an append-only database. Bitcoin can handle approximately seven transactions
    a second. By comparison, Visa and MasterCard are distributed (but not decentralized)
    transaction-handling systems that can handle more than 40,000 transactions a second.
    Blockchain systems continue to increase in speed but typically at with the trade-off
    of some amount of centralization or restrictions on access. Some PoS systems such
    as Tendermint or Waves have a theoretical throughput of over 1,000 tx/second but
    are still far from the peak capacity of their traditional counterparts.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 集中化系统和去中心化系统在处理某些类型事件时往往会更快或更慢。区块链是分布式的记账系统。理解基本区块链，比如比特币，可以认为它是一个仅能追加的数据库。比特币每秒可以处理大约七笔交易。相比之下，Visa和MasterCard是分布式（但不是去中心化）的交易处理系统，每秒可以处理超过40,000笔交易。区块链系统的速度继续增加，但通常以一定程度的中心化或对访问的限制作为交换。一些PoS系统，如Tendermint或Waves，理论吞吐量超过1,000
    tx/秒，但仍远远低于其传统对应系统的峰值容量。
- en: Censorship resistance
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抗审查性
- en: Decentralized systems tend to be much harder to censor because of a lack of
    a central authority to do the censoring. For free-speech and free-information
    purists, this is not seen as a downside in the slightest. However, some information
    (child pornography, hate speech, bomb-making instructions) is seen as dangerous
    or immoral for public dissemination and therefore should be censored. As a technology,
    anything actually written into the blockchain is immutable once the block holding
    that information is finished. For instance, Steemit is a blockchain-based social
    blogging platform where each post is saved to the chain. Once each block is finalized,
    the data cannot be removed. Clients of the system could choose not to show information,
    but the information would still be there for those who wanted to look.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化系统由于缺乏中央权威机构进行审查而往往更难以审查。对于言论自由和信息自由的纯粹主义者来说，这一点根本不被视为缺点。然而，一些信息（儿童色情、仇恨言论、制造炸弹的指令）被视为危险或不道德的公开传播，因此应该被审查。作为一种技术，一旦包含该信息的区块完成，写入区块链的任何内容都是不可变的。例如，Steemit是一个基于区块链的社交博客平台，每篇帖子都保存在链上。一旦每个区块被最终确定，数据就无法删除。系统的客户端可以选择不显示信息，但信息仍然存在，供想要查看的人使用。
- en: The desire for censorship extends to self-censorship. Content written to the
    change is immutable—even for its author. For instance, financial transactions
    done via bitcoin can never be hidden from authorities. While bitcoin is anonymous,
    once a person is attached to a bitcoin wallet, it is possible to easily track
    every transaction ever done since the beginning of the blockchain.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对审查的渴望延伸到自我审查。写入区块链的内容是不可变的，即使对于其作者也是如此。例如，通过比特币进行的金融交易永远无法向当局隐藏。虽然比特币是匿名的，但一旦一个人与比特币钱包相关联，就可以轻松追踪自区块链开始以来的每一笔交易。
- en: Because of this, a blockchain-based national currency would allow perfect taxation—due
    to perfect financial surveillance of the chain. Censorship resistance is thus
    a double-edged sword.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，基于区块链的国家货币将允许完美的税收——由于对链的完美财务监控。因此，抗审查性质具有双重性。
- en: Chaos and non-determinism
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混沌和非确定性
- en: Decentralized systems tend to be much more chaotic than centralized ones by
    their nature. In a decentralized system, each actor works according to their own
    desires and not the demands of an overarching authority. Because of this, decentralized
    systems are difficult to predict.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化系统往往比集中式系统更加混乱，这是它们的天性。在去中心化系统中，每个参与者都按照自己的意愿行事，而不是按照一个全面性权威的要求。因此，去中心化系统很难预测。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have discussed the difference between distributed systems
    and decentralized systems and gone over some of the key features. You should now
    understand how each decentralized system is also a distributed system and some
    of the key aspects of each concept.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了分布式系统与去中心化系统之间的区别，并介绍了一些关键特性。您现在应该了解到每个去中心化系统也是一个分布式系统，以及每个概念的一些关键方面。
- en: In the next chapter, we will start looking at how these things work in practice.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始研究这些东西在实践中的运作。
