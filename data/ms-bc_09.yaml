- en: Chapter 9. Hyperledger
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 Hyperledger
- en: Hyperledger is not a blockchain, but it is a project that was initiated by Linux
    foundation in December 2015 to advance blockchain technology. This project is
    a collaborative effort by its members to build an open source distributed ledger
    framework that can be used to develop and implement cross-industry blockchain
    applications and systems. The key focus is to build and run platforms that support global
    business transactions. The project also focuses on improving the reliability and
    performance of blockchain systems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger 不是一种区块链，而是 Linux 基金会于 2015 年 12 月发起的一个项目，旨在推进区块链技术。该项目是其成员的协作努力，旨在构建一个可以用于开发和实施跨行业区块链应用和系统的开源分布式分类帐框架。其关键重点是构建和运行支持全球业务交易的平台。该项目还专注于改善区块链系统的可靠性和性能。
- en: Projects under Hyperledger undergo various stages of development, starting from
    **proposal** to **incubation** and graduating to an **active** state. Projects
    can also be **deprecated** or in **End of Life** state where they are no longer
    actively developed. In order for a project to be able to move into incubation
    stage, it must have a fully working code base along with an active community of
    developers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger 旗下的项目经历各种开发阶段，从**提案**到**孵化**再到**活跃**状态。项目也可能被**废弃**或处于**终止生命周期**状态，不再进行活跃开发。要使项目能够进入孵化阶段，必须拥有完全可用的代码库以及一支活跃的开发者社区。
- en: Projects
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目
- en: 'Currently, there are six projects under the Hyperledger umbrella: Fabric, Iroha,
    Sawtooth lake, blockchain explorer, Fabric chaintool, and Fabric SDK Py. Corda
    is the most recent addition that is expected to be added to the Hyperledger project.
    The Hyperledger project currently has 100 members and is very active with more
    than 120 contributors, with regular meet-ups and talks being organized around
    the globe.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Hyperledger 旗下有六个项目：Fabric、Iroha、Sawtooth lake、blockchain explorer、Fabric
    chaintool 和 Fabric SDK Py。最近加入的项目是 Corda，预计将被纳入 Hyperledger 项目。Hyperledger 项目目前有
    100 名成员，活跃度很高，有超过120名贡献者，全球范围内经常组织meet-up和讲座。
- en: A brief introduction of all these projects follows, after which we will provide
    more details around the design, architecture, and implementation of Fabric and
    Sawtooth lake.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下简要介绍这些项目，之后我们将提供有关 Fabric 和 Sawtooth lake 的设计、架构和实现的更多细节。
- en: Fabric
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fabric
- en: Fabric is a blockchain project that was proposed by IBM and **DAH** (**Digital
    Asset Holdings**). This is intended to provide a foundation for the development
    of blockchain solutions and is based on pluggable architecture where various components,
    such as consensus algorithm, can be plugged into the system as required. It is
    available at [https://github.com/hyperledger/fabric](https://github.com/hyperledger/fabric).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric 是由 IBM 和 **数字资产控股（Digital Asset Holdings）** 提出的区块链项目。其意图是为区块链解决方案的开发提供基础，其基础架构采用可插拔架构，可以根据需要将各种组件（如共识算法）插入系统中。项目地址为
    [https://github.com/hyperledger/fabric](https://github.com/hyperledger/fabric)。
- en: Sawtooth lake
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sawtooth lake
- en: Sawtooth lake is a blockchain project proposed by Intel in April 2016 with some
    key innovations focusing on **decoupling** of ledgers from transactions, flexible
    usage across multiple business areas using *transaction families*, and **pluggable
    consensus**. Decoupling can be explained more precisely by saying that the *transactions*
    are decoupled from the *consensus layer* by making use of a new concept called
    *Transaction families*. Instead of transactions being individually coupled with
    the ledger, transaction families are used, which allows for more flexibility,
    rich semantics and unrestricted design of business logic. Transactions follow
    the patterns and structures defined in the transaction families. Intel has also
    introduced a novel consensus algorithm abbreviated as PoET, proof of elapsed time,
    which makes use of **Intel Software Guard Extensions** (**Intel's SGX**) architecture's
    **trusted execution environment** (**TEE**) in order to provide a safe and random
    leader election process. It also supports permissioned and permission-less setups.
    This project is available at [https://github.com/hyperledger/sawtooth-core](https://github.com/hyperledger/sawtooth-core).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Sawtooth Lake 是由英特尔于 2016 年 4 月提出的一个区块链项目，具有一些关键创新，重点是将分类帐与交易**解耦**，通过*交易家族*在多个业务领域灵活使用，并且具有**可插拔共识**。
    解耦可以通过使用称为*交易家族*的新概念来更精确地解释，这使得*交易*不再与*共识层*紧密耦合。与交易单独与分类帐耦合不同，使用交易家族，这允许更灵活，更丰富的语义和业务逻辑的不受限制的设计。交易遵循交易家族中定义的模式和结构。英特尔还引入了一种新颖的共识算法，简称为
    PoET，即经过时间证明，它利用**英特尔软件保护扩展**（**Intel's SGX**）架构的**可信执行环境**（**TEE**）来提供安全和随机的领导者选举过程。它还支持有许可和无许可的设置。该项目位于
    [https://github.com/hyperledger/sawtooth-core](https://github.com/hyperledger/sawtooth-core)。
- en: Iroha
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Iroha
- en: Iroha was proposed by Soramitsu, Hitachi, NTT Data, and Colu in September 2016\.
    Iroha is aiming to build a library of reusable components that users can choose
    to run on their Hyperledger-based distributed ledgers. Iroha's main goal is to
    complement other Hyperledger projects by providing reusable components written
    in C++ with an emphasis on mobile development. This project has also proposed
    a novel consensus algorithm called Sumeragi, which is a chain based Byzantine
    fault tolerant consensus algorithm. Iroha is available at [https://github.com/hyperledger/iroha](https://github.com/hyperledger/iroha).
    Various libraries have been proposed and are being worked on by Iroha, including
    but not limited to a digital signature library (ed25519), an SHA-3 hashing library,
    a transaction serialization library, a P2P library, an API server library, an
    iOS library, an Android library, and a JavaScript library.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Iroha 于 2016 年 9 月由 Soramitsu、日立、NTT 数据和 Colu 提出。Iroha 的目标是构建一个可重复使用的组件库，用户可以选择在其基于
    Hyperledger 的分布式分类帐上运行。Iroha 的主要目标是通过提供用 C++ 编写的可重复使用的组件来补充其他 Hyperledger 项目，重点是移动开发。该项目还提出了一种新颖的共识算法，称为
    Sumeragi，这是一种基于链的拜占庭容错共识算法。Iroha 位于 [https://github.com/hyperledger/iroha](https://github.com/hyperledger/iroha)。Iroha
    已经提出并正在开发的各种库，包括但不限于数字签名库（ed25519）、SHA-3 哈希库、交易序列化库、P2P 库、API 服务器库、iOS 库、Android
    库和 JavaScript 库。
- en: Blockchain explorer
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区块链浏览器
- en: This project aims to build a blockchain explorer for Hyperledger that can be
    used to view and query the transactions, blocks, and associated data from the
    blockchain. It also provides network information and the ability to interact with
    chain code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目旨在为 Hyperledger 构建一个区块链浏览器，可用于查看和查询区块链上的交易、块和相关数据。它还提供网络信息和与链代码交互的能力。
- en: 'Currently there are two other projects that are in incubation: Fabric chaintool,
    and Fabric SDK Py. These projects are aimed at supporting Hyperledger Fabric.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 目前还有两个正在孵化的项目：Fabric 链工具和 Fabric SDK Py。这些项目旨在支持 Hyperledger Fabric。
- en: Fabric chaintool
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fabric 链工具
- en: Hyperledger chaincode compiler is being developed to support Fabric chaincode
    development. The aim is to build a tool that reads in a high-level Google protocol
    buffer structure and produces a chaincode. Additionally, it packages the chaincode
    so that it can be deployed directly. It is envisaged that this tool will help
    developers in various stages of development, such as compiling, testing, packaging,
    and deployment. It is available at [https://github.com/hyperledger/fabric-chaintool](https://github.com/hyperledger/fabric-chaintool).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger链代码编译器正在开发中，以支持Fabric链代码开发。其目标是构建一个工具，可以读取高级Google协议缓冲结构并生成链代码。此外，它会对链代码进行打包，以便可以直接部署。预计此工具将帮助开发人员在不同的开发阶段，如编译、测试、打包和部署。它可在
    [https://github.com/hyperledger/fabric-chaintool](https://github.com/hyperledger/fabric-chaintool)
    找到。
- en: Fabric SDK Py
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fabric SDK Py
- en: The aim of this project is to build a python based SDK library that can be used
    to interact with the blockchain (Fabric). It is available at [https://github.com/hyperledger/fabric-sdk-py](https://github.com/hyperledger/fabric-sdk-py).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的目标是构建一个基于Python的SDK库，可用于与区块链（Fabric）进行交互。它可在 [https://github.com/hyperledger/fabric-sdk-py](https://github.com/hyperledger/fabric-sdk-py)
    找到。
- en: Corda
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Corda
- en: Corda is the latest project that has been contributed by R3 to the Hyperledger
    project. It was open sourced on November 30, 2016\. Corda is heavily oriented
    towards the financial services industry and has been developed in collaboration
    with major banks and organizations in the financial industry. At the time of writing
    it is not yet in incubation under the Hyperledger project. Technically, Corda
    is not a blockchain but has key features similar to those of a blockchain, such
    as consensus, validity, uniqueness, immutability, and authentication.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Corda是R3向Hyperledger项目贡献的最新项目。它于2016年11月30日开源发布。Corda在很大程度上面向金融服务行业，并与金融行业的主要银行和组织合作开发。在撰写本文时，它尚未在Hyperledger项目的孵化下。技术上，Corda并不是一个区块链，但具有类似区块链的关键特性，例如共识、有效性、唯一性、不可变性和认证。
- en: In the following sections of this chapter, Fabric (IBM) and Sawtooth lake (Intel)
    and Corda (R3) will be discussed in more detail.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后续部分，将更详细地讨论Fabric（IBM）、Sawtooth Lake（Intel）和Corda（R3）。
- en: Hyperledger as a protocol
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作为协议的Hyperledger
- en: Hyperledger is aiming to build a new blockchain platform that is driven by industry
    use cases. As there have been number of contributions made to the Hyperledger
    project by the community, Hyperledger blockchain platform is evolving into a protocol
    for business transactions. Hyperledger is also evolving into a specification that
    can be used as a reference to build blockchain platforms as compared to earlier
    blockchain solutions that address only a specific type of industry or requirement.
    In the following section, a reference architecture is presented that has been
    published by the Hyperledger project. As this work is under continuous and rigorous
    development some changes are expected in this, but core services are expected
    to remain unchanged.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger的目标是构建一个由行业使用案例驱动的新区块链平台。由于社区对Hyperledger项目做出了许多贡献，Hyperledger区块链平台正在演变成一个用于商业交易的协议。与先前仅解决特定类型行业或需求的区块链解决方案相比，Hyperledger也正在演变成可用作构建区块链平台参考的规范。在接下来的部分中，Hyperledger项目发布了一个参考架构。由于这项工作正在不断且严格地开发中，这其中可能会有一些变化，但核心服务预计将保持不变。
- en: Reference architecture
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考架构
- en: 'Hyperledger has published a white paper with reference architecture that can
    serve as a guideline to build permissioned distributed ledgers. The reference
    architecture consists of two main components: Hyperledger services and Hyperledger
    APIs, SDKs, and CLI. Hyperledger services provide various services such as identity
    services, policy services, blockchain services, and smart contract services. On
    the other hand, Hyperledger APIs, SDKs, and CLIs provide an interface into blockchain
    services via appropriate application programming interfaces, software development
    kits, or command line interfaces. Moreover, an event stream, which is basically
    a gRPC channel, runs across all services. It can receive and send events. Events
    are either pre-defined or custom. Validating peers or chaincode can emit events
    to which external application can respond or listen to.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger发布了一份白皮书，其中包含参考架构，可作为构建许可分布式分类帐的指南。参考架构包括两个主要组件：Hyperledger服务和Hyperledger
    API、SDK和CLI。Hyperledger服务提供各种服务，例如身份服务、策略服务、区块链服务和智能合约服务。另一方面，Hyperledger API、SDK和CLI通过适当的应用程序编程接口、软件开发工具包或命令行界面提供与区块链服务的接口。此外，一个事件流，基本上是一个gRPC通道，运行在所有服务之间。它可以接收和发送事件。事件可以是预定义的或自定义的。验证对等体或链代码可以发出事件，外部应用程序可以响应或监听这些事件。
- en: The reference architecture that has been published in the Hyperledger white
    paper at the time of writing is shown in the following diagram. Hyperledger is
    a rapidly changing and evolving project, and the architecture shown here is expected
    to change somewhat.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Hyperledger白皮书中发布的参考架构如下图所示。Hyperledger是一个快速变化和发展的项目，因此这里显示的架构预计会有所变化。
- en: '![Reference architecture](img/image_09_001.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![参考架构](img/image_09_001.jpg)'
- en: 'Hyperledger architecture, as proposed in the latest draft V2.0.0 of Hyperledger
    white paper. (Source: Hyperledger white paper)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger架构，如Hyperledger白皮书的最新草案V2.0.0中所提议的。（来源：Hyperledger白皮书）
- en: Requirements
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要求
- en: There are certain requirements of a blockchain service. The reference architecture
    is driven by the needs and requirements raised by the participants of the Hyperledger
    project and after studying the industry use cases. There are several categories
    of requirements that have been deduced from the study of industrial use cases
    and are discussed in the following sections.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链服务有一定的要求。参考架构是由Hyperledger项目的参与者提出的需求和要求驱动的，并在研究行业使用案例后制定的。从对工业使用案例的研究中推导出了几类要求，并在以下章节中进行了讨论。
- en: Modular approach
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块化方法
- en: The main requirement of Hyperledger is a modular structure. It is expected that,
    as a cross-industry fabric (blockchain), it will be used in many business scenarios.
    As such, functions related to storage, policy, chaincode, access control, consensus
    and many other blockchain services should be pluggable. The modules should be
    plug and play and users should be able to easily remove and add a different module
    that meets the requirements of the business.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger的主要要求是具有模块化结构。预计，作为跨行业的fabric（区块链），它将在许多业务场景中使用。因此，与存储、策略、链码、访问控制、共识和许多其他区块链服务相关的功能应该是可插拔的。这些模块应该是即插即用的，用户应该能够轻松地移除和添加满足业务需求的不同模块。
- en: For example, if a business blockchain needs to be run only between already trusted
    parties and performs very basic business operations, then perhaps there is no
    need to have advanced cryptographic support for confidentiality and privacy, and
    therefore users should be able to remove that functionality (module) or replace
    that with a more appropriate module that suits their needs. Similarly, if users
    need to run a cross-industry blockchain, then confidentiality and privacy can
    be of paramount importance. In this case, users should be able to plug an advanced
    cryptographic and access control mechanism (module) into the blockchain (fabric).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果一个企业区块链只需要在已经信任的各方之间运行，并执行非常基本的业务操作，那么也许就不需要为保密性和隐私性提供先进的加密支持，因此用户应该能够移除该功能（模块）或将其替换为更适合其需求的模块。同样，如果用户需要运行跨行业区块链，则保密性和隐私性可能至关重要。在这种情况下，用户应该能够将高级加密和访问控制机制（模块）插入到区块链（fabric）中。
- en: Privacy and confidentiality
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 隐私和保密性
- en: Privacy and confidentiality of transactions and contracts is of utmost importance
    in a business blockchain. As such, Hyperledger's vision is to provide a wide range
    of cryptographic protocols and algorithms and it is expected that users will be
    able to choose appropriate modules according to their business requirements. The
    fabric should be able to handle complex cryptographic algorithms without compromising
    performance.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 交易和合同的隐私和保密性在商业区块链中至关重要。因此，Hyperledger的愿景是提供各种加密协议和算法，并且预计用户将能够根据其业务需求选择适当的模块。该框架应能处理复杂的加密算法，而不会影响性能。
- en: Identity
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 身份
- en: In order to provide privacy and confidentiality services, a flexible PKI model
    that can be used to handle the access control functionality is also required.
    The strength and type of cryptographic mechanisms is also expected to vary according
    to the needs and requirements of the users. In certain scenarios it might be required
    for a user to hide their identity, and as such the Hyperledger is expected to
    provide this functionality.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供隐私和机密性服务，还需要一个灵活的PKI模型，用于处理访问控制功能。密码机制的强度和类型也预计根据用户的需求和要求而有所不同。在某些场景中，可能需要用户隐藏其身份，因此预计Hyperledger将提供此功能。
- en: Auditability
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可审计性
- en: Auditability is another requirement of a Hyperledger Fabric. It is expected
    that an immutable audit trail of all identities, related operations and any changes
    is kept.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 可审计性是Hyperledger Fabric的另一个要求。预计会保留所有身份、相关操作和任何更改的不可变审计追踪。
- en: Interoperability
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 互操作性
- en: Currently there are many blockchain solutions available, but they cannot communicate
    with each other and this can be a limiting factor in the growth of a blockchain
    based global business ecosystem. It is envisaged that many blockchain networks
    will operate in the business world for specific needs, but it is important that
    they are able to communicate with each other. There should be a common set of
    standards that all blockchains can follow in order to allow communication between
    different ledgers. It is expected that a protocol will be developed that will
    allow the exchange of information between many Fabrics.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有许多可用的区块链解决方案，但它们之间无法互相通信，这可能会限制区块链全球商业生态系统的增长。人们希望许多区块链网络将针对特定需求在商业世界中运作，但重要的是它们能够彼此通信。所有区块链都应遵循一套共同的标准，以便实现不同账本之间的通信。预计将开发一种协议，允许在许多模块之间交换信息。
- en: Portability
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可移植性
- en: The portability requirement is concerned with the ability to run across multiple
    platforms and environments without the need to change anything at code level.
    Hyperledger is envisaged to be portable, not only at infrastructure level but
    also at code, libraries, and API levels so that it can support uniform development
    across various implementations of Hyperledger.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 可移植性要求关注的是在多个平台和环境中运行而无需在代码级别进行任何更改的能力。预计Hyperledger将具有可移植性，不仅在基础设施级别，还包括代码、库和API级别，以便支持在各种Hyperledger实现中的统一开发。
- en: Fabric
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块
- en: In order to understand various projects under incubation in Hyperledger project,
    it is important to understand the foundations of Hyperledger first. A few terminologies
    that are specific to Hyperledger needs some clarification before readers are introduced
    to more in-depth material. First there is the concept of Fabric.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解Hyperledger项目孵化中的各种项目，首先要了解Hyperledger的基础。在读者接触更深入的材料之前，有些特定于Hyperledger的术语需要一些澄清。首先是Fabric的概念。
- en: Fabric can be defined as a collection of components providing a foundation layer
    that can be used to deliver a blockchain network. There are various types and
    capabilities of a fabric network, but all fabrics share common attributes such
    as immutability and are consensus driven. Some fabrics can provide modular approach
    towards building blockchain networks. In this case the blockchain network can
    have multiple pluggable modules to perform various function on the network. For
    example, consensus algorithms can be a pluggable module in a blockchain network
    where, depending on the requirements of the network, an appropriate consensus
    algorithm can be chosen and *plugged* into the network. The modules can be based
    on some particular specification of the fabric and can include APIs, access control,
    and various other components. Fabrics can also be designed either to be private
    or public and can allow the creation of multiple business networks. As an example,
    bitcoin is an application that runs on top of its fabric (blockchain network).
    As discussed earlier, blockchain can either be permissioned or permission-less
    and the same is `true` for fabric in Hyperledger terminology.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric 可以被定义为提供基础层的一组组件，用于构建区块链网络。Fabric 网络有各种类型和能力，但所有 Fabric 共享共同属性，如不可变性和共识驱动。一些
    Fabric 可以提供模块化方法来构建区块链网络。在这种情况下，区块链网络可以具有多个可插拔模块，在网络上执行各种功能。例如，共识算法可以是区块链网络中的可插拔模块，根据网络的要求，可以选择并*插入*适当的共识算法到网络中。这些模块可以基于
    Fabric 的某些特定规范，并包括 API、访问控制和各种其他组件。Fabric 也可以设计为私有或公开，并允许创建多个业务网络。例如，比特币是在其 Fabric（区块链网络）上运行的应用程序。如前所述，区块链可以是许可的或无许可的，对于
    Hyperledger 术语中的 Fabric 也是`true`。
- en: Fabric is also the name given to the code contribution made by IBM to the Hyperledger
    foundation and is formally called Hyperledger Fabric. IBM also offers blockchain
    as a service (IBM Blockchain) via its Bluemix cloud service.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric 也是 IBM 提交给 Hyperledger 基金会的代码贡献的名称，正式称为 Hyperledger Fabric。IBM 还通过其 Bluemix
    云服务提供区块链即服务（IBM Blockchain）。
- en: Hyperledger Fabric
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyperledger Fabric
- en: Fabric is the contribution originally made by IBM to the Hyperledger project.
    The aim of this contribution is to enable a modular, open and flexible approach
    towards building blockchain networks. Various functions in the fabric are pluggable,
    and it also allows use of any language to develop smart contracts. This is possible
    because it is based on container technology which can host any language. Chaincode
    (smart contract) is sandboxed into a secure container which includes a secure
    operating system, chaincode language, runtime environment and SDKs for Go, Java,
    and Node.js. Other languages can be supported too if required. Smart contracts
    are called chaincode in the Fabric. This is a very powerful feature compared to
    domain specific languages in Ethereum, or the very limited scripted language in
    bitcoin. It is a permissioned network that aims to address issues such as scalability,
    privacy, and confidentiality. The key idea behind this is modular technology,
    which would allow for flexibility in design and implementation. This can then
    result in achieving scalability, privacy and other desired attributes. Transactions
    in fabric are private, confidential and anonymous for general users, but they
    can still be traced and linked to the users by authorized auditors. As a permissioned
    network, all participants are required to be registered with the membership services
    in order to access the blockchain network. This ledger also provided auditability
    functionality in order to meet the regulatory and compliance needs.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric 最初是 IBM 对 Hyperledger 项目的贡献。这一贡献的目标是实现一种模块化、开放和灵活的构建区块链网络的方法。Fabric 中的各种功能是可插拔的，它还允许使用任何语言开发智能合约。这是可能的，因为它基于容器技术，可以托管任何语言。链代码（智能合约）被沙盒化到一个安全容器中，其中包括安全操作系统、链代码语言、运行时环境和用于
    Go、Java 和 Node.js 的 SDK。如果需要，也可以支持其他语言。智能合约在 Fabric 中被称为链代码。与以太坊中的领域特定语言或比特币中非常有限的脚本语言相比，这是一个非常强大的功能。它是一个许可网络，旨在解决可扩展性、隐私和机密性等问题。其背后的关键思想是模块化技术，这将允许在设计和实现上灵活性。这可能会导致实现可扩展性、隐私和其他所需属性。Fabric
    中的交易对于普通用户是私有的、机密的和匿名的，但它们仍然可以被授权的审计员追踪和与用户关联。作为一个许可网络，所有参与者都必须在成员服务中注册，以便访问区块链网络。这个分类帐还提供了审计功能，以满足监管和合规性需求。
- en: Fabric architecture
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fabric 架构
- en: The Fabric is logically organized into three main categories based on the type
    of service provided. These include membership services, blockchain services, and
    chaincode services. In the following section, all these categories and associated
    components are discussed in detail. The current stable version of Hyperledger
    Fabric is v0.6, however the latest version v1.0 is available but is not yet stable.
    In version 1.0, many architectural changes have been made, and in later sections
    of this chapter some changes that have been made in version 1.0 will also be discussed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric在逻辑上分为基于提供的服务类型的三个主要类别。这包括会员服务、区块链服务和链码服务。在下一节中，将详细讨论所有这些类别和相关的组件。Hyperledger
    Fabric的当前稳定版本为v0.6，但最新版本v1.0可用，但尚未稳定。在1.0版本中，进行了许多架构更改，在本章后面的部分中也将讨论1.0版本中所做的一些更改。
- en: Membership services
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 会员服务
- en: 'These services are used to provide access control capability for the users
    of the fabric network. The following list shows the functions that membership
    services perform:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '这些服务用于为织物网络的用户提供访问控制功能。接下来的列表显示了会员服务执行的功能:'
- en: User identity validation.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户身份验证。
- en: User registration.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户注册。
- en: Assign appropriate permissions to the users depending on their roles.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据其角色为用户分配适当的权限。
- en: 'Membership services makes use of **Public Key Infrastructure** (**PKI**) in
    order to support identity management and authorization operations. Membership
    services are made up of various components:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '会员服务利用**公钥基础设施**（PKI）以支持身份管理和授权操作。会员服务由各种组件组成:'
- en: '**Registration authority** (**RA**): A service that authenticates the users
    and assesses the identity of the fabric participants for issuance of certificates.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册机构**（RA）：用于认证用户并评估织物参与者的身份以发放证书的服务。'
- en: '**Enrolment certificate authority**: **Enrolment certificates** (**Ecerts**)
    are long term certificates issued by ECA to registered participants in order to
    provide identification to the entities participating on the network.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册证书颁发机构**：**注册证书**（Ecerts）是由ECA颁发给注册参与者的长期证书，旨在为参与网络的实体提供身份识别。'
- en: '**Transaction certificate authority**:In order to send transactions on the
    networks, participants are required to hold a transaction certificate. TCA is
    responsible for issuing transaction certificates to holders of Enrolment certificates
    and is derived from Ecerts.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交易证书颁发机构**：为了在网络上发送交易，参与者需要持有交易证书。TCA负责向注册证书持有者颁发交易证书，并从Ecerts派生。'
- en: '**TLS certificate authority**:In order to secure the network level communication
    between nodes on the Fabric, TLS certificates are used. TLS certificate authority
    issues TLS certificates in order to ensure security of the messages being passed
    between various systems on the blockchain network.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TLS证书颁发机构**：为了确保在Fabric节点间的网络级通信安全，使用TLS证书。TLS证书颁发机构颁发TLS证书，以确保在区块链网络上传递的消息的安全性。'
- en: Blockchain services
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 区块链服务
- en: Blockchain services are at the core of the Hyperledger Fabric. Components within
    this category are as follows.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链服务是Hyperledger Fabric的核心。此类别中的组件如下。
- en: Consensus manager
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 共识管理器
- en: Consensus manager is responsible for providing the interface to the consensus
    algorithm. This serves as an adapter that receives the transaction from other
    Hyperledger entities and executes them under criteria according to the type of
    algorithm chosen. Consensus is pluggable and currently there are three types of
    consensus algorithm available in Fabric, namely the batch PBFT protocol, SIEVE
    algorithm, and NOOPS.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 共识管理器负责提供共识算法的接口。这充当一个适配器，接收来自其他Hyperledger实体的交易，并根据选择的算法类型执行它们。共识是可插拔的，当前在Fabric中有三种共识算法，分别是批处理PBFT协议、筛子算法和NOOPS。
- en: Distributed ledger
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分布式账本
- en: 'Blockchain and world state are two main elements of the distributed ledger.
    Blockchain is simply a linked list of blocks (as introduced in earlier chapters)
    and world ledger is a key-value database. This database is used by smart contracts
    to store relevant states during execution by the transactions. The blockchain
    consists of blocks that contain transactions. These transactions contain chaincode,
    which runs transactions that can result in updating the world state. Each node
    saves the world state on disk in RocksDB. The following diagram shows a typical
    block in the Hyperledger Fabric with the relevant fields:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链和世界状态是分布式账本的两个主要元素。区块链只是一个区块链表（如前几章介绍的）和世界账户是一个键值数据库。这个数据库被智能合约用来通过交易在执行期存储相关状态。区块链由包含交易的区块组成。这些交易包含链码，运行可以更新世界状态的交易。每个节点将世界状态保存在
    RocksDB 中的磁盘上。以下图表显示了超级账本 Fabric 中一个典型区块及相关字段：
- en: '![Distributed ledger](img/image_09_002.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![分布式账本](img/image_09_002.jpg)'
- en: Block structure
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 区块结构
- en: 'The fields shown in the preceding diagram are as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 上图中显示的字段如下：
- en: '**Version:** Used for keeping track of changes in the protocol.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本：** 用于跟踪协议更改的内容。'
- en: '**Timestamp:** Timestamp in UTC epoch time, updated by block proposer.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间戳：** UTC 时戳时间戳，由区块提议者更新。'
- en: '**Transaction hash:** This field contains the Merkle root hash of the transactions
    in the block.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交易哈希：** 此字段包含区块中交易的默克尔根哈希。'
- en: '**State hash:** This is the Merkle root hash of the world state.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态哈希：** 这是世界状态的 Merkle 根哈希。'
- en: '**Previous hash:** This is the previous block''s hash, which is calculated
    after serializing the block message and then creating the message digest by applying
    the SHA3 SHAKE256 algorithm.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上一个哈希：** 这是之前区块的哈希，在序列化区块消息后计算，并应用 SHA3 SHAKE256 算法创建消息摘要。'
- en: '**Consensus metadata:** This is an optional field that can be used by the consensus
    protocol to provide some relevant information about the consensus.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共识元数据：** 这是一个可选字段，用于共识协议提供有关共识的相关信息。'
- en: '**Non-Hash data:** This is some metadata that is stored with the block but
    is not hashed. This feature makes it possible to have different data on different
    peers. It also provides the ability to discard data without any impact on the
    blockchain.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非哈希数据：** 这是一些存储在区块中但未哈希的元数据。这个功能使得不同节点可以拥有不同的数据。它还提供了在不影响区块链的情况下丢弃数据的能力。'
- en: Peer to Peer protocol
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 点对点协议
- en: P2P protocol in the Hyperledger Fabric is built using **google RPC** (**gRPC**).
    It uses protocol buffers to define the structure of the messages.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 超级账本 Fabric 中的 P2P 协议是使用**Google RPC**（**gRPC**）构建的。它使用协议缓冲区来定义消息的结构。
- en: 'Messages are passed between nodes in order to perform various functions. There
    are four main types of messages in Hyperledger Fabric: Discovery, transaction,
    synchronization and consensus. Discovery messages are exchanged between nodes
    when starting up in order to discover other peers on the network.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 节点之间传递消息以执行各种功能。在超级账本 Fabric 中有四种主要类型的消息：发现、交易、同步和共识。当启动时，发现消息在节点之间交换，以发现网络上的其他对等方。
- en: 'Transaction messages can be divided into two types: Deployment transactions
    and Invocation transactions. The former is used to deploy new chaincode to the
    ledger, and the latter is used to call functions from the smart contract. Transactions
    can be public, confidential, and confidential chaincode transactions. Public transactions
    are open and available to all participants. Confidential transactions are allowed
    to be queried only by transaction owners and participants. Confidential chaincode
    transactions have encrypted chaincode and can only be decrypted by validating
    nodes. Validating nodes run consensus, validate the transactions and maintain
    the blockchain. Non-validating nodes on the other hand, provide transaction verification,
    stream server, and REST services. They also act as a proxy between the transactors
    and the validating nodes. Synchronization messages are used by peers to keep the
    blockchain updated and in synch with other nodes. Consensus messages are used
    in consensus management and broadcasting payloads to validating peers. These are
    generated internally by the consensus framework.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 交易消息可分为两种类型：部署交易和调用交易。前者用于将新链码部署到账本上，后者用于调用智能合约中的函数。交易可以是公开的、机密的和机密链码交易。公开交易对所有参与者开放和可用。机密交易只允许交易所有者和参与者查询。机密链码交易具有加密链码，只有验证节点才能解密。验证节点运行共识、验证交易并维护区块链。非验证节点则提供交易验证、流媒体服务器和REST服务。它们还充当交易者和验证节点之间的代理。同步消息由节点用于保持区块链与其他节点同步更新。共识消息用于共识管理和向验证节点广播有效负载。这些消息由共识框架内部生成。
- en: Ledger storage
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 账本存储
- en: In order to save the state of the ledger, RocksDB is used, and it is stored
    at each peer. RocksDB is a high performance database available at [http://rocksdb.org/](http://rocksdb.org/).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保存账本状态，使用RocksDB，并且存储在每个对等节点上。 RocksDB是一种高性能数据库，可在[http://rocksdb.org/](http://rocksdb.org/)获得。
- en: Chaincode services
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链码服务
- en: 'These services allow the creation of secure containers that are used to execute
    the chaincode. Components in this category are as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务允许创建用于执行链码的安全容器。这个类别中的组件如下：
- en: '**Secure container: **Chaincode is deployed in Docker containers that provide
    a locked down sandboxed environment for smart contract execution. Currently Golang
    is supported as the main smart contract language, but any other main stream language
    can be added and enabled if required.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全容器：** 链码部署在为智能合约执行提供经过锁定的隔离环境的Docker容器中。目前支持Golang作为主要智能合约语言，但如果需要，可以添加和启用任何其他主流语言。'
- en: '**Secure registry: **This provides a record of all images containing smart
    contracts.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全注册表：** 这提供包含智能合约的所有映像的记录。'
- en: Events
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事件
- en: Events on the blockchain can be triggered by validator nodes and smart contracts.
    External applications can listen to these events and react to them if required
    via event adapters. They are similar to the concept of events introduced in solidity
    in the last chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链上的事件可以由验证节点和智能合约触发。外部应用程序可以通过事件适配器监听这些事件，并在需要时做出反应。它们类似于在上一章节中引入的Solidity的事件概念。
- en: APIs and CLIs
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API和CLI
- en: An application programming interface provides an interface into the fabric by
    exposing various REST APIs. Additionally, command line interfaces that provide
    a subset of REST APIs and allow for quick testing and limited interaction with
    the blockchain are also available.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序编程接口通过暴露各种REST API提供对区块链的接口。此外，还提供了提供REST API子集并允许快速测试和有限与区块链交互的命令行接口。
- en: Components of the Fabric
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fabric的组件
- en: There are various components that can be part of the blockchain. These components
    include but are not limited to the ledger, chaincode, consensus mechanism, access
    control, events, system monitoring and management, wallets and system integration
    components.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链可以包括各种组件。 这些组件包括但不限于账本、链码、共识机制、访问控制、事件、系统监控和管理、钱包和系统集成组件。
- en: Peers or nodes
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对等节点
- en: 'There are two main types of peers that can be run on a fabric network: Validating
    and non-validating. Simply put, a validating node runs consensus, creates and
    validates a transaction, and contributes towards updating the ledger and maintaining
    the chaincode.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在fabric网络上可以运行两种主要类型的对等节点：验证的和非验证的。简单来说，验证节点运行共识，创建和验证交易，并有助于更新账本和维护链码。
- en: A non-validating peer does not execute transactions and only constructs transactions
    that are then forwarded to validating nodes.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 非验证节点不执行交易，只构建交易，然后将其转发给验证节点。
- en: Both nodes manage and maintain user certificates that have been issued by membership
    services.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 两个节点都管理并维护了由成员服务发行的用户证书。
- en: Applications on blockchain
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 区块链上的应用
- en: A typical application on Fabric is simply composed of a user interface, usually
    written in JavaScript/HTML, that interacts with the backend chaincode (smart contract)
    stored on the ledger via an API layer.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric上的典型应用通常由用户界面组成，通常是用JavaScript/HTML编写的，通过API层与存储在分类账上的后端链码（智能合同）交互。
- en: '![Applications on blockchain](img/B05975_09_03.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![区块链上的应用](img/B05975_09_03.jpg)'
- en: Typical blockchain application
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的区块链应用
- en: Hyperledger provides various APIs and command line interfaces to enable interaction
    with the ledger. These APIs include interfaces for identity, transactions, chaincode,
    ledger, network, storage, and events.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger提供各种API和命令行界面以实现与分类账的互动。这些API包括身份、交易、链码、分类账、网络、存储和事件的接口。
- en: Chaincode implementation
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 链码实现
- en: Chaincode is usually written in Golang or Java. Chaincode can be public, confidential
    or access controlled. These codes serve as a smart contract that users can interact
    with via APIs. Users can call functions in the chaincode that result in a state
    change, and consequently updates the ledger. There are also functions that are
    only used to query the ledger and do not result in any state change.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 链码通常是用Golang或Java编写的。链码可以是公共的、机密的或受控制的。这些代码充当用户可以通过API与之交互的智能合同。用户可以调用链码中的函数，导致状态改变，并因此更新分类账。还有一些函数仅用于查询分类账，不会导致任何状态改变。
- en: 'Chaincode implementation is performed by first creating the chaincode shim
    interface in the code. It can either be in Java or Golang code. The following
    four functions are required in order to implement the chaincode:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 首先通过在代码中创建链码shim接口来执行链码实现。它可以是Java或Golang代码。为了实现链码，需要以下四个函数：
- en: '`Init()`:This function is invoked when chaincode is deployed onto the ledger.
    This initializes the chaincode and results in making a state change, which accordingly
    updates the ledger.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Init()`: 当链码部署到分类账上时，会调用此函数。这将初始化链码并导致状态改变，从而相应地更新分类账。'
- en: '`Invoke()`: This function is used when contracts are executed. It takes a function
    name as parameters along with an array of arguments. This function results in
    a state change and writes to the ledger.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Invoke()`: 当合同执行时，使用此函数。它以函数名和参数数组作为参数。此函数会导致状态改变并写入分类账。'
- en: '`Query()`: This function is used to query the current state of a deployed chaincode.
    This function does not make any changes to the ledger.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Query()`: 用于查询已部署链码的当前状态。此函数不会对分类账进行任何更改。'
- en: '`Main()`:This function is executed when a peer deploys its own copy of the
    chaincode. The chaincode is registered with the peer using this function.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Main()`: 当节点部署自己的链码副本时，将执行此函数。使用此函数向节点注册链码。'
- en: 'The following diagram illustrates the general overview of Hyperledger Fabric:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了Hyperledger Fabric的一般概要：
- en: '![Chaincode implementation](img/B05975_09_04.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![链码实现](img/B05975_09_04.jpg)'
- en: High-level overview of Hyperledger Fabric
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperledger Fabric的高层概览
- en: Application model
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 应用模型
- en: 'Any blockchain application for Hyperledger Fabric follows MVC-B architecture.
    This is based on the popular MVC design pattern. Components in this model are
    Model, View, Control, and Blockchain:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Hyperledger Fabric的任何区块链应用程序都遵循MVC-B架构。这是基于流行的MVC设计模式。该模型中的组件包括模型、视图、控制和区块链：
- en: '**View logic**: This is concerned with the user interface. It can be a desktop,
    web application or mobile frontend.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图逻辑**：这与用户界面有关。它可以是桌面、Web应用程序或移动前端。'
- en: '**Control logic**: This is the orchestrator between user interface, data model,
    and APIs.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制逻辑**：这是用户界面、数据模型和API之间的协调者。'
- en: '**Data model**: This model is used to manage the off-chain data.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据模型**：此模型用于管理链下数据。'
- en: '**Blockchain logic**: This is used to manage the blockchain via the controller
    and the data model via transactions.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区块链逻辑**：这是通过控制器管理区块链和通过交易管理数据模型。'
- en: Due to the fact that Hyperledger current release v0.6 is under heavy refactoring
    to build V1.0, no practical exercises have been introduced in this section.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Hyperledger当前版本 v0.6 正在进行大规模重构以构建 V1.0，因此本节中没有引入实际的练习。
- en: It is expected that by the time this book is published, the information regarding
    practical setup of Hyperledger fabric will be outdated already. As such, readers
    are encouraged to keep an eye on the updates at [https://hyperledgerfabric.readthedocs.io/en/latest/](https://hyperledgerfabric.readthedocs.io/en/latest/).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有望在本书出版时，有关Hyperledger fabric实际设置的信息可能已经过时。 因此，鼓励读者关注来自[https://hyperledgerfabric.readthedocs.io/en/latest/](https://hyperledgerfabric.readthedocs.io/en/latest/)
    的更新。
- en: Moreover, the IBM Bluemix service offers sample applications for blockchain
    under its blockchain as a service offering. It is available at [https://console.ng.bluemix.net/docs/services/blockchain/ibmblockchain_tutorials.html](https://console.ng.bluemix.net/docs/services/blockchain/ibmblockchain_tutorials.html).
    This service allows users to create their own blockchain networks in an easy to
    use environment.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，IBM Bluemix服务提供了区块链示例应用，属于其区块链即服务。 它可以在[https://console.ng.bluemix.net/docs/services/blockchain/ibmblockchain_tutorials.html](https://console.ng.bluemix.net/docs/services/blockchain/ibmblockchain_tutorials.html)
    上找到。 该服务允许用户在易于使用的环境中创建自己的区块链网络。
- en: Sawtooth lake
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锯齿湖
- en: 'Sawtooth lake can run in both permissioned and non-permissioned modes. It is
    a distributed ledger that proposes two novel concepts: The first is the introduction
    of a new consensus algorithm called **Proof of Elapsed Time** (**PoET**); and
    the second is the idea of transaction families. A brief description of these novel
    proposals is given in the following section.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 锯齿湖可以在许可和非许可模式下运行。 它是一个分布式分类账，提出了两个新概念：第一个是介绍了一种名为**经过时间证明**（**PoET**）的共识算法；第二个是交易系列的概念。
    对这些新提议的简要描述在下一节中给出。
- en: PoET
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PoET
- en: PoET is a novel consensus algorithm that allows a node to be selected randomly
    based on the time that the node has waited before proposing a block. This is in
    contrast to other leader election and lottery based proof of work algorithms,
    where an enormous amount of electricity and computer resources are used in order
    be elected as a block proposer, for example in the case of bitcoin. PoET is a
    type of Proof of Work algorithm but, instead of spending computer resources, it
    uses a trusted computing model to provide a mechanism to fulfill Proof of Work
    requirements. PoET makes use of Intel's SGX architecture to provide a trusted
    execution environment to ensure randomness and cryptographic security of the process.
    It should be noted that the current implementation of Sawtooth lake does not require
    real hardware SGX based TEE, as it is simulated for experimental purposes only
    and as such should not be used in production environments.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: PoET 是一种新颖的共识算法，允许根据节点在提出区块之前等待的时间来随机选择节点。 这与其他基于领导选举和彩票的工作量证明算法形成对比，在这些算法中，为了被选为区块提议者，例如在比特币的情况下，需要使用大量电力和计算资源。
    PoET 是一种工作量证明算法，但是，它不需要消耗计算资源，而是使用可信计算模型提供一种满足工作量证明要求的机制。 PoET 利用英特尔的SGX架构提供受信任的执行环境，以确保过程的随机性和密码安全性。
    值得注意的是，锯齿湖目前的实现不需要真实的硬件SGX基于TEE，因为它仅用于实验目的进行模拟，因此不应在生产环境中使用。
- en: Transaction families
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交易系列
- en: 'A traditional smart contract paradigm provides a solution that is based on
    a general purpose instruction set for all domains. For example, in the case of
    Ethereum, a set of opcodes has been developed for the **Ethereum virtual machine**
    (**EVM**) that can be used to build smart contracts to address any type of requirements
    for any industry. Whilst this model has its merits, it is becoming clear that
    this approach is not very secure as it provides a single interface into the ledger
    with a powerful and expressive language, which potentially offers a larger attack
    surface for malicious code. This complexity and generic virtual machine paradigm
    has resulted in several vulnerabilities that were found and exploited recently
    by hackers. A recent example is the DAO hack and further **Denial of Services**
    (**DoS**) attacks that exploited limitations in some EVM opcodes. A model shown
    in the following figure describes the traditional smart contract model, where
    a generic virtual machine has been used to provide the interface into the blockchain
    for all domains:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的智能合约范式提供了一个基于所有领域的通用指令集的解决方案。 例如，在以太坊的情况下，已经开发了一组用于以太坊虚拟机（EVM）的操作码，可以用来构建解决任何行业需求的智能合约。
    尽管这种模式有其优点，但明显可见这种方法并不是非常安全的，因为它为总账提供了一个强大且表达力强的单一接口，这可能为恶意代码提供了更大的攻击面。 这种复杂性和通用虚拟机范式最近已导致一些漏洞被黑客发现和利用。
    最近的一个例子是DAO被黑客攻击，以及利用一些EVM操作码的限制进行**拒绝服务**（DoS）攻击。 下图描述了传统智能合约模型，其中使用通用虚拟机为所有领域提供了区块链的接口：
- en: '![Transaction families](img/B05975_09_05.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![Transaction families](img/B05975_09_05.jpg)'
- en: Traditional smart contract paradigm
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的智能合约范式
- en: In order to address this issue, Sawtooth lake has proposed the idea of transaction
    families. A transaction family is created by decomposing the logic layer into
    a *set of rules* and a *composition layer* for a specific domain. The key idea
    is that business logic is composed within *transaction families*, which provides
    a more secure and powerful way to build smart contracts. Transaction families
    contain the domain-specific rules and another layer that allows for creating transactions
    for that domain. Another way of looking at it is that transaction families are
    a combination of a data model and a transaction language that implements a logic
    layer for a specific domain. The data model represents the current state of the
    blockchain (ledger) whereas the transaction language modifies the state of the
    ledger. It is expected that users will build their own transaction families according
    to their business requirements.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题， Sawtooth lake提出了交易族的概念。 交易族是通过将逻辑层分解成一组规则和特定领域的组合层来创建的。 其核心理念是将业务逻辑组合在交易族内，这提供了一种更安全、更强大的构建智能合约的方式。
    交易族包含特定领域的规则以及另一个允许为该领域创建交易的层。 另一种看待它的方式是，交易族是数据模型和实现特定领域逻辑层的交易语言的组合。 数据模型代表了区块链（总账本）的当前状态，而交易语言修改总账本的状态。
    预期用户将根据其业务需求构建自己的交易族。
- en: The following diagram represents this model, where each specific domain, like
    financial services, **digital rights management** (**DRM**), supply chain, and
    the health industry, has its own logic layer comprised of operations and services
    specific to that domain. This makes the logic layer both restrictive and powerful
    at the same time. Transaction families ensure that operations related to only
    the required domain are present in the control logic, thus removing the possibility
    of executing needless, arbitrary and potentially harmful operations.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 下图代表了这一模型，其中每个特定领域，如金融服务、数字版权管理（DRM）、供应链和健康行业，都有其自己的逻辑层，包括特定于该领域的操作和服务。 这使得逻辑层既限制又强大。
    交易族可以确保仅包含与所需领域相关的操作，从而消除执行不需要的、任意的和潜在有害操作的可能性。
- en: '![Transaction families](img/B05975_09_06.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![Transaction families](img/B05975_09_06.jpg)'
- en: Sawtooth (transaction families) smart contract paradigm
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Sawtooth（交易族）智能合约范式
- en: 'Intel has provided three transaction families with Sawtooth: Endpoint registry,
    Integerkey, and MarketPlace.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔已经为Sawtooth提供了三个交易族：端点注册、Integerkey和市场。
- en: '**Endpoint registry** is used for registering ledger services.'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**端点注册** 用于注册账本服务。'
- en: '**Integerkey** is used for testing deployed ledgers.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Integerkey** 用于测试已部署的账本。'
- en: '**MarketPlace** is used for selling, buying and trading operations and services.'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**MarketPlace** 用于销售、购买和交易操作和服务。'
- en: '`Sawtooth_bond` has been developed as a proof of concept to demonstrate a bond
    trading platform. It is available at [https://github.com/hyperledger/sawtooth-core/tree/master/extensions/bond](https://github.com/hyperledger/sawtooth-core/tree/master/extensions/bond).'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sawtooth_bond` 已开发为证明概念，以演示债券交易平台。它可在 [https://github.com/hyperledger/sawtooth-core/tree/master/extensions/bond](https://github.com/hyperledger/sawtooth-core/tree/master/extensions/bond)
    上获得。'
- en: Consensus in Sawtooth
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sawtooth 中的共识
- en: Sawtooth has two types of consensus mechanisms based on the choice of network.
    PoET, as discussed previously, is a trusted executed environment based lottery
    function that elects a leader randomly based on the time a node has waited for
    block proposal. There is another consensus type called quorum voting, which is
    an adaptation of consensus protocols built by Ripple and Stellar. This consensus
    algorithm allows instant transaction finality, which is usually desirable in permissioned
    networks.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Sawtooth 根据网络选择具有两种类型的共识机制。如前所述，PoET 是基于信任执行环境的抽奖功能，根据节点等待区块提议的时间随机选择领导者。还有另一种称为
    quorum 投票的共识类型，这是由 Ripple 和 Stellar 构建的共识协议的一种适应。这种共识算法允许即时交易最终性，这在权限网络中通常是可取的。
- en: Development environment
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发环境
- en: 'In this section, a quick introduction is given on how to set up a development
    environment for Sawtooth lake. There are few pre-requisites that are required
    in order to set up the development environment. Examples in this section assume
    a running Ubuntu system and the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了如何为 Sawtooth lake 设置开发环境的快速介绍。为了设置开发环境，需要一些先决条件。本节中的示例假定正在运行 Ubuntu 系统并具有以下内容：
- en: '`vagrant`, at least version 1.9.0, available at [https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html).'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`vagrant`，至少版本 1.9.0，在 [https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)
    上可用。'
- en: Virtual box, at least 5.0.10 r104061, available at [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads).
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Virtual box，至少 5.0.10 r104061，在 [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)
    上可用。
- en: Once both of the above pre-requisites are downloaded and installed successfully,
    the next step is to clone the repository.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦上述两个先决条件成功下载并安装，下一步是克隆存储库。
- en: '[PRE0]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will produce an output similar to the one shown in the following screenshot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生类似以下截图的输出：
- en: '![Development environment](img/image_09_007.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![开发环境](img/image_09_007.jpg)'
- en: GitHub Sawtooth clone
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Sawtooth 克隆
- en: 'Once Sawtooth is cloned correctly, the next step is to start up the environment.
    First, run the following command to change the directory to the correct location
    and then start the `vagrant` box:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Sawtooth 正确克隆，下一步是启动环境。首先，运行以下命令将目录更改到正确位置，然后启动`vagrant`箱：
- en: '[PRE1]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will produce an output similar to the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生类似以下截图的输出：
- en: '![Development environment](img/image_09_008.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![开发环境](img/image_09_008.jpg)'
- en: Vagrant up command
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant up 命令
- en: 'If at any point Vagrant needs to be stopped, the following command can be used:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在任何时候需要停止 Vagrant，则可以使用以下命令：
- en: '[PRE2]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Or
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE3]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Halt will stop the `vagrant` machine, whereas `destroy` will stop and delete
    `vagrant` machines.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 停止`vagrant`机器的 halt，而 destroy 将停止并删除`vagrant`机器。
- en: Finally, the transaction validator can be started by using the following commands.
    First `ssh` into the `vagrant` Sawtooth box.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以使用以下命令启动交易验证器。首先`ssh`进入`vagrant` Sawtooth 箱。
- en: '[PRE4]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When the `vagrant` prompt is available, run the following commands.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当`vagrant`提示可用时，运行以下命令。
- en: 'First build the `sawtooth` lake core using following command:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 首先使用以下命令构建`Sawtooth`湖核心：
- en: '[PRE5]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When the build has completed successfully, in order to run transaction validator
    issue the following commands:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 构建成功后，为了运行交易验证器，发出以下命令：
- en: '[PRE6]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will create the genesis block and clear any existing data files and keys.
    This should show an output similar to the following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建创世区块并清除任何现有的数据文件和密钥。这应该显示类似以下截图的输出：
- en: '![Development environment](img/image_09_009.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![开发环境](img/image_09_009.jpg)'
- en: Genesis block and keys generation
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 创建创世区块和生成密钥
- en: 'The next step is to run the transaction validator, and change the directory
    as shown follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是运行交易验证器，并按照以下所示更改目录：
- en: '[PRE7]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the transaction validator:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 运行交易验证器：
- en: '[PRE8]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Development environment](img/image_09_010.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![开发环境](img/image_09_010.jpg)'
- en: Running transaction validator
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 运行交易验证器
- en: The validator node can be stopped by pressing *Ctrl* + *C*. Once the validator
    is up and running, various clients can be started up in another terminal window
    to communicate with the transaction validator and submit transactions.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按下*Ctrl* + *C*组合键停止验证器节点。一旦验证器正常运行，就可以在另一个终端窗口中启动各种客户端来与交易验证器进行通信并提交交易。
- en: 'For example, in the following screenshot the market client is started up to
    communicate with the transaction validator. Note that keys under `/keys/mkt.wif`
    are created by using the following command:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在下面的屏幕截图中，市场客户端已启动，准备与交易验证器进行通信。请注意，通过以下命令创建`/keys/mkt.wif`下的密钥：
- en: '[PRE9]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This demonstration is just a basic example derived from Sawtooth lake documentation.
    However, development using Sawtooth lake is quite an involved process and a full
    chapter could be dedicated to that.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 此演示只是从Sawtooth Lake文档衍生的基本示例。但是，使用Sawtooth Lake进行开发是一个非常复杂的过程，完整的章节都可以专门讨论这个问题。
- en: '![Development environment](img/image_09_011.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![开发环境](img/image_09_011.jpg)'
- en: mktclient for marketplace transaction family
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 用于市场交易家族的市场客户端
- en: Sawtooth lake is also under continuous development and therefore it is recommended
    that readers keep an eye on documentation available at [http://intelledger.github.io/](http://intelledger.github.io/)
    in order to keep up with the latest developments.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Sawtooth Lake也在持续发展，因此建议读者留意[http://intelledger.github.io/](http://intelledger.github.io/)上的文档，以便了解最新的发展动态。
- en: Corda
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Corda
- en: 'Corda is not a blockchain. Traditional blockchain solutions, as discussed before,
    have the concept of transactions that are bundled together in a block and each
    block is linked back cryptographically to its parent block, which provides an
    immutable record of transactions. This is not the case with Corda: Corda has been
    designed entirely from scratch with a new model for providing all blockchain benefits,
    but without a traditional blockchain. It has been developed purely for the financial
    industry to solve issues arising from the fact that each organization manages
    their own ledgers and thus have their own view of *truth*, which leads to contradictions
    and operational risk. Moreover, data is also duplicated at each organization which
    results in an increased cost of managing individual infrastructures and complexity.
    These are the types of problems within the financial industry that Corda aims
    to resolve by building a decentralized database platform.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Corda不是一个区块链。传统的区块链解决方案，正如前面讨论的，有将交易捆绑在一起形成一个区块的概念，每个区块都与其父区块进行密码学连接，这样就提供了不可变的交易记录。但Corda并非如此：Corda完全从零开始设计，提供了一种全新的模型来提供所有区块链的好处，但没有传统的区块链。它纯粹是为金融行业开发的，旨在解决由于每个组织都管理自己的总账而产生的*真相*的不同视图，导致了矛盾和运营风险。此外，数据也会在每个组织中复制，这导致了管理各自基础设施和复杂性成本的增加。这些都是Corda旨在通过搭建一个分布式数据库平台来解决的金融行业内的问题。
- en: Corda source code is available at [https://github.com/corda/corda](https://github.com/corda/corda).
    It is written in a language called Kotlin, which is a statically typed language
    targeting the **Java Virtual Machine** (**JVM**).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Corda源代码可以在[https://github.com/corda/corda](https://github.com/corda/corda)找到。它是用一种叫做Kotlin的语言编写的，这是一种针对**Java虚拟机**（**JVM**）的静态类型语言。
- en: Architecture
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 架构
- en: The main components of the Corda platform include state objects, contract code,
    legal prose, transactions, consensus, and flows.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Corda平台的主要组件包括状态对象、合同代码、法律文书、交易、共识和流程。
- en: State objects
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 状态对象
- en: State objects represent the smallest unit of data that represent a financial
    agreement. They are created or deleted as a result of a transaction execution.
    They refer to **contract code** and **legal prose.** Legal prose is optional and
    provides legal binding to the contract. However, contract code is mandatory in
    order to manage the state of the object. It is required in order to provide a
    state transition mechanism for the node according to the business logic defined
    in the contract code. State objects contain a data structure that represent the
    current state of the object. For example, in the following diagram, a state object
    represents the current state of the object. In this case, it is a simple mock
    agreement between **Party A** and **Party B** where **Party ABC** has paid **Party
    XYZ** **1,000 GBP**. This represents the current state of the object; however
    the referred contract code can change the state via transactions. State objects
    can be thought of as a state machine, which are consumed by transactions in order
    to create updated state objects.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 状态对象代表表示金融协议的最小数据单位。它们是作为交易执行的结果创建或删除的。它们引用**合同代码**和**法律文书**。法律文书是可选的，并为合同提供法律约束。但是，合同代码是强制性的，以便管理对象的状态。它是根据合同代码中定义的业务逻辑为节点提供状态转换机制所必需的。状态对象包含表示对象当前状态的数据结构。例如，在下图中，状态对象表示对象的当前状态。在这种情况下，它是**甲方
    A**和**乙方 B**之间的简单模拟协议，其中**甲方 ABC**已支付**乙方 XYZ****1,000 GBP**。这代表了对象的当前状态；但是所引用的合同代码可以通过交易改变状态。状态对象可以被视为状态机，它们被交易消耗以创建更新的状态对象。
- en: '![State objects](img/B05975_09_12.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![状态对象](img/B05975_09_12.jpg)'
- en: An example state object
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 一个状态对象示例
- en: Transactions
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交易
- en: Transactions are used to perform transitions between different states. For example,
    the state object shown in the preceding diagram is created as a result of a transaction.
    Corda uses a bitcoin-style UTXO based model for its transaction processing. The
    concept of state transition by transactions is same as in bitcoin. Similar to
    bitcoin, transactions can have none, single or multiple inputs, and single or
    multiple outputs. All transactions are digitally signed. Moreover, Corda has no
    concept of mining because it does not use blocks to arrange transactions in a
    blockchain. Instead, notary services are used in order to provide temporal ordering
    of transactions. In Corda, new transaction types can be developed using JVM bytecode,
    which makes it very flexible and powerful.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 交易用于在不同状态之间执行转换。例如，前图所示的状态对象是作为交易的结果创建的。Corda 使用类比特币的 UTXO 模型进行交易处理。交易通过交易进行状态转换的概念与比特币相同。与比特币类似，交易可以有零、单个或多个输入，以及单个或多个输出。所有交易都是数字签名的。此外，Corda
    没有挖矿的概念，因为它不使用区块来安排区块链上的交易。相反，记账服务用于提供交易的时间顺序。在 Corda 中，可以使用 JVM 字节码开发新的交易类型，这使其非常灵活和强大。
- en: Consensus
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 共识
- en: The consensus model in Corda is quite simple and is based on notary services
    that are discussed in a later section. The general idea is that the transactions
    are evaluated for their uniqueness by the notary service and, if they are unique,
    they are signed as valid. There can be single or multiple clustered notary services
    running on a Corda network. Various consensus algorithms like PBFT or Raft can
    be used by notaries to reach consensus.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 中的共识模型相当简单，基于稍后讨论的记账服务。其一般思路是通过记账服务评估交易的唯一性，如果它们是唯一的，就会被签署为有效的。Corda 网络上可以运行单个或多个集群记账服务。记账服务可以使用各种共识算法如
    PBFT 或 Raft 达成共识。
- en: 'There are two main concepts regarding consensus in Corda: Consensus over state
    validity, and consensus over state uniqueness. The first concept is concerned
    with the validation of the transaction, ensuring that all required signatures
    are available and states are appropriate. The second concept is a means to detect
    double--spend attack and ensures that a transaction has not been already been
    spent and is unique.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 共识有两个主要概念：关于状态有效性的共识，以及关于状态唯一性的共识。第一个概念涉及交易的验证，确保所有必需的签名都可用且状态适当。第二个概念是检测双花攻击的手段，并确保交易尚未被花费且唯一。
- en: Flows
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流程
- en: Flows in Corda are a novel idea that allow the development of decentralized
    workflows. All communication on the Corda network is handled by these flows. These
    are transaction-building protocols that can be used to define any financial flow
    of any complexity using code. Flows run as an asynchronous state machine and they
    interact with other nodes and users. During the execution, they can be suspended
    or resumed as required.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 中的流程是一种新颖的概念，它允许开发分散式工作流程。Corda 网络上的所有通信都由这些流程处理。这些是可以使用代码定义任何复杂的金融流程的交易构建协议。流程作为异步状态机运行，并且与其他节点和用户进行交互。在执行过程中，它们可以根据需要暂停或恢复。
- en: Components
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组成部分
- en: The Corda network has multiple components. All these components are described
    in the next section.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 网络有多个组件。所有这些组件在下一节中有描述。
- en: Nodes
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节点
- en: Nodes in a Corda network operated under a trust-less model and run by different
    organizations. Nodes run as part of an authenticated peer-to-peer network. Nodes
    communicate directly with each other using the **Advanced Message Queuing Protocol**
    (**AMQP**), which is an approved international standard (ISO/IEC 19464) and ensures
    that messages across different nodes are transferred safely and securely. AMQP
    works over **Transport Layer Security** (**TLS**) in Corda, thus ensuring privacy
    and integrity of data communicated between nodes.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 网络中的节点以无信任模型运行，并由不同的组织运行。节点作为经过身份验证的点对点网络的一部分运行。节点使用经过认可的国际标准（ISO/IEC
    19464）**高级消息队列协议**（**AMQP**）直接与彼此通信，确保跨不同节点的消息安全地和安全地传输。AMQP 在 Corda 中通过 **传输层安全**（**TLS**）工作，从而确保了节点之间通信的隐私和数据的完整性。
- en: 'Nodes also make use of a local relational database for storage. Messages on
    the network are encoded in a compact binary format. They are delivered and managed
    by using the **Apache Artemis message broker** (**Active MQ**). A node can serve
    as a network map service, notary, Oracle, or a regular node. The following diagram
    shows a high-level view of two nodes communicating with each other:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 节点还使用本地关系数据库进行存储。网络上的消息以紧凑的二进制格式进行编码。它们通过 **Apache Artemis message broker**
    （**Active MQ**）进行传递和管理。节点可以作为网络地图服务、公证机、Oracle 或常规节点。下图显示了两个节点相互通信的高级视图：
- en: '![Nodes](img/image_09_013.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![节点](img/image_09_013.jpg)'
- en: Two nodes communicating in a Corda network
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Corda 网络中通信的两个节点
- en: In the preceding diagram, **Node 1** is communicating with **Node 2** over a
    TLS communication channel using the AMQP protocol, and the nodes have a local
    relational database for storage.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的图表中，**Node 1**通过 AMQP 协议在 TLS 通信信道上和**Node 2**进行通信，节点有一个本地关系数据库用于存储。
- en: Permissioning service
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 权限服务
- en: A Permissioning service is used to provision TLS certificates for security.
    In order to participate on the network, participants are required to have a signed
    identity issued by a root certificate authority. Identities are required to be
    unique on the network and the Permissioning service is used to sign these identities.
    The naming convention used to recognise participants is based on the X.500 standard.
    This ensures the uniqueness of the name.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 权限服务用于提供安全的 TLS 证书。为了参与网络，参与者需要由根证书颁发机构签发的签名身份。网络上的身份需要是唯一的，权限服务用于签署这些身份。用于识别参与者的命名约定基于
    X.500 标准。这确保了名称的唯一性。
- en: Network map service
  id: totrans-209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络地图服务
- en: This service is used to provide a network map in the form of a document of all
    nodes on the network. This service publishes IP addresses, identity certificates
    and a list of services offered by nodes. All nodes announce their presence by
    registering to this service when they first start up, and when a connection request
    is received by a node, the presence of the requesting node is checked on the network
    map first. Put another way, this service resolves the identities of the participants
    to physical nodes.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 此服务用于提供网络地图，形式为网络上所有节点的文件。此服务发布 IP 地址、身份证书和节点提供的服务列表。当节点首次启动时，所有节点通过注册到此服务来宣布其存在，在节点接收到连接请求时，首先在网络地图中检查请求节点的存在。换句话说，此服务解析参与者的身份至物理节点。
- en: Notary service
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 公证服务
- en: In a traditional blockchain, mining is used to ascertain the order of blocks
    that contain transactions. In Corda, notary services are used to provide transaction
    ordering and timestamping services. There can be multiple notaries in a network
    and they are identified by composite public keys. Notaries can use different consensus
    algorithms like BFT or Raft depending on the requirements of the applications.
    Notary services sign the transactions to indicate validity and finality of the
    transaction which is then persisted to the database.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的区块链中，挖矿用于确定包含交易的块的顺序。在 Corda 中，公证服务用于提供交易排序和时间戳服务。网络中可以有多个公证人，并通过组合公钥进行标识。公证服务可以根据应用程序的要求使用不同的共识算法，如
    BFT 或 Raft。公证服务签署交易以指示交易的有效性和最终性，然后将其持久化到数据库中。
- en: Notaries can be run in a load-balanced configuration in order to spread the
    load across the nodes for performance reasons; and, in order to reduce latency,
    the nodes are recommended to be run physically closer to the transaction participants.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将负载分布在节点之间以提高性能，公证人可以以负载平衡的配置方式运行；为了减少延迟，建议节点在物理上靠近交易参与者。
- en: Oracle service
  id: totrans-214
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Oracle 服务
- en: Oracle services either sign a transaction containing a fact, if it is true,
    or can themselves provide factual data. They allow real world feed into the distributed
    ledgers.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 服务要么对包含事实的交易进行签名（如果事实为真），要么可以自己提供事实数据。它们允许真实世界的信息进入分布式账本。
- en: Transactions
  id: totrans-216
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 交易
- en: Transactions in a Corda network are never transmitted globally, but in a semi-private
    network. They are shared only between a subset of participants who are related
    to the transaction. This is in contrast to traditional blockchain solutions like
    Ethereum and bitcoin, where all transactions are broadcasted to the entire network
    globally. Transactions are digitally signed and either consume state(s) or create
    new state(s).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 网络中的交易永远不会全球传输，而是在半私密网络中进行。它们仅在与交易相关的参与者子集之间共享。这与传统的像以太坊和比特币这样的区块链解决方案形成对比，其中所有交易都会全球广播到整个网络。交易被数字签名，要么消耗状态，要么创建新状态。
- en: 'Transactions on a Corda network are composed of the following elements:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 网络上的交易由以下元素组成：
- en: '**Input references**: This is a reference to the states the transaction is
    going to consume and use as an input.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入引用**：这是指交易将要消耗和使用的状态的引用。'
- en: '**Output states**: These are new states created by the transaction.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出状态**：这些是交易创建的新状态。'
- en: '**Attachments**:This is a list of hashes of attached zip files. Zip files can
    contain code and other relevant documentation related to the transaction. Files
    themselves are not made part of the transaction, instead, they are transferred
    and stored separately.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附件**：这是附加的 zip 文件哈希列表。Zip 文件可以包含与交易相关的代码和其他相关文档。文件本身不作为交易的一部分，而是单独传输和存储。'
- en: '**Commands**:A command represents the information about the intended operation
    of the transaction as a parameter to the contract. Each command has a list of
    public keys which represents all parties that are required to sign a transaction.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令**：命令表示交易的预期操作的信息，作为合同的参数。每个命令都有一个公钥列表，表示需要签署交易的所有参与方。'
- en: '**Signatures**: This represents the signature required by the transaction.
    The total number of signatures required is directly proportional to the number
    of public keys for commands.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**签名**：这表示交易所需的签名。所需签名的总数与命令的公钥数量成正比。'
- en: '**Type**: There are two types of transactions namely, Normal or Notary changing.
    Notary changing transactions are used for reassigning a notary for a state.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**：交易有两种类型，即正常或更改公证。更改公证的交易用于重新分配状态的公证。'
- en: '**Timestamp**: This field represents a bracket of time during which the transaction
    has taken place. These are verified and enforced by notary services. Also, it
    is expected that if strict timings are required, which is desirable in many financial
    services scenarios, notaries should be synched with an atomic clock.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间戳**：此字段表示交易发生的时间段。这些时间戳由公证服务验证和执行。此外，如果需要严格的时间限制，这在许多金融服务场景中是可取的，公证应与原子钟同步。'
- en: '**Summaries**: This is a text description that describes the operations of
    the transaction.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**摘要**：这是描述交易操作的文本描述。'
- en: Vaults
  id: totrans-227
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 保险库
- en: Vaults run on a node and are akin to the concept of wallets in bitcoin. As the
    transactions are not globally broadcast, each node will have only that part of
    data in their vaults that is considered relevant to them. Vaults store their data
    in a standard relational database and as such can be queried by using standard
    SQL. Vaults can contain both on ledger and off ledger data, meaning that it can
    also have some part of data that is not on ledger.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 保险库在一个节点上运行，类似于比特币中的钱包概念。由于交易不是全球广播的，因此每个节点只会在它们的保险库中存储对他们而言被认为是相关的数据部分。保险库将它们的数据存储在标准的关系数据库中，因此可以使用标准的
    SQL 进行查询。保险库可以包含在账本上和离账本上的数据，这意味着它也可以有一些不在账本上的数据部分。
- en: CorDapp
  id: totrans-229
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: CorDapp
- en: The core model of Corda consists of state objects, transactions and transaction
    protocols, which when combined with contract code, APIs, wallet plugins, and user
    interface components results in constructing a **Corda distributed application**
    (**CorDapp**).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 的核心模型包括状态对象、交易和交易协议，当结合合约代码、API、钱包插件和用户界面组件时，形成一个 **Corda 分布式应用程序**（**CorDapp**）。
- en: 'Smart contracts in Corda are written using Kotlin or Java. The code is targeted
    for JVM. JVM has been modified slightly in order to achieve deterministic results
    of execution of JVM bytecode. There are three main components in a Corda smart
    contract as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 中的智能合约使用 Kotlin 或 Java 编写。代码针对 JVM。 JVM 已经略微修改，以实现 JVM 字节码执行的确定性结果。 Corda
    智能合约有三个主要组件，如下所示：
- en: Executable code that defines the validation logic to validate changes to the
    state objects.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可执行代码定义了验证逻辑，用于验证对状态对象的更改。
- en: State objects represent the current state of a contract and either can be consumed
    by a transaction or produced (created) by a transaction.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 状态对象表示合约的当前状态，并且可以被交易消耗或由交易产生（创建）。
- en: Commands are used to describe the operational and verification data that defines
    how a transaction can be verified.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令用于描述操作和验证数据，以定义如何验证交易。
- en: Development environment
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发环境
- en: The development environment for Corda can be set up easily using the following
    steps.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Corda 的开发环境可以通过以下步骤轻松设置。
- en: 'Required software includes the following:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 必需软件包括以下内容：
- en: JDK 8 which is available at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JDK 8，可在 [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
    下载。
- en: IntelliJ IDEA community edition which is free and available at [https://www.jetbrains.com/idea/download](https://www.jetbrains.com/idea/download) .
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 免费的 IntelliJ IDEA 社区版可在 [https://www.jetbrains.com/idea/download](https://www.jetbrains.com/idea/download)
    下载。
- en: H2 database platform independent zip, and is available at [http://www.h2database.com/html/download.html](http://www.h2database.com/html/download.html).
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: H2 数据库是一个平台无关的 zip 包，可从 [http://www.h2database.com/html/download.html](http://www.h2database.com/html/download.html)
    下载。
- en: Git, available at [https://git-scm.com/downloads](https://git-scm.com/downloads).
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git，可从 [https://git-scm.com/downloads](https://git-scm.com/downloads) 下载。
- en: Kotlin language, which is available for IntelliJ, and more information can be
    found at [https://kotlinlang.org/](https://kotlinlang.org/).
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kotlin 语言，可用于 IntelliJ，更多信息可在 [https://kotlinlang.org/](https://kotlinlang.org/)
    找到。
- en: Gradle is another component that is used to build Corda.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Gradle 是另一个用于构建 Corda 的组件。
- en: Once all these tools are installed, smart contract development can be started.
    CorDapps can be developed by utilizing an example template available at [https://github.com/corda/cordapp-template](https://github.com/corda/cordapp-template).
    Detailed documentation on how to develop contract code is available at [https://docs.corda.net/](https://docs.corda.net/).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了所有这些工具后，可以开始智能合约开发。可以利用 [https://github.com/corda/cordapp-template](https://github.com/corda/cordapp-template)
    上提供的示例模板来开发 CorDapps。有关如何开发合约代码的详细文档，请参阅 [https://docs.corda.net/](https://docs.corda.net/)。
- en: 'Corda can be cloned locally from GitHub using the following command:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 可使用以下命令从 GitHub 克隆 Corda：
- en: '[PRE10]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When the cloning is successful, you should see output similar to the following:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 当克隆成功时，您应该看到类似以下的输出：
- en: '[PRE11]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Once the repository is cloned, it can be opened in IntelliJ for further development.
    There are multiple samples available in the repository, such as a bank of Corda,
    interest rate swaps, demo, and traders demo. Readers can find them under the `/samples`
    directory under `corda` and they can be explored using IntelliJ IDEA IDE.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦仓库被克隆，就可以在 IntelliJ 中打开进行进一步开发。仓库中有多个示例，如 Corda 的银行、利率互换、演示和交易者演示。读者可以在 `corda`
    的 `/samples` 目录下找到它们，并可以使用 IntelliJ IDEA IDE 进行探索。
- en: Summary
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've provided an introduction to the Hyperledger project.
    Firstly, the core ideas behind the Hyperledger project were discussed and a brief
    introduction to all projects under incubation in Hyperledger was provided. Three
    main Hyperledger projects were discussed in detail, namely Hyperledger fabric,
    Sawtooth lake and Corda. All these projects are currently under heavy development
    and changes are expected in the next releases. Because of this, no in-depth practical
    exercises were given. However, the core concepts of all the projects mentioned
    above are expected to remain unchanged or changed only very slightly. Readers
    are encouraged to visit the relevant links provided within the chapter in order
    see the latest updates. It is obvious that a lot is going on in this space and
    projects like Hyperledger from the Linux foundation are playing a key role in
    the advancement of blockchain technology. Each of the projects discussed in this
    chapter has novel approaches towards solving the issues faced in various industries,
    and any current limitations within the blockchain technology are also being addressed,
    such as scalability and privacy. It is expected that more projects will soon be
    proposed to the Hyperledger project, and it is envisaged that with this collaborative
    and open effort blockchain technology will advance tremendously and will benefit
    the community as a whole.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 Hyperledger 项目。首先，讨论了 Hyperledger 项目背后的核心思想，并简要介绍了 Hyperledger 孵化中的所有项目。详细讨论了三个主要的
    Hyperledger 项目，分别是 Hyperledger Fabric、Sawtooth Lake 和 Corda。所有这些项目目前都在积极开发中，预计下一版本会有所变化。因此，本章未提供深入的实践练习。然而，上述所有项目的核心概念预计将保持不变，或仅进行非常小的更改。鼓励读者访问本章提供的相关链接，以获取最新更新。显然，这个领域正在发生很多事情，像来自
    Linux 基金会的 Hyperledger 这样的项目在推动区块链技术的发展中起着关键作用。本章讨论的每个项目都对解决各行业面临的问题有新颖的方法，并且正在解决区块链技术中的当前限制，如可扩展性和隐私性。预计将很快向
    Hyperledger 项目提出更多项目，并预计通过这种协作和开放的努力，区块链技术将得到极大推进，并将使整个社区受益。
