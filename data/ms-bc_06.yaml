- en: Chapter 6. Smart Contracts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章. 智能合约
- en: This chapter provides an introduction to smart contracts. This is not a new
    concept, but, with the advent of blockchain, interest in this concept has revived,
    and this is now an active area of research in the blockchain space. Due to the
    cost saving benefits that smart contracts can bring to the financial services
    industry by reducing the cost of transactions and simplifying complex contracts,
    rigorous research is being carried out by various financial and academic institutions
    in order to formalize and make the implementation of smart contracts easy and
    practical, as soon as possible.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了智能合约的概念。这并不是一个新概念，但随着区块链的发展，对这个概念的兴趣得到了重新激发，这现在是区块链领域中的一个活跃研究领域。由于智能合约可以通过减少交易成本和简化复杂合同给金融服务行业带来的节约成本而带来的益处，各种金融和学术机构正在进行严格的研究，以便尽快系统化并使智能合约的实施容易和实际。
- en: History
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 历史
- en: 'Smart contracts were first theorized by *Nick Szabo* in the late 1990s, but
    it was almost 20 years before the true potential and benefits of them were truly
    appreciated. Smart contracts are described by *Szabo* as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约最初是由*尼克·萨博*在上世纪90年代末提出的，但真正意识到它们的潜力和好处还要等上20年。*萨博*描述智能合约如下：
- en: '*"A smart contract is a computerized transaction protocol that executes the
    terms of a contract. The general objectives are to satisfy common contractual
    conditions (such as payment terms, liens, confidentiality, and even enforcement),
    minimize exceptions both malicious and accidental, and minimize the need for trusted
    intermediaries. Related economic goals include lowering fraud loss, arbitrations
    and enforcement costs, and other transaction costs."*'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“智能合约是一种计算机化的交易协议，执行合同条款。一般目标是满足常见的合同条件（如付款条款、留置权、机密性，甚至执行），最小化恶意和意外情况，并尽量减少对信任第三方的需求。相关的经济目标包括降低欺诈损失、仲裁和执行成本，以及其他交易成本。”*'
- en: This idea of smart contracts was implemented in a limited fashion in bitcoin
    in 2009, where bitcoin transactions can be used to transfer the value between
    users, over a peer-to-peer network where users do not necessarily trust each other
    and there is no need for a trusted intermediary.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这种智能合约的理念在2009年以有限的方式应用于比特币中，比特币交易可用于在用户之间传输价值，在对等网络上用户不一定信任对方，也无需信任第三方。
- en: Definition
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义
- en: There is no consensus on a standard definition of smart contracts. It is essential
    to define what a smart contract is, and the following is the author's attempt
    to provide a generalized definition of a smart contract.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于智能合约的标准定义并没有达成共识。定义智能合约的重要性是不言而喻的，以下是作者试图提供的智能合约的广义定义。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A smart contract is a secure and unstoppable computer program representing an
    agreement that is automatically executable and enforceable.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约是一种安全且不可阻挡的计算机程序，代表着一份自动可执行和可强制执行的协议。
- en: Dissecting this definition further reveals that a smart contract is in fact
    a computer program that is written in a language that a computer or target machine
    can understand. Also, it encompasses agreements between parties in the form of
    business logic. Another key idea is that smart contracts are automatically executed
    when certain conditions are met. They are enforceable, which means that all contractual
    terms are executed as defined and expected, even in the presence of adversaries.
    Enforcement is a broader term that encompasses traditional enforcement in the
    form of law, along with implementation of certain measures and controls that make
    it possible to execute contract terms without requiring any mediation. It should
    be noted that true smart contracts should not rely on traditional methods of enforcement.
    Instead, they should work on the principle that *code is law*, meaning that there
    is no need for an arbitrator or a third party to control or influence the execution
    of the smart contract. Smart contracts are self-enforcing as opposed to legally
    enforceable. This might be regarded as a libertarian's dream, but it is entirely
    possible, and is in line with the true spirit of smart contracts.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步解析这个定义会发现，智能合约实际上是一种用计算机或目标机器可以理解的语言编写的计算机程序。此外，它包括以商业逻辑形式达成的各方协议。另一个关键观点是，在满足某些条件时，智能合约会自动执行。它们是可执行的，这意味着所有合同条款都按照定义和预期执行，即使存在对手方也是如此。执行是一个更广泛的术语，它包括以法律形式的传统执行，以及实施某些措施和控制，使得能够在不需要任何调解的情况下执行合同条款。应当注意，真正的智能合约不应依赖传统的执行方法。相反，它们应该遵循*代码即法律*的原则，这意味着没有必要由仲裁员或第三方控制或影响智能合约的执行。智能合约是自我执行的，而不是法律可执行的。这可能被视为自由主义者的梦想，但这是完全可能的，并且符合智能合约的真正精神。
- en: Moreover, they are secure and unstoppable, which means that these computer programmes
    are required to be designed in such a fashion that they are fault tolerant and
    executable in reasonable amount of time. These programmes should be able to execute
    and maintain a healthy internal state, even if external factors are unfavorable.
    For example, imagine a normal computer programme which is encoded with some logic
    and executes according to the instruction coded within it, but if the environment
    it is running in or external factors it relies on deviate from the normal or expected
    state, the programme may react arbitrarily or simply abort. It is important that
    smart contracts are immune to this type of issue.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它们是安全的和不可阻挡的，这意味着这些计算机程序需要被设计成容错的，并在合理的时间内可执行。这些程序应该能够执行和维护健康的内部状态，即使外部因素不利也应如此。例如，想象一下一个正常的计算机程序，它编码了一些逻辑并根据其中编码的指令执行，但如果它运行的环境或者依赖的外部因素偏离了正常或预期的状态，该程序可能会以任意的方式作出反应或者简单地中止。重要的是智能合约对这种问题是免疫的。
- en: Secure and unstoppable may well be considered requirements or desirable features
    but it will provide greater benefits in the long run if security and unstoppable
    properties are included in the smart contract definition from the beginning. This
    will allow researchers to focus on these aspects from the start and will help
    to build strong foundations on which further research can then be based. There
    is also a suggestion by some researchers that smart contracts need not be automatically
    executable; instead they can be what's called *automatable*, due to manual human
    input required in certain scenarios. Whilst it's true that in some cases human
    input and control is desirable, it is not absolutely necessary; and, for a contract
    to be truly *smart*, in the authors opinion, it has to be fully automated. Certain
    inputs that need to be provided by people can and should also be automated via
    the use of Oracles. Oracles will be discussed later in this chapter in greater
    detail.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 安全和不可阻挡可能被认为是要求或理想特性，但从长远来看，如果安全性和不可阻挡性被纳入智能合约的定义，将会带来更大的好处。这将使研究人员能够从一开始就专注于这些方面，并有助于建立坚实的基础，以便进一步研究。一些研究人员还建议，智能合约不必自动执行；相反，它们可以是所谓的*可自动化*，因为在某些情况下需要手动人工输入。虽然在某些情况下人工输入和控制是可取的，但并非绝对必要；并且，在作者看来，要想合约真正*智能*，它必须是完全自动化的。某些需要人们提供的输入也可以和应该通过使用
    Oracles 来自动化。后面将在本章中更详细地讨论 Oracles。
- en: Smart contracts usually operate by managing their internal state using a state
    machine model. This allows development of an effective framework for programming
    smart contracts, where the state of a contract is advanced further based on some
    predefined criteria and conditions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约通常通过使用状态机模型来管理其内部状态进行操作。这使得可以开发一个有效的智能合约编程框架，在其中，合约的状态根据一些预定义的标准和条件进一步推进。
- en: 'There is also on-going debate on the question of whether code is acceptable
    as a contract in a court of law. This is totally different in presentation from
    traditional legal prose, albeit they do represent and enforce all contractual
    clauses but a court of law does not understand code. This raises several questions
    around how a smart contract can be legally binding: can it be developed in such
    a way that it is readily acceptable and understandable in a court of law? How
    can dispute resolution be implemented within the code, and is it possible? Moreover,
    regulatory and compliance requirements is another topic that needs to be addressed
    before smart contracts can be used as effectively as traditional legal documents.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 目前也正在围绕代码是否能在法庭上作为合同被接受进行讨论。这与传统法律文体的表现完全不同，尽管它们代表和执行了所有合同条款，但法庭并不理解代码。这引发了一些关于智能合约如何具有法律约束力的问题：是否可以开发一种方式，使其在法庭上能够被快速接受和理解？代码内又如何实施争议解决？此外，监管和合规要求是另一个需要在智能合约能够有效地像传统法律文书一样使用之前解决的主题。
- en: The preceding questions open up various possibilities, such as making smart
    contract code readable not only by machines but also by people. If humans and
    machines can both understand the code written in a smart contract it might be
    more acceptable in legal situations, as opposed to just a piece of code that no-one
    understands except for programmers. This desirable property is an area ripe for
    research and much research effort has been expended in this area to answer questions
    around semantics, meaning and interpretation of a contract.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上述问题打开了各种可能性，比如使智能合约代码不仅可以被机器理解，还可以被人理解。如果人类和机器都能理解智能合约中编写的代码，它可能在法律情况下更容易被接受，而不仅仅是程序员能理解的代码。这一理想的性质是一个需要研究的领域，已经在这一领域花费了大量的研究努力来回答关于合同的语义、意义和解释的问题。
- en: Smart contracts are inherently required to be deterministic in nature. This
    property will allow a smart contract to be run by any node on a network and achieve
    the same result. If the result differs even slightly between nodes, consensus
    then cannot be achieved and a whole paradigm of distributed consensus on blockchain
    can fail. Moreover, it is also desirable that the contract language itself is
    deterministic thus ensuring the integrity and stability of the smart contracts.
    By which I mean, deterministic in the sense that there are no non-deterministic
    functions used in the language which can produce varied results on different nodes.
    For example, various floating point operations calculated by various functions
    in a variety of programming languages can produce different results in different
    runtime environments. Another example is of some math functions in JavaScript
    which can produce different results for the same input on different browsers,
    and which can in turn lead to various bugs. This is highly undesirable in smart
    contracts because, if results are inconsistent between nodes, then consensus will
    never be achieved. A deterministic feature ensures that smart contracts always
    produce the same output for a specific input. In other words, programs once compiled
    produce a solid and accurate business logic that is completely in line with the
    requirements programmed in the high level code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约固有地要求具有确定性。这一性质使得智能合约可以在网络上的任何节点上运行并获得相同的结果。如果不同节点之间的结果即使有微小差异，就无法达成共识，整个区块链上的分布式共识模式就会失败。此外，合约语言本身也应该是确定性的，以确保智能合约的完整性和稳定性。也就是说，确定性指的是，在语言中没使用可以在不同节点上产生不同结果的非确定性函数。例如，各种编程语言中由各种函数进行的浮点运算在不同的运行环境中可能会产生不同的结果。另一个例子是
    JavaScript 中的一些数学函数，在不同浏览器上对于相同输入可能产生不同的结果，这可能导致各种错误。在智能合约中，这是极不可取的，因为如果节点之间的结果不一致，就永远无法达成共识。确定性特性可以确保智能合约总是对特定输入产生相同的输出。换句话说，一旦编译完成，程序就会产生一个与高级代码中编程的要求完全一致的坚实和准确的业务逻辑。
- en: 'In summary, a smart contract has the following four properties:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，智能合同具有以下四个属性：
- en: Automatically executable
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动执行
- en: Enforceable
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可强制执行
- en: Semantically sound
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语义上合理
- en: Secure and unstoppable.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全且不可阻止。
- en: The first two properties are required as a minimum, whereas the latter two may
    not be required or implementable in certain scenarios and can be relaxed. For
    example, a derivatives contract does not perhaps need to be semantically sound
    and unstoppable but should at least be automatically executable and enforceable
    at a basic level. On the other hand, a title deed needs to be semantically sound
    and complete therefore, in order for it to be implemented as a smart contract,
    the language must be understood by both computers and people. This issue of interpretation
    was addressed by *Ian Grigg* with his invention of **Ricardian contracts**, which
    we will look at in more detail in the next section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个属性至少是必需的，而后两个可能在某些情况下不需要或无法实现，并且可以放宽。例如，衍生品合同可能不需要语义上合理且不可阻止，但至少应该能够在基本水平上自动执行和可强制执行。另一方面，产权证书需要在语义上合理和完整，因此，为了将其实施为智能合同，语言必须被计算机和人理解。这个解释问题由*伊恩·格里格*在他发明**里卡第安合同**时解决了，我们将在下一节中更详细地讨论这个问题。
- en: Ricardian contracts
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 里卡第安合同
- en: 'Ricardian contracts were originally proposed in the *Financial Cryptography
    in 7 Layers* paper by *Ian Grigg* in late 1990s. These contracts were used initially
    in a bond trading and payment system called **Ricardo**. The key idea is to write
    a document which is understandable and acceptable by both a court of law and computer
    software. Ricardian contracts address the challenge of issuance of value over
    the Internet. It identifies the issuer and captures all the terms and clauses
    of the contract in a document in order to make it acceptable as a legally binding
    contract. Based on the original definition by *Ian Grigg* at [http://iang.org/papers/ricardian_contract.html](http://iang.org/papers/ricardian_contract.html),
    a Ricardian contract is a document that has several of the following properties:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 里卡第安合同最初是在20世纪90年代末由*伊恩·格里格*在《金融密码学七层》一文中提出的。这些合同最初在名为**里卡多**的债券交易和支付系统中使用。其关键思想是编写一个法院和计算机软件都能理解和接受的文档。里卡第安合同解决了通过互联网发行价值的挑战。它确定了发行人，并在文档中捕获了合同的所有条款和条款，以使其作为法律约束合同被接受。根据*伊恩·格里格*在[http://iang.org/papers/ricardian_contract.html](http://iang.org/papers/ricardian_contract.html)中的原始定义，里卡第安合同是具有以下几个属性的文件：
- en: A contract offered by an issuer to holders
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由发行人提供给持有人的合同
- en: A valuable right held by holders, and managed by the issuer
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由持有人持有的有价权利，并由发行人管理
- en: Easily readable by people (like a contract on paper)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于人们阅读（如纸质合同）
- en: Readable by programs (parseable, like a database)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可由程序阅读（可解析，如数据库）
- en: Digitally signed
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字签名
- en: Carries the keys and server information
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 携带密钥和服务器信息
- en: Allied with a unique and secure identifier
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与独特且安全的标识符相匹配
- en: In practice, the contracts are implemented by producing a single document that
    contains the terms of the contract in legal prose and the required machine-readable
    tags. This document is digitally signed by the issuer using their private key.
    This document is then hashed using a message digest function to produce a hash
    by which the document can be identified. This hash is then further used and signed
    by parties during the performance of the contract in order to link each transaction,
    with the identifier hash thus serving as evidence of intent. This is depicted
    in the diagram below, usually called a *bowtie* model.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，合同是通过生成一份包含合同条款的法律文本和所需的机器可读标签的单一文档来实现的。该文档由发行人使用其私钥进行数字签名。然后，使用消息摘要函数对该文档进行散列，以产生一个可以识别文档的哈希。然后，此哈希在合同执行期间由各方进一步使用和签署，以链接每笔交易，因此标识哈希作为意图的证据。这在下面的图表中描述，通常称为*蝴蝶结*模型。
- en: The diagram below shows the **World of Law** on the left hand side from where
    the document originates. It is then hashed and the resultant message digest is
    used as an indentifier throughout the **World of Accountancy**. The **World of
    Accountancy** can basically represent any or multiple accounting, trading and
    information systems that are being used in a business to perform various business
    operations. The idea behind this flow is that the message digest generated by
    hashing the document is first used in a so called *genesis transaction*, or first
    transaction, and then used in every transaction as an indentifier throughout the
    operational execution of the contract.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了左侧的**法律世界**，文档的来源就在这里。然后对其进行哈希处理，使用所得的消息摘要作为*会计世界*中的标识符。*会计世界*基本上可以代表业务中使用的任何或多个会计、交易和信息系统，用于执行各种业务操作。这个流程背后的思想是，通过对文档进行哈希处理生成的消息摘要首先在所谓的*创世交易*或第一笔交易中使用，然后在合同的运行执行过程中的每笔交易中都使用。
- en: This way, a secure link is created between the original written contract and
    every transaction in the *World of Accounting*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，原始书面合同与*会计世界*中的每笔交易之间就建立了安全链接。
- en: '![Ricardian contracts](img/image_06_001.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![李嘉图合同](img/image_06_001.jpg)'
- en: Ricardian contracts, bowtie diagram
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 李嘉图合同，蝴蝶结图
- en: 'A Ricardian contract is different from a smart contract in the sense that a
    smart contract does not include any contractual document and is focused purely
    on the execution of the contract. A Ricardian contract, on the other hand, is
    more concerned with the semantic richness and production of a document that contains
    contractual legal prose. The semantics of a contract can be divided into two types:
    operational semantics and denotational semantics. The first type defines the actual
    execution, correctness and safety of the contract, and the latter is concerned
    with the real-world meaning of the full contract. Some researchers have differentiated
    between smart contract code and smart legal contracts where a smart contract is
    only concerned with the execution of the contract and the second type encompasses
    both the denotational and operational semantics of a legal agreement. It makes
    sense to perhaps categorize smart contracts based on the difference between semantics,
    but it is better to consider smart contracts as a standalone entity that is capable
    of encoding legal prose and code (business logic) in it.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 李嘉图合同与智能合同有所不同，智能合同不包括任何合同文件，纯粹专注于合同的执行。另一方面，李嘉图合同更关注合同的语义丰富性和生成包含合同法律条文的文件。合同的语义可以分为两种类型：操作语义和指称语义。第一种类型定义了合同的实际执行、正确性和安全性，而后者关注合同整体的现实意义。一些研究人员区分了智能合同代码和智能法律合同，智能合同仅关注合同的执行，第二种类型涵盖了法律协议的指称和操作语义。或许基于语义差异对智能合同进行分类是有道理的，但更好的方式是将智能合同视为一个独立的实体，能够在其中编码法律条文和代码（业务逻辑）。
- en: At bitcoin, a very simple implementation of a smart contract can be observed
    which is fully oriented towards the execution of the contract, whereas a Ricardian
    contract is more geared towards producing a document that is understandable by
    humans, with some parts that a computer program can understand. This can be viewed
    as legal semantics vs operational performance (semantics vs performance) as shown
    in the following diagram. This was originally proposed by *Ian Grigg* in his paper
    *On the intersection of Ricardian and smart contracts*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在比特币中，可以观察到一个非常简单的智能合同实现，完全专注于合同的执行，而李嘉图合同更倾向于生成一个人类可理解的文件，其中有一些部分是计算机程序可以理解的。这可以被视为法律语义与操作性能（语义与性能）的区别，如下图所示。这最初是由*伊恩·格里格*在他的论文*关于李嘉图与智能合同的交汇*中提出的。
- en: '![Ricardian contracts](img/image_06_002.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![李嘉图合同](img/image_06_002.jpg)'
- en: Diagram explaining performance v. semantics are orthogonal issues as described
    by Ian Grigg; slightly modified to show examples of different types of contracts
    on both axis
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 说明性能与语义是伊恩·格里格描述的正交问题；稍作修改以显示两个轴上不同类型合同的示例。
- en: A smart contract is made up to have both of these elements (performance and
    semantics) embedded together, which completes an ideal model of a smart contract.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合同由这两个元素（执行和语义）组成，这样就完成了智能合同的理想模型。
- en: A Ricardian contract can be represented as a tuple of three objects, namely
    *Prose*, *parameters* and *code*. Prose represents the legal contract in regular
    language; code represents the program that is a computer-understandable representation
    of legal prose; and parameters join the appropriate parts of the legal contract
    to the equivalent code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Ricardian 合约可以表示为三个对象的元组，即 *Prose*、*参数* 和 *代码*。 Prose 表示常规语言中的法律合同；代码表示程序，是对法律文言的计算机可理解表示；参数将法律合同的适当部分与相应的代码连接起来。
- en: Ricardian contracts have been implemented in many systems, such as CommonAccord,
    OpenBazaar, OpenAssets, and Askemos.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[Ricardian contracts](https://wiki.example.org/ricardian_contracts) 已经在许多系统中实现，例如
    CommonAccord、OpenBazaar、OpenAssets 和 Askemos。'
- en: Smart contract templates
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 智能合约模板
- en: 'Smart contracts can be implemented for any industry where required but most
    current use cases are related to the financial industry. Recent work in smart
    contract space specific to the financial industry has proposed the idea of smart
    contract templates. The idea is to build standard templates that provide a framework
    to support legal agreements for financial instruments. This was proposed by *Clack
    et al* in their paper named *Smart Contract Templates: Foundations, design landscape
    and research directions*. The paper also proposed that domain-specific languages
    should be built in order to support design and implementation of smart contract
    templates. A language named *CLACK*, a common language for augmented contract
    knowledge has been proposed and research has begun to develop the language. This
    language is intended to be very rich and provide a large variety of functions
    ranging from supporting legal prose to the ability to be executed on multiple
    platforms and cryptographic functions.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约可以为任何需要的行业实现，但目前大多数用例与金融行业有关。智能合约领域最近的工作专注于金融行业，提出了智能合约模板的概念。这一想法是构建标准模板，为金融工具的法律协议提供支持框架。这是由
    *Clack 等* 在他们的论文中提出的，论文名为 *智能合约模板：基础、设计概况和研究方向*。该论文还提出应该构建领域特定语言来支持智能合约模板的设计和实现。一种名为
    *CLACK* 的语言，即用于增强合同知识的通用语言已经被提出，并且已经开始研发这种语言。这种语言旨在非常丰富，并提供各种功能，从支持法律文言到能够在多个平台上执行和进行密码功能。
- en: Contracts in the finance industry is not a new concept and various domain-specific
    language DSLs are already in use in the financial industry to provide specific
    language for a specific domain. For example, there are DSLs available that support
    development of insurance products, represent energy derivatives, or are being
    used to build trading strategies. The list goes on and a comprehensive list of
    financial domain-specific languages can be found at [http://www.dslfin.org/resources.html](http://www.dslfin.org/resources.html).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 金融业中的合同并不是一个新概念，各种领域特定语言 DSLs 已经在金融业中使用，为特定领域提供特定语言。例如，有可用的DSL支持保险产品的开发，代表能源衍生品，或用于构建交易策略。清单还在继续，可以在
    [http://www.dslfin.org/resources.html](http://www.dslfin.org/resources.html) 找到金融领域特定语言的综合清单。
- en: 'It''s important to understand the concept of domain-specific languages. These
    languages are developed with limited expressiveness for a particular application
    or area of interest. **Domain-specific languages** (**DSLs**) are different from
    **general-purpose programming languages** (**GPLs**): DSLs have a small set of
    features that are sufficient and optimized for the domain they are intended to
    be used in and, unlike GPLs, are usually not used to build general purpose large
    application programmes. Based on the design philosophy of DSLs it can be envisaged
    that such languages can be developed specifically to write smart contracts. Some
    work has already been done and Solidity is one such language that has been introduced
    with Ethereum blockchain to write smart contracts. Serpent is another language
    that has been introduced with Ethereum even though it''s not used as much as Solidity.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解**领域特定语言**的概念。这些语言是为特定应用程序或兴趣领域开发的，具有有限的表达能力。**领域特定语言**（**DSLs**）与**通用编程语言**（**GPLs**）不同：DSLs具有一小组特性，足以满足并针对其用途进行了优化，并且与GPLs不同，通常不用于构建通用的大型应用程序。基于DSL的设计哲学，可以设想开发这样的语言，以编写智能合约。一些工作已经做过了，Solidity就是一种这样的语言，它已经被引入到以太坊区块链中用于编写智能合约。Serpent是另一种语言，尽管没有Solidity那么常用，但也已经被引入到以太坊中。
- en: This idea of domain-specific languages for smart contract programming can be
    further extended to a graphical domain-specific language, a smart contract modelling
    platform where a domain expert (not a programmer) can use a graphical user interface
    and a canvas to define and draw the semantics and performance of a financial contract.
    Once the flow has been drawn and completed, it can be emulated first to test and
    then to deploy from the same system to the target platform, which can be a blockchain.
    This is also not a new concept and a similar approach is used in the Tibco streambase
    product, which is a Java based system used for building event-driven high frequency
    trading systems.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约编程的领域特定语言的这一理念可以进一步扩展到图形领域特定语言，即智能合约建模平台，其中领域专家（而不是程序员）可以使用图形用户界面和画布来定义和绘制金融合约的语义和性能。一旦流程被绘制和完成，就可以首先模拟测试，然后从同一系统部署到目标平台，该平台可以是区块链。这也不是一个新概念，类似的方法在Tibco
    streambase产品中使用，该产品是用于构建事件驱动高频交易系统的基于Java的系统。
- en: It is proposed that research should also be conducted in the area of developing
    high level DSLs that can be used to programme a smart contract in a user friendly
    graphical user interface thus allowing a non-programmer to design a smart contract.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在开发高级DSL的领域进行研究，这些DSL可以用于在用户友好的图形用户界面中编写智能合约，从而允许非程序员设计智能合约。
- en: Oracles
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Oracles
- en: Oracles are an important component of the smart contract ecosystem. The limitation
    with smart contracts is that they cannot access external data which might be required
    to control the execution of the business logic; for example, the stock price of
    a security that is required by the contract to release the dividend payments.
    Oracles can be used to provide external data to smart contracts. An Oracle is
    an interface that delivers data from an external source to smart contracts. Depending
    on the industry and requirements, Oracles can deliver different types of data
    ranging from weather reports, real-world news, and corporate actions to data coming
    from **Internet of Things** (**IoT**) devices. Oracles are trusted entities that
    use a secure channel to transfer data to a smart contract.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Oracles是智能合约生态系统的重要组成部分。智能合约的局限性在于它们无法访问可能需要的外部数据来控制业务逻辑的执行；例如，合约需要股票价格来释放股息支付。Oracles可以用于向智能合约提供外部数据。Oracle是从外部来源向智能合约传递数据的接口。根据行业和要求，Oracles可以提供不同类型的数据，范围从天气报告、现实世界新闻和企业行动到来自物联网设备的数据。Oracles是受信任的实体，它们使用安全通道将数据传输到智能合约。
- en: Oracles are also capable of digitally signing the data proving that the source
    of the data is authentic. Smart contracts can then subscribe to the Oracles, and
    the smart contracts can either pull the data, or Oracles can push the data to
    the smart contracts. It is also necessary that Oracles should not be able to manipulate
    the data they provide and must be able to provide authentic data. Even though
    Oracles are trusted, it may still be possible in some cases that the data is incorrect
    due to manipulation. Therefore, it is necessary that Oracles are unable to change
    the data. This validation can be provided by using various notary schemes, discussed
    later in the chapter. In this approach an issue can already be seen which perhaps
    is not desirable in some cases, and that is the issue of trust. How do you trust
    a third party about the quality and authenticity of data they provide? This is
    especially true in the financial world, where market data must be accurate and
    reliable. It might be acceptable for a smart contract designer to accept data
    for an oracle that is provided by a large reputable trusted third party, but the
    issue of centralization still remains. These types of Oracles can be called standard
    or simple Oracles.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Oracles还能够数字签名数据，证明数据来源是真实的。智能合约可以订阅Oracles，智能合约可以拉取数据，或者Oracles可以将数据推送到智能合约。Oracles不应该能够操纵他们提供的数据，必须能够提供真实的数据。尽管Oracles是受信任的，但在某些情况下，数据由于操纵可能仍然是不正确的。因此，Oracles无法更改数据是必要的。可以使用后面在本章中讨论的各种公证方案来提供此验证。在这种方法中，可能已经可以看到一个问题，这在某些情况下可能是不可取的，那就是信任问题。如何信任第三方提供的数据的质量和真实性？在金融世界尤其如此，市场数据必须准确可靠。对于智能合约设计者接受由大型值得信赖的可信第三方提供的Oracle数据可能是可以接受的，但中心化的问题仍然存在。这些类型的Oracles可以称为标准或简单的Oracles。
- en: Another type of Oracle, which essentially emerged due to the decentralization
    requirements, can be called *decentralized* Oracles. These types of Oracles can
    be built based on some distributed mechanism. It can also be envisaged that the
    Oracles can themselves source data from another blockchain which is driven by
    distributed consensus, thus ensuring the authenticity of data. For example, one
    institution running their own private blockchain can publish their data feed via
    an Oracle that can then be consumed by other blockchains.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种类型的 Oracle，基本上是由于去中心化的要求而出现的，可以称为*去中心化*的 Oracle。这些类型的 Oracle 可以基于某些分布式机制构建。也可以设想，Oracle
    可以从另一个由分布式共识驱动的区块链中获取数据，从而确保数据的真实性。例如，一个运行自己私有区块链的机构可以通过 Oracle 发布其数据源，然后被其他区块链所使用。
- en: Another concept of hardware Oracles is also introduced by researchers where
    real-world data from physical devices is required. For example, this can be used
    in telemetry and IoT. However, this approach however requires a mechanism in which
    hardware devices cannot be tampered with. This can be achieved by using tamper-proof
    devices.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 研究人员还引入了另一种硬件 Oracle 的概念，其中需要来自物理设备的实时数据。例如，这可以用于遥测和物联网。然而，这种方法需要一个硬件设备不能被篡改的机制。这可以通过使用防篡改设备来实现。
- en: There are platforms available now to enable a smart contract to get external
    data using an Oracle. There are different methods used by an Oracle to write data
    into the blockchain depending on the type of blockchain used. For example in bitcoin
    blockchain, an oracle can write data to a specific transaction via an `OP_RETURN`
    Opcode, and a smart contract can monitor that transaction and read the data. Various
    online services such as [http://www.oraclize.it/](http://www.oraclize.it/) and
    [https://www.realitykeys.com/](https://www.realitykeys.com/) are available that
    provide oracle services. Also, another service at [https://smartcontract.com/](https://smartcontract.com/)
    is available which provides external data and the ability to make payments using
    smart contracts. The aim of all these services is to enable the smart contract
    to get the data it needs to execute and make decisions. In order to prove the
    authenticity of the data retrieved by the Oracles from external sources, mechanisms
    like TLSnotary can be used which produce proof of communication between the data
    source and the oracle. This ensures that the data fed back to the smart contract
    is definitely retrieved from the source. More details about TLSnotary can be found
    here [https://tlsnotary.org/](https://tlsnotary.org/).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有平台可以使用 Oracle 让智能合约获取外部数据。根据所使用的区块链类型，Oracle 使用不同的方法将数据写入区块链。例如，在比特币区块链中，Oracle
    可以通过`OP_RETURN` Opcode将数据写入特定交易，智能合约可以监视该交易并读取数据。提供 Oracle 服务的各种在线服务，如[http://www.oraclize.it/](http://www.oraclize.it/)
    和 [https://www.realitykeys.com/](https://www.realitykeys.com/)，以及提供外部数据和使用智能合约进行支付功能的另一个服务[https://smartcontract.com/](https://smartcontract.com/)
    都是可用的。所有这些服务的目标都是使智能合约能够获取其执行和做出决策所需的数据。为了证明 Oracle 从外部源检索的数据的真实性，可以使用诸如 TLSnotary
    的机制，它产生数据源和 Oracle 之间通信的证明。这确保了反馈给智能合约的数据绝对是从源头检索的。关于 TLSnotary 的更多细节可以在这里找到 [https://tlsnotary.org/](https://tlsnotary.org/)。
- en: 'The following diagram shows a generic model of an oracle and smart contract
    ecosystem:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了 Oracle 和智能合约生态系统的通用模型：
- en: '![Oracles](img/B05975_06_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Oracle](img/B05975_06_03.jpg)'
- en: A simplified model of an oracle interacting with smart contract on blockchain
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 与区块链上智能合约交互的 Oracle 的简化模型
- en: Smart Oracles
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 智能 Oracle
- en: An idea of Smart Oracle has also been proposed and implemented in *Codius*.
    Smart Oracles are basically entities just like Oracles, but with the added capability
    of contract code execution. Smart Oracles proposed by Codius run using Google
    Native Client. which is a sandboxed environment for running untrusted x86 native
    code. Codius is available at [https://www.codius.org/](https://www.codius.org/).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *Codius* 中还提出并实现了智能 Oracle 的概念。智能 Oracle 基本上与 Oracle 一样，但具有合约代码执行的额外功能。Codius
    提出的智能 Oracle 使用 Google Native Client 运行。这是一个用于运行不受信任的 x86 本地代码的沙箱环境。Codius 可以在
    [https://www.codius.org/](https://www.codius.org/) 找到。
- en: Deploying smart contracts on a blockchain
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在区块链上部署智能合约
- en: Smart contracts may or may not be deployed on a blockchain but it makes sense
    to deploy them on a blockchain due to the distributed consensus mechanism provided
    by blockchain. Ethereum is an example of a blockchain that natively supports the
    development and deployment of smart contracts. Smart contracts on Ethereum blockchain
    are usually part of a larger application such as **Decentralized Autonomous organization**
    (**DAOs**).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约可能部署在区块链上，也可能不部署在区块链上，但由于区块链提供的分布式共识机制，将它们部署在区块链上是有意义的。以太坊是原生支持智能合约开发和部署的区块链的一个例子。以太坊区块链上的智能合约通常是**去中心化自治组织**（**DAOs**）的一部分。
- en: As a comparison, in bitcoin blockchain the `lock_time` field in the bitcoin
    transaction can be seen as an enabler of a basic version of a smart contract.
    The `lock_time` field enables a transaction to be locked until a specified time
    or after a number of blocks, thus enforcing a basic contract that a certain transaction
    can only be unlocked if certain conditions (elapsed time or number of blocks)
    is met. However, this is very limited in nature and should be only viewed as an
    example of a basic smart contract. In addition to the above mentioned example,
    bitcoin scripting language, though limited, can be used to construct basic smart
    contracts. One possibility is to fund a bitcoin address that can be spent by anyone
    who demonstrates a hash collision attack. This idea was presented on the Bitcointalk
    forum and more information can be found at [https://bitcointalk.org/index.php?topic=293382.0](https://bitcointalk.org/index.php?topic=293382.0).
    This can also be considered a basic form of smart contract.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 作为比较，在比特币区块链中，比特币交易中的`lock_time`字段可以被视为基本版本的智能合约的一种实现。`lock_time`字段使交易在指定的时间或一定数量的区块之后被锁定，从而强制执行某种基本的合约，即只有在满足某些条件（经过的时间或区块数量）时才能解锁某笔交易。然而，这在性质上非常有限，应该只被视为基本智能合约的一个例子。除了上述例子之外，比特币脚本语言，尽管有限，也可以用于构建基本的智能合约。一个可能性是为一个可以由任何能够展示哈希冲突攻击的人花费比特币地址提供资金。这个想法是在Bitcointalk论坛上提出的，更多信息可以在[https://bitcointalk.org/index.php?topic=293382.0](https://bitcointalk.org/index.php?topic=293382.0)找到。这也可以被认为是基本形式的智能合约。
- en: The DAO
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DAO
- en: The DAO is one of the highest crowdfunded projects, and started in April 2016\.
    This was basically a set of smart contracts written in order to provide a platform
    for investment. Due to a bug in the code this was hacked in June 2016 and an equivalent
    of 50 million dollars was siphoned out of the DAO into another account. This resulted
    in a hard fork on Ethereum in order to recover from the attack. It should be noted
    that the notion of *code is law*, or unstoppable smart contracts, should be viewed
    with some scepticism as the implementation of these concepts is not mature enough
    to warrant full and unquestionable trust. This is evident from the recent events
    where the Ethereum foundation was able to stop and change the execution of *The
    DAO* by introducing a hard fork. Though this hard fork was introduced for genuine
    reasons, it goes against the true spirit of decentralization and the notion of
    *code is law*. On the other hand, resistance against this hard fork and some miners
    who decided to keep mining on the original chain resulted in the creation of Ethereum
    Classic. This is the original, non-forked Ethereum blockchain where *code is still
    law*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: DAO是最高众筹项目之一，于2016年4月开始。基本上，这是一组智能合约，旨在提供一个投资平台。由于代码中的错误，这在2016年6月被黑客攻击，相当于5000万美元被转移到DAO之外的另一个账户。这导致以太坊进行了硬分叉以从这次攻击中恢复。需要注意的是，*代码即法律*或无法阻止的智能合约的概念应该以一定的怀疑态度看待，因为这些概念的实施还不够成熟，无法获得完全可信的信任。最近的事件表明以太坊基金会能够通过引入硬分叉来停止和改变*The
    DAO*的执行。尽管这次硬分叉是出于真正的原因，但它违背了去中心化的真正精神和*代码即法律*的概念。另一方面，对这次硬分叉的抵制以及一些矿工决定继续在原始链上进行挖矿导致了以太坊经典的创建。这是原始的、未经分叉的以太坊区块链，其中*代码仍然是法律*。
- en: This attack highlights the dangers of smart contracts and the absolute need
    to develop a formal language for smart contracts. The attack also highlighted
    the importance of thorough testing. There have been various vulnerabilities discovered
    in Ethereum recently around the smart contract development language. Therefore
    it is of utmost importance that a standard framework is developed to address all
    these issues. Some work has already begun as discussed previously, but this area
    is ripe for more research in order to address limitations in smart contract languages.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这次攻击突显了智能合约的危险性，并绝对需要开发一个正式的智能合约语言。这次攻击还凸显了彻底测试的重要性。最近在以太坊智能合约开发语言周围发现了各种漏洞。因此，开发一个标准框架来解决所有这些问题至关重要。正如之前讨论的那样，一些工作已经开始，但这个领域有待更多研究，以解决智能合约语言的局限性。
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter started by introducing a history of smart contracts, and was followed
    by a detailed discussion on the definition of a smart contract. As there is no
    agreement on the standard definition of a smart contract, we attempted to introduce
    a definition that encompasses the crux of smart contracts. An introduction to
    Ricardian contracts was also provided, and the difference between Ricardian contracts
    and smart contracts was explained, highlighting the fact that Ricardian contracts
    are concerned with the definition of the contract whereas smart contracts are
    geared towards the actual execution of the contract. The concept of smart contract
    templates was discussed, on the subject of which high quality active research
    is currently being conducted in academia and industry. Some ideas about the possibility
    of creating high level domain-specific languages were also discussed to create
    smart contracts or smart contract templates. In later sections of the chapter,
    the concepts of Oracles was introduced followed by a brief discussion on the DAO,
    and security issues in DAO and smart contracts.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首先介绍了智能合约的历史，接着详细讨论了智能合约的定义。由于对智能合约的标准定义尚无一致意见，我们尝试介绍一个涵盖智能合约要点的定义。还提供了对里卡迪安合约的介绍，并解释了里卡迪安合约与智能合约的区别，突出了里卡迪安合约关注合约的定义，而智能合约则关注合约的实际执行。讨论了智能合约模板的概念，就此主题，学术界和行业目前正在进行高质量的活跃研究。还讨论了创建高级领域特定语言以创建智能合约或智能合约模板的可能性。在章节的后续部分，介绍了Oracles的概念，随后简要讨论了DAO以及DAO和智能合约中的安全问题。
