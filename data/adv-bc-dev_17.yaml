- en: Building a Consortium Blockchain
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建联盟区块链
- en: Consortiums (an association, typically of several participants such as banks,
    e-commerce sites, government entities, hospitals, and so on) can use blockchain technology
    to solve many problems and make things faster and cheaper. Although they figure
    out how blockchain can help them, an Ethereum implementation of blockchain doesn't
    specifically fit them for all cases. Although there are other implementations
    of blockchain (for example, Hyperledger) that are built specially for consortium,
    as we learned Ethereum throughout the book, we will see how we can hack Ethereum
    to build a consortium blockchain. Basically, we will be using parity to build
    a consortium blockchain. Although there are other alternatives to parity, such
    as J.P. Morgan's quorum, we will use parity as at the time of writing this book,
    it has been in existence for some time, and many enterprises are already using
    it, whereas other alternatives are yet to be used by any enterprises. But for
    your requirements, parity may not be the best solution; therefore, investigate
    all the others too before deciding which one to use.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 联盟（通常由多个参与者组成，如银行、电子商务网站、政府实体、医院等）可以利用区块链技术解决许多问题，使事情变得更快更便宜。尽管他们弄清楚了区块链如何帮助他们，以太坊的区块链实现并不特别适合所有情况。尽管还有其他区块链实现（例如
    Hyperledger）专门为联盟进行构建，但在本书中我们将看到如何使用以太坊来构建联盟区块链。基本上，我们将使用 parity 来构建联盟区块链。虽然还有其他替代方案，如摩根大通的
    quorum，我们将使用 parity，因为在撰写本书时，它已存在了一段时间，并且许多企业已经在使用它，而其他替代方案尚未被任何企业使用。但是对于您的需求，parity
    可能并不是最好的解决方案；因此，在决定使用哪种解决方案之前，请调查所有其他解决方案。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Why is Ethereum unfit for consortium blockchain?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么以太坊不适用于联盟区块链？
- en: What is parity node and what are its features?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 parity 节点，它有哪些特性？
- en: What is the Proof-of-Authority consensus protocol and what types of PoA are
    supported by parity?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是权威证明共识协议，并且 parity 支持哪些 PoA 类型？
- en: How does the Aura consensus protocol work?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Aura 共识协议是如何工作的？
- en: Downloading and installing parity
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载和安装 parity
- en: Building a consortium blockchain using parity
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 parity 构建联盟区块链
- en: What is a consortium blockchain?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联盟区块链是什么？
- en: 'To understand what a consortium blockchain is, or, in other words, what kind
    of blockchain implementation consortiums need, let''s check out an example. Banks
    want to build a blockchain to make money transfers easier, faster, and cheaper.
    In this case, here are the things they need:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解什么是联盟区块链，或者换句话说，联盟需要什么样的区块链实现，我们来看一个例子。银行希望构建一个区块链，使资金转账变得更简单、更快捷、更便宜。在这种情况下，他们需要以下内容：
- en: '**Speed**: They need a blockchain network that can confirm transactions in
    near-real time. Currently, the Ethereum blockchain network block time is 12 seconds,
    and clients usually wait for a couple of minutes before confirming a transaction.'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**速度**：他们需要一个可以在近实时内确认交易的区块链网络。目前，以太坊区块链网络的区块时间为12秒，客户通常要等待几分钟才能确认一笔交易。'
- en: '**Permissioned**: They want the blockchain to be permissioned. Permissioning
    itself means various different things. For example: permissioning can include
    taking permission to join the network, it can include taking permission to to
    be able create blocks, it can also be taking permission to be able to send specific
    transactions and so on.'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**许可**：他们希望区块链是有许可的。许可本身意味着不同的事情。例如：许可可以包括获得加入网络的许可，可以包括获得创建区块的许可，也可以包括获得发送特定交易的许可等等。'
- en: '**Security**: PoW isn''t secure enough for private networks as there is a limited
    number of participants; therefore, there isn''t enough hash power produced to
    make it secure. So, there is a need for a consensus protocol that can keep the
    blockchain secure and immutable.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安全**：对于私有网络来说，工作量证明（PoW）并不安全，因为参与者数量有限；因此，产生的哈希算力不足以使其安全。因此，需要一种可以保持区块链安全和不可变性的共识协议。'
- en: '**Privacy**: Although the network is private, there is still a need for privacy
    in the network itself. There are two kinds of privacy:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**隐私**：尽管网络是私有的，在网络本身仍然需要隐私。有两种隐私：'
- en: '**Identity privacy**: Identity privacy is the act of making the identity untraceable.
    The solution we saw earlier to gain identity privacy was to use multiple Ethereum
    account addresses. But if multiple Ethereum accounts are used, then smart contracts
    will fail ownership validation as there is no way to know whether all of these
    accounts actually belong to the same user.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**身份隐私**：身份隐私是使身份无法追踪的行为。我们之前看到的获得身份隐私的解决方案是使用多个以太坊账户地址。但是，如果使用多个以太坊账户，则智能合约将无法通过所有权验证，因为无法知道这些账户是否实际上属于同一用户。'
- en: '**Data privacy:** Sometimes, we don''t want the data to be visible to all the
    nodes in the network, but to specific nodes only.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据隐私**：有时，我们不希望数据对网络中的所有节点可见，而只对特定节点可见。'
- en: Overall, in this chapter, we will learn how to solve these issues in Ethereum.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，在本章中，我们将学习如何解决以太坊中的这些问题。
- en: What is Proof-of-Authority consensus?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是权威证明共识？
- en: PoA is a consensus mechanism for blockchain in which consensus is achieved by
    referring to a list of validators (referred to as authorities when they are linked
    to physical entities). Validators are a group of accounts/nodes that are allowed
    to participate in the consensus; they validate the transactions and blocks.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: PoA是一种区块链共识机制，共识是通过参考验证器列表（当它们与物理实体相关联时称为权威）来实现的。验证器是一组被允许参与共识的账户/节点；它们验证交易和区块。
- en: Unlike PoW or PoS, there is no mining mechanism involved. There are various
    types of PoA protocols, and they vary depending on how they actually work. Hyperledger
    and Ripple are based on PoA. Hyperledger is based on PBFT, whereas ripple uses
    an iterative process.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与PoW或PoS不同，没有涉及挖矿机制。有各种类型的PoA协议，它们的差异取决于它们的实际工作方式。Hyperledger和Ripple都是基于PoA的。Hyperledger基于PBFT，而Ripple使用迭代过程。
- en: Introduction to parity
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Parity简介
- en: Parity is an Ethereum node written from the ground up for correctness/verifiability,
    modularization, low footprint, and high performance. It is written in Rust programming
    language, a hybrid imperative/OO/functional language with an emphasis on efficiency.
    It is professionally developed by Parity Technologies. At the time of writing
    this book, the latest version of parity is 1.7.0, and we will be using this version.
    We will learn as much as is required to build a consortium blockchain. To learn
    parity in depth, you can refer to the official documentation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Parity是从头开始为正确性/可验证性、模块化、低资源占用和高性能而编写的以太坊节点。它是用Rust编程语言编写的，这是一种具有效率重点的混合命令式/OO/函数式语言。它由Parity
    Technologies专业开发。在撰写本书时，parity的最新版本是1.7.0，我们将使用此版本。我们将学习构建联盟区块链所需的所有内容。要深入了解parity，您可以参考官方文档。
- en: It has a lot more features than go-ethereum, such as web3 dapp browser, much
    more advanced account management, and so on. But what makes it special is that
    it supports **Proof-of-Authority** (**PoA**) along with PoW. Parity currently
    su+-pports Aura and Tendermint PoA protocols. In future, it may support some more
    PoA protocols. Currently, parity recommends the use of Aura instead of Tendermint
    as Tendermint is still under development.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它比go-ethereum具有更多功能，如web3 dapp浏览器，更高级的账户管理等。但是使它特殊的是它支持**权威证明**（**PoA**）以及PoW。Parity目前支持Aura和Tendermint
    PoA协议。未来，它可能支持更多的PoA协议。目前，Parity建议使用Aura而不是Tendermint，因为Tendermint仍在开发中。
- en: Aura is a much better solution for permissioned blockchains than PoW as it has
    better block time and provides much better security in private networks.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于权限区块链来说，Aura比PoW是一个更好的解决方案，因为它拥有更好的区块时间，并且在私有网络中提供了更好的安全性。
- en: Understanding how Aura works
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Aura的工作原理
- en: Let's see at a high level how Aura works. Aura requires the same list of validators
    to be specified in each node. This is a list of account addresses that participate
    in the consensus. A node may or may not be a validating node. Even a validating
    node needs to have this list so that it can itself reach a consensus.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从高层次了解Aura的工作原理。Aura要求在每个节点中都指定相同的验证器列表。这是一组参与共识的账户地址。一个节点可能是验证节点，也可能不是。即使是验证节点，也需要有这个列表，以便它自己能达成共识。
- en: This list can either be provided as a static list in the genesis file if the
    list of validators is going to remain the same forever, or be provided in a smart
    contract so that it can be dynamically updated and every node knows about it.
    In a smart contract, you can configure various strategies regarding who can add
    new validators.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果验证者列表将永远保持不变，那么可以将此列表作为静态列表包含在创世文件中，或者将其提供在智能合约中，以便可以动态更新并使每个节点都知道它。在智能合约中，您可以配置有关谁可以添加新验证者的各种策略。
- en: The block time is configurable in the genesis file. It's up to you to decide
    the block time. In private networks, a block time as low as three seconds works
    well. In Aura, after every three seconds, one of the validators is selected and
    this validator is responsible for creating, verifying, signing, and broadcasting
    the block. We don't need to understand much about the actual selection algorithm
    as it won't impact our dapp development. But this is the formula to calculate
    the next validator, `(UNIX_TIMESTAMP / BLOCK_TIME % NUMBER_OF_TOTAL_VALIDATORS)`.
    The selection algorithm is smart enough to give equal chances to everyone When
    other nodes receive a block, they check whether it's from the next valid validator
    or not; and if not, they reject it. Unlike PoW, when a validator creates a block,
    it is not rewarded with ether. In Aura, it's up to us to decide whether to generate
    empty blocks or not when there are no transactions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 区块时间可以在创世文件中进行配置。由你决定区块时间。在私有网络中，3秒的区块时间效果很好。在 Aura 中，每三秒钟选择一个验证者，这个验证者负责创建、验证、签名和广播该区块。我们不需要太了解实际的选择算法，因为它不会影响我们的
    dapp 开发。但这是计算下一个验证者的公式，`(UNIX_TIMESTAMP / BLOCK_TIME % NUMBER_OF_TOTAL_VALIDATORS)`。选择算法足够智能，给每个人平等的机会。当其他节点接收到一个区块时，它们会检查它是否来自下一个有效的验证者；如果不是，则会拒绝它。与
    PoW 不同，当验证者创建一个区块时，它不会受到以太币的奖励。在 Aura 中，决定在没有交易时是否生成空块是由我们决定的。
- en: 'You must be wondering what will happen if the next validator node, due to some
    reason, fails to create and broadcast the next block. To understand this, let''s
    take an example: suppose A is the validator for the next block, which is the fifth
    block, and B is the validator for the sixth block. Assume block time is five seconds.
    If A fails to broadcast a block, then after five seconds when B''s turn arrives,
    it will broadcast a block. So nothing serious happens actually. The block timestamp
    will reveal these details.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你一定会想知道，如果由于某些原因，下一个验证节点无法创建和广播下一个区块会发生什么。为了理解这一点，让我们举个例子：假设 A 是第五个区块的验证者，而
    B 是第六个区块的验证者。假设区块时间为五秒。如果 A 未能广播一个区块，那么当 B 的轮到时，它将在五秒后广播一个区块。所以实际上没什么严重的事情发生。区块时间戳将揭示这些细节。
- en: 'You might also be wondering whether there are chances of networks ending up
    with multiple different blockchains as it happens in PoW when two miners mine
    at the same time. Yes, there are many ways this can happen. Let''s take an example
    and understand one way in which this can happen and how the network resolves it
    automatically. Suppose there are five validators: A, B, C, D, and E. Block time
    is five seconds. Suppose A is selected first and it broadcasts a block, but the
    block doesn''t reach D and E due to some reason; so they will think A didn''t
    broadcast the block. Now suppose the selection algorithm selects B to generate
    the next block; then B will generate the next block on top of A''s block and broadcast
    to all the nodes. D and E will reject it because the previous block hash will
    not match. Due to this, D and E will form a different chain, and A, B, and C will
    form a different chain. A, B, and C will reject blocks from D and E, and D and
    E will reject blocks from A, B, and C. This issue is resolved among the nodes
    as the blockchain that is with A, B and C is more accurate than the blockchain
    with D and E; therefore D and E will replace their version of blockchain with
    the blockchain held with A, B, and C. Both these versions of the blockchain will
    have different accuracy scores, and the score of the first blockchain will be
    more than the second one. When B broadcasts its block, it will also provide the
    score of its blockchain, and as its score is higher, D and E will have replaced
    their blockchain with B''s blockchain. This is how conflicts are resolved. The
    chain score of blockchain is calculated using `(U128_max * BLOCK_NUMBER_OF_LATEST_BLOCK
    - (UNIX_TIMESTAMP_OF_LATEST_BLOCK / BLOCK_TIME))`. Chains are scored first by
    their length (the more blocks, the better). For chains of equal length, the chain
    whose last block is older is chosen.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也会想知道网络是否有可能出现多个不同的区块链，就像 PoW 中当两个矿工同时挖矿时会发生的情况一样。是的，这种情况可能会发生很多次。让我们举个例子，了解一种可能发生这种情况的方式以及网络如何自动解决这个问题。假设有五个验证者：A、B、C、D
    和 E。区块时间为五秒。假设首先选择了 A，它广播了一个区块，但由于某种原因该区块未能到达 D 和 E；因此他们会认为 A 没有广播区块。现在假设选择算法选择了
    B 来生成下一个区块；那么 B 将在 A 的区块之上生成下一个区块，并广播给所有节点。D 和 E 将拒绝它，因为前一个区块的哈希值将不匹配。由此，D 和 E
    将形成一个不同的链，而 A、B 和 C 将形成另一个不同的链。A、B 和 C 将拒绝来自 D 和 E 的区块，而 D 和 E 将拒绝来自 A、B 和 C 的区块。节点之间将这个问题解决为
    A、B 和 C 所持有的区块链比 D 和 E 所持有的区块链更准确；因此 D 和 E 将用 A、B 和 C 所持有的区块链替换他们的版本。这两个版本的区块链将有不同的准确性得分，而第一个区块链的得分将比第二个区块链的得分更高。当
    B 广播它的区块时，它还将提供其区块链的得分，由于其得分更高，D 和 E 将用 B 的区块链替换了他们的区块链。这就是冲突如何解决的。区块链的链分数是使用
    `(U128_max * BLOCK_NUMBER_OF_LATEST_BLOCK - (UNIX_TIMESTAMP_OF_LATEST_BLOCK /
    BLOCK_TIME))` 计算的。首先按长度对链进行评分（区块越多，得分越高）。对于长度相等的链，选择最后一个区块更旧的链。
- en: You can learn more about Aura in depth at [https://github.com/paritytech/parity/wiki/Aura](https://github.com/paritytech/parity/wiki/Aura).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/paritytech/parity/wiki/Aura](https://github.com/paritytech/parity/wiki/Aura)
    深入了解 Aura。
- en: Getting parity running
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 Parity
- en: Parity requires Rust version 1.16.0 to build. It is recommended to install Rust
    through rustup.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Parity 需要 Rust 版本 1.16.0 来构建。建议通过 rustup 安装 Rust。
- en: Installing rust
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 rust
- en: If you don't already have rustup, you can install it like this.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装 rustup，你可以这样安装。
- en: Linux
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux
- en: 'On Linux-based operating systems, run this command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于 Linux 的操作系统上，运行此命令：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parity also requires the `gcc`, `g++`, `libssl-dev`/`openssl`, `libudev-dev`,
    and `pkg-config` packages to be installed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Parity 还需要安装 `gcc`、`g++`、`libssl-dev`/`openssl`、`libudev-dev` 和 `pkg-config`
    软件包。
- en: OS X
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OS X
- en: 'On OS X, run this command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OS X 上，运行此命令：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Parity also requires clang. Clang comes with Xcode command-line tools or can
    be installed with Homebrew.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Parity 还需要 clang。Clang 随 Xcode 命令行工具提供，也可以使用 Homebrew 安装。
- en: Windows
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows
- en: 'Make sure you have Visual Studio 2015 with C++ support installed. Next, download
    and run the rustup installer from [https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe](https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe),
    start "VS2015 x64 Native Tools Command Prompt", and use the following command
    to install and set up the `msvc` toolchain:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已安装了带有 C++ 支持的 Visual Studio 2015。接下来，从 [https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe](https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe)
    下载并运行 rustup 安装程序，启动 "VS2015 x64 Native Tools Command Prompt"，并使用以下命令安装和设置 `msvc`
    工具链：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Downloading, installing and running parity
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载、安装和运行 Parity
- en: 'Now, once you have rust installed on your operating system, you can run this
    simple one-line command to install parity:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦您在操作系统上安装了rust，您就可以运行这个简单的一行命令来安装parity：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To check whether parity is installed or not, run this command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查Parity是否安装，请运行此命令：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If parity is installed successfully, then you will see a list of sub-commands
    and options.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Parity安装成功，那么您将看到子命令和选项列表。
- en: Creating a private network
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建私有网络
- en: Now it's time to set up our consortium blockchain. We will create two validating
    nodes connected to each other using Aura for consensus. We will set up both on
    the same computer.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候建立我们的财团区块链了。我们将创建两个用Aura连接的验证节点。我们将把它们都设置在同一台计算机上。
- en: Creating accounts
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建帐户
- en: First, open two shell windows. The first one is for the first validator and
    the second one is for the second validator. The first node will contain two accounts
    and the second node will contain one account. The second account of first node
    will be assigned to some initial ether so that the network will have some ether.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开两个shell窗口。第一个是给第一个验证者，第二个是给第二个验证者。第一个节点将包含两个帐户，第二个节点将包含一个帐户。第一个节点的第二个帐户将被分配一些初始以太，以便网络将拥有一些以太。
- en: 'In the first shell, run this command twice:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个shell中，运行此命令两次：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Both the times it will ask you to enter a password. For now just put the same
    password for both accounts.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 两次都会要求您输入密码。现在只需为两个帐户输入相同的密码。
- en: 'In the second shell, run this command once only:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个shell中，只运行此命令一次：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Just as before, enter the password.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 就像以前一样，输入密码。
- en: Creating a specification file
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建规范文件
- en: 'Nodes of every network share a common specification file. This file tells the
    node about the genesis block, who the validators are, and so on. We will create
    a smart contract, which will contain the validators list. There are two types
    of validator contracts: non-reporting contract and reporting contract. We have
    to provide only one.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网络节点共享一个通用规范文件。该文件告诉节点有关创世块，验证者是谁，等等的信息。我们将创建一个智能合约，其中包含验证者列表。有两种类型的验证者合同：非报告合同和报告合同。我们只需要提供一个。
- en: The difference is that non-reporting contract only returns a list of validators,
    whereas reporting contract can take action for benign (benign misbehaviour may
    be simply not receiving a block from a designated validator) and malicious misbehavior
    (malicious misbehaviour would be releasing two different blocks for the same step).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 区别在于，非报告合同仅返回验证者列表，而报告合同可以对良性（良性不端行为可能只是从指定验证者那里收不到一个块）和恶意不端行为（恶意不端行为将释放两个不同的块以同一步骤为基础）采取行动。
- en: 'The non-reporting contract should have at least this interface:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 非报告合同应至少具有此接口：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `getValidators` function will be called on every block to determine the
    current list. The switching rules are then determined by the contract implementing
    that method.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`getValidators`函数将在每个块中调用，以确定当前列表。然后，切换规则由实现该方法的合同确定。'
- en: 'A reporting contract should have at least this interface:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 报告合同应至少具有此接口：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When there is benign or malicious behavior, the consensus engine calls the `reportBenign`
    and `reportMalicious` functions respectively.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当有良性或恶意行为时，共识引擎分别调用`reportBenign`和`reportMalicious`函数。
- en: 'Let''s create a reporting contract. Here is a basic example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个报告合同。以下是一个基本示例：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This code is self-explanatory. Make sure that in the validators array replaces
    the addresses with the first address of validator 1 and validator 2 nodes as we
    will be using those addresses for validation. Now compile the preceding contract
    using whatever you feel comfortable with.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是不言而喻的。确保在验证人员数组中用第一个验证节点的地址替换地址，因为我们将使用这些地址进行验证。现在使用您感觉舒服的方式编译上述合同。
- en: 'Now let''s create the specification file. Create a file named `spec.json`,
    and place this code in it:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建规范文件。创建一个名为`spec.json`的文件，并将以下代码放入其中：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is how the preceding file works:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述文件的工作方式：
- en: The `engine` property is used to set the consensus protocol and the protocol-specific
    parameters. Here, the engine is `authorityRound`, which is aura. `gasLimitBoundDivisor`
    determines gas limit adjustment and has the usual `ethereum` value. In the `validators`
    property, we have a `contract` property, which is the address of the reporting
    contract. `stepDuration` is the block time in seconds.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`engine` 属性用于设置共识协议和协议特定的参数。在这里，引擎是 `authorityRound`，即 aura。`gasLimitBoundDivisor`
    决定了燃料限制的调整，具有常见的 `ethereum` 值。在 `validators` 属性中，我们有一个 `contract` 属性，即报告合同的地址。`stepDuration`
    是以秒为单位的区块时间。'
- en: In the `params` property, only the network ID is what matters; others are standard
    for all chains.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `params` 属性中，只有网络 ID 有关紧要关头；其他参数对于所有链都是标准的。
- en: '`genesis` has some standard values for the `authorityRound` consensus.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`genesis` 具有一些标准值用于 `authorityRound` 共识。'
- en: '`accounts` is used to list the initial accounts and contracts that exist in
    the network. The first four are standard Ethereum built-in contracts; these should
    be included to use the Solidity contract writing language. The fifth one is the
    reporting contract. Make sure you replace the byte code with your byte code in
    the `constructor` param. The last account is the second account we generated in
    the validator 1 shell. It is used to supply ether to the network. Replace this
    address with yours.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accounts` 用于列出网络中存在的初始帐户和合同。前四个是标准的以太坊内置合同；这些应包括以使用 Solidity 合同编写语言。第五个是报告合同。确保您在
    `constructor` 参数中用您的字节码替换字节码。最后一个帐户是验证器 1 shell 中生成的第二个帐户。它用于向网络提供以太币。将此地址替换为您自己的地址。'
- en: Before we proceed further, create another file called as `node.pwds`. In that
    file, place the password of the accounts you created. This file will be used by
    the validators to unlock the accounts to sign the blocks.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步进行之前，请创建另一个名为 `node.pwds` 的文件。在该文件中，放置您创建的帐户的密码。验证者将使用此文件解锁帐户以签署区块。
- en: Launching nodes
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动节点
- en: 'Now we have all basic requirements ready to launch our validating nodes. In
    the first shell, run this command to launch the first validating node:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好启动我们的验证节点了。在第一个 shell 中，运行以下命令来启动第一个验证节点：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is how the preceding command works:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的工作方式：
- en: '`--chain` is used to specify the path of the specification file.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--chain` 用于指定规范文件的路径。'
- en: '`-d` is used to specify the data directory.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-d` 用于指定数据目录。'
- en: '`--force-sealing` ensures that blocks are produced even if there are no transactions.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--force-sealing` 确保即使没有交易也会产生区块。'
- en: '`--engine-signer` is used to specify the address using which the node will
    sign blocks, that is, the address of the validator. If malicious authorities are
    possible, then `--force-sealing` is advised; this will ensure that the correct
    chain is the longest. Make sure you change the address to the one you generated,
    that is, the first address generated on this shell.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--engine-signer` 用于指定节点将使用的地址来签署区块，即验证者的地址。如果可能存在恶意验证者，则建议使用 `--force-sealing`；这将确保正确的链是最长的。确保您将地址更改为您生成的地址，即此
    shell 上生成的第一个地址。'
- en: '`--password` is used to specify the password file.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--password` 用于指定密码文件。'
- en: 'In the second shell, run this command to launch second validating node:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个 shell 中，运行以下命令来启动第二个验证节点：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, make sure you change the address to the one you generated that is, the
    address generated on this shell.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，请确保将地址更改为您生成的地址，即在此 shell 上生成的地址。
- en: Connecting nodes
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接节点
- en: 'Now finally, we need to connect both the nodes. Open a new shell window and
    run this command to find the URL to connect to the second node:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要连接两个节点。打开一个新的 shell 窗口并运行以下命令以查找连接到第二个节点的 URL：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You will get this sort of output:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得这种类型的输出：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now run this command by replacing the encode URL and IP address in the `enode`
    URL to 127.0.0.1:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行以下命令，将 `enode` URL 中的编码 URL 和 IP 地址替换为 127.0.0.1：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You should get this output:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该获得以下输出：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The nodes should indicate 0/1/25 peers in the console, which means they are
    connected to each other. Here is a reference image:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 节点应在控制台中指示 0/1/25 个对等体，这意味着它们彼此连接。这是一个参考图像：
- en: '![](img/d9e5ad8a-6bc4-418b-95d3-990a6838cb89.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9e5ad8a-6bc4-418b-95d3-990a6838cb89.png)'
- en: Permissioning and privacy
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 许可和隐私
- en: 'We saw how parity solves the issues of speed and security. Parity currently
    doesn''t provide anything specific to permissioning and privacy. Let''s see how
    to achieve this in parity:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到 parity 如何解决速度和安全性问题。目前，parity 没有提供任何与权限和隐私相关的特定内容。让我们看看如何在 parity 中实现这一点：
- en: '**Permissioning**: A parity network can implement permissioning to decide who
    can join and who cannot by configuring each node''s server to allow connections
    from only specific IP addresses. Even if IP addresses aren''t blocked, to connect
    to a node in the network, a new node will needs an enode address, which we saw
    earlier, and that''s not guessable. So by default, there is a basic protection.
    But there is nothing to enforce this. Every node in the network has to take care
    about this at its end. Similar permissioning for who can create blocks and who
    cannot can be done through a smart contract. Finally what kind of transactions
    a node can send is not configurable at the moment.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**权限控制**：Parity 网络可以通过配置每个节点服务器以仅允许来自特定 IP 地址的连接来实现权限控制。即使 IP 地址没有被阻止，要连接到网络中的一个节点，新节点也需要一个之前我们看到的
    enode 地址，这是无法猜测的。因此，默认情况下，存在基本的保护。但是没有强制执行此措施。网络中的每个节点都必须在其端口注意此事。通过智能合约可以对谁可以创建区块和谁不能进行类似的权限控制。最后，节点可以发送什么样的交易目前无法配置。'
- en: '**Identity privacy**: There is a technique to achieve identity privacy by still
    enabling ownership checks. At the time of setting ownership, the owner needs to
    specify a public key of an un-deterministic asymmetric cryptography. Whenever
    it wants ownership checks to pass, it will provide an encrypted form of common
    text, which will be decrypted by the contract and see whether the account is owner
    or not. The contract should make sure the same encrypted data is not checked twice.'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**身份隐私**：有一种技术可以通过仍然启用所有权检查来实现身份隐私。在设置所有权时，所有者需要指定一个非确定性的非对称加密的公钥。每当它想要通过所有权检查时，它将提供常规文本的加密形式，合约将解密该文本并查看帐户是否为所有者。合约应确保不会检查相同的加密数据两次。'
- en: '**Data privacy**: If you are using blockchain to just store data, you can use
    symmetric encryption to encrypt data and store and share the key with people who
    you want to see the data. But operations on encrypted data is not possible. And
    if you need operations on input data and still gain privacy, then the parties
    have to set up a different blockchain network completely.'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据隐私**：如果你只是使用区块链来存储数据，你可以使用对称加密来加密数据并与希望查看数据的人分享密钥。但是无法对加密数据进行操作。如果需要对输入数据进行操作并仍然保护隐私，那么各方必须完全设置一个不同的区块链网络。'
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Overall in this chapter, we learned how to use parity and how aura works and
    some techniques to achieve permissioning and privacy in parity. Now you must be
    confident enough to at least build a proof-of-concept for a consortium using blockchain.
    Now you can go ahead and explore other solutions, such as Hyperledger 1.0 and
    quorum for building consortium blockchains. Currently, Ethereum is officially
    working on making more suitable for consortiums; therefore, keep a close eye on
    various blockchain information sources to learn about anything new that comes
    in the market.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用奇偶校验和光环运行以及一些实现奇偶校验和隐私的技术。现在，你至少可以自信地为使用区块链构建联合体构建一个概念验证。现在，你可以继续探索其他解决方案，例如
    Hyperledger 1.0 和 Quorum 用于构建联合体区块链。目前，以太坊正式致力于使其更适合联合体；因此，请密切关注各种区块链信息来源，了解市场上的任何新动态。
