- en: Chapter 4. Bitcoin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 比特币
- en: Bitcoin is the first application of the blockchain technology. In this chapter,
    readers will be introduced to bitcoin technology in detail.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币是区块链技术的第一个应用。在本章中，读者将详细介绍比特币技术。
- en: Bitcoin has started a revolution with the introduction of the very first fully
    decentralized digital currency, and one that has proven to be extremely secure
    and stable. This has also sparked a great interest in academic and industrial
    research and introduced many new research areas. Since its introduction in 2008,
    bitcoin has gained much popularity and is currently the most successful digital
    currency in the world with billions of dollars invested in it. It is built on
    decades of research in the field of cryptography, digital cash, and distributed
    computing. In the following section, a brief history is presented in order to
    provide the background required to understand the foundations behind the invention
    of bitcoin.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币随着第一个完全去中心化数字货币的推出而开启了一场革命，并且已被证明是非常安全稳定的。这也引发了学术和工业研究的极大兴趣，并引入了许多新的研究领域。自2008年推出以来，比特币受到了很大的欢迎，并且目前是世界上最成功的数字货币，投资额达数十亿美元。它建立在密码学、数字现金和分布式计算领域数十年的研究基础上。在接下来的部分中，将介绍一个简要的历史，以便提供理解比特币发明背后基础所需的背景。
- en: Digital currencies have always been an active area of research for many decades.
    Early proposals to create digital cash go as far back as the early 1980s. In 1982,
    *David Chaum* proposed a scheme that used blind signatures to build untraceable
    digital currency. In this scheme, a bank would issue digital money by signing
    a blind and random serial number presented to it by the user. The user could then
    use the digital token signed by the bank as currency. The limitation in this scheme
    was that the bank had to keep track of all used serial numbers. This was a central
    system by design and required to be trusted by the users. Later on in 1990, *David
    Chaum* proposed a refined version named e-cash that not only used blinded signature,
    but also some private identification data to craft a message that was then sent
    to the bank. This scheme allowed the detection of double spending but did not
    prevent it. If the same token was used at two different locations, then the identity
    of the double spender would be revealed. e-cash could only represent a fixed amount
    of money. *Adam Back's* hashcash, introduced in 1997, was originally proposed
    to thwart e-mail spam. The idea behind hashcash was to solve a computational puzzle
    that was easy to verify but comparatively difficult to compute.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数字货币一直是多个十年的研究活跃领域。早期提出创建数字现金的建议可以追溯到上世纪80年代初。1982年，*大卫·乔姆*提出了一种利用盲签名构建不可追踪数字货币的方案。在这个方案中，银行将通过签署用户提供的盲目且随机的序列号来发行数字货币。用户随后可以使用银行签署的数字令牌作为货币。这个方案的局限性在于银行必须跟踪所有已使用的序列号。这是一个中心化系统，需要用户信任。随后在1990年，*大卫·乔姆*提出了一个名为e-cash的改进版本，不仅使用了盲签名，还使用了一些私有识别数据来制作一个然后发送给银行的消息。这个方案允许检测双重支付，但不能防止它。如果同一令牌在两个不同的位置使用，则会显露双重支付者的身份。e-cash只能表示固定金额的货币。*亚当·巴克*于1997年提出的hashcash最初是为了防止电子邮件垃圾邮件。hashcash背后的思想是解决一个易于验证但相对难以计算的计算难题。
- en: The idea was that for a single user and a single e-mail, extra computational
    effort was not noticeable, but someone sending a large number of spam e-mails
    would be discouraged as the time and resources required to run the spam campaign
    would increase substantially.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是，对于单个用户和单个电子邮件，额外的计算工作是不可感知的，但是发送大量垃圾邮件的人会因为运行垃圾邮件活动所需的时间和资源大大增加而感到沮丧。
- en: B-money was proposed by *Wei Dai* in 1998, which introduced the idea of using
    Proof of Work to create money. A major weakness in the system was that an adversary
    with higher computational power could generate unsolicited money without allowing
    the network to adjust to an appropriate difficulty level. The system lacked details
    on the consensus mechanism between nodes and some security issues such as Sybil
    attacks were also not addressed. At the same time, *Nick Szabo* introduced the
    concept of BitGold, which was also based on the Proof of Work mechanism but had
    the same problems as b-money with the exception that the network difficulty level
    was adjustable. *Tomas Sander* and *Ammon TaShama* introduced an e-cash scheme
    in 1999 that, for the first time, used Merkle trees to represent coins and zero
    knowledge proofs to prove the possession of coins. In the scheme, a central bank
    was required that kept a record of all used serial numbers. This scheme allowed
    users to be fully anonymous albeit at a computational cost. **RPOW** (**Reusable
    Proof of Work**) was introduced by *Hal Finney* in 2004 and used the hashcash
    scheme by *Adam Back* as a proof of computational resources spent to create the
    money. This was also a central system that kept a central database to keep track
    of all used POW tokens. This was an online system that used remote attestation
    made possible by a **trusted computing platform** (**TPM hardware**).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: B-money是*魏·戴*在1998年提出的，引入了使用工作量证明来创造货币的概念。系统的一个主要弱点是，具有更高计算能力的对手可以生成未经邀请的货币，而不允许网络调整到适当的困难级别。该系统缺乏有关节点之间共识机制的细节，也没有解决诸如Sybil攻击等一些安全问题。与此同时，*尼克·萨博*介绍了BitGold的概念，它也基于工作量证明机制，但与b-money一样存在相同的问题，唯一的区别是网络难度水平是可调整的。*托马斯·桑德*和*阿蒙·塔沙马*在1999年介绍了一个电子现金方案，该方案首次使用Merkle树表示硬币，并使用零知识证明证明了对硬币的拥有权。在这个方案中，需要一个中央银行，它记录了所有已使用的序列号。尽管存在计算成本，但这个方案允许用户完全匿名。**RPOW**（**可重复使用工作量证明**）是由*哈尔·芬尼*在2004年推出的，使用*亚当·贝克*的hashcash方案作为消耗资源来创建货币的证明。这也是一个保留中央数据库以跟踪所有已使用POW令牌的中央系统。这是一个使用**可信计算平台**（**TPM硬件**）实现的基于远程证实的在线系统。
- en: All the previously mentioned schemes are intelligently designed but were weak
    from one aspect or another. Especially, all these schemes rely on a central server
    that is required to be trusted by the users.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所有先前提到的方案都设计得很巧妙，但从某个方面来看都存在弱点。特别是，所有这些方案都依赖于一个需要用户信任的中央服务器。
- en: Bitcoin
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比特币
- en: 'In 2008, a paper on bitcoin, *Bitcoin: A Peer-to-Peer Electronic Cash System*
    was written by *Satoshi Nakamoto*. The first key idea introduced in the paper
    was that purely peer-to-peer electronic cash that does need an intermediary bank
    to transfer payments between peers.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2008年，*中本聪*撰写了一篇关于比特币的论文*比特币：一种点对点的电子现金系统*。文中首次提出的关键思想是，纯粹的点对点电子现金不需要中介银行来在对等方之间转移支付。
- en: Bitcoin is built on decades of cryptographic research such as the research in
    Merkle trees, hash functions, public key cryptography, and digital signatures.
    Moreover, ideas such as BitGold, b-money, hashcash, and cryptographic time stamping
    provided the foundations for bitcoin invention. All these technologies are cleverly
    combined in bitcoin to create the world's first decentralized currency. The key
    issue that has been addressed in bitcoin is an elegant solution to the Byzantine
    Generals problem along with a practical solution of the double-spend problem.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币是建立在几十年的密码学研究基础上的，诸如Merkle树、哈希函数、公钥密码学和数字签名等研究。此外，BitGold、b-money、hashcash和密码时间戳等概念为比特币的发明奠定了基础。所有这些技术在比特币中被巧妙地结合起来，创造了世界上第一个去中心化货币。比特币所解决的关键问题是对拜占庭将军问题的优雅解决方案，以及双花问题的实际解决方案。
- en: 'The value of bitcoin has increased significantly since 2011, as shown in the
    following graph:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 自2011年以来，比特币的价值显著增长，如下图所示：
- en: '![Bitcoin](img/image_04_001.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![比特币](img/image_04_001.jpg)'
- en: Bitcoin price and volume since 2012 (on logarithmic scale)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 2012年以来比特币价格和交易量（对数刻度）
- en: The regulation of bitcoin is a controversial subject and as much as it is a
    libertarian's dream, law enforcement agencies and governments are proposing various
    regulations to control it, such as BitLicense issued by New York's state department
    of financial services. This is a license issued to businesses that perform activities
    related to virtual currencies.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对比特币的监管是一个有争议的话题，尽管它是自由主义者的梦想，执法机构和政府正在提出各种规定来控制它，比如纽约州金融服务部门颁发的BitLicense。这是针对进行虚拟货币相关活动的企业颁发的许可证。
- en: The growth of Bitcoin is also due to so-called *Network Effect*. Also called
    demand-side economies of scale, it is a concept that basically means more users
    who use the network, the more valuable it becomes. Over time, an exponential increase
    has been seen in the Bitcoin network growth. Even though the price of bitcoin
    is quite volatile, it has increased significantly over the last few years. Currently
    (at the time of writing this), bitcoin price is 815 GBP.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币的增长也是因为所谓的*网络效应*。也称为需求端的规模经济，这个概念基本上意味着更多使用网络的用户，它就变得更有价值。随着时间的推移，比特币网络增长呈指数增长。尽管比特币的价格相当波动，但在过去几年里它有了显著的增长。目前（在编写时），比特币的价格是815英镑。
- en: Bitcoin definition
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比特币定义
- en: Bitcoin can be defined in various ways; it's a protocol, a digital currency,
    and a platform. It is a combination of peer-to-peer network, protocols, and software
    that facilitate the creation and usage of the digital currency named bitcoin.
    Note that Bitcoin with a capital *B* is used to refer to the Bitcoin protocol,
    whereas bitcoin with a lowercase *b* is used to refer to bitcoin, the currency.
    Nodes in this peer-to-peer network talk to each other using the Bitcoin protocol.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币可以以各种方式定义；它是一个协议，一个数字货币，也是一个平台。它是一个由点对点网络、协议和软件组成的组合，用于方便创建和使用名为比特币的数字货币。请注意，大写字母*B*的比特币用于指代比特币协议，而小写字母*b*的比特币用于指代比特币这个货币。这个点对点网络中的节点使用比特币协议进行通信。
- en: Decentralization of currency was made possible for the first time with the invention
    of bitcoin. Moreover, the double spending problem was solved in an elegant and
    ingenious way in bitcoin. Double spending problem arises when, for example, a
    user sends coins to two different users at the same time and they are verified
    independently as valid transactions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过比特币的发明，货币的去中心化首次成为可能。此外，比特币还以一种巧妙而聪明的方式解决了双花问题。双花问题是指当一个用户同时向两个不同的用户发送硬币时，并且这些硬币独立验证为有效交易时产生的问题。
- en: Keys and addresses
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 密钥和地址
- en: 'Elliptic curve cryptography is used to generate public and private key pairs
    in the Bitcoin network. The bitcoin address is created by taking the corresponding
    public key of a private key and hashing it twice, first with the SHA256 algorithm
    and then with RIPEMD160\. The resultant 160-bit hash is then prefixed with a version
    number and finally encoded with a Base58Check encoding scheme. The bitcoin addresses
    are 26-35 characters long and begin with digit 1 or 3\. A typical bitcoin address
    looks like a string shown here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 椭圆曲线加密被用于在比特币网络中生成公钥和私钥对。比特币地址是通过取私钥的对应公钥并对其进行两次哈希来创建的，首先用SHA256算法，然后再用RIPEMD160。然后将结果的160位哈希值前缀加上版本号，最后使用Base58Check编码方案进行编码。比特币地址通常是26-35个字符长，并以数字1或3开始。一个典型的比特币地址看起来像是以下显示的字符串：
- en: '**1ANAguGG8bikEv2fYsTBnRUmx7QUcK58wt**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**1ANAguGG8bikEv2fYsTBnRUmx7QUcK58wt**'
- en: 'This is also commonly encoded in a QR code for easy sharing. The QR code of
    the preceding address is shown in the following image:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常也被编码成QR码以便分享。前述地址的QR码如下图所示：
- en: '![Keys and addresses](img/image_04_002.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![密钥和地址](img/image_04_002.jpg)'
- en: QR code of a bitcoin address 1ANAguGG8bikEv2fYsTBnRUmx7QUcK58wt
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币地址1ANAguGG8bikEv2fYsTBnRUmx7QUcK58wt的QR码
- en: Currently, there are two types of addresses, the commonly used P2PKH and another
    P2SH type, starting with 1 and 3, respectively. In the early days, bitcoin used
    direct Pay-to-Pubkey, which is now superseded by P2PKH. However, direct Pay-to-Pubkey
    is still used in bitcoin for coinbase addresses. Addresses should not be used
    more than once; otherwise, privacy and security issues can arise. Avoiding address
    reuse circumvents anonymity issues to an extent, bitcoin has some other security
    issues as well, such as transaction malleability, which requires different approaches
    to resolve.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，有两种类型的地址，常用的是 P2PKH 和另一种 P2SH 类型，分别以 1 和 3 开头。在早期，比特币使用直接的 Pay-to-Pubkey，现在已被
    P2PKH 取代。但是，直接的 Pay-to-Pubkey 在比特币中仍然用于 coinbase 地址。地址不应重复使用；否则，可能会出现隐私和安全问题。避免地址重用可在一定程度上规避匿名问题，比特币还存在其他安全问题，例如交易篡改，需要采用不同的方法来解决。
- en: '![Keys and addresses](img/image_04_003.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![密钥和地址](img/image_04_003.jpg)'
- en: From bitaddress.org private key and bitcoin address in a paper wallet
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从 bitaddress.org 中的纸钱包中的私钥和比特币地址
- en: Public keys in bitcoin
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比特币中的公钥
- en: In public key cryptography, public keys are generated from private keys. Bitcoin
    uses ECC based on the SECP256K1 standard. A private key is randomly selected and
    is 256-bit in length. Public keys can be presented in an uncompressed or compressed
    format. Public keys are basically *x* and *y* coordinates on an elliptic curve
    and in an uncompressed format and are presented with a prefix of 04 in a hexadecimal
    format. *X* and *Y* coordinates are both 32-bit in length. In total, the compressed
    public key is 33 bytes long as compared to 65 bytes in the uncompressed format.
    The compressed version of public keys basically includes only the *X* part, since
    the *Y* part can be derived from it. The reason why the compressed version of
    public keys works is that the bitcoin client initially used uncompressed keys,
    but starting from bitcoin core client 0.6, compressed keys are used as the standard.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在公钥密码学中，公钥是从私钥生成的。比特币使用基于 SECP256K1 标准的 ECC。私钥是随机选择的，长度为 256 位。公钥可以以未压缩或压缩格式呈现。公钥基本上是椭圆曲线上的
    *x* 和 *y* 坐标，在未压缩格式下以十六进制格式带有前缀 04 呈现。*X* 和 *Y* 坐标都是 32 位长。总的来说，压缩公钥的长度为 33 字节，而未压缩格式为
    65 字节。压缩版的公钥基本上只包括 *X* 部分，因为 *Y* 部分可以由它导出。压缩版的公钥之所以有效是因为比特币客户端最初使用未压缩密钥，但从比特币核心客户端
    0.6 开始，压缩密钥被用作标准。
- en: 'Keys are identified by various prefixes, described as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥由各种前缀标识，描述如下：
- en: Uncompressed public keys used 0x04 as the prefix
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未压缩的公钥以 0x04 作为前缀
- en: Compressed public key starts with 0x03 if the y 32-bit part of the public key
    is odd
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果公钥的 y 32 位部分为奇数，则压缩公钥以 0x03 开头
- en: Compressed public key starts with 0x02 if the y 32-bit part of the public key
    is even
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果公钥的 y 32 位部分为偶数，则压缩公钥以 0x02 开头
- en: The more detailed mathematical description and the reason why it works is described
    here. If the ECC graph is visualized, it reveals that the *y* coordinate can be
    either below the *x* axis or above the *x* axis and as the curve is symmetric,
    only the location in the prime field is required to be stored.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 更详细的数学描述及其工作原理在此描述。如果可视化 ECC 图表，将显示 *y* 坐标可以位于 *x* 轴下方或上方，由于曲线对称，因此只需存储在素数域中的位置。
- en: Private keys in bitcoin
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比特币中的私钥
- en: Private keys are basically 256-bit numbers chosen in the range specified by
    the SECP256K1 ECDSA recommendation. Any randomly chosen 256-bit number from 0x1
    to 0xFFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFE BAAE DCE6 AF48 A03B BFD2 5E8C D036
    4140 is a valid private key.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 私钥基本上是根据 SECP256K1 ECDSA 推荐规范指定的范围中选择的 256 位数字。从 0x1 到 0xFFFF FFFF FFFF FFFF
    FFFF FFFF FFFF FFFE BAAE DCE6 AF48 A03B BFD2 5E8C D036 4140 中随机选择的任意 256 位数字都是有效的私钥。
- en: Private keys are usually encoded using **Wallet Import Format** (**WIF**) in
    order to make them easier to copy and use. WIF can be converted into private key
    and vice versa. The steps are described here.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 私钥通常使用**钱包导入格式**（**WIF**）进行编码，以便更容易地复制和使用。WIF 可以转换为私钥，反之亦然。具体步骤请参见此处。
- en: Also, **Mini Private Key Format** is sometimes used to encode the key in under
    30 characters in order to allow storage where physical space is limited, for example,
    etching on physical coins or damage-resistant QR codes. The bitcoin core client
    also allows the encryption of the wallet that contains the private keys.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，**迷你私钥格式**有时用于在不到 30 个字符的情况下对密钥进行编码，以允许在空间有限的情况下存储，例如，在实体硬币上刻写或耐损 QR 码上。比特币核心客户端还允许加密包含私钥的钱包。
- en: Bitcoin currency units
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比特币货币单位
- en: Bitcoin currency units are described as follows. The smallest bitcoin denomination
    is the Satoshi.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币货币单位描述如下。最小的比特币单位是 Satoshi。
- en: '![Bitcoin currency units](img/image_04_004.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![比特币货币单位](img/image_04_004.jpg)'
- en: Base58Check encoding
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Base58Check 编码
- en: This encoding is used to limit the confusion between various characters, such
    as 0OIl as they can look the same in different fonts. The encoding basically takes
    the binary byte arrays and converts them into human-readable strings. This string
    is composed by utlilizing a set of 58 alphanumeric symbols. More explanation and
    logic can be found in the `base58.h` source file in the bitcoin source code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此编码用于限制不同字体中相似字符（例如 0OIl）之间的混淆。该编码基本上将二进制字节数组转换为人类可读字符串。这个字符串是通过使用一组 58 个字母数字符号来构成的。有关更多解释和逻辑，请参阅比特币源代码中的
    `base58.h` 源文件。
- en: '![Base58Check encoding](img/image_04_005.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![Base58Check 编码](img/image_04_005.jpg)'
- en: Explanation from the bitcoin source code
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 来自比特币源代码的解释
- en: Bitcoin addresses are encoded using the Base58check encoding.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币地址使用 Base58check 编码进行编码。
- en: Vanity addresses
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 虚荣地址
- en: 'As bitcoin addresses are based on base 58 encoding, it is possible to generate
    addresses that contain human-readable messages. An example is shown as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于比特币地址基于 base 58 编码，因此可以生成包含人类可读消息的地址。以下是一个示例：
- en: '![Vanity addresses](img/image_04_006.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![虚荣地址](img/image_04_006.jpg)'
- en: Public address encoded in QR
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: QR 中编码的公共地址
- en: 'Vanity addresses are generated using a purely brute-force method. An example
    is shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 虚荣地址是使用纯粹的暴力方法生成的。以下截图显示了一个示例：
- en: '![Vanity addresses](img/image_04_007.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![虚荣地址](img/image_04_007.jpg)'
- en: Vanity address generated from https://bitcoinvanitygen.com/
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从 https://bitcoinvanitygen.com/ 生成的虚荣地址
- en: Transactions
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易
- en: Transactions are at the core of the bitcoin ecosystem. Transactions can be as
    simple as just sending some bitcoins to a bitcoin address, or it can be quite
    complex depending on the requirements. Each transaction is composed of at least
    one input and output. Inputs can be thought of as coins being spent that have
    been created in a previous transaction and outputs as coins being created. If
    a transaction is minting new coins, then there is no input and therefore no signature
    is needed. If a transaction is to sends coins to some other user (a bitcoin address),
    then it needs to be signed by the sender with their private key and a reference
    is also required to the previous transaction in order to show the origin of the
    coins. Coins are, in fact, unspent transaction outputs represented in Satoshis.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 交易是比特币生态系统的核心。交易可以简单到只是将一些比特币发送到比特币地址，也可以根据需求变得非常复杂。每个交易至少由一个输入和输出组成。输入可以被视为在先前交易中创建的被花费的硬币，而输出则被视为被创建的硬币。如果交易正在铸造新的硬币，则没有输入，因此不需要签名。如果交易是将硬币发送给其他用户（比特币地址），则需要由发送者使用其私钥签名，并且还需要参考先前交易以显示硬币的来源。事实上，硬币是以
    Satoshi 表示的未花费交易输出。
- en: Transactions are not encrypted and are publicly visible in the blockchain. Blocks
    are made up of transactions and these can be viewed using any online blockchain
    explorer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 交易未加密，可以在区块链中公开查看。区块由交易组成，这些交易可以使用任何在线区块链浏览器查看。
- en: The transaction life cycle
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交易生命周期
- en: A user/sender sends a transaction using wallet software or some other interface.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户/发送者使用钱包软件或其他界面发送交易。
- en: The wallet software signs the transaction using the sender's private key.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 钱包软件使用发送者的私钥对交易进行签名。
- en: The transaction is broadcasted to the Bitcoin network using a flooding algorithm.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交易使用洪泛算法广播到比特币网络。
- en: Mining nodes include this transaction in the next block to be mined.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 挖掘节点将此交易包含在下一个要挖掘的块中。
- en: Mining starts once a miner who solves the Proof of Work problem broadcasts the
    newly mined block to the network. Proof of Work is explained in detail later in
    this chapter.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦解决工作量证明问题的矿工向网络广播新挖掘的区块，挖矿就开始了。工作量证明将在本章后面详细解释。
- en: The nodes verify the block and propagate the block further, and confirmation
    starts to generate.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 节点验证块并传播块，确认开始生成。
- en: Finally, the confirmations start to appear in the receiver's wallet and after
    approximately six confirmations, the transaction is considered finalized and confirmed.
    However, six is just a recommended number; the transaction can be considered final
    even after the first confirmation. The key idea behind waiting for six confirmations
    is that the probability of double spending is virtually eliminated after six confirmations.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，确认开始出现在接收方的钱包中，大约六次确认后，交易被视为最终确定。然而，六只是一个建议的数字；即使在第一次确认后，交易也可以被视为最终确定。等待六次确认背后的关键思想是，六次确认后几乎消除了双重支付的可能性。
- en: The transaction structure
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交易结构
- en: 'A transaction at a high level contains metadata, inputs, and outputs. Transactions
    are combined to create a block. The transaction structure is shown in the following
    table:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 高层次上，每个交易都包含元数据、输入和输出。交易被组合创建一个块。交易结构如下表所示：
- en: '| **Field** | **Size** | **Description** |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **大小** | **描述** |'
- en: '| Version Number | 4 bytes | Used to specify rules to be used by the miners
    and nodes for transaction processing. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 版本号 | 4字节 | 用于指定矿工和节点用于交易处理的规则。 |'
- en: '| Input counter | 1 bytes - 9 bytes | The number of inputs included in the
    transaction. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 输入计数器 | 1字节至9字节 | 交易中包含的输入数量。 |'
- en: '| list of inputs | variable | Each input is composed of several fields, including
    Previous transaction hash, Previous Txout-index, Txin-script length, Txin-script,
    and optional sequence number. The first transaction in a block is also called
    a coinbase transaction. It specifies one or more transaction inputs. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 输入列表 | 可变 | 每个输入由多个字段组成，包括前一笔交易哈希、前一笔交易输出-索引、Txin脚本长度、Txin脚本和可选的序号。块中的第一个交易也称为coinbase交易。它指定一个或多个交易输入。
    |'
- en: '| Out-counter | 1 bytes - 9 bytes | A positive integer representing the number
    of outputs. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 输出计数器 | 1字节至9字节 | 代表输出数量的正整数。 |'
- en: '| list of outputs | variable | Outputs included in the transaction. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 输出列表 | 可变 | 包含在交易中的输出。 |'
- en: '| lock_time | 4 bytes | This defines the earliest time when a transaction becomes
    valid. It is either a Unix timestamp or a block number. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 锁定时间 | 4字节 | 定义交易有效的最早时间。可以是Unix时间戳或区块号。 |'
- en: '**MetaData**: This part of the transaction contains some values such as the
    size of the transaction, the number of inputs and outputs, the hash of the transaction,
    and a `lock_time` field. Every transaction has a prefix specifying the version
    number.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元数据：** 交易的这部分包含一些值，如交易大小、输入和输出数量、交易的哈希和一个`lock_time`字段。每个交易都有一个指定版本号的前缀。'
- en: '**Inputs**: Generally, each input spends a previous output. Each output is
    considered an **Unspent Transaction Output** (**UTXO**) until an input consumes
    it.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入：** 通常，每个输入都花费之前的输出。每个输出都被视为未被花费的交易输出（UTXO）直到有输入消耗它。'
- en: '**Outputs**: Outputs have only two fields, and they contain instructions for
    the sending of bitcoins. The first field contains the amount of Satoshis, whereas
    the second field is a locking script that contains the conditions that need to
    be met in order for the output to be spent. More information on transaction spending
    using locking and unlocking scripts and producing outputs is discussed later in
    this section.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出：** 输出只有两个字段，并包含比特币发送的指令。第一个字段包含Satoshis的金额，而第二个字段是一个锁定脚本，其中包含必须满足的条件，以便花费输出。稍后在本节中将讨论使用锁定和解锁脚本以及产生输出进行交易支出的更多信息。'
- en: '**Verification:** Verification is performed using bitcoin''s scripting language.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证：** 使用比特币的脚本语言进行验证。'
- en: 'A sample transaction is shown as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例交易如下所示：
- en: '![The transaction structure](img/image_04_008.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![交易结构](img/image_04_008.jpg)'
- en: A sample decoded transaction, showing various fields described earlier
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 显示了各个早期描述的字段的样例解码交易
- en: The script language
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 脚本语言
- en: Bitcoin uses a simple stack-based language called *script* to describe how bitcoins
    can be spent and transferred. It is not Turing complete and has no loops to avoid
    any undesirable effects of long running/hung scripts on the bitcoin network. This
    scripting language is based on a Forth-like syntax and uses a reverse polish notation
    in which every operand is followed by its operators. It is evaluated from the
    left to the right using a **Last in First Out **(**LIFO**) stack.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币使用一种简单的基于堆栈的语言称为*脚本*来描述比特币如何被花费和转移。它不是图灵完备的，并且没有循环，以避免长时间运行/挂起脚本对比特币网络产生任何不良影响。这种脚本语言基于类似于Forth的语法，并使用逆波兰表示法，其中每个操作数都跟随其操作符。它从左到右使用**后进先出**（**LIFO**）堆栈进行评估。
- en: Scripts use various Opcodes or instructions to define their operation. Opcodes
    are also known as words, commands, or functions. Earlier versions of the bitcoin
    node had a few Opcodes that are no longer used due to bugs discovered in their
    design.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本使用各种操作码或指令来定义其操作。操作码也称为字、命令或函数。比特币节点的早期版本有一些操作码，由于在设计中发现了错误而不再使用。
- en: The various categories of the scripting Opcodes are constants, flow control,
    stack, bitwise logic, splice, and arithmetic, cryptography, and lock time.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本操作码的各种类别包括常量、流程控制、堆栈、位逻辑、拼接、算术、密码学和锁定时间。
- en: A transaction script is evaluated by combining `ScriptSig` and `ScriptPubKey`.
    `ScriptSig` is the unlocking script, whereas `ScriptPubKey` is the locking script.
    This is how a transaction is evaluated to be spent; first, it is unlocked and
    then it is spent. `ScriptSig` is provided by the user who wishes to unlock the
    transaction. `ScriptPubkey` is part of the transaction output and specifies the
    conditions that need to be fulfilled in order to spend the output. In other words,
    outputs are locked by the `ScriptPubKey` (Locking script) that contains the conditions,
    when met will unlock the output, and coins can then be redeemed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过组合`ScriptSig`和`ScriptPubKey`来评估交易脚本。`ScriptSig`是解锁脚本，而`ScriptPubKey`是锁定脚本。这就是如何评估交易是否已经花费；首先解锁，然后花费。`ScriptSig`由希望解锁交易的用户提供。`ScriptPubkey`是交易输出的一部分，并指定了必须满足的条件才能花费输出。换句话说，输出由包含条件的`ScriptPubKey`（锁定脚本）锁定，当满足条件时将解锁输出，然后可以兑现硬币。
- en: Commonly used Opcodes
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常用操作码
- en: 'All Opcodes are declared in the script.h file in the bitcoin reference client
    source code. This can be accessed from the link at [https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)
    under the following comment:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所有操作码都在比特币参考客户端源代码中的script.h文件中声明。这可以通过以下链接访问：[https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h](https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h)，在以下注释下：
- en: '**/** Script opcodes */**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**/** 脚本操作码 */**'
- en: 'A description of the most commonly used Opcodes is listed here. This table
    is taken from the bitcoin developer''s guide:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下面列出了最常用的操作码的描述。这个表格摘自比特币开发者指南：
- en: '| **Opcode** | **Description** |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| **操作码** | **描述** |'
- en: '| `OP_CHECKSIG` | This takes a public key and signature and validates the signature
    of the hash of the transaction. If it matches, then TRUE is pushed onto the stack;
    otherwise, FALSE is pushed. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `OP_CHECKSIG` | 这获取一个公钥和签名，并验证交易哈希的签名。如果匹配，则将TRUE推送到堆栈上；否则将FALSE推送。'
- en: '| `OP_EQUAL` | This returns 1 if the inputs are exactly equal; otherwise, 0
    is returned. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `OP_EQUAL` | 如果输入完全相等，则返回1；否则返回0。'
- en: '| `OP_DUP` | This duplicates the top item in the stack. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `OP_DUP` | 这会复制堆栈中的顶部项。'
- en: '| `OP_HASH160` | The input is hashed twice, first with SHA-256 and then with
    RIPEMD-160. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `OP_HASH160` | 输入被两次哈希，首先使用SHA-256，然后使用RIPEMD-160。'
- en: '| `OP_VERIFY` | This marks the transaction as invalid if the top stack value
    is not true. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `OP_VERIFY` | 如果顶部堆栈值不为真，则将交易标记为无效。'
- en: '| `OP_EQUALVERIFY` | This is the same as `OP_EQUAL`, but it runs `OP_VERIFY`
    afterwards. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `OP_EQUALVERIFY` | 这与`OP_EQUAL`相同，但之后运行`OP_VERIFY`。'
- en: '| `OP_CHECKMULTISIG` | This takes the first signature and compares it against
    each public key until a match is found and repeats this process until all signatures
    are checked. If all signatures turn out to be valid, then a value of 1 is returned
    as a result; otherwise, 0 is returned. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `OP_CHECKMULTISIG` | 这获取第一个签名并将其与每个公钥进行比较，直到找到匹配项，并重复此过程直到检查所有签名。如果所有签名都有效，则返回1作为结果；否则返回0。'
- en: Types of transaction
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交易类型
- en: There are various scripts available in bitcoin to handle the value transfer
    from the source to the destination. These scripts range from very simple to quite
    complex depending upon the requirements of the transaction. Standard transaction
    types are discussed here. Standard transactions are evaluated using `IsStandard()`
    and `IsStandardTx()` tests and only standard transactions that pass the test are
    generally allowed to be mined or broadcasted on the bitcoin network. However,
    nonstandard transactions are valid and allowed on the network.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币中有各种脚本可用于处理从源到目的地的价值转移。这些脚本的复杂程度因交易需求的不同而异，从非常简单到相当复杂。在此讨论标准交易类型。标准交易是通过`IsStandard()`和`IsStandardTx()`测试进行评估的，通常只有通过测试的标准交易才被允许在比特币网络上进行挖掘或广播。然而，非标准交易是有效的，也允许在网络上进行。
- en: '**Pay to Public Key Hash** (**P2PKH**): P2PKH is the most commonly used transaction
    type and is used to send transactions to the bitcoin addresses. The format of
    the transaction is shown as folows:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支付到公钥哈希**（**P2PKH**）：P2PKH 是最常用的交易类型，用于将交易发送到比特币地址。交易的格式如下所示：'
- en: '`ScriptPubKey`: `OP_DUP OP_HASH160` <pubKeyHash> `OP_EQUALVERIFY OP_CHECKSIG`'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ScriptPubKey`: `OP_DUP OP_HASH160` <pubKeyHash> `OP_EQUALVERIFY OP_CHECKSIG`'
- en: '`ScriptSig`: <sig> <pubKey>'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ScriptSig`: <sig> <pubKey>'
- en: The `ScriptPubKey` and `ScriptSig` parameters are concatenated together and
    executed. An example will follow shortly in this section, where this is explained
    in more detail.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ScriptPubKey` 和 `ScriptSig` 参数连接在一起并执行。在本节中很快将会有一个示例，更详细地解释这一点。'
- en: '**Pay to Script Hash** (**P2SH**): P2SH is used in order to send transactions
    to a script hash (that is, the addresses starting with 3) and was standardized
    in BIP16\. In addition to passing the script, the redeem script is also evaluated
    and must be valid. The template is shown as follows:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支付到脚本哈希**（**P2SH**）：P2SH 用于将交易发送到脚本哈希（即以 3 开头的地址），并在 BIP16 中标准化。除了通过脚本，还必须评估赎回脚本并确保其有效。模板如下所示：'
- en: '`ScriptPubKey`: `OP_HASH160` <redeemScriptHash> `OP_EQUAL`'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ScriptPubKey`: `OP_HASH160` <redeemScriptHash> `OP_EQUAL`'
- en: '`ScriptSig`: [<sig>...<sign>] <redeemScript>'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ScriptSig`: [<sig>...<sign>] <redeemScript>'
- en: '**MultiSig (Pay to MultiSig)**:M of n multisignature transaction script is
    a complex type of script where it is possible to construct a script that required
    multiple signatures to be valid in order to redeem a transaction. Various complex
    transactions such as escrow and deposits can be built using this script. The template
    is shown here:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多重签名（支付到多重签名）**：M of n 多重签名交易脚本是一种复杂类型的脚本，可以构建一个需要多重签名才能有效赎回交易的脚本。使用此脚本可以构建各种复杂的交易，如担保和存款。模板如下所示：'
- en: '`ScriptPubKey`: <m> <pubKey> [<pubKey> . . . ] <n> `OP_CHECKMULTISIG`'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ScriptPubKey`: <m> <pubKey> [<pubKey> . . . ] <n> `OP_CHECKMULTISIG`'
- en: '`ScriptSig`: 0 [<sig > . . . <sign>]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ScriptSig`: 0 [<sig > . . . <sign>]'
- en: Raw multisig is obsolete, and multisig is usually part of the P2SH redeem script,
    mentioned in the previous bullet point.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 原始多重签名已过时，多重签名通常是 P2SH 赎回脚本的一部分，如前述条目中所述。
- en: '**Pay to Pubkey**:This script is a very simple script that is commonly used
    in coinbase transactions. It is now obsolete and was used in an old version of
    bitcoin. The public key is stored within the script in this case, and the unlocking
    script is required to sign the transaction with the private key.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支付到公钥**：此脚本是一种非常简单的脚本，通常用于 coinbase 交易。它现在已经过时，并且在比特币的旧版本中使用。在这种情况下，公钥存储在脚本中，解锁脚本需要用私钥签署交易。'
- en: 'The template is shown as follows:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模板如下所示：
- en: <PubKey> `OP_CHECKSIG`
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <PubKey> `OP_CHECKSIG`
- en: '**Null data/OP_RETURN**:This script is used to store arbitrary data on the
    blockchain for a fee. The limit of the message is 40 bytes. The output of this
    script is unredeemable because `OP_RETURN` will fail the validation in any case.
    `ScriptSig` is not required in this case.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空数据/OP_RETURN**：此脚本用于以一定费用将任意数据存储在区块链上。消息的限制为 40 字节。此脚本的输出无法赎回，因为`OP_RETURN`在任何情况下都会验证失败。在这种情况下不需要`ScriptSig`。'
- en: 'The template is very simple and is shown as follows:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模板非常简单，如下所示：
- en: '`OP_RETURN` <data>'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`OP_RETURN` <data>'
- en: 'A P2PKH script execution is shown as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: P2PKH 脚本执行如下所示：
- en: '![Types of transaction](img/B05975_04_08.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![交易类型](img/B05975_04_08.jpg)'
- en: P2PKH script execution
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: P2PKH 脚本执行
- en: 'All transactions are eventually encoded into the hex before transmitting over
    the bitcoin network. A sample transaction is shown in hex that is retrieved using
    bitcoin-cli on the bitcoin testnet by using the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 所有交易最终都会在传输到比特币网络之前被编码为十六进制。使用以下命令在比特币测试网络上使用bitcoin-cli检索的十六进制中显示了示例交易：
- en: '[PRE0]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Coinbase transactions
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Coinbase交易
- en: 'A coinbase transaction or generation transaction is always created by a miner
    and is the first transaction in a block. It is used to create new coins. It includes
    a special field, also called *coinbase*, which acts as an input to the coinbase
    transaction. This transaction also allows up to 100 bytes of arbitrary data that
    can be used to store arbitrary data. In the genesis block, this included the most
    famous comment taken from The Times newspaper:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Coinbase交易或生成交易总是由矿工创建的，并且是区块中的第一笔交易。它用于创建新的硬币。它包括一个特殊字段，也称为*coinbase*，它充当coinbase交易的输入。该交易还允许最多100字节的任意数据，该数据可用于存储任意数据。在创世区块中，这包括从《泰晤士报》中选取的最著名的评论：
- en: '*"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks"*'
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"泰晤士报 2009年1月3日 央行行长准备为银行进行第二次纾困"*'
- en: This message is proof that the genesis block was not mined earlier than January
    3, 2009.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这条消息证明了创世区块不会早于2009年1月3日被挖掘出来。
- en: What is UTXO?
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是UTXO？
- en: '**Unspent Transaction Output** (**UTXO**) is an unspent transaction output
    that can be spent as an input to a new transaction. Other concepts related to
    transactions in bitcoin are described below.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**未花费交易输出**（**UTXO**）是可以作为新交易的输入花费的未花费交易输出。比特币中与交易相关的其他概念如下所述。'
- en: Transaction fee
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 交易费
- en: Transaction fees are charged by the miners. The fee charged is dependent upon
    the size of the transaction. Transaction fees are calculated by subtracting the
    sum of the inputs and the sum of the outputs. The fees are used as an incentive
    for miners to encourage them to include a user transaction in the block the miners
    are creating. All transactions end up in the memory pool, from where miners pick
    up transactions based on their priority to include them in the proposed block.
    The calculation of priority is introduced later in this chapter; however, from
    a transaction fee point of view, a transaction with a higher fee will be picked
    up sooner by the miners. There are different rules based on which fee is calculated
    for various types of actions, such as sending transactions, inclusion in blocks,
    and relaying by nodes. Fees are not fixed by the Bitcoin protocol and are not
    mandatory; even a transaction with no fee will be processed in due course but
    may take a very long time.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 交易费用由矿工收取。收取的费用取决于交易的大小。交易费用通过减去输入总和和输出总和来计算。这些费用被用作激励，鼓励矿工将用户交易包含在他们正在创建的区块中。所有交易最终都会进入内存池，矿工会根据它们的优先级挑选交易，以便将它们包含在提议的区块中。关于优先级的计算将在本章后面介绍；然而，从交易费用的角度来看，交易费较高的交易将被矿工更早地挑选出来。根据不同的规则计算各种操作的费用，例如发送交易、包含在区块中以及节点中继。比特币协议中没有固定的费用，也不是强制性的；即使没有费用的交易也会在适当的时候处理，但可能需要很长时间。
- en: Contracts
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 合约
- en: As defined in the bitcoin core developer guide, contracts are basically transactions
    that use the bitcoin system to enforce a financial agreement. This is a simple
    definition but has far-reaching consequences as it allows users to design complex
    contracts that can be used in many real-world scenarios. Contracts allow the development
    of a completely decentralized, independent, and reduced risk platform. Various
    contracts, such as escrow, arbitration, and micropayment channels, can be built
    using the bitcoin scripting language. The current implementation of a script is
    very limited, but various types of contracts are still possible to develop. For
    example, the release of funds only if multiple parties sign the transaction or
    perhaps the release of funds only after a certain time has elapsed. Both of these
    scenarios can be realized using `multiSig` and transaction lock time options.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 根据比特币核心开发者指南的定义，合约基本上是使用比特币系统执行财务协议的交易。这是一个简单的定义，但其影响深远，因为它允许用户设计可以用于许多现实场景的复杂合约。合约允许开发完全去中心化、独立且降低风险的平台。可以使用比特币脚本语言构建各种合约，例如第三方担保、仲裁和微支付通道。脚本的当前实现非常有限，但仍然可以开发各种类型的合约。例如，仅在多方签署交易后才释放资金，或者仅在经过一定时间后才释放资金。这两种情况都可以使用`multiSig`和交易锁定时间选项来实现。
- en: Transaction malleability
  id: totrans-131
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 交易可塑性
- en: Transaction malleability in bitcoin was introduced due to a bug in the bitcoin
    implementation. Due to this bug, it becomes possible for an adversary to change
    the Transaction ID of a transaction, thus resulting in a scenario where it would
    appear that a certain transaction has not been executed. This can allow scenarios
    where double deposits or withdrawals can occur. In other words, this bug allows
    the changing of the unique ID of a bitcoin transaction before it is confirmed.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币中的交易可塑性是由于比特币实现中的错误而引入的。由于这个错误，对手有可能改变交易的交易ID，从而导致某个交易似乎没有被执行的情况。这可能导致双重存款或取款的情况发生。换句话说，在比特币交易被确认之前，这个错误允许改变比特币交易的唯一ID。
- en: If the ID is changed before confirmation, it would seem that the transaction
    did not happen at all, which can then allow double deposits or withdrawal attacks.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在确认之前ID被更改，那么该交易似乎根本没有发生，这样可以允许双重存款或取款攻击。
- en: Transaction pools
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 交易池
- en: Also known as *memory pools*, these pools are basically created in local memory
    by nodes in order to maintain a temporary list of transactions that are not yet
    confirmed in a block. Transactions are included in a block after passing verification
    and based on their priority.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 也称为*内存池*，这些池基本上是由节点在本地内存中创建的，以维护尚未在区块中确认的交易的临时列表。交易在通过验证后，并根据它们的优先级被包含在一个块中。
- en: Transaction verification
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 交易验证
- en: 'This verification process is performed by bitcoin nodes. The following is described
    in the bitcoin developer guide:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这个验证过程是由比特币节点执行的。在比特币开发者指南中描述了以下内容：
- en: Check the syntax and ensure that the syntax of the transaction is correct.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查语法并确保交易的语法正确。
- en: Verify that inputs and outputs are not empty.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证输入和输出不为空。
- en: Check whether the size in bytes is less than the maximum block size, which is
    1 MB currently.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查字节大小是否小于当前的最大块大小，即1 MB。
- en: The output value must be in the allowed money range (0 to 21 million BTC).
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出值必须在允许的货币范围内（0至2100万比特币）。
- en: All inputs must have a specified previous output, except for coinbase transactions,
    which should not be relayed.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有输入必须有指定的前一输出，除了coinbase交易，不应进行中继。
- en: Verify that `nLockTime` must not exceed 31-bits. For a transaction to be valid,
    it should not be less than 100 bytes. Also, the number of signature operands in
    a standard signature should be less than or not more than 2.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`nLockTime`必须不超过31位。为了使交易有效，它的大小不应小于100字节。此外，标准签名中的签名操作数的数量应少于或不超过2。
- en: Reject *nonstandard* transactions; for example, `ScriptSig` is allowed to only
    push numbers on the stack. `ScriptPubkey` not passing the `isStandard()` checks.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拒绝*非标准*交易；例如，`ScriptSig`只允许在堆栈上推送数字。`ScriptPubkey`不通过`isStandard()`检查。
- en: A transaction is rejected if there is already a matching transaction in the
    pool or in a block in the main branch.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果池中已经存在匹配的交易或者在主分支的一个块中存在匹配的交易，则拒绝该交易。
- en: The transaction will be rejected if the referenced output for each input exists
    in any other transaction in the pool.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果每个输入的引用输出存在于池中的任何其他交易中，则将拒绝该交易。
- en: For each input, there must exist a referenced output transaction. This is searched
    in the main branch and the transaction pool to find whether the output transaction
    is missing for any input, and this will be considered an orphan transaction. It
    will be added to the orphan transactions pool if a matching transaction is not
    in the pool already.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个输入，必须存在一个引用的输出交易。这是在主分支和交易池中搜索的，以查找是否有任何输入缺失输出交易，如果匹配的交易尚未在池中，则将其视为孤立交易，将其添加到孤立交易池中。
- en: For each input, if the referenced output transaction is the coinbase, it must
    have at least 100 confirmations; otherwise, the transaction will be rejected.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个输入，如果引用的输出交易是coinbase，则必须至少有100次确认；否则，将拒绝该交易。
- en: For each input, if the referenced output does not exist or has been spent already,
    the transaction will be rejected.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个输入，如果引用的输出不存在或已经花费，则将拒绝该交易。
- en: Using the referenced output transactions to get input values, verify that each
    input value, as well as the sum, is in the allowed range of 0-21 million BTC.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用引用的输出交易获取输入值，验证每个输入值以及总和是否在0-2100万比特币的允许范围内。
- en: Reject the transaction if the sum of input values is less than the sum of output
    values.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果输入值的总和小于输出值的总和，则拒绝该交易。
- en: Reject the transaction if the transaction fee would be too low to get into an
    empty block.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果交易费用过低而无法进入空区块，则拒绝交易。
- en: Blockchain
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块链
- en: Blockchain is a public ledger of a timestamped, ordered, and immutable list
    of all transactions on the bitcoin network. Each block is identified by a hash
    in the chain and is linked to its previous block by referencing the previous block's
    hash.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链是比特币网络上所有交易的时间戳、有序和不可变列表的公共分类帐。每个区块在链中由哈希标识，并通过引用前一个区块的哈希链接到其前一个区块。
- en: In the following structure of a block, a block header is described, followed
    by a detailed diagram that provides an insight into the blockchain structure.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下区块结构中，描述了一个区块头，随后是一个详细的图表，提供了对区块链结构的洞察。
- en: The structure of a block
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区块的结构
- en: '| **Bytes** | **Name** | **Description** |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| **字节** | **名称** | **描述** |'
- en: '| 80 | Block header | This includes fields from the block header described
    in the next section. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 80 | 区块头 | 这包括了下一节中描述的区块头的字段。 |'
- en: '| *variable* | Transaction counter | The field contains the total number of
    transactions in the block, including the coinbase transaction. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| *可变* | 交易计数器 | 该字段包含区块中的所有交易总数，包括 coinbase 交易。 |'
- en: '| *variable* | Transactions | All transactions in the block. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| *可变* | 交易 | 区块中的所有交易。 |'
- en: The structure of a block header
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区块头的结构
- en: '| **Bytes** | **Name** | **Description** |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| **字节** | **名称** | **描述** |'
- en: '| 4 | Version | The block version number that dictates the block validation
    rules to follow. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 版本 | 指定要遵循的区块验证规则的区块版本号。 |'
- en: '| 32 | previous block header hash | This is a double SHA256 hash of the previous
    block''s header. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 32 | 上一个区块头哈希 | 这是上一个区块头的双重 SHA256 哈希。 |'
- en: '| 32 | merkle root hash | This is a double SHA256 hash of the merkle tree of
    all transactions included in the block. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 32 | 默克尔根哈希 | 这是包含在区块中的所有交易的默克尔树的双重 SHA256 哈希。 |'
- en: '| 4 | Timestamp | This field contains the approximate creation time of the
    block in the Unix epoch time format. More precisely, this is the time when the
    miner has started hashing the header (the time from the miner''s point of view).
    |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 时间戳 | 此字段以 Unix 纪元时间格式包含了区块的大致创建时间。更确切地说，这是矿工开始对头部进行哈希计算的时间（从矿工的角度看）。
    |'
- en: '| 4 | Difficulty target | This is the difficulty target of the block. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 难度目标 | 这是区块的难度目标。 |'
- en: '| 4 | Nonce | This is an arbitrary number that miners change repeatedly in
    order to produce a hash that fulfills the difficulty target threshold. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 随机数 | 这是矿工反复更改的任意数字，以产生一个满足难度目标阈值的哈希。 |'
- en: '![The structure of a block header](img/B05975_04_09-1.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![区块头的结构](img/B05975_04_09-1.jpg)'
- en: A visualization of blockchain, block, block header, transaction and script
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链、区块、区块头、交易和脚本的可视化
- en: As shown in the preceding diagram, blockchain is a chain of blocks where each
    block is linked to its previous block by referencing the previous block header's
    hash. This linking makes sure that no transaction can be modified unless the block
    that records it and all blocks that follow it are also modified. The first block
    is not linked to any previous block and is known as the genesis block.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前图所示，区块链是一个区块链，其中每个区块通过引用前一个区块头的哈希链接到其前一个区块。这种链接确保除非记录它的区块及其后续所有区块也被修改，否则不会修改任何交易。第一个区块未链接到任何前一个区块，并且被称为创世区块。
- en: The genesis block
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创世区块
- en: This is the first block in the bitcoin blockchain. The genesis block was hardcoded
    in the bitcoin core software. It is in the `chainparams.cpp` file.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这是比特币区块链中的第一个区块。创世区块已经在比特币核心软件中硬编码。它位于 `chainparams.cpp` 文件中。
- en: '[https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp](https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp](https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp)'
- en: '![The genesis block](img/image_04_011.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![创世区块](img/image_04_011.jpg)'
- en: Bitcoin provides protection against double spending by enforcing strict rules
    on transaction verification and via mining. Blocks are added in the blockchain
    only after strict rule checking and successful Proof of Work solution. Block height
    is the number of blocks before a particular block in the blockchain. The current
    height (at the time of writing this) of the blockchain is 434755 blocks. Proof
    of Work is used to secure the blockchain. Each block contains one or more transactions,
    out of which the first transaction is a coinbase transaction. There is a special
    condition for coinbase transactions that prevent them to be spent until at least
    100 blocks in order to avoid a situation where the block may be declared stale
    later on.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币通过强制对交易进行严格规则验证和通过挖矿来防止双重支付。在严格规则检查和成功的工作量证明解决方案后，区块才会添加到区块链中。区块高度是指在特定区块之前的区块数量。目前（在撰写本文时）区块链的高度为434755个区块。工作量证明用于保护区块链。每个区块包含一个或多个交易，其中第一个交易是coinbase交易。对于coinbase交易，有一个特殊条件，即要防止它们在至少100个区块之前被使用，以避免出现后来可能被宣布为过时的情况。
- en: Stale blocks are created when a block is solved and every other miner who is
    still working to find a solution to the hash puzzle is working on that block.
    Mining and hash puzzles will be discussed later in the chapter in detail. As the
    block is no longer required to be worked on, this is considered a stale block.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个区块被解决并且其它仍在努力解决哈希难题的矿工都在工作，这时就会产生过时区块。挖矿和哈希难题将在本章后面详细讨论。因为区块不再需要进行工作，所以被认为是过时的区块。
- en: Orphan blocks are also called detached blocks and were accepted at one point
    in time by the network as valid blocks but were rejected when a proven longer
    chain was created that did not include this initially accepted block. They are
    not part of the main chain and can occur at times when two miners manage to produce
    the blocks at the same time.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 孤立区块也被称为分离区块，曾经被网络一度接受为有效区块，但在创建一个不包括这个最初接受的区块的被证明更长的链后被拒绝。它们不是主链的一部分，有时会出现在两个矿工同时产生区块的情况下。
- en: The latest block version is version 4, which was proposed with BIP65 and has
    been used since bitcoin core client 0.11.2 since the implementation of BIP9 bits
    in `nVersion` field are being used to indicate softfork changes.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 最新的区块版本是版本4，它是由BIP65提出的，并自比特币核心客户端0.11.2以来一直在使用，因为在`nVersion`字段中实施了BIP9位来指示软叉变更。
- en: Because of the distributed nature of bitcoin, network forks can occurs naturally.
    In cases where two nodes simultaneously announce a valid b lock can result in
    a situation where there are two blockchains with different transactions. This
    is an undesirable situation but can be addressed by the bitcoin network only by
    accepting the longest chain. In this case, the smaller chain will be considered
    orphaned. If an adversary manages to gain 51% control of the network hashrate
    (computational power), then they can impose their own version of transaction history.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 由于比特币的分布式性质，网络分叉可能会自然发生。在两个节点同时宣布一个有效的区块的情况下，会出现两个具有不同交易的区块链的情况。这是一个不希望发生的情况，但仅通过接受最长链的比特币网络才能解决。在这种情况下，较小的链将被视为孤立的。如果对手设法获得对网络算力（计算能力）51%的控制权，那么他们就可以强加自己的交易历史版本。
- en: Forks in blockchain can occur with the introduction of changes in the Bitcoin
    protocol. In case of *soft fork*, only previous valid blocks are no longer acceptable,
    thus making soft fork backward compatible. In case of soft fork, only miners are
    required to upgrade to the new client software in order to make use of the new
    protocol rules. Planned upgrades do not necessarily create forks because all users
    should have updated already. A hard fork, on the other hand, invalidates previously
    valid blocks and requires all users to upgrade. New transaction types are sometimes
    added as a soft fork, and any changes such as block structure change or major
    protocol changes results in hard fork.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链中的分叉可能是由于比特币协议的变化引起的。在*软分叉*的情况下，只有以前的有效区块不再被接受，从而使软分叉向后兼容。在软分叉的情况下，只需要矿工升级到新的客户端软件以利用新的协议规则。计划升级不一定会造成分叉，因为所有用户都应该已经更新了。另一方面，硬分叉会使先前有效的区块无效，并要求所有用户进行升级。有时会添加新的交易类型作为软分叉，而任何变化，如区块结构变化或主要协议变化都会导致硬分叉。
- en: 'The current size of the bitcoin blockchain as on February 4, 2017, stands at
    approximately 101 GB. The following figure shows the size increase of blockchain
    as a function of time:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2017年2月4日，比特币区块链的当前大小约为101 GB。下图显示了区块链大小随时间变化的情况：
- en: '![The genesis block](img/image_04_012.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![创世区块](img/image_04_012.jpg)'
- en: Current size of blockchain as of 06/02/2017
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2017年6月2日，区块链的当前大小为。
- en: New blocks are added to the blockchain approximately every 10 minutes and network
    difficulty is adjusted dynamically every 2016 blocks in order to maintain a steady
    addition of new blocks to the network.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 新的区块大约每10分钟添加到区块链中，并且网络难度在每2016个区块动态调整，以保持对网络的稳定增加新区块。
- en: 'Network difficulty is calculated using the following equation:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 网络难度使用以下方程计算：
- en: '*Target = Previous target * Time/2016 * 10 minutes*'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '*目标=上一个目标*时间/2016*10分钟*'
- en: Difficulty and target are interchangeable and represent the same thing. Previous
    target represents the old target value, and time is the time spent to generate
    previous 2016 blocks. Network difficulty basically means how hard it is for miners
    to find a new block, that is, how difficult the hashing puzzle is now.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 难度和目标是可以互换的，表示同一件事。上一个目标表示旧的目标值，时间是生成前2016个区块所花费的时间。网络难度基本上意味着对矿工来说找到新区块有多困难，也就是说，现在哈希难题有多难。
- en: In the section, mining is discussed, which will explain how a hashing puzzle
    is solved.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，讨论了挖矿，将解释哈希难题是如何被解决的。
- en: Mining
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 挖矿
- en: Mining is a resource-intensive process by which new blocks are added to the
    blockchain. Blocks contain transactions that are validated via the mining process
    by mining nodes and are added to the blockchain. This process is resource-intensive
    in order to ensure that the required resources have been spent by miners in order
    for a block to be accepted. New coins are minted by the miners by spending the
    required computing resources. This also secures the system against frauds and
    double spending attacks while adding more virtual currency to the bitcoin ecosystem.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 挖矿是一个资源密集型过程，通过该过程新的区块被添加到区块链中。区块包含通过挖矿过程由挖矿节点验证的交易，并添加到区块链中。为了确保区块被接受，这个过程是资源密集型的。矿工通过花费必要的计算资源铸造新的硬币。这也确保了系统抵御欺诈和双重支付攻击，同时为比特币生态系统增加了更多的虚拟货币。
- en: Roughly one new block is created (mined) every 10 minute. Miners are rewarded
    with new coins if and when they create new blocks and are paid transaction fees
    in return of including transactions in their blocks. New blocks are created at
    an approximate fixed rate. Also, the rate of creation of new bitcoins decreases
    by 50%, every 210,000 blocks, roughly every 4 years. When bitcoin was initially
    introduced, the block reward was 50 bitcoins; then in 2012, this was reduced to
    25 bitcoins. In July 2016, this was further reduced to 12.5 coins (12 coins) and
    the next reduction is estimated to be on July 4, 2020\. This will reduce the coin
    reward further down to approximately six coins.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 大约每10分钟产生（挖掘）一个新区块。如果矿工创建新区块，并在其中包含交易，他们将获得新的硬币，并作为交易费用。新区块以大约固定的速度创建。此外，每210,000个区块，大约每四年，新比特币的产生速度会减半。当比特币初始推出时，区块奖励是50个比特币；然后在2012年，这被减少到25个比特币。到2016年7月，这进一步减少到12.5个硬币（12个硬币），预计下一次减少将在2020年7月4日。这将进一步将硬币奖励减少到大约六个硬币。
- en: Approximately 144 blocks, that is, 1,728 bitcoins are generated per day. The
    number of actual coins can vary per day; however, the number of blocks remains
    at 144 per day. Bitcoin supply is also limited and in 2140, almost 21 million
    bitcoins will be finally created and no new bitcoins can be created after that.
    Bitcoin miners, however, will still be able to profit from the ecosystem by charging
    transaction fees.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 每天大约产生144个区块，即1728个比特币。实际硬币数量每天可能有所变化，但是每天的区块数量保持在144个。比特币供应也是有限的，在2140年，大约将终于创造出2100万个比特币，之后将不会再创造新的比特币。然而，比特币矿工仍然能够通过收取交易费从生态系统中获利。
- en: Task of miners
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 矿工的任务
- en: Once a node connects with the bitcoin network, there are several tasks that
    a bitcoin miner performs.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦一个节点连接到比特币网络，比特币矿工执行几个任务。
- en: Synching up with the network
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与网络同步
- en: Once a new node joins the bitcoin network, it downloads the blockchain by requesting
    historical blocks from other nodes. This is mentioned here in the context of the
    bitcoin miner; however, this not necessarily a task only for a miner.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦一个新节点加入比特币网络，它通过向其他节点请求历史区块下载区块链。这里提到比特币矿工，但这不一定是一个仅供矿工完成的任务。
- en: '**Transaction validation**: Transactions broadcasted on the network are validated
    by full nodes by verifying and validating signatures and outputs.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交易验证**：全节点通过验证和验证签名和输出来验证网络广播的交易。'
- en: '**Block validation**: Miners and full nodes can start validating blocks received
    by them by evaluating them against certain rules. This includes the verification
    of each transaction in the block along with verification of the nonce value.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区块验证**：矿工和全节点可以通过对其收到的区块根据某些规则进行评估来开始验证这些区块。这包括验证区块中每笔交易以及验证随机数值的正确性。'
- en: '**Create a new block**: Miners propose a new block by combining transactions
    broadcasted on the network after validating them.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建新区块**：矿工通过验证后结合网络广播的交易提出一个新区块。'
- en: '**Perform Proof of Work**: This task is the core of the mining process and
    this is where miners find a valid block by solving a computational puzzle. The
    block header contains a 32-bit nonce field and miners are required to repeatedly
    vary the nonce until the resultant hash is less than a predetermined target.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行工作量证明**：这一任务是挖矿过程的核心，矿工通过解决一个计算难题找到一个有效的区块。区块头包含一个32位随机数字段，矿工需要反复改变随机数，直到结果哈希小于预定目标。'
- en: '**Fetch reward**: Once a node solves the hash puzzle, it immediately broadcasts
    the results, and other nodes verify it and accept the block. There is a slight
    chance that the newly minted block will not be accepted by other miners due to
    a clash with another block found at roughly the same time, but once accepted,
    the miner is rewarded with 12.5 bitcoins (as of 2016) and any associated transaction
    fees.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取奖励**：一旦一个节点解决了哈希难题，它立即广播结果，其他节点验证并接受该区块。由于与大致同时发现的另一个区块冲突的可能性微弱，新铸造的区块有可能不被其他矿工接受，但一旦接受，矿工将获得12.5个比特币（截至2016年）以及任何相关的交易费用。'
- en: Proof of Work
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作量证明
- en: 'This is a proof that enough computational resources have been spent in order
    to build a valid block. **Proof of Work** (**PoW**) is based on the idea that
    a random node is selected every time to create a new block. In this model, nodes
    compete with each other in order to be selected in proportion to their computing
    capacity. The following equation sums up the Proof of Work requirement in bitcoin:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个证明足够的计算资源已经被消耗以构建一个有效区块证明。**工作量证明**（**PoW**）基于这样一个思想：每次选择一个随机节点来创建一个新区块。在这个模型中，节点根据其计算能力的比例彼此竞争以被选中。以下等式总结了比特币中工作量证明的要求：
- en: '*H ( N || P_hash || Tx || Tx || . . . Tx) < Target*'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '*H ( N || P_hash || Tx || Tx || . . . Tx) < 目标*'
- en: Where N is a nonce, *P_hash* is a hash of the previous block, *Tx* represents
    transactions in the block, and *Target* is the target network difficulty value.
    This means that the hash of the previously mentioned concatenated fields should
    be less than the target hash value. The only way to find this nonce is the brute
    force method. Once a certain pattern of a certain number of zeroes is met by a
    miner, the block is immediately broadcasted and accepted by other miners.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 其中N是一个随机数，*P_hash*是上一个区块的哈希，*Tx*代表区块中的交易，*目标*是目标网络难度值。这意味着上述连接字段的哈希应小于目标哈希值。找到这个随机数的唯一方法是穷举法。一旦某个矿工满足一定数量的零的某种模式，该区块将立即被广播并被其他矿工接受。
- en: The mining algorithm
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 挖掘算法
- en: The mining algorithm consists of the following steps.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 挖掘算法包括以下步骤。
- en: The previous hash block is retrieved from the bitcoin network.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从比特币网络中检索上一个哈希区块。
- en: Assemble a set of potential transactions broadcasted on the network into a block.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将网络广播的一组潜在交易组合成一个区块。
- en: Compute the double hash of the block header with a nonce and the previous hash
    using the SHA256 algorithm.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SHA256算法计算区块头部与一个随机数和上一个哈希的双哈希。
- en: If the resultant hash is lower than the current difficulty level (target), then
    stop the process.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果结果哈希低于当前难度水平（目标），则停止该过程。
- en: If the resultant hash is greater than the current difficulty level (target),
    then repeat the process by incrementing the nonce. As the hash rate of the bitcoin
    network increased, the total amount of 32-bit nonces was exhausted too quickly.
    In order to address this issue, the *extra nonce* solution was implemented, whereby
    the coinbase transaction is used as a source of extra nonce to provide a larger
    range of nonces to be searched by the miners.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果结果哈希大于当前难度级别（目标），则通过增加 nonce 来重复该过程。随着比特币网络的哈希率增加，32 位 nonce 的总量耗尽得太快。为了解决这个问题，*额外
    nonce* 解决方案被实施，即使用 coinbase 交易作为额外 nonce 的来源，以提供更大范围的 nonce 供矿工搜索。
- en: 'Mining difficulty increased over time and bitcoins that could be mined by single
    CPU laptop computers now require dedicated mining centers to solve the hash puzzle.
    The current difficulty level can be queried using the bitcoin command line interface
    using the following command:'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着时间的推移，挖矿难度不断增加，现在需要专用的挖矿中心来解决哈希难题，曾经能够通过单个 CPU 笔记本电脑挖掘的比特币现在已经需要专用的挖矿中心来解决哈希难题。可以使用比特币命令行界面查询当前难度级别，命令如下：
- en: '[PRE1]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![The mining algorithm](img/image_04_013.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![挖矿算法](img/image_04_013.jpg)'
- en: Mining difficulty over time
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 随时间变化的挖矿难度
- en: The value returned by the `getdifficulty` command.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`getdifficulty` 命令返回的值。'
- en: The hashing rate
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 哈希率
- en: The hashing rate basically represents the rate of calculating hashes per second.
    In early days of bitcoin, it used to be quite small as CPUs were used, but with
    dedicated mining pools and ASICs now, this has gone up exponentially in the last
    few years. This has resulted in increased difficulty. The following hash rate
    graph shows the hash rate increase over time and is currently measured in Exa
    hashes. This means that in 1 second, bitcoin network miners are computing more
    than 1 000 000 000 000 000 000 hashes per second.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希率基本上表示每秒计算哈希的速率。在比特币早期，由于使用 CPU，哈希率非常低，但是现在，随着专用挖矿池和 ASIC 的出现，过去几年里呈指数增长。这导致了难度的增加。下面的哈希率图显示了随时间的变化而增加的哈希率，并且目前以
    Exa 哈希来测量。这意味着在 1 秒钟内，比特币网络矿工正在计算超过 1 000 000 000 000 000 000 个哈希。
- en: '![The hashing rate](img/image_04_014.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![哈希率](img/image_04_014.jpg)'
- en: Hashing rate as of 06/02/2017, shown over a period of two years
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 2017 年 6 月 2 日的哈希率，展示了两年的时间段
- en: Mining systems
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 挖矿系统
- en: Over time, bitcoin miners have used various methods to mine bitcoins. As the
    core principle behind mining is based on the double SHA256 algorithm, overtime
    miners have developed sophisticated systems to calculate the hash faster and faster.
    The following is a review of the different types of mining methods used in bitcoin
    and how they evolved with time.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，比特币矿工们使用了各种方法来挖掘比特币。由于挖掘背后的核心原理是基于双 SHA256 算法，随着时间的推移，矿工们开发出了更快速计算哈希的复杂系统。以下是对比特币中使用的不同挖矿方法及其随时间演变的回顾。
- en: CPU
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CPU
- en: CPU mining was the first type of mining available in the original bitcoin client.
    Users could even use laptop or desktop computers to mine bitcoins. CPU mining
    is no longer profitable and now more advanced mining methods such as ASIC-based
    mining are used.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: CPU 挖矿是最初在原始比特币客户端中可用的一种挖矿类型。用户甚至可以使用笔记本或台式电脑来挖掘比特币。CPU 挖矿已不再盈利，现在更先进的挖矿方法，如基于
    ASIC 的挖矿正在使用。
- en: GPU
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GPU
- en: Due to the increased difficulty of the bitcoin network and general tendency
    of finding faster methods to mine, miners started to use GPUs or graphics cards
    available in PCs to perform mining. GPUs support faster and parallelized calculations
    that are usually programmed using the OpenCL language. This turned out to be a
    faster option as compared to CPUs. Users also used techniques such as overclocking
    to gain maximum benefit of the GPU power. Also, the possibility of using multiple
    graphics cards increased the popularity of graphics cards' usage for bitcoin mining.
    GPU mining, however, has some limitations, such as overheating and the requirement
    for specialized motherboards and extra hardware to house multiple graphics cards.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 随着比特币网络的难度增加和寻找更快挖掘方法的一般趋势，矿工开始使用 PC 上可用的 GPU 或图形卡来进行挖掘。GPU 支持更快速和并行计算，通常使用
    OpenCL 语言进行编程。这被证明是一个比 CPU 更快的选项。用户还使用了超频等技术来充分利用 GPU 的性能。此外，使用多个图形卡的可能性增加了图形卡用于比特币挖矿的流行度。然而，GPU
    挖矿也有一些局限性，如过热和需要专用主板和额外硬件来容纳多个图形卡。
- en: FPGA
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FPGA
- en: Even GPU mining did not last long, and soon miners found another way to perform
    mining using FPGAs. **Field Programmable Gate Array** (**FPGA**) is basically
    an integrated circuit that can be programmed to perform specific operations. FPGAs
    are usually programmed in **hardware description languages** (**HDLs**), such
    as Verilog and VHDL. Double SHA256 quickly became an attractive programming task
    for FPGA programmers and several open source projects started too. FPGA offered
    much better performance as compared to GPUs; however, issues such as accessibility,
    programming difficulty, and the requirement for specialized knowledge to program
    and configure FPGAs resulted in a short life of the FPGA era for bitcoin mining.
    Also, the arrival of ASICs resulted in quickly phased out FPGA-based systems for
    mining. Mining hardware such as X6500 miner, Ztex, and Icarus were developed during
    the time when FPGA mining was profitable. Various FPGA manufacturers, such as
    Xilinx and Altera, produce FPGA hardware and development boards that can be used
    to program mining algorithms.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 即使GPU挖矿也没有持续多久，很快矿工们找到了另一种使用FPGAs进行挖矿的方法。**Field Programmable Gate Array**（**FPGA**）基本上是一个可以编程执行特定操作的集成电路。FPGAs通常使用**硬件描述语言**（**HDLs**）进行编程，如Verilog和VHDL。双SHA256很快成为FPGA程序员的吸引人的编程任务，并出现了几个开源项目。与GPU相比，FPGA提供了更好的性能；然而，可访问性、编程难度以及需要专门的知识来编程和配置FPGA等问题导致了比特币挖矿FPGA时代的短期。此外，ASIC的出现迅速取代了基于FPGA的挖矿系统。在FPGA挖矿盈利期间开发了如X6500矿工、Ztex和Icarus等挖矿硬件。各种FPGA制造商，如赛灵思和阿尔特拉，都生产可以用于编程挖矿算法的FPGA硬件和开发板。
- en: ASICs
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ASICs
- en: '**Application Specific Integrated Circuit** (**ASIC**) was designed to perform
    the SHA-256 operation. These special chips were sold by various manufacturers
    and offered a very high hashing rate. This worked for some time, but due to the
    quickly increasing mining difficulty level, single-unit ASICs are no longer profitable.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '**Application Specific Integrated Circuit**（**ASIC**），是设计用来执行SHA-256操作的。这些特殊的芯片由各种制造商出售，提供了非常高的散列率。这在一段时间内是有效的，但由于挖矿难度迅速增加，单个ASIC不再盈利。'
- en: Currently, mining is out of the reach of individuals and now professional mining
    centers using thousands of ASIC units in parallel are offering mining contracts
    to users to perform mining on their behalf. There is no technical limitation,
    that's why a single user cannot run thousands of ASICs in parallel, but it will
    require dedicated data centers and hardware and cost for a single individual can
    become prohibitive.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，挖矿已经超出了个人的能力范围，现在专业的矿业中心利用数千个ASIC单元并行提供矿业合同给用户，代表用户进行挖矿。这里没有技术限制，这就是为什么单个用户无法并行运行数千个ASIC，但将需要专用数据中心和硬件，单个个人的成本可能会变得不可行。
- en: '![ASICs](img/image_04_015-1.jpg)![ASICs](img/image_04_017-1.jpg)![ASICs](img/image_04_016-1.jpg)![ASICs](img/image_04_018-1.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![ASICs](img/image_04_015-1.jpg)![ASICs](img/image_04_017-1.jpg)![ASICs](img/image_04_016-1.jpg)![ASICs](img/image_04_018-1.jpg)'
- en: Four types of mining (CPU, GPU, FPGA, and ASIC)
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 四种类型的挖矿（CPU、GPU、FPGA和ASIC）
- en: Mining pools
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 挖矿矿池
- en: A mining pool forms when group miners work together to mine a block. The *Pool
    manager* receives the coinbase transaction if the block is successfully mined,
    which is then responsible for distributing the reward to the group of miners who
    invested resources to mine the block. This is profitable as compared to solo mining,
    where only one sole miner is trying to solve the partial hash inversion function
    (hash puzzle) because in mining pools, the reward is paid to each member of the
    pool regardless of whether they (more specifically, their individual node) solved
    the puzzle or not.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 矿池在一群矿工共同工作以挖掘一个区块时形成。如果成功挖掘了区块，*矿池管理者*将接收coinbase交易，然后负责向投入资源以挖掘该区块的矿工群体分配奖励。与单独挖矿相比，这是有利可图的，因为在矿池中，无论他们（更具体地说，他们的个体节点）是否解决了谜题，奖励都会支付给矿池的每个成员。
- en: There are various models that a mining pool manager can use to pay to the miners,
    such as the pay-per-share model and the proportional model. In the pay per share
    model, the mining pool manager pays a flat fee to all miners who participated
    in the mining exercise, whereas in the proportional model, the share is calculated
    based on the amount of computing resources spent to solve the hash puzzle.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 挖矿池管理者可以采用各种模式向矿工支付报酬，如按份计费模式和比例模式。在按份计费模式中，挖矿池管理者向所有参与挖矿的矿工支付固定费用，而在比例模式中，份额是根据用于解决哈希谜题的计算资源量来计算的。
- en: 'Many commercial pools now exist and provide mining service contracts via the
    cloud and easy-to-use web interfaces. The most commonly used ones are **AntPool**,
    **F2Pool**, and **BW.COM**. A comparison of hashing power for all major mining
    pools is shown in the following image:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在存在许多商业矿池，并通过云端和易于使用的网络界面提供挖矿服务合同。最常用的是**安特池**（AntPool）、**F2Pool**和**BW.COM**。以下图片显示了所有主要矿池的哈希功率的比较：
- en: '![Mining pools](img/image_04_019.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![挖矿池](img/image_04_019.jpg)'
- en: Mining pools and their hashing power (hash rate) as of 06/02/2017, taken from
    https://blockchain.info/pools
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2017年6月2日，挖矿池及其哈希功率（哈希率）情况，取自 https://blockchain.info/pools
- en: Mining centralization is a major concern that can occur if a pool manages to
    control more than 51% of the network by generating more than 51% hash rate of
    the bitcoin network. As discussed earlier in the introduction section, 51% attack
    can result in double spending attacks, and it can impact consensus and in fact
    impose another version of transaction history on the bitcoin network.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 挖矿集中化是一个重要问题，如果一个矿池成功控制了比特币网络超过51%的网络，即生成了超过51%的哈希率，这可能会发生。正如前文所述，在介绍部分中，51%攻击可能导致双重支付攻击，这可能会影响共识，并实际上在比特币网络上强加另一个版本的交易历史。
- en: This has happened once in the bitcoin history, when GHash.IO, a large mining
    pool, managed to acquire more than 51% of the network capacity. Theoretical solutions
    , such as two-phase Proof of Work, have been proposed in academia to disincentivize
    large mining pools. This scheme introduces a second cryptographic puzzle that
    results in mining pools to reveal their private keys or providing a considerable
    portion of the hashrate of their mining pool, thus reducing the overall hashrate
    of the pool.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币历史上曾经发生过这样的情况，即一个大型矿池GHash.IO成功获得了超过51%的网络容量。学术界已经提出了理论解决方案，比如双重工作证明，以防止大型矿池的出现。该方案引入了第二个密码谜题，导致挖矿池透露其私钥或提供其挖矿池的相当部分哈希率，从而降低了挖矿池的总哈希率。
- en: Various types of hardware are commercially available for mining purposes. Currently,
    the most profitable one is ASIC mining, and specialized hardware is available
    from a number of vendors. Solo mining is not much profitable now unless a vast
    amount of money and energy is spent to build your own mining rig or even center.
    With the current difficulty factor (Oct 2016), if a user manages to produce a
    hash rate of 12 TH/s, they can hope to make 0.01366887 BTC (around $8) per day,
    which is very low as compared to the investment required to source the equipment
    that can produce 12 TH. Including running costs such as electricity, this turns
    out to be not very profitable.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 不同类型的硬件目前都可以在商业市场上用于挖矿。目前最赚钱的是ASIC挖矿，许多供应商提供专用硬件。除非花费大量资金和能源来建造自己的挖矿设备甚至中心，否则独立挖矿现在不太赚钱。根据当前的难度因子（2016年10月），如果用户设法产生12
    TH/s的哈希率，他们可以希望每天赚取0.01366887 BTC（约8美元），这与购买可以产生12 TH/s哈希率的设备所需的投资相比非常低。考虑到电费等运营成本，这并不是非常有利可图。
- en: The bitcoin network
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比特币网络
- en: The bitcoin network is a P2P network where nodes exchange transactions and blocks.
    There are different types of nodes on the network. There are two main types of
    nodes, full nodes and SPV nodes. Full nodes, as the name implies, are implementations
    of bitcoin core clients performing the wallet, miner, full blockchain storage,
    and network routing functions. However, it is not necessary to perform all these
    functions. SPV nodes or lightweight clients perform only wallet and network routing
    functionality. The latest version of Bitcoin protocol is 70014 and was introduced
    with bitcoin core client 0.13.0.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币网络是一个 P2P 网络，节点之间交换交易和区块。网络上有不同类型的节点。主要有两种类型的节点，完整节点和 SPV 节点。完整节点如其名所示，是比特币核心客户端的实现，执行钱包、矿工、完整的区块链存储和网络路由功能。然而，并不需要执行所有这些功能。SPV
    节点或轻量级客户端仅执行钱包和网络路由功能。比特币协议的最新版本是 70014，是通过比特币核心客户端 0.13.0 引入的。
- en: Some nodes prefer to be full blockchain nodes only and contain complete blockchain
    and perform network routing functions but do not perform mining or store private
    keys (the wallet function). Another type is solo miner nodes that can perform
    mining, store full blockchain, and act as a bitcoin network routing node.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 一些节点只愿意成为完整的区块链节点，包含完整的区块链并执行网络路由功能，但不进行挖矿或存储私钥（钱包功能）。另一种类型是独立挖矿节点，它可以进行挖矿、存储完整的区块链，并充当比特币网络路由节点。
- en: There are a few nonstandard but heavily used nodes that are called pool protocol
    servers. These nodes make use of alternative protocols, such as the stratum protocol.
    Some nodes perform only mining functions and are called mining nodes. Nodes that
    only compute hashes use the stratum protocol to submit their solutions to the
    mining pool. It is possible to run an SPV client runs a wallet and network routing
    function without a blockchain.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些非标准但被广泛使用的节点被称为池协议服务器。这些节点使用替代协议，如 Stratum 协议。一些节点仅执行挖矿功能，称为挖矿节点。只计算哈希的节点使用
    Stratum 协议将其解决方案提交给矿池。可以在没有区块链的情况下运行 SPV 客户端，它运行钱包和网络路由功能。
- en: Most protocols on the Internet are line-based, which means that each line is
    delimited by a carriage return and newline *\r \n* character. Stratum is also
    a line-based protocol that makes use of plain TCP sockets and human-readable JSON-RPC
    to operate and communicate between nodes.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上的大多数协议都是基于行的，这意味着每一行都由回车和换行符 *\r \n* 分隔。Stratum 也是一种基于行的协议，它利用普通的 TCP 套接字和易读的
    JSON-RPC 在节点之间进行操作和通信。
- en: 'Bitcoin network is identified by its different magic values. A list is shown
    as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币网络通过其不同的魔法值进行识别。以下是一个列表：
- en: '![The bitcoin network](img/Capture-2.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![比特币网络](img/Capture-2.png)'
- en: Bitcoin network magic values
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币网络魔法值
- en: Magic values are used to indicate the message origin network.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 魔法值用于指示消息的来源网络。
- en: 'A full node performs four functions: wallet, miner, blockchain, and the network
    routing node.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 完整节点执行四个功能：钱包、矿工、区块链和网络路由节点。
- en: When a bitcoin core node starts up, first, it initiates the discovery of all
    peers. This is achieved by querying DNS seeds that are hardcoded into the bitcoin
    core client and are maintained by bitcoin community members. This lookup returns
    a number of DNS A records. The bitcoin protocol works on TCP port 8333 by default
    for the main network and TCP 18333 for testnet.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 当比特币核心节点启动时，首先会初始化发现所有对等节点。这是通过查询硬编码到比特币核心客户端中并由比特币社区成员维护的 DNS 种子来实现的。此查找返回多个
    DNS A 记录。比特币协议默认在 TCP 端口 8333 上运行于主网络，TCP 18333 上运行于测试网络。
- en: '![The bitcoin network](img/image_04_020.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![比特币网络](img/image_04_020.jpg)'
- en: DNSSeeds in chainparams.cpp
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: chainparams.cpp 中的 DNSSeeds
- en: First, the client sends a protocol message *Version* that contains various fields,
    such as version, services, timestamp, network address, nonce, and some other fields.
    The remote node responds with its own version message followed by verack message
    exchange between both nodes, indicating that the connection has been established.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，客户端发送一个包含各种字段的协议消息 *Version*，如版本、服务、时间戳、网络地址、随机数和一些其他字段。远程节点响应其自己的版本消息，然后两个节点之间进行
    verack 消息交换，表示连接已建立。
- en: After this, **G** ***etaddr*** and ***addr*** messages are exchanged to find
    the peers that the client do not know. Meanwhile, either of the nodes can send
    a ping message to see whether the connection is still live.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，**G** ***etaddr*** 和 ***addr*** 消息交换以查找客户端不知道的对等节点。同时，任一节点都可以发送一个 ping 消息来查看连接是否仍然活动。
- en: Now the block download can begin. If the node already has all blocks fully synchronized,
    then it listens for new blocks using the *Inv* protocol message; otherwise, it
    first checks whether it has a response to *inv* messages and have inventories
    already. If yes, then it requests the blocks using the ***Getdata*** protocol
    message; if not, then it requests inventories using the *GetBlocks* message. This
    method was used until version 0.9.3.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以开始区块下载。如果节点已经完全同步了所有区块，那么它会使用 *Inv* 协议消息监听新区块；否则，它首先检查是否对 *inv* 消息有响应并且已经有了存货。如果有，那么它使用
    ***Getdata*** 协议消息请求区块；如果没有，那么它使用 *GetBlocks* 消息请求存货。这种方法一直被使用直到版本0.9.3。
- en: '![The bitcoin network](img/B05975_04_19.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![比特币网络](img/B05975_04_19.jpg)'
- en: Protocol visualization node discovery
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 协议可视化节点发现
- en: Initial block download can use blocks first or the headers-first method to synchronize
    blocks depending on the version of the bitcoin core client. The blocks-first method
    is very slow and was discontinued since version 0.10.0.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 初始区块下载可以使用区块优先或标题优先的方法来同步区块，具体取决于比特币核心客户端的版本。区块优先方法非常慢，在版本0.10.0之后被停止使用。
- en: Since version 0.10.0, the initial block download method named headers-first
    was introduced. This resulted in major performance improvement and the blockchain
    synchronization that used to take days to complete started taking only a few hours.
    The core idea is that the new node-first asks peers for block headers and validates
    them. Once this is completed, blocks are requested in parallel from all available
    peers as the blueprint of the complete chain is already downloaded in the form
    of the block header chain.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本0.10.0以来，引入了名为标题优先的初始区块下载方法。这导致了主要的性能改进，原本需要数天才能完成的区块链同步现在只需要几个小时。其核心思想是，新节点首先向对等方请求区块头并验证它们。一旦完成，就可以从所有可用的对等方并行请求区块，因为完整链的蓝图已经以区块头链的形式下载。
- en: In this method, when the client starts up, it checks whether the block chain
    is fully synchronized already if the header chain is already synchronized; if
    not, which is the case the first time the client starts up, it requests headers
    from other peers using the ***getHeaders*** message. If the block chain is fully
    synchronized, it listens for new blocks via *Inv* messages, and if it already
    has a fully synchronized header chain, then it requests blocks using *Getdata*
    protocol messages. The node also checks whether the header chain has more headers
    than blocks and then it requests blocks by issuing the *Getdata* protocol message.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方法中，当客户端启动时，它会检查区块链是否已完全同步，如果标题链已经同步，则会从其他对等方请求标题，如果没有，则会请求其他对等方的头部链。区块链已经完全同步，则通过
    *Inv* 消息监听新区块，如果已经完全同步了头部链，则使用 *Getdata* 协议消息请求区块。节点还会检查标题链是否比区块多，然后通过发出 *Getdata*
    协议消息请求区块。
- en: '![The bitcoin network](img/B05975_04_20.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![比特币网络](img/B05975_04_20.jpg)'
- en: Bitcoin Core Client >= 0.10.0 header and block synchronization, IBD = Initial
    block download and sync node means the node from where the blocks are being requested
    from
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币核心客户端 >= 0.10.0 标题和区块同步，IBD = 初始区块下载和同步节点指的是从该节点请求区块的节点
- en: '`Getblockchaininfo` and `getpeerinfo` RPCs were updated with a new functionality
    to cater for this change. An RPC, *getchaintips*, is used to list all known branches
    of the blockchain. This also includes headers only blocks. `Getblockchaininfo`
    is used to provide the information about the current state of the blockchain.
    `Getpeerinfo` is used to list both the number of blocks and the headers that are
    in common between peers.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`Getblockchaininfo` 和 `getpeerinfo` RPCs 更新了新功能以适应这一变化。一个名为 *getchaintips*
    的 RPC 用于列出区块链的所有已知分支。这也包括仅包含标题的区块。`Getblockchaininfo` 用于提供有关当前区块链状态的信息。`Getpeerinfo`
    用于列出对等方之间共有的区块数和标题数。'
- en: Wireshark can also be used to visualize message exchange between peers and can
    serve as an invaluable tool to learn about the Bitcoin protocol. A sample is shown
    here. This is a basic example showing the version, verack, getaddr, ping, addr,
    and inv messages.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Wireshark 也可以用于可视化对等方之间的消息交换，并且可以作为学习比特币协议的宝贵工具。这里展示了一个示例。这是一个基本示例，显示了版本、verack、getaddr、ping、addr
    和 inv 消息。
- en: In the details, valuable information such as the packet type, command name,
    and results of the protocol messages can be seen.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细信息中，可以看到诸如数据包类型、命令名称和协议消息结果等有价值的信息。
- en: '![The bitcoin network](img/image_04_023.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![比特币网络](img/image_04_023.jpg)'
- en: A sample block message in wireshark
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Wireshark中的样本块消息
- en: A protocol graph showing the flow of data between the two peers is shown here.
    This can help you understand when a node starts up and what type of messages are
    used.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 此处显示了两个对等方之间数据流动的协议图。 这可以帮助您了解节点何时启动以及使用了什么类型的消息。
- en: In the following example, the bitcoin dissector is used to analyze the traffic
    and identify the Bitcoin protocol commands.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，比特币解析器被用来分析流量并识别比特币协议命令。
- en: Exchange of messages such as the **version**, **getaddr**, and **getdata** can
    be seen in the following example along with the appropriate comment describing
    the message name. This exercise can be very useful in order to learn bitcoin and
    it is recommended that the experiments be carried out on the bitcoin testnet,
    where various messages and transactions can be sent over the network and then
    be analyzed by Wireshark.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，可以看到消息的交换，如**version**，**getaddr**和**getdata**，以及描述消息名称的适当注释。 这个练习对于学习比特币可能非常有用，建议在比特币测试网络上进行实验，可以在该网络上发送各种消息和交易，然后通过Wireshark进行分析。
- en: '![The bitcoin network](img/image_04_024.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![比特币网络](img/image_04_024.jpg)'
- en: 'There are 27 types of protocol messages in total, but they''re likely to increase
    over time as the protocol grows. The most commonly used protocol messages and
    their explanation are listed as follows:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 总共有27种协议消息，但随着协议的增长，它们很可能会增加。 最常用的协议消息及其解释如下：
- en: '**Version**: This is the first message that a node sends out to the network,
    advertising its version and block count. The remote node then replies with the
    same information and the connection is then established.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Version：** 这是节点向网络发送的第一个消息，宣传其版本和块计数。 然后，远程节点以相同的信息回复，连接随后建立。'
- en: '**Verack :** This is the response of the version message accepting the connection
    request.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Verack：** 这是版本消息的响应，接受连接请求。'
- en: '**Inv:** This is used by nodes to advertise their knowledge of blocks and transactions.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Inv：** 节点使用此消息广告其对块和交易的了解。'
- en: '**Getdata :** This is a response to inv, requesting a single block or transaction
    identified by its hash.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Getdata：** 这是对inv的响应，请求由其哈希标识的单个块或交易。'
- en: '**Getblocks:** This returns an *inv* packet containing the list of all blocks
    starting after the last known hash or 500 blocks.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Getblocks：** 这返回一个包含自上一个已知哈希或500个块之后的所有块列表的*inv*数据包。'
- en: '**Getheaders :** This is used to request block headers in a specified range.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Getheaders：** 这用于请求指定范围内的块头。'
- en: '**Tx :** This is used to send a transaction as a response to the getdata protocol
    message.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tx：** 这用于作为对getdata协议消息的响应发送交易。'
- en: '**Block:** This sends a block in response to the *getdata* protocol message.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Block：** 这是对*getdata*协议消息的响应，发送一个块。'
- en: '**Headers:** This packet returns up to 2,000 block headers as a reply to the
    getheaders request.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Headers：** 此数据包作为对getheaders请求的回复返回高达2000个块头。'
- en: '**Getaddr:** This is sent as a request to get information about known peers.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Getaddr：** 这作为获取已知对等方信息的请求发送。'
- en: '**Addr:** This provides information about nodes on the network. It contains
    the number of addresses and address list in the form of IP address and port number.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Addr：** 这提供有关网络上节点的信息。 它包含地址数量和地址列表，格式为IP地址和端口号。'
- en: '**Full client and SPV client**:Full clients are thick clients or full nodes
    that download the entire blockchain; this is the most secure method of validating
    the blockchain as a client. Bitcoin network nodes can operate in two fundamental
    modes: full client or lightweight SPV client. SPV clients are used to verify payments
    without requiring the download of a full blockchain. SPV nodes only keep a copy
    of block headers of the current valid longest blockchain. Verification is performed
    by looking at the merkle branch that links the transactions to the original block
    the transaction was accepted in. This is not very practical and requires a more
    practical approach, which was implemented with BIP37, where bloom filters were
    used to filter out relevant transactions only.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整客户端和SPV客户端：** 完整客户端是下载整个区块链的厚客户端或完整节点； 这是作为客户端验证区块链最安全的方法。 比特币网络节点可以以两种基本模式运行：完整客户端或轻量级SPV客户端。
    SPV客户端用于验证支付而无需下载完整的区块链。 SPV节点仅保留当前有效最长区块链的块头副本。 验证是通过查看将交易链接到交易被接受的原始块的默克尔分支来执行的。
    这不太实用，需要更实用的方法，该方法已使用BIP37实施，其中使用了布隆过滤器仅过滤出相关交易。'
- en: '**Bloom filters**:Bloom filter is basically a data structure (a bit vector
    with indexes) that is used to test the membership of an element in a probabilistic
    manner. It basically provides probabilistic lookup with false positives but no
    false negatives. Elements are added to the bloom filter after hashing them several
    times and then set the corresponding bits in the bit vector to 1 via the corresponding
    index. In order to check the presence of the element in the bloom filter, the
    same hash functions are applied and compared with the bits in the bit vector to
    see whether the same bits are set to 1\. Not every hash function (such as SHA1)
    is suitable for bloom filters as they need to be fast, independent, and uniformly
    distributed. The most commonly used hash functions for bloom filters are fnv,
    mumur, and Jenkins.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布隆过滤器**：布隆过滤器基本上是一种数据结构（带有索引的位向量），用于以概率方式测试元素的成员资格。它基本上提供了具有误报但没有误报的概率查询。元素被添加到布隆过滤器后，通过对它们进行多次哈希，然后将相应的位设置为1来设置位向量中的相应索引。为了检查元素在布隆过滤器中的存在，应用相同的哈希函数并将其与位向量中的位进行比较，以查看是否将相同的位设置为1。并非每个哈希函数（例如
    SHA1）都适用于布隆过滤器，因为它们需要快速、独立和均匀分布。布隆过滤器最常用的哈希函数是 fnv、mumur 和 Jenkins。'
- en: These filters are mainly used by simple payment verification SPV clients to
    request transactions and the merkle blocks they are interested in. A merkle block
    is a lightweight version of the block, which includes a block header, some hashes,
    a list of 1-bit flags, and a transaction count. This information can then be used
    to build a merkle tree. This is achieved by creating a filter that matches only
    those transaction and blocks that have been requested by the SPV client. Once
    version messages have been exchanged and connection has been established between
    peers, the nodes can set filters according to their requirements. These probabilistic
    filters offer a varying degree of privacy or precision depending upon how accurately
    or loosely they have been set. A strict bloom filter will only filter transactions
    that have been requested by the node but at the expense of the possibility of
    revealing the user addresses to adversaries who can correlate transactions with
    their IP addresses, thus compromising privacy. On the other hand, a loosely set
    filter can result in retrieving more unrelated transactions but will offer more
    privacy. Also, for SPV clients, bloom filters allow them to use low bandwidth
    as opposed to downloading all transactions for verification.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这些过滤器主要由简单支付验证（SPV）客户端使用，以请求交易和他们感兴趣的默克尔块。默克尔块是区块的轻量级版本，其中包括区块头、一些哈希、1位标志位列表和交易计数。然后可以使用这些信息构建默克尔树。这通过创建一个仅匹配SPV客户端请求的交易和块的过滤器来实现。一旦版本消息被交换并且节点之间建立了连接，节点就可以根据自己的需求设置过滤器。这些概率过滤器根据设置的精确程度或宽松程度提供不同程度的隐私或精度。严格的布隆过滤器只会过滤节点请求的交易，但会以泄露用户地址的可能性为代价，对手可能会将交易与他们的IP地址相关联，从而损害隐私。另一方面，宽松设置的过滤器可能导致检索更多不相关的交易，但会提供更多的隐私。此外，对于SPV客户端，布隆过滤器允许它们使用低带宽，而不是下载所有交易进行验证。
- en: '**BIP 37** proposed the bitcoin implementation of bloom filters and introduced
    three new messages to the Bitcoin protocol.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BIP 37** 提出了比特币布隆过滤器的实现，并向比特币协议引入了三个新消息。'
- en: '**Filterload:** This is used to set the bloom filter on the connection.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Filterload:** 这用于在连接上设置布隆过滤器。'
- en: '**Filteradd:** This adds a new data element to the current filter.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Filteradd:** 这将新的数据元素添加到当前过滤器中。'
- en: '**FilterClear**: This deletes the currently loaded filter.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FilterClear:** 这会删除当前加载的过滤器。'
- en: More details can be found in the BIP37 specification.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 更多细节可以在 BIP37 规范中找到。
- en: Wallets
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 钱包
- en: 'The wallet software is used to store private or public keys and bitcoin address.
    It performs various functions, such as receiving and sending bitcoins. Nowadays,
    software usually offers both functionalities: bitcoin client and wallet. On the
    disk, the bitcoin core client wallets are stored as the Berkeley DB file:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 钱包软件用于存储私钥或公钥和比特币地址。它执行各种功能，例如接收和发送比特币。现在，软件通常提供两种功能：比特币客户端和钱包。在磁盘上，比特币核心客户端钱包存储为伯克利数据库文件：
- en: '[PRE2]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`wallet.dat`: Berkeley DB (Btree, version 9, native byte-order)'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`wallet.dat`: 伯克利数据库（B树，版本9，本机字节顺序）'
- en: Private keys can be generated in different ways and are used by different types
    of wallets. Wallets do not store any coins, and there is no concept of wallets
    storing balance or coins for a user. In fact, in the bitcoin network, *coins* do
    not exist; instead, only transaction information is stored on the blockchain (more
    precisely, UTXO, unspent outputs), which are then used to calculate the amount
    of bitcoins.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 私钥可以以不同的方式生成，并由不同类型的钱包使用。钱包不存储任何硬币，也没有钱包为用户存储余额或硬币的概念。事实上，在比特币网络中，*硬币*并不存在；相反，只有交易信息存储在区块链上（更确切地说，是UTXO，未花费的输出），然后用于计算比特币的数量。
- en: Wallet types
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 钱包类型
- en: In bitcoin, there are different types of wallets that can be used to store private
    keys. As a software program, they also provide some functions to the users to
    manage and carry out transactions on the bitcoin network.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在比特币中，有不同类型的钱包可以用来存储私钥。作为软件程序，它们还为用户提供一些功能，以在比特币网络上管理和执行交易。
- en: Non-deterministic wallets
  id: totrans-304
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 非确定性钱包
- en: These wallets contain randomly generated private keys and are also called *Just
    a Bunch of Key wallets*. The bitcoin core client generates some keys when first
    started and generates keys as and when required. Managing a large number of keys
    is very difficult and an error-prone process can lead to theft and loss of coins.
    Moreover, there is a need to create regular backups of the keys and protect them
    appropriately in order to prevent theft or loss.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这些钱包包含随机生成的私钥，也称为*一堆键钱包*。比特币核心客户端在首次启动时生成一些密钥，并在需要时生成密钥。管理大量密钥非常困难，一个错误的过程可能导致偷窃和硬币丢失。此外，有必要定期备份密钥并适当保护它们，以防止偷窃或丢失。
- en: Deterministic wallets
  id: totrans-306
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 确定性钱包
- en: In this type of wallet, keys are derived out of a seed value via hash functions.
    This seed number is generated randomly and is commonly represented by human-readable
    *mnemonic code* words. Mnemonic code words are defined in BIP39\. This phrase
    can be used to recover all keys and makes private key management comparatively
    easier.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种类型的钱包中，密钥通过哈希函数从种子值派生而来。这个种子号码是随机生成的，并且通常用人类可读的*助记码*词来表示。助记码词在BIP39中定义。这个短语可以用来恢复所有密钥，并使私钥管理相对容易。
- en: Hierarchical deterministic wallets
  id: totrans-308
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分层确定性钱包
- en: Defined in BIP32 and BIP44, HD wallets store keys in a tree structure derived
    from a seed. The seed generates the parent key (master key), which is used to
    generate child keys and, subsequently, grandchild keys. Key generation in HD wallets
    does not generate keys directly; instead, it produces some information (private
    key generation information) that can be used to generate a sequence of private
    keys. The complete hierarchy of private keys in an HD wallet is easily recoverable
    if the master private key is known. It is because of this property that HD wallets
    are very easy to maintain and are highly portable.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在BIP32和BIP44中定义，HD钱包将密钥存储在从种子派生的树结构中。种子生成父密钥（主密钥），用于生成子密钥，随后生成孙密钥。HD钱包中的密钥生成不直接生成密钥；相反，它产生一些信息（私钥生成信息），可以用来生成一系列私钥。如果已知主私钥，HD钱包中的私钥完整层次结构很容易恢复。正是因为这个属性，HD钱包非常容易维护，并且非常便携。
- en: Brain wallets
  id: totrans-310
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 大脑钱包
- en: The master private key can also be derived from the hash of passwords that are
    memorized. The key idea is that this passphrase is used to derive the private
    key and if used in HD wallets, this can result in a full HD wallet that is derived
    from a single memorized password. This is known as brain wallet. This method is
    prone to password guessing and brute force attacks but techniques such as *key
    stretching* can be used to slow down the progress made by the attacker.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 主私钥也可以从被记忆的密码的哈希派生出来。关键的想法是这个密码用于派生私钥，如果在HD钱包中使用，这可以导致从单个记忆的密码派生出的完整HD钱包。这被称为大脑钱包。这种方法容易受到密码猜测和暴力破解攻击，但是可以使用*密钥延展*等技术来减慢攻击者的进展。
- en: Paper wallets
  id: totrans-312
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 纸质钱包
- en: As the name implies, this is a paper-based wallet with the required key material
    printed on it. It requires physical security to be stored. Paper wallets can be
    generated online from various service providers, such as [https://bitcoinpaperwallet.com/](https://bitcoinpaperwallet.com/)
    or [https://www.bitaddress.org/](https://www.bitaddress.org/).
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，这是一个纸质钱包，上面打印了所需的密钥材料。它需要物理安全来存储。纸质钱包可以从各种服务提供商在线生成，例如[https://bitcoinpaperwallet.com/](https://bitcoinpaperwallet.com/)或[https://www.bitaddress.org/](https://www.bitaddress.org/)。
- en: Hardware wallets
  id: totrans-314
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 硬件钱包
- en: Another method is to use a tamper-resistant device to store keys. This tamper-resistant
    device can be custom-built or with the advent of NFC-enabled phones, this can
    also be a **secure element** (**SE**) in NFC phones. Trezor and Ledger wallets
    (various types) are the most commonly used bitcoin hardware wallets.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用防篡改设备来存储密钥。这种防篡改设备可以是定制的，或者随着NFC手机的出现，它也可以是NFC手机中的**安全元素**（**SE**）。Trezor和Ledger钱包（各种类型）是最常用的比特币硬件钱包。
- en: '![Hardware wallets](img/B05975_04_23.jpg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![硬件钱包](img/B05975_04_23.jpg)'
- en: Trezor Wallet
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: Trezor钱包
- en: Online wallets
  id: totrans-318
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 线上钱包
- en: Online wallets, as the name implies, are stored entirely online and are provided
    as a service usually via cloud. They provide a web interface to the users to manage
    their wallets and perform various functions such as making and receiving payments.
    They are easy to use but imply that the user trust the online wallet service provider.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名称所示，线上钱包完全存储于网络上，并通常通过云服务提供。它们为用户提供一个网页界面，用以管理钱包并执行诸如支付和接收款项等多种功能。它们使用方便，但前提是用户需要信任线上钱包服务提供商。
- en: Mobile wallets
  id: totrans-320
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 移动钱包
- en: Mobile wallets, as the name suggests, are installed on mobile devices. They
    can provide various methods to make payments, most notably the ability to use
    smart phone cameras to scan QR codes quickly and make payments. Mobile wallets
    are available for the Android platform and iOS, for example, breadwallet, copay,
    and Jaxx.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 如名称所示，移动钱包安装在移动设备上。它们可以提供各种支付方法，最显著的是能够使用智能手机相机快速扫描二维码并进行支付。移动钱包适用于Android平台和iOS，例如breadwallet、copay和Jaxx。
- en: '![Mobile wallets](img/image_04_026.jpg)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![移动钱包](img/image_04_026.jpg)'
- en: Jaxx Mobile wallet
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: Jaxx移动钱包
- en: Bitcoin payments
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比特币支付
- en: Bitcoins can be accepted as payments using various techniques. Bitcoin is not
    recognized as a legal currency in many jurisdictions, but it is increasingly being
    accepted as a payment method by many online merchants and e-commerce websites.
    There are a numbers of ways in which buyers can pay the business that accepts
    bitcoins. For example, in an online shop, bitcoin merchant solutions can be used,
    whereas in traditional physical shops, point of sale terminals and other specialized
    hardware can be used. Customers can simply scan the QR barcode with the seller's
    payment URI in it and pay using their mobile devices. Bitcoin URIs allow users
    to make payments by simply clicking on links or scanning QR codes. **URI** (**Uniform
    Resource Idenfier**) is basically a string that represents the transaction information.
    It is defined in BIP21\. The QR code can be displayed near the point of the sale
    terminal. Nearly all bitcoin wallets support this feature.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 使用各种技术可以接受比特币作为支付。虽然比特币在许多司法管辖区内并未被认可为合法货币，但它越来越多地被许多在线商家和电子商务网站接受为支付方式。有许多方法可以让买家向接受比特币的商家支付。例如，在线商店中可以使用比特币商家解决方案，而在传统的实体商店中，可以使用销售点终端和其他专用硬件。顾客可以简单地扫描含有卖家支付URI的二维码，并通过移动设备进行支付。比特币URI允许用户通过点击链接或扫描二维码来进行支付。**URI**（**统一资源标识符**）基本上是代表交易信息的字符串。它在BIP21中定义。二维码可以显示在销售终端附近。几乎所有的比特币钱包都支持这一功能。
- en: Business can use the following screenshot to advertise that they can accept
    bitcoins as payment.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 商家可以使用以下截图来宣传他们可以接受比特币作为支付方式。
- en: '![Bitcoin payments](img/image_04_027.jpg)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![比特币支付](img/image_04_027.jpg)'
- en: bitcoin accepted here logo
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币接受此处标志
- en: Various payment solutions, such as xbtterminal and 34 bytes bitcoin POS terminal
    are available commercially.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 各种支付解决方案，如xbtterminal和34字节比特币POS终端，均可商业购买。
- en: '![Bitcoin payments](img/B05975_04_26.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![比特币支付](img/B05975_04_26.jpg)'
- en: 34 bytes POS solution.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 34字节POS解决方案。
- en: Bitcoin payment processor, offered by many online service providers, allows
    integration with e-commerce websites. A simple Internet search can reveal many
    options.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币支付处理器，由许多在线服务提供商提供，支持与电子商务网站集成。简单的互联网搜索可以揭示许多选项。
- en: 'Various BIPs have been proposed and finalized in order to introduce and standardize
    bitcoin payments. Most notably, BIP 70 (secure payment protocol) describes the
    protocol for secure communication between a merchant and customers. This protocol
    uses X.509 certificates for authentication and runs over HTTP and HTTPS. There
    are three messages in this protocol: PaymentRequest, Payment, and PaymentACK.
    The key features of this proposal is defence against man-in-the-middle attacks
    and secure proof of payment. Man in-the-middle attacks can result in a scenario
    where the attacker is sitting between the merchant and the buyer and it would
    seem to the buyer that they are talking to the merchant, but in fact, the *man
    in the middle* is interacting with the buyer instead of the merchant. This can
    result in manipulation of the merchant''s bitcoin address to defraud the buyer.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 已经提出并最终确定了各种BIP，以引入和规范化比特币支付。最值得注意的是，BIP70（安全支付协议）描述了商户和客户之间进行安全通信的协议。该协议使用X.509证书进行身份验证，并在HTTP和HTTPS上运行。该协议中有三条消息：PaymentRequest、Payment和PaymentACK。这一提议的关键特点是防范中间人攻击和安全的支付证明。中间人攻击可能导致这样一种情况：攻击者位于商户和买家之间，买家看起来似乎在与商户交谈，但实际上，“中间人”正在与买家而不是商户交互。这可能导致篡改商户的比特币地址以欺诈买家。
- en: Several others BIPs, such as BIP71 and BIP72, have also been proposed to standardize
    payment message encapsulation and URI scheme to support BIP70.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他几个BIP，比如BIP71和BIP72，也已经被提出，以规范支付消息封装和URI方案，以支持BIP70。
- en: Bitcoin lightning network, a solution for scalable off-chain instant payments,
    was introduced in early 2016, which allows off-blockchain payments. The network
    makes use of payments channels that run off the blockchain. This allows greater
    speed and scalability of bitcoin. This paper is available at [https://lightning.network/](https://lightning.network/)
    and interested readers are encouraged to read the paper in order to understand
    the theory and rationale behind this invention.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币闪电网络，是一个可扩展的链下即时支付解决方案，于2016年初推出，允许链下支付。该网络利用在区块链之外运行的支付通道。这使得比特币的速度和可扩展性更大。此论文可在[https://lightning.network/](https://lightning.network/)获取，鼓励感兴趣的读者阅读论文，以了解这一发明背后的理论和基础。
- en: Bitcoin investment and buying and selling bitcoins
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比特币投资和买卖比特币
- en: There are many online exchanges where users can buy and sell bitcoins. This
    is a big business on the Internet now and it offers bitcoin trading, CFDs, spread
    betting, margin trading, and various other choices. Traders can buy bitcoins or
    trade by opening long or short positions to make profit when bitcoin's price goes
    up or down. Several other features, such as exchanging bitcoins for other virtual
    currencies, are also possible, and many online bitcoin exchanges provide this
    function. Advanced market data, trading strategies, charts, and relevant data
    to support traders is also available. An example is shown from **CEX.IO** here.
    Other exchanges offer similar types of services.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多在线交易所，用户可以在那里买卖比特币。这现在是互联网上的一个大生意，它提供比特币交易、差价合约、点差投注、保证金交易以及各种其他选择。交易员可以通过开设多头或空头头寸来购买比特币或交易，从而在比特币价格上涨或下跌时获利。还有其他一些功能，比如将比特币兑换成其他虚拟货币，也是可能的，许多在线比特币交易所提供了这个功能。还提供了高级市场数据、交易策略、图表和相关数据，以支持交易员。这里展示了**CEX.IO**的一个示例。其他交易所提供类似类型的服务。
- en: '![Bitcoin investment and buying and selling bitcoins](img/image_04_029.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![比特币投资和买卖比特币](img/image_04_029.jpg)'
- en: Example of bitcoin exchange cex.io
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币交易所 cex.io 的示例
- en: 'The following screenshot shows the order book at the exchange where all buy
    and sell orders are listed:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了交易所的订单簿，其中列出了所有的买单和卖单：
- en: '![Bitcoin investment and buying and selling bitcoins](img/image_04_030.jpg)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![比特币投资和买卖比特币](img/image_04_030.jpg)'
- en: Example of bitcoin order book at exchange cex.io
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币交易所 cex.io 的订单簿示例
- en: Bitcoin installation
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比特币安装
- en: 'The bitcoin core client can be installed from [https://bitcoin.org/en/download](https://bitcoin.org/en/download).
    This is available for different architectures and platforms ranging from x86 windows
    to ARM Linux, as shown in the following image:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币核心客户端可从[https://bitcoin.org/en/download](https://bitcoin.org/en/download)下载安装。该软件适用于不同的架构和平台，从x86
    Windows到ARM Linux，如下图所示：
- en: '![Bitcoin installation](img/image_04_031.jpg)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![比特币安装](img/image_04_031.jpg)'
- en: Setting up a bitcoin node
  id: totrans-346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置比特币节点
- en: A sample run of the bitcoin core installation on Ubuntu is shown here; for other
    platforms, you can get details from [www.bitcoin.org](http://www.bitcoin.org/).
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处显示了在Ubuntu上运行比特币核心安装的示例；对于其他平台，可以从[www.bitcoin.org](http://www.bitcoin.org/)获取详细信息。
- en: '![Setting up a bitcoin node](img/image_04_032.jpg)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![设置比特币节点](img/image_04_032.jpg)'
- en: 'Step 2:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤2：
- en: '[PRE3]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Depending on the client required, users can use either of the following commands,
    or they can issue both commands at once:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需要的客户端，用户可以使用以下命令之一，或者同时发出两个命令：
- en: '[PRE4]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Setting up the source code
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置源代码
- en: 'The bitcoin source code can be downloaded and compiled if users wish to participate
    in the bitcoin code or for learning purpose. Git can be used to download the bitcoin
    source code:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户希望参与比特币代码或学习目的，可以下载并编译比特币源代码。可以使用Git下载比特币源代码：
- en: '[PRE5]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Change the directory to bitcoin:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 将目录更改为比特币：
- en: '[PRE6]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After the preceding steps are completed, the code can be compiled:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 当前步骤完成后，代码可以编译：
- en: '[PRE7]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Setting up bitcoin.conf
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置bitcoin.conf
- en: '`bitcoin.conf` file is a configuration file that is used by the bitcoin core
    client to save configuration settings. All command line options for the bitcoind
    client with the exception of `-conf` switch can be set up in the configuration
    file, and when bitcoin-qt or bitcoind will start up, it will take the configuration
    information from that file.'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`bitcoin.conf`文件是一个配置文件，被比特币核心客户端用来保存配置设置。所有bitcoind客户端的命令行选项（除了`-conf`开关）都可以在配置文件中设置，在bitcoin-qt或bitcoind启动时，将从该文件中获取配置信息。'
- en: In Linux systems, this is usually found in `$HOME/.bitcoin/`, or it can also
    specified in the command line using the `-conf=<file>` switch to bitcoind core
    client software.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux系统中，通常可以在`$HOME/.bitcoin/`中找到，或者也可以在命令行中使用`-conf=<file>`开关指定给bitcoind核心客户端软件。
- en: Starting up a node in testnet
  id: totrans-363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在测试网络中启动节点
- en: The bitcoin node can be started in the testnet mode if you want to test the
    bitcoin network and run an experiment. This is a faster network as compared to
    the live network and has relaxed rules for mining and transactions.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要测试比特币网络并进行实验，可以以测试网络模式启动比特币节点。与现场网络相比，这是一个更快的网络，并且对于挖矿和交易有更宽松的规定。
- en: Various faucet services are available for the bitcoin test network. One example
    is Bitcoin TestNet sandbox, where users can request bitcoins to be paid to their
    testnet bitcoin address. This can be accessed via [https://testnet.manu.backend.hamburg/](https://testnet.manu.backend.hamburg/).
    This is very useful for experimentation with transactions on test net.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于比特币测试网络的各种水龙头服务。一个例子是Bitcoin TestNet sandbox，用户可以请求比特币支付到他们的测试网比特币地址。可以通过[https://testnet.manu.backend.hamburg/](https://testnet.manu.backend.hamburg/)访问。这对于在测试网络上进行交易实验非常有用。
- en: 'The command line to start up test net is as follows:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 启动测试网络的命令行如下：
- en: '[PRE8]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Starting up a node in regtest
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在regtest中启动节点
- en: The regtest mode (regression testing mode) can be used to create a local blockchain
    for testing purposes.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用regtest模式（回归测试模式）创建用于测试的本地区块链。
- en: 'The following commands can be used to start up a node in the reg test mode:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令启动regtest模式中的节点：
- en: '[PRE9]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Blocks can be generated using the following command:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令生成区块：
- en: '[PRE10]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Relevant log messages can be viewed in the `.bitcoin/regtest` directory on a
    Linux system under `debug.log`.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux系统中，可以在`.bitcoin/regtest`目录下的`debug.log`中查看相关日志消息。
- en: '![Starting up a node in regtest](img/image_04_033.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: '![在regtest中启动节点](img/image_04_033.jpg)'
- en: 'After block generation, the balance can be viewed as follows:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成区块后，可以通过以下方式查看余额：
- en: '[PRE11]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The node can be stopped using this:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令停止节点：
- en: '[PRE12]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Starting up a node in live mainnet
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在主网中启动节点
- en: '*Bitcoind* is the core client software that can be run as a daemon, and it
    provides the JSON RPC interface. *Bitcoin-cli* is the command line feature-rich
    tool to interact with the daemon; the daemon then interacts with the blockchain
    and performs various functions. Bitcoin-cli calls only JSON-RPC functions and
    does not perform any actions on its own on the blockchain.'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '***Bitcoind***是可以作为守护程序运行的核心客户端软件，并提供JSON RPC接口。*Bitcoin-cli*是用于与守护程序交互的功能丰富的命令行工具；然后守护程序与区块链交互并执行各种功能。
    Bitcoin-cli仅调用JSON-RPC函数，不会在区块链上执行任何操作。'
- en: '*Bitcoin-qt* is the bitcoin core client GUI. When the wallet software starts
    up first, it verifies the blocks on the disk and then starts up and shows the
    following GUI:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bitcoin-qt*是比特币核心客户端的图形用户界面。当钱包软件首次启动时，它会验证磁盘上的区块，然后启动并显示以下图形用户界面：'
- en: '![Starting up a node in live mainnet](img/image_04_034.jpg)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![在真实主网中启动一个节点](img/image_04_034.jpg)'
- en: Bitcoin Core QT client, just after installation, showing that blockchain is
    not in sync
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: Bitcoin Core QT客户端在安装后显示区块链未同步
- en: The verification process is not specific to the Bitcoin-qt client; it is performed
    by the *bitcoind* client as well.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 验证过程不仅适用于比特币-qt客户端；也可以由*bitcoind*客户端执行。
- en: Experimenting with bitcoin-cli
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用bitcoin-cli进行实验
- en: Bitcoin-cli is the command-line interface available with the bitcoin core client
    and can be used to perform various functions using the RPC interface provided
    by the bitcoin core client.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: Bitcoin-cli是比特币核心客户端提供的命令行接口，并且可以使用比特币核心客户端提供的RPC接口执行各种功能。
- en: '![Experimenting with bitcoin-cli](img/image_04_035.jpg)'
  id: totrans-388
  prefs: []
  type: TYPE_IMG
  zh: '![使用bitcoin-cli进行实验](img/image_04_035.jpg)'
- en: A sample run of bitcoin-cli getinfo; the same format can be used to invoke other
    commands
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 运行bitcoin-cli getinfo的示例；相同格式可用于调用其他命令
- en: 'A list of all commands can be shown via the following command:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下命令显示所有命令的列表：
- en: '![Experimenting with bitcoin-cli](img/image_04_036.jpg)'
  id: totrans-391
  prefs: []
  type: TYPE_IMG
  zh: '![使用bitcoin-cli进行实验](img/image_04_036.jpg)'
- en: Testnet bitcoin-cli, this is just the first few lines of the output, actual
    output has many commands
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: Testnet bitcoin-cli，这只是输出的前几行，实际的输出有很多命令。
- en: '**HTTP REST**:Starting from bitcoin core client 0.10.0, the HTTP REST interface
    is also available. By default, this runs on the same TCP port 8332 as JSON-RPC.'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTTP REST**：从比特币核心客户端0.10.0开始，也提供了HTTP REST接口。默认情况下，它在与JSON-RPC相同的TCP端口8332上运行。'
- en: Bitcoin programming and the command-line interface
  id: totrans-394
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比特币编程和命令行界面
- en: Bitcoin programming is a very rich field now. The bitcoin core client exposes
    various JSON RPC commands that can be used to construct raw transactions and perform
    other functions via custom scripts or programs. Also, the command line tool Bitcoin-cli
    is available, which makes use of the JSON-RPC interface and provides a rich toolset
    to work with Bitcoin.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 比特币编程现在非常丰富。比特币核心客户端提供了各种JSON RPC命令，可以用于构建原始交易，并通过自定义脚本或程序执行其他功能。此外，还提供了命令行工具Bitcoin-cli，该工具利用JSON-RPC接口，并提供了丰富的工具集来处理比特币。
- en: These APIs are also available via many online service provider in the form of
    bitcoin APIs, and they provide a simple HTTP REST interface. Bitcoin APIs, such
    as `blockchain.info` and bitpay, block.io, and many others, offer a myriad of
    options to develop bitcoin-based solutions.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 这些API也可以通过许多在线服务提供商以比特币API的形式获得，并提供简单的HTTP REST接口。比特币API，比如`blockchain.info`和bitpay、block.io等，提供了大量选项以开发基于比特币的解决方案。
- en: Various libraries are available for bitcoin programming. A list is shown as
    follows, and those if you interested can further explore the libraries.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多用于比特币编程的库可用。下面显示了一个列表，如果您有兴趣，可以进一步探索这些库。
- en: '**Libbitcoin**: Available at [https://libbitcoin.dyne.org/](https://libbitcoin.dyne.org/)
    and provides powerful command line utilities and clients. **Pycoin**: Available
    at [https://github.com/richardkiss/pycoin](https://github.com/richardkiss/pycoin),
    is a library for Python.'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '**Libbitcoin**：可在[https://libbitcoin.dyne.org/](https://libbitcoin.dyne.org/)找到，并提供功能强大的命令行实用工具和客户端。**Pycoin**：可在[https://github.com/richardkiss/pycoin](https://github.com/richardkiss/pycoin)找到，是Python的库。'
- en: '**Bitcoinj**: This library is available at [https://bitcoinj.github.io/](https://bitcoinj.github.io/)
    and is implemented in Java.'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bitcoinj**：此库可在[https://bitcoinj.github.io/](https://bitcoinj.github.io/)上找到，并使用Java实现。'
- en: 'There are many online bitcoin APIs available; the most commonly used APIs are
    listed as follows:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多在线比特币API可用；以下列出了最常用的API：
- en: '[https://bitcore.io/](https://bitcore.io/)'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bitcore.io/](https://bitcore.io/)'
- en: '[https://bitcoinjs.org/](https://bitcoinjs.org/)'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bitcoinjs.org/](https://bitcoinjs.org/)'
- en: '[https://blockchain.info/api](https://blockchain.info/api) All APIs offer more
    or less the same type of functionality, and it gets difficult to choose which
    API is the best.'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://blockchain.info/api](https://blockchain.info/api) 所有API提供的功能几乎相同，很难选择哪个API最好。'
- en: Bitcoin improvement proposals (BIPs)
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比特币改进提案（BIPs）
- en: 'These documents are used to propose or inform the bitcoin community about the
    improvements suggested, the design issues, or information about some aspects of
    the bitcoin ecosystem. There are three types of bitcoin improvement proposals,
    abbreviated as BIPs:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文档用于建议或通知比特币社区提出的改进、设计问题，或者比特币生态系统某些方面的信息。有三种比特币改进提案，简称为BIPs：
- en: '**Standard BIP**: Used to describe the major changes that have a major impact
    on the bitcoin system, for example, block size changes, network protocol changes,
    or transaction verification changes.'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准 BIP**：用于描述对比特币系统产生重大影响的主要更改，例如区块大小更改、网络协议更改或交易验证更改。'
- en: '**Process BIP**: A major difference between standard and process BIPs is that
    standard BIPs cover protocol changes, whereas process BIPs usually deal with proposing
    a change in a process that is outside the core Bitcoin protocol. These are implemented
    only after a consensus among bitcoin users.'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流程 BIP**：标准 BIP 和流程 BIP 的主要区别在于，标准 BIP 涵盖协议更改，而流程 BIP 通常涉及提议改变核心比特币协议之外的流程。这些只有在比特币用户之间达成共识后才会实施。'
- en: '**Informational BIP**: These are usually used to just advise or record some
    information about the bitcoin ecosystem, such as design issues.'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息性 BIP**：通常用于仅建议或记录有关比特币生态系统的一些信息，例如设计问题。'
- en: Summary
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter introduced bitcoin and related concepts. It started with some history
    and basic definitions related to bitcoin. Concepts such as keys and addresses
    along with public keys and private keys were introduced. How transactions work
    in the bitcoin network (and related concepts such as scripts, Opcodes, and types
    of transactions) were also discussed. Moreover, blockchain, which underpins the
    bitcoin network, was also introduced. Along with that, related concepts such as
    mining, proof of work, mining systems, and wallets were presented. Finally, some
    practical information regarding setting up bitcoin clients, the usage of bitcoin-cli,
    and an introduction to different bitcoin networks was also provided. In the next
    chapter, alternative currencies, and related concepts will be introduced.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了比特币及相关概念。从一些与比特币相关的历史和基本定义开始。介绍了诸如密钥和地址以及公钥和私钥等概念。还讨论了比特币网络中的交易工作原理（以及脚本、操作码和交易类型等相关概念）。此外，还介绍了作为比特币网络基础的区块链。还介绍了与此相关的概念，如挖矿、工作证明、挖矿系统和钱包。最后，还提供了有关设置比特币客户端、使用
    bitcoin-cli 以及介绍不同比特币网络的一些实用信息。在下一章中，将介绍替代货币及相关概念。
